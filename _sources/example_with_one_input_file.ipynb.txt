{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Example : k fold cross-validation with an input file \n",
    "\n",
    "DeepBiome package takes microbiome abundance data as input and uses the phylogenetic taxonomy to guide the decision of the optimal number of layers and neurons in the deep learning architecture.\n",
    "\n",
    "To use DeepBiome, you can experiment (1) __k times repetition__ or (2) __k fold cross-validation__.\n",
    "For each experiment, we asuume that the dataset is given by\n",
    "- __A list of k input files for k times repetition.__\n",
    "- __One input file for k fold cross-validation.__\n",
    "\n",
    "This notebook contains an example of (2) __k fold cross-validation__ for the deep neural netowrk using deepbiome."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Load library\n",
    "\n",
    "First, we load the DeepBiome package. The DeepBiome package is built on the tensorflow and keras library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import logging\n",
    "import json\n",
    "from pkg_resources import resource_filename\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from deepbiome import deepbiome"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Prepare the dataset\n",
    "\n",
    "In this example, we assume that we have __one input file for k times repetition.__\n",
    "\n",
    "DeepBiome needs 3 data files as follows:\n",
    "1. **the tree information**\n",
    "1. **the input file**\n",
    "1. **y**\n",
    "\n",
    "In addition, we can set **the training index for each fold**. If we set the index file, DeepBiome builds the training set for each fold based on each fold index in the index file. If not, DeepBiome will generate the index file locally.\n",
    "        \n",
    "Each data should have the csv format as follow:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example of the tree information\n",
    "\n",
    "First we need a file about the phylogenetic tree information. This tree information file should have the format below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Genus</th>\n",
       "      <th>Family</th>\n",
       "      <th>Order</th>\n",
       "      <th>Class</th>\n",
       "      <th>Phylum</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Streptococcus</td>\n",
       "      <td>Streptococcaceae</td>\n",
       "      <td>Lactobacillales</td>\n",
       "      <td>Bacilli</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Tropheryma</td>\n",
       "      <td>Cellulomonadaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Veillonella</td>\n",
       "      <td>Veillonellaceae</td>\n",
       "      <td>Selenomonadales</td>\n",
       "      <td>Negativicutes</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Actinomyces</td>\n",
       "      <td>Actinomycetaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Flavobacterium</td>\n",
       "      <td>Flavobacteriaceae</td>\n",
       "      <td>Flavobacteriales</td>\n",
       "      <td>Flavobacteria</td>\n",
       "      <td>Bacteroidetes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Prevotella</td>\n",
       "      <td>Prevotellaceae</td>\n",
       "      <td>Bacteroidales</td>\n",
       "      <td>Bacteroidia</td>\n",
       "      <td>Bacteroidetes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Porphyromonas</td>\n",
       "      <td>Porphyromonadaceae</td>\n",
       "      <td>Bacteroidales</td>\n",
       "      <td>Bacteroidia</td>\n",
       "      <td>Bacteroidetes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Parvimonas</td>\n",
       "      <td>Clostridiales_Incertae_Sedis_XI</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Fusobacterium</td>\n",
       "      <td>Fusobacteriaceae</td>\n",
       "      <td>Fusobacteriales</td>\n",
       "      <td>Fusobacteria</td>\n",
       "      <td>Fusobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Propionibacterium</td>\n",
       "      <td>Propionibacteriaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Gemella</td>\n",
       "      <td>Bacillales_Incertae_Sedis_XI</td>\n",
       "      <td>Bacillales</td>\n",
       "      <td>Bacilli</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Rothia</td>\n",
       "      <td>Micrococcaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Granulicatella</td>\n",
       "      <td>Carnobacteriaceae</td>\n",
       "      <td>Lactobacillales</td>\n",
       "      <td>Bacilli</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Neisseria</td>\n",
       "      <td>Neisseriaceae</td>\n",
       "      <td>Neisseriales</td>\n",
       "      <td>Betaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Lactobacillus</td>\n",
       "      <td>Lactobacillaceae</td>\n",
       "      <td>Lactobacillales</td>\n",
       "      <td>Bacilli</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Megasphaera</td>\n",
       "      <td>Veillonellaceae</td>\n",
       "      <td>Selenomonadales</td>\n",
       "      <td>Negativicutes</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Catonella</td>\n",
       "      <td>Lachnospiraceae</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Atopobium</td>\n",
       "      <td>Coriobacteriaceae</td>\n",
       "      <td>Coriobacteriales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Campylobacter</td>\n",
       "      <td>Campylobacteraceae</td>\n",
       "      <td>Campylobacterales</td>\n",
       "      <td>Epsilonproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Capnocytophaga</td>\n",
       "      <td>Flavobacteriaceae</td>\n",
       "      <td>Flavobacteriales</td>\n",
       "      <td>Flavobacteria</td>\n",
       "      <td>Bacteroidetes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Solobacterium</td>\n",
       "      <td>Erysipelotrichaceae</td>\n",
       "      <td>Erysipelotrichales</td>\n",
       "      <td>Erysipelotrichia</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Moryella</td>\n",
       "      <td>Lachnospiraceae</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>TM7_genera_incertae_sedis</td>\n",
       "      <td>TM7_genera_incertae_sedis</td>\n",
       "      <td>TM7_genera_incertae_sedis</td>\n",
       "      <td>TM7_genera_incertae_sedis</td>\n",
       "      <td>TM7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Staphylococcus</td>\n",
       "      <td>Staphylococcaceae</td>\n",
       "      <td>Bacillales</td>\n",
       "      <td>Bacilli</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Filifactor</td>\n",
       "      <td>Peptostreptococcaceae</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Oribacterium</td>\n",
       "      <td>Lachnospiraceae</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Burkholderia</td>\n",
       "      <td>Burkholderiaceae</td>\n",
       "      <td>Burkholderiales</td>\n",
       "      <td>Betaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Sneathia</td>\n",
       "      <td>Leptotrichiaceae</td>\n",
       "      <td>Fusobacteriales</td>\n",
       "      <td>Fusobacteria</td>\n",
       "      <td>Fusobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Treponema</td>\n",
       "      <td>Spirochaetaceae</td>\n",
       "      <td>Spirochaetales</td>\n",
       "      <td>Spirochaetes</td>\n",
       "      <td>Spirochaetes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Moraxella</td>\n",
       "      <td>Moraxellaceae</td>\n",
       "      <td>Pseudomonadales</td>\n",
       "      <td>Gammaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>Haemophilus</td>\n",
       "      <td>Pasteurellaceae</td>\n",
       "      <td>Pasteurellales</td>\n",
       "      <td>Gammaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>Selenomonas</td>\n",
       "      <td>Veillonellaceae</td>\n",
       "      <td>Selenomonadales</td>\n",
       "      <td>Negativicutes</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>Corynebacterium</td>\n",
       "      <td>Corynebacteriaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>Rhizobium</td>\n",
       "      <td>Rhizobiaceae</td>\n",
       "      <td>Rhizobiales</td>\n",
       "      <td>Alphaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>Bradyrhizobium</td>\n",
       "      <td>Bradyrhizobiaceae</td>\n",
       "      <td>Rhizobiales</td>\n",
       "      <td>Alphaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>Methylobacterium</td>\n",
       "      <td>Methylobacteriaceae</td>\n",
       "      <td>Rhizobiales</td>\n",
       "      <td>Alphaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>OD1_genera_incertae_sedis</td>\n",
       "      <td>OD1_genera_incertae_sedis</td>\n",
       "      <td>OD1_genera_incertae_sedis</td>\n",
       "      <td>OD1_genera_incertae_sedis</td>\n",
       "      <td>OD1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>Finegoldia</td>\n",
       "      <td>Clostridiales_Incertae_Sedis_XI</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>Microbacterium</td>\n",
       "      <td>Microbacteriaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>Sphingomonas</td>\n",
       "      <td>Sphingomonadaceae</td>\n",
       "      <td>Sphingomonadales</td>\n",
       "      <td>Alphaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>Chryseobacterium</td>\n",
       "      <td>Flavobacteriaceae</td>\n",
       "      <td>Flavobacteriales</td>\n",
       "      <td>Flavobacteria</td>\n",
       "      <td>Bacteroidetes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>Bacteroides</td>\n",
       "      <td>Bacteroidaceae</td>\n",
       "      <td>Bacteroidales</td>\n",
       "      <td>Bacteroidia</td>\n",
       "      <td>Bacteroidetes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>Bdellovibrio</td>\n",
       "      <td>Bdellovibrionaceae</td>\n",
       "      <td>Bdellovibrionales</td>\n",
       "      <td>Deltaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>Streptophyta</td>\n",
       "      <td>Chloroplast</td>\n",
       "      <td>Chloroplast</td>\n",
       "      <td>Chloroplast</td>\n",
       "      <td>Cyanobacteria_Chloroplast</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>Lachnospiracea_incertae_sedis</td>\n",
       "      <td>Lachnospiraceae</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>Paracoccus</td>\n",
       "      <td>Rhodobacteraceae</td>\n",
       "      <td>Rhodobacterales</td>\n",
       "      <td>Alphaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>Fastidiosipila</td>\n",
       "      <td>Ruminococcaceae</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>Pseudonocardia</td>\n",
       "      <td>Pseudonocardiaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            Genus                           Family  \\\n",
       "0                   Streptococcus                 Streptococcaceae   \n",
       "1                      Tropheryma                Cellulomonadaceae   \n",
       "2                     Veillonella                  Veillonellaceae   \n",
       "3                     Actinomyces                 Actinomycetaceae   \n",
       "4                  Flavobacterium                Flavobacteriaceae   \n",
       "5                      Prevotella                   Prevotellaceae   \n",
       "6                   Porphyromonas               Porphyromonadaceae   \n",
       "7                      Parvimonas  Clostridiales_Incertae_Sedis_XI   \n",
       "8                   Fusobacterium                 Fusobacteriaceae   \n",
       "9               Propionibacterium             Propionibacteriaceae   \n",
       "10                        Gemella     Bacillales_Incertae_Sedis_XI   \n",
       "11                         Rothia                   Micrococcaceae   \n",
       "12                 Granulicatella                Carnobacteriaceae   \n",
       "13                      Neisseria                    Neisseriaceae   \n",
       "14                  Lactobacillus                 Lactobacillaceae   \n",
       "15                    Megasphaera                  Veillonellaceae   \n",
       "16                      Catonella                  Lachnospiraceae   \n",
       "17                      Atopobium                Coriobacteriaceae   \n",
       "18                  Campylobacter               Campylobacteraceae   \n",
       "19                 Capnocytophaga                Flavobacteriaceae   \n",
       "20                  Solobacterium              Erysipelotrichaceae   \n",
       "21                       Moryella                  Lachnospiraceae   \n",
       "22      TM7_genera_incertae_sedis        TM7_genera_incertae_sedis   \n",
       "23                 Staphylococcus                Staphylococcaceae   \n",
       "24                     Filifactor            Peptostreptococcaceae   \n",
       "25                   Oribacterium                  Lachnospiraceae   \n",
       "26                   Burkholderia                 Burkholderiaceae   \n",
       "27                       Sneathia                 Leptotrichiaceae   \n",
       "28                      Treponema                  Spirochaetaceae   \n",
       "29                      Moraxella                    Moraxellaceae   \n",
       "30                    Haemophilus                  Pasteurellaceae   \n",
       "31                    Selenomonas                  Veillonellaceae   \n",
       "32                Corynebacterium               Corynebacteriaceae   \n",
       "33                      Rhizobium                     Rhizobiaceae   \n",
       "34                 Bradyrhizobium                Bradyrhizobiaceae   \n",
       "35               Methylobacterium              Methylobacteriaceae   \n",
       "36      OD1_genera_incertae_sedis        OD1_genera_incertae_sedis   \n",
       "37                     Finegoldia  Clostridiales_Incertae_Sedis_XI   \n",
       "38                 Microbacterium                Microbacteriaceae   \n",
       "39                   Sphingomonas                Sphingomonadaceae   \n",
       "40               Chryseobacterium                Flavobacteriaceae   \n",
       "41                    Bacteroides                   Bacteroidaceae   \n",
       "42                   Bdellovibrio               Bdellovibrionaceae   \n",
       "43                   Streptophyta                      Chloroplast   \n",
       "44  Lachnospiracea_incertae_sedis                  Lachnospiraceae   \n",
       "45                     Paracoccus                 Rhodobacteraceae   \n",
       "46                 Fastidiosipila                  Ruminococcaceae   \n",
       "47                 Pseudonocardia               Pseudonocardiaceae   \n",
       "\n",
       "                        Order                      Class  \\\n",
       "0             Lactobacillales                    Bacilli   \n",
       "1             Actinomycetales             Actinobacteria   \n",
       "2             Selenomonadales              Negativicutes   \n",
       "3             Actinomycetales             Actinobacteria   \n",
       "4            Flavobacteriales              Flavobacteria   \n",
       "5               Bacteroidales                Bacteroidia   \n",
       "6               Bacteroidales                Bacteroidia   \n",
       "7               Clostridiales                 Clostridia   \n",
       "8             Fusobacteriales               Fusobacteria   \n",
       "9             Actinomycetales             Actinobacteria   \n",
       "10                 Bacillales                    Bacilli   \n",
       "11            Actinomycetales             Actinobacteria   \n",
       "12            Lactobacillales                    Bacilli   \n",
       "13               Neisseriales         Betaproteobacteria   \n",
       "14            Lactobacillales                    Bacilli   \n",
       "15            Selenomonadales              Negativicutes   \n",
       "16              Clostridiales                 Clostridia   \n",
       "17           Coriobacteriales             Actinobacteria   \n",
       "18          Campylobacterales      Epsilonproteobacteria   \n",
       "19           Flavobacteriales              Flavobacteria   \n",
       "20         Erysipelotrichales           Erysipelotrichia   \n",
       "21              Clostridiales                 Clostridia   \n",
       "22  TM7_genera_incertae_sedis  TM7_genera_incertae_sedis   \n",
       "23                 Bacillales                    Bacilli   \n",
       "24              Clostridiales                 Clostridia   \n",
       "25              Clostridiales                 Clostridia   \n",
       "26            Burkholderiales         Betaproteobacteria   \n",
       "27            Fusobacteriales               Fusobacteria   \n",
       "28             Spirochaetales               Spirochaetes   \n",
       "29            Pseudomonadales        Gammaproteobacteria   \n",
       "30             Pasteurellales        Gammaproteobacteria   \n",
       "31            Selenomonadales              Negativicutes   \n",
       "32            Actinomycetales             Actinobacteria   \n",
       "33                Rhizobiales        Alphaproteobacteria   \n",
       "34                Rhizobiales        Alphaproteobacteria   \n",
       "35                Rhizobiales        Alphaproteobacteria   \n",
       "36  OD1_genera_incertae_sedis  OD1_genera_incertae_sedis   \n",
       "37              Clostridiales                 Clostridia   \n",
       "38            Actinomycetales             Actinobacteria   \n",
       "39           Sphingomonadales        Alphaproteobacteria   \n",
       "40           Flavobacteriales              Flavobacteria   \n",
       "41              Bacteroidales                Bacteroidia   \n",
       "42          Bdellovibrionales        Deltaproteobacteria   \n",
       "43                Chloroplast                Chloroplast   \n",
       "44              Clostridiales                 Clostridia   \n",
       "45            Rhodobacterales        Alphaproteobacteria   \n",
       "46              Clostridiales                 Clostridia   \n",
       "47            Actinomycetales             Actinobacteria   \n",
       "\n",
       "                       Phylum  \n",
       "0                  Firmicutes  \n",
       "1              Actinobacteria  \n",
       "2                  Firmicutes  \n",
       "3              Actinobacteria  \n",
       "4               Bacteroidetes  \n",
       "5               Bacteroidetes  \n",
       "6               Bacteroidetes  \n",
       "7                  Firmicutes  \n",
       "8                Fusobacteria  \n",
       "9              Actinobacteria  \n",
       "10                 Firmicutes  \n",
       "11             Actinobacteria  \n",
       "12                 Firmicutes  \n",
       "13             Proteobacteria  \n",
       "14                 Firmicutes  \n",
       "15                 Firmicutes  \n",
       "16                 Firmicutes  \n",
       "17             Actinobacteria  \n",
       "18             Proteobacteria  \n",
       "19              Bacteroidetes  \n",
       "20                 Firmicutes  \n",
       "21                 Firmicutes  \n",
       "22                        TM7  \n",
       "23                 Firmicutes  \n",
       "24                 Firmicutes  \n",
       "25                 Firmicutes  \n",
       "26             Proteobacteria  \n",
       "27               Fusobacteria  \n",
       "28               Spirochaetes  \n",
       "29             Proteobacteria  \n",
       "30             Proteobacteria  \n",
       "31                 Firmicutes  \n",
       "32             Actinobacteria  \n",
       "33             Proteobacteria  \n",
       "34             Proteobacteria  \n",
       "35             Proteobacteria  \n",
       "36                        OD1  \n",
       "37                 Firmicutes  \n",
       "38             Actinobacteria  \n",
       "39             Proteobacteria  \n",
       "40              Bacteroidetes  \n",
       "41              Bacteroidetes  \n",
       "42             Proteobacteria  \n",
       "43  Cyanobacteria_Chloroplast  \n",
       "44                 Firmicutes  \n",
       "45             Proteobacteria  \n",
       "46                 Firmicutes  \n",
       "47             Actinobacteria  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tree_information = pd.read_csv(resource_filename('deepbiome', 'tests/data/genus48_dic.csv'))\n",
    "tree_information"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This file has `.csv` format below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Genus,Family,Order,Class,Phylum\n",
      "Streptococcus,Streptococcaceae,Lactobacillales,Bacilli,Firmicutes\n",
      "Tropheryma,Cellulomonadaceae,Actinomycetales,Actinobacteria,Actinobacteria\n",
      "Veillonella,Veillonellaceae,Selenomonadales,Negativicutes,Firmicutes\n",
      "Actinomyces,Actinomycetaceae,Actinomycetales,Actinobacteria,Actinobacteria\n",
      "Flavobacterium,Flavobacteriaceae,Flavobacteriales,Flavobacteria,Bacteroidetes\n",
      "Prevotella,Prevotellaceae,Bacteroidales,Bacteroidia,Bacteroidetes\n",
      "Porphyromonas,Porphyromonadaceae,Bacteroidales,Bacteroidia,Bacteroidetes\n",
      "Parvimonas,Clostridiales_Incertae_Sedis_XI,Clostridiales,Clostridia,Firmicutes\n",
      "Fusobacterium,Fusobacteriaceae,Fusobacteriales,Fusobacteria,Fusobacteria\n",
      "Propionibacterium,Propionibacteriaceae,Actinomycetales,Actinobacteria,Actinobacteria\n",
      "Gemella,Bacillales_Incertae_Sedis_XI,Bacillales,Bacilli,Firmicutes\n",
      "Rothia,Micrococcaceae,Actinomycetales,Actinobacteria,Actinobacteria\n",
      "Granulicatella,Carnobacteriaceae,Lactobacillales,Bacilli,Firmicutes\n",
      "Neisseria,Neisseriaceae,Neisseriales,Betaproteobacteria,Proteobacteria\n",
      "Lactobacillus,Lactobacillaceae,Lactobacillales,Bacilli,Firmicutes\n",
      "Megasphaera,Veillonellaceae,Selenomonadales,Negativicutes,Firmicutes\n",
      "Catonella,Lachnospiraceae,Clostridiales,Clostridia,Firmicutes\n",
      "Atopobium,Coriobacteriaceae,Coriobacteriales,Actinobacteria,Actinobacteria\n",
      "Campylobacter,Campylobacteraceae,Campylobacterales,Epsilonproteobacteria,Proteobacteria\n",
      "Capnocytophaga,Flavobacteriaceae,Flavobacteriales,Flavobacteria,Bacteroidetes\n",
      "Solobacterium,Erysipelotrichaceae,Erysipelotrichales,Erysipelotrichia,Firmicutes\n",
      "Moryella,Lachnospiraceae,Clostridiales,Clostridia,Firmicutes\n",
      "TM7_genera_incertae_sedis,TM7_genera_incertae_sedis,TM7_genera_incertae_sedis,TM7_genera_incertae_sedis,TM7\n",
      "Staphylococcus,Staphylococcaceae,Bacillales,Bacilli,Firmicutes\n",
      "Filifactor,Peptostreptococcaceae,Clostridiales,Clostridia,Firmicutes\n",
      "Oribacterium,Lachnospiraceae,Clostridiales,Clostridia,Firmicutes\n",
      "Burkholderia,Burkholderiaceae,Burkholderiales,Betaproteobacteria,Proteobacteria\n",
      "Sneathia,Leptotrichiaceae,Fusobacteriales,Fusobacteria,Fusobacteria\n",
      "Treponema,Spirochaetaceae,Spirochaetales,Spirochaetes,Spirochaetes\n",
      "Moraxella,Moraxellaceae,Pseudomonadales,Gammaproteobacteria,Proteobacteria\n",
      "Haemophilus,Pasteurellaceae,Pasteurellales,Gammaproteobacteria,Proteobacteria\n",
      "Selenomonas,Veillonellaceae,Selenomonadales,Negativicutes,Firmicutes\n",
      "Corynebacterium,Corynebacteriaceae,Actinomycetales,Actinobacteria,Actinobacteria\n",
      "Rhizobium,Rhizobiaceae,Rhizobiales,Alphaproteobacteria,Proteobacteria\n",
      "Bradyrhizobium,Bradyrhizobiaceae,Rhizobiales,Alphaproteobacteria,Proteobacteria\n",
      "Methylobacterium,Methylobacteriaceae,Rhizobiales,Alphaproteobacteria,Proteobacteria\n",
      "OD1_genera_incertae_sedis,OD1_genera_incertae_sedis,OD1_genera_incertae_sedis,OD1_genera_incertae_sedis,OD1\n",
      "Finegoldia,Clostridiales_Incertae_Sedis_XI,Clostridiales,Clostridia,Firmicutes\n",
      "Microbacterium,Microbacteriaceae,Actinomycetales,Actinobacteria,Actinobacteria\n",
      "Sphingomonas,Sphingomonadaceae,Sphingomonadales,Alphaproteobacteria,Proteobacteria\n",
      "Chryseobacterium,Flavobacteriaceae,Flavobacteriales,Flavobacteria,Bacteroidetes\n",
      "Bacteroides,Bacteroidaceae,Bacteroidales,Bacteroidia,Bacteroidetes\n",
      "Bdellovibrio,Bdellovibrionaceae,Bdellovibrionales,Deltaproteobacteria,Proteobacteria\n",
      "Streptophyta,Chloroplast,Chloroplast,Chloroplast,Cyanobacteria_Chloroplast\n",
      "Lachnospiracea_incertae_sedis,Lachnospiraceae,Clostridiales,Clostridia,Firmicutes\n",
      "Paracoccus,Rhodobacteraceae,Rhodobacterales,Alphaproteobacteria,Proteobacteria\n",
      "Fastidiosipila,Ruminococcaceae,Clostridiales,Clostridia,Firmicutes\n",
      "Pseudonocardia,Pseudonocardiaceae,Actinomycetales,Actinobacteria,Actinobacteria\n",
      "\n"
     ]
    }
   ],
   "source": [
    "with open(resource_filename('deepbiome', 'tests/data/genus48_dic.csv')) as f:\n",
    "    print(f.read())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example of the input file\n",
    "\n",
    "Below is an example of the input file.\n",
    "This example has 1000 samples' microbiome abandunce. __The order of the microbiome should be same as the order of the microbiome in the Genus level in the tree information above.__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Streptococcus</th>\n",
       "      <th>Tropheryma</th>\n",
       "      <th>Veillonella</th>\n",
       "      <th>Actinomyces</th>\n",
       "      <th>Flavobacterium</th>\n",
       "      <th>Prevotella</th>\n",
       "      <th>Porphyromonas</th>\n",
       "      <th>Parvimonas</th>\n",
       "      <th>Fusobacterium</th>\n",
       "      <th>Propionibacterium</th>\n",
       "      <th>...</th>\n",
       "      <th>Microbacterium</th>\n",
       "      <th>Sphingomonas</th>\n",
       "      <th>Chryseobacterium</th>\n",
       "      <th>Bacteroides</th>\n",
       "      <th>Bdellovibrio</th>\n",
       "      <th>Streptophyta</th>\n",
       "      <th>Lachnospiracea_incertae_sedis</th>\n",
       "      <th>Paracoccus</th>\n",
       "      <th>Fastidiosipila</th>\n",
       "      <th>Pseudonocardia</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>841</td>\n",
       "      <td>0</td>\n",
       "      <td>813</td>\n",
       "      <td>505</td>\n",
       "      <td>5</td>\n",
       "      <td>3224</td>\n",
       "      <td>0</td>\n",
       "      <td>362</td>\n",
       "      <td>11</td>\n",
       "      <td>65</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>87</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2133</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1445</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>573</td>\n",
       "      <td>0</td>\n",
       "      <td>1278</td>\n",
       "      <td>82</td>\n",
       "      <td>85</td>\n",
       "      <td>69</td>\n",
       "      <td>154</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3638</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1259</td>\n",
       "      <td>0</td>\n",
       "      <td>805</td>\n",
       "      <td>650</td>\n",
       "      <td>0</td>\n",
       "      <td>1088</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>74</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>39</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>982</td>\n",
       "      <td>0</td>\n",
       "      <td>327</td>\n",
       "      <td>594</td>\n",
       "      <td>0</td>\n",
       "      <td>960</td>\n",
       "      <td>81</td>\n",
       "      <td>19</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>157</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1162</td>\n",
       "      <td>0</td>\n",
       "      <td>130</td>\n",
       "      <td>969</td>\n",
       "      <td>163</td>\n",
       "      <td>1515</td>\n",
       "      <td>167</td>\n",
       "      <td>4</td>\n",
       "      <td>162</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3945</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 48 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Streptococcus  Tropheryma  Veillonella  Actinomyces  Flavobacterium  \\\n",
       "0            841           0          813          505               5   \n",
       "1           1445           0            1          573               0   \n",
       "2           1259           0          805          650               0   \n",
       "3            982           0          327          594               0   \n",
       "4           1162           0          130          969             163   \n",
       "\n",
       "   Prevotella  Porphyromonas  Parvimonas  Fusobacterium  Propionibacterium  \\\n",
       "0        3224              0         362             11                 65   \n",
       "1        1278             82          85             69                154   \n",
       "2        1088              0           0             74                  0   \n",
       "3         960             81          19              9                  0   \n",
       "4        1515            167           4            162                  3   \n",
       "\n",
       "   ...  Microbacterium  Sphingomonas  Chryseobacterium  Bacteroides  \\\n",
       "0  ...               0            87                 0            0   \n",
       "1  ...               0             1                 2            0   \n",
       "2  ...               0             2                 8            1   \n",
       "3  ...             157             1                 0            4   \n",
       "4  ...               0             9                 0            0   \n",
       "\n",
       "   Bdellovibrio  Streptophyta  Lachnospiracea_incertae_sedis  Paracoccus  \\\n",
       "0             0             0                              0           0   \n",
       "1             0             0                              0           0   \n",
       "2            39             0                              0           0   \n",
       "3            60             0                              0           0   \n",
       "4             0             0                             60           0   \n",
       "\n",
       "   Fastidiosipila  Pseudonocardia  \n",
       "0               0            2133  \n",
       "1               0            3638  \n",
       "2               0            3445  \n",
       "3               0            3507  \n",
       "4               0            3945  \n",
       "\n",
       "[5 rows x 48 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = pd.read_csv(resource_filename('deepbiome', 'tests/data/onefile_x.csv'))\n",
    "x.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Streptococcus</th>\n",
       "      <th>Tropheryma</th>\n",
       "      <th>Veillonella</th>\n",
       "      <th>Actinomyces</th>\n",
       "      <th>Flavobacterium</th>\n",
       "      <th>Prevotella</th>\n",
       "      <th>Porphyromonas</th>\n",
       "      <th>Parvimonas</th>\n",
       "      <th>Fusobacterium</th>\n",
       "      <th>Propionibacterium</th>\n",
       "      <th>...</th>\n",
       "      <th>Microbacterium</th>\n",
       "      <th>Sphingomonas</th>\n",
       "      <th>Chryseobacterium</th>\n",
       "      <th>Bacteroides</th>\n",
       "      <th>Bdellovibrio</th>\n",
       "      <th>Streptophyta</th>\n",
       "      <th>Lachnospiracea_incertae_sedis</th>\n",
       "      <th>Paracoccus</th>\n",
       "      <th>Fastidiosipila</th>\n",
       "      <th>Pseudonocardia</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>1401</td>\n",
       "      <td>4</td>\n",
       "      <td>30</td>\n",
       "      <td>526</td>\n",
       "      <td>0</td>\n",
       "      <td>923</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>127</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4470</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>2655</td>\n",
       "      <td>6</td>\n",
       "      <td>106</td>\n",
       "      <td>74</td>\n",
       "      <td>0</td>\n",
       "      <td>952</td>\n",
       "      <td>76</td>\n",
       "      <td>13</td>\n",
       "      <td>158</td>\n",
       "      <td>125</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2826</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>335</td>\n",
       "      <td>0</td>\n",
       "      <td>71</td>\n",
       "      <td>259</td>\n",
       "      <td>67</td>\n",
       "      <td>718</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>167</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>246</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6527</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>649</td>\n",
       "      <td>69</td>\n",
       "      <td>966</td>\n",
       "      <td>1227</td>\n",
       "      <td>0</td>\n",
       "      <td>508</td>\n",
       "      <td>2</td>\n",
       "      <td>30</td>\n",
       "      <td>550</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4402</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>1258</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1119</td>\n",
       "      <td>0</td>\n",
       "      <td>2348</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>137</td>\n",
       "      <td>176</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2585</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 48 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Streptococcus  Tropheryma  Veillonella  Actinomyces  Flavobacterium  \\\n",
       "995           1401           4           30          526               0   \n",
       "996           2655           6          106           74               0   \n",
       "997            335           0           71          259              67   \n",
       "998            649          69          966         1227               0   \n",
       "999           1258           0            0         1119               0   \n",
       "\n",
       "     Prevotella  Porphyromonas  Parvimonas  Fusobacterium  Propionibacterium  \\\n",
       "995         923             25           0            127                  0   \n",
       "996         952             76          13            158                125   \n",
       "997         718              1           4              4                167   \n",
       "998         508              2          30            550                  0   \n",
       "999        2348             25           0            137                176   \n",
       "\n",
       "     ...  Microbacterium  Sphingomonas  Chryseobacterium  Bacteroides  \\\n",
       "995  ...               0             0                 7            0   \n",
       "996  ...               0             2                 0            0   \n",
       "997  ...               0           246                 0            0   \n",
       "998  ...               0             0                 0            0   \n",
       "999  ...               0             2                 0            0   \n",
       "\n",
       "     Bdellovibrio  Streptophyta  Lachnospiracea_incertae_sedis  Paracoccus  \\\n",
       "995             0             0                              0           0   \n",
       "996             0             0                              0           0   \n",
       "997             6             0                              0           0   \n",
       "998             0             6                              0           0   \n",
       "999             0             0                              0           0   \n",
       "\n",
       "     Fastidiosipila  Pseudonocardia  \n",
       "995               0            4470  \n",
       "996               0            2826  \n",
       "997               0            6527  \n",
       "998               0            4402  \n",
       "999               0            2585  \n",
       "\n",
       "[5 rows x 48 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This file has `.csv` format below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\"Streptococcus\",\"Tropheryma\",\"Veillonella\",\"Actinomyces\",\"Flavobacterium\",\"Prevotella\",\"Porphyromonas\",\"Parvimonas\",\"Fusobacterium\",\"Propionibacterium\",\"Gemella\",\"Rothia\",\"Granulicatella\",\"Neisseria\",\"Lactobacillus\",\"Megasphaera\",\"Catonella\",\"Atopobium\",\"Campylobacter\",\"Capnocytophaga\",\"Solobacterium\",\"Moryella\",\"TM7_genera_incertae_sedis\",\"Staphylococcus\",\"Filifactor\",\"Oribacterium\",\"Burkholderia\",\"Sneathia\",\"Treponema\",\"Moraxella\",\"Haemophilus\",\"Selenomonas\",\"Corynebacterium\",\"Rhizobium\",\"Bradyrhizobium\",\"Methylobacterium\",\"OD1_genera_incertae_sedis\",\"Finegoldia\",\"Microbacterium\",\"Sphingomonas\",\"Chryseobacterium\",\"Bacteroides\",\"Bdellovibrio\",\"Streptophyta\",\"Lachnospiracea_incertae_sedis\",\"Paracoccus\",\"Fastidiosipila\",\"Pseudonocardia\"\n",
      "841,0,813,505,5,3224,0,362,11,65,156,1,55,0,1,20,382,1,333,24,80,43,309,2,3,4,0,1,32,0,2,4,382,0,0,96,23,0,0,87,0,0,0,0,0,0,0,2133\n",
      "1445,0,1,573,0,1278,82,85,69,154,436,3,0,61,440,0,394,83,33,123,0,49,414,0,0,37,0,0,42,0,0,384,27,0,0,0,146,0,0,1,2,0,0,0,0,0,0,3638\n",
      "1259,0,805,650,0,1088,0,0,74,0,155,228,430,765,0,0,11,102,68,90,77,83,322,10,0,7,0,122,76,0,1,25,0,0,0,44,13,0,0,2,8,1,39,0,0,0,0,3445\n",
      "982,0,327,594,0,960,81,19,9,0,45,457,1049,0,3,450,19,170,388,147,0,0,41,63,0,1,0,0,121,0,0,1,0,0,0,0,344,0,157,1,0,4,60,0,0,0,0,3507\n",
      "1162,0,130,969,163,1515,167,4,162,3,12,0,48,73,93,259,52,0,201,85,14,14,434,2,0,0,0,0,187,0,0,188,45,0,0,0,4,0,0,9,0,0,0,0,60,0,0,3945\n",
      "1956,37,41,661,47,1555,374,7,142,19,61,226,0,30,52,0,6,480,142,148,9,575,12,0,0,0,0,3,168,0,56,50,0,0,0,98,989,0,0,12,0,0,0,0,0,0,0,2044\n",
      "1037,14,83,1595,132,305,103,174,1195,0,410,224,1,320,26,0,476,0,7,37,46,61,20,0,0,0,0,0,226,0,239,8,1,0,0,0,0,188,0,20,4,0,4,0,0,0,0,3044\n",
      "641,0,172,179,0,1312,84,9,81,376,128,223,160,0,532,155,89,355,1,282,0,0,25,0,0,43,0,9,311,0,0,0,0,0,0,0,845,0,0,8,0,0,0,0,0,0,0,3980\n",
      "852,146,504,99,2,376,116,152,67,0,120,3,23,2,34,0,127,75,240,60,42,0,9,0,15,0,62,0,13,0,197,187,396,0,0,20,51,0,0,3,0,0,0,0,0,0,0,6007\n",
      "901,3,187,1214,0,1508,675,0,107,49,318,2,393,5,3,65,4,285,79,11,0,0,4,3,0,0,1,0,729,0,0,173,0,0,0,0,254,0,0,0,0,0,1,0,29,0,0,2997\n",
      "677,60,635,45,268,2461,466,9,338,0,97,63,45,82,128,1,139,4,323,6,0,0,58,0,0,0,0,0,36,0,646,29,0,0,0,0,120,0,0,41,0,0,0,0,0,0,0,3223\n",
      "413,0,355,1258,0,583,48,107,250,5,102,204,287,4,0,18,2,145,454,11,0,79,104,25,164,1,0,100,55,0,1,33,206,0,0,10,81,0,0,0,0,0,0,0,0,0,0,4895\n",
      "351,99,17,268,0,912,4,96,847,472,67,8,440,16,0,0,247,0,165,83,0,0,0,0,4,0,0,0,275,0,21,1968,3,0,0,0,173,0,0,1,37,0,0,0,0,0,53,3373\n",
      "1829,0,32,77,0,1971,8,6,319,1,8,140,302,165,177,0,166,27,857,19,0,0,155,0,0,579,127,112,54,0,1,19,0,0,0,0,143,0,0,8,51,0,0,0,0,0,0,2647\n",
      "1089,0,4,30,0,847,51,42,48,0,211,1,24,0,81,1,687,494,758,27,0,0,123,7,0,0,0,1,310,0,6,4,780,0,0,4,1,0,0,0,0,0,2,0,0,0,0,4367\n",
      "1761,0,60,517,4,576,63,0,169,0,12,437,0,7,130,0,2,7,47,346,115,0,539,0,2,0,0,0,515,0,0,68,5,0,0,0,315,0,0,16,0,0,0,0,0,0,0,4287\n",
      "938,0,601,794,0,1836,52,6,10,0,1104,8,219,168,174,3,0,12,425,885,0,15,268,34,0,141,2,0,8,0,0,5,8,0,0,0,2,0,0,0,0,0,0,0,0,0,0,2282\n",
      "882,8,110,975,0,1042,11,3,211,0,15,22,56,0,47,140,5,4,194,109,0,403,129,6,0,10,0,3,19,0,1,591,2,2,0,6,0,0,0,1,0,0,0,0,0,0,0,4993\n",
      "1395,0,76,60,0,916,2,466,353,13,1,159,369,0,92,2,14,528,103,133,100,4,17,0,0,0,0,0,7,0,0,6,48,0,0,44,578,0,0,0,0,0,0,0,0,0,0,4514\n",
      "1150,3,168,1265,0,1328,14,0,432,14,140,0,1,179,77,0,92,55,33,123,0,8,844,0,0,82,34,113,14,0,0,99,26,0,0,0,14,14,0,24,49,0,0,0,0,0,0,3605\n",
      "352,0,20,48,0,1035,269,1,1,53,122,1,0,0,107,0,12,414,253,483,335,3,117,0,0,1,21,37,7,0,8,13,15,0,0,186,0,0,0,18,0,57,0,0,0,0,0,6011\n",
      "1120,0,124,1198,0,2161,795,1,483,0,0,5,8,16,78,7,22,3,62,203,0,0,148,0,0,68,0,2,22,0,0,23,148,0,0,0,127,0,0,2,0,0,0,0,0,0,0,3174\n",
      "406,5,6,1191,0,2582,239,155,81,0,2,183,4,7,483,0,190,0,10,8,0,0,447,4,226,0,59,4,146,0,22,225,0,0,0,0,34,0,0,1,0,0,0,0,0,0,0,3280\n",
      "439,133,130,108,0,1511,50,180,33,0,110,86,539,0,88,145,7,11,745,487,0,40,176,43,8,103,0,6,193,0,4,306,6,0,0,0,2,1,0,0,0,0,0,0,0,0,0,4310\n",
      "513,0,130,583,2,781,3,34,201,84,3,1358,59,3,343,117,148,278,0,335,0,51,80,47,0,5,63,775,35,0,16,562,0,0,0,0,62,0,0,5,0,0,18,1,0,2,0,3303\n",
      "229,0,126,179,0,1581,61,26,1018,25,27,73,289,25,9,2,4,150,32,130,0,84,78,102,0,29,1,11,143,0,1,15,0,0,0,471,179,0,0,398,0,0,0,0,0,0,0,4502\n",
      "1378,3,327,351,3,1129,103,35,140,245,23,1,251,0,13,1128,0,0,81,16,0,0,193,31,0,0,0,255,273,0,1,15,8,0,0,0,29,0,6,0,0,0,1,0,0,0,2,3959\n",
      "701,0,402,918,0,1518,116,234,881,252,144,14,4,0,18,374,22,8,0,363,1,0,37,0,0,0,0,0,187,0,0,7,5,0,0,0,0,0,0,2,120,0,0,1,0,0,0,3671\n",
      "1116,1,630,232,0,1291,318,93,423,0,166,122,432,0,13,0,6,54,5,3,0,11,2019,0,0,51,0,0,88,0,0,91,1,0,0,34,0,0,0,0,0,0,0,1,0,0,0,2799\n",
      "1356,813,40,210,0,1337,628,0,134,0,145,203,247,1,28,5,25,0,1,373,58,0,93,2,0,80,260,0,18,0,0,196,0,2,0,0,0,0,4,0,4,0,0,0,0,0,0,3737\n",
      "470,0,167,18,41,882,318,820,189,38,521,65,58,132,25,257,43,6,973,46,132,114,17,48,0,0,51,0,4,0,0,131,76,0,0,0,106,0,0,0,2,0,0,0,0,0,0,4250\n",
      "487,16,412,945,1,535,1,0,122,0,530,392,1,182,167,1,1,44,374,61,73,9,33,0,8,0,0,9,484,0,52,66,4,0,0,0,571,0,0,1,0,0,21,0,0,0,0,4397\n",
      "994,0,1190,98,0,917,16,9,357,0,101,15,0,0,48,2,8,0,25,40,0,286,27,0,0,75,243,0,1610,0,0,387,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3477\n",
      "383,6,1452,690,4,775,2,58,287,0,833,0,83,1,5,0,50,400,28,120,0,16,6,0,3,274,0,0,313,0,0,0,0,0,0,4,27,0,0,0,0,0,72,0,0,0,0,4108\n",
      "179,101,59,491,0,1902,59,0,150,0,11,75,131,461,112,0,0,462,0,6,0,225,78,50,96,21,1,1,35,0,0,0,79,162,172,0,250,0,0,0,19,0,0,0,0,0,0,4612\n",
      "822,0,168,475,0,1640,600,6,247,13,138,2,51,2,64,169,24,55,360,126,0,841,94,158,0,0,0,27,448,0,0,190,0,0,0,0,5,0,0,0,22,0,0,0,0,0,0,3253\n",
      "525,50,142,278,1,1005,148,26,905,5,256,9,1536,37,6,116,48,13,116,14,23,0,0,0,0,1,1,1,8,0,0,48,7,0,0,0,289,0,0,0,0,0,0,9,0,0,0,4377\n",
      "660,14,132,252,64,597,0,206,13,23,12,233,160,0,212,21,281,160,45,102,4,133,44,0,0,88,53,0,204,0,20,127,13,0,0,0,1,0,0,0,0,0,0,0,0,0,0,6126\n",
      "480,22,72,170,222,1481,6,2,585,211,448,503,11,48,14,527,832,0,9,192,341,272,2,0,0,50,2,0,52,0,0,86,192,0,0,0,14,0,0,0,0,0,0,1,0,0,0,3153\n",
      "741,23,189,143,3,2487,35,201,312,0,3,233,0,1,150,12,495,0,1,102,285,0,507,26,7,62,0,1,41,0,0,0,588,0,0,29,18,0,0,0,0,0,0,0,0,0,0,3305\n",
      "623,168,18,1993,0,1829,157,0,146,0,177,1,86,8,1232,0,6,0,5,14,3,0,59,0,5,0,122,8,25,0,2,202,265,0,0,0,201,0,0,0,12,0,0,0,0,0,0,2633\n",
      "835,0,79,117,17,1140,559,59,350,262,242,178,6,178,0,0,59,133,27,62,39,20,5,0,69,3,0,13,449,0,0,0,0,0,0,0,178,0,13,0,0,0,0,0,0,0,0,4908\n",
      "2196,0,614,328,0,1809,467,70,470,3,131,0,2,1,1,4,3,172,417,14,14,0,231,0,0,1,4,47,258,0,0,73,133,0,0,0,0,0,3,5,0,0,0,0,0,0,0,2529\n",
      "618,0,73,740,0,1253,21,115,508,8,124,15,221,0,88,14,33,304,733,10,258,177,305,0,0,46,0,0,342,0,13,512,0,0,0,0,117,0,0,0,0,0,0,0,0,0,0,3352\n",
      "835,7,94,769,1,1235,65,97,629,0,115,436,42,0,265,31,70,15,396,99,0,611,66,26,0,0,32,1,86,0,0,395,935,0,0,0,18,0,0,140,0,0,0,0,0,0,0,2489\n",
      "587,24,12,1374,0,2272,96,109,789,26,238,1,1,46,1,2,10,6,120,80,19,0,13,10,0,5,0,8,175,0,0,83,0,0,0,0,17,0,3,0,0,0,0,0,0,0,0,3873\n",
      "750,0,261,235,5,592,30,0,704,579,0,12,61,2,64,576,0,100,0,44,26,0,343,0,0,13,12,4,32,0,0,451,16,0,0,440,186,0,0,22,12,7,1,0,0,21,0,4399\n",
      "940,1,12,2219,2,447,203,35,451,10,76,22,183,5,78,16,0,0,194,394,68,0,14,0,0,305,7,0,567,0,1,183,410,0,0,1,27,0,0,0,0,0,0,0,0,0,0,3129\n",
      "516,2,300,127,0,831,494,18,798,0,0,589,342,53,86,922,140,5,118,207,0,2,37,31,5,77,144,0,113,0,169,34,195,0,0,0,5,0,0,60,37,216,0,0,0,0,0,3327\n",
      "449,8,130,731,8,1533,220,0,147,3,253,248,6,20,77,50,9,0,6,255,0,0,138,0,0,0,10,390,43,0,0,56,3,0,0,0,278,0,0,0,0,0,141,1,0,0,0,4787\n",
      "429,0,0,460,0,937,899,222,58,0,38,62,3,6,657,0,130,20,81,552,41,4,184,72,38,3,12,0,489,0,14,317,307,0,0,0,101,0,0,0,0,0,0,0,0,0,0,3864\n",
      "1453,368,215,377,2,1464,1,22,346,0,473,114,16,0,1,24,47,0,458,349,208,0,79,117,6,199,0,28,542,0,11,46,3,0,0,0,290,0,0,1,0,0,0,0,0,0,0,2740\n",
      "946,200,7,506,183,366,5,124,152,571,302,47,70,5,6,55,5,42,272,470,13,367,3,161,31,0,0,2,599,21,0,3,0,0,0,0,263,0,0,104,0,0,0,7,0,0,0,4092\n",
      "2039,1,288,1033,302,562,313,1,50,0,4,3,2,3,41,209,151,0,637,1031,43,5,0,0,0,1,6,101,318,0,1,20,0,0,0,0,13,0,0,7,0,0,0,0,0,0,0,2815\n",
      "707,81,332,103,436,1272,0,87,1262,0,102,69,12,22,2,2,436,507,425,177,0,0,425,0,0,0,0,0,90,2,207,272,487,0,0,477,4,0,0,0,0,0,1,0,0,0,0,2001\n",
      "534,0,94,1573,0,1752,75,0,830,7,35,0,3,5,135,16,502,65,121,4,0,0,17,1,0,314,0,262,16,0,2,274,47,0,0,162,5,4,0,3,0,185,0,0,0,0,0,2957\n",
      "1160,9,122,189,14,1479,305,158,291,9,39,4,301,0,376,0,85,0,532,32,6,621,990,0,71,61,1,4,24,0,0,160,104,0,0,0,33,0,0,58,0,0,0,27,0,7,0,2728\n",
      "564,2,31,423,0,2131,604,1,224,2,4,69,0,0,371,0,62,573,3,0,0,0,52,0,0,0,0,42,210,0,1,258,27,0,0,0,0,0,0,312,10,0,0,0,0,15,0,4009\n",
      "779,0,11,47,0,1710,568,2,188,0,255,4,2,88,75,95,786,421,698,72,7,0,31,0,21,137,0,10,354,8,0,379,103,0,0,0,126,0,0,0,0,0,0,0,0,0,0,3023\n",
      "1015,353,145,58,127,1030,47,0,39,0,410,64,22,104,212,1,260,51,86,30,8,146,78,2,0,22,22,0,19,0,43,982,382,0,0,10,0,0,26,0,154,0,0,61,0,0,0,3991\n",
      "1123,0,188,483,0,649,72,19,386,43,4,35,3,150,10,66,46,4,36,0,169,445,0,0,57,2,9,132,1286,0,0,38,12,0,0,16,22,0,0,15,0,0,0,0,0,0,0,4480\n",
      "902,0,336,744,0,1350,10,0,109,397,0,968,53,0,0,1,18,0,560,0,12,0,256,92,237,8,272,4,81,78,34,11,78,0,0,0,13,0,0,0,22,5,0,0,0,0,0,3349\n",
      "1586,0,11,473,0,2151,138,373,6,0,13,482,175,16,1,222,8,13,32,362,0,2,29,0,29,86,0,0,12,0,84,582,24,0,0,0,201,0,0,0,0,3,29,0,0,0,0,2857\n",
      "965,0,142,930,0,510,332,282,9,0,109,1,51,2,120,0,0,542,439,0,0,0,148,247,0,0,0,304,146,0,123,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,4501\n",
      "922,0,900,203,0,1362,21,384,26,0,523,16,42,10,42,3,29,3,9,204,0,0,13,2,57,65,0,6,108,0,140,33,43,0,0,0,70,0,0,0,0,0,0,0,0,0,0,4764\n",
      "826,0,61,84,6,1248,112,7,365,1071,193,45,0,0,1698,0,2,15,0,692,5,88,0,17,40,18,19,0,433,0,0,1,28,0,0,0,36,0,0,43,0,0,0,0,0,0,0,2847\n",
      "1138,0,504,573,3,1529,346,72,166,0,190,0,131,38,18,0,261,142,10,17,149,0,726,0,20,12,4,0,32,0,0,58,0,0,0,2,37,0,0,0,0,0,0,0,0,0,0,3822\n",
      "1610,0,17,35,0,721,597,2,588,24,32,6,187,15,31,0,15,3,531,190,34,75,10,0,0,6,0,0,250,0,0,177,44,0,0,0,78,0,0,0,0,0,25,0,0,0,0,4697\n",
      "1351,0,202,492,34,1607,639,28,197,0,55,0,155,0,174,0,10,0,158,494,47,70,32,227,0,0,0,0,445,0,0,120,1,0,0,0,42,0,0,12,0,0,0,0,0,0,0,3408\n",
      "1255,0,181,78,0,855,33,0,394,0,300,2,18,54,163,4,146,1,171,173,0,3,183,1093,0,274,288,0,336,0,0,201,13,0,0,12,24,1,0,0,0,0,0,0,0,0,0,3744\n",
      "1430,253,2,485,0,54,99,0,122,21,40,0,12,0,0,0,5,116,469,17,969,0,31,173,0,41,39,0,661,0,288,0,934,0,0,43,46,0,0,20,0,0,0,0,0,0,0,3630\n",
      "266,0,60,414,0,668,88,55,71,0,88,38,3,72,0,4,499,101,78,7,8,558,0,40,0,44,154,109,241,0,292,494,23,0,0,0,850,0,0,0,0,0,0,0,0,0,0,4675\n",
      "974,402,252,441,0,1557,40,0,188,1,231,0,2,57,1,0,655,462,468,143,239,0,60,0,0,0,0,0,56,0,0,35,10,4,0,0,254,0,0,0,0,0,0,0,0,0,173,3295\n",
      "710,503,53,94,0,1490,2,5,269,1,24,0,12,0,97,108,285,152,329,2,59,8,99,40,0,0,0,0,91,11,183,374,2,0,20,0,0,0,0,0,461,0,0,0,0,0,0,4516\n",
      "2075,309,141,83,19,1424,184,27,97,85,180,0,10,70,34,4,266,0,488,145,0,17,78,1,0,0,53,243,177,0,0,12,130,0,0,0,76,0,0,3,4,0,0,0,0,0,0,3565\n",
      "1319,3,1019,4,0,1102,1136,18,436,0,85,139,129,0,132,6,2,1,0,1,0,244,73,1,0,9,0,0,4,0,0,0,67,0,0,0,0,0,94,0,0,0,0,0,0,0,0,3976\n",
      "262,0,46,421,0,1027,501,62,377,1114,5,18,0,15,56,0,447,313,0,734,69,0,14,16,0,2,2,79,222,0,0,60,11,0,0,241,12,0,5,0,0,0,0,0,0,6,0,3863\n",
      "964,0,132,214,32,1532,130,11,1138,0,20,0,0,0,166,0,359,25,110,11,0,221,111,0,0,0,15,0,11,3,1,98,154,0,0,0,6,0,0,1,0,0,70,0,0,0,0,4465\n",
      "1813,0,110,549,20,428,1,177,131,111,0,0,5,0,3,0,0,0,318,4,7,0,52,0,0,305,0,23,441,5,124,8,829,0,0,5,10,0,4,25,0,0,0,0,0,0,0,4492\n",
      "942,3,424,292,0,658,191,37,147,0,419,50,1,542,13,0,11,6,1090,4,45,1,122,95,4,0,242,349,148,0,537,113,0,0,11,0,12,0,0,0,0,0,0,7,0,0,0,3484\n",
      "298,0,672,366,0,1176,3,8,304,253,18,432,31,0,2,50,299,6,3,32,1,618,16,258,0,0,0,0,182,0,0,1893,13,0,0,75,30,0,0,1,0,0,0,0,0,0,0,2960\n",
      "412,0,33,663,0,678,300,308,347,46,122,220,1,0,143,1,7,0,68,40,3,4,521,0,0,0,0,0,12,0,407,120,0,0,0,0,389,0,0,17,44,0,14,0,0,3,0,5077\n",
      "931,6,138,452,0,511,47,0,60,21,0,0,317,4,0,5,31,177,4,22,14,0,40,0,0,72,50,0,645,0,0,308,11,0,0,0,36,0,0,0,0,176,1,0,0,0,0,5921\n",
      "1836,605,11,72,0,2037,155,50,505,34,255,0,0,0,100,0,643,52,164,46,0,0,62,0,83,22,0,0,81,0,0,374,0,4,0,0,41,0,0,11,0,0,0,0,0,0,0,2757\n",
      "1304,2,37,119,76,1263,278,148,18,0,202,3,62,28,330,0,117,33,271,0,0,0,302,0,0,496,0,0,394,0,0,135,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,4381\n",
      "1283,90,350,408,0,764,453,4,66,0,30,0,0,60,0,12,5,30,59,225,0,25,45,0,2,0,105,5,361,0,300,259,244,0,0,115,17,0,0,7,0,0,0,0,0,0,0,4676\n",
      "675,72,166,372,27,1507,8,73,720,0,4,1,0,0,8,19,108,0,746,44,0,0,140,0,0,100,0,0,191,104,1,604,3,0,134,47,126,0,0,1008,34,0,0,0,50,0,0,2908\n",
      "2130,168,163,154,244,1733,192,19,3,57,58,1,97,0,104,34,2,8,1195,23,288,114,77,214,0,27,19,0,10,0,0,479,0,0,0,0,159,0,0,155,0,0,0,0,0,0,0,2073\n",
      "488,0,608,808,0,621,0,35,427,0,319,522,0,0,320,13,292,0,67,21,0,1,520,0,0,18,0,0,281,0,19,8,0,0,10,0,17,0,0,0,0,0,30,0,0,0,0,4555\n",
      "793,60,872,436,28,1153,0,28,18,1,0,4,145,50,216,0,4,1,93,318,44,30,22,81,0,0,0,467,72,4,0,3,0,0,0,53,99,0,0,0,413,0,0,0,0,0,0,4492\n",
      "556,0,343,804,4,1317,60,39,644,1,94,148,0,0,50,0,2,530,45,70,0,0,135,0,0,325,6,0,25,0,13,166,82,0,0,0,0,0,83,0,18,0,0,0,0,0,0,4440\n",
      "422,1433,55,365,0,513,45,9,251,10,17,31,3,400,387,0,3,88,338,4,0,95,7,8,192,180,3,6,118,0,0,369,30,0,0,240,886,0,69,11,0,0,0,0,0,5,0,3407\n",
      "818,0,411,362,332,654,174,47,137,0,223,515,15,312,614,0,255,117,58,275,0,99,159,0,0,0,83,506,380,0,1,371,48,0,0,83,108,0,0,0,7,1,0,0,0,0,0,2835\n",
      "875,0,323,50,13,1542,11,84,40,3,937,0,19,0,453,149,138,1,199,391,129,2,6,0,132,0,0,1251,75,0,0,10,0,0,0,0,2,0,15,39,0,0,1,0,0,0,0,3110\n",
      "1029,224,830,561,109,1795,17,182,40,11,1,8,2,47,88,0,516,0,4,18,5,62,0,713,0,148,0,15,204,0,3,489,1100,0,0,2,122,0,2,0,0,0,0,0,0,0,0,1653\n",
      "635,59,392,622,0,2423,4,11,294,148,60,27,164,15,38,0,7,56,572,127,5,0,922,107,5,2,0,0,232,0,172,220,62,0,0,14,0,0,0,0,0,0,0,0,0,0,0,2605\n",
      "673,13,268,526,0,2855,549,0,245,2,1,30,3,0,2,24,15,1,108,2,0,0,352,0,0,244,22,1,22,0,0,18,8,0,0,23,108,4,0,0,0,0,0,0,0,0,0,3881\n",
      "1239,7,60,1294,1,643,16,129,799,0,86,11,10,0,398,11,91,1,28,101,4,271,1,316,0,0,0,6,70,0,0,14,0,0,0,4,3,0,0,0,0,0,0,0,0,0,0,4386\n",
      "1470,0,334,281,0,975,2,225,12,0,22,631,23,0,127,7,12,334,2,36,0,0,644,27,12,5,1,0,683,0,1,276,26,0,0,5,75,0,0,1,0,0,18,0,0,0,0,3733\n",
      "641,1,135,649,0,1211,849,10,496,5,8,0,0,0,10,3,5,11,10,999,137,39,375,0,0,0,19,0,7,1,364,88,72,5,0,0,2,0,1,0,0,0,2,0,0,0,0,3845\n",
      "1163,0,786,861,0,785,86,599,291,0,239,205,3,0,47,0,37,2,4,141,158,0,240,40,0,0,7,9,39,0,0,57,20,1,0,0,364,0,0,0,0,0,0,0,0,0,0,3816\n",
      "568,2,523,348,0,1221,22,75,361,20,3,172,280,117,59,90,583,0,203,35,0,6,6,243,0,553,0,0,742,0,0,19,0,0,0,4,110,0,0,163,0,0,7,0,0,0,0,3465\n",
      "493,0,96,79,0,2091,238,72,258,0,422,146,0,36,8,104,1,5,42,49,0,1,138,0,40,0,0,2,419,0,0,56,506,0,0,0,4,0,0,7,0,0,5,0,0,0,0,4682\n",
      "395,0,46,1373,0,1394,55,0,48,34,48,0,24,124,123,336,40,23,17,1,638,0,63,7,0,0,0,0,5,0,0,109,243,0,0,0,3,0,0,2,0,0,0,0,0,0,0,4849\n",
      "694,0,6,414,0,1196,168,122,22,0,83,83,180,0,21,21,28,7,142,75,8,116,5,8,0,5,41,3,816,0,0,5,279,0,0,253,44,0,0,0,48,0,0,0,0,13,0,5094\n",
      "855,110,367,662,0,1401,4,107,29,2,20,7,101,0,108,29,358,2,53,18,7,9,639,2,0,1,4,0,202,0,0,53,8,0,0,0,244,0,0,14,0,0,0,0,0,0,0,4584\n",
      "600,0,1,148,0,1042,423,3,15,3,30,995,47,0,744,1,0,0,263,53,0,115,206,0,0,0,0,0,22,0,0,0,12,0,0,0,22,0,0,0,0,0,0,0,0,0,0,5255\n",
      "312,0,93,1111,0,1802,227,30,0,0,6,25,9,0,60,47,178,0,270,864,1,1,383,0,0,50,0,73,199,0,0,17,419,0,0,0,83,0,0,0,0,0,0,0,0,0,0,3740\n",
      "523,0,98,197,497,2342,15,0,662,0,52,222,10,12,23,37,203,0,423,444,1,0,61,39,0,18,109,2,148,0,1,32,15,0,0,0,14,0,0,177,0,0,0,0,0,0,0,3623\n",
      "297,0,175,232,0,484,0,170,35,0,358,31,2,0,2,0,6,0,104,22,168,150,42,1,0,57,0,2,409,0,1,511,551,0,0,0,16,0,53,6,0,0,13,0,0,0,0,6102\n",
      "936,26,35,73,1,958,4,0,1274,0,219,5,170,1,17,1,103,437,168,124,105,437,141,0,0,3,0,139,361,0,0,229,2,0,0,0,36,0,0,0,0,0,0,0,0,0,0,3995\n",
      "2003,0,304,329,0,852,121,9,209,5,95,135,693,0,216,0,33,6,2,1,0,2,416,38,0,111,3,0,122,0,0,43,134,0,0,0,1,0,0,0,0,0,0,17,0,0,0,4100\n",
      "724,190,18,877,0,1560,1002,725,429,75,0,0,49,17,103,0,25,0,15,52,0,0,638,0,0,24,0,0,267,15,0,146,2,0,0,1,0,33,0,0,0,0,0,0,0,0,0,3013\n",
      "646,4,332,674,0,861,381,6,897,4,145,149,38,36,108,3,1072,1,16,0,0,0,84,0,0,7,0,261,491,0,24,273,2,0,0,23,0,0,0,0,23,10,7,0,0,0,0,3422\n",
      "261,0,11,213,24,2144,35,337,178,45,423,0,127,13,72,0,0,0,2,11,196,0,13,0,0,0,0,111,261,0,0,597,284,0,0,47,10,0,0,0,1,0,0,0,2,0,0,4582\n",
      "1387,5,154,44,0,893,0,80,234,117,418,196,0,1,269,0,203,75,45,0,10,0,142,12,0,16,5,0,58,2,266,159,0,0,0,160,2,261,0,0,0,0,0,0,0,0,0,4786\n",
      "1154,31,13,1332,0,654,504,13,127,428,191,39,15,0,1,0,0,0,62,23,0,0,1,1,0,0,1,0,307,0,0,336,366,0,0,0,236,0,0,0,0,0,0,0,0,0,0,4165\n",
      "1315,5,309,698,0,759,31,8,110,26,69,245,622,232,74,0,22,0,17,7,4,0,6,6,0,2,1,272,443,0,0,93,61,0,0,0,22,0,0,0,0,0,1,0,0,0,0,4540\n",
      "1196,49,1,675,0,1126,412,5,24,15,674,157,36,0,1,1,0,0,161,79,958,3,203,0,0,0,8,0,3,2,14,242,0,0,0,0,157,0,0,1,0,184,0,0,0,0,0,3613\n",
      "267,0,228,584,58,634,450,0,240,0,137,2,202,0,48,58,20,61,75,151,2,0,424,0,0,10,35,85,16,0,805,0,846,0,0,3,4,0,0,0,0,0,49,0,0,0,0,4506\n",
      "1589,7,101,23,0,3168,54,1,20,43,124,129,14,16,107,27,0,0,2,20,0,0,25,0,0,8,0,31,2,0,0,111,131,0,0,0,0,0,0,0,0,0,0,1,0,0,0,4246\n",
      "2039,17,76,177,0,1770,15,851,320,0,366,52,314,0,39,0,208,0,9,71,17,166,26,1,0,0,8,75,133,0,0,4,0,0,0,0,121,0,0,0,0,3,8,0,0,0,0,3114\n",
      "1040,21,1246,901,412,789,809,0,76,0,0,158,7,79,55,0,31,0,157,2,118,51,191,0,11,2,0,15,188,0,678,46,1,0,0,0,162,0,0,24,2,1,0,0,0,0,0,2727\n",
      "341,70,337,88,2,322,415,2,494,4,97,107,148,0,217,781,0,27,161,421,35,0,722,5,4,0,0,31,3,0,19,281,1,0,0,0,1203,0,0,0,2,0,0,0,0,0,0,3660\n",
      "633,0,505,43,220,993,55,326,270,2,375,14,68,258,88,51,28,1,4,153,12,429,386,0,0,48,294,31,129,0,2,38,147,0,0,0,293,0,13,0,0,0,0,0,0,0,0,4091\n",
      "667,109,472,85,2,998,125,66,479,161,0,9,217,0,0,0,46,1,18,37,0,0,4,6,0,48,7,81,390,0,12,52,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,5878\n",
      "1427,0,210,376,49,1506,10,33,4,10,29,350,21,62,254,14,78,0,2,211,3,0,10,35,1188,18,0,12,34,0,25,330,261,0,0,1,4,0,0,244,7,0,0,0,0,0,0,3182\n",
      "704,0,771,390,0,2541,82,27,212,13,498,244,17,161,0,12,38,0,22,533,58,62,504,0,303,30,0,1,70,0,5,11,5,5,0,0,1,0,0,0,0,0,0,33,0,0,0,2647\n",
      "1450,3,99,303,4,385,267,83,182,55,44,0,329,11,80,1,294,130,22,3,0,6,205,0,0,1,18,8,88,25,0,6,29,0,260,0,17,0,0,420,0,0,0,0,0,0,0,5172\n",
      "431,1,118,195,227,1150,579,18,77,0,16,4,275,196,0,44,16,1011,788,13,0,0,20,8,0,4,0,1,130,0,0,32,303,327,0,0,70,0,93,3,0,0,64,0,0,0,0,3786\n",
      "150,0,757,821,1,535,48,0,108,0,132,7,288,431,1,1,56,68,122,300,14,0,276,0,0,34,6,0,438,0,2,2,0,0,0,0,63,0,0,0,0,0,0,0,0,0,0,5339\n",
      "648,0,239,947,0,935,4,0,189,12,217,0,33,0,3,0,808,6,99,612,0,29,12,0,0,11,5,94,10,0,0,23,0,0,0,0,32,0,0,2,0,0,1,0,0,0,0,5029\n",
      "2104,63,4,505,0,1186,420,95,320,54,69,157,258,307,332,162,1,20,0,111,42,16,85,78,24,0,1,1,277,0,0,39,281,0,0,0,1,0,0,0,2,0,1,0,0,0,0,2984\n",
      "684,0,895,53,159,500,199,0,264,2,342,0,12,5,1,0,329,202,446,78,66,0,419,0,0,0,0,1,726,0,91,256,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4149\n",
      "1041,96,176,378,0,2298,56,670,253,0,1,740,43,89,117,245,12,1,23,39,0,2,171,21,1,0,0,0,72,7,0,827,73,0,0,37,75,0,0,0,0,0,0,0,0,0,0,2436\n",
      "864,711,350,1101,0,2048,80,7,25,1,245,19,228,0,2,0,134,0,50,14,5,0,307,13,0,33,0,360,5,0,5,85,116,182,3,77,0,0,0,0,0,0,0,18,0,0,0,2912\n",
      "974,22,88,247,8,1109,115,13,131,0,17,130,6,40,686,0,95,296,32,9,0,284,81,338,0,0,328,0,109,0,25,78,1,0,0,0,65,0,0,1,0,0,0,0,0,0,0,4672\n",
      "37,0,344,263,0,647,73,0,12,16,424,0,47,0,113,1,402,112,14,0,225,2,47,0,1,107,88,0,1064,0,0,1066,1129,0,25,9,336,0,0,0,0,0,4,0,0,0,0,3392\n",
      "1616,9,104,493,98,676,83,0,101,126,4,0,81,0,101,0,428,0,248,181,70,16,3,7,0,0,52,0,91,3,8,219,495,0,0,0,0,0,0,0,96,0,2,0,13,0,0,4576\n",
      "765,349,441,285,78,2028,418,1,313,0,147,0,153,1,1,183,85,0,274,572,0,202,29,131,0,51,0,53,44,0,0,11,0,389,0,0,18,0,0,0,0,0,0,0,0,0,0,2978\n",
      "2120,0,23,538,0,786,130,1,535,0,67,103,19,2,0,196,14,0,212,119,14,0,242,0,43,1,12,126,191,0,0,38,161,0,0,0,0,0,0,138,0,0,0,0,0,0,0,4169\n",
      "161,206,261,787,5,1441,79,1059,14,92,22,17,17,4,98,96,14,24,131,278,15,0,0,40,3,0,7,0,227,49,52,85,25,0,0,0,4,0,0,0,0,0,0,23,0,11,0,4653\n",
      "369,0,1,240,0,2111,33,0,331,1,5,41,0,151,0,365,559,61,478,257,232,0,78,29,0,0,0,0,457,0,27,0,71,0,0,80,73,0,0,0,0,0,0,0,0,0,0,3950\n",
      "156,310,43,232,81,1570,164,10,212,0,29,6,494,25,5,255,0,89,10,1,21,9,225,0,0,0,0,6,149,0,0,1303,102,0,0,0,72,0,0,4,0,0,0,0,0,8,0,4409\n",
      "650,0,19,576,0,2185,18,89,265,0,50,14,16,61,48,0,76,0,24,751,0,77,81,192,0,0,0,0,362,0,0,167,395,0,0,2,0,0,0,12,0,0,0,1,0,5,0,3864\n",
      "2143,25,33,336,0,2094,40,1,109,0,485,26,54,0,126,251,58,30,115,89,14,0,11,479,0,60,1,75,287,0,0,385,24,0,0,0,487,0,0,0,0,0,64,0,0,0,0,2098\n",
      "773,1,562,611,7,2419,251,101,312,6,476,15,69,0,584,267,7,22,4,30,0,0,8,0,13,82,0,0,25,0,74,12,3,0,0,0,359,0,0,3,14,0,688,0,0,0,0,2202\n",
      "1238,0,8,54,0,1887,58,0,433,83,0,1435,3,104,286,0,7,14,154,4,49,1,50,2,441,0,0,102,58,0,0,98,3,0,0,0,11,0,0,24,0,0,0,407,0,0,557,2429\n",
      "870,1,147,97,27,724,130,15,274,27,199,36,2,0,933,128,24,0,202,40,10,0,23,16,0,0,0,23,905,0,81,0,518,0,0,483,66,0,0,9,0,0,0,0,0,0,0,3990\n",
      "660,225,201,1088,32,2427,395,0,92,0,16,244,61,401,5,1,91,145,122,18,0,16,50,1,0,373,0,2,326,0,34,529,167,0,0,9,2,0,0,0,0,0,3,0,0,0,0,2264\n",
      "268,0,101,450,0,595,59,0,9,2,651,177,31,10,37,72,3,153,26,2,7,68,84,0,8,255,0,0,352,0,0,322,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,6256\n",
      "1318,0,13,235,0,551,208,29,31,0,0,471,68,25,325,2,40,425,167,33,42,0,641,0,1,1,2,75,50,1,0,300,63,0,0,0,1,0,901,75,25,0,0,0,26,0,0,3855\n",
      "1801,0,35,42,1,772,1560,0,324,2,184,10,2,0,380,0,0,1,16,2,0,8,67,0,37,3,0,0,408,0,2,2,15,0,0,0,711,0,0,0,0,0,0,0,0,0,1,3614\n",
      "596,11,297,29,0,1242,102,45,11,572,18,153,0,0,87,20,107,39,7,0,0,0,166,0,0,356,0,0,89,0,162,4,163,0,0,0,184,0,0,5,0,0,19,0,0,0,0,5516\n",
      "409,0,171,481,1,2338,9,363,514,406,30,0,6,1,209,14,230,0,31,5,1,176,55,0,32,190,176,0,216,0,0,304,511,0,0,0,56,0,0,0,0,0,0,0,0,0,0,3065\n",
      "356,0,75,353,178,321,409,751,116,177,583,1,0,0,59,32,95,858,103,64,244,0,71,0,0,0,0,0,244,9,18,74,508,0,0,0,116,0,0,1,0,1,7,0,0,0,0,4176\n",
      "866,50,183,151,255,859,300,26,476,0,167,3,1,43,1,32,6,16,91,70,0,30,15,299,0,0,0,1,793,0,22,64,171,0,0,0,29,0,0,0,0,0,0,0,0,0,0,4980\n",
      "2345,285,104,216,259,1750,718,12,402,108,190,185,129,29,433,243,56,35,61,59,128,20,0,1,0,0,4,0,118,0,0,69,0,0,0,0,291,0,0,0,0,0,0,1,0,0,0,1749\n",
      "1044,0,81,413,0,254,1,474,35,50,154,151,39,60,194,0,107,0,6,1416,0,298,338,0,0,8,0,0,78,0,0,17,0,0,1,0,100,0,0,1,105,0,0,0,0,0,0,4575\n",
      "682,0,129,152,0,708,55,735,164,0,230,0,1735,3,379,11,42,12,0,0,0,15,9,1,41,88,127,2,28,0,8,11,1,0,0,1,1,0,0,3,0,0,0,0,17,0,0,4610\n",
      "1411,0,200,382,129,1289,0,1,7,2,544,135,6,0,35,0,1,47,2,360,0,62,139,9,0,0,570,247,3,0,0,10,14,0,0,0,4,0,0,0,0,0,0,0,0,0,17,4374\n",
      "435,0,510,381,0,2236,1,96,944,0,118,5,4,80,105,0,2,0,177,0,0,49,32,6,0,1,0,0,685,0,0,2,0,0,0,0,0,0,0,4,42,0,24,0,0,0,0,4061\n",
      "868,317,1,602,0,2364,20,0,308,50,366,2,0,1,45,6,9,0,320,465,0,0,95,104,0,0,0,1,120,0,9,104,66,0,0,0,0,0,0,64,0,0,0,0,0,0,0,3693\n",
      "1218,0,126,170,0,1544,94,25,224,19,100,31,0,277,397,4,618,4,102,12,0,0,103,29,0,85,0,78,112,0,1,0,41,0,0,0,0,0,0,0,0,14,0,0,0,0,0,4572\n",
      "1467,0,78,82,5,2945,320,12,805,230,160,53,0,28,41,27,41,44,9,51,2,197,12,0,0,5,0,0,127,0,0,16,116,0,0,0,1,0,2,0,0,0,207,0,0,0,0,2917\n",
      "797,0,1507,113,0,1109,180,0,211,0,121,98,414,0,11,4,13,7,11,73,6,5,385,43,0,0,38,0,0,0,7,114,12,0,0,0,16,0,0,3,0,0,229,0,0,0,0,4473\n",
      "230,230,446,687,72,899,18,18,35,580,493,4,518,0,36,0,0,42,400,737,3,0,0,2,0,0,38,1,46,375,0,81,102,0,0,1,81,0,0,0,38,0,0,0,0,0,0,3787\n",
      "177,52,0,555,0,1451,94,0,116,616,826,63,24,7,46,551,109,178,39,70,0,0,14,0,46,277,188,0,183,7,0,587,2,0,0,0,302,0,50,2,0,0,0,0,0,0,0,3368\n",
      "1749,0,112,202,0,2169,366,5,15,56,119,116,182,20,92,0,460,3,3,24,0,0,488,3,0,290,5,0,459,0,0,255,5,0,0,0,15,0,0,0,0,0,0,0,0,0,0,2787\n",
      "206,0,1130,223,4,1004,4,0,112,0,292,648,163,139,12,0,15,29,307,60,0,2,0,0,1,225,0,0,956,0,0,131,0,0,0,0,501,0,0,0,0,0,0,0,0,0,0,3836\n",
      "639,47,320,453,0,792,16,0,436,2,88,37,1,3,20,38,37,0,3,930,0,0,19,0,0,0,30,57,211,0,0,1213,275,0,0,12,1,0,0,19,0,0,0,0,0,0,0,4301\n",
      "189,35,87,1938,0,1890,98,67,65,0,584,73,3,240,1,58,8,3,249,15,156,5,4,6,0,48,0,0,26,0,0,295,12,0,133,5,33,0,0,0,0,0,0,0,0,0,0,3674\n",
      "571,0,1233,321,75,2339,14,87,227,0,185,274,0,15,2,6,297,0,54,3,28,0,107,0,0,20,0,0,259,0,0,19,29,0,0,7,26,0,0,11,0,0,0,0,0,0,0,3791\n",
      "1707,0,533,1448,0,707,1,0,9,0,11,740,3,2,46,23,22,167,653,12,0,0,68,0,0,0,0,1,375,0,0,23,39,0,0,193,0,0,0,1,0,0,0,0,0,0,0,3216\n",
      "91,55,380,480,0,1016,162,327,1271,497,23,22,239,0,31,0,21,1,22,3,1,1,0,321,0,305,0,0,700,0,0,59,77,0,0,166,9,0,0,1,0,0,0,0,0,0,0,3719\n",
      "418,9,46,911,86,541,1,41,490,0,758,0,321,23,20,1,78,84,65,338,0,1,3,41,2,634,1,7,224,0,0,93,1,0,0,0,140,0,0,19,2,0,0,0,0,0,0,4601\n",
      "609,0,453,1582,8,522,3,8,401,5,3,5,45,6,17,141,25,111,0,512,1,734,773,0,58,6,0,0,809,0,0,140,1,0,0,0,82,0,0,0,0,0,3,0,0,0,0,2937\n",
      "2642,38,69,692,1,917,73,86,223,9,15,83,98,59,532,1,0,29,19,109,2,0,46,0,0,37,0,0,446,0,73,19,1097,0,0,0,28,1,0,0,0,0,0,0,0,0,0,2556\n",
      "722,0,558,1078,112,829,448,48,1421,0,0,0,1,30,211,136,6,6,20,1,0,72,0,0,22,30,0,2,69,0,2,17,29,2,0,0,47,0,0,2,59,0,1,0,0,0,0,4019\n",
      "1312,189,7,579,0,2032,48,78,282,67,214,8,263,356,128,3,479,9,55,283,1,65,7,117,0,183,0,4,41,0,283,44,3,0,2,0,7,0,0,0,0,0,0,0,0,0,0,2851\n",
      "1065,136,0,1121,1,526,2,0,44,517,188,43,21,1,239,38,0,220,100,0,25,5,233,0,104,46,0,0,13,0,23,71,335,0,0,0,2,0,0,2,0,0,0,0,0,0,0,4879\n",
      "1512,15,63,643,22,1321,0,16,293,0,15,4,188,0,287,0,192,0,66,41,0,0,65,10,0,0,200,2,19,0,0,929,393,0,0,0,136,0,24,2,0,0,82,0,0,0,0,3460\n",
      "652,142,374,254,28,1077,145,1,286,0,12,7,0,0,31,0,20,191,35,1,342,81,34,0,0,3,3,0,58,0,18,5,2,0,0,0,67,0,29,0,0,0,1,0,0,0,0,6101\n",
      "1374,53,303,1283,352,1923,127,19,36,0,225,3,226,51,17,0,41,28,9,14,13,2,30,0,0,4,8,0,254,26,26,21,0,0,0,0,180,0,0,0,2,0,0,0,0,0,0,3350\n",
      "578,58,138,875,20,730,38,89,1694,0,170,0,0,483,0,0,280,6,235,119,0,0,0,359,0,2,0,0,324,0,0,98,22,0,0,0,3,0,0,0,0,0,41,0,0,0,0,3638\n",
      "418,0,25,1094,0,2274,14,46,300,0,14,71,15,3,251,63,155,71,557,6,0,0,342,0,0,0,0,219,623,0,0,121,119,0,0,1,421,0,39,0,1,0,0,0,109,0,0,2628\n",
      "561,0,8,419,0,858,188,239,112,22,221,188,646,0,3,205,362,6,232,44,21,9,222,0,0,0,0,2,149,0,0,269,20,0,0,0,277,0,0,0,0,0,0,0,0,0,0,4717\n",
      "533,141,2,24,0,766,20,28,135,9,31,0,17,133,466,378,6,0,93,238,0,192,13,0,19,2,207,634,978,0,0,192,43,0,6,0,102,0,0,0,0,0,0,0,0,0,0,4592\n",
      "266,0,46,293,8,2097,281,5,732,30,20,1572,2,39,12,1,567,4,33,208,0,0,209,0,0,0,0,69,40,0,0,22,1,0,0,0,5,0,0,200,0,0,0,4,0,0,0,3234\n",
      "1281,0,6,921,104,886,460,179,340,3,0,193,27,45,484,0,0,9,118,179,4,0,378,0,0,0,0,0,128,0,183,223,807,0,0,0,181,0,0,0,0,0,0,0,0,0,0,2861\n",
      "337,0,694,341,11,416,257,332,115,9,226,12,3,139,138,32,77,0,2,3,1,72,42,0,0,3,4,0,3,0,216,6,0,0,0,90,928,0,0,8,0,0,0,0,0,0,0,5483\n",
      "1131,0,1027,294,1,741,0,86,633,224,119,76,51,42,78,11,1,0,244,10,0,0,104,1,0,839,0,3,468,0,8,56,296,0,0,285,11,0,0,17,0,0,0,1,0,0,0,3142\n",
      "589,0,2,338,0,797,3,757,112,74,1,165,0,1,0,0,241,4,50,33,0,2,295,4,0,152,9,38,43,0,0,695,1,0,0,0,0,0,0,206,0,0,0,0,0,0,0,5388\n",
      "904,437,11,536,1,545,106,0,425,2,30,6,4,5,34,0,124,0,583,1,0,134,383,202,0,0,0,0,247,0,0,0,4,0,0,343,18,0,0,0,0,0,0,0,0,0,0,4915\n",
      "661,0,25,895,0,1051,57,119,602,0,9,132,448,12,83,0,107,14,259,38,0,0,179,89,12,8,0,12,394,0,40,179,806,0,0,0,16,0,1,0,0,0,0,0,0,0,0,3752\n",
      "1322,14,1216,1191,0,824,0,3,477,0,24,17,304,10,150,284,25,2,203,9,13,0,67,0,0,9,125,38,256,0,0,317,4,0,0,0,79,0,0,138,0,0,0,0,0,0,0,2879\n",
      "1034,0,106,45,0,842,23,4,347,0,37,4,44,1,77,0,72,101,687,131,547,16,282,0,3,3,956,1,71,0,0,181,0,0,0,12,96,0,0,0,0,0,35,0,0,0,0,4242\n",
      "521,0,247,68,1,618,14,1190,2232,437,57,34,6,0,0,0,126,81,1,316,20,3,118,0,61,104,0,0,30,0,0,18,334,0,0,108,6,0,0,1,0,0,0,0,0,0,0,3248\n",
      "798,0,21,242,0,1383,25,0,364,0,44,0,43,172,358,25,475,1,7,106,0,1081,347,1,0,0,2,2,5,42,0,127,1,0,0,18,31,0,0,0,11,0,0,0,0,0,0,4268\n",
      "931,2,151,750,0,843,5,4,782,21,3,143,2,17,17,0,0,0,28,41,43,75,1,0,0,10,49,0,443,0,0,856,2,39,0,11,2,0,0,6,0,0,0,0,0,0,0,4723\n",
      "373,0,128,1089,9,1176,23,139,305,12,13,2,9,0,80,0,14,55,211,8,17,256,44,3,0,0,1,0,1848,0,870,2,0,0,0,5,1,0,0,0,0,0,13,0,0,0,0,3294\n",
      "1378,24,11,877,89,1897,18,468,816,1,75,75,0,3,73,0,270,58,50,155,0,13,542,2,0,17,0,19,228,0,17,196,1,0,0,0,395,0,12,12,0,1,0,89,0,0,0,2118\n",
      "233,0,106,593,0,784,49,22,287,0,547,284,11,16,37,91,64,0,68,114,253,71,961,8,5,3,65,15,263,0,0,1,46,0,0,43,84,0,0,585,14,0,99,0,0,1,0,4177\n",
      "949,0,69,81,8,2254,127,14,14,179,93,0,514,10,441,1,37,379,0,0,0,0,0,0,0,1,0,0,16,605,354,150,281,598,322,0,4,421,0,0,0,0,3,0,0,0,0,2075\n",
      "1778,19,221,431,95,1309,282,0,663,0,0,344,51,35,727,0,24,137,192,0,0,0,85,0,0,3,0,0,139,0,0,6,0,13,0,65,125,0,0,4,0,0,0,0,0,0,0,3252\n",
      "700,88,234,1016,33,2054,40,106,72,0,27,1,40,65,106,0,133,2,0,60,485,389,468,2,0,16,80,0,73,0,0,807,26,0,0,0,61,0,0,0,0,0,0,0,0,0,0,2816\n",
      "505,1,80,3103,0,1203,17,184,160,0,285,0,371,36,8,0,113,1,225,0,0,0,91,0,67,52,11,0,323,0,226,8,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,2878\n",
      "1585,4,766,116,0,1511,8,0,0,0,9,29,107,353,27,0,428,0,121,2,224,0,202,0,2,6,1,0,263,0,0,159,11,0,0,0,3,0,0,102,0,0,0,0,0,0,0,3961\n",
      "620,0,393,239,0,1113,914,0,64,198,429,10,442,373,15,0,0,0,36,912,204,0,10,128,1,0,2,0,240,0,0,69,7,0,0,0,8,0,0,0,0,0,0,0,0,0,0,3573\n",
      "442,491,1591,408,0,1027,77,0,0,0,372,28,2,206,0,0,883,15,99,126,0,0,573,139,3,0,0,0,272,0,103,23,98,0,0,0,3,0,0,7,0,0,0,0,0,0,0,3012\n",
      "1449,8,157,82,0,496,2,6,1153,3,0,450,7,2,184,0,0,49,40,10,5,2,115,8,0,33,0,0,480,0,12,26,250,0,0,0,231,0,0,115,0,0,2,0,0,0,0,4623\n",
      "739,356,688,211,0,766,155,268,870,0,123,12,182,0,3,1,309,0,7,2,0,0,486,14,0,119,11,0,34,0,0,97,68,0,0,0,71,0,0,0,0,0,0,0,0,0,0,4408\n",
      "1214,0,125,344,195,422,44,0,1212,173,36,111,74,63,153,0,145,9,143,8,13,15,139,0,0,245,27,0,726,0,0,0,4,0,0,0,33,0,0,0,3,0,0,1,0,0,0,4323\n",
      "1497,733,24,810,0,1038,61,107,200,30,21,0,105,980,9,214,84,0,0,25,0,19,205,0,0,111,161,0,111,0,0,257,6,0,0,4,3,0,0,0,0,0,11,0,0,0,0,3174\n",
      "2074,1,843,544,0,1354,7,0,27,0,270,248,37,0,0,0,0,0,90,529,0,0,1,0,0,80,0,3,167,0,0,7,187,0,0,0,58,0,0,4,0,0,0,0,0,0,0,3469\n",
      "1332,0,495,615,0,1983,94,5,40,10,275,2,0,211,2,0,84,82,1034,42,0,4,36,0,1,0,2,0,1,270,3,953,125,0,0,0,26,0,63,0,0,0,1,0,0,0,0,2209\n",
      "751,0,727,1252,28,1183,292,713,302,0,456,28,27,0,172,23,8,31,5,23,1,1,596,37,37,2,0,0,229,0,4,142,36,0,0,0,6,0,0,13,0,0,0,0,8,0,362,2505\n",
      "1084,0,1902,687,0,504,186,621,253,2,210,0,127,211,0,1344,102,29,0,126,0,3,3,141,0,2,3,6,43,0,2,0,4,0,0,0,2,0,0,174,0,0,0,0,0,0,0,2229\n",
      "864,0,692,318,0,1083,7,41,329,362,0,73,140,2,160,0,0,0,2,4,2,0,7,0,0,0,4,128,236,0,0,0,4,0,86,495,3,0,0,10,6,0,16,0,0,4,0,4922\n",
      "918,19,0,239,0,1056,7,375,357,0,28,369,780,0,0,288,1,38,7,0,18,0,193,312,20,4,0,0,250,0,3,3,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,4709\n",
      "748,0,296,345,0,1768,36,0,16,0,616,0,759,45,114,146,60,2,466,523,1,22,228,66,3,18,750,0,50,0,0,94,31,0,0,7,24,0,0,2,1,0,9,0,0,0,0,2754\n",
      "1018,1,312,626,0,1478,229,10,205,64,49,71,0,268,195,0,810,39,53,41,131,0,208,128,0,0,0,10,191,0,0,132,66,0,0,0,0,0,0,1,0,0,0,0,1,0,0,3663\n",
      "1166,0,115,549,0,1842,0,148,221,169,433,30,314,4,22,0,42,32,74,194,16,0,21,0,0,0,0,0,256,0,0,203,183,236,0,0,0,0,0,1,0,0,0,0,0,0,0,3729\n",
      "408,0,14,855,0,377,703,286,126,234,0,7,343,151,85,0,19,126,321,697,535,3,0,0,45,1246,1,23,133,0,0,13,13,0,0,188,0,0,66,6,2,0,0,0,0,0,0,2974\n",
      "1507,0,715,90,0,1082,13,73,243,95,590,101,20,1112,237,194,0,27,316,381,0,71,27,0,0,0,0,0,203,0,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2865\n",
      "513,0,399,657,0,1207,241,424,355,0,596,123,7,95,0,60,45,0,158,0,784,0,568,31,0,22,97,1,162,0,2,96,97,0,16,6,0,0,16,0,0,0,0,15,0,0,0,3207\n",
      "2163,88,284,338,66,807,212,2,752,36,648,43,95,5,0,4,2,119,0,3,0,28,0,0,0,16,0,195,8,0,0,84,315,0,0,0,331,0,0,0,0,243,0,0,0,0,0,3113\n",
      "615,40,166,67,51,2187,17,6,242,14,0,61,0,2,14,10,3,2,320,51,61,0,145,0,0,0,62,0,51,0,30,16,6,0,0,0,126,0,0,0,0,84,5,261,0,0,0,5285\n",
      "619,875,82,526,19,698,209,0,314,0,113,0,127,1319,0,17,32,0,57,484,1,1,119,0,0,372,57,0,29,0,4,633,6,0,0,0,0,323,0,11,6,0,0,0,2,0,0,2945\n",
      "480,105,730,809,105,504,47,0,245,132,110,1189,3,1,119,176,262,263,2,66,0,81,48,1,0,0,177,1,343,0,3,264,8,0,0,13,129,0,0,0,1,0,0,0,0,0,0,3583\n",
      "1126,289,172,307,0,1998,134,0,12,1,66,20,119,14,60,0,0,17,48,3,0,508,34,1,0,32,0,26,106,0,25,12,30,0,0,0,114,0,0,6,0,0,0,0,5,0,0,4715\n",
      "1298,0,51,566,323,651,154,0,13,0,25,911,0,0,380,0,0,17,41,1694,0,161,28,2,5,0,205,0,1,0,14,296,160,0,0,0,10,0,0,13,0,0,0,0,0,0,0,2981\n",
      "607,2,7,233,0,2334,174,5,218,0,658,11,17,0,0,103,0,1,129,168,15,0,2,0,0,15,24,0,231,412,0,140,46,0,0,0,66,0,0,0,0,0,0,0,0,0,0,4382\n",
      "928,451,492,15,57,324,7,328,1159,0,3,7,2,0,71,7,4,158,0,70,0,0,133,0,4,1,323,0,85,0,43,73,283,0,0,0,1404,0,0,2,1,0,0,0,0,44,0,3521\n",
      "1360,0,1,118,154,894,36,564,201,24,113,105,2,5,242,32,90,51,121,284,205,74,286,216,218,0,46,54,388,7,17,1030,118,1,0,0,319,0,0,0,0,0,0,0,0,0,0,2624\n",
      "2852,0,36,578,12,376,130,176,55,0,38,1,2,65,28,0,37,0,44,61,0,5,6,4,0,0,13,14,670,0,1,101,36,0,0,525,26,0,0,1,0,0,0,0,0,0,0,4107\n",
      "1422,0,10,473,12,1085,103,21,5,1,435,0,73,9,63,179,1,4,74,149,68,94,109,13,0,20,25,0,91,0,0,118,58,0,56,17,897,0,0,0,0,0,0,0,0,26,0,4289\n",
      "2535,38,585,204,0,537,27,0,178,0,7,13,1,15,408,6,87,296,0,0,0,67,47,224,86,502,0,85,950,0,0,0,97,0,0,0,4,0,0,66,0,155,0,0,0,0,0,2780\n",
      "574,0,93,904,121,627,25,12,414,12,700,48,50,0,1045,1,66,9,14,3,9,6,40,0,186,0,0,66,0,0,0,390,0,0,0,30,112,0,19,0,2,0,0,0,0,0,0,4422\n",
      "200,46,172,135,0,2691,33,84,552,6,217,128,0,7,24,0,0,480,360,40,0,0,575,7,0,0,0,457,454,0,0,557,3,0,0,4,84,0,0,0,1,7,0,0,0,0,0,2676\n",
      "1003,0,440,265,6,225,204,51,320,35,121,3,110,15,1526,9,120,9,527,218,12,13,51,8,0,0,0,0,242,0,62,19,30,0,0,0,147,0,0,126,0,0,0,0,0,0,0,4083\n",
      "920,0,16,749,2,1117,637,53,183,0,20,0,405,1,363,0,1,0,61,61,0,3,2,1328,28,7,0,101,551,0,0,8,48,0,0,1,427,11,0,0,0,3,0,0,0,0,0,2893\n",
      "713,12,90,221,0,401,3,7,254,12,14,2,120,317,12,37,19,27,31,524,0,0,20,0,3,1,54,0,471,0,2,175,15,0,0,1,3,0,0,0,3,0,718,0,1,0,0,5717\n",
      "656,125,21,438,0,1332,72,0,89,1,306,23,26,9,30,2,1,0,2,322,773,6,716,43,0,18,0,2,69,269,71,468,1284,0,0,134,1,115,0,0,0,0,0,0,0,0,0,2576\n",
      "1637,0,91,687,0,2201,3,5,18,0,3,336,0,12,88,1,50,0,93,222,0,0,4,0,24,1,11,3,202,0,7,253,0,9,0,0,1,0,0,0,0,179,0,0,0,0,8,3851\n",
      "1271,5,178,893,0,719,61,72,342,0,61,99,58,0,7,37,3,155,12,46,0,8,86,150,0,3,125,0,13,0,55,101,201,0,0,0,1,0,0,0,531,0,0,0,0,0,0,4707\n",
      "1719,0,803,60,23,842,722,487,69,320,28,4,0,0,3,48,221,6,116,131,0,0,153,344,109,2,231,3,91,0,0,65,107,0,0,1,0,0,1,22,0,41,0,0,0,0,0,3228\n",
      "626,22,1,127,5,808,3,28,62,0,275,238,0,0,5,165,55,0,600,116,221,0,256,0,0,429,35,0,181,0,4,164,30,0,0,15,58,0,0,0,5,0,0,0,0,0,0,5466\n",
      "1289,0,0,818,0,1478,24,0,1219,0,249,0,415,1,9,0,7,0,26,168,0,67,681,143,0,5,3,5,267,0,23,349,4,0,0,0,1,0,0,2,2,0,0,0,0,0,0,2745\n",
      "296,0,473,404,139,2737,145,533,714,1,4,0,1,7,474,1,0,3,109,22,126,2,67,4,0,0,684,0,2,0,0,2,24,8,0,0,1,0,0,0,0,0,1,0,0,0,0,3016\n",
      "1014,68,12,773,129,1979,129,0,338,64,4,0,101,0,102,0,358,24,222,4,0,0,5,0,0,28,2,0,161,4,0,483,390,0,0,211,0,0,0,0,0,0,0,0,0,0,0,3395\n",
      "670,0,485,466,0,470,668,14,166,0,522,917,101,0,112,1,90,72,14,831,0,0,9,0,0,5,25,143,43,0,1,229,7,0,0,1,135,0,0,0,46,0,0,0,5,0,0,3752\n",
      "1558,1,89,253,0,865,220,0,547,1,14,0,28,0,81,5,4,280,2,232,0,32,801,0,0,65,0,0,1633,0,0,141,6,0,0,0,9,0,0,9,0,46,1,0,0,0,0,3077\n",
      "390,0,169,948,0,972,237,405,519,0,74,149,15,0,0,553,1,280,715,137,3,0,69,110,103,1,7,0,39,0,50,0,536,0,0,0,5,0,6,0,21,0,0,0,0,0,0,3486\n",
      "1011,5,1017,145,0,1484,3,19,415,42,87,27,59,195,0,59,45,1,14,0,0,0,112,0,57,94,0,146,122,0,408,77,425,0,0,0,3,0,0,0,0,0,0,0,0,0,0,3928\n",
      "683,0,775,1010,0,920,618,82,413,0,23,200,57,0,155,0,3,66,10,9,0,0,1,0,0,0,0,0,345,0,0,42,191,0,0,0,5,0,0,0,24,0,0,114,0,0,0,4254\n",
      "829,0,142,74,0,1363,21,55,267,76,30,12,374,908,970,0,103,65,3,559,852,2,144,0,0,35,0,0,124,0,272,143,4,0,0,0,13,0,0,0,0,0,105,0,1,0,0,2454\n",
      "1422,63,72,628,7,1572,38,43,42,118,85,478,0,0,5,627,77,6,100,250,0,0,0,29,0,8,0,0,844,0,0,136,155,0,0,0,41,3,0,6,0,0,0,0,0,0,0,3145\n",
      "1755,571,120,16,0,980,20,676,207,0,138,290,45,10,95,1,3,16,571,29,0,9,82,0,0,70,0,9,645,1,7,25,397,0,35,6,4,0,0,21,1,0,0,0,0,0,0,3145\n",
      "1391,0,226,493,14,1631,29,550,56,0,49,409,8,2,10,35,0,12,24,93,0,13,94,0,0,0,0,647,418,0,49,47,18,0,0,0,3,0,0,1,0,0,0,0,0,29,0,3649\n",
      "1321,5,41,1402,0,2246,6,112,370,12,24,73,3,3,525,1,93,89,24,598,0,286,584,11,18,11,1,19,199,0,11,0,298,0,0,10,31,0,0,0,58,0,3,0,0,0,0,1512\n",
      "1179,0,42,480,0,1437,210,0,27,178,5,353,25,0,1,103,7,68,126,32,0,1,313,0,0,43,14,5,246,1,0,181,41,0,0,0,477,0,72,0,0,0,0,0,0,0,0,4333\n",
      "1604,2,19,70,0,473,159,0,649,0,155,5,0,0,15,2,4,3,14,86,0,5,36,0,0,1,0,0,42,0,21,249,30,0,0,0,519,0,0,300,0,0,0,0,0,0,0,5537\n",
      "554,0,205,79,41,1768,107,4,51,0,72,453,0,0,116,0,0,852,1152,35,0,0,10,0,2,1,0,1,11,6,0,141,113,0,0,0,179,0,0,132,16,0,0,0,0,0,0,3899\n",
      "479,0,165,295,0,829,11,58,310,163,60,111,0,66,5,174,101,8,56,10,0,0,591,0,13,6,0,4,223,0,0,76,111,0,48,0,5,0,18,0,0,0,0,0,0,0,0,6004\n",
      "1061,0,165,342,0,1452,17,2,8,0,12,36,0,57,346,0,35,0,83,31,31,0,103,1007,0,0,1,1,45,0,61,608,3,12,0,0,23,0,0,0,0,0,0,0,0,92,0,4366\n",
      "203,0,620,223,0,3086,448,60,268,0,72,48,115,0,3,2,52,75,635,7,30,11,117,62,0,0,0,253,325,0,0,8,691,0,0,88,1,0,0,0,0,0,0,170,0,0,0,2327\n",
      "930,479,78,193,2,896,49,39,46,8,172,86,14,71,61,10,3,7,101,3,4,0,846,21,0,0,0,14,751,0,0,377,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,4707\n",
      "855,286,861,291,127,1157,194,0,61,81,184,0,13,0,62,109,0,0,119,338,0,181,321,0,0,0,77,0,163,0,21,37,21,0,0,0,97,0,1,0,0,67,0,0,0,0,0,4276\n",
      "306,3,315,327,20,1200,1156,0,586,258,325,9,256,56,82,0,2,54,27,101,0,7,123,0,51,2,1,4,746,0,18,3,11,0,0,0,1,0,0,0,3,0,9,0,0,4,0,3934\n",
      "1068,34,22,469,0,1756,135,0,407,32,385,9,8,59,0,2,1,5,10,11,5,0,83,66,0,0,0,0,29,0,831,2,0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,4554\n",
      "336,3,875,836,43,847,384,0,379,0,1,1020,20,0,505,21,111,8,0,149,0,0,37,0,35,75,0,0,286,0,19,571,15,0,0,58,0,0,0,10,0,0,0,0,0,0,0,3356\n",
      "2123,0,1960,30,7,630,89,0,194,0,16,1,2,93,0,4,0,0,442,78,1,0,65,0,0,1,51,0,144,0,7,508,114,2,0,42,0,0,1,0,0,0,0,48,0,0,0,3347\n",
      "1347,88,1320,460,9,561,38,0,314,4,186,8,14,0,70,29,98,855,42,2,0,62,125,5,0,83,0,103,57,0,0,6,0,0,0,0,524,0,26,0,33,0,0,0,0,0,0,3531\n",
      "906,33,7,463,1,1108,19,21,0,332,30,0,10,4,295,0,56,63,103,1,10,0,0,43,0,27,186,157,168,0,132,116,11,0,0,0,228,0,0,0,0,0,1480,0,0,0,0,3990\n",
      "622,0,5,133,0,246,1,50,1678,0,1,33,107,256,22,0,25,1,15,48,4,32,1370,1,0,0,650,0,291,0,5,4,0,0,0,1,3,0,15,0,28,1458,0,112,0,0,0,2783\n",
      "1252,57,239,21,1,1367,27,349,392,88,71,8,10,2,0,10,414,475,43,53,0,0,923,9,53,0,0,25,0,0,0,204,10,0,0,0,3,0,0,2,0,0,0,0,0,0,0,3892\n",
      "1602,0,116,65,1,1050,230,0,1440,0,4,3,159,13,0,0,1,0,0,1149,0,25,373,1,0,169,0,330,74,0,4,8,1,0,0,0,2,0,0,0,0,0,0,20,0,0,0,3160\n",
      "1154,0,11,283,0,2135,275,340,8,50,0,28,265,43,73,0,159,0,130,63,5,62,939,6,345,140,0,0,18,0,1,227,59,0,0,2,52,0,0,0,0,0,0,0,0,294,0,2833\n",
      "2506,0,362,1352,0,950,1,137,239,0,0,29,133,0,9,0,269,1,84,11,2,4,540,0,0,0,0,127,44,0,31,102,33,0,0,0,46,0,0,0,0,0,0,0,0,0,0,2988\n",
      "1006,4,294,110,0,1161,34,87,1060,15,0,0,583,151,50,388,5,1,218,55,0,2,123,0,57,8,110,10,22,0,1,607,0,0,10,49,289,0,79,4,0,0,217,0,0,47,0,3143\n",
      "826,82,4,419,2,763,0,0,37,9,73,10,28,17,0,0,21,16,2,255,0,38,1027,0,12,21,0,0,487,0,3,191,311,0,0,6,651,0,0,3,0,0,2363,21,0,0,0,2302\n",
      "1125,0,278,201,0,1810,167,0,830,139,103,71,1,47,274,69,252,1,170,5,0,211,116,126,0,0,1,1,30,7,19,98,59,0,0,0,1110,0,0,0,0,0,0,0,0,0,0,2679\n",
      "807,0,307,274,1,1080,4,192,123,19,10,0,309,0,115,29,184,6,874,20,0,0,219,0,0,316,19,0,163,0,0,691,0,0,0,0,14,0,74,92,0,0,0,0,0,0,0,4058\n",
      "842,0,604,685,23,673,960,54,18,0,76,134,36,5,0,0,9,35,115,229,8,0,9,0,0,662,0,10,186,0,0,3,0,0,0,103,652,0,129,0,37,0,45,0,0,0,0,3658\n",
      "1216,0,3,1205,0,1130,276,6,569,1,3,6,0,158,260,2,11,67,46,0,0,539,120,373,0,0,0,0,4,0,0,29,152,0,0,2,1036,0,3,0,0,0,33,0,0,0,0,2750\n",
      "374,2,915,570,3,899,144,12,161,272,122,2,0,0,225,0,267,0,424,170,18,25,185,83,0,0,0,0,1639,0,21,46,0,0,0,0,49,0,0,5,0,0,0,0,0,0,0,3367\n",
      "1270,0,155,164,0,994,19,0,253,0,134,0,172,143,0,5,0,329,71,451,0,0,158,12,0,0,0,4,305,0,0,0,0,0,100,0,130,0,0,1,139,0,0,0,0,0,0,4991\n",
      "1744,7,111,494,123,378,40,0,541,6,799,419,0,0,124,42,0,2,58,89,40,7,36,0,0,0,0,2,64,0,56,15,9,0,0,0,487,0,5,0,0,0,0,0,0,0,0,4302\n",
      "563,69,137,420,493,693,14,0,58,396,364,0,35,76,17,0,31,5,154,752,111,19,268,0,0,0,0,5,6,0,454,111,76,0,0,0,1,0,0,0,0,0,17,0,0,0,0,4655\n",
      "1609,78,384,71,0,919,5,22,829,17,639,77,0,123,21,0,38,2,76,22,17,253,159,0,0,0,25,196,307,0,41,175,374,0,0,0,3,0,4,0,0,0,0,0,0,0,0,3514\n",
      "3410,17,85,151,127,633,186,31,109,0,3,13,0,21,3,63,80,1,5,0,815,524,200,0,104,29,0,0,416,167,112,1,0,0,0,44,9,0,0,0,1,0,0,0,33,0,0,2607\n",
      "2025,0,144,728,0,598,203,25,28,0,25,235,158,1,130,1,123,28,628,6,892,2,69,4,0,0,0,0,391,0,8,167,54,0,0,0,9,0,0,13,4,0,1,0,0,0,0,3300\n",
      "665,0,44,232,111,426,1128,40,51,76,51,801,255,63,1056,113,24,103,0,4,26,0,1505,354,0,9,0,55,129,0,2,24,24,0,0,0,121,0,81,0,0,0,0,12,0,0,0,2415\n",
      "614,0,64,228,0,916,144,67,306,18,0,88,19,0,93,6,58,4,137,27,0,0,50,5,54,15,0,331,1344,601,154,223,169,0,0,0,367,0,0,1,2,0,0,163,0,0,0,3732\n",
      "1440,0,158,248,0,1675,16,2,52,0,642,3,5,141,42,8,180,6,673,364,0,40,41,0,0,4,0,395,73,0,34,60,0,106,0,130,110,0,0,0,0,0,0,0,0,0,0,3352\n",
      "1203,22,126,433,94,1666,550,85,141,0,419,46,90,7,103,0,8,120,188,0,271,33,0,1,201,89,1,0,329,0,26,359,0,0,6,1,2,1,0,79,0,0,0,0,0,0,0,3300\n",
      "112,0,295,1016,0,1814,1,114,816,0,93,363,99,113,27,0,158,1,304,20,0,0,0,75,0,0,0,0,29,0,53,256,1064,1,0,3,0,0,0,81,0,0,0,0,1,0,0,3091\n",
      "496,0,7,10,0,1633,57,14,1017,0,529,1300,9,0,369,217,302,17,209,243,0,9,55,11,0,0,0,158,24,0,2,0,1030,0,0,0,8,0,0,0,0,0,0,0,0,0,0,2274\n",
      "1265,0,131,379,16,1632,27,0,307,0,227,11,106,0,254,0,419,4,13,21,0,2,105,17,0,0,0,0,1015,0,0,10,58,0,0,0,1,0,0,2,7,0,0,0,0,0,0,3971\n",
      "790,16,847,419,3,1454,82,26,1017,1,13,33,0,0,13,0,79,186,50,50,11,67,163,0,9,0,2,23,110,0,7,4,310,0,0,0,13,0,0,0,0,0,1,0,0,0,0,4201\n",
      "718,0,3,431,0,971,235,133,1,1,8,286,238,1147,125,12,57,734,150,194,0,0,344,12,0,1,0,0,447,0,0,20,418,30,0,0,141,0,0,0,0,0,0,0,0,0,0,3143\n",
      "1468,0,48,772,90,923,146,297,213,0,32,1,22,60,13,0,161,324,252,0,0,0,46,20,0,14,0,390,0,0,0,18,0,0,0,0,325,0,0,54,0,0,193,0,0,0,0,4118\n",
      "645,0,501,852,59,688,318,163,315,15,263,14,33,0,236,56,86,0,9,1,0,2,158,107,0,655,0,45,38,0,0,19,6,0,0,0,122,0,0,5,0,1,1,0,0,0,0,4587\n",
      "907,1,192,730,0,1783,144,14,900,7,46,323,27,0,171,0,19,49,426,3,1,1,31,0,0,446,221,6,266,0,0,180,4,0,0,378,27,0,0,0,0,0,0,50,0,0,0,2647\n",
      "434,63,90,1013,345,974,546,0,332,32,98,0,2,100,415,20,16,0,35,63,1,1,1231,1,0,0,0,0,13,0,15,97,313,0,0,0,0,0,0,0,0,0,54,0,0,0,0,3696\n",
      "1509,0,224,261,0,1710,639,0,153,201,872,15,0,10,20,0,48,0,1,26,4,0,0,0,0,0,51,0,323,0,0,9,3,0,0,5,1,0,0,0,0,0,0,0,0,0,0,3915\n",
      "790,484,57,60,474,1181,6,0,190,529,971,136,29,0,298,2,6,2,372,496,0,1,267,48,4,6,0,0,95,0,0,155,208,0,0,24,85,0,0,0,0,0,0,0,0,0,0,3024\n",
      "1099,15,14,66,0,2675,200,9,398,3,31,160,43,20,35,72,236,8,240,345,27,221,92,31,0,1,2,39,70,0,55,1,265,0,114,0,76,0,0,0,0,59,0,0,0,0,0,3278\n",
      "612,269,103,621,0,2229,46,239,17,0,0,114,6,136,231,98,10,2,370,17,13,459,80,8,0,127,0,0,2,0,63,6,61,0,0,231,2,12,2,0,0,0,0,0,0,0,0,3814\n",
      "440,0,612,929,6,1449,27,15,59,0,752,535,122,1,2,45,0,194,444,449,222,0,232,460,2,5,0,2,639,1,0,360,60,36,0,1,217,0,0,94,0,27,0,0,0,0,0,1561\n",
      "2452,22,178,909,0,400,88,12,100,11,51,103,0,156,57,672,335,24,33,39,12,147,374,1,26,0,0,414,27,0,0,61,289,0,0,0,46,0,0,0,0,0,0,0,0,0,0,2961\n",
      "1591,0,5,126,3,1245,175,4,472,2,2,4,0,0,491,22,4,26,0,55,0,0,5,0,46,8,0,43,60,0,0,56,227,0,0,60,670,0,0,53,181,0,0,0,0,0,0,4364\n",
      "1074,7,1387,215,5,715,15,37,313,0,131,0,318,0,25,1,7,0,117,5,31,0,551,2,0,112,0,39,369,0,2,410,3,0,0,0,3,0,0,0,25,1,0,0,0,0,0,4080\n",
      "915,2,237,280,0,1429,604,0,988,47,530,2,0,106,10,0,685,0,34,0,0,529,571,0,0,0,3,4,455,2,0,82,0,0,0,0,13,0,0,0,45,0,0,0,0,0,0,2427\n",
      "488,0,113,241,29,1266,47,14,182,0,7,102,61,101,20,6,70,169,364,116,0,1,19,97,0,0,0,5,52,0,38,1108,3,0,0,1,3,0,2,2,68,0,0,0,0,0,0,5205\n",
      "539,45,1105,1636,0,287,8,1,645,0,358,7,34,6,285,22,1,0,22,224,0,1,99,2,0,5,0,0,194,0,0,1,474,0,0,5,44,0,0,0,0,0,0,0,0,1,0,3949\n",
      "662,32,173,1973,223,684,11,13,525,0,231,4,33,1,349,101,1,20,215,27,0,56,668,26,0,0,99,0,25,0,194,201,0,1,7,0,0,0,0,0,0,0,0,0,0,0,0,3445\n",
      "753,0,29,842,44,595,39,0,345,0,24,31,0,15,174,9,499,1,1,3,218,2,35,11,272,0,0,0,176,0,0,9,87,0,0,89,13,0,0,0,0,0,0,0,0,0,0,5684\n",
      "1620,0,71,142,0,1413,828,27,433,0,781,15,0,443,23,0,0,6,128,325,28,0,157,0,2,11,0,0,148,0,5,58,136,0,0,1,12,0,211,0,0,0,0,0,0,0,0,2976\n",
      "199,1,114,971,0,1558,337,0,788,0,53,44,7,237,42,6,23,125,343,417,3,44,27,0,2,15,0,0,31,0,0,1,338,0,0,56,28,0,0,0,0,0,0,73,0,0,9,4108\n",
      "1094,0,118,477,0,1522,106,1,878,83,133,39,4,0,54,0,97,19,3,0,2,406,156,0,0,105,0,0,672,0,0,50,9,0,0,227,22,0,0,0,1,0,0,20,0,4,0,3698\n",
      "1073,0,1083,137,6,1352,81,9,78,0,52,0,0,282,13,0,404,45,58,0,0,0,310,10,0,1,0,37,436,0,0,211,200,0,0,0,0,0,0,9,0,1,0,0,0,0,0,4112\n",
      "831,0,198,97,151,1117,337,0,117,0,90,56,307,1,75,0,1,28,170,0,0,0,554,0,11,2,0,0,201,0,0,101,27,0,165,0,21,0,0,0,0,0,0,0,0,0,0,5342\n",
      "900,110,418,455,5,2035,150,49,73,0,0,178,203,0,0,0,80,4,405,110,0,221,12,22,0,0,0,779,59,0,2,777,15,0,0,0,12,0,1,0,25,0,0,0,0,0,0,2900\n",
      "636,0,608,49,7,1144,160,116,1700,48,585,37,15,0,282,7,141,77,130,2,1,0,388,17,0,9,0,69,37,0,76,133,108,0,0,8,0,0,4,0,0,0,0,0,4,0,0,3402\n",
      "1365,0,33,496,0,349,157,0,1269,2,7,4,165,202,133,0,191,9,221,0,0,0,1259,0,0,2,2,28,71,0,0,4,1460,0,0,0,23,0,0,0,60,0,1,0,0,0,0,2487\n",
      "1149,108,285,926,1,789,16,110,49,8,8,1,5,42,739,0,4,103,0,568,6,0,4,0,0,273,0,4,192,0,15,55,40,0,0,1,13,0,0,0,0,0,0,0,0,0,0,4486\n",
      "1148,15,463,463,3,1166,382,0,425,2,0,0,69,2,47,69,0,10,37,1,0,0,134,0,0,6,2,12,59,0,0,1061,7,0,0,0,33,0,0,0,0,0,0,0,0,0,0,4384\n",
      "1670,46,4,348,0,1462,42,15,110,13,1,22,230,15,16,0,1,116,31,34,521,0,210,258,0,4,144,499,340,0,83,26,0,0,0,0,0,0,4,12,0,0,0,0,0,0,0,3723\n",
      "604,0,112,266,0,917,218,7,315,1,23,922,463,0,36,1,224,0,1,40,0,83,279,42,0,0,29,0,267,0,301,645,102,0,0,1,0,0,8,16,0,0,9,0,0,0,0,4068\n",
      "1923,32,32,343,8,858,96,0,472,0,16,12,64,1,47,1,0,1,3,1398,570,175,0,0,0,0,0,1,17,0,0,44,51,0,0,30,671,0,3,3,0,108,0,1,0,0,0,3019\n",
      "465,0,852,688,0,1633,102,240,375,0,4,72,90,355,34,51,19,0,1,19,0,53,450,0,0,0,17,0,6,4,0,120,34,0,0,0,1059,0,0,0,0,0,0,0,0,14,0,3243\n",
      "886,0,186,79,1,360,0,116,256,0,316,417,87,477,11,156,108,67,93,248,0,0,13,14,0,16,3,70,18,0,0,455,91,0,0,0,183,0,0,0,0,0,0,0,0,0,0,5273\n",
      "963,0,150,776,51,977,266,0,474,0,66,9,13,5,391,0,4,13,0,5,3,244,52,0,1,0,0,0,92,144,0,12,53,0,0,0,8,0,5,0,0,0,0,0,0,0,0,5223\n",
      "2492,106,29,363,0,793,144,18,229,0,156,35,1,0,5,12,2,148,60,369,1,151,41,0,2,137,0,247,801,0,0,200,15,0,0,0,58,0,1,0,2,3,0,0,0,0,0,3379\n",
      "327,11,4,48,3,1783,949,366,38,0,20,490,95,0,25,15,40,52,9,159,0,0,3,160,0,0,32,0,208,1,11,40,16,0,0,2,44,0,13,0,0,0,73,0,0,0,0,4963\n",
      "337,0,1,455,15,1740,12,0,264,1,46,76,0,72,142,0,1,0,369,790,805,132,27,0,0,81,0,12,0,0,1,448,76,0,0,0,323,0,0,0,0,0,0,0,0,0,0,3774\n",
      "785,64,1035,215,7,1787,237,0,145,118,8,100,0,9,35,18,0,34,24,143,5,0,329,109,0,0,0,0,421,0,31,351,1,0,0,366,8,0,15,0,0,0,0,0,0,0,0,3600\n",
      "312,0,83,810,0,300,37,14,152,0,154,46,0,144,24,10,1,40,375,6,0,0,42,29,0,84,0,1,37,0,0,26,343,98,0,0,93,0,0,0,0,0,120,0,0,0,0,6619\n",
      "1111,14,439,97,1,1043,2,53,1658,35,67,56,0,18,0,0,10,29,6,60,0,0,18,1,0,0,0,0,25,0,41,46,297,0,0,0,59,0,376,2,0,0,1,0,0,0,0,4435\n",
      "1682,0,104,7,0,1791,927,0,33,0,11,0,0,57,6,24,2,73,0,242,64,72,396,0,5,0,16,2,767,0,0,1101,63,0,0,0,324,0,1,74,0,0,0,0,0,0,0,2156\n",
      "1599,348,367,93,0,1423,380,251,169,2,9,0,31,0,30,0,1,0,41,27,1,27,398,2,0,46,0,0,310,0,0,296,1,0,0,0,55,0,0,1,0,0,2,51,0,0,0,4039\n",
      "627,0,216,303,0,469,320,180,349,3,0,0,180,1,0,1,156,0,3,533,0,118,26,0,0,0,0,0,1017,0,178,54,64,0,0,0,0,0,0,0,213,0,0,0,0,0,0,4989\n",
      "630,0,440,447,117,300,86,24,237,269,127,49,106,4,372,87,0,23,1672,142,24,0,1043,68,0,4,9,0,15,0,0,319,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3380\n",
      "1299,144,273,341,0,824,560,1,185,2,423,39,1,86,5,0,12,33,10,9,2,48,68,0,0,277,7,0,73,0,413,66,35,0,0,3,1,0,0,0,0,0,0,0,0,0,0,4760\n",
      "410,0,207,198,0,2825,32,8,495,0,75,201,1,195,22,0,315,0,182,32,0,1,561,1,126,2,0,0,180,0,0,1,0,0,0,0,5,23,1,7,0,0,0,0,0,0,0,3894\n",
      "1807,0,42,30,4,1057,420,35,269,5,54,0,201,10,52,0,49,63,360,0,625,9,10,0,0,3,0,5,84,0,0,14,73,30,0,0,0,0,0,0,0,1,0,0,0,0,0,4688\n",
      "935,7,282,174,250,712,442,5,168,2,92,0,6,152,13,327,12,0,292,0,1,406,0,12,0,0,0,0,945,0,0,730,0,0,0,0,38,0,0,0,0,0,6,93,0,0,0,3898\n",
      "869,13,0,815,0,2231,0,18,91,41,0,4,143,0,7,0,4,0,98,353,0,1,0,0,24,0,0,249,335,0,217,13,4,0,0,21,212,0,0,0,0,0,0,0,0,0,0,4237\n",
      "770,110,63,30,2,655,28,0,112,0,8,190,16,96,76,0,16,0,7,191,0,201,308,0,4,18,26,0,369,0,0,262,26,0,0,0,127,0,136,0,0,0,0,0,0,0,0,6153\n",
      "833,0,628,267,41,951,189,0,348,0,43,1,2,0,128,12,0,7,24,0,4,159,17,0,0,0,0,0,41,0,322,10,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,5918\n",
      "293,436,29,1513,30,1895,38,0,41,19,11,264,46,48,96,0,140,0,45,88,0,34,24,159,106,5,0,0,421,0,4,697,61,0,0,0,0,0,0,28,35,0,0,0,0,0,0,3394\n",
      "967,0,5,387,662,2190,347,3,330,0,36,4,0,215,30,0,34,131,85,4,202,0,0,0,0,384,0,0,191,22,0,112,0,0,0,0,100,0,1,1,0,0,0,0,0,0,0,3557\n",
      "161,0,12,645,2,571,163,0,227,0,28,37,16,1,417,39,1,39,685,138,0,6,142,0,1,0,2,57,753,0,20,318,0,0,0,7,17,6,0,17,0,1,0,0,0,0,2,5469\n",
      "406,0,6,796,24,1886,22,8,153,30,885,12,19,2,345,627,274,0,415,72,0,21,172,46,33,0,21,107,17,0,0,345,185,173,0,0,0,0,1,46,0,0,15,0,0,0,0,2836\n",
      "522,1,98,78,29,1206,142,873,569,0,13,1,10,36,45,94,126,1,0,119,0,0,347,0,0,0,0,399,113,0,0,255,0,0,0,0,50,0,0,0,0,0,0,0,0,0,0,4873\n",
      "1126,0,516,125,35,2657,88,0,43,0,95,9,3,2,258,279,0,0,70,2,0,0,0,22,0,172,0,17,335,0,0,283,2,0,0,0,2,0,0,1,0,0,2,0,0,0,0,3856\n",
      "1210,0,116,724,17,827,44,248,818,0,176,375,29,0,8,37,40,2,57,151,62,0,564,16,0,2,0,1036,50,0,140,0,0,0,0,35,222,0,36,0,0,0,0,0,0,0,0,2958\n",
      "1885,7,628,651,50,1447,66,28,174,0,62,30,81,0,14,88,348,75,69,324,0,76,47,60,0,1,0,26,28,0,348,1,184,0,0,0,25,0,0,0,0,0,0,0,0,0,58,3119\n",
      "656,7,72,51,9,2707,481,12,175,6,20,17,21,283,33,563,0,1,33,20,13,0,5,261,0,0,1,4,268,0,0,240,28,4,0,0,103,0,0,4,0,0,0,0,0,0,0,3902\n",
      "1192,8,318,254,193,716,1288,2,32,0,12,3,0,63,61,0,55,7,1,138,0,0,45,7,0,19,528,0,17,0,314,61,3,56,0,0,98,0,0,0,0,0,0,0,0,0,0,4509\n",
      "394,0,95,400,2,2224,92,4,401,4,602,0,2,0,130,0,96,0,29,44,119,3,592,48,3,0,4,0,126,0,38,1,76,0,90,0,3,0,0,0,0,0,0,0,0,0,0,4378\n",
      "818,0,23,498,0,967,294,218,40,15,10,15,0,21,21,1,39,0,0,24,0,0,120,7,0,2,568,0,652,0,249,501,0,0,0,487,23,0,0,0,0,0,0,0,0,0,0,4387\n",
      "756,0,107,548,0,911,10,0,364,249,0,140,145,11,467,0,281,403,993,80,0,51,1,0,0,3,1,0,9,0,0,120,0,0,0,4,119,0,0,36,1,0,0,0,0,0,0,4190\n",
      "1690,0,5,112,0,1214,57,33,42,0,212,7,89,103,27,0,11,0,37,100,1,0,5,149,5,0,0,0,278,0,42,11,5,4,0,0,153,0,0,2,0,282,0,3,0,0,0,5321\n",
      "887,0,115,246,20,1021,12,111,103,72,52,123,0,1,263,0,135,1,556,275,250,150,661,0,0,39,487,4,71,0,1,396,519,0,0,0,681,0,99,1,0,2,0,0,0,0,0,2646\n",
      "704,16,682,532,33,929,0,2,274,12,17,0,113,23,7,9,1,195,46,1,0,0,13,0,85,2,0,0,446,0,1,191,296,0,0,0,1024,0,0,69,81,0,0,0,0,0,0,4196\n",
      "2505,0,86,46,3,1043,119,27,180,251,2,23,340,0,333,0,4,135,42,0,0,335,10,0,443,7,0,0,110,0,4,30,465,0,0,0,32,0,0,0,180,0,0,0,0,0,0,3245\n",
      "327,8,336,587,0,899,0,5,56,0,30,0,44,1,6,0,70,78,224,85,0,0,79,49,0,1,0,0,469,154,72,116,24,2,0,1,581,0,0,0,0,0,0,0,0,0,0,5696\n",
      "517,0,103,869,39,1600,40,46,100,6,119,3,7,253,145,6,36,0,4,212,0,0,17,0,0,69,0,5,7,363,0,21,413,0,0,0,262,0,0,0,0,0,0,0,0,0,0,4738\n",
      "753,0,401,300,0,954,4,237,482,0,824,480,210,0,2,324,2,0,0,6,37,21,93,186,5,0,0,0,117,0,4,503,6,0,0,0,252,0,0,0,12,0,0,0,0,0,0,3785\n",
      "729,26,497,44,10,968,16,281,270,1,315,12,3,460,19,52,59,690,46,297,8,2,154,0,944,384,0,5,147,0,0,71,1,0,0,0,343,0,0,19,0,0,36,0,0,0,1,3090\n",
      "1223,0,204,171,0,1401,437,38,281,91,284,0,55,0,4,71,138,88,2,78,0,10,10,166,0,0,0,0,66,0,0,13,21,0,0,0,132,0,0,0,0,0,5,0,0,0,0,5011\n",
      "1148,30,266,678,0,1222,526,569,1289,0,20,53,0,0,62,39,44,0,642,0,0,0,435,0,0,0,0,1,64,0,0,385,183,0,0,0,74,0,0,2,0,0,0,0,0,0,0,2268\n",
      "1087,0,97,443,0,2190,142,273,148,30,57,0,21,89,502,0,214,3,18,240,134,153,12,0,0,0,0,0,103,0,0,23,0,0,0,0,8,0,7,0,0,0,0,0,0,0,0,4006\n",
      "1384,75,1734,589,0,1332,152,1,211,697,4,3,111,58,3,40,0,0,27,67,16,39,3,0,4,79,0,8,82,0,0,84,17,0,0,0,122,0,0,0,8,0,0,0,0,0,0,3050\n",
      "661,0,981,139,0,871,27,201,66,0,389,87,198,0,286,2,190,3,13,0,0,47,471,7,0,100,676,0,113,0,0,11,5,0,0,0,152,0,0,2,0,0,0,0,0,0,0,4302\n",
      "1501,14,1029,137,29,1546,245,1,92,8,22,134,65,0,70,0,152,24,2,11,0,0,8,0,79,0,0,97,196,0,0,9,571,0,0,0,18,0,0,0,0,0,0,0,0,0,0,3940\n",
      "1423,167,74,206,0,350,244,1,140,41,10,0,19,0,9,1,482,62,82,9,91,773,73,0,0,807,0,49,11,0,14,6,0,0,0,135,353,0,0,0,0,0,733,0,0,0,0,3635\n",
      "183,0,124,272,52,1898,361,2,135,0,1,0,104,0,57,17,2,1180,322,424,0,0,84,2,0,0,0,0,258,3,7,261,112,0,0,0,188,0,0,0,0,0,0,0,0,0,0,3951\n",
      "545,8,64,1109,182,691,763,0,242,102,437,1,0,0,2,1,1222,77,606,12,1,62,123,0,0,0,0,1,496,29,0,71,34,0,0,0,134,0,278,0,0,0,0,0,0,0,0,2707\n",
      "647,0,26,435,16,3785,979,355,80,0,7,363,7,0,4,0,58,2,254,186,0,0,39,0,0,54,0,0,120,0,3,5,2,0,0,0,84,0,0,25,0,0,0,0,0,0,8,2456\n",
      "3960,45,122,388,6,921,153,41,4,11,124,0,3,64,675,1,0,0,57,35,3,0,12,0,0,0,0,14,246,0,4,5,6,0,0,0,172,0,0,0,0,0,0,0,0,0,0,2928\n",
      "1047,0,9,206,37,1013,435,134,360,228,4,0,162,0,95,159,833,35,2,301,0,0,212,0,0,478,0,0,15,0,0,30,2,7,0,0,465,0,0,214,14,0,0,0,6,0,7,3490\n",
      "1907,54,45,29,2,2607,546,1,75,0,152,198,1,92,0,0,13,4,14,2,0,0,40,253,25,5,30,0,99,0,2,6,281,0,0,192,135,0,0,0,0,0,56,0,0,0,0,3134\n",
      "1123,0,158,68,58,1290,95,66,311,734,1,298,0,2,13,1,2,0,514,0,43,0,485,0,0,53,1,0,9,0,32,8,88,0,0,0,11,0,0,0,0,0,0,0,0,0,0,4536\n",
      "1087,0,63,807,1,1786,19,3,282,1,28,268,0,0,39,1,1,190,144,20,0,37,55,0,0,1,0,0,27,0,0,20,956,0,0,0,12,0,0,0,0,0,0,0,0,0,0,4152\n",
      "477,2,196,601,12,411,249,2,540,201,140,537,21,0,906,0,0,6,449,0,0,2,136,209,0,117,0,96,1,0,0,327,1,0,0,3,49,0,0,0,0,0,0,0,0,0,0,4309\n",
      "176,0,7,775,0,2240,1,1,454,0,0,1,0,80,0,115,378,0,397,98,0,34,126,0,0,3,0,0,766,0,0,142,10,0,0,0,3,0,0,0,0,0,0,0,0,0,0,4193\n",
      "713,97,160,215,0,1594,120,3,484,19,12,129,148,2,0,0,351,1,1,0,12,77,52,20,0,0,101,0,246,0,0,71,0,0,0,33,86,0,0,0,0,0,126,14,0,0,0,5113\n",
      "820,2,382,1016,0,1176,167,42,116,76,89,31,760,0,0,106,529,0,62,273,0,0,24,0,0,0,0,20,36,0,0,296,68,0,0,0,81,0,0,1,3,0,4,0,0,0,0,3820\n",
      "1655,0,294,246,285,1009,38,59,75,0,203,29,0,1,18,16,424,294,186,259,12,0,11,44,0,44,0,0,104,0,0,9,0,0,0,25,65,0,0,0,0,0,0,0,0,0,0,4595\n",
      "1236,0,454,681,0,1265,87,0,17,3,3,27,3,112,210,0,13,131,81,1011,0,134,7,13,0,5,0,6,205,0,294,336,56,0,0,16,145,0,0,179,75,0,354,0,0,0,0,2841\n",
      "689,30,204,35,301,915,45,0,161,0,461,1,359,79,122,18,39,0,93,7,803,1,367,4,0,596,0,0,52,0,1,51,183,0,0,0,4,0,0,2,0,0,5,0,0,0,0,4372\n",
      "1305,0,1082,33,15,1163,15,0,923,861,35,23,75,38,79,0,276,40,2,221,187,46,38,0,0,0,2,24,211,0,0,224,30,0,0,75,0,0,0,0,0,21,0,0,0,0,0,2956\n",
      "710,0,764,260,0,2348,0,27,189,9,68,12,58,0,163,18,309,8,130,20,0,0,75,0,209,42,0,0,48,19,0,378,12,0,0,0,8,0,0,0,0,92,0,0,0,0,0,4024\n",
      "2452,0,92,267,321,1345,630,0,558,0,111,81,114,0,17,0,92,252,156,74,0,0,50,0,0,5,0,0,425,0,1,18,322,0,0,8,21,0,0,0,0,0,6,0,0,0,0,2582\n",
      "1650,0,185,219,0,1482,44,106,330,0,1,57,0,1,1,95,243,1,0,52,1,43,21,0,0,0,7,39,931,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,246,4241\n",
      "902,154,2,181,0,1013,1,1,1486,4,47,75,10,6,14,0,12,312,66,599,0,825,6,0,0,134,0,172,7,0,18,4,15,0,0,29,99,0,0,6,0,0,0,0,0,0,0,3800\n",
      "582,70,416,126,146,633,170,0,10,0,165,0,7,24,1162,3,32,15,29,444,147,1,195,0,0,18,0,131,89,0,0,11,12,0,0,140,1,0,3,0,0,0,6,0,0,0,0,5212\n",
      "650,76,352,73,20,1164,56,320,21,0,5,52,0,0,387,0,79,0,4,1677,5,93,185,0,0,215,0,128,194,0,0,111,227,0,0,0,41,0,0,0,0,0,0,0,0,0,0,3865\n",
      "302,0,304,470,6,1895,301,1,226,0,39,3,199,5,38,568,194,63,227,51,628,0,135,0,0,0,123,0,64,0,214,90,414,0,0,0,318,0,0,146,538,0,0,27,0,0,0,2411\n",
      "391,0,18,960,1,537,39,0,44,28,615,0,29,0,0,147,71,0,5,55,186,0,408,31,32,0,0,0,89,0,529,378,6,0,1,23,0,0,0,0,65,0,2,0,0,0,0,5310\n",
      "1105,61,315,230,0,767,102,0,201,132,371,115,65,50,35,0,0,109,177,0,0,297,412,183,0,0,1,0,34,0,1,354,80,0,0,0,539,0,0,5,0,0,0,0,0,0,0,4259\n",
      "365,47,40,394,88,3011,10,257,179,194,0,34,1,688,268,508,0,17,245,17,33,0,47,1,19,0,39,0,35,412,0,14,0,0,0,15,14,1,0,0,0,0,0,0,0,1,0,3006\n",
      "558,25,254,961,36,681,3,144,124,5,141,234,63,8,526,0,152,2,250,15,247,0,116,0,0,1,0,0,187,1134,0,2,25,0,95,0,69,0,0,0,0,60,0,0,0,0,0,3882\n",
      "343,0,573,605,8,1269,0,144,206,50,18,106,728,5,304,32,20,44,31,147,0,0,185,0,0,0,1,0,334,159,140,63,333,0,0,0,39,1,0,0,0,594,0,0,0,0,0,3518\n",
      "2667,0,17,516,221,567,115,0,789,54,206,886,88,0,143,34,130,207,30,19,1,6,27,2,0,15,0,0,496,0,0,65,0,0,0,2,112,0,0,0,0,0,0,0,0,0,0,2585\n",
      "946,0,143,636,0,1350,5,0,167,224,16,41,67,58,0,13,129,8,14,362,15,0,124,1,0,3,1,21,237,0,21,173,0,0,0,0,405,0,0,0,0,1,1,0,0,23,0,4795\n",
      "174,0,519,362,0,1349,130,16,190,13,15,0,25,33,4,12,28,20,130,66,0,169,57,152,0,0,0,292,790,0,0,108,162,0,0,0,130,0,0,0,3,0,0,0,0,0,0,5051\n",
      "1936,0,245,924,0,322,607,11,2,61,68,212,11,2,749,35,203,4,7,59,3,0,15,0,0,0,0,0,212,0,167,15,64,0,0,13,746,0,7,73,0,0,0,0,0,0,0,3227\n",
      "322,1,4,1274,0,746,221,10,805,0,20,26,0,25,113,0,11,24,274,89,89,242,110,5,0,92,0,32,27,0,0,2,17,0,0,0,67,0,16,492,0,0,0,0,0,0,0,4844\n",
      "1967,0,227,381,8,667,234,27,0,0,57,126,60,9,121,0,0,168,69,5,80,1,78,0,0,0,0,106,172,0,0,476,25,0,0,0,10,0,0,0,2,0,0,0,0,0,0,4924\n",
      "418,0,301,729,456,912,55,30,132,274,211,495,0,10,349,28,314,35,12,0,0,99,368,0,0,0,11,0,24,0,30,14,54,0,0,0,6,0,0,456,0,0,1,0,0,0,0,4176\n",
      "859,120,42,57,12,406,119,167,96,0,68,127,12,4,66,0,294,662,41,0,2,2,0,76,15,811,506,15,213,0,16,261,3,0,0,4,46,0,0,0,0,0,0,0,0,0,0,4878\n",
      "547,0,10,29,6,1856,104,0,38,11,143,82,502,122,660,43,55,4,92,43,11,189,228,0,0,0,103,2,519,0,0,38,69,0,0,0,50,0,0,0,0,0,0,0,0,0,0,4444\n",
      "2291,5,190,792,4,663,95,374,430,0,371,20,7,3,169,0,522,0,42,98,0,4,0,34,0,6,0,2,319,7,0,190,774,0,0,0,0,0,0,4,1,209,0,0,954,0,0,1420\n",
      "794,0,647,1016,0,1829,121,11,36,0,142,0,15,5,46,5,4,4,42,150,4,0,93,4,0,1,1,5,32,0,7,237,189,0,0,9,52,0,0,0,0,0,0,0,0,0,0,4499\n",
      "1770,159,10,407,0,1199,9,91,1083,0,82,1,127,1,58,28,1246,122,3,4,9,162,136,0,6,0,40,62,497,0,0,15,2,1,0,0,259,0,0,0,0,0,12,0,0,0,0,2399\n",
      "1523,0,12,664,0,965,24,171,15,593,15,56,0,90,261,13,0,3,96,91,15,3,262,0,0,51,0,15,14,0,0,15,32,0,0,0,101,0,0,383,0,0,0,0,0,0,0,4517\n",
      "652,4,459,887,2,798,77,75,258,4,268,0,0,0,206,1,8,319,18,314,45,0,13,0,0,145,54,0,502,0,14,706,13,3,0,0,99,0,0,0,0,0,0,0,0,0,0,4056\n",
      "1829,0,88,137,0,1534,27,1,145,0,81,40,7,1,843,6,272,0,224,13,12,0,490,5,0,1,0,1,722,0,0,432,47,31,0,0,50,0,0,14,0,78,0,0,0,0,0,2869\n",
      "2285,127,255,755,0,1430,2,91,30,1,122,0,222,127,6,4,133,3,192,50,0,0,83,0,0,91,31,1,6,0,0,4,0,0,0,0,23,0,0,0,0,0,57,0,0,0,0,3869\n",
      "862,0,1019,136,17,1287,36,240,98,88,149,429,148,306,0,0,1,36,443,1,60,0,89,21,4,236,148,3,367,0,0,185,12,0,0,4,91,0,0,3,93,2,0,0,0,0,0,3386\n",
      "990,51,84,230,0,2364,165,11,74,0,64,568,178,3,16,0,7,7,334,141,0,192,277,1,0,60,0,0,554,0,0,134,13,0,0,0,8,0,0,0,0,0,39,0,0,0,0,3435\n",
      "2315,5,480,752,0,1054,1,15,549,0,0,0,379,4,2,121,62,1,138,2,4,0,190,0,0,1,0,0,126,0,0,3,6,0,0,0,47,0,0,164,0,0,0,0,0,0,0,3579\n",
      "158,0,611,788,16,337,1062,18,39,89,4,174,1,0,4,396,30,0,275,225,59,0,260,105,0,0,972,183,109,0,0,140,147,0,0,2,9,0,0,0,0,0,0,0,5,0,0,3782\n",
      "998,14,145,318,82,1385,888,0,56,0,0,302,13,45,188,17,0,2,19,1,0,0,1,0,8,179,37,1,315,0,0,923,81,0,0,0,18,0,0,0,0,0,47,0,0,0,0,3917\n",
      "100,0,28,0,0,1177,42,248,93,23,147,261,14,77,29,0,10,22,120,16,0,3,295,901,5,0,121,0,247,0,32,49,57,0,0,0,475,0,719,0,0,0,0,3,0,0,0,4686\n",
      "2587,2,82,117,16,1381,88,0,166,67,364,64,0,3,3,363,118,1,32,0,0,0,75,0,0,0,0,105,628,0,7,0,2,0,0,0,39,0,0,0,40,1109,134,0,0,0,0,2407\n",
      "1136,0,703,493,0,776,119,3,4,91,0,38,0,246,114,96,115,0,298,39,0,0,157,19,0,1,4,1,864,0,0,3,211,0,0,0,83,0,0,0,2,0,0,0,0,0,0,4384\n",
      "247,28,177,76,19,1907,350,1,714,69,90,78,0,497,225,36,116,2,72,93,11,0,7,0,10,0,0,0,74,0,0,346,22,0,0,0,12,0,0,0,0,0,0,0,0,5,0,4716\n",
      "271,0,171,673,2,918,22,243,17,0,1,318,101,10,172,171,830,1,126,6,0,23,332,0,0,24,0,0,35,0,1217,61,267,0,0,0,35,0,0,15,0,0,0,0,0,0,0,3938\n",
      "1030,28,375,64,0,2046,221,2,433,0,299,120,178,157,555,14,128,326,29,111,0,0,3,0,0,1,4,0,610,0,22,19,13,0,0,0,65,0,0,0,0,0,0,0,0,0,0,3147\n",
      "421,194,32,90,0,1604,252,0,1063,113,13,0,40,295,478,41,26,0,249,4,0,0,148,0,0,2,0,0,392,0,74,4,15,0,0,0,15,0,0,0,0,0,0,0,0,0,0,4435\n",
      "658,1,16,636,0,1035,524,30,229,190,741,53,76,390,7,0,194,1,54,89,0,0,4,180,2,5,13,0,214,315,0,58,4,0,0,6,27,0,54,0,0,0,0,0,0,0,0,4194\n",
      "603,0,362,129,0,2403,91,23,22,0,261,1,108,0,93,0,72,51,3,395,0,7,14,18,0,13,0,0,40,0,0,1172,2,0,0,117,37,0,0,0,0,92,0,0,0,0,0,3871\n",
      "427,81,92,260,61,2507,285,0,38,0,269,33,931,44,0,1,58,37,22,172,1,113,82,6,0,0,0,0,584,0,0,13,216,0,0,0,8,0,0,6,0,0,0,0,0,0,0,3653\n",
      "1222,0,861,678,0,677,140,13,753,0,131,16,3,70,18,7,30,0,106,101,4,42,1,0,0,0,21,49,671,0,0,100,1,0,0,35,624,0,0,184,0,0,0,0,0,0,0,3442\n",
      "1977,10,325,1564,0,493,1292,0,570,0,46,5,141,42,256,0,191,47,196,105,0,0,7,0,0,32,40,0,7,0,315,2,2,0,0,0,28,0,0,0,1,0,0,0,0,0,0,2306\n",
      "351,10,123,9,0,2318,0,0,292,2,1196,0,0,1,1,0,298,0,1,58,0,0,99,1,0,0,1,0,457,0,0,135,164,0,0,0,81,0,0,1,0,0,0,0,0,0,0,4401\n",
      "922,0,382,1982,2,299,358,0,125,246,20,0,9,18,178,5,0,45,593,15,0,0,28,0,0,11,314,0,315,0,830,17,140,0,0,11,0,0,0,0,0,0,0,0,0,0,0,3135\n",
      "1951,0,147,381,111,1403,379,4,190,65,311,18,1,0,5,86,116,91,134,37,10,0,68,0,0,45,0,2,271,0,8,380,1,0,0,0,0,0,0,16,4,0,0,0,0,1,0,3764\n",
      "1059,0,379,348,0,420,7,90,1789,1,119,5,65,227,355,0,50,6,749,89,137,0,55,0,0,1,0,1,28,8,0,3,231,0,0,0,159,0,2,0,0,0,0,0,0,0,0,3617\n",
      "1257,237,27,224,5,406,394,0,203,0,0,0,244,9,1172,36,144,0,31,8,68,244,13,0,0,0,1,0,476,0,1,464,226,1,0,2,53,0,0,0,0,0,0,0,0,0,0,4054\n",
      "481,264,251,55,0,1560,143,356,5,5,6,0,16,12,840,0,315,4,15,193,0,0,131,1,0,45,28,0,124,0,15,401,0,0,0,0,417,0,0,0,19,0,38,0,0,173,0,4087\n",
      "788,2,190,100,0,1660,461,15,187,0,320,2,71,0,11,0,100,5,2,118,0,0,3,1,0,1,0,0,470,0,0,54,0,0,0,0,120,0,110,0,0,0,5,0,0,0,0,5204\n",
      "1266,0,367,63,1,1334,12,72,10,15,323,183,11,61,223,15,208,899,89,1,28,0,52,0,3,57,0,0,717,0,0,8,565,0,0,94,7,0,0,1,0,0,0,0,0,0,0,3315\n",
      "564,799,30,801,0,1179,603,423,26,0,3,27,0,100,8,0,77,0,158,231,3,23,920,53,0,34,0,0,176,0,0,977,9,4,0,306,0,0,0,0,0,0,0,0,0,0,0,2466\n",
      "1252,1,319,34,26,761,1,24,53,190,557,20,200,0,214,7,54,329,891,225,0,0,509,462,56,2,8,0,55,0,0,0,295,0,0,71,28,0,0,0,0,0,0,0,0,0,0,3356\n",
      "1010,0,153,366,197,1196,56,0,294,0,539,186,10,2,403,26,257,132,41,216,43,360,209,165,0,26,10,28,91,0,0,265,235,0,0,0,138,0,0,1,0,0,0,0,0,0,0,3345\n",
      "820,13,1225,34,0,1058,243,200,861,0,257,48,322,2,207,0,1,16,177,4,33,0,43,0,16,0,0,0,281,0,0,193,70,0,0,5,87,0,0,55,0,0,0,0,0,0,0,3729\n",
      "1372,3,355,1289,0,615,761,62,115,0,73,14,263,453,3,56,35,35,279,121,0,0,7,183,8,25,0,5,291,0,157,71,137,0,0,2,254,0,0,5,0,0,0,0,0,0,0,2951\n",
      "1029,0,246,175,190,508,295,34,248,1,131,15,185,1769,0,174,375,40,31,1,2,0,557,0,0,0,1,8,224,0,105,130,314,0,0,0,14,0,0,0,0,0,0,0,0,0,0,3198\n",
      "686,0,120,957,409,1118,35,0,277,1,296,29,0,10,1174,106,65,96,66,17,0,0,11,0,0,7,41,229,459,0,0,424,81,25,0,0,528,0,0,0,4,0,0,0,0,0,0,2729\n",
      "1519,6,519,747,1,469,36,0,431,3,59,163,0,0,31,265,260,7,51,524,0,4,362,0,0,0,0,4,289,0,0,14,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4226\n",
      "1343,0,573,205,46,1060,789,22,564,0,119,154,121,92,53,4,364,12,46,36,4,147,0,1,0,1,0,0,84,0,4,49,639,0,0,70,222,0,0,1,35,0,7,0,0,0,0,3133\n",
      "1458,0,234,128,0,494,182,1,1556,36,16,5,197,6,443,131,37,84,14,43,6,2,130,0,0,0,0,0,2,501,0,0,44,0,0,0,508,0,0,1,0,1,0,0,22,0,0,3718\n",
      "937,8,367,123,7,1930,298,1,652,173,0,10,157,14,95,0,98,157,261,38,4,228,4,49,175,18,1,83,59,0,0,3,168,0,4,0,106,0,0,76,6,0,0,1,0,0,0,3689\n",
      "664,0,155,480,179,1162,740,8,632,0,271,21,8,0,0,3,12,5,150,92,210,0,259,2,0,88,1,0,44,0,445,131,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4216\n",
      "289,78,763,184,264,1229,62,13,259,3,14,14,248,49,1,0,117,48,245,8,0,360,127,203,2,0,1,2,123,40,24,81,25,0,0,0,10,0,0,0,1333,0,0,0,0,0,0,3781\n",
      "861,0,66,78,0,2330,46,160,126,176,132,13,39,31,12,7,0,99,7,0,60,45,110,3,0,13,0,2,3,0,152,515,1391,0,0,267,60,0,0,8,0,0,0,0,0,0,0,3188\n",
      "410,6,477,38,0,2080,101,0,1401,27,359,23,0,26,87,4,25,9,0,0,1,0,257,0,0,0,0,0,306,0,0,251,0,0,0,0,402,0,0,0,0,0,0,0,0,0,0,3710\n",
      "1862,0,323,1605,24,1327,276,69,174,0,25,134,0,12,98,0,6,0,31,114,0,105,2,0,0,0,0,0,43,0,111,532,236,0,0,0,48,0,0,0,0,0,12,0,0,0,1,2830\n",
      "1017,0,228,724,1,1419,639,112,295,0,698,8,130,0,0,0,233,5,875,134,0,12,122,0,0,0,3,0,8,0,0,77,14,0,0,1,0,0,0,32,0,0,0,0,0,0,0,3213\n",
      "483,0,125,590,0,2091,248,279,703,1,95,6,0,16,462,1,74,5,279,112,0,243,231,7,0,3,1,74,165,0,370,16,254,0,0,0,2,14,0,0,0,1,0,1,0,0,0,3048\n",
      "743,12,88,1038,94,2390,73,5,265,73,24,274,1,0,55,303,121,11,80,9,6,0,511,145,0,0,0,14,3,0,34,6,732,0,0,0,10,0,9,0,0,0,0,0,0,0,0,2871\n",
      "865,16,130,241,0,1572,1489,156,174,14,169,12,68,88,8,0,2,0,491,307,44,55,497,7,0,5,0,0,5,0,37,2,1,0,0,34,513,0,0,0,0,0,0,0,0,0,0,2998\n",
      "1014,0,1,335,519,367,11,408,197,22,22,113,0,11,5,13,235,10,122,52,0,0,339,2,0,4,0,3,96,0,115,293,0,0,0,27,1,0,0,0,0,0,4,2,0,0,0,5657\n",
      "194,0,40,220,0,2262,43,226,2,0,10,26,54,213,7,262,0,0,393,44,0,49,142,0,0,0,0,45,43,0,0,362,367,0,0,11,118,0,0,0,0,0,0,0,0,0,0,4867\n",
      "1890,8,131,371,12,802,134,34,750,120,703,13,0,28,82,5,0,45,5,204,0,89,120,0,0,0,11,0,294,0,714,3,0,0,0,0,4,0,1,0,3,0,0,0,0,0,2,3422\n",
      "552,0,89,442,0,1793,653,12,185,18,60,88,1,23,167,0,45,42,11,264,0,11,150,32,0,0,1,13,43,0,0,1,231,0,0,3,16,0,0,3,0,0,0,0,0,0,0,5051\n",
      "447,0,728,119,0,2153,38,48,763,1,6,1,0,155,5,19,33,390,349,44,1,0,30,0,21,0,0,50,313,746,1,113,2,0,0,0,0,0,10,0,1,0,0,0,0,0,0,3413\n",
      "550,0,9,314,0,1472,2,0,463,79,0,67,4,0,10,781,56,2,369,21,0,17,182,0,0,13,0,0,154,0,13,67,612,0,0,1,110,0,0,0,0,0,0,0,10,0,0,4622\n",
      "1007,6,654,606,11,1194,3,499,49,8,14,1,53,88,15,136,16,0,39,0,1,0,10,0,0,24,253,1,254,0,0,831,25,0,0,0,3,0,10,0,0,0,545,0,0,0,0,3644\n",
      "2113,26,113,472,98,1645,204,41,30,15,78,0,843,0,0,29,0,0,140,5,6,6,929,1927,0,0,8,0,8,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1253\n",
      "920,0,200,1708,75,864,41,13,91,0,223,265,39,6,1,6,193,578,340,2,13,7,46,11,0,0,0,3,168,0,0,5,0,0,0,51,227,0,1,5,0,0,0,0,0,0,0,3898\n",
      "1443,0,55,142,0,1063,0,15,745,0,45,16,520,73,220,47,2,0,0,9,37,13,86,0,73,0,8,15,25,0,0,95,0,0,0,0,535,0,0,31,0,0,0,0,0,0,0,4687\n",
      "1886,71,415,110,18,1597,52,5,149,0,17,15,187,90,38,249,22,11,142,813,0,185,203,0,0,431,0,0,875,0,8,36,0,0,0,0,183,0,0,197,0,0,0,0,0,0,0,1995\n",
      "589,176,302,120,0,2187,25,212,295,380,75,0,358,68,64,1,0,3,110,605,0,0,0,0,0,0,0,112,33,0,0,3,75,0,0,83,24,0,0,0,0,0,58,0,0,0,0,4042\n",
      "1467,0,130,140,31,1986,0,141,237,0,245,12,0,86,272,0,104,2,401,17,289,121,3,124,0,19,0,0,637,0,0,22,0,0,0,0,0,0,1,4,0,0,13,0,0,0,0,3496\n",
      "684,3,179,493,0,1245,0,3,710,5,427,2,85,4,0,109,12,0,374,313,5,17,96,0,6,12,230,0,1099,0,65,296,27,0,0,0,441,0,0,0,0,0,0,0,0,0,0,3058\n",
      "224,27,0,940,0,858,55,0,644,161,298,0,1,0,227,1763,32,0,27,3,2,4,165,0,0,0,0,151,760,0,0,13,165,0,0,0,154,0,0,3,6,0,0,0,0,0,0,3317\n",
      "1586,0,0,70,85,1868,191,20,126,192,152,0,1,0,22,11,11,166,423,23,0,0,206,5,0,2,7,0,72,0,123,12,103,0,0,0,16,0,0,2,0,0,0,0,0,0,0,4505\n",
      "1639,0,7,381,5,1999,213,0,259,4,0,15,5,64,15,43,24,22,175,8,0,0,45,3,0,25,4,6,244,0,0,258,270,0,0,1,154,0,0,0,3,0,0,0,0,0,0,4109\n",
      "1121,0,53,111,0,1676,105,0,356,4,55,0,526,53,1322,14,25,139,551,7,250,0,78,3,0,0,61,8,6,0,0,22,147,0,0,0,36,0,0,0,0,0,0,0,0,0,0,3271\n",
      "1002,18,27,261,0,1353,51,253,112,138,368,29,6,11,83,414,5,4,4,138,97,0,190,16,0,31,0,15,17,0,1,192,17,199,0,0,1,0,1,0,0,0,0,0,0,0,0,4946\n",
      "781,0,25,513,0,500,200,29,152,237,525,889,15,0,2,0,93,54,3,639,0,191,199,0,0,47,0,0,10,0,0,2,109,0,0,6,0,0,0,0,0,0,0,0,0,0,0,4779\n",
      "569,0,1222,186,0,1389,43,53,31,0,40,0,1,0,118,0,0,0,14,287,1,0,9,0,0,6,0,0,102,298,0,367,21,0,0,0,245,0,0,12,0,3,0,0,0,0,0,4983\n",
      "1563,1,198,719,0,1408,14,9,5,9,112,686,0,0,602,238,26,0,554,15,3,0,14,7,0,15,0,1,453,124,0,345,0,0,0,34,24,0,0,3,0,0,0,0,0,0,0,2818\n",
      "961,0,162,575,0,1630,2,1175,131,13,34,0,170,184,770,0,14,30,1,59,0,0,120,0,3,142,166,6,28,0,4,0,428,0,0,0,125,0,0,0,0,0,0,0,0,0,0,3067\n",
      "143,0,42,1745,3,1036,63,0,118,108,13,39,49,54,53,21,99,0,32,0,46,0,537,351,22,0,4,0,14,0,4,900,1,0,0,0,3,1,0,0,0,0,0,0,0,0,0,4499\n",
      "2159,3,38,400,0,966,223,22,355,0,2,0,16,211,0,1,88,30,102,330,8,109,645,100,59,0,0,0,115,5,3,12,65,0,0,751,1,0,0,0,1,0,0,0,0,0,0,3180\n",
      "1260,0,7,61,0,1219,436,46,205,23,78,29,265,153,0,195,56,118,204,0,1,3,151,0,1,0,0,0,696,0,1,206,5,0,0,3,331,0,0,0,18,0,0,0,0,0,0,4229\n",
      "1028,0,0,421,5,393,213,0,794,87,106,3,23,22,0,1,427,112,13,361,10,0,204,1,0,1097,0,42,47,0,0,112,0,0,0,0,11,0,0,22,248,93,0,0,0,0,0,4104\n",
      "3366,7,333,266,0,525,259,89,1,0,66,209,319,124,254,0,91,0,134,8,158,6,439,235,0,0,0,0,95,0,0,15,183,0,0,277,84,0,0,6,0,0,0,0,0,0,0,2451\n",
      "2147,0,182,321,296,1817,15,3,188,0,1,355,115,0,287,2,0,187,10,21,35,0,106,0,147,232,0,3,125,0,25,31,0,0,0,0,128,0,132,4,57,0,0,0,0,0,0,3028\n",
      "1064,1,33,232,0,1082,825,63,762,287,145,195,281,10,5,1,54,0,170,192,77,1,6,0,3,0,280,0,57,0,26,251,250,0,0,0,0,0,0,347,0,0,0,0,0,0,0,3300\n",
      "657,536,257,809,0,662,170,376,475,0,7,1,496,474,0,4,8,3,94,121,1,0,96,224,0,19,15,126,15,0,0,227,0,0,0,0,199,0,0,0,1,0,0,0,0,0,0,3927\n",
      "1012,0,34,204,0,1049,370,42,596,7,2,0,257,630,1,8,0,216,112,2,0,9,995,0,0,127,31,83,0,0,0,124,3,0,0,0,488,0,0,0,0,0,0,0,0,0,0,3598\n",
      "1251,135,683,81,0,1248,67,0,83,56,78,0,192,13,65,451,0,86,122,203,0,515,69,0,2,54,3,50,564,0,265,13,1,0,0,0,498,0,0,0,0,0,0,0,0,0,0,3152\n",
      "1464,0,620,187,0,809,88,3,79,18,692,2,2,50,47,117,259,4,39,95,1,3,0,1,0,0,7,274,4,0,168,16,45,0,0,0,917,0,0,188,0,0,0,46,0,0,0,3755\n",
      "586,0,148,498,3,929,113,35,183,98,740,77,0,0,8,0,0,1711,276,2,0,91,9,0,16,0,0,0,895,0,0,2,389,0,0,0,35,0,0,0,99,0,214,0,0,0,0,2843\n",
      "698,15,841,1055,16,1355,2,386,6,1,0,107,55,26,32,80,4,113,60,17,166,10,277,9,0,2,105,0,4,0,0,41,29,0,0,0,138,0,0,2,3,0,0,0,0,0,0,4345\n",
      "1482,19,194,343,34,1140,98,0,566,0,126,0,67,132,2,1,182,31,95,299,0,24,606,0,1,0,0,112,491,0,0,24,1,0,0,0,1521,0,0,0,0,0,0,0,0,0,0,2409\n",
      "786,0,261,206,0,3129,43,30,43,0,22,276,83,6,38,0,32,0,43,95,0,116,15,0,0,0,0,15,51,0,0,142,53,0,0,0,25,0,0,65,146,0,1,0,0,0,0,4278\n",
      "572,0,837,197,0,611,236,42,269,571,147,197,67,258,14,0,4,2,251,931,0,0,3,10,0,0,145,1,141,0,47,0,157,0,0,0,69,0,0,0,0,0,0,161,0,0,0,4060\n",
      "955,0,321,654,1,1307,205,33,166,0,79,0,400,69,174,84,17,105,442,217,10,0,24,0,0,167,0,0,58,0,0,93,32,0,0,0,3,0,22,36,0,0,0,0,0,0,0,4326\n",
      "1452,0,309,489,0,486,113,254,211,207,22,7,691,169,161,920,431,3,173,0,0,42,285,10,0,3,0,0,162,0,61,301,377,0,0,96,0,0,0,13,0,0,0,0,0,0,3,2549\n",
      "491,0,255,555,1,1029,0,0,651,680,330,16,0,91,39,0,357,233,185,922,3,40,23,0,2,0,0,0,1181,0,54,74,37,0,0,0,4,0,0,7,0,0,151,0,0,0,0,2589\n",
      "1153,5,293,780,2,1155,18,0,83,11,209,253,3,2,380,234,32,2,479,732,1,6,787,10,0,176,0,69,140,211,5,4,0,0,0,0,33,0,0,0,0,0,1,0,0,0,0,2731\n",
      "1517,0,869,48,0,558,14,0,127,0,1,2,1,145,710,1,6,305,12,624,0,0,38,2,7,0,13,90,55,0,0,46,2,0,0,0,0,0,0,2,0,0,0,0,0,30,0,4775\n",
      "902,17,204,159,0,2635,464,1,329,0,103,19,89,0,0,0,86,362,33,88,131,0,209,72,0,5,3,483,30,0,0,2,0,0,0,9,25,0,0,0,0,0,0,0,0,0,0,3540\n",
      "2241,0,11,950,0,958,1,3,23,0,259,466,377,0,6,0,82,677,5,260,0,0,361,128,15,73,209,1,164,0,2,64,0,1,0,0,277,0,0,0,0,0,0,0,0,0,67,2319\n",
      "459,0,536,601,16,1470,420,291,518,3,340,0,85,0,0,459,63,98,60,7,0,0,98,8,0,0,460,46,157,0,1,1206,1,0,0,351,0,0,0,0,0,0,0,0,0,0,0,2246\n",
      "527,0,41,635,0,1624,529,26,161,40,51,50,147,76,191,6,17,6,24,665,0,11,828,8,0,0,0,0,182,0,0,103,4,0,0,254,757,3,0,758,0,0,0,7,0,0,0,2269\n",
      "812,96,36,589,0,1609,169,0,190,0,102,0,4,0,16,468,187,1,10,164,0,33,462,25,1,22,86,0,62,0,163,985,1,0,0,0,38,0,0,0,164,0,0,0,0,0,0,3505\n",
      "1436,0,78,230,0,2178,203,105,46,45,53,12,133,63,45,44,15,31,28,89,0,275,60,3,0,49,50,0,121,0,0,221,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4355\n",
      "1586,678,165,142,161,1427,5,0,39,0,205,38,0,183,108,1,36,105,85,75,89,158,110,0,0,164,0,0,21,0,91,333,2,0,0,0,2,4,0,0,0,0,0,0,0,0,0,3987\n",
      "874,0,176,381,83,1015,1520,10,62,0,678,27,37,45,28,72,81,74,311,93,0,0,293,6,0,0,0,0,14,0,111,1234,19,0,0,40,1,0,0,0,0,0,0,0,0,332,0,2383\n",
      "1495,0,83,1219,20,1102,1,0,787,113,35,5,4,20,289,0,22,26,315,639,0,92,121,73,4,0,7,22,302,0,29,6,99,0,0,0,29,0,0,0,0,0,8,0,0,0,0,3033\n",
      "1066,5,324,71,129,600,546,1,356,321,204,68,3,656,37,313,129,273,127,21,1,4,458,0,0,0,1,0,248,0,0,165,23,0,0,18,83,0,9,0,0,0,102,0,0,0,0,3638\n",
      "466,2,378,343,0,1591,346,825,250,0,2,196,478,51,0,27,0,157,140,4,0,0,5,8,20,10,0,0,113,0,0,0,69,0,0,824,1,0,0,51,408,8,0,0,0,0,0,3227\n",
      "537,0,122,370,2,484,340,0,488,6,30,0,39,387,46,187,116,0,207,299,25,97,594,0,0,0,14,2,234,118,5,27,227,0,0,0,94,0,0,279,0,0,0,0,0,0,0,4624\n",
      "2098,12,332,1625,59,2034,831,17,140,0,2,13,15,10,87,0,4,0,0,58,226,6,5,11,0,34,39,0,279,0,125,72,1,0,0,0,1,0,0,0,62,0,0,0,0,0,0,1802\n",
      "1297,0,302,252,0,897,95,0,66,0,119,393,143,328,23,236,172,356,321,83,0,0,1,0,0,10,0,0,792,0,0,91,22,15,0,0,0,0,0,96,0,0,0,0,0,0,0,3890\n",
      "1511,250,498,371,0,1544,184,232,338,0,135,0,60,149,453,0,21,40,87,275,0,0,92,0,0,0,0,0,11,0,0,91,0,9,0,44,2,0,0,13,109,0,27,0,0,0,0,3454\n",
      "667,0,937,126,15,1508,79,6,462,222,26,112,137,0,35,0,0,200,582,2,0,4,545,136,0,0,0,24,24,0,2,209,32,0,0,0,463,0,0,0,0,0,0,8,0,0,0,3437\n",
      "185,4,479,507,0,681,114,134,1176,0,0,0,245,0,134,6,247,0,188,186,0,0,1061,54,0,180,3,0,32,0,75,8,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4264\n",
      "1386,0,313,199,2,1334,84,63,84,47,188,222,152,6,113,0,3,4,137,8,8,0,282,0,0,115,0,142,411,0,4,1082,47,0,0,0,25,91,0,0,0,0,0,0,0,0,0,3448\n",
      "2408,30,81,781,0,967,399,7,372,0,34,0,0,8,179,23,57,371,155,223,0,3,28,0,58,0,0,0,947,22,0,15,0,0,0,13,13,0,0,247,0,0,2,0,0,8,0,2549\n",
      "2304,5,70,46,0,1625,19,1,218,21,403,19,81,106,32,0,0,0,0,0,0,124,475,0,26,162,1,356,508,0,0,168,8,0,0,0,6,0,0,0,0,0,0,0,0,0,0,3216\n",
      "1452,0,172,169,10,2880,306,0,612,0,276,7,132,0,579,78,136,77,157,22,0,11,71,14,9,318,1,27,201,0,0,82,0,0,0,0,286,0,0,2,1,0,0,0,0,0,0,1912\n",
      "523,0,295,1654,0,1613,75,339,399,0,48,0,113,19,202,0,168,364,31,210,0,2,332,0,0,1,49,0,518,0,1,30,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2992\n",
      "2657,0,246,68,0,2889,46,68,3,0,21,5,11,1,0,1,87,0,3,30,0,18,260,2,3,8,0,0,168,0,0,578,30,0,0,0,141,0,0,0,0,0,0,0,0,0,0,2656\n",
      "1948,0,45,175,0,1215,2,30,124,211,33,199,75,28,105,1,36,171,72,259,5,12,163,0,0,13,27,0,29,156,0,1271,160,0,0,0,159,0,0,0,8,0,0,0,0,0,0,3268\n",
      "1567,0,351,589,0,1250,57,3,273,54,10,21,0,33,37,0,409,1,91,90,5,516,124,1,0,11,30,0,24,0,88,78,0,75,0,0,0,0,0,0,0,0,0,0,0,8,0,4204\n",
      "1065,131,346,181,0,829,4,0,32,0,106,194,319,15,69,50,274,291,229,7,1,0,313,3,0,2,0,0,121,0,0,1,1,0,0,862,36,0,0,1,0,0,0,0,0,0,0,4517\n",
      "2441,0,98,672,0,816,8,77,66,8,375,344,18,276,40,7,64,10,4,11,23,0,165,5,85,11,0,53,375,0,326,53,62,0,0,0,337,0,0,0,0,0,21,0,0,0,0,3149\n",
      "1931,0,45,207,15,1140,53,0,35,552,188,175,41,89,37,18,12,46,113,35,137,0,136,9,0,42,3,0,313,0,29,83,552,0,0,0,0,0,0,0,4,0,0,0,0,0,0,3960\n",
      "139,0,323,115,0,1220,755,1,1148,0,27,39,90,1,90,18,0,1,183,150,7,3,854,27,0,22,0,538,13,0,0,26,2,0,0,0,216,0,0,0,0,0,0,0,0,0,0,3992\n",
      "1242,0,537,620,0,1299,52,334,64,124,1,15,58,97,758,4,286,0,29,153,0,277,1,0,4,10,72,226,189,0,0,391,45,0,4,0,26,0,0,0,0,0,244,0,0,0,0,2838\n",
      "1548,0,87,95,0,1142,787,85,288,36,14,56,370,0,41,2,0,123,68,21,0,0,198,0,0,477,0,14,41,0,0,1576,9,0,0,0,48,0,0,1,0,0,0,0,0,0,0,2873\n",
      "38,0,1421,41,321,1357,31,20,1480,0,77,4,559,1,201,0,348,0,89,0,0,1,3,80,14,131,10,50,76,0,0,102,229,0,0,262,35,0,15,1,0,1,0,0,0,0,0,3002\n",
      "1245,58,147,96,0,1985,56,74,35,0,158,33,0,86,850,0,6,1,1244,6,57,0,21,0,118,0,4,12,205,0,90,48,0,0,0,0,21,0,0,0,0,0,6,0,0,0,0,3338\n",
      "924,37,175,80,4,742,103,220,1450,0,122,19,175,20,279,0,0,63,119,0,1,1,2,121,0,0,0,0,233,0,0,6,3,0,0,541,29,0,11,0,9,441,0,0,0,0,0,4070\n",
      "1851,0,46,169,0,1270,10,296,476,1,41,2,25,3,613,271,0,12,3,9,9,0,162,0,0,6,0,59,340,0,4,64,249,0,0,14,4,0,0,6,0,35,0,17,0,0,0,3933\n",
      "460,23,116,494,0,1172,43,186,618,466,3,0,126,0,169,12,147,9,120,499,0,0,155,12,0,6,75,503,26,0,5,539,9,0,0,0,273,0,0,0,0,0,0,0,0,0,0,3734\n",
      "704,0,89,255,4,1494,0,6,10,19,2,234,87,28,2,117,5,86,170,222,675,0,549,0,35,161,9,378,7,0,0,34,41,0,0,49,6,0,0,0,0,0,0,2,0,0,0,4520\n",
      "1258,26,21,262,186,958,20,12,231,0,0,0,38,49,726,538,7,28,15,170,195,0,309,0,0,0,0,0,539,0,0,226,0,0,0,0,0,0,0,0,8,0,0,0,0,0,22,4156\n",
      "1060,114,267,609,7,443,281,7,51,5,31,0,128,207,25,30,35,2,22,19,1,6,297,0,196,1,1,10,635,1,0,131,64,0,0,34,472,0,0,0,0,0,0,0,0,0,0,4808\n",
      "487,4,5,105,18,2828,0,0,754,0,46,15,13,6,10,84,1090,163,550,146,0,65,353,1,0,3,0,0,14,0,0,120,6,0,0,0,7,0,0,1,0,0,0,0,0,0,0,3106\n",
      "647,0,12,241,0,1464,0,5,3,179,0,4,0,0,219,80,0,0,173,2,0,28,250,0,0,0,98,67,353,0,0,167,203,0,0,26,75,0,0,183,0,0,28,0,0,0,0,5493\n",
      "978,1,507,174,0,1414,34,5,193,1004,23,1,99,0,334,31,1,43,1,0,0,230,450,0,73,1,0,0,139,0,0,48,1,0,0,0,65,0,0,0,0,0,0,0,0,0,0,4150\n",
      "762,80,185,661,0,1172,422,98,81,1,3,32,0,1,7,28,26,298,1,1,0,1,212,1731,0,94,0,1,306,0,0,222,8,0,0,0,4,0,12,0,0,426,0,0,0,0,0,3124\n",
      "578,0,70,154,0,1604,123,13,598,0,644,201,204,0,105,0,0,0,0,228,155,0,1675,118,56,0,80,159,300,0,1,150,0,0,0,0,0,0,0,0,39,0,0,0,0,0,0,2745\n",
      "509,0,124,519,0,558,119,84,318,0,151,106,120,124,1,0,3,510,1153,869,14,0,140,1,1,0,0,0,29,3,37,217,11,0,0,0,149,0,0,588,0,0,0,0,0,0,0,3542\n",
      "795,329,122,469,12,1015,282,0,577,0,35,513,52,0,862,85,44,68,3,306,0,46,30,0,194,1,307,7,116,12,0,396,392,0,0,0,46,0,0,1,0,0,0,0,0,0,0,2883\n",
      "1674,0,409,1255,3,788,558,320,533,0,0,5,33,242,39,0,334,0,0,4,0,114,622,0,0,0,0,78,8,0,17,36,317,0,0,27,39,0,1,0,0,0,7,0,0,0,0,2537\n",
      "344,0,29,543,0,574,0,0,544,0,10,1,13,71,22,49,0,7,2,274,0,0,357,27,0,199,0,1,804,0,0,391,4,17,0,0,2425,0,0,0,473,0,144,0,0,0,0,2675\n",
      "2628,0,162,292,22,1374,65,336,158,1,61,1,7,0,80,12,119,93,52,9,31,75,52,48,0,5,3,0,590,0,0,60,28,0,0,0,196,0,0,0,0,0,0,0,0,0,0,3440\n",
      "1236,0,637,524,0,300,3,131,193,0,126,3,41,2,90,14,492,373,386,871,0,678,101,0,0,286,0,303,174,0,12,214,164,0,0,3,10,0,0,27,0,1,0,0,0,0,0,2605\n",
      "712,0,282,194,6,1394,118,205,128,0,94,4,11,330,53,22,88,0,98,12,0,26,865,446,1,103,4,0,351,0,9,0,7,0,0,0,0,0,0,1,0,0,0,0,0,0,0,4436\n",
      "696,0,176,389,209,893,334,352,103,0,55,0,39,12,306,7,52,124,114,27,74,1,2,0,0,0,0,0,32,0,0,377,14,0,0,4,43,0,14,0,0,0,2,0,0,0,0,5549\n",
      "1715,4,598,636,355,1199,0,122,676,0,124,97,1,252,8,30,0,0,531,7,0,0,305,36,0,0,130,0,0,0,0,162,88,0,0,0,80,0,0,0,0,107,19,0,0,0,0,2718\n",
      "412,176,211,200,0,1735,90,37,884,8,34,156,20,0,1434,0,0,121,93,11,6,0,7,1,15,1,73,0,400,0,5,114,0,0,0,6,4,0,0,0,0,0,0,0,0,0,0,3746\n",
      "697,25,32,335,0,2095,14,20,312,192,72,300,128,1,5,111,0,487,46,11,1,0,277,0,0,0,13,14,3,0,1,132,709,0,0,41,55,0,32,0,0,0,0,0,0,0,0,3839\n",
      "584,14,709,456,293,2864,81,0,219,0,25,133,5,0,121,0,59,0,68,153,1,46,226,1,0,17,0,9,9,0,3,0,8,0,0,0,1,0,0,0,0,0,0,0,0,0,0,3895\n",
      "585,0,703,236,16,1151,1,0,277,0,2,546,631,0,119,34,1448,21,115,0,0,0,44,3,0,0,0,30,15,0,0,37,86,0,0,7,136,0,0,0,0,0,0,0,0,0,0,3757\n",
      "751,0,122,276,0,1347,7,1,304,0,1,16,13,0,0,24,232,0,528,167,0,3,32,484,0,2,243,0,136,60,226,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,5015\n",
      "650,0,139,204,0,1737,43,0,168,0,460,0,5,1,244,136,505,2,152,8,0,54,78,0,0,4,32,0,28,0,17,27,82,0,0,0,72,0,0,30,0,0,0,0,0,0,0,5122\n",
      "1388,0,282,1640,0,627,233,110,39,0,27,0,0,9,15,12,0,13,20,43,2,231,304,212,0,0,0,1,0,0,3,0,0,0,0,0,187,0,0,2,0,0,0,0,0,0,0,4600\n",
      "474,31,72,283,775,1763,72,17,111,135,300,1,336,1,258,6,0,0,157,84,0,0,23,0,63,0,0,15,10,0,260,71,204,0,0,19,193,0,0,15,2,0,0,0,0,0,0,4249\n",
      "1416,0,457,521,6,881,0,514,180,0,104,21,81,391,52,125,95,0,2,0,20,0,601,0,0,6,0,0,1084,0,1,15,0,0,0,27,15,0,0,84,0,0,0,0,8,14,2,3277\n",
      "846,1,210,756,0,1352,0,0,653,3,67,7,83,0,9,65,5,0,68,5,0,0,151,0,0,384,1,0,519,0,0,660,157,0,0,75,4,0,0,60,0,0,0,0,0,0,0,3859\n",
      "1939,0,242,255,133,1423,18,1,64,22,509,7,26,82,4,41,282,3,2,196,52,23,22,136,3,62,58,0,607,0,50,22,7,0,0,0,7,0,0,1,6,0,0,0,0,0,0,3695\n",
      "1139,0,135,460,0,661,2,3,1140,0,23,11,74,15,2,65,110,0,800,0,29,2,17,156,0,0,0,0,1,0,0,108,65,0,0,0,4,0,0,0,0,6,25,0,0,0,0,4947\n",
      "1040,143,491,582,0,1348,92,28,8,0,1491,5,10,70,274,0,6,0,317,17,245,108,215,0,0,0,317,47,433,0,4,3,1,0,0,0,0,0,0,56,0,0,0,0,0,0,0,2649\n",
      "1328,0,67,357,24,895,333,0,25,8,28,92,1,0,566,0,1370,0,544,999,7,28,40,0,57,60,299,0,81,0,5,1,3,20,0,0,314,0,2,19,6,0,0,0,0,0,0,2421\n",
      "596,0,121,284,4,1226,48,42,754,0,9,825,0,32,100,124,130,0,8,18,5,84,181,3,0,547,3,0,517,0,169,8,0,0,0,0,7,1,0,0,0,7,0,0,0,0,0,4147\n",
      "1385,14,137,130,0,916,80,35,75,2,420,4,0,17,261,0,49,288,0,161,313,0,7,8,0,188,0,0,454,0,1517,5,153,0,0,0,283,0,0,8,0,0,34,0,0,0,0,3056\n",
      "1981,0,525,546,2,1176,79,26,71,48,43,0,0,45,49,3,0,21,16,117,0,0,315,0,5,0,0,3,55,0,4,372,41,1,0,0,1,0,0,0,0,0,0,0,0,0,0,4455\n",
      "2193,9,490,119,0,1573,95,2,135,0,113,26,331,0,136,10,67,22,88,212,0,0,128,0,0,2,89,34,75,0,0,498,0,0,0,0,93,0,0,0,6,0,0,0,0,0,0,3454\n",
      "830,0,178,278,0,1276,128,3,163,2,390,1120,82,15,1,68,487,133,11,21,4,5,119,3,1,1,1,0,29,0,0,168,284,0,0,0,1,0,0,97,0,0,0,0,0,5,0,4096\n",
      "780,87,26,877,238,1790,29,39,172,0,15,0,53,70,62,2,62,89,92,43,428,21,4,80,0,11,0,0,271,0,0,2386,211,0,0,0,15,0,0,2,0,0,0,0,0,0,0,2045\n",
      "417,2,1241,84,149,1151,345,61,158,0,90,129,63,145,45,6,28,295,9,69,0,16,1,0,0,0,5,0,597,0,5,356,35,0,0,0,13,21,9,0,69,0,109,1,0,0,273,4003\n",
      "264,0,241,284,322,1291,167,1,130,535,36,40,44,51,144,0,0,2,111,86,1,165,49,78,0,0,197,0,885,0,50,3,36,0,0,0,4,0,0,0,0,0,0,0,0,0,0,4783\n",
      "1109,2,138,1077,760,2069,640,168,5,0,16,0,0,0,1,123,451,0,3,1,1,2,144,0,79,1,0,0,28,0,0,14,50,0,0,0,5,0,0,14,0,0,0,0,0,0,0,3099\n",
      "1904,1,168,117,0,974,74,611,87,221,118,136,432,994,171,0,8,19,21,0,0,1,33,15,0,0,0,6,55,0,0,305,258,81,0,0,8,0,3,0,0,0,0,0,0,0,0,3179\n",
      "1068,4,213,243,1,1129,0,4,910,193,0,14,155,11,964,0,1,0,25,14,170,2,394,41,0,231,0,218,23,0,0,443,270,0,0,3,859,0,0,0,0,0,35,0,0,3,0,2359\n",
      "1927,0,8,538,0,1094,165,1218,58,107,7,414,1,108,3,414,7,5,24,45,2,115,0,152,0,1,0,3,12,31,4,303,358,0,0,0,58,0,0,35,0,0,0,0,23,0,0,2760\n",
      "1312,5,243,1086,0,922,5,162,38,30,2,375,17,20,173,7,89,183,274,6,0,31,9,146,0,457,0,0,76,0,0,21,153,68,0,0,1463,0,0,2,1,0,0,0,0,0,0,2624\n",
      "2308,0,141,120,9,1281,37,113,210,0,214,39,0,269,441,206,4,35,12,77,0,143,233,0,38,0,1,8,923,0,0,106,10,0,0,5,3,0,0,0,0,0,0,0,0,0,0,3014\n",
      "870,144,314,1615,0,751,89,0,132,113,9,0,0,0,222,108,0,29,70,4,0,0,24,0,0,75,120,5,620,0,7,374,14,0,0,0,104,0,0,73,0,0,0,0,0,0,0,4114\n",
      "144,117,0,91,0,1494,367,3,84,98,688,547,2,5,0,19,0,330,9,1,0,186,0,0,0,0,139,0,375,0,0,15,61,0,0,21,56,0,5,0,0,0,0,0,0,67,0,5076\n",
      "274,65,97,444,24,1993,45,152,146,947,1119,68,1,118,0,4,86,1,2,245,14,0,101,52,0,0,1,0,77,0,41,407,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3447\n",
      "672,2,134,1181,3,1844,67,0,770,2,527,2,117,92,50,32,81,0,5,153,10,441,122,44,0,0,0,0,49,24,0,0,110,0,0,0,6,0,2,0,0,1,0,0,0,0,0,3457\n",
      "503,109,791,415,0,836,99,463,14,0,11,15,148,43,2,6,144,0,163,0,99,1,58,104,0,0,110,0,539,0,0,15,362,0,28,1,56,0,501,0,0,0,0,0,0,0,0,4364\n",
      "619,0,612,459,72,2116,13,10,285,0,212,0,2,1,0,10,27,44,870,231,2,0,42,0,0,0,0,0,155,0,156,371,15,0,0,0,20,0,0,6,0,0,0,1,569,0,0,3080\n",
      "214,165,3,43,0,559,1180,770,316,0,46,5,1,438,788,0,76,32,189,133,0,52,1,260,0,287,363,0,75,0,6,197,553,0,0,1,1,0,0,1,0,0,0,0,0,0,0,3245\n",
      "516,0,157,359,6,1105,0,4,267,65,0,5,2,0,1135,7,8,124,118,154,0,41,16,0,0,21,0,0,100,0,0,12,32,0,0,0,710,0,0,2,0,0,2,0,0,0,0,5032\n",
      "1742,8,178,149,5,663,154,294,138,0,733,641,572,0,8,0,5,56,1,0,143,60,289,165,1,0,0,0,27,1,875,190,1,0,0,0,188,0,0,0,0,0,0,0,0,0,0,2713\n",
      "403,11,528,66,9,1232,2,18,40,0,486,272,19,725,33,163,212,51,237,819,197,0,23,0,0,1,34,0,1,0,0,7,784,0,0,85,14,0,0,361,0,244,0,0,0,0,0,2923\n",
      "1032,0,79,923,2,1913,41,1,27,0,76,7,0,0,96,0,2,2,270,180,1,0,108,102,0,28,5,0,4,0,21,192,3,0,0,0,134,364,0,5,0,15,0,0,0,0,0,4367\n",
      "686,0,4,514,142,809,71,317,1,822,3,40,6,3,121,0,106,993,7,24,0,126,141,23,144,2,0,38,194,0,10,227,234,0,0,60,71,0,0,295,0,0,0,0,0,0,0,3766\n",
      "790,0,311,722,5,1335,501,0,355,98,0,165,9,0,0,12,680,417,252,36,0,1,99,145,360,0,0,0,127,0,3,339,21,0,0,0,6,0,0,2,112,0,0,0,0,0,0,3097\n",
      "485,0,260,340,0,1539,278,59,1134,20,69,0,8,1,24,0,69,0,413,313,0,40,2,0,0,192,0,44,5,30,15,107,0,0,10,89,0,0,0,2,0,0,0,0,0,0,0,4452\n",
      "958,0,400,47,0,757,142,26,940,27,8,21,7,7,115,0,13,7,18,586,866,188,298,23,1,1,0,0,254,0,2,241,7,0,0,0,0,0,0,25,0,34,0,108,0,0,0,3873\n",
      "918,0,0,201,0,1001,96,438,398,0,53,0,44,1082,46,4,67,4,0,521,69,0,130,69,16,7,12,56,413,4,0,147,51,0,0,1,9,0,0,0,105,9,0,0,0,0,0,4029\n",
      "411,0,167,924,52,1156,262,6,36,0,0,341,0,0,5,0,3,0,22,2,13,1,9,0,0,0,0,3,54,0,97,7,0,0,0,15,0,124,0,1,0,0,0,0,0,0,0,6289\n",
      "339,0,15,411,0,2186,29,0,157,442,1430,0,1,1,79,362,20,5,232,22,0,102,269,761,0,7,0,7,635,0,1,0,43,0,0,0,146,0,0,23,5,0,0,0,0,0,0,2270\n",
      "833,0,5,668,102,1104,242,158,4,0,0,0,94,61,511,45,105,14,15,509,0,0,518,377,0,0,0,189,142,0,0,663,19,0,0,0,168,0,0,0,0,0,0,0,0,0,0,3454\n",
      "495,175,45,225,346,686,4,0,296,216,871,208,6,8,6,1,152,57,2,32,472,75,392,2,5,0,0,0,47,0,0,1,56,0,0,47,36,0,103,0,0,0,0,0,0,0,0,4933\n",
      "1712,401,927,98,602,1047,122,300,75,8,134,2,80,60,107,17,12,243,10,3,1,1,629,21,142,0,0,0,84,0,1,122,0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,3022\n",
      "868,2,301,1600,0,1426,90,0,326,0,33,10,0,0,51,0,2,32,0,278,2,0,251,195,0,5,0,281,464,29,0,0,0,0,0,13,1,0,0,0,0,0,0,102,0,0,0,3638\n",
      "801,46,396,36,25,614,317,2,336,0,135,761,22,153,601,0,1,490,1,6,0,270,1,228,6,0,0,0,47,0,1,13,328,0,0,0,223,0,0,0,0,0,27,0,0,0,0,4113\n",
      "1346,0,2,1381,0,263,8,55,1540,245,8,0,0,0,397,77,95,28,1,72,0,0,194,1,0,11,3,0,160,0,4,3,31,0,17,0,1,1434,0,0,0,0,0,0,0,0,0,2623\n",
      "1284,23,18,841,0,400,3,114,156,0,8,28,128,13,982,14,1165,22,65,2,0,3,0,0,40,0,415,1,242,0,0,79,0,0,0,1098,222,0,71,0,0,0,0,0,0,11,0,2552\n",
      "607,0,576,56,84,2713,226,1,139,414,253,30,73,37,278,297,0,43,96,1,0,0,30,0,0,0,5,4,16,0,12,277,25,0,0,54,6,0,0,0,0,0,0,0,0,0,0,3647\n",
      "1352,294,105,144,5,1227,135,83,564,70,44,0,85,20,0,43,19,172,121,531,18,47,9,3,214,109,0,0,19,0,0,551,3,0,0,0,3,0,49,0,0,0,0,0,412,0,0,3549\n",
      "821,1,16,373,627,1000,0,107,17,0,32,223,20,256,234,3,0,0,201,483,0,0,98,4,0,0,0,0,454,0,79,204,71,0,0,0,71,0,6,0,0,0,0,0,0,0,0,4599\n",
      "1738,0,212,220,0,2270,46,1,115,7,0,132,11,0,2,0,0,6,58,624,65,0,85,1,0,0,41,14,236,0,0,14,0,0,0,4,3,0,0,0,47,779,7,0,0,0,0,3262\n",
      "1392,0,549,401,3,1178,0,29,543,21,14,19,407,43,0,960,519,605,82,9,0,0,173,0,0,0,0,0,9,11,0,63,1,0,0,0,7,0,0,211,10,0,0,0,0,0,0,2741\n",
      "1431,3,135,770,1,1706,83,78,49,0,15,2,132,358,755,38,0,162,241,113,0,10,11,117,0,38,8,149,117,0,0,852,4,60,0,0,0,0,6,18,68,5,0,0,0,0,0,2465\n",
      "737,0,630,579,59,882,176,67,257,8,108,170,53,101,91,0,10,0,3,153,49,568,609,42,0,0,0,0,17,45,1,1,2,7,0,0,157,0,0,1,0,0,0,0,0,0,0,4417\n",
      "856,0,61,112,0,926,31,13,244,719,41,318,13,226,30,1,0,76,2,45,1,0,119,21,0,43,3,55,33,0,2,193,88,0,0,0,284,0,226,104,5,0,0,0,0,0,0,5109\n",
      "1278,0,202,11,0,466,585,34,42,15,3,766,0,0,51,74,8,6,88,213,0,77,412,1,0,0,0,35,1026,254,0,340,0,0,0,22,43,0,0,0,0,2,0,0,0,0,0,3946\n",
      "1416,0,262,206,2,1344,79,0,267,0,0,9,265,0,381,4,1,0,92,66,18,454,37,4,0,36,0,31,64,0,45,47,0,0,0,1,47,278,1,0,0,0,0,0,0,0,0,4543\n",
      "474,257,445,354,1,782,362,883,517,192,0,179,16,11,284,0,502,0,14,112,0,3,171,0,0,262,0,0,152,0,0,27,10,0,0,0,0,0,0,18,0,0,0,0,0,0,0,3972\n",
      "1770,1,457,176,0,1569,22,43,6,76,91,37,41,0,405,3,1,4,121,1,0,0,837,1,1,0,206,2,147,0,0,10,1,0,0,1,232,0,0,0,1,0,0,0,0,6,0,3731\n",
      "985,0,117,12,0,2989,45,101,259,0,143,0,12,91,170,35,316,11,194,73,0,6,220,1,116,145,19,1,26,0,0,284,289,0,0,0,99,0,0,0,0,0,0,0,0,0,0,3241\n",
      "515,0,14,793,0,934,34,148,52,40,257,5,4,1,172,0,25,18,316,232,749,0,20,2,0,151,0,0,238,4,3,443,100,0,0,0,12,0,0,0,0,0,0,23,0,0,0,4695\n",
      "781,2,203,80,303,2262,13,289,211,2,11,0,11,1,12,257,0,0,119,23,7,4,1,1,0,0,0,0,174,0,6,129,8,0,0,63,727,0,0,0,1,0,0,0,0,0,0,4299\n",
      "1298,0,201,1111,0,1798,494,37,246,26,516,117,22,106,103,8,64,109,200,59,0,23,381,8,0,0,0,0,6,0,0,47,9,0,0,0,6,0,0,0,0,0,0,158,0,0,0,2847\n",
      "567,9,3,691,8,2506,363,0,690,0,0,55,47,53,7,58,758,86,35,10,64,6,22,270,7,16,0,0,108,0,1,4,232,40,0,0,142,0,1,0,0,2,0,0,0,0,0,3139\n",
      "739,7,2126,10,1,1043,1,1,299,0,15,5,15,21,13,0,40,315,11,0,73,68,1,0,0,0,1,0,218,0,44,0,1,0,0,0,67,0,0,28,0,0,0,0,0,0,0,4837\n",
      "872,66,22,547,0,1893,6,0,145,0,596,0,73,0,6,106,8,88,16,0,2,6,1,0,5,85,5,0,318,0,0,647,0,0,0,9,7,0,0,17,0,1,0,37,0,0,0,4416\n",
      "713,0,49,735,0,1435,32,116,2,27,10,1,1,0,27,4,201,2,9,278,163,254,0,1,7,211,0,0,776,0,0,366,2,0,0,0,34,0,0,3,0,0,401,0,0,0,0,4140\n",
      "771,0,12,39,28,1187,196,0,134,55,335,625,2,3,410,90,229,0,707,8,1,1,157,24,87,0,5,0,113,0,0,785,21,0,0,4,120,0,0,2,194,174,125,0,0,0,0,3356\n",
      "1481,14,179,39,2,2218,67,5,161,566,172,135,51,0,3,111,12,63,5,2,4,0,262,4,26,2,1,0,0,0,0,59,0,0,0,51,0,0,25,1,0,0,0,0,0,0,0,4279\n",
      "1519,0,16,895,3,1688,8,0,17,0,18,1,18,0,162,33,428,0,755,0,0,0,9,0,0,242,0,0,178,0,109,82,0,0,7,0,24,0,0,150,0,0,0,0,0,0,0,3638\n",
      "433,15,551,1771,0,1665,82,24,39,1,38,0,12,203,1,2,4,15,346,2,0,299,296,127,57,0,0,0,27,0,0,7,26,0,0,0,147,0,0,13,0,0,0,114,0,0,0,3683\n",
      "453,6,855,102,6,401,14,39,165,111,14,0,30,196,873,741,12,2,91,466,11,268,383,38,0,0,0,350,4,0,296,0,3,0,0,56,2,150,155,0,1,0,1,0,0,0,0,3705\n",
      "333,0,74,306,0,1686,314,0,18,0,188,5,93,260,757,7,52,120,331,368,48,105,0,12,311,2,19,0,81,0,27,771,3,0,1,0,856,0,0,0,0,0,6,0,0,4,0,2842\n",
      "556,0,522,390,116,2173,423,5,8,0,10,1,435,0,59,0,0,19,160,250,32,5,125,25,0,0,0,0,4,0,286,84,95,0,0,39,67,0,0,0,0,1,0,0,0,0,0,4110\n",
      "414,49,474,719,0,511,227,2,582,348,0,3,63,36,27,542,109,1,26,374,30,71,0,37,0,42,0,88,79,0,0,1186,90,0,0,0,136,0,0,0,0,0,100,0,0,0,0,3634\n",
      "1373,4,568,563,271,1931,108,0,91,10,87,8,45,52,20,34,4,160,13,49,39,0,6,1,0,13,23,0,4,55,35,393,4,0,0,135,130,0,0,0,0,0,123,0,0,0,0,3648\n",
      "301,899,12,416,0,2128,742,514,4,0,122,300,45,10,24,1,514,322,563,72,0,191,62,0,0,0,0,0,553,0,39,0,0,0,0,6,356,0,0,15,0,0,0,0,0,0,0,1789\n",
      "1567,0,90,89,0,1502,234,3,84,0,97,1,54,31,66,0,262,0,47,260,0,0,2,0,0,0,8,0,261,0,0,372,295,0,0,2,3,0,0,0,0,35,0,0,0,0,0,4635\n",
      "600,0,2,134,66,1859,237,1349,369,15,117,2,16,167,40,88,122,1,170,8,302,0,224,145,2,1,204,0,0,0,13,57,0,0,0,42,69,0,0,65,0,0,0,0,0,0,0,3514\n",
      "1194,5,60,625,2,767,28,6,993,0,2,21,20,78,57,95,36,1,5,0,0,12,649,0,1,0,1,9,214,563,0,76,35,60,0,0,3,0,0,0,1,45,0,90,0,0,0,4246\n",
      "1132,0,55,319,13,1916,347,0,1433,5,0,0,4,0,8,28,4,39,92,0,4,0,304,0,0,4,0,0,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4226\n",
      "1612,0,567,31,15,1688,122,5,914,44,17,10,1,0,0,5,1,40,308,39,4,15,191,3,0,130,0,206,0,0,0,1037,4,0,0,0,16,0,0,0,0,0,0,0,0,0,0,2975\n",
      "590,0,1063,572,0,1369,49,0,464,19,0,10,0,3,7,135,15,8,631,6,2,71,113,0,0,41,0,214,98,36,0,0,254,0,0,0,110,0,0,9,40,0,0,0,0,0,0,4071\n",
      "893,0,808,66,0,1693,68,0,49,3,5,1,0,0,1098,3,0,0,1,1245,0,102,121,0,319,0,0,0,27,0,0,95,0,0,0,0,3,0,0,0,0,13,44,0,0,3,0,3340\n",
      "1506,107,458,203,0,927,291,0,7,27,325,66,182,260,333,12,22,239,41,27,0,4,14,0,0,0,1,1,876,0,0,19,111,2,0,3,4,0,3,8,0,0,0,0,0,0,0,3921\n",
      "1477,337,68,64,0,883,349,1,433,0,97,8,2,0,148,0,6,44,737,89,14,21,343,0,0,34,16,197,188,0,225,10,6,0,0,165,273,0,0,0,0,0,486,0,0,0,0,3279\n",
      "1104,0,400,477,0,2141,778,11,175,1,0,33,13,8,8,334,0,8,375,79,0,19,1,26,0,0,2,34,1,0,0,264,0,0,0,0,242,0,0,0,0,0,7,0,0,0,0,3459\n",
      "558,0,71,135,115,1696,64,5,13,51,0,58,0,409,4,0,362,326,34,18,14,0,362,24,0,0,9,0,39,1,5,130,2838,0,0,0,0,0,0,0,0,0,8,0,0,0,0,2651\n",
      "1975,0,260,521,0,1104,9,33,865,0,152,117,19,102,191,75,259,8,675,0,0,15,116,5,0,0,137,37,242,1,0,559,8,0,26,0,58,0,0,1,0,0,249,0,0,0,0,2181\n",
      "1645,0,69,57,0,1124,171,2,10,9,85,14,48,214,23,0,260,36,41,236,0,101,21,2,0,49,47,25,765,0,6,469,2020,1,0,1,223,0,0,0,0,0,0,0,0,0,0,2226\n",
      "613,1,118,702,61,1103,84,23,903,0,267,36,0,19,128,15,4,35,168,343,0,0,576,38,0,28,0,261,21,1,246,52,21,0,0,6,0,0,0,49,0,1433,0,0,0,0,0,2645\n",
      "1087,0,13,196,4,779,0,22,111,73,182,0,111,0,90,11,28,0,5,0,0,86,37,215,88,4,411,0,158,0,1,986,34,0,0,0,1,0,0,0,51,0,0,0,0,0,0,5216\n",
      "362,0,765,207,0,947,1,31,1,23,483,0,31,1,133,93,371,2,326,142,123,0,821,59,0,14,0,17,1029,0,323,128,0,0,0,373,46,0,32,0,2,0,0,0,0,0,0,3114\n",
      "452,0,884,58,31,2294,4,7,352,0,2,2,113,0,122,40,401,0,0,63,0,6,123,14,0,20,16,31,839,0,5,715,0,0,0,0,17,0,0,1,0,0,3,0,0,0,0,3385\n",
      "492,0,7,314,0,525,108,14,158,0,36,0,32,0,77,90,746,427,275,329,0,0,1349,7,0,791,52,66,124,0,0,2,2,0,0,2,83,0,0,0,0,0,0,0,0,0,0,3892\n",
      "1667,32,88,1600,1,919,3,0,2,190,427,0,0,2,18,0,2,94,64,131,0,0,2,2,0,0,0,0,207,14,417,550,1,0,0,0,95,0,0,6,0,0,0,0,0,0,0,3466\n",
      "416,2,131,438,12,453,33,2,291,7,21,48,346,18,219,4,20,786,189,37,4,3,0,1,0,0,0,1010,827,0,89,633,198,0,0,3,2,0,0,2,0,0,0,73,0,0,0,3682\n",
      "909,0,24,963,62,507,2,274,32,0,0,10,1,9,18,125,172,356,7,0,0,0,96,0,0,397,0,0,6,1,15,33,241,0,0,20,90,0,0,11,0,0,0,0,0,0,0,5619\n",
      "907,0,217,226,0,2147,64,1,88,2,3,0,743,19,3,3,0,18,417,1,0,0,65,0,0,465,35,0,109,0,9,182,8,0,0,0,169,0,0,0,0,0,2,0,0,0,0,4097\n",
      "1136,0,733,122,0,984,3,17,166,31,34,64,3,577,21,0,447,44,401,146,0,0,16,0,0,0,493,35,474,0,0,59,152,0,0,2,54,0,0,144,0,0,0,0,0,0,0,3642\n",
      "406,546,178,890,0,1139,9,7,536,2,82,66,0,13,21,16,3,0,6,11,742,42,4,356,0,42,69,21,14,0,206,176,119,0,0,0,151,0,0,214,0,0,0,0,0,0,0,3913\n",
      "796,2,130,562,2,2172,328,33,249,48,0,49,0,18,299,7,3,48,12,399,0,0,339,0,4,0,0,120,184,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4192\n",
      "1220,0,6,251,3,1346,40,1,82,0,29,5,1,0,274,0,1,271,10,539,94,30,42,4,331,0,0,25,234,74,2,318,0,0,0,3,293,0,0,0,0,0,84,0,0,0,0,4387\n",
      "566,0,311,516,54,2134,9,0,464,0,410,86,0,3,0,1,1,334,358,3,75,112,1029,0,15,0,12,0,61,0,100,55,55,0,0,0,0,75,0,0,0,0,0,0,0,0,0,3161\n",
      "1459,655,158,840,88,755,5,3,85,167,16,11,10,349,0,30,1059,0,59,1,108,248,154,0,0,0,0,24,985,0,3,537,12,0,0,0,9,0,0,37,0,0,0,0,0,2,0,2131\n",
      "3792,189,164,134,18,579,32,30,169,7,289,2,1272,0,1,6,0,0,2,0,0,0,49,2,0,49,234,39,216,0,0,52,16,4,0,0,4,0,0,4,0,1,0,0,0,0,0,2644\n",
      "927,0,69,321,0,2055,67,0,488,64,12,0,124,1,639,1,26,27,1,255,0,1,124,0,0,46,0,0,87,0,1709,424,139,0,0,0,0,0,0,92,186,1,0,0,0,0,0,2114\n",
      "620,50,7,194,0,1378,238,2,729,734,86,0,0,11,9,39,410,184,81,355,222,0,391,0,0,0,0,17,30,0,0,77,149,0,0,104,433,0,146,4,0,0,0,0,150,0,0,3150\n",
      "588,14,542,753,0,496,48,67,392,95,137,330,205,454,161,0,0,10,158,25,12,18,26,22,0,0,1,0,595,0,0,599,7,0,0,0,28,0,0,139,0,0,0,0,0,0,0,4078\n",
      "699,0,493,733,0,1161,0,0,231,32,234,38,12,2,513,3,5,32,1353,1,6,13,0,0,0,0,116,24,44,26,0,633,3,0,0,0,124,0,0,138,0,0,0,0,0,0,0,3331\n",
      "658,228,329,144,130,543,289,41,127,0,552,71,6,6,31,0,123,0,109,10,0,2,780,0,1,36,0,74,572,0,0,131,41,0,0,0,0,0,0,0,0,0,0,0,0,81,0,4885\n",
      "1887,0,84,241,0,1164,450,0,102,0,0,13,2,0,183,45,0,0,266,4,0,0,0,0,89,0,0,0,196,0,1,68,53,0,0,0,207,0,0,0,0,0,0,0,0,0,0,4945\n",
      "986,35,125,227,56,2076,285,5,35,340,94,6,1,2,322,0,255,399,72,80,0,154,36,0,0,0,32,3,390,0,0,0,287,0,0,19,155,6,347,121,7,0,3,0,0,0,0,3039\n",
      "1893,0,93,27,0,1110,556,3,86,37,415,13,137,0,280,0,12,19,625,111,81,77,274,0,47,0,0,5,489,0,0,127,33,0,0,0,75,0,0,22,0,0,0,0,0,0,0,3353\n",
      "3284,0,190,93,0,1281,240,20,788,2,128,94,28,3,93,0,19,26,3,1,0,142,935,2,17,8,0,24,353,0,0,314,1,0,0,0,22,0,0,2,0,0,0,0,0,0,0,1887\n",
      "1466,56,283,271,0,1237,45,23,1231,0,24,1,186,495,47,456,459,4,0,68,0,0,82,53,0,61,1,6,142,0,207,331,1,0,0,0,49,0,0,0,4,31,0,91,1,0,0,2588\n",
      "575,0,527,951,540,1564,512,140,225,30,64,5,0,292,20,31,8,8,41,27,1,70,713,60,0,1,162,0,160,0,0,4,18,0,2,0,209,0,0,0,0,0,56,0,0,0,0,2984\n",
      "348,5,20,383,0,2484,145,36,1552,7,20,34,358,4,63,4,0,1,38,9,1,33,17,16,0,2,16,4,900,0,506,87,0,0,634,0,82,0,0,0,39,0,0,12,0,0,0,2140\n",
      "688,23,34,472,0,1130,199,0,95,55,4,336,519,107,83,910,100,199,443,0,0,1,98,0,7,16,37,9,367,0,0,107,299,0,0,0,39,0,0,114,0,0,0,0,0,0,0,3509\n",
      "1064,34,497,480,0,917,189,0,135,0,72,70,94,177,36,3,288,0,561,65,1,119,38,17,0,0,0,44,14,0,0,983,0,0,0,0,193,0,0,0,550,12,0,159,0,0,0,3188\n",
      "281,7,248,68,0,1303,7,21,1307,0,55,34,407,188,32,0,272,2,188,242,0,3,467,0,0,109,0,0,739,0,0,47,0,0,10,0,5,0,0,0,2,0,0,0,0,0,0,3956\n",
      "698,34,61,443,15,1225,526,21,209,1,53,0,972,9,2,70,78,0,27,13,0,1,21,9,0,42,55,46,36,366,3,1536,6,0,0,308,830,0,0,0,1,0,0,0,0,0,0,2283\n",
      "941,3,92,478,85,1584,118,66,366,0,163,0,4,0,6,8,4,745,3,40,0,0,0,0,0,0,17,0,278,0,0,227,92,0,0,0,0,0,191,808,0,0,0,0,0,0,0,3681\n",
      "1036,0,336,1014,390,1206,8,175,448,11,552,760,110,4,27,26,10,0,1159,61,14,277,7,0,0,0,0,63,20,0,16,89,16,0,0,3,94,0,0,0,5,0,0,0,0,0,0,2063\n",
      "1644,143,417,92,0,1004,0,0,212,0,4,6,52,0,1,16,1508,2,0,71,1,321,144,209,1,33,0,0,7,0,0,31,0,0,0,0,761,0,0,0,0,31,0,0,0,0,0,3289\n",
      "848,0,495,336,0,897,93,14,402,10,41,0,537,32,122,0,55,2,678,95,0,3,124,4,0,0,0,0,58,0,15,1,5,0,0,1,145,0,0,0,0,0,0,0,0,0,0,4987\n",
      "574,0,317,214,274,1495,4,42,136,44,270,248,0,17,54,2,565,226,423,561,0,97,94,0,0,0,0,1,4,0,0,47,128,0,0,0,0,0,0,0,363,0,0,0,0,0,0,3800\n",
      "425,0,70,509,0,630,1010,4,42,0,564,28,464,0,883,47,30,161,16,1,15,43,150,0,0,11,0,0,299,0,38,9,16,0,0,138,0,0,0,0,0,0,0,0,0,0,11,4386\n",
      "224,14,81,992,26,1298,11,3,447,23,3,0,0,10,61,290,5,38,226,612,12,160,2,0,0,103,0,0,6,0,0,60,0,0,0,0,220,0,0,0,9,0,0,0,0,0,0,5064\n",
      "365,41,430,90,13,2312,737,105,81,0,118,287,0,44,80,7,20,0,105,228,0,0,348,507,1,2,573,0,5,0,0,80,88,0,0,1,115,0,0,0,0,0,0,0,0,0,0,3217\n",
      "502,0,575,76,0,2389,9,0,6,18,179,0,3,282,17,0,288,74,212,400,89,2,33,0,0,0,112,229,244,0,36,91,1,0,0,0,214,0,0,574,0,0,0,0,0,19,0,3326\n",
      "1114,0,29,287,0,997,247,0,119,0,10,58,178,1,155,62,21,259,106,16,0,0,10,0,0,89,0,17,2707,0,16,9,486,0,0,0,12,0,0,0,0,0,1,0,0,0,0,2994\n",
      "1347,94,98,386,30,1258,42,3,583,4,114,5,2,407,50,0,5,2,62,0,0,0,721,58,0,0,2,3,54,0,0,29,23,0,0,0,413,0,0,0,5,0,0,0,0,0,0,4200\n",
      "1773,0,1120,908,0,1288,537,0,398,0,59,0,0,0,12,0,374,3,41,553,2,18,82,0,0,0,14,0,43,0,0,49,108,0,0,0,2,0,0,1,0,0,0,0,0,0,0,2615\n",
      "218,7,1069,72,0,2185,50,10,761,28,1,0,76,14,55,35,5,0,199,163,500,8,0,0,0,6,0,0,414,0,0,508,0,0,0,0,43,0,0,4,1,55,17,0,0,0,0,3496\n",
      "374,0,739,61,102,1229,18,157,313,0,33,0,4,3,480,183,25,3,135,7,0,379,185,0,0,156,43,0,143,0,0,33,0,0,0,0,116,0,0,1,0,0,416,0,0,0,0,4662\n",
      "1292,13,139,600,0,942,49,14,160,19,27,802,0,1,0,0,96,0,0,251,0,0,88,0,12,0,1,4,721,0,132,245,278,0,0,5,0,0,0,91,0,1,0,0,0,0,0,4017\n",
      "1139,0,162,109,248,1633,35,174,69,0,43,15,3,252,5,3,82,3,3,0,158,12,268,20,160,0,1,0,761,7,20,1048,38,0,0,47,215,0,0,0,0,0,36,0,0,0,0,3231\n",
      "305,2,831,444,0,829,271,0,100,0,2,16,32,102,32,23,177,0,40,1,37,0,773,0,1,214,7,0,119,40,0,0,0,0,0,0,8,0,0,11,0,1,0,0,0,8,0,5574\n",
      "1332,0,75,457,0,1422,5,6,400,336,92,11,117,24,9,3,32,21,22,72,2,0,19,0,24,61,0,6,421,0,0,38,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,4991\n",
      "1153,62,423,313,130,335,569,51,527,16,59,1,339,0,98,3,590,0,52,129,0,78,308,8,0,131,0,1,74,0,107,124,97,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4220\n",
      "1211,0,696,262,223,667,40,0,20,0,192,11,0,0,41,134,3,82,349,98,0,0,226,0,0,10,0,99,167,0,0,194,44,0,0,0,39,0,626,18,0,7,0,0,0,0,0,4541\n",
      "516,29,4,758,0,257,9,6,229,0,142,129,12,0,331,1,101,3,12,0,29,27,12,2,10,0,0,2299,20,0,0,71,0,0,0,10,1,0,0,0,0,0,0,0,0,0,0,4980\n",
      "1419,1,80,366,0,1020,277,37,61,47,88,9,0,0,215,123,3,102,54,1,2,0,136,8,202,9,0,11,226,36,0,32,1200,543,0,161,0,0,0,0,0,0,0,0,0,0,0,3531\n",
      "1633,0,469,187,458,863,107,549,23,6,85,23,2,123,1,52,662,19,62,231,0,44,689,0,0,4,0,26,865,0,0,18,30,0,0,0,2,10,60,0,82,0,0,0,0,0,0,2615\n",
      "1190,0,1,795,0,2127,0,7,264,0,1,3,22,0,6,4,763,83,253,90,0,16,136,0,0,309,0,0,363,0,0,334,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3233\n",
      "218,1,288,945,1,1264,91,0,7,16,557,584,1,94,11,0,1,0,314,15,84,30,54,112,0,11,0,44,248,0,0,675,27,0,0,0,55,0,0,13,0,0,0,0,0,0,0,4239\n",
      "1554,148,19,489,0,807,155,0,741,1,384,22,0,320,175,29,0,0,75,9,0,372,4,2,0,0,8,0,127,0,136,66,50,0,0,0,104,0,0,0,37,0,51,0,0,0,0,4115\n",
      "1282,217,48,193,5,1234,59,0,575,0,154,711,204,56,0,2,323,2,11,7,0,1,1306,4,0,365,1,1,397,0,64,11,173,0,0,0,60,0,0,0,0,0,0,0,0,0,0,2534\n",
      "422,0,1009,401,0,853,124,4,214,2,830,41,23,1,369,301,5,0,417,9,86,0,460,0,5,336,0,0,52,0,0,746,0,0,0,0,49,0,0,0,0,0,0,0,99,0,0,3142\n",
      "620,0,36,376,0,1487,173,0,30,135,522,7,88,1,13,3,0,147,395,41,137,0,235,15,0,22,0,5,380,0,0,2,42,0,0,54,226,0,0,694,0,0,0,0,0,0,0,4114\n",
      "1481,0,2,129,13,1399,301,6,334,40,133,701,6,19,4,8,615,99,204,52,25,3,109,0,1267,2,0,0,193,4,18,222,1,0,0,0,85,0,0,11,0,0,0,0,0,0,0,2514\n",
      "667,0,104,1446,1,1492,299,20,435,0,39,11,22,1,57,51,329,4,11,32,0,0,6,2,0,0,46,23,27,0,0,35,2,0,0,0,1151,0,0,0,0,2,0,0,0,0,0,3685\n",
      "3059,0,239,96,0,766,524,0,449,0,10,0,28,148,14,6,218,153,766,1,1,0,671,0,0,0,0,0,7,0,10,92,12,0,0,0,180,0,0,0,0,0,0,0,0,0,0,2550\n",
      "308,6,310,704,41,1370,32,0,135,0,29,71,4,0,388,3,91,0,239,291,3,0,34,1,0,21,0,0,630,0,0,0,2,0,1430,0,78,0,0,0,0,0,0,0,0,0,0,3779\n",
      "477,0,1432,677,0,2066,2,0,46,0,17,9,0,24,102,0,314,5,269,944,666,156,23,95,6,4,21,0,17,0,0,5,39,0,0,0,294,0,0,0,0,0,0,0,0,0,222,2068\n",
      "2427,0,392,921,0,657,159,8,182,3,65,0,16,80,9,105,162,0,41,366,0,0,5,1,0,0,0,11,388,46,0,37,5,0,0,0,118,0,0,0,0,0,0,0,0,0,0,3796\n",
      "1718,1,54,496,105,996,0,772,658,0,8,13,21,1,583,660,24,10,114,17,52,0,88,0,0,1,2,3,31,0,0,307,42,0,0,0,133,0,0,1,0,0,5,0,0,0,0,3084\n",
      "767,1,19,9,198,1551,85,0,663,18,10,69,38,18,205,46,73,88,327,12,0,0,242,1,1,7,0,0,47,0,0,1075,2,0,0,0,2,0,0,0,0,37,0,0,0,0,0,4389\n",
      "89,0,886,744,11,1267,426,35,26,0,492,227,120,340,63,1,346,540,14,0,0,31,0,0,0,1,0,0,52,0,0,624,3,0,0,87,115,0,0,0,0,0,0,0,0,0,0,3460\n",
      "1278,4,633,31,0,721,112,3,93,0,188,3,192,0,0,282,1076,1,180,446,0,0,511,10,1,0,0,92,578,0,69,6,104,0,0,0,11,0,225,0,0,0,0,0,0,0,0,3150\n",
      "919,0,57,44,114,1197,0,0,79,4,19,370,30,60,15,0,1,0,90,393,352,1,1831,442,7,0,0,175,25,0,0,25,82,0,0,1,10,0,0,76,0,0,0,7,0,0,0,3574\n",
      "834,3,44,213,12,1528,25,0,301,0,1621,270,17,2,10,230,28,6,74,596,63,119,0,0,0,0,23,0,92,0,447,29,291,0,0,0,17,0,1,8,0,0,0,0,0,0,0,3096\n",
      "771,429,1032,46,0,1951,61,467,168,0,30,0,1,0,625,0,18,49,14,197,190,0,50,13,0,59,0,0,555,0,3,0,141,0,0,0,45,0,0,17,0,0,0,0,0,0,0,3068\n",
      "1653,0,270,134,0,931,60,81,294,2,0,85,0,427,2,4,37,6,221,94,0,11,125,86,37,0,578,0,213,0,6,15,66,0,0,0,256,0,0,2,0,0,10,0,0,0,0,4294\n",
      "1223,0,101,327,361,1377,1270,12,832,0,57,0,498,510,78,17,4,0,36,61,1,1,119,740,3,0,0,0,44,0,0,79,47,0,0,0,184,0,0,0,0,0,0,0,0,23,0,1995\n",
      "1353,274,322,83,0,1332,21,7,94,2,828,60,718,0,142,143,22,17,151,194,0,0,123,0,0,158,4,4,43,0,0,58,56,0,0,1,118,0,0,0,0,0,0,0,0,0,0,3672\n",
      "664,0,300,970,0,2394,949,192,232,0,3,0,0,36,12,5,0,0,4,92,0,1,50,44,0,0,79,8,118,0,9,57,75,0,0,3,455,0,0,0,13,0,0,0,0,340,0,2895\n",
      "350,40,59,876,436,352,47,6,212,0,4,103,1,139,0,2,345,164,67,3,3,0,38,0,0,0,0,3,22,0,0,376,2044,33,0,107,4,0,2,0,0,0,1,0,0,0,0,4161\n",
      "606,1,80,473,0,2120,35,0,77,0,17,0,124,0,621,263,102,125,224,59,0,1,60,0,2,11,0,0,225,0,0,71,49,0,0,45,65,0,0,2,0,0,8,0,0,0,0,4534\n",
      "1649,0,698,211,0,1057,586,696,198,0,0,165,0,6,59,217,34,0,0,236,2,0,803,0,0,1,13,65,358,0,0,19,36,0,0,0,73,0,0,34,0,0,706,0,0,0,0,2078\n",
      "785,15,265,1620,0,1371,9,109,0,11,254,2,0,0,10,0,174,1,591,46,12,1,595,0,0,47,0,0,294,0,0,115,25,0,0,0,39,0,0,0,1,0,0,0,0,0,0,3608\n",
      "2242,163,49,411,268,907,78,1,73,2,51,8,0,161,0,107,3,5,11,381,14,1,30,0,0,0,0,2,22,0,0,384,24,0,0,0,374,0,0,6,0,0,35,0,0,0,0,4187\n",
      "539,0,185,283,0,1077,662,0,89,0,262,177,5,1,294,5,91,644,125,3,2,0,100,5,31,5,2,0,3,0,1,47,134,0,0,0,1,0,0,345,0,0,0,0,0,0,0,4882\n",
      "498,0,15,430,7,2210,14,7,447,0,51,89,23,41,8,72,6,0,1098,64,3,16,28,0,80,130,0,0,106,0,5,229,122,0,0,12,0,0,0,412,0,0,0,0,0,0,0,3777\n",
      "2077,64,122,145,4,234,238,0,62,0,180,0,11,162,69,41,68,4,54,627,0,21,270,23,0,8,5,18,210,0,65,464,31,0,0,0,0,0,0,70,0,0,0,0,0,0,0,4653\n",
      "336,137,300,131,0,1477,0,336,175,43,23,73,97,0,49,12,62,3,1023,248,0,564,42,0,0,43,0,95,13,0,0,281,4,0,0,5,132,0,610,4,0,0,0,0,0,0,0,3682\n",
      "675,17,257,1364,4,1092,192,1,28,100,122,853,1,1,159,110,0,3,12,2,244,25,6,0,0,0,11,0,337,0,0,171,540,0,0,0,75,0,0,6,55,0,0,0,0,0,0,3537\n",
      "370,168,100,509,0,1800,68,88,94,21,0,206,37,1,554,0,68,210,9,123,47,0,300,0,0,10,18,1,269,0,0,0,1,0,0,0,7,3,32,0,0,0,0,0,0,0,0,4886\n",
      "1317,0,70,140,0,1820,91,11,239,0,2,0,4,2,100,0,15,0,435,677,58,0,0,0,0,0,0,92,568,0,0,308,672,0,0,1,21,0,0,0,2,0,5,0,0,0,0,3350\n",
      "579,386,234,538,0,504,276,4,510,23,388,19,3,1091,523,13,128,153,24,109,266,0,45,0,0,1500,39,6,41,14,0,0,3,4,0,0,99,0,2,2,0,49,0,0,0,83,0,2342\n",
      "1682,456,1,282,0,2567,178,1,24,0,149,0,17,2,94,6,1,1,1,34,0,0,119,21,0,219,0,0,161,0,13,43,17,0,0,0,16,0,191,0,0,0,0,0,0,0,0,3704\n",
      "141,0,216,386,3,2963,63,139,531,0,391,25,108,57,57,0,8,35,296,344,0,0,516,550,0,645,4,0,152,0,0,78,18,0,0,356,18,0,0,16,0,1,0,0,0,0,0,1883\n",
      "889,0,114,41,0,1047,86,0,237,33,295,0,1084,0,151,10,1,1,18,197,804,0,12,0,1,0,0,0,306,0,0,488,25,0,0,6,153,0,0,267,37,0,0,0,0,0,0,3697\n",
      "651,19,3,239,21,1139,124,0,237,1,153,13,107,180,89,2,1,0,808,311,0,11,754,107,0,1,0,124,94,0,1,294,519,0,0,0,1,0,0,10,0,0,21,0,0,0,0,3965\n",
      "1772,1,73,124,0,1448,29,5,216,0,75,223,23,2,1,45,2,46,169,172,3,0,324,468,572,36,0,3,120,0,0,17,0,0,0,0,32,0,0,0,0,0,840,0,0,0,0,3159\n",
      "404,69,667,359,18,2233,315,48,346,3,7,0,111,0,22,0,5,85,627,91,8,0,258,0,6,0,386,0,20,0,0,190,0,0,0,3,19,0,0,22,1,0,0,0,0,0,0,3677\n",
      "1213,0,0,691,5,802,146,342,122,3,8,82,27,6,1,0,0,30,86,22,0,3,57,134,426,67,0,36,31,0,194,11,118,0,0,0,189,0,0,0,9,0,0,0,0,0,0,5139\n",
      "512,0,163,736,33,644,504,5,1133,0,2,248,0,119,2,24,948,193,76,185,0,0,152,56,0,0,1,0,95,0,0,11,211,0,0,0,29,0,0,0,0,0,0,0,0,0,0,3918\n",
      "824,0,784,149,0,1054,315,8,274,0,706,0,234,2,2,2,105,59,107,136,0,118,22,19,0,59,140,359,29,0,152,11,0,0,0,0,9,0,0,2,0,0,0,0,0,0,0,4319\n",
      "1266,6,111,19,0,402,8,8,85,0,125,14,699,0,21,70,154,0,873,119,0,133,108,0,17,16,0,7,136,0,4,1,0,0,0,0,30,0,0,0,0,0,0,0,0,0,7,5561\n",
      "1285,9,291,151,2,585,881,144,255,110,140,5,2,0,113,4,1,304,257,11,118,0,304,0,0,0,6,7,149,11,0,53,351,0,0,16,316,0,370,0,0,0,0,0,0,0,0,3749\n",
      "642,47,275,1277,0,1960,56,31,844,36,14,61,648,1,0,0,5,0,282,149,0,13,59,0,0,3,0,0,535,0,0,439,52,0,0,0,55,0,0,0,0,0,0,0,0,0,0,2516\n",
      "837,1,45,474,2,2891,342,0,257,0,26,227,0,20,88,0,1,40,164,521,0,154,66,0,0,0,7,397,21,0,2,17,0,20,0,2,165,0,0,0,16,0,0,0,0,0,0,3197\n",
      "455,37,141,1268,17,1874,5,14,470,2,37,15,0,1,592,120,4,0,161,120,9,1,9,0,0,2,0,0,6,0,1,817,2,0,0,0,311,0,0,11,0,0,0,0,0,0,0,3498\n",
      "340,196,33,399,0,1463,1,1,291,63,32,2,0,0,193,7,12,48,81,151,3,71,0,0,0,1,0,0,8,0,381,574,362,0,0,0,365,0,0,0,0,0,0,0,0,0,0,4922\n",
      "619,0,195,195,0,162,40,45,1162,0,1769,57,254,0,849,0,406,32,7,327,0,90,116,0,0,93,3,0,103,28,0,24,0,0,0,53,48,0,0,0,0,0,0,0,0,0,0,3323\n",
      "1393,242,421,428,0,421,0,2,126,0,12,0,1560,106,3,417,1,3,79,730,0,187,46,0,0,0,0,1033,227,0,0,7,5,0,0,113,2,0,0,0,0,11,1,0,0,0,0,2424\n",
      "309,1,205,1287,36,407,27,11,354,0,44,24,393,123,116,0,0,37,335,3,0,262,403,0,0,73,0,1,41,0,0,104,192,0,0,0,55,0,0,113,0,0,0,3,0,0,0,5041\n",
      "806,1,364,21,14,2121,301,5,242,0,69,9,73,0,38,0,4,59,0,128,27,6,181,0,0,37,0,0,76,0,2,106,0,0,0,3,219,0,0,0,0,0,0,0,0,0,0,5088\n",
      "417,23,35,162,218,1829,15,72,661,1,535,39,71,14,1,54,75,85,83,29,378,271,114,34,0,2,0,15,576,0,105,149,459,0,0,0,194,0,0,0,0,0,30,0,0,0,0,3254\n",
      "476,0,731,456,2,753,64,6,320,169,21,326,90,0,82,1,9,0,190,63,113,2,0,228,0,52,0,0,5,0,1,20,7,0,0,0,135,0,0,0,2,0,0,0,0,0,0,5676\n",
      "654,0,350,359,9,3490,185,128,52,0,0,1,62,18,25,0,270,8,13,31,4,0,14,0,0,22,0,738,193,0,26,282,2,0,0,0,3,0,5,8,0,0,0,0,0,0,0,3048\n",
      "1968,0,158,87,136,1509,400,9,514,0,215,105,9,0,0,5,3,0,3,6,0,0,224,6,0,4,0,0,71,0,1,2,516,0,0,0,358,0,0,12,1,0,0,0,0,0,0,3678\n",
      "916,0,461,93,4,948,198,2,696,36,37,22,1,114,403,0,121,406,262,145,6,7,270,178,0,0,91,12,164,0,0,289,204,6,0,0,16,0,0,0,0,0,0,0,0,0,0,3892\n",
      "582,8,154,648,0,1592,86,0,328,16,72,0,2,0,149,172,0,38,411,1131,0,0,154,0,0,5,0,0,407,0,0,1163,31,0,0,0,1,2,0,0,0,0,8,0,0,0,0,2840\n",
      "2567,0,18,552,0,636,1,22,92,3,104,12,0,0,34,50,71,222,117,61,0,287,130,0,0,0,0,10,334,0,0,705,6,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3963\n",
      "2108,360,303,392,38,675,67,0,242,2,1,19,92,214,171,0,151,55,13,44,11,0,37,37,0,0,0,2,512,0,0,82,61,0,0,0,0,0,0,3,3,0,0,0,0,0,0,4305\n",
      "330,48,33,473,0,1585,3,22,544,0,14,360,303,0,98,5,0,0,158,3,14,68,310,17,0,27,0,427,81,344,2,61,0,0,0,0,248,0,0,23,0,0,5,0,0,0,0,4394\n",
      "1329,0,83,35,0,549,11,12,581,42,110,0,20,0,3,8,645,414,38,164,2,0,216,356,0,3,4,1185,81,0,0,245,2,0,0,1,239,0,0,4,0,1,0,0,0,0,0,3617\n",
      "1427,13,693,601,0,1213,386,6,625,132,239,0,83,0,1,1,1,14,24,102,0,0,2,0,12,139,0,16,737,420,0,91,0,0,0,2,19,0,0,0,0,0,7,0,0,0,0,2994\n",
      "342,0,443,126,0,1407,279,2,23,136,49,29,69,0,155,466,54,0,1524,380,0,0,15,30,0,0,0,0,539,0,0,31,0,0,0,23,87,0,0,3,0,0,0,0,0,0,0,3788\n",
      "1715,45,316,74,0,1104,621,3,3,585,4,11,19,2,164,0,78,0,5,4,0,0,329,0,35,186,3,0,109,144,0,632,21,0,0,0,345,0,0,0,428,1,0,0,0,0,0,3014\n",
      "1954,7,208,411,67,408,74,484,3,0,964,0,13,37,762,5,0,0,252,2,69,0,794,0,14,394,0,0,81,0,29,586,66,0,0,4,2,0,27,0,0,0,0,0,0,0,0,2283\n",
      "1653,6,734,542,0,1336,14,0,168,117,215,15,83,0,2,22,10,0,0,414,43,0,4,27,0,452,345,0,5,0,39,8,146,342,0,0,2,0,0,0,2,0,0,0,0,0,0,3254\n",
      "193,0,165,159,1,1135,17,0,299,8,267,14,404,47,74,4,168,140,0,333,0,3,37,0,0,0,0,0,24,0,34,118,0,0,0,0,1,0,113,21,0,0,0,0,0,0,0,6221\n",
      "634,256,1116,380,0,1302,276,124,625,0,69,2,34,0,0,10,6,84,349,5,34,134,38,0,0,0,0,0,8,0,95,12,41,0,0,1,27,0,0,1,0,0,1,0,0,0,0,4336\n",
      "3030,198,284,1115,0,882,108,1,994,0,148,60,309,0,2,0,1,204,64,0,1,210,170,7,0,0,0,33,400,0,60,11,7,0,0,0,0,0,0,0,20,5,0,0,0,0,0,1676\n",
      "1446,1,4,31,112,2389,128,8,749,1,365,10,0,0,15,0,4,5,87,347,166,165,405,0,45,157,0,26,98,0,31,5,31,0,0,0,2,0,0,0,0,5,0,0,0,0,0,3162\n",
      "286,184,262,1199,47,1230,254,72,153,0,236,1,4,0,149,59,3,0,19,0,124,0,221,3,1,0,0,430,152,0,71,311,234,0,0,4,251,0,0,0,2,0,0,0,0,0,0,4038\n",
      "1747,0,315,71,0,1212,70,811,219,7,153,4,0,0,50,1,83,74,24,639,1,0,10,0,0,1,4,0,2,43,1,333,0,52,0,1,62,0,0,0,0,0,0,0,0,0,0,4010\n",
      "332,2,90,180,118,2442,339,0,346,0,194,556,0,334,6,11,116,59,14,13,7,2,27,0,0,18,0,0,29,0,3,10,1,0,0,0,1,0,0,6,0,0,0,0,0,0,0,4744\n",
      "1975,0,384,214,0,1099,88,1,61,0,1262,2,0,301,115,4,0,38,44,466,0,0,279,22,42,0,3,33,120,1,11,147,0,401,0,0,578,0,1,0,0,0,26,0,0,0,0,2282\n",
      "1491,1,386,48,187,2005,279,50,344,0,20,14,22,84,565,45,11,8,0,257,0,1,759,1,0,139,0,16,44,0,0,98,0,0,0,0,2,10,0,0,0,0,0,41,0,0,0,3072\n",
      "1190,0,8,519,0,1760,28,0,410,0,46,59,255,27,16,0,3,0,405,292,18,0,216,1,0,52,90,12,395,4,13,109,304,0,0,0,12,0,0,6,0,0,52,0,0,0,0,3698\n",
      "262,0,14,280,19,1518,29,5,202,0,29,118,20,60,0,107,0,9,182,344,0,26,473,6,3,0,0,55,161,27,75,138,16,2,0,3,1620,0,0,5,0,0,0,0,0,0,0,4192\n",
      "211,128,564,598,15,406,596,17,220,0,9,323,446,6,100,1,5,39,50,2,0,1,47,17,405,1,17,0,184,0,0,310,0,0,0,18,152,0,0,278,0,0,0,0,0,0,0,4834\n",
      "619,0,143,1248,0,965,76,150,1133,0,437,697,24,0,400,0,0,28,272,317,6,0,832,0,50,144,0,1,64,0,10,296,84,0,0,0,137,0,0,0,0,0,0,0,0,0,0,1867\n",
      "1270,2,372,1320,0,658,18,0,26,1,699,0,199,199,319,38,111,209,34,11,0,0,223,27,0,638,0,100,175,0,0,40,0,0,0,0,93,0,0,25,0,0,0,0,0,0,0,3193\n",
      "2936,0,69,1476,0,500,369,0,254,0,56,17,88,0,353,0,11,0,32,306,16,0,153,1,0,0,1,104,29,0,27,157,1,0,0,0,24,0,0,0,0,0,0,0,0,3,23,2994\n",
      "518,0,113,218,0,2277,276,0,10,16,637,1,35,1,0,12,102,58,0,1,1,1,414,0,0,0,427,9,231,0,0,415,0,0,0,0,86,0,0,11,0,0,0,0,0,0,18,4112\n",
      "413,14,30,1246,0,927,543,151,11,23,437,114,6,12,32,0,0,16,2,3,1,0,240,32,21,0,0,14,1,0,1,7,0,0,0,0,5,0,22,6,0,0,0,0,41,0,256,5373\n",
      "2618,118,32,86,1,574,15,6,24,37,8,3,0,0,311,185,64,310,325,42,0,4,49,0,0,47,9,26,460,0,166,24,11,0,0,0,206,0,0,41,0,0,0,0,0,0,0,4198\n",
      "1221,0,534,223,0,919,60,148,661,2,266,36,12,0,23,0,18,8,1,26,0,75,895,0,1,725,26,268,111,0,0,376,46,0,0,0,47,0,0,0,1,48,0,0,0,0,0,3223\n",
      "534,1,305,520,0,3251,42,8,310,0,504,15,2,0,103,4,340,1,131,36,0,0,15,0,0,0,6,0,510,0,63,45,477,0,0,0,1,0,0,11,0,0,0,0,0,0,0,2765\n",
      "636,0,194,568,13,1510,201,0,38,2,258,127,41,22,117,4,110,244,229,401,97,735,322,0,21,0,0,0,198,16,0,19,60,0,0,0,39,0,0,0,0,168,0,0,0,0,0,3610\n",
      "880,74,793,282,21,1175,4,5,799,9,350,161,1,46,19,3,5,1,21,53,0,14,1249,15,0,193,0,14,231,0,0,78,2,0,0,0,29,0,0,0,0,2,0,0,0,0,0,3471\n",
      "2231,101,457,647,38,937,90,1,58,11,2,197,16,9,468,28,213,56,9,53,15,0,56,11,0,744,1,1,24,0,0,474,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,3048\n",
      "1744,69,18,1661,8,293,48,0,2,28,806,66,0,92,76,114,10,1,283,54,0,315,92,0,0,716,11,0,448,94,0,53,4,0,0,0,191,0,0,0,0,0,10,0,0,0,0,2693\n",
      "714,46,372,888,0,1356,78,24,49,0,27,6,0,10,624,15,556,261,74,60,0,130,281,0,0,96,28,90,228,0,0,903,13,0,0,44,238,0,0,0,0,0,0,0,0,0,0,2789\n",
      "803,0,440,198,0,692,150,0,25,0,208,267,735,1,420,10,4,28,352,68,80,0,2,0,330,104,0,0,125,0,20,124,2,0,0,4,0,0,0,0,0,0,0,0,0,0,1,4807\n",
      "1021,0,799,188,0,1135,2,0,1311,1,67,1,3,2,134,43,3,0,356,50,0,0,150,30,0,9,13,14,55,0,0,221,35,0,0,0,357,0,0,0,0,0,0,0,0,0,0,4000\n",
      "2491,0,576,160,0,990,263,34,121,0,25,49,46,0,0,344,0,0,19,15,0,26,197,1,0,152,0,1,139,0,67,7,7,0,0,0,289,0,0,0,0,0,0,0,0,0,0,3981\n",
      "1664,0,26,341,32,1197,337,0,239,12,6,0,2,93,91,0,1,0,368,52,0,0,118,0,0,26,152,201,916,0,0,24,128,0,0,0,7,0,124,0,0,0,4,0,0,0,0,3839\n",
      "1780,1,72,397,12,348,67,0,1311,0,4,0,3,0,400,118,236,44,0,0,85,1,3,143,0,719,0,0,381,0,5,5,7,0,0,0,32,0,0,1,5,0,0,0,0,0,0,3820\n",
      "1516,14,167,226,0,1873,10,0,62,18,124,0,112,2,43,542,13,20,178,13,0,0,228,178,51,5,0,0,374,0,54,43,36,0,0,4,99,0,0,9,0,0,0,0,0,0,0,3986\n",
      "1419,19,201,160,0,1740,1150,13,32,13,162,49,81,116,2,1,0,10,0,65,0,0,21,0,64,11,0,253,87,0,0,211,0,0,0,0,42,0,0,0,426,0,0,0,0,0,0,3652\n",
      "1643,0,98,170,4,1326,113,150,523,233,42,3,0,16,3,0,27,11,31,108,0,0,306,171,0,28,0,63,94,0,49,285,0,0,0,3,97,0,0,0,0,0,0,0,0,0,0,4403\n",
      "600,0,197,841,0,969,254,249,497,0,146,103,208,0,103,173,7,97,86,2,0,1,917,0,0,11,206,23,565,0,0,213,299,0,0,0,17,0,0,0,0,0,0,0,0,0,0,3216\n",
      "687,0,618,443,0,1188,443,405,909,6,206,414,148,0,0,0,21,207,67,111,0,16,209,129,0,6,0,0,152,0,0,489,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3123\n",
      "856,146,107,2011,2,1399,16,1,63,0,15,0,0,5,27,34,701,0,210,179,0,112,552,1,0,0,0,0,15,0,0,227,204,0,0,0,111,0,258,0,0,0,0,0,0,0,0,2748\n",
      "666,0,178,600,11,689,24,6,10,0,26,15,867,0,93,8,1,215,254,1,0,175,28,365,0,0,2,6,193,0,0,28,5,0,0,6,7,0,0,7,0,0,0,0,0,0,0,5514\n",
      "741,63,499,442,0,3143,496,35,20,0,0,1,180,22,33,37,1,11,124,27,5,2,24,0,0,0,0,0,199,0,0,44,12,0,0,0,467,0,0,222,0,0,0,0,0,0,0,3150\n",
      "1599,6,43,158,9,1533,16,302,139,5,0,137,14,0,543,0,181,0,45,7,0,3,13,12,81,0,0,507,998,0,3,264,14,0,0,0,149,0,262,0,4,0,0,0,0,0,0,2953\n",
      "730,9,0,176,0,3437,234,0,9,1,22,305,0,0,30,0,292,0,0,60,94,0,818,0,2,40,0,0,36,1,221,96,279,0,0,0,149,0,0,0,0,0,0,0,0,7,0,2952\n",
      "971,0,103,120,12,651,3,0,223,86,2,1,120,684,189,12,47,0,116,4,0,0,408,10,960,0,0,0,168,0,39,129,217,0,0,0,147,0,0,0,0,0,0,0,2,0,0,4576\n",
      "596,224,51,134,0,2384,242,292,416,42,17,92,1,6,135,1,76,2,0,151,16,0,5,0,0,312,34,66,425,0,31,8,219,0,0,450,185,0,55,19,0,0,1,0,0,0,0,3312\n",
      "1067,5,238,670,253,796,774,70,456,5,270,757,209,4,2,1,289,125,4,6,15,11,45,2,0,223,0,1,37,0,0,47,3,0,0,1,162,0,106,0,4,0,0,0,0,0,0,3342\n",
      "188,32,1599,1665,0,347,593,23,66,3,590,13,12,24,84,38,10,198,169,289,104,21,138,0,1,14,0,95,524,0,0,41,41,0,0,0,98,0,0,0,0,0,0,0,0,0,0,2980\n",
      "811,66,229,164,0,1616,182,38,159,0,18,63,1,0,63,1,38,176,207,1062,0,0,8,8,0,0,199,79,39,0,219,37,114,0,0,0,6,0,0,0,0,0,0,0,0,0,0,4397\n",
      "657,67,140,52,0,1639,15,148,239,0,891,50,15,83,3,42,24,585,20,17,75,66,422,0,0,109,172,274,13,151,0,10,0,0,0,0,399,0,0,34,0,0,0,0,0,0,0,3588\n",
      "1634,193,459,500,33,1594,90,7,151,0,19,3,642,17,598,0,0,146,29,14,0,38,25,1,0,34,0,2,41,0,54,1,15,0,0,0,131,0,164,1,0,0,0,0,0,0,0,3364\n",
      "1053,0,434,640,0,2345,187,42,270,0,76,43,0,110,52,0,11,5,20,37,68,93,7,0,0,2,0,0,19,0,25,239,416,0,0,1,341,0,7,105,0,0,0,0,0,0,0,3352\n",
      "1566,148,1,381,33,906,86,48,131,0,4,0,21,128,11,0,13,23,12,316,59,255,218,0,0,102,3,0,178,0,262,2,11,0,0,0,50,0,0,0,0,0,0,0,0,0,0,5032\n",
      "238,8,176,74,10,926,338,41,296,0,17,0,143,0,0,8,114,266,121,261,0,56,207,273,3,7,0,11,987,0,0,82,17,0,127,0,154,1,17,0,12,0,283,0,0,0,0,4726\n",
      "271,0,248,1006,10,685,9,218,200,0,3,75,788,0,169,1235,1,88,45,10,5,1,114,0,0,0,5,0,7,0,3,156,349,0,0,0,18,0,0,0,3,0,0,0,94,0,0,4184\n",
      "1090,1,398,267,0,1444,24,0,143,21,455,0,4,0,44,0,1,0,245,1,11,1,19,2,0,64,3,24,42,0,281,51,94,0,0,1,6,0,0,0,0,47,0,0,0,0,0,5216\n",
      "1050,493,1470,105,12,648,6,335,84,0,8,19,0,23,143,181,54,0,35,34,9,0,240,2,0,237,0,27,1,0,0,7,48,0,86,0,262,0,0,0,0,0,0,18,0,0,0,4363\n",
      "641,1,91,186,2,2168,405,93,176,64,16,81,3,5,50,0,23,142,46,39,144,0,5,1,0,149,1,3,6,0,53,0,0,0,0,0,114,0,0,0,23,0,0,0,0,0,0,5269\n",
      "1148,7,30,602,1,1035,368,0,387,18,180,47,85,61,327,105,108,848,1588,139,18,2,329,0,0,273,0,2,14,0,0,37,109,0,0,0,744,0,8,16,0,0,0,0,0,0,0,1364\n",
      "837,0,244,306,2,1325,33,6,654,0,155,81,135,285,24,11,64,2,396,329,152,0,71,382,0,15,0,0,23,0,0,541,39,0,0,0,0,940,0,321,0,0,0,0,0,0,0,2627\n",
      "410,0,1128,136,13,1181,153,44,43,90,313,1,441,283,28,15,255,3,368,244,0,610,72,0,0,9,0,67,129,334,0,48,1,0,0,32,30,0,0,1,11,0,16,0,0,0,0,3491\n",
      "2673,0,145,704,73,1328,246,58,315,44,70,0,0,14,25,4,310,8,11,429,0,4,222,0,0,0,0,0,122,0,0,30,205,0,0,0,851,0,0,0,0,0,0,0,0,0,0,2109\n",
      "471,0,59,25,17,1289,347,4,1155,414,162,0,64,450,341,0,17,2,540,38,347,349,184,0,0,1,85,82,9,0,0,829,3,0,0,3,652,0,0,0,0,0,0,0,0,0,0,2061\n",
      "493,0,300,208,1,1248,8,238,187,0,38,482,135,4,144,0,173,12,130,1296,5,0,480,0,0,0,279,0,38,7,0,160,183,0,0,405,128,18,46,21,0,0,0,0,0,0,0,3133\n",
      "746,25,312,226,0,1392,33,0,469,10,174,212,61,0,47,3,25,0,1,212,0,0,29,110,157,0,103,0,62,0,173,6,0,0,0,0,10,0,0,59,0,0,205,0,0,152,0,4986\n",
      "879,0,47,416,1,1464,335,0,254,0,0,66,29,15,191,0,116,88,35,31,409,40,1,0,0,0,0,0,237,0,165,145,11,0,0,0,121,0,0,1,0,0,0,0,0,0,0,4903\n",
      "1350,0,57,703,29,744,83,3,133,22,55,6,19,24,54,187,8,6,59,38,3,186,23,0,0,25,0,35,55,0,0,0,0,0,0,0,1293,0,0,0,27,0,0,0,0,0,0,4773\n",
      "1826,7,28,372,0,1970,157,0,224,18,14,162,38,0,241,12,5,34,81,70,0,11,1085,5,0,0,58,46,111,0,21,222,10,0,0,0,153,0,0,0,0,0,0,0,0,0,0,3019\n",
      "2550,4,44,45,52,616,289,151,488,179,350,85,305,1,88,30,471,4,241,59,5,0,34,0,155,0,26,1,54,0,11,247,0,0,0,0,0,0,0,0,1,248,2,0,0,0,0,3164\n",
      "297,0,173,326,0,272,165,0,601,77,302,0,2,0,62,435,490,632,9,1132,321,0,123,0,0,83,0,0,12,35,0,16,216,0,0,0,15,0,0,0,0,0,0,0,0,0,0,4204\n",
      "376,13,302,368,140,969,659,2,169,0,0,49,314,58,295,150,70,85,82,1,124,0,199,293,0,0,0,0,1,0,0,1,76,0,0,207,0,0,115,0,0,0,0,0,0,0,0,4882\n",
      "754,5,425,90,1,1455,9,532,84,3,4,41,2,0,990,30,35,579,200,3,0,0,69,0,0,0,0,0,370,0,0,178,23,0,0,1,1,0,0,0,1023,2,0,0,0,0,0,3091\n",
      "1191,18,11,405,0,810,40,461,605,406,217,0,185,10,30,14,250,124,4,513,14,109,10,9,1,0,0,0,441,0,0,102,0,0,0,0,140,0,0,0,0,0,0,0,0,0,0,3880\n",
      "276,150,394,131,0,839,0,0,93,367,0,47,151,221,71,22,289,0,25,1,6,22,217,32,0,14,145,0,394,0,26,8,95,2,0,0,289,0,0,14,0,0,0,0,0,0,0,5659\n",
      "1111,70,412,112,102,656,1063,176,93,0,2,16,0,0,270,0,40,1,130,26,92,0,30,84,0,0,0,0,1065,0,0,0,10,0,0,0,370,0,0,0,216,219,0,10,0,0,0,3624\n",
      "945,0,327,596,14,438,544,0,77,16,12,565,34,4,0,6,0,0,14,18,0,75,80,9,0,0,1,7,1,0,0,35,0,0,0,0,188,0,0,0,0,0,0,0,0,0,0,5994\n",
      "1285,0,870,146,0,1128,65,67,188,5,458,0,17,18,157,217,223,31,94,0,0,3,93,174,0,97,0,2,844,0,0,329,400,0,0,0,2,0,0,0,0,17,12,0,0,0,0,3058\n",
      "1221,0,146,1219,0,1414,407,1,246,6,51,88,1,11,8,29,21,6,3,350,69,0,34,72,0,0,0,0,8,0,0,1,386,0,0,0,1,2,0,0,0,0,0,0,0,0,0,4199\n",
      "1094,0,246,129,0,1689,322,279,218,78,54,5,189,44,64,76,50,8,700,154,3,5,1,0,2,64,172,16,292,0,0,163,11,0,0,0,3,0,11,0,5,0,0,0,0,0,129,3724\n",
      "645,1,308,407,0,3564,138,6,3,246,151,213,13,36,10,212,1,66,5,470,0,0,206,351,0,35,0,42,296,0,30,62,39,0,0,0,23,0,0,1,0,0,0,0,0,0,0,2420\n",
      "344,0,790,465,1,768,15,0,365,202,623,7,145,12,0,0,2,55,9,2,0,7,712,824,0,4,0,44,123,0,0,102,5,0,0,0,487,0,0,0,94,0,68,0,0,0,0,3725\n",
      "822,319,315,90,2,2118,571,0,265,5,952,0,0,275,17,36,163,36,216,245,69,0,736,0,0,26,0,1,344,2,226,44,48,0,0,0,2,0,35,0,8,0,2,0,191,0,0,1819\n",
      "2206,21,363,367,1,1084,466,58,172,105,94,130,5,106,9,0,7,14,8,17,75,0,8,1235,0,0,1,98,252,0,0,155,659,0,0,0,40,0,0,0,0,0,0,0,0,4,0,2240\n",
      "707,0,186,265,0,859,1486,204,216,0,558,0,21,30,17,32,0,21,1,274,12,0,241,13,29,0,10,9,19,0,6,2683,45,0,13,0,13,0,0,0,0,0,0,0,0,0,0,2030\n",
      "527,0,830,327,0,1421,162,25,153,24,85,31,1,12,8,51,17,219,7,16,0,0,944,0,0,1,37,0,12,0,0,199,1,0,0,0,39,0,0,0,0,0,0,0,0,0,0,4851\n",
      "383,60,43,1073,0,1130,1559,0,329,133,1,94,63,0,53,0,0,2,215,463,28,122,204,0,0,0,0,0,178,0,0,25,42,0,1,0,13,0,0,2,0,0,108,0,0,0,0,3676\n",
      "924,0,221,567,0,529,0,185,427,3,584,422,28,971,17,0,0,0,569,8,4,21,138,0,0,4,0,35,56,0,0,29,0,0,0,0,74,0,0,0,0,0,0,0,0,0,0,4184\n",
      "1208,0,35,876,85,1369,307,7,25,1,81,248,49,350,27,313,207,9,6,203,8,209,284,0,9,0,1,715,12,0,32,11,20,0,0,35,211,0,0,0,0,0,0,0,0,0,0,3047\n",
      "1147,36,444,178,0,1143,0,9,264,2,9,159,12,327,13,42,178,1563,2,271,156,224,134,4,0,0,522,0,2,0,0,1,0,0,0,0,139,0,0,0,0,0,0,0,0,16,0,3003\n",
      "920,0,4,677,3,660,261,3,0,5,498,6,7,58,2,194,18,2,47,658,0,0,480,26,0,6,0,101,130,0,0,30,548,0,0,0,12,0,0,0,0,5,0,12,0,0,0,4627\n",
      "1148,3,92,120,129,695,7,48,238,473,16,0,34,0,331,660,107,1,21,0,0,0,95,192,593,0,0,2,414,0,0,0,88,0,0,0,9,0,0,0,112,0,0,12,0,0,0,4360\n",
      "987,0,1022,32,28,398,837,301,298,25,31,0,0,12,27,65,0,12,156,1,467,0,2,0,0,0,0,0,324,0,0,984,259,0,0,0,390,0,0,0,0,0,0,0,0,0,0,3342\n",
      "944,0,77,128,442,1377,103,0,229,0,70,0,113,0,489,56,2,0,175,37,6,0,527,0,0,1,11,87,170,1515,0,0,140,0,0,0,424,0,1,27,24,0,0,35,0,0,0,2790\n",
      "703,0,174,751,316,1933,15,0,0,4,0,46,405,0,35,0,14,53,33,9,10,0,639,0,0,1195,47,0,39,0,0,197,5,0,0,0,529,0,0,0,0,0,0,0,0,0,0,2848\n",
      "1345,11,46,179,280,1583,570,4,7,0,2,0,146,92,15,3,315,58,88,42,48,0,66,0,0,0,600,0,48,0,2,4,203,0,0,2,0,0,3,0,0,0,1,0,0,0,0,4237\n",
      "594,0,557,1297,0,1118,0,380,114,2,22,81,3,1,6,0,282,400,74,52,1,8,29,78,0,142,91,0,299,0,194,4,57,0,0,0,128,0,27,0,0,0,7,0,0,0,0,3952\n",
      "1453,0,103,111,0,1689,541,3,291,2,367,0,362,2,24,11,524,0,11,4,1,53,208,2,0,1,0,0,254,0,42,59,16,0,0,2,175,0,0,49,9,0,0,0,0,0,0,3631\n",
      "2326,91,6,47,13,943,1,0,142,0,450,3,13,0,562,2,983,0,243,0,100,2,8,0,0,1,0,0,370,411,0,42,9,139,0,2,11,0,0,27,0,0,0,0,0,0,0,3053\n",
      "301,1,112,419,0,566,193,0,463,225,27,30,131,63,236,275,512,0,0,108,0,0,373,1,0,22,0,19,426,0,0,350,2,0,0,0,2,0,138,2,0,0,0,0,0,0,0,5003\n",
      "2169,4,63,184,0,760,587,26,709,0,10,29,0,0,82,0,3,0,2007,176,178,0,225,0,4,0,1,0,466,0,0,23,1,0,0,178,178,0,0,21,14,0,0,0,0,0,0,1902\n",
      "1578,0,54,819,2,1143,77,4,158,0,4,335,17,4,38,26,475,34,3,17,4,316,23,0,0,39,11,0,67,0,7,16,110,0,0,29,33,0,0,0,0,0,0,10,0,0,0,4547\n",
      "872,14,60,289,7,1575,28,1070,140,0,465,3,0,2,51,0,141,6,29,19,26,0,31,0,0,5,130,3,315,0,0,464,64,0,0,5,883,0,4,75,6,0,0,0,0,0,0,3218\n",
      "819,0,696,1519,4,1654,59,0,1018,0,139,48,156,0,195,89,397,15,134,285,43,34,0,3,8,0,0,0,274,0,7,10,41,1,0,6,2,0,0,0,0,0,0,0,0,0,0,2344\n",
      "1441,153,526,1565,0,1609,306,253,209,0,1,167,12,0,15,0,0,139,59,13,0,1,75,80,7,43,13,1,341,0,127,6,443,0,0,0,113,0,0,1,0,0,0,0,0,0,0,2281\n",
      "1108,11,119,443,0,827,61,13,161,0,163,26,48,145,108,2,11,7,121,543,706,201,104,14,0,570,0,0,151,0,3,41,54,0,0,1,66,0,0,0,0,0,79,0,0,7,4,4082\n",
      "1188,21,113,182,0,2158,12,63,881,0,0,38,0,14,40,0,21,8,7,94,131,0,209,42,0,4,0,5,527,0,0,27,8,0,0,93,457,0,5,0,0,0,0,0,0,0,0,3652\n",
      "774,108,144,1634,271,329,52,113,206,0,37,14,0,12,23,2,27,36,2,356,19,0,159,9,0,74,0,0,1,0,33,992,412,0,0,0,0,0,0,4,0,0,57,0,0,0,0,4100\n",
      "1366,12,107,1433,15,530,156,14,13,214,9,310,345,1,4,0,563,62,217,0,59,1,114,138,10,0,0,0,1635,12,0,839,37,0,0,0,319,0,0,0,6,0,0,0,0,0,0,1459\n",
      "2022,43,293,123,0,693,342,11,429,3,31,6,16,16,449,0,22,22,314,241,0,0,88,0,0,0,1,0,131,0,0,2,22,0,0,3,0,0,0,5,0,0,208,9,0,0,0,4455\n",
      "1811,0,245,376,0,1257,7,431,450,99,405,0,0,39,843,4,7,0,122,1,326,4,311,0,0,0,4,15,485,0,7,241,107,0,0,7,46,0,10,0,0,0,0,0,0,0,0,2340\n",
      "741,29,311,621,87,1690,0,66,821,4,811,160,85,165,41,207,4,1,3,278,5,188,104,1187,0,0,0,135,0,0,0,23,0,0,0,0,186,0,23,0,2,0,0,0,0,0,0,2022\n",
      "1657,0,574,268,325,1334,27,0,573,0,6,82,11,6,290,7,211,36,41,77,0,2,72,2,409,0,0,257,5,0,0,7,19,10,0,406,64,0,0,92,0,0,0,0,0,0,0,3130\n",
      "762,4,675,508,0,1660,18,21,60,0,0,4,0,592,56,281,2,118,824,4,0,278,317,1,15,0,285,141,518,0,4,311,1,0,0,107,108,0,2,0,0,0,0,0,0,0,0,2323\n",
      "328,0,417,597,4,988,119,0,625,15,38,0,28,0,382,44,358,224,3,0,679,0,0,103,0,0,18,0,82,0,6,39,865,0,0,0,42,0,0,62,0,0,0,0,0,0,0,3934\n",
      "1417,78,70,1352,0,1514,259,201,6,18,10,2,3,294,38,244,269,10,37,16,0,2,243,0,251,512,390,31,31,7,0,1,18,0,0,0,42,0,0,2,53,0,0,0,201,0,0,2378\n",
      "1398,0,335,617,25,1712,8,0,2,9,1,207,1,412,51,44,2,3,45,67,0,5,469,33,0,20,0,0,16,0,6,45,238,0,0,0,2,0,0,31,0,0,0,0,0,0,0,4196\n",
      "1005,136,148,516,0,1840,273,66,445,0,41,45,4,82,15,216,861,103,978,15,0,0,5,11,0,0,0,82,295,0,0,55,0,0,0,12,56,0,0,0,0,0,0,0,0,0,0,2695\n",
      "2703,6,1,732,4,690,186,0,308,194,488,12,81,51,8,0,69,127,462,3,0,384,0,0,0,0,0,0,5,0,0,233,105,0,0,31,258,0,153,198,0,0,0,0,0,0,0,2508\n",
      "463,0,204,373,3,1343,79,77,456,2,96,92,73,468,1,0,5,336,66,180,0,67,115,29,0,0,527,0,369,0,0,21,37,0,0,24,165,0,0,0,0,0,47,0,0,0,1490,2792\n",
      "615,23,102,696,0,910,8,27,156,0,8,0,0,672,10,0,2,4,93,0,0,0,40,277,0,96,0,1,415,0,28,10,23,0,0,0,1245,0,0,330,0,0,0,55,0,0,0,4154\n",
      "1357,112,32,477,11,677,35,16,163,5,33,37,31,0,99,10,126,399,16,0,214,0,96,0,0,4,0,11,201,0,76,7,7,0,0,0,322,0,3,1,0,0,0,0,0,0,0,5422\n",
      "2114,1,580,99,0,863,118,2,151,13,10,3,182,25,1,164,760,19,212,168,0,0,63,0,52,0,0,16,114,0,307,113,31,0,0,0,897,0,0,1,0,0,0,0,0,0,0,2921\n",
      "1018,0,396,485,26,615,118,285,73,13,27,0,394,7,1595,116,157,0,10,4,0,0,71,0,0,512,0,0,42,0,62,284,8,0,0,0,1108,0,0,0,99,0,0,0,0,0,0,2475\n",
      "1516,0,221,81,82,1713,493,636,19,6,3,21,5,0,321,0,61,0,9,24,33,0,12,16,0,0,0,1,145,0,12,370,152,0,0,6,146,0,0,34,0,0,0,0,0,0,0,3862\n",
      "432,2,222,595,369,1777,439,0,209,0,579,87,3,0,44,2,343,0,556,37,0,180,32,286,0,0,14,11,43,0,0,464,143,0,0,0,0,0,0,3,40,0,0,0,0,0,0,3088\n",
      "2786,20,100,37,0,845,453,2,286,16,70,1,0,13,102,26,1,5,0,14,0,0,36,176,0,0,12,0,295,0,252,118,147,0,0,194,27,0,3,0,0,46,0,0,0,0,0,3917\n",
      "586,5,63,63,3,975,146,13,65,178,40,148,546,2,126,0,0,163,124,1,0,9,51,0,0,80,0,1,171,0,0,233,4,0,0,8,4,0,0,0,0,0,7,0,0,0,0,6185\n",
      "816,1,489,140,4,1176,498,117,50,298,140,210,0,12,979,6,0,3,88,2,0,0,45,17,0,7,66,0,709,0,0,10,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,4093\n",
      "933,0,48,84,0,2237,724,18,336,0,47,0,0,563,148,141,49,7,0,347,23,240,115,0,0,0,0,351,49,0,3,64,671,0,0,0,6,0,0,2,0,0,7,0,0,0,0,2787\n",
      "447,150,98,1565,0,986,301,70,118,0,711,193,43,20,17,1,0,0,68,0,0,0,20,0,0,1,0,463,74,0,0,1,114,0,0,6,11,0,0,0,1,0,0,0,0,0,0,4521\n",
      "1398,0,34,110,99,1279,395,1,255,0,213,181,12,377,3,6,266,21,93,150,0,284,73,8,0,37,3,9,9,0,0,263,0,0,0,15,1,0,6,20,5,0,0,0,0,0,0,4374\n",
      "2109,0,129,946,0,1759,1,83,4,2,111,40,0,64,651,31,412,11,147,0,205,2,227,47,0,4,81,59,81,0,20,20,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2752\n",
      "1111,0,528,468,1,981,145,3,1137,42,17,8,129,0,23,0,0,2,59,160,280,5,10,0,0,185,0,0,385,0,0,104,81,0,0,0,370,0,0,0,0,0,0,0,0,0,0,3766\n",
      "2097,97,58,647,0,579,52,112,944,0,19,457,147,47,471,21,257,0,9,209,3,142,180,0,0,0,4,1,255,0,0,21,16,0,0,0,470,0,0,0,0,0,0,0,0,0,0,2685\n",
      "1051,0,84,65,11,1438,180,85,615,0,201,24,57,566,69,0,18,272,73,53,168,106,161,0,0,21,0,0,982,0,0,152,8,0,0,0,240,0,0,0,1,0,0,0,0,0,0,3299\n",
      "597,0,317,2091,158,1529,279,33,507,2,1401,0,0,0,21,0,10,104,30,79,234,1,112,0,0,0,1,0,141,0,0,65,63,0,0,0,0,0,11,0,0,0,0,0,0,0,0,2214\n",
      "490,0,29,60,0,638,118,9,762,0,537,40,96,171,1,6,142,1,526,396,0,0,758,6,27,40,0,188,83,0,0,7,0,0,0,0,156,0,0,0,0,0,0,283,0,0,0,4430\n",
      "2445,0,81,680,415,939,123,375,397,3,0,53,96,0,0,2,285,22,41,132,16,0,5,0,5,0,0,7,258,0,0,25,52,0,0,19,103,0,0,0,0,0,0,0,0,0,0,3421\n",
      "890,114,208,367,475,1095,59,0,66,150,4,8,120,10,615,374,2,0,160,55,2,127,184,15,0,0,0,0,350,0,13,7,5,0,0,0,763,0,0,0,0,0,0,0,0,0,0,3762\n",
      "725,120,7,250,226,1035,552,441,4,51,21,1,52,0,280,0,0,4,11,15,0,9,5,0,0,0,131,0,167,384,50,13,53,0,0,0,180,0,0,254,0,0,1,0,0,0,0,4958\n",
      "545,2,55,210,0,420,348,0,300,10,804,23,0,0,4,1,76,150,77,5,768,0,412,2,76,4,570,0,556,0,0,17,62,0,0,2,59,0,0,0,416,0,0,0,0,0,0,4026\n",
      "1941,0,313,741,0,574,25,3,388,4,565,61,22,12,24,0,20,205,0,24,134,1190,154,1,5,14,106,239,10,0,0,27,59,0,0,453,0,0,104,0,0,0,0,0,0,0,0,2582\n",
      "922,2,18,140,24,2011,71,167,19,0,637,71,325,502,253,185,35,226,51,22,0,310,83,1,0,0,0,0,51,2,4,210,509,0,1,0,7,0,0,0,0,0,0,8,0,0,0,3133\n",
      "229,0,49,806,77,1393,337,41,391,5,3,45,4,0,14,0,49,15,58,94,21,0,92,0,0,0,75,0,251,0,12,208,0,0,0,0,88,0,0,0,0,0,181,0,0,0,0,5462\n",
      "1131,0,344,334,0,1528,45,23,182,37,272,0,0,1,0,1748,1,0,2,175,204,0,60,31,0,0,153,0,648,0,0,42,61,0,0,76,44,0,0,2,0,0,0,0,0,0,0,2856\n",
      "417,626,375,141,0,1513,78,0,174,460,478,37,112,0,69,95,69,0,140,1050,0,0,126,39,0,27,14,0,32,0,0,194,0,0,0,0,329,0,0,6,0,0,0,0,0,0,0,3399\n",
      "1195,81,66,103,23,739,39,0,570,7,1045,151,0,10,140,110,7,24,532,1,0,10,436,190,0,46,0,109,91,0,1,449,329,0,0,0,246,0,0,0,5,0,0,0,0,0,0,3245\n",
      "882,0,231,992,8,848,210,42,645,0,1,150,0,167,99,42,155,252,100,4,0,0,1,561,2,3,45,0,121,0,0,29,63,0,0,0,55,627,0,0,0,0,0,0,0,0,0,3665\n",
      "399,0,5,206,0,2685,133,0,617,105,15,479,90,34,5,0,314,26,5,39,4,558,230,0,0,37,0,0,465,0,2,100,14,0,0,0,85,2,1,370,0,0,9,0,2,0,0,2964\n",
      "1096,0,119,191,2,1807,47,17,365,0,2,2,46,91,11,36,34,1,999,230,0,27,228,0,0,2,0,188,828,0,56,110,5,0,0,0,136,0,0,96,52,0,2,0,0,0,0,3174\n",
      "974,479,1491,7,133,553,55,1,104,9,0,4,0,0,252,6,1,100,242,17,969,0,50,0,0,146,111,2,161,45,145,553,0,0,0,0,151,0,0,0,0,0,0,0,0,0,0,3239\n",
      "1207,77,287,759,215,1312,371,30,222,9,908,71,222,97,2,0,209,0,17,115,0,69,690,0,0,0,1,0,118,0,0,845,43,19,0,0,11,0,0,2,0,0,0,0,0,0,0,2072\n",
      "1453,0,2,323,1,1403,44,10,85,64,10,10,0,407,7,0,3,193,3,1,8,4,129,0,0,205,2,0,534,0,0,376,0,0,0,60,2,0,1,0,2,0,3,0,0,0,0,4655\n",
      "999,6,17,290,256,1555,64,18,542,0,45,1,36,40,1,115,659,635,361,4,1,0,323,405,0,4,0,82,9,0,0,15,4,0,0,0,9,0,0,9,0,3,0,0,0,0,0,3492\n",
      "330,0,88,222,9,1092,517,2,21,69,424,0,60,0,469,42,631,0,126,164,156,262,74,0,0,0,0,0,461,0,68,6,318,0,0,0,1,0,0,0,93,0,0,0,0,0,0,4295\n",
      "481,0,316,431,0,576,197,8,487,129,645,90,8,2,568,20,0,1,29,23,0,152,8,173,0,0,0,0,153,0,2,8,76,0,0,0,120,0,0,0,0,0,0,0,0,0,0,5297\n",
      "1574,329,464,1217,0,1010,91,191,63,0,165,448,0,0,2,4,1,0,12,218,0,0,9,568,0,0,0,0,582,0,120,8,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,2900\n",
      "568,217,460,918,0,794,219,0,273,0,126,786,0,0,1,16,84,7,31,34,137,0,70,1,0,6,0,29,9,0,10,700,54,0,0,0,5,0,0,0,0,0,0,0,0,73,1,4371\n",
      "347,2,363,207,2,2514,488,4,27,42,99,0,0,98,11,7,0,0,472,5,78,23,70,1,1,2,10,0,16,0,13,232,23,0,0,0,2,4,0,0,0,0,0,60,0,0,0,4777\n",
      "591,0,300,351,0,742,31,0,737,2,770,2,1,4,16,0,57,0,21,29,434,0,584,286,17,29,57,98,209,0,126,1,0,0,0,0,576,0,6,0,0,0,0,0,2,0,0,3921\n",
      "642,139,150,1043,77,1074,0,636,56,169,0,1,22,10,30,0,6,0,0,11,89,0,3,36,0,117,265,0,566,0,830,59,2,0,0,3,106,0,0,0,0,0,0,0,0,0,0,3858\n",
      "507,16,816,39,49,900,16,102,1457,67,6,150,23,194,75,0,6,0,3,272,261,41,83,0,0,11,0,35,330,30,0,535,104,0,0,0,317,0,0,0,354,8,0,0,1,0,0,3192\n",
      "857,0,366,581,0,955,29,224,362,0,8,454,33,361,143,4,117,0,1071,312,758,0,23,188,0,0,0,2,176,16,204,68,29,0,0,51,68,0,0,19,0,0,0,0,0,0,2,2519\n",
      "545,1,851,421,0,1743,310,0,42,2,2,559,0,233,0,11,224,349,53,371,1,35,489,0,37,62,0,0,285,0,0,54,2,0,0,13,29,0,0,0,0,0,10,0,0,0,0,3266\n",
      "1846,0,136,121,0,1580,44,77,301,0,46,0,2,12,4,294,135,190,33,242,35,0,33,0,0,0,49,1168,78,0,0,5,0,0,0,39,1,0,0,0,0,0,0,0,0,0,0,3529\n",
      "1027,4,997,1038,17,1472,573,85,85,101,0,150,109,23,246,78,28,0,183,1,1,0,207,103,0,0,98,40,270,0,13,595,185,0,0,0,103,128,0,0,0,0,0,0,0,3,0,2037\n",
      "1711,1,231,1923,0,337,0,22,718,49,3,9,336,0,24,35,11,215,576,0,121,0,108,0,0,0,221,0,48,0,57,23,0,0,0,0,77,0,0,0,0,0,0,0,0,0,0,3144\n",
      "1727,0,30,1315,0,416,252,0,110,9,360,0,0,13,0,81,89,0,833,140,0,1,11,0,0,1,19,234,18,0,0,125,1,0,0,0,15,0,0,0,1,0,0,0,0,0,0,4199\n",
      "1367,0,490,933,0,791,0,0,424,3,81,9,16,45,120,0,3,43,257,1,0,440,1,14,0,1,13,0,176,0,0,152,36,98,0,0,390,0,6,0,39,0,0,0,0,0,0,4051\n",
      "936,5,85,102,85,2309,908,6,385,160,15,0,0,0,5,0,9,0,1,225,652,1,0,195,0,1,107,1,1,0,0,157,115,0,0,0,16,0,0,5,294,0,0,0,0,0,0,3219\n",
      "1959,65,7,258,0,1479,139,6,437,204,20,12,5,0,16,8,124,94,392,12,12,0,10,0,0,29,2,3,230,0,0,214,8,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4252\n",
      "1005,24,439,762,14,1262,302,78,23,8,48,7,26,0,20,162,846,6,146,2,0,91,132,1,0,20,1,4,122,0,0,65,4,0,0,0,142,0,0,1,1,0,360,0,0,0,4,3872\n",
      "316,11,777,128,0,733,125,274,154,0,28,245,19,0,1107,0,126,8,121,289,5,1,8,0,4,233,0,12,309,0,0,250,283,0,0,4,123,0,0,0,0,0,1,0,0,0,0,4306\n",
      "789,4,165,78,0,1833,45,0,843,119,197,16,3,51,52,3,37,374,165,1,2,42,34,0,45,0,23,16,245,0,0,11,59,0,172,41,376,0,0,0,0,11,0,163,0,0,0,3985\n",
      "2325,5,14,195,0,452,7,188,226,47,9,1268,1,333,6,1,0,174,782,59,367,52,1,0,0,197,0,0,65,0,0,0,1,0,0,0,47,0,0,0,7,0,0,0,0,6,4,3161\n",
      "1987,0,501,13,0,807,21,0,272,0,58,1,13,573,2,0,55,594,14,3,278,0,25,5,7,0,1,1,426,0,42,17,167,0,0,0,0,0,0,0,77,0,0,0,0,0,0,4040\n",
      "1832,627,5,826,0,2226,250,0,106,44,461,0,24,194,2,381,346,12,452,136,0,0,10,0,0,55,0,0,138,0,0,188,8,0,0,0,27,0,0,0,0,0,0,0,0,0,0,1650\n",
      "1011,3,73,1329,3,484,1851,2,49,0,189,1,8,30,51,3,28,19,22,0,0,19,21,3,0,0,15,3,166,1,2,11,0,0,0,3,747,0,0,0,0,0,0,0,0,0,0,3853\n",
      "617,0,0,38,141,1434,933,0,352,309,515,7,0,1,4,425,928,2,635,37,154,389,11,1,0,73,182,322,183,0,64,146,111,0,0,0,4,0,0,0,0,0,1,0,0,0,0,1981\n",
      "1823,0,713,364,113,218,2,0,24,4,46,12,1,104,20,3,193,1,50,43,21,0,11,0,1,7,1,0,125,0,0,0,91,0,0,0,234,0,0,21,0,0,0,0,0,0,0,5754\n",
      "1073,0,80,29,0,111,308,35,342,2,76,3,0,17,2,336,0,508,23,256,1,13,6,0,380,0,31,0,334,0,0,667,439,176,0,0,925,0,0,716,0,28,2,0,0,0,0,3081\n",
      "743,10,27,1566,0,1064,407,8,132,0,26,12,79,2,2,177,345,4,251,24,1,0,78,32,0,53,733,21,1,0,0,68,5,0,0,0,21,0,0,0,0,0,8,0,0,0,0,4100\n",
      "1499,49,14,727,0,1488,52,45,204,20,111,1,180,2,51,44,0,0,42,121,180,0,16,30,0,0,432,6,12,0,0,483,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,4188\n",
      "253,0,236,1202,0,1012,543,170,618,0,1148,2,0,1,91,56,0,4,21,1,29,0,159,0,0,95,2,1,22,0,0,0,12,0,0,10,43,0,0,0,2,0,2,0,0,0,0,4265\n",
      "1544,2,130,99,0,1290,343,334,338,137,54,15,16,47,523,45,115,19,11,184,3,15,81,0,0,0,0,0,292,0,5,36,25,0,0,6,106,0,0,78,0,0,0,0,0,0,0,4107\n",
      "955,0,17,345,0,1636,32,5,615,6,19,1,1,5,55,0,1,73,272,38,0,136,343,29,0,119,36,1,373,0,110,37,0,0,0,0,6,0,0,8,141,0,0,0,0,0,0,4585\n",
      "641,0,7,1007,0,1771,235,0,491,57,927,30,5,16,384,0,33,100,125,169,0,0,64,23,0,595,0,0,230,0,0,56,18,0,2,0,7,0,0,0,0,0,0,0,0,0,0,3007\n",
      "947,730,245,910,0,574,679,0,35,0,235,59,8,5,163,583,159,118,138,475,0,72,73,0,0,52,0,0,895,0,0,490,36,46,0,3,336,0,0,39,0,0,0,0,0,0,0,1895\n",
      "284,128,36,468,0,674,1482,40,17,0,45,10,98,2,3,104,66,0,160,205,0,33,1355,22,0,1,40,0,0,0,0,4,1,7,0,3,70,0,67,76,0,0,0,0,0,0,0,4499\n",
      "583,23,980,1188,1,1518,19,93,703,0,145,1,0,0,30,30,8,3,15,117,0,0,53,2,7,0,0,0,37,0,3,119,411,0,0,0,170,0,0,0,0,0,0,0,0,0,0,3741\n",
      "1157,1,121,230,2,351,3,141,26,40,25,58,29,181,70,897,59,621,287,0,0,0,240,231,555,11,3,9,508,0,78,5,79,2,0,0,170,0,10,0,0,0,9,0,0,0,0,3791\n",
      "1056,0,150,340,187,1508,3,2,154,67,1,1,1,3,149,0,25,0,223,362,8,18,37,163,0,1,5,0,46,0,126,770,1,0,0,0,189,0,0,3,0,0,0,0,0,0,0,4401\n",
      "2274,0,851,181,184,1875,9,4,347,0,94,8,0,0,9,43,10,1,0,47,3,1,308,0,0,21,0,3,29,0,0,25,18,0,0,0,9,0,0,0,2,0,3,0,0,0,0,3641\n",
      "623,0,14,386,26,794,495,12,701,360,433,6,7,2,611,4,4,45,61,18,29,0,1459,0,0,1,19,0,73,9,1065,95,6,0,0,89,346,0,0,0,0,0,0,0,7,0,0,2200\n",
      "184,0,28,842,0,836,132,56,597,0,95,31,11,16,195,21,0,75,0,4,252,0,13,28,0,3,10,0,97,0,8,5,98,0,0,0,175,0,0,0,0,13,253,8,0,0,0,5914\n",
      "848,0,477,585,12,655,0,19,1366,3,228,324,345,0,8,11,89,138,6,26,0,11,61,616,217,73,0,0,348,0,0,187,0,0,0,0,10,0,277,0,0,0,0,0,0,0,0,3060\n",
      "965,232,38,50,39,1440,113,303,531,29,26,0,0,75,20,19,0,0,1,6,0,0,7,1,0,0,31,0,209,0,0,75,0,0,0,0,432,0,0,0,0,0,61,0,1,0,0,5296\n",
      "1401,0,406,87,0,300,556,392,6,29,201,10,52,0,265,0,246,9,437,49,26,242,310,0,29,0,1,18,13,0,93,1181,13,0,0,180,92,269,0,0,0,0,0,32,0,0,0,3055\n",
      "695,0,621,257,0,1288,11,0,163,0,945,306,39,41,397,25,34,161,0,11,20,24,0,153,0,1,0,94,0,51,26,0,0,0,0,0,816,0,0,3,0,0,0,0,0,0,0,3818\n",
      "1265,0,696,192,212,722,8,305,12,111,43,291,3,796,29,0,20,12,326,306,0,17,1,0,0,4,2,371,225,0,3,13,11,0,0,0,6,0,0,0,22,0,0,0,0,0,0,3976\n",
      "687,0,631,164,0,830,400,82,1,0,110,19,84,218,68,7,8,131,121,4,11,34,125,31,3,0,1,3,705,0,45,24,5,0,0,0,261,0,0,0,0,0,0,0,0,0,0,5187\n",
      "2983,0,660,140,0,1742,277,36,6,99,49,113,76,45,70,0,1,127,142,1,0,0,1,1,0,74,49,130,154,0,0,13,85,0,0,0,134,0,1,2,1,0,0,0,0,0,0,2788\n",
      "505,16,139,265,5,1501,238,232,124,391,662,0,140,574,14,35,22,999,13,3,126,13,830,0,0,1,12,1,5,0,86,1,108,0,0,0,4,0,0,0,0,0,0,0,0,1,0,2934\n",
      "1204,0,2,989,0,827,362,1,118,241,488,172,76,0,2,0,2,8,197,0,44,8,68,6,0,0,0,6,239,0,20,61,1431,0,0,0,317,0,0,0,0,0,0,0,0,0,0,3111\n",
      "806,16,1439,69,55,436,200,13,117,219,335,1204,52,38,376,0,0,68,15,112,63,0,257,0,0,1,6,0,171,0,1,36,177,0,0,0,108,0,0,133,351,0,0,0,0,0,0,3126\n",
      "419,679,140,383,0,725,21,35,35,14,59,0,93,0,57,0,47,1,10,77,204,7,243,184,101,451,0,84,151,0,0,340,287,0,0,0,10,0,0,0,0,0,0,0,0,0,0,5143\n",
      "596,5,1691,320,1,1011,238,21,247,69,71,178,273,3,1,0,338,200,2,0,110,48,50,1,0,0,0,8,2,0,37,35,0,0,0,0,0,0,0,292,6,0,0,0,0,0,0,4146\n",
      "1341,0,1107,1457,43,876,212,136,133,1,6,21,3,38,26,3,216,0,30,280,0,0,107,12,4,126,8,0,482,0,0,365,2,0,0,0,15,0,0,0,0,0,0,0,0,0,0,2950\n",
      "613,1,284,293,0,1402,295,114,1214,0,23,49,0,13,1689,13,94,0,7,10,0,2,107,4,0,17,61,49,110,0,0,100,65,0,0,0,69,0,3,11,0,0,0,0,0,2,0,3286\n",
      "1818,1,333,394,1,945,465,0,38,100,1,7,36,527,32,0,361,2,2,3,120,139,110,5,8,2,0,0,544,0,493,425,0,0,0,5,101,0,0,5,219,0,0,0,0,0,0,2758\n",
      "1057,0,0,322,217,650,1,969,214,41,1006,0,2,0,7,0,12,1,0,166,0,0,17,7,0,19,5,1,95,2,1,44,0,0,0,30,0,0,0,0,2,0,0,0,0,0,0,5112\n",
      "422,0,250,79,0,1381,225,0,72,0,784,2,1,0,916,0,227,91,307,91,0,10,60,0,0,80,0,0,95,0,0,123,16,0,0,73,1183,0,0,1,0,124,0,0,0,6,0,3381\n",
      "1401,4,30,526,0,923,25,0,127,0,483,11,70,1089,1,3,174,11,4,2,49,0,81,297,0,4,18,0,100,0,35,8,1,0,0,0,46,0,0,0,7,0,0,0,0,0,0,4470\n",
      "2655,6,106,74,0,952,76,13,158,125,736,43,19,6,49,0,2,21,971,138,95,0,548,0,0,5,105,0,223,0,1,4,5,0,0,0,36,0,0,2,0,0,0,0,0,0,0,2826\n",
      "335,0,71,259,67,718,1,4,4,167,6,0,174,12,6,0,2,56,1,104,8,0,124,0,0,0,0,4,861,0,0,0,1,0,0,0,236,0,0,246,0,0,6,0,0,0,0,6527\n",
      "649,69,966,1227,0,508,2,30,550,0,302,159,3,49,195,26,19,180,7,49,2,0,324,32,0,0,0,0,5,0,0,147,87,0,0,0,5,0,0,0,0,0,0,6,0,0,0,4402\n",
      "1258,0,0,1119,0,2348,25,0,137,176,2,12,148,92,35,0,0,10,26,0,336,164,18,0,0,23,0,4,1318,0,102,1,49,0,0,0,10,0,0,2,0,0,0,0,0,0,0,2585\n",
      "\n"
     ]
    }
   ],
   "source": [
    "with open(resource_filename('deepbiome', 'tests/data/onefile_x.csv')) as f:\n",
    "    print(f.read())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example of the Y (regression)\n",
    "\n",
    "This is an example of the output file for regression problem."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4.997270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.004092</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5.485126</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5.489590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.500001</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         x1\n",
       "0  4.997270\n",
       "1  5.004092\n",
       "2  5.485126\n",
       "3  5.489590\n",
       "4  1.500001"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = pd.read_csv(resource_filename('deepbiome', 'tests/data/onefile_regression_y.csv'))\n",
    "y.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>2.609926</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>5.488959</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>3.498418</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>5.486107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>5.319623</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           x1\n",
       "995  2.609926\n",
       "996  5.488959\n",
       "997  3.498418\n",
       "998  5.486107\n",
       "999  5.319623"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example of the Y (classification)\n",
    "\n",
    "This is an example of the output file for classification problem. Below example file has 1000 samples in rows."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>V1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    V1\n",
       "0  1.0\n",
       "1  1.0\n",
       "2  0.0\n",
       "3  0.0\n",
       "4  1.0"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = pd.read_csv(resource_filename('deepbiome', 'tests/data/onefile_classification_y.csv'))\n",
    "y.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>V1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      V1\n",
       "995  1.0\n",
       "996  0.0\n",
       "997  1.0\n",
       "998  0.0\n",
       "999  1.0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exmple of the training index file for `k` fold cross-validation\n",
    "\n",
    "For each fold, we have to set the training and test set. If the index file is given, DeepBiome sets the training set and test set based on the index file for 5 fold cross-validation. Below is the example of the index file. Each column has the training indices for each fold. DeepBiome will only use the samples in this index set for training."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   0  1  2  3  4\n",
       "0  1  1  3  1  1\n",
       "1  2  2  4  2  2\n",
       "2  3  3  5  3  4\n",
       "3  6  4  7  4  5\n",
       "4  7  5  9  5  6"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "idxs = pd.read_csv(resource_filename('deepbiome', 'tests/data/onefile_idx.csv'), dtype=np.int)\n",
    "idxs.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>795</th>\n",
       "      <td>994</td>\n",
       "      <td>996</td>\n",
       "      <td>994</td>\n",
       "      <td>995</td>\n",
       "      <td>996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>796</th>\n",
       "      <td>995</td>\n",
       "      <td>997</td>\n",
       "      <td>995</td>\n",
       "      <td>996</td>\n",
       "      <td>997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>797</th>\n",
       "      <td>997</td>\n",
       "      <td>998</td>\n",
       "      <td>996</td>\n",
       "      <td>997</td>\n",
       "      <td>998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>798</th>\n",
       "      <td>999</td>\n",
       "      <td>999</td>\n",
       "      <td>998</td>\n",
       "      <td>998</td>\n",
       "      <td>999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>799</th>\n",
       "      <td>1000</td>\n",
       "      <td>1000</td>\n",
       "      <td>999</td>\n",
       "      <td>1000</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        0     1    2     3     4\n",
       "795   994   996  994   995   996\n",
       "796   995   997  995   996   997\n",
       "797   997   998  996   997   998\n",
       "798   999   999  998   998   999\n",
       "799  1000  1000  999  1000  1000"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "idxs.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below is the index set for 1st fold. From 1000 samples above, it uses 800 samples for training."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    1\n",
       "1    2\n",
       "2    3\n",
       "3    6\n",
       "4    7\n",
       "Name: 0, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "idxs.iloc[:,0].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "795     994\n",
       "796     995\n",
       "797     997\n",
       "798     999\n",
       "799    1000\n",
       "Name: 0, dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "idxs.iloc[:,0].tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Prepare the configuration\n",
    "\n",
    "For detailed configuration, we can build the configuration information for the network training by:\n",
    "1. the python dictionary format\n",
    "1. the configufation file (.cfg).\n",
    "\n",
    "In this notebook, we show the python dictionary format configuration.\n",
    "\n",
    "Please check the detailed information about each option in the [documantation](https://young-won.github.io/deepbiome/prerequisites.html#configuration)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### For preparing the configuration about the network information (`network_info`)\n",
    "\n",
    "To give the information about the training process, we provide a dictionary of configurations to the `netowrk_info` field.\n",
    "Your configuration for the network training should include the information about:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "network_info = {\n",
    "    'architecture_info': {\n",
    "        'batch_normalization': 'False',\n",
    "        'drop_out': '0',\n",
    "        'weight_initial': 'glorot_uniform',\n",
    "        'weight_l1_penalty':'0.',\n",
    "        'weight_decay': 'phylogenetic_tree',\n",
    "    },\n",
    "    'model_info': {\n",
    "        'lr': '0.01',\n",
    "        'decay': '0.001',\n",
    "        'loss': 'binary_crossentropy',\n",
    "        'metrics': 'binary_accuracy, sensitivity, specificity, gmeasure',\n",
    "        'taxa_selection_metrics': 'sensitivity, specificity, gmeasure, accuracy',\n",
    "        'network_class': 'DeepBiomeNetwork',\n",
    "        'optimizer': 'adam',\n",
    "        'reader_class': 'MicroBiomeClassificationReader',\n",
    "        'normalizer': 'normalize_minmax',\n",
    "    },\n",
    "    'training_info': {\n",
    "        'epochs': '10',\n",
    "        'batch_size': '50', \n",
    "        'callbacks': 'ModelCheckpoint',\n",
    "        'monitor': 'val_loss',\n",
    "        'mode' : 'min',\n",
    "        'min_delta': '1e-7',\n",
    "    },\n",
    "    'validation_info': {\n",
    "        'batch_size': 'None', \n",
    "        'validation_size': '0.2'\n",
    "    },\n",
    "    'test_info': {\n",
    "        'batch_size': 'None'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### For preparing the configuration about the path information (`path_info`)\n",
    "\n",
    "To give the information about the path of dataset, paths for saving the trained weights and the evaluation results, we provide a dictionary of configurations to the `path_info` field.\n",
    "Your configuration for the network training should include the information about:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "path_info = {\n",
    "    'data_info': {\n",
    "        'data_path': resource_filename('deepbiome', 'tests/data'),\n",
    "        'idx_path': resource_filename('deepbiome', 'tests/data/onefile_idx.csv'),\n",
    "        'tree_info_path': resource_filename('deepbiome', 'tests/data/genus48_dic.csv'),\n",
    "        'x_path': 'onefile_x.csv',\n",
    "        'y_path': 'classification_y.csv'\n",
    "    },\n",
    "    'model_info': {\n",
    "        'evaluation': 'eval.npy',\n",
    "        'history': 'hist.json',\n",
    "        'model_dir': './example_result/',\n",
    "        'weight': 'weight.h5'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Deepbiome Training\n",
    "\n",
    "Now we can train the DeepBiome network based on the configurations."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For logging, we used the python logging library."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "logging.basicConfig(format = '[%(name)-8s|%(levelname)s|%(filename)s:%(lineno)s] %(message)s',\n",
    "                    level=logging.DEBUG)\n",
    "log = logging.getLogger()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The deeobiome_train function provide the test evaluation, train evaluation and the deepbiome network instance.\n",
    "\n",
    "If we set `number_of_fold`, then DeepBiome performs cross-validation based on that value. If not, DeepBiome package performs cross-validation based on the index file. If both `number_of_fold` option and the index file are missing, then the library performs leave-one-out-cross-validation (LOOCV)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:109] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------1 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 1 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Number', 'Order', 'Genus', 'Class', 'Family', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/resource_variable_ops.py:432: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Colocations handled automatically by placer.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[tensorflow|WARNING|deprecation.py:328] From /usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/resource_variable_ops.py:432: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Colocations handled automatically by placer.\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 1 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/math_ops.py:2862: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.cast instead.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[tensorflow|WARNING|deprecation.py:328] From /usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/math_ops.py:2862: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.cast instead.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 1ms/step - loss: 0.6771 - binary_accuracy: 0.6453 - sensitivity: 0.9251 - specificity: 0.0769 - gmeasure: 0.0125 - val_loss: 0.6519 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 143us/step - loss: 0.6389 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6227 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.6261 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6161 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.6244 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6162 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 0.6240 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6161 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 135us/step - loss: 0.6245 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6171 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 136us/step - loss: 0.6238 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6163 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6242 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6161 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 135us/step - loss: 0.6248 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6167 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 0.6236 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6164 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 3.841541290283203!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_0.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_0.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.007373809814453125!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6221557855606079, 0.6862499713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 9us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.007483720779418945!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6191105246543884, 0.6899999976158142, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 4.88101863861084\n",
      "[root    |INFO|deepbiome.py:193] 1 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------2 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 2 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Number', 'Order', 'Genus', 'Class', 'Family', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 2 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 804us/step - loss: 0.6743 - binary_accuracy: 0.6781 - sensitivity: 0.9385 - specificity: 0.0615 - gmeasure: 0.0308 - val_loss: 0.6444 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 136us/step - loss: 0.6284 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5932 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 148us/step - loss: 0.6020 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5756 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.5985 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5759 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 150us/step - loss: 0.5979 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5779 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.5975 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5770 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.5980 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5776 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 132us/step - loss: 0.5971 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5760 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 122us/step - loss: 0.5974 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5762 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 135us/step - loss: 0.5974 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5777 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 2.8879666328430176!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_1.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_1.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.007960319519042969!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.5939047336578369, 0.7200000286102295, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 10us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.0062444210052490234!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.5939112305641174, 0.7200000286102295, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.339962959289551\n",
      "[root    |INFO|deepbiome.py:193] 2 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------3 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 3 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Number', 'Order', 'Genus', 'Class', 'Family', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 3 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 0s 769us/step - loss: 0.6726 - binary_accuracy: 0.6594 - sensitivity: 0.9385 - specificity: 0.0615 - gmeasure: 0.0308 - val_loss: 0.6449 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 136us/step - loss: 0.6282 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6130 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 135us/step - loss: 0.6181 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6124 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 127us/step - loss: 0.6151 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6109 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.6141 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6111 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6143 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6109 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 143us/step - loss: 0.6141 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6112 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 135us/step - loss: 0.6135 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6109 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 0.6137 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6109 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 135us/step - loss: 0.6140 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6109 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 2.9193525314331055!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_2.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_2.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.00722503662109375!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6129782199859619, 0.6974999904632568, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 12us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.007657527923583984!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6490199565887451, 0.6549999713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.643859624862671\n",
      "[root    |INFO|deepbiome.py:193] 3 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------4 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 4 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Number', 'Order', 'Genus', 'Class', 'Family', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 4 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 0s 730us/step - loss: 0.6722 - binary_accuracy: 0.6625 - sensitivity: 0.9560 - specificity: 0.0256 - gmeasure: 0.0291 - val_loss: 0.6426 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.6340 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 140us/step - loss: 0.6227 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6213 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.6229 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.6224 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 143us/step - loss: 0.6227 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 136us/step - loss: 0.6230 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 148us/step - loss: 0.6225 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 133us/step - loss: 0.6225 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 0.6225 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6206 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 3.0466835498809814!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_3.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_3.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.007180690765380859!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6213968396186829, 0.6862499713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 11us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.007038116455078125!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6182973384857178, 0.6899999976158142, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.523998975753784\n",
      "[root    |INFO|deepbiome.py:193] 4 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------5 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 5 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Number', 'Order', 'Genus', 'Class', 'Family', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 5 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 0s 691us/step - loss: 0.6678 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6395 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 120us/step - loss: 0.6315 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6162 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 128us/step - loss: 0.6303 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6164 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 142us/step - loss: 0.6281 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6181 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6278 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6169 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 0.6276 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6162 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 132us/step - loss: 0.6276 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6169 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 142us/step - loss: 0.6276 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6160 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 134us/step - loss: 0.6269 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6167 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 128us/step - loss: 0.6269 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6168 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 2.678811550140381!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_4.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_4.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008654117584228516!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6248478889465332, 0.6825000047683716, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 8us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.007266044616699219!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6069296002388, 0.7049999833106995, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.0997557640075684\n",
      "[root    |INFO|deepbiome.py:193] 5 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:204] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:205] Train Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure']\n",
      "[root    |INFO|deepbiome.py:206]       mean : [0.61505669 0.69449999 1.         0.         0.        ]\n",
      "[root    |INFO|deepbiome.py:207]        std : [0.01129768 0.01370677 0.         0.         0.        ]\n",
      "[root    |INFO|deepbiome.py:208] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:209] Test Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure']\n",
      "[root    |INFO|deepbiome.py:210]       mean : [0.61745373 0.692      1.         0.         0.        ]\n",
      "[root    |INFO|deepbiome.py:211]        std : [0.01824768 0.02158705 0.         0.         0.        ]\n",
      "[root    |INFO|deepbiome.py:212] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:223] Total Computing Ended\n",
      "[root    |INFO|deepbiome.py:224] -----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "test_evaluation, train_evaluation, network = deepbiome.deepbiome_train(log, network_info, path_info, number_of_fold=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `deepbiome_train` saves the trained model weights, evaluation results and history based on the path information from the configuration.\n",
    "\n",
    "From the example above, we can check that `hist_*.json`, `weight_*.h5`, `test_eval.npy`, `train_eval.npy` files were saved."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['hist_0.json',\n",
       " 'weight_2.h5',\n",
       " 'test_eval.npy',\n",
       " 'weight_0.h5',\n",
       " 'train_eval.npy',\n",
       " 'hist_2.json',\n",
       " 'hist_4.json',\n",
       " 'weight_3.h5',\n",
       " 'hist_3.json',\n",
       " 'weight_1.h5',\n",
       " 'weight_4.h5',\n",
       " 'hist_1.json']"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.listdir(path_info['model_info']['model_dir'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lets check the history files."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYsAAAEKCAYAAADjDHn2AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAIABJREFUeJzt3Xt4VfWd7/H3Nzs3QoAACbcAAhGU\ncA2mqEUUonWwrVwsh0LttNpRW1t7ndqhPZ1px2lnnE6PY2s5fUbb2mlH5VgtiFalN6xVqwIKKEEF\nAUu4E7kHcv2eP9ZO2ImBBLJXVi6f1/PsZ+/9W2v/1jdbXJ+9br9l7o6IiMiZpERdgIiIdHwKCxER\naZHCQkREWqSwEBGRFiksRESkRQoLERFpUahhYWazzOxNM9tiZotPM88CMys1s41m9mBC+/fibZvM\n7IdmZmHWKiIip5caVsdmFgOWAB8AyoDVZrbC3UsT5hkNfB2Y5u4HzWxAvP39wDRgYnzW54ArgGfC\nqldERE4vzC2LqcAWd9/q7lXAUmBOk3luBpa4+0EAd98Xb3cgE0gHMoA0YG+ItYqIyBmEtmUB5AM7\nEt6XARc3mWcMgJk9D8SAb7v70+7+FzNbBewGDPiRu28608Jyc3N9xIgRyapdRKRbWLt27QF3z2tp\nvjDDojVSgdHADGAo8KyZTQBygbHxNoDfmdl0d/9z4ofN7BbgFoDhw4ezZs2a9qpbRKRLMLN3WjNf\nmLuhdgLDEt4PjbclKgNWuHu1u28D3iIIj3nAi+5+zN2PAU8BlzZdgLvf6+7F7l6cl9diMIqIyDkK\nMyxWA6PNbKSZpQMLgRVN5llOsFWBmeUS7JbaCvwVuMLMUs0sjeDg9hl3Q4mISHhCCwt3rwFuA1YS\nrOgfdveNZnaHmc2Oz7YSKDezUmAVcLu7lwOPAG8DrwHrgfXu/nhYtYqIyJlZVxmivLi42HXMQqRr\nqK6upqysjJMnT0ZdSpeRmZnJ0KFDSUtLa9RuZmvdvbilz0d9gFtE5D3Kysro1asXI0aMQNfjtp27\nU15eTllZGSNHjjynPjTch4h0OCdPnqR///4KiiQxM/r379+mLTWFhYh0SAqK5Grr96mwqHgX/vQ9\n2L0+6kpERDoshYWlwDN3QmnTs3pFpLuaOXMmK1eubNR29913c+utt572M9nZ2QDs2rWL+fPnNzvP\njBkzWrx4+O6776aioqLh/Qc/+EEOHTrU2tJDo7DokQNDi+HtP0ZdiYh0EIsWLWLp0qWN2pYuXcqi\nRYta/OyQIUN45JFHznnZTcPiySefJCcn55z7SxaFBUBBCex6NdglJSLd3vz58/nNb35DVVUVANu3\nb2fXrl0UFRVx5ZVXMmXKFCZMmMBjjz32ns9u376d8ePHA3DixAkWLlzI2LFjmTdvHidOnGiY79Zb\nb6W4uJhx48bxrW99C4Af/vCH7Nq1i5kzZzJz5kwARowYwYEDBwC46667GD9+POPHj+fuu+9uWN7Y\nsWO5+eabGTduHFdffXWj5SSLTp2FICye+TfY+gyMvy7qakQkwT8/vpHSXUeS2mfhkN5869pxp53e\nr18/pk6dylNPPcWcOXNYunQpCxYsoEePHixbtozevXtz4MABLrnkEmbPnn3ag8c//vGPycrKYtOm\nTWzYsIEpU6Y0TPvud79Lv379qK2t5corr2TDhg184Qtf4K677mLVqlXk5uY26mvt2rXcf//9vPTS\nS7g7F198MVdccQV9+/Zl8+bNPPTQQ9x3330sWLCARx99lI9//OPJ+bLitGUBMGQKZPTRrigRaZC4\nK6p+F5S7841vfIOJEydy1VVXsXPnTvbuPf3dE5599tmGlfbEiROZOHFiw7SHH36YKVOmUFRUxMaN\nGyktLT1dNwA899xzzJs3j549e5Kdnc11113Hn/8cjK06cuRIJk+eDMBFF13E9u3b2/KnN0tbFgCx\nVBh1Oby9CtxBp+yJdBhn2gII05w5c/jyl7/MK6+8QkVFBRdddBE///nP2b9/P2vXriUtLY0RI0ac\n07UL27Zt4/vf/z6rV6+mb9++3HDDDW26BiIjI6PhdSwWC2U3lLYs6hWUwJEyOLA56kpEpAPIzs5m\n5syZfOpTn2o4sH348GEGDBhAWloaq1at4p13zjy69+WXX86DDwZ3i3799dfZsGEDAEeOHKFnz570\n6dOHvXv38tRTTzV8plevXhw9evQ9fU2fPp3ly5dTUVHB8ePHWbZsGdOnT0/Wn9sibVnUKygJnreu\ngrwx0dYiIh3CokWLmDdvXsPuqOuvv55rr72WCRMmUFxczIUXXnjGz996663ceOONjB07lrFjx3LR\nRRcBMGnSJIqKirjwwgsZNmwY06ZNa/jMLbfcwqxZsxgyZAirVq1qaJ8yZQo33HADU6dOBeCmm26i\n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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f2f1c2c2ba8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "with open('./%s/hist_0.json' % path_info['model_info']['model_dir'], 'r') as f:\n",
    "    history = json.load(f)\n",
    "    \n",
    "plt.plot(history['val_loss'], label='Validation')\n",
    "plt.plot(history['loss'], label='Training')\n",
    "plt.legend()\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Test evauation and train evauation is the numpy array of the shape (number of folds, number of evaluation measures)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.61911052, 0.69      , 1.        , 0.        , 0.        ],\n",
       "       [0.59391123, 0.72000003, 1.        , 0.        , 0.        ],\n",
       "       [0.64901996, 0.65499997, 1.        , 0.        , 0.        ],\n",
       "       [0.61829734, 0.69      , 1.        , 0.        , 0.        ],\n",
       "       [0.6069296 , 0.70499998, 1.        , 0.        , 0.        ]])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.62215579, 0.68624997, 1.        , 0.        , 0.        ],\n",
       "       [0.59390473, 0.72000003, 1.        , 0.        , 0.        ],\n",
       "       [0.61297822, 0.69749999, 1.        , 0.        , 0.        ],\n",
       "       [0.62139684, 0.68624997, 1.        , 0.        , 0.        ],\n",
       "       [0.62484789, 0.6825    , 1.        , 0.        , 0.        ]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_evaluation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Load the pre-trained network for training\n",
    "\n",
    "If you have a pre-trianed model, you warm_start next training using the pre-trained weights by setting the `warm_start` option in `training_info` to `True`. The file path of the pre-trained weights passed in the `warm_start_model` option. Below is the example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "warm_start_network_info = {\n",
    "    'architecture_info': {\n",
    "        'batch_normalization': 'False',\n",
    "        'drop_out': '0',\n",
    "        'weight_initial': 'glorot_uniform',\n",
    "        'weight_l1_penalty':'0.',\n",
    "        'weight_decay': 'phylogenetic_tree',\n",
    "    },\n",
    "    'model_info': {\n",
    "        'decay': '0.001',\n",
    "        'loss': 'binary_crossentropy',\n",
    "        'lr': '0.01',\n",
    "        'metrics': 'binary_accuracy, sensitivity, specificity, gmeasure',\n",
    "        'network_class': 'DeepBiomeNetwork',\n",
    "        'normalizer': 'normalize_minmax',\n",
    "        'optimizer': 'adam',\n",
    "        'reader_class': 'MicroBiomeClassificationReader',\n",
    "        'taxa_selection_metrics': 'sensitivity, specificity, gmeasure, accuracy',\n",
    "    },\n",
    "    'training_info': {\n",
    "        'warm_start':'True',\n",
    "        'warm_start_model':'./example_result/weight.h5',\n",
    "        'epochs': '10',\n",
    "        'batch_size': '50',\n",
    "        'callbacks': 'ModelCheckpoint',\n",
    "        'monitor': 'val_loss',\n",
    "        'mode' : 'min',\n",
    "        'min_delta': '1e-7',\n",
    "    },\n",
    "    'validation_info': {\n",
    "        'batch_size': 'None', \n",
    "        'validation_size': '0.2'\n",
    "    },\n",
    "    'test_info': {\n",
    "        'batch_size': 'None'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:109] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------1 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 1 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Number', 'Order', 'Genus', 'Class', 'Family', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 1 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 0s 749us/step - loss: 0.6261 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6173 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 127us/step - loss: 0.6258 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6161 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6237 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6163 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 134us/step - loss: 0.6241 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6168 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 142us/step - loss: 0.6235 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6163 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 140us/step - loss: 0.6236 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6161 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 145us/step - loss: 0.6238 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6161 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 0.6240 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6164 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6237 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6162 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.6243 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6165 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 2.476621389389038!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_0.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_0.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.00983572006225586!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6222745776176453, 0.6862499713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 9us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008306503295898438!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6191712617874146, 0.6899999976158142, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.0247888565063477\n",
      "[root    |INFO|deepbiome.py:193] 1 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------2 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 2 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Number', 'Order', 'Genus', 'Class', 'Family', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 2 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 876us/step - loss: 0.5986 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5764 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.5973 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5764 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 128us/step - loss: 0.5989 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5793 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 128us/step - loss: 0.5975 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5762 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 0.5974 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5761 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 135us/step - loss: 0.5976 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5775 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 133us/step - loss: 0.5972 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5771 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 151us/step - loss: 0.5971 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5765 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 154us/step - loss: 0.5974 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5763 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 152us/step - loss: 0.5975 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5762 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 2.8588337898254395!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_1.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_1.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 4us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008243799209594727!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.5929388403892517, 0.7200000286102295, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 11us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.009065866470336914!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.5928956270217896, 0.7200000286102295, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.6990058422088623\n",
      "[root    |INFO|deepbiome.py:193] 2 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------3 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 3 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Number', 'Order', 'Genus', 'Class', 'Family', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 3 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 805us/step - loss: 0.6147 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6109 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 145us/step - loss: 0.6140 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6110 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 149us/step - loss: 0.6143 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6111 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 159us/step - loss: 0.6135 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6109 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.6138 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6109 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 133us/step - loss: 0.6137 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6109 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.6138 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6109 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 134us/step - loss: 0.6138 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6109 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 136us/step - loss: 0.6136 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6108 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 140us/step - loss: 0.6144 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6114 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 2.9106016159057617!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_2.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_2.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008742809295654297!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6129348874092102, 0.6974999904632568, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 11us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.00800633430480957!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6489530801773071, 0.6549999713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.6275031566619873\n",
      "[root    |INFO|deepbiome.py:193] 3 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------4 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 4 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Number', 'Order', 'Genus', 'Class', 'Family', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 4 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 0s 721us/step - loss: 0.6220 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6192 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 127us/step - loss: 0.6186 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6164 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 148us/step - loss: 0.6146 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6111 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.6073 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6031 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 124us/step - loss: 0.5945 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5895 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.5762 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5709 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 152us/step - loss: 0.5504 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5499 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 142us/step - loss: 0.5205 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5266 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 142us/step - loss: 0.4857 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.4967 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 149us/step - loss: 0.4558 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.4820 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9207 - val_specificity: 0.3100 - val_gmeasure: 0.5239\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 2.862666130065918!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_3.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_3.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 4us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008836507797241211!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.45141732692718506, 0.7612500190734863, 0.9052823185920715, 0.4462151527404785, 0.6355711817741394]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 11us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.007809877395629883!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.45190781354904175, 0.7649999856948853, 0.8695651888847351, 0.5322580933570862, 0.6803184151649475]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.4595298767089844\n",
      "[root    |INFO|deepbiome.py:193] 4 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------5 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 5 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Number', 'Order', 'Genus', 'Class', 'Family', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      "
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 5 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 848us/step - loss: 0.6281 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6161 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 151us/step - loss: 0.6291 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6160 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 136us/step - loss: 0.6266 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6176 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.6275 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6166 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 142us/step - loss: 0.6272 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6157 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 132us/step - loss: 0.6281 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6169 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 146us/step - loss: 0.6269 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6158 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 130us/step - loss: 0.6272 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6155 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.6275 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6168 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 0.6262 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6159 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 2.8049755096435547!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_4.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_4.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 4us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008693218231201172!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6241195797920227, 0.6825000047683716, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 11us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.007594585418701172!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6063448190689087, 0.7049999833106995, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.668980836868286\n",
      "[root    |INFO|deepbiome.py:193] 5 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:204] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:205] Train Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure']\n",
      "[root    |INFO|deepbiome.py:206]       mean : [0.58073704 0.7095     0.98105646 0.08924303 0.12711424]\n",
      "[root    |INFO|deepbiome.py:207]        std : [0.06559967 0.02898924 0.03788707 0.17848606 0.25422847]\n",
      "[root    |INFO|deepbiome.py:208] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:209] Test Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure']\n",
      "[root    |INFO|deepbiome.py:210]       mean : [0.58385452 0.70699999 0.97391304 0.10645162 0.13606368]\n",
      "[root    |INFO|deepbiome.py:211]        std : [0.06853114 0.03613863 0.05217392 0.21290324 0.27212737]\n",
      "[root    |INFO|deepbiome.py:212] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:223] Total Computing Ended\n",
      "[root    |INFO|deepbiome.py:224] -----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "test_evaluation, train_evaluation, network = deepbiome.deepbiome_train(log, warm_start_network_info, path_info, \n",
    "                                                                       number_of_fold=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's check the history plot again."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f2f1c2c2b00>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "with open('./%s/hist_0.json' % path_info['model_info']['model_dir'], 'r') as f:\n",
    "    history = json.load(f)\n",
    "    \n",
    "plt.plot(history['val_loss'], label='Validation')\n",
    "plt.plot(history['loss'], label='Training')\n",
    "plt.legend()\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. Load the pre-trained network for testing\n",
    "\n",
    "To test the trained model, we can use the `deepbiome_test` function. \n",
    "\n",
    "If you use the index file (`idx_path`), this function provides the evaluation using the test index (index set not included in the index file) for each fold. If not, this function provides the evaluation using the whole samples. \n",
    "\n",
    "If `number_of_fold` is set to `k`, the function will test the model only with first `k` folds.\n",
    "\n",
    "We can use the testing metrics different with the training. In the example below, we additionally used `AUC` metric."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "test_network_info = {\n",
    "    'architecture_info': {\n",
    "        'batch_normalization': 'False',\n",
    "        'drop_out': '0',\n",
    "        'weight_initial': 'glorot_uniform',\n",
    "        'weight_l1_penalty':'0.',\n",
    "        'weight_decay': 'phylogenetic_tree',\n",
    "    },\n",
    "    'model_info': {\n",
    "        'lr': '0.01',\n",
    "        'decay': '0.001',\n",
    "        'loss': 'binary_crossentropy',\n",
    "        'metrics': 'binary_accuracy, sensitivity, specificity, gmeasure, auc',\n",
    "        'taxa_selection_metrics': 'sensitivity, specificity, gmeasure, accuracy',\n",
    "        'network_class': 'DeepBiomeNetwork',\n",
    "        'optimizer': 'adam',\n",
    "        'reader_class': 'MicroBiomeClassificationReader',\n",
    "        'normalizer': 'normalize_minmax',\n",
    "    },\n",
    "    'test_info': {\n",
    "        'batch_size': 'None'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "test_path_info = {\n",
    "    'data_info': {\n",
    "        'data_path': resource_filename('deepbiome', 'tests/data'),\n",
    "        'idx_path': resource_filename('deepbiome', 'tests/data/onefile_idx.csv'),\n",
    "        'tree_info_path': resource_filename('deepbiome', 'tests/data/genus48_dic.csv'),\n",
    "        'x_path': 'onefile_x.csv',\n",
    "        'y_path': 'classification_y.csv'\n",
    "    },\n",
    "    'model_info': {\n",
    "        'evaluation': 'eval.npy',\n",
    "        'model_dir': './example_result/',\n",
    "        'weight': 'weight.h5'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:282] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:314] Test Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure' 'auc']\n",
      "[root    |INFO|deepbiome.py:316] -------1 fold test start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:327] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:328] Build network for 1 fold testing\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Number', 'Order', 'Genus', 'Class', 'Family', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |INFO|deepbiome.py:338] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:339] 1 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 438us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.26784539222717285!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6191712617874146, 0.6899999976158142, 1.0, 0.0, 0.0, 0.5596657395362854]\n",
      "[root    |INFO|deepbiome.py:344] \n",
      "[root    |INFO|deepbiome.py:345] Compute time : 0.852973222732544\n",
      "[root    |INFO|deepbiome.py:346] 1 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:316] -------2 fold test start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:327] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:328] Build network for 2 fold testing\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Number', 'Order', 'Genus', 'Class', 'Family', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |INFO|deepbiome.py:338] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:339] 2 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 431us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.21669673919677734!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.5928956270217896, 0.7200000286102295, 1.0, 0.0, 0.0, 0.5663442611694336]\n",
      "[root    |INFO|deepbiome.py:344] \n",
      "[root    |INFO|deepbiome.py:345] Compute time : 0.8351583480834961\n",
      "[root    |INFO|deepbiome.py:346] 2 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:316] -------3 fold test start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:327] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:328] Build network for 3 fold testing\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Number', 'Order', 'Genus', 'Class', 'Family', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |INFO|deepbiome.py:338] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:339] 3 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 389us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.21296906471252441!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6489530801773071, 0.6549999713897705, 1.0, 0.0, 0.0, 0.5191946029663086]\n",
      "[root    |INFO|deepbiome.py:344] \n",
      "[root    |INFO|deepbiome.py:345] Compute time : 0.813953161239624\n",
      "[root    |INFO|deepbiome.py:346] 3 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:316] -------4 fold test start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:327] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:328] Build network for 4 fold testing\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Number', 'Order', 'Genus', 'Class', 'Family', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |INFO|deepbiome.py:338] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:339] 4 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 463us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.2506601810455322!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.45190781354904175, 0.7649999856948853, 0.8695651888847351, 0.5322580933570862, 0.6803184151649475, 0.8727208971977234]\n",
      "[root    |INFO|deepbiome.py:344] \n",
      "[root    |INFO|deepbiome.py:345] Compute time : 1.0953772068023682\n",
      "[root    |INFO|deepbiome.py:346] 4 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:316] -------5 fold test start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:327] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:328] Build network for 5 fold testing\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Number', 'Order', 'Genus', 'Class', 'Family', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |INFO|deepbiome.py:338] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:339] 5 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 528us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.26012301445007324!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6063448190689087, 0.7049999833106995, 1.0, 0.0, 0.0, 0.7920423150062561]\n",
      "[root    |INFO|deepbiome.py:344] \n",
      "[root    |INFO|deepbiome.py:345] Compute time : 0.8030483722686768\n",
      "[root    |INFO|deepbiome.py:346] 5 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:355] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:356] Test Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure' 'auc']\n",
      "[root    |INFO|deepbiome.py:357]       mean : [0.58385452 0.70699999 0.97391304 0.10645162 0.13606368 0.66199356]\n",
      "[root    |INFO|deepbiome.py:358]        std : [0.06853114 0.03613863 0.05217392 0.21290324 0.27212737 0.1423587 ]\n",
      "[root    |INFO|deepbiome.py:359] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:360] Total Computing Ended\n",
      "[root    |INFO|deepbiome.py:361] -----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "evaluation = deepbiome.deepbiome_test(log, test_network_info, test_path_info, number_of_fold=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This function provides the evaluation result as a numpy array with a shape of (number of folds, number of evaluation measures)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                  loss binary_accuracy     sensitivity     specificity        gmeasure             auc\n",
      "Mean:           0.5839          0.7070          0.9739          0.1065          0.1361          0.6620\n",
      "Std :           0.0685          0.0361          0.0522          0.2129          0.2721          0.1424\n"
     ]
    }
   ],
   "source": [
    "print('      %s' % ''.join(['%16s'%'loss']+ ['%16s'%s.strip() for s in test_network_info['model_info']['metrics'].split(',')]))\n",
    "print('Mean: %s' % ''.join(['%16.4f'%v for v in np.mean(evaluation, axis=0)]))\n",
    "print('Std : %s' % ''.join(['%16.4f'%v for v in np.std(evaluation, axis=0)]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7. Load the pre-trained network for prediction\n",
    "\n",
    "If you want to predict using the pre-trained model, you can use the `deepbiome_prediction` function. If `number_of_fold` is setted as `k`, the function will predict only with first `k` folds sample's outputs. \n",
    "\n",
    "If `change_weight_for_each_fold` is set as `False`, the function will predict the output of every folds by same weight from the given path. If `change_weight_for_each_fold` is set as `True`, the function will predict the output of by each fold weight.\n",
    "\n",
    "If 'get_y=True', the function will provide a list of tuples (prediction, true output) as a output with the shape of `(n_samples, 2, n_classes)`. If 'get_y=False', the function will provide predictions only. The output will have the shape of `(n_samples, n_classes)`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 7.1 Prediction with fixed weight\n",
    "\n",
    "If we want to predict new data from one pre-trained model, we can use the option below. We fixed the weight `weight_0.h5` for predicting the whole samples from `onefile_x.csv` (without using index file)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "prediction_network_info = {\n",
    "    'architecture_info': {\n",
    "        'batch_normalization': 'False',\n",
    "        'drop_out': '0',\n",
    "        'weight_initial': 'glorot_uniform',\n",
    "        'weight_l1_penalty':'0.',\n",
    "        'weight_decay': 'phylogenetic_tree',\n",
    "    },\n",
    "    'model_info': {\n",
    "        'decay': '0.001',\n",
    "        'loss': 'binary_crossentropy',\n",
    "        'lr': '0.01',\n",
    "        'metrics': 'binary_accuracy, sensitivity, specificity, gmeasure, auc',\n",
    "        'network_class': 'DeepBiomeNetwork',\n",
    "        'normalizer': 'normalize_minmax',\n",
    "        'optimizer': 'adam',\n",
    "        'reader_class': 'MicroBiomeClassificationReader',\n",
    "        'taxa_selection_metrics': 'sensitivity, specificity, gmeasure, accuracy',\n",
    "    },\n",
    "    'test_info': {\n",
    "        'batch_size': 'None'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "prediction_path_info = {\n",
    "    'data_info': {\n",
    "        'data_path': resource_filename('deepbiome', 'tests/data'),\n",
    "        'tree_info_path': resource_filename('deepbiome', 'tests/data/genus48_dic.csv'),\n",
    "        'x_path': 'onefile_x.csv',\n",
    "        'y_path': 'classification_y.csv'\n",
    "    },\n",
    "    'model_info': {\n",
    "        'model_dir': './example_result/',\n",
    "        'weight': 'weight_0.h5'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:434] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:464] -------1 th repeatition prediction start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:482] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Number', 'Order', 'Genus', 'Class', 'Family', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |INFO|deepbiome.py:492] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:190] Prediction start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "1000/1000 [==============================] - 0s 34us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:195] Prediction end with time 0.03934288024902344!\n",
      "[root    |INFO|deepbiome.py:496] Compute time : 0.6000196933746338\n",
      "[root    |INFO|deepbiome.py:497] 1 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:502] Total Computing Ended\n",
      "[root    |INFO|deepbiome.py:503] -----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "prediction = deepbiome.deepbiome_prediction(log, prediction_network_info, prediction_path_info,\n",
    "                                            num_classes = 1, number_of_fold=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 1000, 1)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prediction.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.6956292 ],\n",
       "       [0.6956309 ],\n",
       "       [0.6956147 ],\n",
       "       [0.69562495],\n",
       "       [0.69563824],\n",
       "       [0.69563764],\n",
       "       [0.6957126 ],\n",
       "       [0.69563055],\n",
       "       [0.69563365],\n",
       "       [0.6956352 ]], dtype=float32)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prediction[0,:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 7.2 Prediction with each fold weight\n",
    "\n",
    "If we want to predict the cross-validation outputs, we can use the option belows.\n",
    "\n",
    "The example below shows how to predict the 5-fold cross-validation outputs. (If we use the leave-one-out-cross-validation (LOOCV) for training, we can predict the LOOCV outputs by same way.)\n",
    "We set `idx_path` for using the index file `onefile_idx.csv` to predict only the test set for each fold."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "prediction_network_info = {\n",
    "    'architecture_info': {\n",
    "        'batch_normalization': 'False',\n",
    "        'drop_out': '0',\n",
    "        'weight_initial': 'glorot_uniform',\n",
    "        'weight_l1_penalty':'0.',\n",
    "        'weight_decay': 'phylogenetic_tree',\n",
    "    },\n",
    "    'model_info': {\n",
    "        'decay': '0.001',\n",
    "        'loss': 'binary_crossentropy',\n",
    "        'lr': '0.01',\n",
    "        'metrics': 'binary_accuracy, sensitivity, specificity, gmeasure, auc',\n",
    "        'network_class': 'DeepBiomeNetwork',\n",
    "        'normalizer': 'normalize_minmax',\n",
    "        'optimizer': 'adam',\n",
    "        'reader_class': 'MicroBiomeClassificationReader',\n",
    "        'taxa_selection_metrics': 'sensitivity, specificity, gmeasure, accuracy',\n",
    "    },\n",
    "    'test_info': {\n",
    "        'batch_size': 'None'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "prediction_path_info = {\n",
    "    'data_info': {\n",
    "        'data_path': resource_filename('deepbiome', 'tests/data'),\n",
    "        'idx_path': resource_filename('deepbiome', 'tests/data/onefile_idx.csv'),\n",
    "        'tree_info_path': resource_filename('deepbiome', 'tests/data/genus48_dic.csv'),\n",
    "        'x_path': 'onefile_x.csv',\n",
    "        'y_path': 'classification_y.csv'\n",
    "    },\n",
    "    'model_info': {\n",
    "        'model_dir': './example_result/',\n",
    "        'weight': 'weight.h5'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To predict the CV outputs from each fold, we set `change_weight_for_each_fold = True`. Also, we set `get_y=True` to get the paired output of each prediction too."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:434] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:464] -------1 th repeatition prediction start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:482] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Number', 'Order', 'Genus', 'Class', 'Family', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |INFO|deepbiome.py:492] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:190] Prediction start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 231us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:195] Prediction end with time 0.04907584190368652!\n",
      "[root    |INFO|deepbiome.py:496] Compute time : 0.6103453636169434\n",
      "[root    |INFO|deepbiome.py:497] 1 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:464] -------2 th repeatition prediction start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:482] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Number', 'Order', 'Genus', 'Class', 'Family', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_2\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |INFO|deepbiome.py:492] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:190] Prediction start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 314us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:195] Prediction end with time 0.0659644603729248!\n",
      "[root    |INFO|deepbiome.py:496] Compute time : 0.6474456787109375\n",
      "[root    |INFO|deepbiome.py:497] 2 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:464] -------3 th repeatition prediction start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:482] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Number', 'Order', 'Genus', 'Class', 'Family', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_3\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |INFO|deepbiome.py:492] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:190] Prediction start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 362us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:195] Prediction end with time 0.07539796829223633!\n",
      "[root    |INFO|deepbiome.py:496] Compute time : 0.7161211967468262\n",
      "[root    |INFO|deepbiome.py:497] 3 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:464] -------4 th repeatition prediction start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:482] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Number', 'Order', 'Genus', 'Class', 'Family', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_4\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |INFO|deepbiome.py:492] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:190] Prediction start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 489us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:195] Prediction end with time 0.10105490684509277!\n",
      "[root    |INFO|deepbiome.py:496] Compute time : 0.8939824104309082\n",
      "[root    |INFO|deepbiome.py:497] 4 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:464] -------5 th repeatition prediction start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:482] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Number', 'Order', 'Genus', 'Class', 'Family', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_5\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |INFO|deepbiome.py:492] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:190] Prediction start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 551us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:195] Prediction end with time 0.11465167999267578!\n",
      "[root    |INFO|deepbiome.py:496] Compute time : 0.7845683097839355\n",
      "[root    |INFO|deepbiome.py:497] 5 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:502] Total Computing Ended\n",
      "[root    |INFO|deepbiome.py:503] -----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "prediction = deepbiome.deepbiome_prediction(log, prediction_network_info, prediction_path_info,\n",
    "                                            num_classes = 1, number_of_fold=None, \n",
    "                                            change_weight_for_each_fold = True, \n",
    "                                            get_y=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We gathered the outputs from each fold. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "prediction = np.vstack(prediction)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since we set the option `get_y=True`, the output has the shape of `(n_samples, 2, n_classes)`. With this options, we can get the CV predictions and the true output of each predictions.\n",
    "\n",
    "Now, we can calculate the CV performance by the CV predictions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|<ipython-input-39-edc88a58497e>:4] Shape of the predict function output: (1000, 2, 1)\n",
      "[root    |INFO|<ipython-input-39-edc88a58497e>:5] Shape of the prediction: (1000, 1)\n",
      "[root    |INFO|<ipython-input-39-edc88a58497e>:6] Shape of the true_output for each prediction: (1000, 1)\n"
     ]
    }
   ],
   "source": [
    "predict_output = prediction[:,0]\n",
    "true_output = prediction[:,1]\n",
    "\n",
    "log.info('Shape of the predict function output: %s' % str(prediction.shape))\n",
    "log.info('Shape of the prediction: %s' % str(predict_output.shape))\n",
    "log.info('Shape of the true_output for each prediction: %s' % str(true_output.shape))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|<ipython-input-40-ecaee2413087>:1] CV accuracy:  0.707\n"
     ]
    }
   ],
   "source": [
    "log.info('CV accuracy: %6.3f' % np.mean((predict_output >= 0.5) ==  true_output))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 8. Load trained weight matrix\n",
    "\n",
    "The `deepbiome_get_trained_weight` function convert the trained weight `*.h5` saved from the `deepbiome_train` to a list of pandas dataframe.\n",
    "In this exampe, the list has numpy array of weights from 6 layers. (`[genus to family, family to order, order to Class, class to phylum, phylum to output]`)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Number', 'Order', 'Genus', 'Class', 'Family', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|<ipython-input-41-9505ee8dcaa8>:3] 5\n"
     ]
    }
   ],
   "source": [
    "weight_path = '%s/%s' % (path_info['model_info']['model_dir'], 'weight_0.h5')\n",
    "trained_weight_list = deepbiome.deepbiome_get_trained_weight(log, network_info, path_info, num_classes=1, weight_path=weight_path)\n",
    "log.info(len(trained_weight_list))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First weight between the `genus` and `family` layers has the shape of `(number of genus = 48, number of family = 40)`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|<ipython-input-42-c71fa46ab178>:1] (48, 40)\n"
     ]
    }
   ],
   "source": [
    "log.info(trained_weight_list[0].shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Streptococcaceae</th>\n",
       "      <th>Cellulomonadaceae</th>\n",
       "      <th>Veillonellaceae</th>\n",
       "      <th>Actinomycetaceae</th>\n",
       "      <th>Flavobacteriaceae</th>\n",
       "      <th>Prevotellaceae</th>\n",
       "      <th>Porphyromonadaceae</th>\n",
       "      <th>Clostridiales_Incertae_Sedis_XI</th>\n",
       "      <th>Fusobacteriaceae</th>\n",
       "      <th>Propionibacteriaceae</th>\n",
       "      <th>...</th>\n",
       "      <th>Methylobacteriaceae</th>\n",
       "      <th>OD1_genera_incertae_sedis</th>\n",
       "      <th>Microbacteriaceae</th>\n",
       "      <th>Sphingomonadaceae</th>\n",
       "      <th>Bacteroidaceae</th>\n",
       "      <th>Bdellovibrionaceae</th>\n",
       "      <th>Chloroplast</th>\n",
       "      <th>Rhodobacteraceae</th>\n",
       "      <th>Ruminococcaceae</th>\n",
       "      <th>Pseudonocardiaceae</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Streptococcus</th>\n",
       "      <td>-0.167565</td>\n",
       "      <td>0.002195</td>\n",
       "      <td>-0.001613</td>\n",
       "      <td>-0.001291</td>\n",
       "      <td>-0.000152</td>\n",
       "      <td>0.001694</td>\n",
       "      <td>-0.001406</td>\n",
       "      <td>0.000696</td>\n",
       "      <td>0.002533</td>\n",
       "      <td>0.000558</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000261</td>\n",
       "      <td>-0.001707</td>\n",
       "      <td>0.001348</td>\n",
       "      <td>0.000584</td>\n",
       "      <td>0.001965</td>\n",
       "      <td>-0.001962</td>\n",
       "      <td>0.002040</td>\n",
       "      <td>-0.000311</td>\n",
       "      <td>0.000285</td>\n",
       "      <td>0.000085</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tropheryma</th>\n",
       "      <td>0.001391</td>\n",
       "      <td>0.205961</td>\n",
       "      <td>0.000388</td>\n",
       "      <td>-0.001248</td>\n",
       "      <td>0.001989</td>\n",
       "      <td>-0.001397</td>\n",
       "      <td>-0.002496</td>\n",
       "      <td>-0.002541</td>\n",
       "      <td>0.004068</td>\n",
       "      <td>0.000202</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001780</td>\n",
       "      <td>0.002175</td>\n",
       "      <td>-0.000338</td>\n",
       "      <td>0.001892</td>\n",
       "      <td>0.001822</td>\n",
       "      <td>0.002409</td>\n",
       "      <td>0.000820</td>\n",
       "      <td>-0.001740</td>\n",
       "      <td>0.001338</td>\n",
       "      <td>-0.001586</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Veillonella</th>\n",
       "      <td>0.002078</td>\n",
       "      <td>0.000721</td>\n",
       "      <td>0.273976</td>\n",
       "      <td>0.001612</td>\n",
       "      <td>0.001856</td>\n",
       "      <td>-0.001079</td>\n",
       "      <td>0.001857</td>\n",
       "      <td>0.001195</td>\n",
       "      <td>0.003396</td>\n",
       "      <td>-0.001305</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001458</td>\n",
       "      <td>-0.001672</td>\n",
       "      <td>-0.001548</td>\n",
       "      <td>0.001068</td>\n",
       "      <td>0.000309</td>\n",
       "      <td>0.000206</td>\n",
       "      <td>0.000263</td>\n",
       "      <td>0.000642</td>\n",
       "      <td>0.001198</td>\n",
       "      <td>0.000407</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Actinomyces</th>\n",
       "      <td>-0.000073</td>\n",
       "      <td>0.000182</td>\n",
       "      <td>-0.002533</td>\n",
       "      <td>-0.214456</td>\n",
       "      <td>0.000015</td>\n",
       "      <td>0.002604</td>\n",
       "      <td>-0.000985</td>\n",
       "      <td>-0.000080</td>\n",
       "      <td>0.000477</td>\n",
       "      <td>-0.002022</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001322</td>\n",
       "      <td>0.001592</td>\n",
       "      <td>0.000502</td>\n",
       "      <td>0.000230</td>\n",
       "      <td>0.000023</td>\n",
       "      <td>-0.001826</td>\n",
       "      <td>-0.000018</td>\n",
       "      <td>-0.001985</td>\n",
       "      <td>-0.002084</td>\n",
       "      <td>0.001736</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Flavobacterium</th>\n",
       "      <td>-0.001709</td>\n",
       "      <td>0.002258</td>\n",
       "      <td>0.001675</td>\n",
       "      <td>-0.002536</td>\n",
       "      <td>-0.034180</td>\n",
       "      <td>-0.001621</td>\n",
       "      <td>-0.002381</td>\n",
       "      <td>-0.001167</td>\n",
       "      <td>-0.001746</td>\n",
       "      <td>-0.002335</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000198</td>\n",
       "      <td>-0.002026</td>\n",
       "      <td>0.000076</td>\n",
       "      <td>0.000888</td>\n",
       "      <td>0.001960</td>\n",
       "      <td>0.000985</td>\n",
       "      <td>0.000979</td>\n",
       "      <td>-0.001352</td>\n",
       "      <td>0.001772</td>\n",
       "      <td>-0.001700</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Prevotella</th>\n",
       "      <td>0.002545</td>\n",
       "      <td>-0.001497</td>\n",
       "      <td>-0.000716</td>\n",
       "      <td>0.001605</td>\n",
       "      <td>0.002002</td>\n",
       "      <td>-0.046259</td>\n",
       "      <td>0.002571</td>\n",
       "      <td>-0.000076</td>\n",
       "      <td>0.000534</td>\n",
       "      <td>-0.000472</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000632</td>\n",
       "      <td>0.002329</td>\n",
       "      <td>0.002344</td>\n",
       "      <td>-0.001051</td>\n",
       "      <td>0.002463</td>\n",
       "      <td>-0.000367</td>\n",
       "      <td>-0.002352</td>\n",
       "      <td>-0.001860</td>\n",
       "      <td>0.000015</td>\n",
       "      <td>0.001178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Porphyromonas</th>\n",
       "      <td>-0.001428</td>\n",
       "      <td>0.000526</td>\n",
       "      <td>-0.001135</td>\n",
       "      <td>-0.001578</td>\n",
       "      <td>-0.001393</td>\n",
       "      <td>0.001731</td>\n",
       "      <td>-0.007076</td>\n",
       "      <td>-0.001201</td>\n",
       "      <td>-0.002272</td>\n",
       "      <td>-0.001882</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000909</td>\n",
       "      <td>0.001040</td>\n",
       "      <td>-0.002151</td>\n",
       "      <td>-0.001781</td>\n",
       "      <td>-0.002159</td>\n",
       "      <td>-0.001341</td>\n",
       "      <td>-0.001730</td>\n",
       "      <td>0.001988</td>\n",
       "      <td>0.001221</td>\n",
       "      <td>0.001543</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Parvimonas</th>\n",
       "      <td>0.000169</td>\n",
       "      <td>0.002490</td>\n",
       "      <td>0.002449</td>\n",
       "      <td>0.001579</td>\n",
       "      <td>0.001947</td>\n",
       "      <td>-0.000399</td>\n",
       "      <td>0.002061</td>\n",
       "      <td>0.162877</td>\n",
       "      <td>0.002583</td>\n",
       "      <td>-0.000623</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001871</td>\n",
       "      <td>0.000617</td>\n",
       "      <td>-0.002044</td>\n",
       "      <td>0.000204</td>\n",
       "      <td>0.002352</td>\n",
       "      <td>-0.000286</td>\n",
       "      <td>-0.002558</td>\n",
       "      <td>0.000329</td>\n",
       "      <td>-0.001241</td>\n",
       "      <td>0.001066</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fusobacterium</th>\n",
       "      <td>-0.001887</td>\n",
       "      <td>-0.001368</td>\n",
       "      <td>0.000031</td>\n",
       "      <td>0.001716</td>\n",
       "      <td>0.001202</td>\n",
       "      <td>0.000910</td>\n",
       "      <td>0.001658</td>\n",
       "      <td>0.001783</td>\n",
       "      <td>0.367682</td>\n",
       "      <td>-0.001046</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000117</td>\n",
       "      <td>0.001370</td>\n",
       "      <td>-0.001052</td>\n",
       "      <td>0.000791</td>\n",
       "      <td>0.001978</td>\n",
       "      <td>-0.002328</td>\n",
       "      <td>0.001539</td>\n",
       "      <td>0.000145</td>\n",
       "      <td>-0.000636</td>\n",
       "      <td>0.000812</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Propionibacterium</th>\n",
       "      <td>-0.000838</td>\n",
       "      <td>-0.001101</td>\n",
       "      <td>-0.002022</td>\n",
       "      <td>-0.001466</td>\n",
       "      <td>-0.001102</td>\n",
       "      <td>0.002530</td>\n",
       "      <td>0.000437</td>\n",
       "      <td>-0.000522</td>\n",
       "      <td>-0.004150</td>\n",
       "      <td>0.360012</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002028</td>\n",
       "      <td>0.001014</td>\n",
       "      <td>0.002306</td>\n",
       "      <td>0.001570</td>\n",
       "      <td>-0.002191</td>\n",
       "      <td>-0.000255</td>\n",
       "      <td>0.002488</td>\n",
       "      <td>-0.001036</td>\n",
       "      <td>0.000536</td>\n",
       "      <td>0.002116</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gemella</th>\n",
       "      <td>-0.000377</td>\n",
       "      <td>-0.002438</td>\n",
       "      <td>-0.002433</td>\n",
       "      <td>-0.001262</td>\n",
       "      <td>-0.000892</td>\n",
       "      <td>0.002344</td>\n",
       "      <td>-0.000479</td>\n",
       "      <td>0.001075</td>\n",
       "      <td>0.000313</td>\n",
       "      <td>0.001205</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000826</td>\n",
       "      <td>-0.000608</td>\n",
       "      <td>0.000599</td>\n",
       "      <td>-0.000153</td>\n",
       "      <td>0.002235</td>\n",
       "      <td>-0.001636</td>\n",
       "      <td>-0.001188</td>\n",
       "      <td>0.002119</td>\n",
       "      <td>0.001535</td>\n",
       "      <td>-0.000484</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rothia</th>\n",
       "      <td>-0.001943</td>\n",
       "      <td>-0.001166</td>\n",
       "      <td>-0.002548</td>\n",
       "      <td>-0.001209</td>\n",
       "      <td>0.001626</td>\n",
       "      <td>0.001154</td>\n",
       "      <td>0.001089</td>\n",
       "      <td>0.000242</td>\n",
       "      <td>-0.002717</td>\n",
       "      <td>0.002003</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001961</td>\n",
       "      <td>0.001324</td>\n",
       "      <td>0.001988</td>\n",
       "      <td>0.002517</td>\n",
       "      <td>0.000151</td>\n",
       "      <td>0.001898</td>\n",
       "      <td>-0.001933</td>\n",
       "      <td>-0.001216</td>\n",
       "      <td>0.000655</td>\n",
       "      <td>-0.000107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Granulicatella</th>\n",
       "      <td>0.001929</td>\n",
       "      <td>0.002358</td>\n",
       "      <td>0.002162</td>\n",
       "      <td>-0.000562</td>\n",
       "      <td>-0.001896</td>\n",
       "      <td>0.001691</td>\n",
       "      <td>0.000985</td>\n",
       "      <td>0.002188</td>\n",
       "      <td>-0.000351</td>\n",
       "      <td>-0.000035</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001579</td>\n",
       "      <td>0.002324</td>\n",
       "      <td>-0.002393</td>\n",
       "      <td>-0.002426</td>\n",
       "      <td>0.002403</td>\n",
       "      <td>0.001271</td>\n",
       "      <td>-0.002316</td>\n",
       "      <td>-0.002087</td>\n",
       "      <td>0.000956</td>\n",
       "      <td>-0.001132</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Neisseria</th>\n",
       "      <td>-0.000604</td>\n",
       "      <td>0.000921</td>\n",
       "      <td>0.001516</td>\n",
       "      <td>-0.000179</td>\n",
       "      <td>-0.001860</td>\n",
       "      <td>-0.000061</td>\n",
       "      <td>0.000635</td>\n",
       "      <td>0.001101</td>\n",
       "      <td>0.000835</td>\n",
       "      <td>0.001944</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002240</td>\n",
       "      <td>-0.001075</td>\n",
       "      <td>0.000398</td>\n",
       "      <td>-0.001702</td>\n",
       "      <td>0.001062</td>\n",
       "      <td>0.001680</td>\n",
       "      <td>0.001437</td>\n",
       "      <td>0.001202</td>\n",
       "      <td>-0.001100</td>\n",
       "      <td>0.000127</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Lactobacillus</th>\n",
       "      <td>-0.001768</td>\n",
       "      <td>0.002541</td>\n",
       "      <td>-0.002367</td>\n",
       "      <td>-0.001021</td>\n",
       "      <td>-0.000019</td>\n",
       "      <td>0.000111</td>\n",
       "      <td>-0.001488</td>\n",
       "      <td>-0.001137</td>\n",
       "      <td>-0.000672</td>\n",
       "      <td>0.000774</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000333</td>\n",
       "      <td>-0.000380</td>\n",
       "      <td>0.000312</td>\n",
       "      <td>-0.001397</td>\n",
       "      <td>0.001343</td>\n",
       "      <td>0.000791</td>\n",
       "      <td>-0.001139</td>\n",
       "      <td>-0.000129</td>\n",
       "      <td>-0.000731</td>\n",
       "      <td>-0.001204</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Megasphaera</th>\n",
       "      <td>-0.002416</td>\n",
       "      <td>-0.001844</td>\n",
       "      <td>-0.140673</td>\n",
       "      <td>-0.000656</td>\n",
       "      <td>0.001772</td>\n",
       "      <td>-0.001098</td>\n",
       "      <td>-0.002192</td>\n",
       "      <td>-0.001923</td>\n",
       "      <td>-0.000570</td>\n",
       "      <td>-0.000780</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000190</td>\n",
       "      <td>-0.000186</td>\n",
       "      <td>0.000061</td>\n",
       "      <td>-0.002156</td>\n",
       "      <td>0.002533</td>\n",
       "      <td>0.000120</td>\n",
       "      <td>-0.001925</td>\n",
       "      <td>-0.002173</td>\n",
       "      <td>-0.000687</td>\n",
       "      <td>0.001703</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Catonella</th>\n",
       "      <td>0.001347</td>\n",
       "      <td>0.001575</td>\n",
       "      <td>0.000021</td>\n",
       "      <td>-0.000124</td>\n",
       "      <td>-0.000588</td>\n",
       "      <td>-0.000976</td>\n",
       "      <td>-0.000671</td>\n",
       "      <td>-0.000714</td>\n",
       "      <td>-0.000713</td>\n",
       "      <td>0.001766</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.002076</td>\n",
       "      <td>0.001627</td>\n",
       "      <td>0.001089</td>\n",
       "      <td>-0.002581</td>\n",
       "      <td>0.000596</td>\n",
       "      <td>0.000340</td>\n",
       "      <td>-0.001965</td>\n",
       "      <td>-0.001262</td>\n",
       "      <td>0.000065</td>\n",
       "      <td>-0.000224</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Atopobium</th>\n",
       "      <td>-0.000031</td>\n",
       "      <td>0.002301</td>\n",
       "      <td>-0.001241</td>\n",
       "      <td>0.002600</td>\n",
       "      <td>-0.001316</td>\n",
       "      <td>0.001578</td>\n",
       "      <td>-0.000039</td>\n",
       "      <td>0.000202</td>\n",
       "      <td>-0.001449</td>\n",
       "      <td>-0.000497</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000466</td>\n",
       "      <td>-0.002299</td>\n",
       "      <td>0.001475</td>\n",
       "      <td>0.001494</td>\n",
       "      <td>0.000735</td>\n",
       "      <td>-0.002364</td>\n",
       "      <td>0.001926</td>\n",
       "      <td>0.000790</td>\n",
       "      <td>0.002405</td>\n",
       "      <td>0.000699</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Campylobacter</th>\n",
       "      <td>-0.002034</td>\n",
       "      <td>-0.000313</td>\n",
       "      <td>0.000896</td>\n",
       "      <td>0.000595</td>\n",
       "      <td>0.001480</td>\n",
       "      <td>-0.000029</td>\n",
       "      <td>0.001880</td>\n",
       "      <td>0.001074</td>\n",
       "      <td>-0.001763</td>\n",
       "      <td>-0.000101</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001386</td>\n",
       "      <td>-0.000788</td>\n",
       "      <td>-0.001348</td>\n",
       "      <td>0.001867</td>\n",
       "      <td>-0.002528</td>\n",
       "      <td>-0.002098</td>\n",
       "      <td>-0.002439</td>\n",
       "      <td>-0.002365</td>\n",
       "      <td>0.001099</td>\n",
       "      <td>0.000745</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Capnocytophaga</th>\n",
       "      <td>0.000212</td>\n",
       "      <td>0.000227</td>\n",
       "      <td>0.000033</td>\n",
       "      <td>0.001713</td>\n",
       "      <td>0.015738</td>\n",
       "      <td>-0.000932</td>\n",
       "      <td>0.001026</td>\n",
       "      <td>0.001606</td>\n",
       "      <td>-0.001489</td>\n",
       "      <td>-0.001931</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000741</td>\n",
       "      <td>-0.000526</td>\n",
       "      <td>0.002561</td>\n",
       "      <td>0.000053</td>\n",
       "      <td>-0.001714</td>\n",
       "      <td>0.001446</td>\n",
       "      <td>0.000473</td>\n",
       "      <td>0.000216</td>\n",
       "      <td>0.000433</td>\n",
       "      <td>0.001291</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Solobacterium</th>\n",
       "      <td>-0.000012</td>\n",
       "      <td>0.000116</td>\n",
       "      <td>-0.001072</td>\n",
       "      <td>-0.001508</td>\n",
       "      <td>-0.001086</td>\n",
       "      <td>0.001927</td>\n",
       "      <td>-0.001100</td>\n",
       "      <td>-0.001826</td>\n",
       "      <td>-0.000267</td>\n",
       "      <td>-0.002488</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001353</td>\n",
       "      <td>-0.000664</td>\n",
       "      <td>-0.001313</td>\n",
       "      <td>-0.001586</td>\n",
       "      <td>-0.000225</td>\n",
       "      <td>-0.001204</td>\n",
       "      <td>0.001233</td>\n",
       "      <td>0.000949</td>\n",
       "      <td>0.000059</td>\n",
       "      <td>0.000635</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Moryella</th>\n",
       "      <td>0.000210</td>\n",
       "      <td>-0.001507</td>\n",
       "      <td>-0.002102</td>\n",
       "      <td>0.002230</td>\n",
       "      <td>0.000480</td>\n",
       "      <td>-0.001331</td>\n",
       "      <td>0.002145</td>\n",
       "      <td>0.001883</td>\n",
       "      <td>0.002387</td>\n",
       "      <td>-0.002531</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.002371</td>\n",
       "      <td>-0.000209</td>\n",
       "      <td>0.000108</td>\n",
       "      <td>-0.002150</td>\n",
       "      <td>-0.001084</td>\n",
       "      <td>-0.000659</td>\n",
       "      <td>0.001566</td>\n",
       "      <td>0.001043</td>\n",
       "      <td>-0.001763</td>\n",
       "      <td>0.001563</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TM7_genera_incertae_sedis</th>\n",
       "      <td>0.000712</td>\n",
       "      <td>-0.000604</td>\n",
       "      <td>0.000707</td>\n",
       "      <td>0.001115</td>\n",
       "      <td>0.002551</td>\n",
       "      <td>0.002555</td>\n",
       "      <td>-0.001316</td>\n",
       "      <td>-0.000007</td>\n",
       "      <td>-0.003253</td>\n",
       "      <td>0.001236</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000659</td>\n",
       "      <td>-0.000155</td>\n",
       "      <td>0.000298</td>\n",
       "      <td>0.000118</td>\n",
       "      <td>-0.000171</td>\n",
       "      <td>-0.001651</td>\n",
       "      <td>-0.000433</td>\n",
       "      <td>0.001617</td>\n",
       "      <td>0.000509</td>\n",
       "      <td>0.001289</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Staphylococcus</th>\n",
       "      <td>-0.000704</td>\n",
       "      <td>0.002360</td>\n",
       "      <td>0.002488</td>\n",
       "      <td>0.002180</td>\n",
       "      <td>-0.002440</td>\n",
       "      <td>-0.002013</td>\n",
       "      <td>-0.000979</td>\n",
       "      <td>0.000796</td>\n",
       "      <td>0.002160</td>\n",
       "      <td>-0.001924</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001020</td>\n",
       "      <td>-0.002580</td>\n",
       "      <td>-0.001799</td>\n",
       "      <td>-0.001794</td>\n",
       "      <td>0.000792</td>\n",
       "      <td>0.002005</td>\n",
       "      <td>0.001276</td>\n",
       "      <td>0.001721</td>\n",
       "      <td>-0.000263</td>\n",
       "      <td>-0.002153</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Filifactor</th>\n",
       "      <td>0.000229</td>\n",
       "      <td>0.002186</td>\n",
       "      <td>0.002586</td>\n",
       "      <td>0.001613</td>\n",
       "      <td>0.001484</td>\n",
       "      <td>0.001440</td>\n",
       "      <td>0.001484</td>\n",
       "      <td>-0.001894</td>\n",
       "      <td>0.002035</td>\n",
       "      <td>0.000381</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001333</td>\n",
       "      <td>-0.001208</td>\n",
       "      <td>-0.000982</td>\n",
       "      <td>-0.002375</td>\n",
       "      <td>0.002561</td>\n",
       "      <td>-0.001601</td>\n",
       "      <td>-0.001666</td>\n",
       "      <td>-0.001704</td>\n",
       "      <td>0.001095</td>\n",
       "      <td>-0.000059</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Oribacterium</th>\n",
       "      <td>0.001742</td>\n",
       "      <td>0.001013</td>\n",
       "      <td>0.001983</td>\n",
       "      <td>0.000613</td>\n",
       "      <td>-0.002151</td>\n",
       "      <td>0.000346</td>\n",
       "      <td>-0.001459</td>\n",
       "      <td>-0.001889</td>\n",
       "      <td>0.004341</td>\n",
       "      <td>-0.000894</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001969</td>\n",
       "      <td>0.000417</td>\n",
       "      <td>0.001975</td>\n",
       "      <td>0.001378</td>\n",
       "      <td>0.002440</td>\n",
       "      <td>0.002143</td>\n",
       "      <td>0.000105</td>\n",
       "      <td>0.001872</td>\n",
       "      <td>0.002369</td>\n",
       "      <td>0.000459</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Burkholderia</th>\n",
       "      <td>-0.001113</td>\n",
       "      <td>0.001051</td>\n",
       "      <td>-0.000375</td>\n",
       "      <td>-0.000538</td>\n",
       "      <td>-0.002083</td>\n",
       "      <td>-0.001690</td>\n",
       "      <td>0.000568</td>\n",
       "      <td>-0.001436</td>\n",
       "      <td>0.001374</td>\n",
       "      <td>0.000073</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000025</td>\n",
       "      <td>-0.000069</td>\n",
       "      <td>0.000652</td>\n",
       "      <td>-0.000529</td>\n",
       "      <td>-0.000848</td>\n",
       "      <td>0.000771</td>\n",
       "      <td>-0.000358</td>\n",
       "      <td>0.000629</td>\n",
       "      <td>-0.000596</td>\n",
       "      <td>-0.000588</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sneathia</th>\n",
       "      <td>0.000119</td>\n",
       "      <td>-0.002306</td>\n",
       "      <td>-0.000513</td>\n",
       "      <td>0.001148</td>\n",
       "      <td>0.002001</td>\n",
       "      <td>0.001632</td>\n",
       "      <td>-0.000713</td>\n",
       "      <td>0.002152</td>\n",
       "      <td>-0.002173</td>\n",
       "      <td>-0.000588</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000530</td>\n",
       "      <td>-0.001095</td>\n",
       "      <td>0.000528</td>\n",
       "      <td>0.002546</td>\n",
       "      <td>0.002105</td>\n",
       "      <td>-0.002192</td>\n",
       "      <td>-0.002353</td>\n",
       "      <td>-0.002084</td>\n",
       "      <td>0.001843</td>\n",
       "      <td>-0.002247</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Treponema</th>\n",
       "      <td>-0.000898</td>\n",
       "      <td>0.002315</td>\n",
       "      <td>0.002262</td>\n",
       "      <td>0.001407</td>\n",
       "      <td>-0.000203</td>\n",
       "      <td>-0.001792</td>\n",
       "      <td>0.000554</td>\n",
       "      <td>-0.000389</td>\n",
       "      <td>-0.000903</td>\n",
       "      <td>0.002579</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000511</td>\n",
       "      <td>0.000087</td>\n",
       "      <td>0.000301</td>\n",
       "      <td>0.001801</td>\n",
       "      <td>-0.001159</td>\n",
       "      <td>-0.002187</td>\n",
       "      <td>-0.001884</td>\n",
       "      <td>-0.001560</td>\n",
       "      <td>0.001314</td>\n",
       "      <td>0.000234</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Moraxella</th>\n",
       "      <td>0.001910</td>\n",
       "      <td>-0.000589</td>\n",
       "      <td>0.001839</td>\n",
       "      <td>0.001901</td>\n",
       "      <td>-0.002556</td>\n",
       "      <td>-0.000587</td>\n",
       "      <td>-0.002156</td>\n",
       "      <td>0.001612</td>\n",
       "      <td>0.001929</td>\n",
       "      <td>-0.002334</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000456</td>\n",
       "      <td>-0.002503</td>\n",
       "      <td>-0.001302</td>\n",
       "      <td>-0.001850</td>\n",
       "      <td>0.000100</td>\n",
       "      <td>0.000254</td>\n",
       "      <td>-0.002239</td>\n",
       "      <td>-0.001552</td>\n",
       "      <td>-0.000950</td>\n",
       "      <td>-0.001120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Haemophilus</th>\n",
       "      <td>0.001566</td>\n",
       "      <td>-0.001105</td>\n",
       "      <td>0.000043</td>\n",
       "      <td>-0.000068</td>\n",
       "      <td>0.002092</td>\n",
       "      <td>-0.001827</td>\n",
       "      <td>-0.001205</td>\n",
       "      <td>0.001924</td>\n",
       "      <td>0.002741</td>\n",
       "      <td>0.001409</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000362</td>\n",
       "      <td>0.000371</td>\n",
       "      <td>0.000506</td>\n",
       "      <td>-0.002298</td>\n",
       "      <td>-0.001292</td>\n",
       "      <td>0.001362</td>\n",
       "      <td>-0.000902</td>\n",
       "      <td>0.002541</td>\n",
       "      <td>0.001950</td>\n",
       "      <td>-0.001124</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Selenomonas</th>\n",
       "      <td>-0.002249</td>\n",
       "      <td>0.002055</td>\n",
       "      <td>-0.069113</td>\n",
       "      <td>0.002041</td>\n",
       "      <td>-0.002239</td>\n",
       "      <td>0.001235</td>\n",
       "      <td>0.002303</td>\n",
       "      <td>-0.000485</td>\n",
       "      <td>0.003058</td>\n",
       "      <td>-0.000475</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000541</td>\n",
       "      <td>0.002548</td>\n",
       "      <td>0.001348</td>\n",
       "      <td>-0.002299</td>\n",
       "      <td>0.001195</td>\n",
       "      <td>-0.000053</td>\n",
       "      <td>-0.000553</td>\n",
       "      <td>0.002129</td>\n",
       "      <td>0.002438</td>\n",
       "      <td>0.001561</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Corynebacterium</th>\n",
       "      <td>-0.000197</td>\n",
       "      <td>0.000707</td>\n",
       "      <td>0.001848</td>\n",
       "      <td>0.002173</td>\n",
       "      <td>0.001439</td>\n",
       "      <td>-0.000648</td>\n",
       "      <td>0.001549</td>\n",
       "      <td>-0.000750</td>\n",
       "      <td>-0.002864</td>\n",
       "      <td>-0.001015</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001745</td>\n",
       "      <td>0.000089</td>\n",
       "      <td>-0.001984</td>\n",
       "      <td>-0.001706</td>\n",
       "      <td>-0.001798</td>\n",
       "      <td>-0.002473</td>\n",
       "      <td>0.001748</td>\n",
       "      <td>0.001999</td>\n",
       "      <td>0.000999</td>\n",
       "      <td>-0.000008</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rhizobium</th>\n",
       "      <td>-0.000058</td>\n",
       "      <td>0.002018</td>\n",
       "      <td>-0.001170</td>\n",
       "      <td>-0.000701</td>\n",
       "      <td>0.001618</td>\n",
       "      <td>-0.001270</td>\n",
       "      <td>0.000484</td>\n",
       "      <td>-0.000343</td>\n",
       "      <td>-0.002284</td>\n",
       "      <td>-0.002074</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.002606</td>\n",
       "      <td>0.002110</td>\n",
       "      <td>0.001363</td>\n",
       "      <td>0.000943</td>\n",
       "      <td>-0.001308</td>\n",
       "      <td>0.001681</td>\n",
       "      <td>0.000775</td>\n",
       "      <td>-0.002370</td>\n",
       "      <td>0.000029</td>\n",
       "      <td>-0.001192</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bradyrhizobium</th>\n",
       "      <td>-0.001393</td>\n",
       "      <td>0.000365</td>\n",
       "      <td>-0.002448</td>\n",
       "      <td>-0.001915</td>\n",
       "      <td>-0.002469</td>\n",
       "      <td>-0.002249</td>\n",
       "      <td>0.002241</td>\n",
       "      <td>0.001458</td>\n",
       "      <td>0.000545</td>\n",
       "      <td>0.002445</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000747</td>\n",
       "      <td>0.002607</td>\n",
       "      <td>0.001813</td>\n",
       "      <td>0.000682</td>\n",
       "      <td>0.001224</td>\n",
       "      <td>0.001836</td>\n",
       "      <td>-0.001339</td>\n",
       "      <td>0.002341</td>\n",
       "      <td>-0.000434</td>\n",
       "      <td>-0.001161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Methylobacterium</th>\n",
       "      <td>0.000476</td>\n",
       "      <td>0.000382</td>\n",
       "      <td>0.001468</td>\n",
       "      <td>-0.002064</td>\n",
       "      <td>0.000870</td>\n",
       "      <td>0.000457</td>\n",
       "      <td>-0.000720</td>\n",
       "      <td>-0.001096</td>\n",
       "      <td>-0.001761</td>\n",
       "      <td>0.001658</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.223489</td>\n",
       "      <td>-0.002337</td>\n",
       "      <td>0.000508</td>\n",
       "      <td>-0.002275</td>\n",
       "      <td>-0.002417</td>\n",
       "      <td>-0.001824</td>\n",
       "      <td>0.001786</td>\n",
       "      <td>0.000024</td>\n",
       "      <td>0.001207</td>\n",
       "      <td>-0.001446</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OD1_genera_incertae_sedis</th>\n",
       "      <td>-0.000103</td>\n",
       "      <td>0.002315</td>\n",
       "      <td>0.000917</td>\n",
       "      <td>-0.002599</td>\n",
       "      <td>0.000950</td>\n",
       "      <td>0.000381</td>\n",
       "      <td>0.002594</td>\n",
       "      <td>-0.000394</td>\n",
       "      <td>-0.001202</td>\n",
       "      <td>0.000401</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000319</td>\n",
       "      <td>0.269370</td>\n",
       "      <td>-0.002191</td>\n",
       "      <td>-0.002471</td>\n",
       "      <td>-0.000413</td>\n",
       "      <td>-0.002307</td>\n",
       "      <td>0.000066</td>\n",
       "      <td>-0.000497</td>\n",
       "      <td>0.000537</td>\n",
       "      <td>0.000572</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Finegoldia</th>\n",
       "      <td>-0.002586</td>\n",
       "      <td>-0.002147</td>\n",
       "      <td>-0.001248</td>\n",
       "      <td>-0.001146</td>\n",
       "      <td>-0.001926</td>\n",
       "      <td>0.000676</td>\n",
       "      <td>0.002550</td>\n",
       "      <td>0.046401</td>\n",
       "      <td>-0.001612</td>\n",
       "      <td>0.002376</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000215</td>\n",
       "      <td>-0.001868</td>\n",
       "      <td>0.000580</td>\n",
       "      <td>-0.002328</td>\n",
       "      <td>-0.002285</td>\n",
       "      <td>0.000301</td>\n",
       "      <td>0.000306</td>\n",
       "      <td>-0.000650</td>\n",
       "      <td>-0.002238</td>\n",
       "      <td>0.001805</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Microbacterium</th>\n",
       "      <td>0.002431</td>\n",
       "      <td>-0.002318</td>\n",
       "      <td>-0.002374</td>\n",
       "      <td>-0.001539</td>\n",
       "      <td>0.002190</td>\n",
       "      <td>-0.001281</td>\n",
       "      <td>0.001610</td>\n",
       "      <td>-0.001672</td>\n",
       "      <td>-0.002799</td>\n",
       "      <td>0.001627</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002256</td>\n",
       "      <td>-0.000258</td>\n",
       "      <td>-0.172076</td>\n",
       "      <td>-0.001036</td>\n",
       "      <td>0.000165</td>\n",
       "      <td>0.000179</td>\n",
       "      <td>0.002286</td>\n",
       "      <td>0.002216</td>\n",
       "      <td>0.001394</td>\n",
       "      <td>0.000289</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sphingomonas</th>\n",
       "      <td>0.002512</td>\n",
       "      <td>-0.000242</td>\n",
       "      <td>0.001247</td>\n",
       "      <td>0.000272</td>\n",
       "      <td>-0.000559</td>\n",
       "      <td>0.000829</td>\n",
       "      <td>-0.001522</td>\n",
       "      <td>0.000386</td>\n",
       "      <td>-0.003307</td>\n",
       "      <td>0.001414</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.002012</td>\n",
       "      <td>-0.002129</td>\n",
       "      <td>-0.002125</td>\n",
       "      <td>0.177304</td>\n",
       "      <td>-0.002101</td>\n",
       "      <td>0.000112</td>\n",
       "      <td>0.001547</td>\n",
       "      <td>-0.000583</td>\n",
       "      <td>-0.001040</td>\n",
       "      <td>0.002486</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chryseobacterium</th>\n",
       "      <td>-0.000245</td>\n",
       "      <td>-0.000075</td>\n",
       "      <td>0.001383</td>\n",
       "      <td>0.001765</td>\n",
       "      <td>-0.181225</td>\n",
       "      <td>0.001807</td>\n",
       "      <td>-0.000789</td>\n",
       "      <td>-0.000108</td>\n",
       "      <td>0.001070</td>\n",
       "      <td>0.002106</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001769</td>\n",
       "      <td>0.000943</td>\n",
       "      <td>-0.002326</td>\n",
       "      <td>-0.002590</td>\n",
       "      <td>0.000576</td>\n",
       "      <td>0.000573</td>\n",
       "      <td>0.001299</td>\n",
       "      <td>0.002024</td>\n",
       "      <td>0.000819</td>\n",
       "      <td>0.001262</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bacteroides</th>\n",
       "      <td>0.002017</td>\n",
       "      <td>0.001948</td>\n",
       "      <td>0.000789</td>\n",
       "      <td>-0.001456</td>\n",
       "      <td>-0.001062</td>\n",
       "      <td>-0.001063</td>\n",
       "      <td>0.000030</td>\n",
       "      <td>-0.002524</td>\n",
       "      <td>-0.000598</td>\n",
       "      <td>0.000632</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001122</td>\n",
       "      <td>-0.001924</td>\n",
       "      <td>-0.000383</td>\n",
       "      <td>-0.001038</td>\n",
       "      <td>-0.140940</td>\n",
       "      <td>-0.000643</td>\n",
       "      <td>0.001807</td>\n",
       "      <td>0.000195</td>\n",
       "      <td>-0.000892</td>\n",
       "      <td>0.002029</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bdellovibrio</th>\n",
       "      <td>0.001808</td>\n",
       "      <td>-0.000472</td>\n",
       "      <td>0.002173</td>\n",
       "      <td>-0.001133</td>\n",
       "      <td>-0.001867</td>\n",
       "      <td>0.000437</td>\n",
       "      <td>0.000350</td>\n",
       "      <td>0.001021</td>\n",
       "      <td>-0.001085</td>\n",
       "      <td>-0.001141</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001068</td>\n",
       "      <td>-0.000155</td>\n",
       "      <td>-0.000076</td>\n",
       "      <td>-0.001636</td>\n",
       "      <td>-0.000505</td>\n",
       "      <td>0.159111</td>\n",
       "      <td>0.000851</td>\n",
       "      <td>-0.000148</td>\n",
       "      <td>-0.002231</td>\n",
       "      <td>0.001149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Streptophyta</th>\n",
       "      <td>-0.001189</td>\n",
       "      <td>0.000584</td>\n",
       "      <td>0.000867</td>\n",
       "      <td>0.000830</td>\n",
       "      <td>0.000402</td>\n",
       "      <td>0.001934</td>\n",
       "      <td>0.001250</td>\n",
       "      <td>-0.001135</td>\n",
       "      <td>0.001718</td>\n",
       "      <td>-0.000459</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001599</td>\n",
       "      <td>0.001320</td>\n",
       "      <td>0.001656</td>\n",
       "      <td>-0.001817</td>\n",
       "      <td>-0.002612</td>\n",
       "      <td>-0.002261</td>\n",
       "      <td>-0.134328</td>\n",
       "      <td>0.002426</td>\n",
       "      <td>-0.000353</td>\n",
       "      <td>0.000903</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Lachnospiracea_incertae_sedis</th>\n",
       "      <td>-0.000302</td>\n",
       "      <td>-0.001902</td>\n",
       "      <td>0.001625</td>\n",
       "      <td>0.000324</td>\n",
       "      <td>-0.000075</td>\n",
       "      <td>0.002225</td>\n",
       "      <td>-0.000488</td>\n",
       "      <td>-0.002530</td>\n",
       "      <td>0.002659</td>\n",
       "      <td>-0.002313</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000978</td>\n",
       "      <td>0.000307</td>\n",
       "      <td>0.001316</td>\n",
       "      <td>0.000019</td>\n",
       "      <td>0.000443</td>\n",
       "      <td>0.001293</td>\n",
       "      <td>0.001144</td>\n",
       "      <td>-0.001872</td>\n",
       "      <td>0.001912</td>\n",
       "      <td>0.000064</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Paracoccus</th>\n",
       "      <td>-0.000208</td>\n",
       "      <td>0.000375</td>\n",
       "      <td>-0.000478</td>\n",
       "      <td>0.000252</td>\n",
       "      <td>0.002052</td>\n",
       "      <td>0.001912</td>\n",
       "      <td>-0.001856</td>\n",
       "      <td>-0.001407</td>\n",
       "      <td>0.000153</td>\n",
       "      <td>0.001567</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000536</td>\n",
       "      <td>0.001187</td>\n",
       "      <td>0.001924</td>\n",
       "      <td>-0.000744</td>\n",
       "      <td>0.000542</td>\n",
       "      <td>-0.002226</td>\n",
       "      <td>0.001986</td>\n",
       "      <td>0.212551</td>\n",
       "      <td>0.001111</td>\n",
       "      <td>-0.001635</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fastidiosipila</th>\n",
       "      <td>0.001133</td>\n",
       "      <td>-0.002327</td>\n",
       "      <td>0.002242</td>\n",
       "      <td>0.001024</td>\n",
       "      <td>-0.001190</td>\n",
       "      <td>-0.000391</td>\n",
       "      <td>0.000179</td>\n",
       "      <td>0.001405</td>\n",
       "      <td>0.001928</td>\n",
       "      <td>0.002180</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.002398</td>\n",
       "      <td>0.001066</td>\n",
       "      <td>0.002511</td>\n",
       "      <td>0.000173</td>\n",
       "      <td>-0.001331</td>\n",
       "      <td>-0.002564</td>\n",
       "      <td>-0.002293</td>\n",
       "      <td>0.001536</td>\n",
       "      <td>0.147338</td>\n",
       "      <td>0.001595</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pseudonocardia</th>\n",
       "      <td>0.000188</td>\n",
       "      <td>-0.000954</td>\n",
       "      <td>0.001029</td>\n",
       "      <td>0.002325</td>\n",
       "      <td>-0.001137</td>\n",
       "      <td>0.001461</td>\n",
       "      <td>0.000084</td>\n",
       "      <td>-0.001378</td>\n",
       "      <td>0.002072</td>\n",
       "      <td>-0.001761</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000568</td>\n",
       "      <td>-0.000422</td>\n",
       "      <td>-0.001855</td>\n",
       "      <td>-0.002070</td>\n",
       "      <td>0.001699</td>\n",
       "      <td>0.000970</td>\n",
       "      <td>-0.001436</td>\n",
       "      <td>0.000166</td>\n",
       "      <td>-0.001651</td>\n",
       "      <td>0.209231</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>48 rows × 40 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                               Streptococcaceae  Cellulomonadaceae  \\\n",
       "Streptococcus                         -0.167565           0.002195   \n",
       "Tropheryma                             0.001391           0.205961   \n",
       "Veillonella                            0.002078           0.000721   \n",
       "Actinomyces                           -0.000073           0.000182   \n",
       "Flavobacterium                        -0.001709           0.002258   \n",
       "Prevotella                             0.002545          -0.001497   \n",
       "Porphyromonas                         -0.001428           0.000526   \n",
       "Parvimonas                             0.000169           0.002490   \n",
       "Fusobacterium                         -0.001887          -0.001368   \n",
       "Propionibacterium                     -0.000838          -0.001101   \n",
       "Gemella                               -0.000377          -0.002438   \n",
       "Rothia                                -0.001943          -0.001166   \n",
       "Granulicatella                         0.001929           0.002358   \n",
       "Neisseria                             -0.000604           0.000921   \n",
       "Lactobacillus                         -0.001768           0.002541   \n",
       "Megasphaera                           -0.002416          -0.001844   \n",
       "Catonella                              0.001347           0.001575   \n",
       "Atopobium                             -0.000031           0.002301   \n",
       "Campylobacter                         -0.002034          -0.000313   \n",
       "Capnocytophaga                         0.000212           0.000227   \n",
       "Solobacterium                         -0.000012           0.000116   \n",
       "Moryella                               0.000210          -0.001507   \n",
       "TM7_genera_incertae_sedis              0.000712          -0.000604   \n",
       "Staphylococcus                        -0.000704           0.002360   \n",
       "Filifactor                             0.000229           0.002186   \n",
       "Oribacterium                           0.001742           0.001013   \n",
       "Burkholderia                          -0.001113           0.001051   \n",
       "Sneathia                               0.000119          -0.002306   \n",
       "Treponema                             -0.000898           0.002315   \n",
       "Moraxella                              0.001910          -0.000589   \n",
       "Haemophilus                            0.001566          -0.001105   \n",
       "Selenomonas                           -0.002249           0.002055   \n",
       "Corynebacterium                       -0.000197           0.000707   \n",
       "Rhizobium                             -0.000058           0.002018   \n",
       "Bradyrhizobium                        -0.001393           0.000365   \n",
       "Methylobacterium                       0.000476           0.000382   \n",
       "OD1_genera_incertae_sedis             -0.000103           0.002315   \n",
       "Finegoldia                            -0.002586          -0.002147   \n",
       "Microbacterium                         0.002431          -0.002318   \n",
       "Sphingomonas                           0.002512          -0.000242   \n",
       "Chryseobacterium                      -0.000245          -0.000075   \n",
       "Bacteroides                            0.002017           0.001948   \n",
       "Bdellovibrio                           0.001808          -0.000472   \n",
       "Streptophyta                          -0.001189           0.000584   \n",
       "Lachnospiracea_incertae_sedis         -0.000302          -0.001902   \n",
       "Paracoccus                            -0.000208           0.000375   \n",
       "Fastidiosipila                         0.001133          -0.002327   \n",
       "Pseudonocardia                         0.000188          -0.000954   \n",
       "\n",
       "                               Veillonellaceae  Actinomycetaceae  \\\n",
       "Streptococcus                        -0.001613         -0.001291   \n",
       "Tropheryma                            0.000388         -0.001248   \n",
       "Veillonella                           0.273976          0.001612   \n",
       "Actinomyces                          -0.002533         -0.214456   \n",
       "Flavobacterium                        0.001675         -0.002536   \n",
       "Prevotella                           -0.000716          0.001605   \n",
       "Porphyromonas                        -0.001135         -0.001578   \n",
       "Parvimonas                            0.002449          0.001579   \n",
       "Fusobacterium                         0.000031          0.001716   \n",
       "Propionibacterium                    -0.002022         -0.001466   \n",
       "Gemella                              -0.002433         -0.001262   \n",
       "Rothia                               -0.002548         -0.001209   \n",
       "Granulicatella                        0.002162         -0.000562   \n",
       "Neisseria                             0.001516         -0.000179   \n",
       "Lactobacillus                        -0.002367         -0.001021   \n",
       "Megasphaera                          -0.140673         -0.000656   \n",
       "Catonella                             0.000021         -0.000124   \n",
       "Atopobium                            -0.001241          0.002600   \n",
       "Campylobacter                         0.000896          0.000595   \n",
       "Capnocytophaga                        0.000033          0.001713   \n",
       "Solobacterium                        -0.001072         -0.001508   \n",
       "Moryella                             -0.002102          0.002230   \n",
       "TM7_genera_incertae_sedis             0.000707          0.001115   \n",
       "Staphylococcus                        0.002488          0.002180   \n",
       "Filifactor                            0.002586          0.001613   \n",
       "Oribacterium                          0.001983          0.000613   \n",
       "Burkholderia                         -0.000375         -0.000538   \n",
       "Sneathia                             -0.000513          0.001148   \n",
       "Treponema                             0.002262          0.001407   \n",
       "Moraxella                             0.001839          0.001901   \n",
       "Haemophilus                           0.000043         -0.000068   \n",
       "Selenomonas                          -0.069113          0.002041   \n",
       "Corynebacterium                       0.001848          0.002173   \n",
       "Rhizobium                            -0.001170         -0.000701   \n",
       "Bradyrhizobium                       -0.002448         -0.001915   \n",
       "Methylobacterium                      0.001468         -0.002064   \n",
       "OD1_genera_incertae_sedis             0.000917         -0.002599   \n",
       "Finegoldia                           -0.001248         -0.001146   \n",
       "Microbacterium                       -0.002374         -0.001539   \n",
       "Sphingomonas                          0.001247          0.000272   \n",
       "Chryseobacterium                      0.001383          0.001765   \n",
       "Bacteroides                           0.000789         -0.001456   \n",
       "Bdellovibrio                          0.002173         -0.001133   \n",
       "Streptophyta                          0.000867          0.000830   \n",
       "Lachnospiracea_incertae_sedis         0.001625          0.000324   \n",
       "Paracoccus                           -0.000478          0.000252   \n",
       "Fastidiosipila                        0.002242          0.001024   \n",
       "Pseudonocardia                        0.001029          0.002325   \n",
       "\n",
       "                               Flavobacteriaceae  Prevotellaceae  \\\n",
       "Streptococcus                          -0.000152        0.001694   \n",
       "Tropheryma                              0.001989       -0.001397   \n",
       "Veillonella                             0.001856       -0.001079   \n",
       "Actinomyces                             0.000015        0.002604   \n",
       "Flavobacterium                         -0.034180       -0.001621   \n",
       "Prevotella                              0.002002       -0.046259   \n",
       "Porphyromonas                          -0.001393        0.001731   \n",
       "Parvimonas                              0.001947       -0.000399   \n",
       "Fusobacterium                           0.001202        0.000910   \n",
       "Propionibacterium                      -0.001102        0.002530   \n",
       "Gemella                                -0.000892        0.002344   \n",
       "Rothia                                  0.001626        0.001154   \n",
       "Granulicatella                         -0.001896        0.001691   \n",
       "Neisseria                              -0.001860       -0.000061   \n",
       "Lactobacillus                          -0.000019        0.000111   \n",
       "Megasphaera                             0.001772       -0.001098   \n",
       "Catonella                              -0.000588       -0.000976   \n",
       "Atopobium                              -0.001316        0.001578   \n",
       "Campylobacter                           0.001480       -0.000029   \n",
       "Capnocytophaga                          0.015738       -0.000932   \n",
       "Solobacterium                          -0.001086        0.001927   \n",
       "Moryella                                0.000480       -0.001331   \n",
       "TM7_genera_incertae_sedis               0.002551        0.002555   \n",
       "Staphylococcus                         -0.002440       -0.002013   \n",
       "Filifactor                              0.001484        0.001440   \n",
       "Oribacterium                           -0.002151        0.000346   \n",
       "Burkholderia                           -0.002083       -0.001690   \n",
       "Sneathia                                0.002001        0.001632   \n",
       "Treponema                              -0.000203       -0.001792   \n",
       "Moraxella                              -0.002556       -0.000587   \n",
       "Haemophilus                             0.002092       -0.001827   \n",
       "Selenomonas                            -0.002239        0.001235   \n",
       "Corynebacterium                         0.001439       -0.000648   \n",
       "Rhizobium                               0.001618       -0.001270   \n",
       "Bradyrhizobium                         -0.002469       -0.002249   \n",
       "Methylobacterium                        0.000870        0.000457   \n",
       "OD1_genera_incertae_sedis               0.000950        0.000381   \n",
       "Finegoldia                             -0.001926        0.000676   \n",
       "Microbacterium                          0.002190       -0.001281   \n",
       "Sphingomonas                           -0.000559        0.000829   \n",
       "Chryseobacterium                       -0.181225        0.001807   \n",
       "Bacteroides                            -0.001062       -0.001063   \n",
       "Bdellovibrio                           -0.001867        0.000437   \n",
       "Streptophyta                            0.000402        0.001934   \n",
       "Lachnospiracea_incertae_sedis          -0.000075        0.002225   \n",
       "Paracoccus                              0.002052        0.001912   \n",
       "Fastidiosipila                         -0.001190       -0.000391   \n",
       "Pseudonocardia                         -0.001137        0.001461   \n",
       "\n",
       "                               Porphyromonadaceae  \\\n",
       "Streptococcus                           -0.001406   \n",
       "Tropheryma                              -0.002496   \n",
       "Veillonella                              0.001857   \n",
       "Actinomyces                             -0.000985   \n",
       "Flavobacterium                          -0.002381   \n",
       "Prevotella                               0.002571   \n",
       "Porphyromonas                           -0.007076   \n",
       "Parvimonas                               0.002061   \n",
       "Fusobacterium                            0.001658   \n",
       "Propionibacterium                        0.000437   \n",
       "Gemella                                 -0.000479   \n",
       "Rothia                                   0.001089   \n",
       "Granulicatella                           0.000985   \n",
       "Neisseria                                0.000635   \n",
       "Lactobacillus                           -0.001488   \n",
       "Megasphaera                             -0.002192   \n",
       "Catonella                               -0.000671   \n",
       "Atopobium                               -0.000039   \n",
       "Campylobacter                            0.001880   \n",
       "Capnocytophaga                           0.001026   \n",
       "Solobacterium                           -0.001100   \n",
       "Moryella                                 0.002145   \n",
       "TM7_genera_incertae_sedis               -0.001316   \n",
       "Staphylococcus                          -0.000979   \n",
       "Filifactor                               0.001484   \n",
       "Oribacterium                            -0.001459   \n",
       "Burkholderia                             0.000568   \n",
       "Sneathia                                -0.000713   \n",
       "Treponema                                0.000554   \n",
       "Moraxella                               -0.002156   \n",
       "Haemophilus                             -0.001205   \n",
       "Selenomonas                              0.002303   \n",
       "Corynebacterium                          0.001549   \n",
       "Rhizobium                                0.000484   \n",
       "Bradyrhizobium                           0.002241   \n",
       "Methylobacterium                        -0.000720   \n",
       "OD1_genera_incertae_sedis                0.002594   \n",
       "Finegoldia                               0.002550   \n",
       "Microbacterium                           0.001610   \n",
       "Sphingomonas                            -0.001522   \n",
       "Chryseobacterium                        -0.000789   \n",
       "Bacteroides                              0.000030   \n",
       "Bdellovibrio                             0.000350   \n",
       "Streptophyta                             0.001250   \n",
       "Lachnospiracea_incertae_sedis           -0.000488   \n",
       "Paracoccus                              -0.001856   \n",
       "Fastidiosipila                           0.000179   \n",
       "Pseudonocardia                           0.000084   \n",
       "\n",
       "                               Clostridiales_Incertae_Sedis_XI  \\\n",
       "Streptococcus                                         0.000696   \n",
       "Tropheryma                                           -0.002541   \n",
       "Veillonella                                           0.001195   \n",
       "Actinomyces                                          -0.000080   \n",
       "Flavobacterium                                       -0.001167   \n",
       "Prevotella                                           -0.000076   \n",
       "Porphyromonas                                        -0.001201   \n",
       "Parvimonas                                            0.162877   \n",
       "Fusobacterium                                         0.001783   \n",
       "Propionibacterium                                    -0.000522   \n",
       "Gemella                                               0.001075   \n",
       "Rothia                                                0.000242   \n",
       "Granulicatella                                        0.002188   \n",
       "Neisseria                                             0.001101   \n",
       "Lactobacillus                                        -0.001137   \n",
       "Megasphaera                                          -0.001923   \n",
       "Catonella                                            -0.000714   \n",
       "Atopobium                                             0.000202   \n",
       "Campylobacter                                         0.001074   \n",
       "Capnocytophaga                                        0.001606   \n",
       "Solobacterium                                        -0.001826   \n",
       "Moryella                                              0.001883   \n",
       "TM7_genera_incertae_sedis                            -0.000007   \n",
       "Staphylococcus                                        0.000796   \n",
       "Filifactor                                           -0.001894   \n",
       "Oribacterium                                         -0.001889   \n",
       "Burkholderia                                         -0.001436   \n",
       "Sneathia                                              0.002152   \n",
       "Treponema                                            -0.000389   \n",
       "Moraxella                                             0.001612   \n",
       "Haemophilus                                           0.001924   \n",
       "Selenomonas                                          -0.000485   \n",
       "Corynebacterium                                      -0.000750   \n",
       "Rhizobium                                            -0.000343   \n",
       "Bradyrhizobium                                        0.001458   \n",
       "Methylobacterium                                     -0.001096   \n",
       "OD1_genera_incertae_sedis                            -0.000394   \n",
       "Finegoldia                                            0.046401   \n",
       "Microbacterium                                       -0.001672   \n",
       "Sphingomonas                                          0.000386   \n",
       "Chryseobacterium                                     -0.000108   \n",
       "Bacteroides                                          -0.002524   \n",
       "Bdellovibrio                                          0.001021   \n",
       "Streptophyta                                         -0.001135   \n",
       "Lachnospiracea_incertae_sedis                        -0.002530   \n",
       "Paracoccus                                           -0.001407   \n",
       "Fastidiosipila                                        0.001405   \n",
       "Pseudonocardia                                       -0.001378   \n",
       "\n",
       "                               Fusobacteriaceae  Propionibacteriaceae  ...  \\\n",
       "Streptococcus                          0.002533              0.000558  ...   \n",
       "Tropheryma                             0.004068              0.000202  ...   \n",
       "Veillonella                            0.003396             -0.001305  ...   \n",
       "Actinomyces                            0.000477             -0.002022  ...   \n",
       "Flavobacterium                        -0.001746             -0.002335  ...   \n",
       "Prevotella                             0.000534             -0.000472  ...   \n",
       "Porphyromonas                         -0.002272             -0.001882  ...   \n",
       "Parvimonas                             0.002583             -0.000623  ...   \n",
       "Fusobacterium                          0.367682             -0.001046  ...   \n",
       "Propionibacterium                     -0.004150              0.360012  ...   \n",
       "Gemella                                0.000313              0.001205  ...   \n",
       "Rothia                                -0.002717              0.002003  ...   \n",
       "Granulicatella                        -0.000351             -0.000035  ...   \n",
       "Neisseria                              0.000835              0.001944  ...   \n",
       "Lactobacillus                         -0.000672              0.000774  ...   \n",
       "Megasphaera                           -0.000570             -0.000780  ...   \n",
       "Catonella                             -0.000713              0.001766  ...   \n",
       "Atopobium                             -0.001449             -0.000497  ...   \n",
       "Campylobacter                         -0.001763             -0.000101  ...   \n",
       "Capnocytophaga                        -0.001489             -0.001931  ...   \n",
       "Solobacterium                         -0.000267             -0.002488  ...   \n",
       "Moryella                               0.002387             -0.002531  ...   \n",
       "TM7_genera_incertae_sedis             -0.003253              0.001236  ...   \n",
       "Staphylococcus                         0.002160             -0.001924  ...   \n",
       "Filifactor                             0.002035              0.000381  ...   \n",
       "Oribacterium                           0.004341             -0.000894  ...   \n",
       "Burkholderia                           0.001374              0.000073  ...   \n",
       "Sneathia                              -0.002173             -0.000588  ...   \n",
       "Treponema                             -0.000903              0.002579  ...   \n",
       "Moraxella                              0.001929             -0.002334  ...   \n",
       "Haemophilus                            0.002741              0.001409  ...   \n",
       "Selenomonas                            0.003058             -0.000475  ...   \n",
       "Corynebacterium                       -0.002864             -0.001015  ...   \n",
       "Rhizobium                             -0.002284             -0.002074  ...   \n",
       "Bradyrhizobium                         0.000545              0.002445  ...   \n",
       "Methylobacterium                      -0.001761              0.001658  ...   \n",
       "OD1_genera_incertae_sedis             -0.001202              0.000401  ...   \n",
       "Finegoldia                            -0.001612              0.002376  ...   \n",
       "Microbacterium                        -0.002799              0.001627  ...   \n",
       "Sphingomonas                          -0.003307              0.001414  ...   \n",
       "Chryseobacterium                       0.001070              0.002106  ...   \n",
       "Bacteroides                           -0.000598              0.000632  ...   \n",
       "Bdellovibrio                          -0.001085             -0.001141  ...   \n",
       "Streptophyta                           0.001718             -0.000459  ...   \n",
       "Lachnospiracea_incertae_sedis          0.002659             -0.002313  ...   \n",
       "Paracoccus                             0.000153              0.001567  ...   \n",
       "Fastidiosipila                         0.001928              0.002180  ...   \n",
       "Pseudonocardia                         0.002072             -0.001761  ...   \n",
       "\n",
       "                               Methylobacteriaceae  OD1_genera_incertae_sedis  \\\n",
       "Streptococcus                            -0.000261                  -0.001707   \n",
       "Tropheryma                                0.001780                   0.002175   \n",
       "Veillonella                              -0.001458                  -0.001672   \n",
       "Actinomyces                              -0.001322                   0.001592   \n",
       "Flavobacterium                           -0.000198                  -0.002026   \n",
       "Prevotella                               -0.000632                   0.002329   \n",
       "Porphyromonas                             0.000909                   0.001040   \n",
       "Parvimonas                               -0.001871                   0.000617   \n",
       "Fusobacterium                            -0.000117                   0.001370   \n",
       "Propionibacterium                         0.002028                   0.001014   \n",
       "Gemella                                  -0.000826                  -0.000608   \n",
       "Rothia                                    0.001961                   0.001324   \n",
       "Granulicatella                            0.001579                   0.002324   \n",
       "Neisseria                                 0.002240                  -0.001075   \n",
       "Lactobacillus                             0.000333                  -0.000380   \n",
       "Megasphaera                              -0.000190                  -0.000186   \n",
       "Catonella                                -0.002076                   0.001627   \n",
       "Atopobium                                -0.000466                  -0.002299   \n",
       "Campylobacter                            -0.001386                  -0.000788   \n",
       "Capnocytophaga                            0.000741                  -0.000526   \n",
       "Solobacterium                             0.001353                  -0.000664   \n",
       "Moryella                                 -0.002371                  -0.000209   \n",
       "TM7_genera_incertae_sedis                 0.000659                  -0.000155   \n",
       "Staphylococcus                           -0.001020                  -0.002580   \n",
       "Filifactor                                0.001333                  -0.001208   \n",
       "Oribacterium                              0.001969                   0.000417   \n",
       "Burkholderia                              0.000025                  -0.000069   \n",
       "Sneathia                                  0.000530                  -0.001095   \n",
       "Treponema                                 0.000511                   0.000087   \n",
       "Moraxella                                -0.000456                  -0.002503   \n",
       "Haemophilus                               0.000362                   0.000371   \n",
       "Selenomonas                              -0.000541                   0.002548   \n",
       "Corynebacterium                           0.001745                   0.000089   \n",
       "Rhizobium                                -0.002606                   0.002110   \n",
       "Bradyrhizobium                            0.000747                   0.002607   \n",
       "Methylobacterium                         -0.223489                  -0.002337   \n",
       "OD1_genera_incertae_sedis                -0.000319                   0.269370   \n",
       "Finegoldia                                0.000215                  -0.001868   \n",
       "Microbacterium                            0.002256                  -0.000258   \n",
       "Sphingomonas                             -0.002012                  -0.002129   \n",
       "Chryseobacterium                          0.001769                   0.000943   \n",
       "Bacteroides                               0.001122                  -0.001924   \n",
       "Bdellovibrio                             -0.001068                  -0.000155   \n",
       "Streptophyta                             -0.001599                   0.001320   \n",
       "Lachnospiracea_incertae_sedis            -0.000978                   0.000307   \n",
       "Paracoccus                                0.000536                   0.001187   \n",
       "Fastidiosipila                           -0.002398                   0.001066   \n",
       "Pseudonocardia                            0.000568                  -0.000422   \n",
       "\n",
       "                               Microbacteriaceae  Sphingomonadaceae  \\\n",
       "Streptococcus                           0.001348           0.000584   \n",
       "Tropheryma                             -0.000338           0.001892   \n",
       "Veillonella                            -0.001548           0.001068   \n",
       "Actinomyces                             0.000502           0.000230   \n",
       "Flavobacterium                          0.000076           0.000888   \n",
       "Prevotella                              0.002344          -0.001051   \n",
       "Porphyromonas                          -0.002151          -0.001781   \n",
       "Parvimonas                             -0.002044           0.000204   \n",
       "Fusobacterium                          -0.001052           0.000791   \n",
       "Propionibacterium                       0.002306           0.001570   \n",
       "Gemella                                 0.000599          -0.000153   \n",
       "Rothia                                  0.001988           0.002517   \n",
       "Granulicatella                         -0.002393          -0.002426   \n",
       "Neisseria                               0.000398          -0.001702   \n",
       "Lactobacillus                           0.000312          -0.001397   \n",
       "Megasphaera                             0.000061          -0.002156   \n",
       "Catonella                               0.001089          -0.002581   \n",
       "Atopobium                               0.001475           0.001494   \n",
       "Campylobacter                          -0.001348           0.001867   \n",
       "Capnocytophaga                          0.002561           0.000053   \n",
       "Solobacterium                          -0.001313          -0.001586   \n",
       "Moryella                                0.000108          -0.002150   \n",
       "TM7_genera_incertae_sedis               0.000298           0.000118   \n",
       "Staphylococcus                         -0.001799          -0.001794   \n",
       "Filifactor                             -0.000982          -0.002375   \n",
       "Oribacterium                            0.001975           0.001378   \n",
       "Burkholderia                            0.000652          -0.000529   \n",
       "Sneathia                                0.000528           0.002546   \n",
       "Treponema                               0.000301           0.001801   \n",
       "Moraxella                              -0.001302          -0.001850   \n",
       "Haemophilus                             0.000506          -0.002298   \n",
       "Selenomonas                             0.001348          -0.002299   \n",
       "Corynebacterium                        -0.001984          -0.001706   \n",
       "Rhizobium                               0.001363           0.000943   \n",
       "Bradyrhizobium                          0.001813           0.000682   \n",
       "Methylobacterium                        0.000508          -0.002275   \n",
       "OD1_genera_incertae_sedis              -0.002191          -0.002471   \n",
       "Finegoldia                              0.000580          -0.002328   \n",
       "Microbacterium                         -0.172076          -0.001036   \n",
       "Sphingomonas                           -0.002125           0.177304   \n",
       "Chryseobacterium                       -0.002326          -0.002590   \n",
       "Bacteroides                            -0.000383          -0.001038   \n",
       "Bdellovibrio                           -0.000076          -0.001636   \n",
       "Streptophyta                            0.001656          -0.001817   \n",
       "Lachnospiracea_incertae_sedis           0.001316           0.000019   \n",
       "Paracoccus                              0.001924          -0.000744   \n",
       "Fastidiosipila                          0.002511           0.000173   \n",
       "Pseudonocardia                         -0.001855          -0.002070   \n",
       "\n",
       "                               Bacteroidaceae  Bdellovibrionaceae  \\\n",
       "Streptococcus                        0.001965           -0.001962   \n",
       "Tropheryma                           0.001822            0.002409   \n",
       "Veillonella                          0.000309            0.000206   \n",
       "Actinomyces                          0.000023           -0.001826   \n",
       "Flavobacterium                       0.001960            0.000985   \n",
       "Prevotella                           0.002463           -0.000367   \n",
       "Porphyromonas                       -0.002159           -0.001341   \n",
       "Parvimonas                           0.002352           -0.000286   \n",
       "Fusobacterium                        0.001978           -0.002328   \n",
       "Propionibacterium                   -0.002191           -0.000255   \n",
       "Gemella                              0.002235           -0.001636   \n",
       "Rothia                               0.000151            0.001898   \n",
       "Granulicatella                       0.002403            0.001271   \n",
       "Neisseria                            0.001062            0.001680   \n",
       "Lactobacillus                        0.001343            0.000791   \n",
       "Megasphaera                          0.002533            0.000120   \n",
       "Catonella                            0.000596            0.000340   \n",
       "Atopobium                            0.000735           -0.002364   \n",
       "Campylobacter                       -0.002528           -0.002098   \n",
       "Capnocytophaga                      -0.001714            0.001446   \n",
       "Solobacterium                       -0.000225           -0.001204   \n",
       "Moryella                            -0.001084           -0.000659   \n",
       "TM7_genera_incertae_sedis           -0.000171           -0.001651   \n",
       "Staphylococcus                       0.000792            0.002005   \n",
       "Filifactor                           0.002561           -0.001601   \n",
       "Oribacterium                         0.002440            0.002143   \n",
       "Burkholderia                        -0.000848            0.000771   \n",
       "Sneathia                             0.002105           -0.002192   \n",
       "Treponema                           -0.001159           -0.002187   \n",
       "Moraxella                            0.000100            0.000254   \n",
       "Haemophilus                         -0.001292            0.001362   \n",
       "Selenomonas                          0.001195           -0.000053   \n",
       "Corynebacterium                     -0.001798           -0.002473   \n",
       "Rhizobium                           -0.001308            0.001681   \n",
       "Bradyrhizobium                       0.001224            0.001836   \n",
       "Methylobacterium                    -0.002417           -0.001824   \n",
       "OD1_genera_incertae_sedis           -0.000413           -0.002307   \n",
       "Finegoldia                          -0.002285            0.000301   \n",
       "Microbacterium                       0.000165            0.000179   \n",
       "Sphingomonas                        -0.002101            0.000112   \n",
       "Chryseobacterium                     0.000576            0.000573   \n",
       "Bacteroides                         -0.140940           -0.000643   \n",
       "Bdellovibrio                        -0.000505            0.159111   \n",
       "Streptophyta                        -0.002612           -0.002261   \n",
       "Lachnospiracea_incertae_sedis        0.000443            0.001293   \n",
       "Paracoccus                           0.000542           -0.002226   \n",
       "Fastidiosipila                      -0.001331           -0.002564   \n",
       "Pseudonocardia                       0.001699            0.000970   \n",
       "\n",
       "                               Chloroplast  Rhodobacteraceae  Ruminococcaceae  \\\n",
       "Streptococcus                     0.002040         -0.000311         0.000285   \n",
       "Tropheryma                        0.000820         -0.001740         0.001338   \n",
       "Veillonella                       0.000263          0.000642         0.001198   \n",
       "Actinomyces                      -0.000018         -0.001985        -0.002084   \n",
       "Flavobacterium                    0.000979         -0.001352         0.001772   \n",
       "Prevotella                       -0.002352         -0.001860         0.000015   \n",
       "Porphyromonas                    -0.001730          0.001988         0.001221   \n",
       "Parvimonas                       -0.002558          0.000329        -0.001241   \n",
       "Fusobacterium                     0.001539          0.000145        -0.000636   \n",
       "Propionibacterium                 0.002488         -0.001036         0.000536   \n",
       "Gemella                          -0.001188          0.002119         0.001535   \n",
       "Rothia                           -0.001933         -0.001216         0.000655   \n",
       "Granulicatella                   -0.002316         -0.002087         0.000956   \n",
       "Neisseria                         0.001437          0.001202        -0.001100   \n",
       "Lactobacillus                    -0.001139         -0.000129        -0.000731   \n",
       "Megasphaera                      -0.001925         -0.002173        -0.000687   \n",
       "Catonella                        -0.001965         -0.001262         0.000065   \n",
       "Atopobium                         0.001926          0.000790         0.002405   \n",
       "Campylobacter                    -0.002439         -0.002365         0.001099   \n",
       "Capnocytophaga                    0.000473          0.000216         0.000433   \n",
       "Solobacterium                     0.001233          0.000949         0.000059   \n",
       "Moryella                          0.001566          0.001043        -0.001763   \n",
       "TM7_genera_incertae_sedis        -0.000433          0.001617         0.000509   \n",
       "Staphylococcus                    0.001276          0.001721        -0.000263   \n",
       "Filifactor                       -0.001666         -0.001704         0.001095   \n",
       "Oribacterium                      0.000105          0.001872         0.002369   \n",
       "Burkholderia                     -0.000358          0.000629        -0.000596   \n",
       "Sneathia                         -0.002353         -0.002084         0.001843   \n",
       "Treponema                        -0.001884         -0.001560         0.001314   \n",
       "Moraxella                        -0.002239         -0.001552        -0.000950   \n",
       "Haemophilus                      -0.000902          0.002541         0.001950   \n",
       "Selenomonas                      -0.000553          0.002129         0.002438   \n",
       "Corynebacterium                   0.001748          0.001999         0.000999   \n",
       "Rhizobium                         0.000775         -0.002370         0.000029   \n",
       "Bradyrhizobium                   -0.001339          0.002341        -0.000434   \n",
       "Methylobacterium                  0.001786          0.000024         0.001207   \n",
       "OD1_genera_incertae_sedis         0.000066         -0.000497         0.000537   \n",
       "Finegoldia                        0.000306         -0.000650        -0.002238   \n",
       "Microbacterium                    0.002286          0.002216         0.001394   \n",
       "Sphingomonas                      0.001547         -0.000583        -0.001040   \n",
       "Chryseobacterium                  0.001299          0.002024         0.000819   \n",
       "Bacteroides                       0.001807          0.000195        -0.000892   \n",
       "Bdellovibrio                      0.000851         -0.000148        -0.002231   \n",
       "Streptophyta                     -0.134328          0.002426        -0.000353   \n",
       "Lachnospiracea_incertae_sedis     0.001144         -0.001872         0.001912   \n",
       "Paracoccus                        0.001986          0.212551         0.001111   \n",
       "Fastidiosipila                   -0.002293          0.001536         0.147338   \n",
       "Pseudonocardia                   -0.001436          0.000166        -0.001651   \n",
       "\n",
       "                               Pseudonocardiaceae  \n",
       "Streptococcus                            0.000085  \n",
       "Tropheryma                              -0.001586  \n",
       "Veillonella                              0.000407  \n",
       "Actinomyces                              0.001736  \n",
       "Flavobacterium                          -0.001700  \n",
       "Prevotella                               0.001178  \n",
       "Porphyromonas                            0.001543  \n",
       "Parvimonas                               0.001066  \n",
       "Fusobacterium                            0.000812  \n",
       "Propionibacterium                        0.002116  \n",
       "Gemella                                 -0.000484  \n",
       "Rothia                                  -0.000107  \n",
       "Granulicatella                          -0.001132  \n",
       "Neisseria                                0.000127  \n",
       "Lactobacillus                           -0.001204  \n",
       "Megasphaera                              0.001703  \n",
       "Catonella                               -0.000224  \n",
       "Atopobium                                0.000699  \n",
       "Campylobacter                            0.000745  \n",
       "Capnocytophaga                           0.001291  \n",
       "Solobacterium                            0.000635  \n",
       "Moryella                                 0.001563  \n",
       "TM7_genera_incertae_sedis                0.001289  \n",
       "Staphylococcus                          -0.002153  \n",
       "Filifactor                              -0.000059  \n",
       "Oribacterium                             0.000459  \n",
       "Burkholderia                            -0.000588  \n",
       "Sneathia                                -0.002247  \n",
       "Treponema                                0.000234  \n",
       "Moraxella                               -0.001120  \n",
       "Haemophilus                             -0.001124  \n",
       "Selenomonas                              0.001561  \n",
       "Corynebacterium                         -0.000008  \n",
       "Rhizobium                               -0.001192  \n",
       "Bradyrhizobium                          -0.001161  \n",
       "Methylobacterium                        -0.001446  \n",
       "OD1_genera_incertae_sedis                0.000572  \n",
       "Finegoldia                               0.001805  \n",
       "Microbacterium                           0.000289  \n",
       "Sphingomonas                             0.002486  \n",
       "Chryseobacterium                         0.001262  \n",
       "Bacteroides                              0.002029  \n",
       "Bdellovibrio                             0.001149  \n",
       "Streptophyta                             0.000903  \n",
       "Lachnospiracea_incertae_sedis            0.000064  \n",
       "Paracoccus                              -0.001635  \n",
       "Fastidiosipila                           0.001595  \n",
       "Pseudonocardia                           0.209231  \n",
       "\n",
       "[48 rows x 40 columns]"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trained_weight_list[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 9. Taxa selection performance\n",
    "\n",
    "If we know the true disease path, we can calculate the taxa selection performance by `deepbiome_taxa_selection_performance` funciton. First, we prepared the true weight list based on the true disease path. For each fold, we prepared 4 weights from the 5 layers (`[genus to family, family to order, order to Class, class to phylum]`). An example of the list of the true weights from each fold is as follow:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|<ipython-input-44-7f16305fbcb7>:2] (5, 4)\n"
     ]
    }
   ],
   "source": [
    "true_tree_weight_list = np.load(resource_filename('deepbiome', 'tests/data/true_weight_list.npy'), allow_pickle=True)\n",
    "log.info(true_tree_weight_list.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The first weight between the genus and family layers for first epoch has the shape below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|<ipython-input-45-7f1406e7d9a7>:1] (48, 40)\n"
     ]
    }
   ],
   "source": [
    "log.info(true_tree_weight_list[0][0].shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will calculate the taxa selection performance of the trained weight below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['./example_result//weight_0.h5',\n",
       " './example_result//weight_1.h5',\n",
       " './example_result//weight_2.h5',\n",
       " './example_result//weight_3.h5',\n",
       " './example_result//weight_4.h5']"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trained_weight_path_list = ['%s/weight_%d.h5' % (path_info['model_info']['model_dir'], i) for i in range(5)]\n",
    "trained_weight_path_list"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is the summary of the taxa selection accuracy of trained weights from each fold."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result//weight_0.h5 \n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result//weight_1.h5 \n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result//weight_2.h5 \n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result//weight_3.h5 \n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result//weight_4.h5 \n"
     ]
    }
   ],
   "source": [
    "summary = deepbiome.deepbiome_taxa_selection_performance(log, network_info, path_info, num_classes=1, \n",
    "                                                         true_tree_weight_list=true_tree_weight_list, \n",
    "                                                         trained_weight_path_list = trained_weight_path_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>PhyloTree</th>\n",
       "      <th>No. true taxa</th>\n",
       "      <th>No. total taxa</th>\n",
       "      <th>Sensitivity_mean</th>\n",
       "      <th>Sensitivity_std</th>\n",
       "      <th>Specificity_mean</th>\n",
       "      <th>Specificity_std</th>\n",
       "      <th>Gmeasure_mean</th>\n",
       "      <th>Gmeasure_std</th>\n",
       "      <th>Accuracy_mean</th>\n",
       "      <th>Accuracy_std</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>./example_result/</td>\n",
       "      <td>Genus</td>\n",
       "      <td>31</td>\n",
       "      <td>48</td>\n",
       "      <td>0.961290</td>\n",
       "      <td>0.024140</td>\n",
       "      <td>0.984754</td>\n",
       "      <td>0.009712</td>\n",
       "      <td>0.972894</td>\n",
       "      <td>0.015223</td>\n",
       "      <td>0.984375</td>\n",
       "      <td>0.009761</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td></td>\n",
       "      <td>Family</td>\n",
       "      <td>23</td>\n",
       "      <td>40</td>\n",
       "      <td>0.973913</td>\n",
       "      <td>0.034783</td>\n",
       "      <td>0.975697</td>\n",
       "      <td>0.007704</td>\n",
       "      <td>0.974688</td>\n",
       "      <td>0.020403</td>\n",
       "      <td>0.975652</td>\n",
       "      <td>0.008151</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td></td>\n",
       "      <td>Order</td>\n",
       "      <td>9</td>\n",
       "      <td>23</td>\n",
       "      <td>0.955556</td>\n",
       "      <td>0.054433</td>\n",
       "      <td>0.960733</td>\n",
       "      <td>0.007940</td>\n",
       "      <td>0.957693</td>\n",
       "      <td>0.026143</td>\n",
       "      <td>0.960614</td>\n",
       "      <td>0.007342</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td></td>\n",
       "      <td>Class</td>\n",
       "      <td>7</td>\n",
       "      <td>17</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.927397</td>\n",
       "      <td>0.011942</td>\n",
       "      <td>0.962995</td>\n",
       "      <td>0.006227</td>\n",
       "      <td>0.930719</td>\n",
       "      <td>0.011396</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Model PhyloTree No. true taxa No. total taxa  Sensitivity_mean  \\\n",
       "0  ./example_result/     Genus            31             48          0.961290   \n",
       "1                       Family            23             40          0.973913   \n",
       "2                        Order             9             23          0.955556   \n",
       "3                        Class             7             17          1.000000   \n",
       "\n",
       "   Sensitivity_std  Specificity_mean  Specificity_std  Gmeasure_mean  \\\n",
       "0         0.024140          0.984754         0.009712       0.972894   \n",
       "1         0.034783          0.975697         0.007704       0.974688   \n",
       "2         0.054433          0.960733         0.007940       0.957693   \n",
       "3         0.000000          0.927397         0.011942       0.962995   \n",
       "\n",
       "   Gmeasure_std  Accuracy_mean  Accuracy_std  \n",
       "0      0.015223       0.984375      0.009761  \n",
       "1      0.020403       0.975652      0.008151  \n",
       "2      0.026143       0.960614      0.007342  \n",
       "3      0.006227       0.930719      0.011396  "
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "summary"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 10. Draw phylogenetic tree\n",
    "\n",
    "The `deepbiome_get_trained_weight` function draw phylogenetic tree for the `DeepBiome` network. This function implemented `ete3` library (link TBD)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we turn on the `tree_weight_on` option, the function shows the amount and direction of the tree weights for each edge by circle size and color. For this option, we have to feed a list of pandas dataframe of the tree weights obtained from `deepbiome_get_trained_weight` function to `tree_weight` argument.\n",
    "In this example, we used the 5 lists of weights from 5-fold cross validation obtained from `deepbiome_get_trained_weight` function.\n",
    "For each layer, we first averaged 5 weights from 5 fold CV."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "tot_trained_weight_list = []\n",
    "for fold in range(5):\n",
    "    weight_path = '%s/%s' % (path_info['model_info']['model_dir'], 'weight_%d.h5' % fold)\n",
    "    trained_weight_list = deepbiome.deepbiome_get_trained_weight(log, network_info, path_info, num_classes=1,\n",
    "                                                                 weight_path=weight_path, verbose=False)\n",
    "    tot_trained_weight_list.append(trained_weight_list)\n",
    "    \n",
    "trained_weight_list = []\n",
    "for i in range(len(tot_trained_weight_list[0])):\n",
    "    level_weights = tot_trained_weight_list[0][i]\n",
    "    for j in range(1,len(tot_trained_weight_list)):\n",
    "        level_weights +=tot_trained_weight_list[j][i]\n",
    "    level_weights /= len(tot_trained_weight_list)\n",
    "    trained_weight_list.append(level_weights)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, we can draw the phylogenetic tree with trained weights. For using the trained weights, __`tree_weight_classes`, the list of names for each level, should be same as the name of each level in the trained weight list.__\n",
    "We used `file_name='%%inline'` option to show the tree in the jupyter notebook. To specify the background color for each phylum, we turned on the `phylum_background_color_on` option and used `phylum_color` list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "phylum_color = ['lightsteelblue', \n",
    "                 'moccasin',\n",
    "                 'darkseagreen',\n",
    "                 'khaki',\n",
    "                 'mediumturquoise',\n",
    "                 'lightblue',\n",
    "                 'thistle',\n",
    "                 'tan',\n",
    "                 'mistyrose',\n",
    "                ]\n",
    "\n",
    "img = deepbiome.deepbiome_draw_phylogenetic_tree(log, network_info, path_info, num_classes=1,\n",
    "                                                 file_name='%%inline', img_w=500, branch_vertical_margin=20, \n",
    "                                                 arc_start=0, arc_span=360, \n",
    "                                                 node_name_on=False, name_fsize=10, \n",
    "                                                 tree_weight_on=True, tree_weight=trained_weight_list, \n",
    "                                                 tree_weight_classes = ['Genus', 'Family', 'Order', 'Class', 'Phylum', 'Disease'],\n",
    "                                                 weight_opacity=0.8, weight_max_radios=10, \n",
    "                                                 phylum_background_color_on=True, phylum_color=phylum_color, phylum_color_legend=True,\n",
    "                                                 verbose=False)\n",
    "img"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can show the name of each leaf node in the phylogenetic tree by turn on the `node_name_on` option."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nYII=\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "img = deepbiome.deepbiome_draw_phylogenetic_tree(log, network_info, path_info, num_classes=1,\n",
    "                                                 file_name='%%inline', img_w=500,\n",
    "                                                 branch_vertical_margin=20, arc_start=0, arc_span=360,\n",
    "                                                 node_name_on=True, name_fsize=20, \n",
    "                                                 tree_weight_on=True, tree_weight=trained_weight_list,\n",
    "                                                 tree_weight_classes = ['Genus', 'Family', 'Order', 'Class', 'Phylum', 'Disease'],\n",
    "                                                 weight_opacity=0.8, weight_max_radios=20, \n",
    "                                                 phylum_background_color_on=True, phylum_color=phylum_color, phylum_color_legend=True, \n",
    "                                                 verbose=False)\n",
    "img"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we want to save the figure as `png` or `jpg`, we can change `file_name` option."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "img = deepbiome.deepbiome_draw_phylogenetic_tree(log, network_info, path_info, num_classes=1,\n",
    "                                                 file_name='tree.png', img_w=500,\n",
    "                                                 branch_vertical_margin=20, arc_start=0, arc_span=360,\n",
    "                                                 node_name_on=True, name_fsize=20, \n",
    "                                                 tree_weight_on=True, tree_weight=trained_weight_list,\n",
    "                                                 tree_weight_classes = ['Genus', 'Family', 'Order', 'Class', 'Phylum', 'Disease'],\n",
    "                                                 weight_opacity=0.8, weight_max_radios=20, \n",
    "                                                 phylum_background_color_on=True, phylum_color=phylum_color, phylum_color_legend=True, \n",
    "                                                 verbose=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can check that the tree image saved in `tree.png`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f2f1c1f65f8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "img = plt.imread('tree.png')\n",
    "plt.imshow(img)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 11. Using covariates\n",
    "\n",
    "We can use covariates for training the DeepBiome network."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below is an example of the input files for the continuous covariates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ages</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>59.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>45.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>42.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>50.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>69.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>37.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>66.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>75.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>32.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>72.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>65.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>58.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>41.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>49.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>49.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>70.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>64.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>33.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>74.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>56.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>37.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>51.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>34.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>46.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>44.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>60.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>46.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>37.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>58.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>970</th>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>971</th>\n",
       "      <td>78.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>972</th>\n",
       "      <td>32.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>973</th>\n",
       "      <td>62.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>974</th>\n",
       "      <td>47.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>975</th>\n",
       "      <td>47.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>976</th>\n",
       "      <td>65.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>977</th>\n",
       "      <td>68.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>978</th>\n",
       "      <td>45.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>979</th>\n",
       "      <td>43.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>980</th>\n",
       "      <td>31.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>981</th>\n",
       "      <td>45.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>982</th>\n",
       "      <td>64.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>983</th>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>984</th>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>985</th>\n",
       "      <td>59.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>986</th>\n",
       "      <td>78.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>987</th>\n",
       "      <td>49.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>988</th>\n",
       "      <td>33.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>989</th>\n",
       "      <td>60.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>990</th>\n",
       "      <td>48.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991</th>\n",
       "      <td>75.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>992</th>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>993</th>\n",
       "      <td>39.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>994</th>\n",
       "      <td>49.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>71.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>34.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>48.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>52.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     ages\n",
       "0    59.0\n",
       "1    45.0\n",
       "2    42.0\n",
       "3    50.0\n",
       "4    69.0\n",
       "5    37.0\n",
       "6    66.0\n",
       "7    75.0\n",
       "8    32.0\n",
       "9    72.0\n",
       "10   65.0\n",
       "11   58.0\n",
       "12   41.0\n",
       "13   49.0\n",
       "14   49.0\n",
       "15   70.0\n",
       "16   64.0\n",
       "17   33.0\n",
       "18   74.0\n",
       "19   56.0\n",
       "20   37.0\n",
       "21   38.0\n",
       "22   51.0\n",
       "23   34.0\n",
       "24   46.0\n",
       "25   44.0\n",
       "26   60.0\n",
       "27   46.0\n",
       "28   37.0\n",
       "29   58.0\n",
       "..    ...\n",
       "970  38.0\n",
       "971  78.0\n",
       "972  32.0\n",
       "973  62.0\n",
       "974  47.0\n",
       "975  47.0\n",
       "976  65.0\n",
       "977  68.0\n",
       "978  45.0\n",
       "979  43.0\n",
       "980  31.0\n",
       "981  45.0\n",
       "982  64.0\n",
       "983  36.0\n",
       "984  36.0\n",
       "985  59.0\n",
       "986  78.0\n",
       "987  49.0\n",
       "988  33.0\n",
       "989  60.0\n",
       "990  48.0\n",
       "991  75.0\n",
       "992  38.0\n",
       "993  39.0\n",
       "994  49.0\n",
       "995  71.0\n",
       "996  34.0\n",
       "997  48.0\n",
       "998  38.0\n",
       "999  52.0\n",
       "\n",
       "[1000 rows x 1 columns]"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_csv(resource_filename('deepbiome', 'tests/data/ages.csv'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below is an example of the input files for the categorical covariates. We assume that the file contains all of the catetogories for one-hot encoding."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>970</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>971</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>972</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>973</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>974</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>975</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>976</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>977</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>978</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>979</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>980</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>981</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>982</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>983</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>984</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>985</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>986</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>987</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>988</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>989</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>990</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>992</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>993</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>994</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     gender\n",
       "0         1\n",
       "1         0\n",
       "2         1\n",
       "3         1\n",
       "4         1\n",
       "5         0\n",
       "6         1\n",
       "7         1\n",
       "8         0\n",
       "9         0\n",
       "10        0\n",
       "11        1\n",
       "12        0\n",
       "13        1\n",
       "14        1\n",
       "15        1\n",
       "16        0\n",
       "17        0\n",
       "18        1\n",
       "19        1\n",
       "20        0\n",
       "21        0\n",
       "22        1\n",
       "23        0\n",
       "24        1\n",
       "25        0\n",
       "26        0\n",
       "27        0\n",
       "28        1\n",
       "29        1\n",
       "..      ...\n",
       "970       1\n",
       "971       1\n",
       "972       0\n",
       "973       1\n",
       "974       0\n",
       "975       1\n",
       "976       0\n",
       "977       1\n",
       "978       1\n",
       "979       1\n",
       "980       1\n",
       "981       1\n",
       "982       0\n",
       "983       0\n",
       "984       0\n",
       "985       1\n",
       "986       0\n",
       "987       0\n",
       "988       1\n",
       "989       0\n",
       "990       0\n",
       "991       1\n",
       "992       1\n",
       "993       1\n",
       "994       0\n",
       "995       0\n",
       "996       0\n",
       "997       1\n",
       "998       0\n",
       "999       1\n",
       "\n",
       "[1000 rows x 1 columns]"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_csv(resource_filename('deepbiome', 'tests/data/gender.csv'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ethnicity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>970</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>971</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>972</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>973</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>974</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>975</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>976</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>977</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>978</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>979</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>980</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>981</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>982</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>983</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>984</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>985</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>986</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>987</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>988</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>989</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>990</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>992</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>993</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>994</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     ethnicity\n",
       "0            4\n",
       "1            0\n",
       "2            0\n",
       "3            4\n",
       "4            4\n",
       "5            2\n",
       "6            3\n",
       "7            0\n",
       "8            2\n",
       "9            5\n",
       "10           2\n",
       "11           3\n",
       "12           5\n",
       "13           3\n",
       "14           0\n",
       "15           0\n",
       "16           4\n",
       "17           5\n",
       "18           1\n",
       "19           1\n",
       "20           4\n",
       "21           4\n",
       "22           1\n",
       "23           0\n",
       "24           1\n",
       "25           3\n",
       "26           1\n",
       "27           4\n",
       "28           4\n",
       "29           3\n",
       "..         ...\n",
       "970          1\n",
       "971          0\n",
       "972          0\n",
       "973          5\n",
       "974          3\n",
       "975          2\n",
       "976          1\n",
       "977          5\n",
       "978          4\n",
       "979          1\n",
       "980          0\n",
       "981          3\n",
       "982          3\n",
       "983          5\n",
       "984          5\n",
       "985          5\n",
       "986          3\n",
       "987          1\n",
       "988          2\n",
       "989          2\n",
       "990          0\n",
       "991          5\n",
       "992          3\n",
       "993          5\n",
       "994          5\n",
       "995          2\n",
       "996          2\n",
       "997          1\n",
       "998          0\n",
       "999          0\n",
       "\n",
       "[1000 rows x 1 columns]"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_csv(resource_filename('deepbiome', 'tests/data/ethnicity.csv'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For using the covariates, we have to set the `covariates_info` field in the configuration for the path informations. If we don't specify the `covariates_info`, than the DeepBiome will train the model without any covariates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "network_info_with_covariates = {\n",
    "    'architecture_info': {\n",
    "        'batch_normalization': 'False',\n",
    "        'drop_out': '0',\n",
    "        'weight_initial': 'glorot_uniform',\n",
    "        'weight_l1_penalty':'0.',\n",
    "        'weight_decay': 'phylogenetic_tree',\n",
    "    },\n",
    "    'model_info': {\n",
    "        'lr': '0.01',\n",
    "        'decay': '0.001',\n",
    "        'loss': 'binary_crossentropy',\n",
    "        'metrics': 'binary_accuracy, sensitivity, specificity, gmeasure',\n",
    "        'taxa_selection_metrics': 'sensitivity, specificity, gmeasure, accuracy',\n",
    "        'network_class': 'DeepBiomeNetwork',\n",
    "        'optimizer': 'adam',\n",
    "        'reader_class': 'MicroBiomeClassificationReader',\n",
    "        'normalizer': 'normalize_minmax',\n",
    "    },\n",
    "    'training_info': {\n",
    "        'epochs': '10',\n",
    "        'batch_size': '50', \n",
    "        'callbacks': 'ModelCheckpoint',\n",
    "        'monitor': 'val_loss',\n",
    "        'mode' : 'min',\n",
    "        'min_delta': '1e-7',\n",
    "    },\n",
    "    'validation_info': {\n",
    "        'batch_size': 'None', \n",
    "        'validation_size': '0.2'\n",
    "    },\n",
    "    'test_info': {\n",
    "        'batch_size': 'None'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "path_info_with_covariates = {\n",
    "    'data_info': {\n",
    "        'data_path': resource_filename('deepbiome', 'tests/data'),\n",
    "        'idx_path': resource_filename('deepbiome', 'tests/data/onefile_idx.csv'),\n",
    "        'tree_info_path': resource_filename('deepbiome', 'tests/data/genus48_dic.csv'),\n",
    "        'x_path': 'onefile_x.csv',\n",
    "        'y_path': 'classification_y.csv'\n",
    "    },\n",
    "    'model_info': {\n",
    "        'evaluation': 'eval.npy',\n",
    "        'history': 'hist.json',\n",
    "        'model_dir': './example_result/',\n",
    "        'weight': 'weight.h5'\n",
    "    },\n",
    "    'covariates_info':{\n",
    "        'continuous_variables':','.join([resource_filename('deepbiome', 'tests/data/ages.csv'),\n",
    "                                         resource_filename('deepbiome', 'tests/data/weights.csv')]),\n",
    "        'categorical_variables':','.join([resource_filename('deepbiome', 'tests/data/gender.csv'),\n",
    "                                         resource_filename('deepbiome', 'tests/data/ethnicity.csv')]),\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can use the same `deepbiome_train` function when we train the network with covariates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:109] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------1 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 1 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:529]     Phylum_with_covariates: 17\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Number', 'Order', 'Genus', 'Class', 'Phylum_with_covariates', 'Family', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_4\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input (InputLayer)              (None, 48)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "l1_dense (Dense_with_tree)      (None, 40)           1960        input[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "l1_activation (Activation)      (None, 40)           0           l1_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l2_dense (Dense_with_tree)      (None, 23)           943         l1_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l2_activation (Activation)      (None, 23)           0           l2_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l3_dense (Dense_with_tree)      (None, 17)           408         l2_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l3_activation (Activation)      (None, 17)           0           l3_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l4_dense (Dense_with_tree)      (None, 9)            162         l3_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l4_activation (Activation)      (None, 9)            0           l4_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "covariates_input (InputLayer)   (None, 8)            0                                            \n",
      "__________________________________________________________________________________________________\n",
      "biome_covariates_concat (Concat (None, 17)           0           l4_activation[0][0]              \n",
      "                                                                 covariates_input[0][0]           \n",
      "__________________________________________________________________________________________________\n",
      "last_dense_h (Dense)            (None, 1)            18          biome_covariates_concat[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "p_hat (Activation)              (None, 1)            0           last_dense_h[0][0]               \n",
      "==================================================================================================\n",
      "Total params: 3,491\n",
      "Trainable params: 3,491\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 1 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 847us/step - loss: 4.6054 - binary_accuracy: 0.4016 - sensitivity: 0.2103 - specificity: 0.7904 - gmeasure: 0.2854 - val_loss: 1.6714 - val_binary_accuracy: 0.5188 - val_sensitivity: 0.5942 - val_specificity: 0.1816 - val_gmeasure: 0.2927\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 149us/step - loss: 2.1623 - binary_accuracy: 0.6484 - sensitivity: 0.8939 - specificity: 0.1049 - gmeasure: 0.2200 - val_loss: 1.8490 - val_binary_accuracy: 0.6750 - val_sensitivity: 0.9402 - val_specificity: 0.0826 - val_gmeasure: 0.1899\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 146us/step - loss: 1.7396 - binary_accuracy: 0.5984 - sensitivity: 0.7610 - specificity: 0.2232 - gmeasure: 0.3758 - val_loss: 1.5668 - val_binary_accuracy: 0.5000 - val_sensitivity: 0.4820 - val_specificity: 0.4027 - val_gmeasure: 0.4119\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 147us/step - loss: 1.4825 - binary_accuracy: 0.5375 - sensitivity: 0.6281 - specificity: 0.3332 - gmeasure: 0.4502 - val_loss: 1.2314 - val_binary_accuracy: 0.5437 - val_sensitivity: 0.6231 - val_specificity: 0.1816 - val_gmeasure: 0.3018\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 140us/step - loss: 1.2375 - binary_accuracy: 0.5969 - sensitivity: 0.7772 - specificity: 0.2197 - gmeasure: 0.3814 - val_loss: 1.0259 - val_binary_accuracy: 0.5250 - val_sensitivity: 0.6018 - val_specificity: 0.1816 - val_gmeasure: 0.2955\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 145us/step - loss: 0.9980 - binary_accuracy: 0.5609 - sensitivity: 0.6834 - specificity: 0.3063 - gmeasure: 0.4426 - val_loss: 0.8350 - val_binary_accuracy: 0.5875 - val_sensitivity: 0.6718 - val_specificity: 0.1816 - val_gmeasure: 0.3147\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 149us/step - loss: 0.8058 - binary_accuracy: 0.6266 - sensitivity: 0.8353 - specificity: 0.1703 - gmeasure: 0.3651 - val_loss: 0.7168 - val_binary_accuracy: 0.5938 - val_sensitivity: 0.6726 - val_specificity: 0.2316 - val_gmeasure: 0.3862\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 151us/step - loss: 0.6917 - binary_accuracy: 0.6422 - sensitivity: 0.9065 - specificity: 0.0703 - gmeasure: 0.1311 - val_loss: 0.6560 - val_binary_accuracy: 0.6313 - val_sensitivity: 0.8713 - val_specificity: 0.1330 - val_gmeasure: 0.2843\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 145us/step - loss: 0.6483 - binary_accuracy: 0.6609 - sensitivity: 0.9576 - specificity: 0.0199 - gmeasure: 0.0500 - val_loss: 0.6132 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 145us/step - loss: 0.6255 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6137 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 3.5374574661254883!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_0.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_0.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 4us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008526802062988281!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.621672511100769, 0.6862499713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 11us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.007757663726806641!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6123248338699341, 0.6899999976158142, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.997036933898926\n",
      "[root    |INFO|deepbiome.py:193] 1 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------2 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 2 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:529]     Phylum_with_covariates: 17\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Number', 'Order', 'Genus', 'Class', 'Phylum_with_covariates', 'Family', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input (InputLayer)              (None, 48)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "l1_dense (Dense_with_tree)      (None, 40)           1960        input[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "l1_activation (Activation)      (None, 40)           0           l1_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l2_dense (Dense_with_tree)      (None, 23)           943         l1_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l2_activation (Activation)      (None, 23)           0           l2_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l3_dense (Dense_with_tree)      (None, 17)           408         l2_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l3_activation (Activation)      (None, 17)           0           l3_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l4_dense (Dense_with_tree)      (None, 9)            162         l3_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l4_activation (Activation)      (None, 9)            0           l4_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "covariates_input (InputLayer)   (None, 8)            0                                            \n",
      "__________________________________________________________________________________________________\n",
      "biome_covariates_concat (Concat (None, 17)           0           l4_activation[0][0]              \n",
      "                                                                 covariates_input[0][0]           \n",
      "__________________________________________________________________________________________________\n",
      "last_dense_h (Dense)            (None, 1)            18          biome_covariates_concat[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "p_hat (Activation)              (None, 1)            0           last_dense_h[0][0]               \n",
      "==================================================================================================\n",
      "Total params: 3,491\n",
      "Trainable params: 3,491\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 2 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 810us/step - loss: 1.3040 - binary_accuracy: 0.6094 - sensitivity: 0.7392 - specificity: 0.2900 - gmeasure: 0.4397 - val_loss: 1.2027 - val_binary_accuracy: 0.5938 - val_sensitivity: 0.7356 - val_specificity: 0.1390 - val_gmeasure: 0.2731\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 0.9717 - binary_accuracy: 0.6625 - sensitivity: 0.8271 - specificity: 0.2514 - gmeasure: 0.4440 - val_loss: 0.9696 - val_binary_accuracy: 0.5437 - val_sensitivity: 0.6509 - val_specificity: 0.2336 - val_gmeasure: 0.3312\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.7802 - binary_accuracy: 0.6453 - sensitivity: 0.8217 - specificity: 0.2435 - gmeasure: 0.3871 - val_loss: 0.7582 - val_binary_accuracy: 0.5500 - val_sensitivity: 0.6577 - val_specificity: 0.3002 - val_gmeasure: 0.4399\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 132us/step - loss: 0.6673 - binary_accuracy: 0.6812 - sensitivity: 0.9169 - specificity: 0.1053 - gmeasure: 0.1812 - val_loss: 0.7047 - val_binary_accuracy: 0.5125 - val_sensitivity: 0.6002 - val_specificity: 0.2522 - val_gmeasure: 0.3773\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6244 - binary_accuracy: 0.7078 - sensitivity: 0.9475 - specificity: 0.0866 - gmeasure: 0.1408 - val_loss: 0.5912 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6157 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5907 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 135us/step - loss: 0.6140 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5895 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 0.6159 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5917 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 140us/step - loss: 0.6043 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5907 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 148us/step - loss: 0.6068 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5933 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 3.048703908920288!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_1.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_1.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008332490921020508!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.609603226184845, 0.7200000286102295, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 12us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008581399917602539!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6132102012634277, 0.7200000286102295, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.500894784927368\n",
      "[root    |INFO|deepbiome.py:193] 2 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------3 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 3 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:529]     Phylum_with_covariates: 17\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Number', 'Order', 'Genus', 'Class', 'Phylum_with_covariates', 'Family', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input (InputLayer)              (None, 48)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "l1_dense (Dense_with_tree)      (None, 40)           1960        input[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "l1_activation (Activation)      (None, 40)           0           l1_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l2_dense (Dense_with_tree)      (None, 23)           943         l1_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l2_activation (Activation)      (None, 23)           0           l2_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l3_dense (Dense_with_tree)      (None, 17)           408         l2_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l3_activation (Activation)      (None, 17)           0           l3_dense[0][0]                   "
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "__________________________________________________________________________________________________\n",
      "l4_dense (Dense_with_tree)      (None, 9)            162         l3_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l4_activation (Activation)      (None, 9)            0           l4_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "covariates_input (InputLayer)   (None, 8)            0                                            \n",
      "__________________________________________________________________________________________________\n",
      "biome_covariates_concat (Concat (None, 17)           0           l4_activation[0][0]              \n",
      "                                                                 covariates_input[0][0]           \n",
      "__________________________________________________________________________________________________\n",
      "last_dense_h (Dense)            (None, 1)            18          biome_covariates_concat[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "p_hat (Activation)              (None, 1)            0           last_dense_h[0][0]               \n",
      "==================================================================================================\n",
      "Total params: 3,491\n",
      "Trainable params: 3,491\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 3 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 821us/step - loss: 4.8325 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.7827 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 132us/step - loss: 4.8325 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.7827 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 129us/step - loss: 4.8325 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.7827 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 4.8325 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.7827 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 132us/step - loss: 4.8325 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.7827 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 4.8325 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.7827 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 135us/step - loss: 4.8325 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.7827 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 136us/step - loss: 4.8325 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.7827 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 150us/step - loss: 4.8325 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.7827 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 4.8325 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.7827 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 2.9579739570617676!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_2.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_2.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.00771331787109375!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [4.822571277618408, 0.6974999904632568, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 11us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008331537246704102!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [5.500122547149658, 0.6549999713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.4313085079193115\n",
      "[root    |INFO|deepbiome.py:193] 3 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------4 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 4 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:529]     Phylum_with_covariates: 17\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Number', 'Order', 'Genus', 'Class', 'Phylum_with_covariates', 'Family', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "__________________________________________________________________________________________________"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input (InputLayer)              (None, 48)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "l1_dense (Dense_with_tree)      (None, 40)           1960        input[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "l1_activation (Activation)      (None, 40)           0           l1_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l2_dense (Dense_with_tree)      (None, 23)           943         l1_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l2_activation (Activation)      (None, 23)           0           l2_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l3_dense (Dense_with_tree)      (None, 17)           408         l2_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l3_activation (Activation)      (None, 17)           0           l3_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l4_dense (Dense_with_tree)      (None, 9)            162         l3_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l4_activation (Activation)      (None, 9)            0           l4_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "covariates_input (InputLayer)   (None, 8)            0                                            \n",
      "__________________________________________________________________________________________________\n",
      "biome_covariates_concat (Concat (None, 17)           0           l4_activation[0][0]              \n",
      "                                                                 covariates_input[0][0]           \n",
      "__________________________________________________________________________________________________\n",
      "last_dense_h (Dense)            (None, 1)            18          biome_covariates_concat[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "p_hat (Activation)              (None, 1)            0           last_dense_h[0][0]               \n",
      "==================================================================================================\n",
      "Total params: 3,491\n",
      "Trainable params: 3,491\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 4 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 815us/step - loss: 5.0069 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.9820 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 5.0069 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.9820 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 140us/step - loss: 5.0069 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.9820 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 152us/step - loss: 5.0069 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.9820 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 5.0069 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.9820 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 143us/step - loss: 5.0069 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.9820 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 143us/step - loss: 5.0069 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.9820 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 5.0069 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.9820 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 5.0069 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.9820 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 136us/step - loss: 5.0069 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.9820 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 2.9251134395599365!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_3.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_3.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 4us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.009073734283447266!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [5.001923084259033, 0.6862499713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 11us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.007869720458984375!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [4.942139148712158, 0.6899999976158142, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.4080557823181152\n",
      "[root    |INFO|deepbiome.py:193] 4 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------5 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 5 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:529]     Phylum_with_covariates: 17\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Number', 'Order', 'Genus', 'Class', 'Phylum_with_covariates', 'Family', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input (InputLayer)              (None, 48)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "l1_dense (Dense_with_tree)      (None, 40)           1960        input[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "l1_activation (Activation)      (None, 40)           0           l1_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l2_dense (Dense_with_tree)      (None, 23)           943         l1_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l2_activation (Activation)      (None, 23)           0           l2_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l3_dense (Dense_with_tree)      (None, 17)           408         l2_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l3_activation (Activation)      (None, 17)           0           l3_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l4_dense (Dense_with_tree)      (None, 9)            162         l3_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l4_activation (Activation)      (None, 9)            0           l4_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "covariates_input (InputLayer)   (None, 8)            0                                            \n",
      "__________________________________________________________________________________________________\n",
      "biome_covariates_concat (Concat (None, 17)           0           l4_activation[0][0]              \n",
      "                                                                 covariates_input[0][0]           \n",
      "__________________________________________________________________________________________________\n",
      "last_dense_h (Dense)            (None, 1)            18          biome_covariates_concat[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "p_hat (Activation)              (None, 1)            0           last_dense_h[0][0]               \n",
      "==================================================================================================\n",
      "Total params: 3,491\n",
      "Trainable params: 3,491\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 5 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 883us/step - loss: 10.9553 - binary_accuracy: 0.3203 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 10.9553 - binary_accuracy: 0.3203 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 143us/step - loss: 10.9553 - binary_accuracy: 0.3203 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 143us/step - loss: 10.9553 - binary_accuracy: 0.3203 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 140us/step - loss: 10.9553 - binary_accuracy: 0.3203 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 147us/step - loss: 10.9553 - binary_accuracy: 0.3203 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 142us/step - loss: 10.9553 - binary_accuracy: 0.3203 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 151us/step - loss: 10.9553 - binary_accuracy: 0.3203 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 145us/step - loss: 10.9553 - binary_accuracy: 0.3203 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 10.9553 - binary_accuracy: 0.3203 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 2.923072099685669!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_4.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_4.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 4us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008688211441040039!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [11.000598907470703, 0.3174999952316284, 0.0, 1.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 11us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008328914642333984!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [11.363256454467773, 0.29499998688697815, 0.0, 1.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.4742579460144043\n",
      "[root    |INFO|deepbiome.py:193] 5 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:204] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:205] Train Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure']\n",
      "[root    |INFO|deepbiome.py:206]       mean : [4.4112738  0.62149999 0.8        0.2        0.        ]\n",
      "[root    |INFO|deepbiome.py:207]        std : [3.81447282 0.15249877 0.4        0.4        0.        ]\n",
      "[root    |INFO|deepbiome.py:208] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:209] Test Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure']\n",
      "[root    |INFO|deepbiome.py:210]       mean : [4.60621064 0.61       0.8        0.2        0.        ]\n",
      "[root    |INFO|deepbiome.py:211]        std : [3.96143335 0.15883955 0.4        0.4        0.        ]\n",
      "[root    |INFO|deepbiome.py:212] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:223] Total Computing Ended\n",
      "[root    |INFO|deepbiome.py:224] -----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "test_evaluation_with_cov, train_evaluation_with_cov, network_with_cov = deepbiome.deepbiome_train(log, network_info_with_covariates, \n",
    "                                                                                                  path_info_with_covariates,\n",
    "                                                                                                  number_of_fold=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The DeepBiome used the covariates at the latest hidden layer just before the last prediction layer (`biome_covariates_concat` layer in the above example)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input (InputLayer)              (None, 48)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "l1_dense (Dense_with_tree)      (None, 40)           1960        input[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "l1_activation (Activation)      (None, 40)           0           l1_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l2_dense (Dense_with_tree)      (None, 23)           943         l1_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l2_activation (Activation)      (None, 23)           0           l2_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l3_dense (Dense_with_tree)      (None, 17)           408         l2_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l3_activation (Activation)      (None, 17)           0           l3_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l4_dense (Dense_with_tree)      (None, 9)            162         l3_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l4_activation (Activation)      (None, 9)            0           l4_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "covariates_input (InputLayer)   (None, 8)            0                                            \n",
      "__________________________________________________________________________________________________\n",
      "biome_covariates_concat (Concat (None, 17)           0           l4_activation[0][0]              \n",
      "                                                                 covariates_input[0][0]           \n",
      "__________________________________________________________________________________________________\n",
      "last_dense_h (Dense)            (None, 1)            18          biome_covariates_concat[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "p_hat (Activation)              (None, 1)            0           last_dense_h[0][0]               \n",
      "==================================================================================================\n",
      "Total params: 3,491\n",
      "Trainable params: 3,491\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "network_with_cov.model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can analysis the effects of covariates by checking the trained weights of the last hidden layer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|<ipython-input-61-b8f281eeb9fd>:4] 5\n"
     ]
    }
   ],
   "source": [
    "weight_path = '%s/%s' % (prediction_path_info['model_info']['model_dir'], 'weight_0.h5')\n",
    "trained_weight_list = deepbiome.deepbiome_get_trained_weight(log, network_info_with_covariates, path_info_with_covariates,\n",
    "                                                             num_classes=1, weight_path=weight_path, verbose=False)\n",
    "log.info(len(trained_weight_list))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Firmicutes</th>\n",
       "      <td>-0.078098</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Actinobacteria</th>\n",
       "      <td>0.089572</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bacteroidetes</th>\n",
       "      <td>0.127772</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fusobacteria</th>\n",
       "      <td>-0.414926</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Proteobacteria</th>\n",
       "      <td>-0.021808</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TM7</th>\n",
       "      <td>-0.484972</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Spirochaetes</th>\n",
       "      <td>0.380611</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OD1</th>\n",
       "      <td>-0.057512</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cyanobacteria_Chloroplast</th>\n",
       "      <td>-0.160426</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ages</th>\n",
       "      <td>0.007915</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Weights</th>\n",
       "      <td>0.003014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gender_1</th>\n",
       "      <td>-0.065809</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ethnicity_1</th>\n",
       "      <td>0.105793</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ethnicity_2</th>\n",
       "      <td>0.275120</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ethnicity_3</th>\n",
       "      <td>-0.089100</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ethnicity_4</th>\n",
       "      <td>0.280661</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ethnicity_5</th>\n",
       "      <td>0.062933</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  0\n",
       "Firmicutes                -0.078098\n",
       "Actinobacteria             0.089572\n",
       "Bacteroidetes              0.127772\n",
       "Fusobacteria              -0.414926\n",
       "Proteobacteria            -0.021808\n",
       "TM7                       -0.484972\n",
       "Spirochaetes               0.380611\n",
       "OD1                       -0.057512\n",
       "Cyanobacteria_Chloroplast -0.160426\n",
       "Ages                       0.007915\n",
       "Weights                    0.003014\n",
       "Gender_1                  -0.065809\n",
       "Ethnicity_1                0.105793\n",
       "Ethnicity_2                0.275120\n",
       "Ethnicity_3               -0.089100\n",
       "Ethnicity_4                0.280661\n",
       "Ethnicity_5                0.062933"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trained_weight_list[4]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below is the phylogenetic tree plot for the network using covariates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAfQAAAJ7CAYAAAAV2GMaAAAACXBIWXMAAA3XAAAN1wFCKJt4AAAg\nAElEQVR4nOzdeXxU1fn48c/sM9l3EkDCHhYNi18QqVVbFK2oFaoiCP7UohYrS11YKiJbERVcCgUp\n1mqlRVyoIlVkqYJSISKyJaxhSyDbZJLJ7Pvvj0gkEMhkkkwWnvfrxUvu3HPvPXcQnpzlOUcRCAQC\nCCGEEE3I6/ViNBpJTU2ttWxeXh5XXHFFg9ehse4bLsqmroAQQogWzmMG23Fwl15waseOHXTv3h2f\nz1fjpfPmzQPAbreTlZUV1ONmz55dp+q98MILF33+ubZs2VKn+zY36qaugBBCiBbMUQCm3cCPnb2x\nPSCqc9XplStXMnHiRNavX8+wYcPYt28fy5cvx2AwMHbsWNauXYtarWbcuHGYTCY2b97Mtm3bKCsr\nY8iQIdx+++2888477Nu3j5iYGGbOnElpaSmzZ8+mrKyMBQsWcPz4cd59911KSkp49tlniYuLY86c\nOWg0Gu6++24++eQTAoEAo0aN4ocffuDbb79Fo9Ewd+5cXn/9dQA6duxIcXExAEuWLCE3N5f09HQm\nT54c7m80ZNJCF0IIETrrMaqCOYAlt+q3drsdm83Gb3/7W9asWQPA/PnzWbRoES+//DKZmZlkZmYy\nbdo0vF4vR48epaCggIyMDF599VU++ugjXC4XGzZsYOHCheh0OrKysrDZbMycOZNbb72V1atXk5GR\nwZAhQ+jTpw8rVqxg8eLFjB07lhdffJEBAwbQt29fpkyZQrt27fj73//OyJEjMRgMbNq0iZycHO69\n915GjBhBTk4OAHfeeSfXXnst69atw+l0hvPbrBcJ6EIIIepBcdHjDz/8kLKyMqZPn87+/fspLS3F\n7/ej0+l+Kq04/3po06YNACqVCpfLRWRkJABJSUmYzWbi4uJQKBQkJCRgNptZtGgRZrOZQYMGYTab\nMZvNJCcnX/AMl8uFx+PBaDQyYMAAMjMzAWjfvn1VWY/Hw1NPPUVmZiZpaWlYrdb6fT1hJAFdCCFE\n6KI7Uy2oR3ep+u3HH3/M6tWree2111i4cCErV65kxIgRTJo0iXnz5mGxWIiJiWHGjBl4vd4abx8T\nE0NERATz5s1j48aNXH/99ZSUlDBv3jxeeeUVRowYQWpqKps2beKjjz4C4Le//S3Tp0/npZdeYvfu\n3QwYMIApU6ZQWFjIgAEDyMrKYvv27TU+U6VSYbfbWbNmDUeOHGnQr6qxKWSWuxBCiHrxWsBtAnUs\naONqLe52u/F6vURERAT9CKvVSlRUVLV7KJVK1Gp1jef9fj8Wi4XY2NgL7mW321Eqlej1+hqf5fP5\ncLvdGAyGoOvXHEhAF0IIIVoB6XIXQgghWgEJ6EIIIerFhw8XLrxcOCZdWx66aDjS5S6EECJkHjzY\nsVcd69Gj46dZ7BMmTCAjI4NOnToxbNgwtm3bxvvvv0+bNm1IT0/njjvuYN68eXg8HkaMGEFGRgaz\nZs0iLi6OMWPG0KtXr6Z4rRZJWuhCCCFC5sJ10eOa8tCXLl3Ka6+9xqBBgzh+/DiLFy+mf//+3H//\n/SxevLhqAZknn3xSgnkdSUAXQgjRKGrKQ4fKvPDo6GgATCZTVW74hAkTGDJkCMOGDWP69Ol8+umn\nTVn9FkeWfhVCCBEyPXps2Kodn3U2D12r1fL111+zcuVKbr/9diZOnEggEKBdu3aMGzeOl156id69\ne5OQkIBWq2XLli0oFIqLppWJmskYuhBCiHrx48eHDyVKVKguWfbUqVP4fD7++c9/MnDgQIYOHUog\nEKhaAQ7AYrGg0WgkoNeRBHQhhBBhk5+fz/r16+natSs33nhjU1enVZGALoQQosU7fy9zk8mETqer\nWgf+ciCT4oQQQtTLKdMpvj36LUeKq699vnbtWm677TYmTpzI448/HtS9gt27/Hzn72W+Zs0afvjh\nhwvKbdiwIeh911samRQnhBAiZPvP7GfTgU1VxwM6DuBnXX4GVK6nPnr0aO6//36GDx8OwH/+8x+2\nbt2K0+lk4cKF2Gy2oPcuf/7551GpVAwfPpw9e/ZU2yP97F7mb775JidOnODYsWP06NGD7OxsVqxY\nAcCUKVNYv349FRUVOBwOkpKSqp07fvw47733HhEREcydOxetVhvOr7LeJKALIYQI2Z78PRccD+48\nuGrL0lWrVrFt2zbS09MBuP766/F4PGzcuJGvvvqK7du3M3bsWPr16wdQtXe53+9n4sSJPP/883z+\n+eds2rSJ77//ns8++wy3283LL7/MP//5T1588UWysrLIycnB6XTyv//9j7feeosZM2YAMHfuXCZP\nnozJZGLx4sUMHDiQpKQkbrjhBu67775q59RqNTfeeCO33XZbiwvmIF3uQggh6kGj0lxwfO4e56NG\njWLZsmVotVqys7OZNGkSHTp0oFevXnXeu7xdu3YoFIoa90g/e83ZHdISEhKAyl3YysvLUSqVjBkz\nplrdzj/33HPPoVAoGDlyJKdPn26Eb6txSUAXQggRskGdBqFWVXb2KhQKBnceXO38qlWrePrpp8nP\nz6dLly5ERERUdbtDaHuX17RHOkBsbCxKpZL58+ezYcMGAMaOHcsXX3zB7t27KS4upnfv3rzzzjts\n2LDhgnMffvghubm56HQ6NJrqP6i0BDLLXQghRL1YnBYKzYUkRScRHxFfa/mG2rv8/Puce825e617\nPB6cTmfV6nTnOv+cyWQiNjYWlerS+fTNkQR0IYQQohWQLnchhBCNyuPx0JBtx7y8vAa7V6j3Pfed\nzr/O6/VSWFgY1vqABHQhhBD15XSAuRzstmofu91uHnnkEWbMmMHkyZPZuHFjgzxu9uzZdSofbG77\n+bnsNanpnc6vj9FoZMmSJXWqY02Cec/S0lKWLVsGSNqaEEKI+rBZodz007HHDbGV4+hvv/02t956\nK7/5zW+AyrHy+fPn88c//pGjR4+ya9currrqKt59911KSkp49tlnyc3NZdu2bZSVlTFkyBBuv/12\n3nnnnWo556WlpcyePZuysjIWLFjA8ePHq90jLi4u6Nz2119/HYCOHTtW5bIvWbKE3Nxc0tPTmTx5\ncrXXremdVq9ezZ///Gf279/PtGnTqsbvjUYjc+bMwefz8bvf/Y60tDTmzZuHwWBg/PjxLFy4sNq5\nOXPmEB8fT2RkJFOmTKl65vn1WbFiBUeOHKF9+/Z07NiRDz74gKioKGmhCyGEqAeb9aLHBw8epE+f\nPlXHSqUSh8PBqVOnePPNN7nmmmvIyMhgyJAh9OnThxUrVlBQUEBGRgavvvoqH330ES6Xiw0bNrBw\n4UJ0Oh1ZWVnYbDZmzpzJrbfeyurVqy+4x+LFixk7diwvvvgiAwYMqMptb9euHX//+98ZOXIkBoOB\nTZs2kZOTw7333suIESPIyckB4M477+Taa69l3bp1OJ3Oaq9X0zsBjBw5kmeeeYZVq1ZVnVuyZAmP\nPPIIixYtYsGCBTidTqxWKy+88AJvvfXWBecqKiqqflA5ceJE1X3Or8/mzZu55557eOKJJxg4cCCD\nBw9m7NixEtCFEELUg+K8Y+VPYaVbt25kZ2dXHQcCAcaNG8fy5cspLCwkPT2dRYsWYTabGTRoUFU+\neZs2bQBQqVQ15pzHxcWhUChISEjAbDZfcI+65LYDtG/fvqqsx+PhqaeeIjMzk7S0NKzW6j+w1PRO\nZ+scHR2Nw+GoOldRUUFiYiJ6vb4q7e7ss2o6dzZ3Pj4+noqKiovW5y9/+Qt79uzh7rvvrpZXL13u\nQgghQhcbD8YSCPhBoajqbgd46KGHePzxx/nuu++w2Wz86le/YujQoeTk5PDQQw8BkJqayqZNm2pM\nWYPqOef79+/nnXfeYf78+VXHCxcu5Msvv6x2j7O57VdddRVDhw6tym0fP358VW673++nd+/eFzxP\npVJht9tZs2YNR44cueB8Te90MQ888ADTp08nLi6Ou+66q9ZzO3bsYMGCBWRnZ/P0009ftD7Lly9H\nrVYTHR1NYmIihw8fZvny5ZK2JoQQop78/sqxc7UGasjfttvtaDQaNBoNRqORSZMm8Y9//KMq1/ti\n+eTnOr+M2+1GqVSiVqtrPB9qbjuAz+fD7XZXrTpXk3Pf6VK8Xi9er7fGZ517Lj8/nzfffJOpU6de\n8Nzz6+Pz+aioqCA+vnrOvwR0IYQQYbN+/Xo6d+5M9+7dm7oqQcnNzeWDDz6oOh49ejQdOnRo8OfY\nbDays7MZOHBgyPeQgC6EECLsysrK0Gg0l2yZ5+fnVxvfPuv8vc9FJZkUJ4QQInSBAIe2/JvNS55h\nz7q3Cfh/yvdeu3Ytt9xyC0888QTz588HYN68eUDlNqo7d+685K23bt2K3++/4PMtW7ZUy7+uzaJF\ni+jbty8nT54M9q1aJJkUJ4QQImTfr3mDL5c/V3VcciyHmya+BFSOY48dO5YxY8YAld3Xa9euRa1W\n07ZtWz755BM++eSTqnzzGTNmoNVqKSws5PXXX6ekpASAffv2sXz5cgwGQ9Xe59u2bavKvzYajYwf\nPx6tVstLL73EtGnTqtXxqaeeoqSkpEFXq2uOpIUuhBAiNIEA+zeuqvZR9ubV1VrpK1euZPLkySxb\ntowuXbqQmZnJtGnTUCqVDBo0qCrfHGDv3r3MnDmTfv36kZWVxYEDB6oWo1m0aBEvv/wy0dHR5OTk\nVMu/7t27Nx9++CGff/55jV30lwtpoQshhAiNQoEhuvpMa0N0HArFT23FMWPGVLXQKy/5KW/63Hxz\ngJSUFIAL8rn9fj86ne68R/90n5tvvplx48bh9/uD7oZvjaSFLoQQImTXPTwD/Y9BXa3VceNj8yrz\n0X90toU+a9YsoDKvfMaMGUGtrX7WiBEjmDRpEvPmzcNisQBUz79WKOjduzdJSUk1poetXLmSzZs3\nM2fOHI4fP16Pt23eZJa7EEKIenFayyk5nk1C+25Exqc0yjPcbjder7faPudn2e12Zs6cyaOPPtpi\n0uEagwR0IYQQLdqePXsoLy/nhhtuwOPxsGjRoqpz1113Hdddd10T1i58JKALIYQIu3DnobtcrgvG\n4VsbGUMXQggRugCYs8opWnWGsi2lBHw/tRGbSx767373O5577jlGjRpVp7H7lkZmuQshhAiZabOR\n0v+UVB27z7hoM6ot0Hzy0N944w2gMrAXFxeTlpYWjq8m7KSFLoQQIjQBsHxfUe0jy24LnNOobi55\n6Pv27UOpVLbaYA7SQhdCCBEqBaij1bgLXVUfqaJV1fZIbw556IcOHeLVV1+taqm3VtJCF0IIEbKk\nO1JQRVW2DZVaJSl3pVYL6M0hD/2WW25Bq9UyZcoUCgsLQ3/ZZk5muQshhKgXv8uPp9CNJkmDMvLC\n/dAbguSh104CuhBCiBZN8tArSUAXQggRduHOQ3c4HBgMhjrXsyWRMXQhhBAhCwQClJaWkpeXR3Fx\ncbUtSptLHvoLL7zAnDlzGD58ODabLdhXa3FklrsQQoiQlZSUUFxcXHXsdrurWtXNJQ99+vTpBAIB\nJk6ciNFoJDIyMkzfTnhJQBdCCBGy8vLyascVFdXz0leuXMnOnTvJyMhg/PjxVXnoK1euZNCgQYwc\nOZKHHnqI22+/nb1797J27VpWrFhxQR7622+/XZW6lpOTw+jRo6vy0Dds2MCHH35IfHx8jV30ZrOZ\n6dOnY7fbJQ9dCCGEqIlWq8Xtdlcdq9XVw0pzyEOPjY1l6dKlLF26lK+//pohQ4bU+T1bAhlDF0II\nEbLU1FQ0Gg1QGZjbtm1b7XxzyEN/6qmnmDVrFps2beLqq68O8U2bP5nlLoQQol4CgQButxuNRoNS\n2TjtxPrkoft8PiwWC3FxcY1St+ZCAroQQogWTfLQK0lAF0IIEXbhzkO/HMgYuhBCiJD5/X6+/fZb\nVq1axZdffonH46k611zy0AHefvttbrnllqDLt0Qyy10IIUTItmzZwtatWwE4fPgwZWVljBgxAmg+\neej5+fkUFxcTHR0dxm8m/KSFLoQQImQHDhy44PjckdzmsB/6woULmTRpUuN+Ec2AtNCFEEKELC4u\nrqolffb43Bzxps5DP3XqFCdOnGDq1Kns2bOHjRs3cvPNN4f8vs2ZBHQhhBAhGzp0KEajkbKyMiIi\nIhg2bFi182dXiouLi2PWrFlVeejdunUL+hln89CTk5OrWtrn5qE/9thj9O7dm4KCggvy0Dt06MDH\nH38MVHa9t9ZgDjLLXQghRD0FAgHMZjMxMTHNMg/9ciEBXQghRIsmeeiVJKALIYQIO8lDb3gyy10I\nIUS9uAAb4ATObSE2lzz0u+66iyeeeILnnnsuqPItlUyKE0IIETInlQEdwAv4gbOj3M0lDz0iIoIR\nI0bQr1+/cHwlTUZa6EIIIULmqeW4OeShjxo1ivLyckaPHn3B/u2tibTQhRBChExFZav83ONzNXUe\nOsAdd9wBVPYQHDx4kEGDBgX9fi2JtNCFEEKETM9PgUQJGM473xz2Q588eTIzZ85kx44d9O3bt87v\n2FLILHchhBD1FgAUtZYKXX3y0D0eD3a7ndjY2EasYdOTgC6EEKJFkzz0ShLQhRBChEV5eTlqtfqS\nuedneb1ejEYjqampYahZ6yBj6EIIIULm9wfIOWli674C9hwz4vH+NEXu3Dz0jz/+mKNHj5Kfnx/U\nfe12O1lZWbWWq+u+6K2ZzHIXQggRspxTJnJPVwBQVuHE6fZyTY/KVvX5eehfffUVKpWKzZs3s3Xr\nVuLi4ggEAqjVag4dOsTQoUPZsWMHvXr1YtiwYZhMJoCqyXADBgxAr9fTvXt3unfvziuvvELXrl2r\n8tF//etfM2/ePDweDyNGjCAjI4NZs2YRFxfHmDFj6NWrV9N8SWEiLXQhhBAhKzY5zjt2Vlst7uws\n9z179lBYWEhpaSkFBQV069aNP/zhD+Tk5DBy5Ejuvfdevv/+e+bPn8+GDRtwuVwcPXqUr7/+msjI\nSF588UXuvvtu8vPzqaio/AHi/Hz0xYsX079/f+6//34WL17Mvn37iImJ4cknn2z1wRwkoAshhKiH\nqAjNBcfnznYfM2YMr732Gn369KlW7twFYNq0aUNkZGRVHvq5O7aZzWaSk5OrjtVqdVXKm8vlqpaP\nbjKZ8Hg8GI1GJkyYwJAhQxg2bBjTp0/n008/rfe7NnfS5S6EECJkV3ZKxO7yYba6iNSr6dc1qUHv\nf9NNN/HII49UteoHDRrE3LlzufLKK3G73dXy0ceNG8dLL71E7969SUhIQKvVsmXLFhQKRY356a2N\nzHIXQghRb16fH7Wq8Tp9y8vLiY2NRaFQ4HQ60Wg0VSvMnevs3uxxcXEAWCwWNBqNBHQhhBBCtAwy\nhi6EEKJZKisrw2q1Nvh9y8vLG+W+TU0CuhBCiJAFAh6cFV9iNb6Lw7yegN9ede78PPS6CmbP9HMF\nm5Nel3z4lkQ16+yK+UIIIUQdOS1bcNt+IOC34fOU4POWojX0BODAgQP07NmTadOm0aNHD9atWwdU\nbqzyyiuv0KVLF5555hm2bdtGWloaCoWCadOmsW7dOjp06EBRUREbN27kyy+/xO120717d5YsWcKq\nVauqdk374IMP+Nvf/sbu3btxOBy89dZbKJVKOnXqxHPPPcdnn31GZGQkkZGR/PGPf2TLli2kpKSg\n0+koLy/n1Vdf5b333iMzM7Nq3L2lkha6EEKIkHldJ6sfu0/BOZno5+ahn59Dfn6e+JIlS3jkkUdY\ntGgRCxYsAODqq6/m5ZdfZuXKlQDceeedXHvttaxbt46KigrWrFnDK6+8wtSpUy+Zk+50OrFarbzw\nwguUl5dTWlpKRkYGQ4YMoU+fPqxYsSI8X1gjkoAuhBAiZCp1Ug3HP+WGn5uHfn4O+fl54hUVFSQm\nJqLX6/F6vQAkJCQAlfnnHo+Hp556iszMTNLS0jCZTNXWhb9UTjpUz30HWLRoEWazmUGDBmE2mxvu\nS2kikocuhBAiZPqYGwn47Xjd+ag0yRhib7lo2fNzyHfs2FEtT/yBBx5g+vTpxMXFcdddd+Hz+Vi9\nejXff/89GRkZqFQq7HY7a9as4ciRI0RFRZGSksLs2bOJj4/n8ccfv2hOeqdOnS6oT2pqKps2bWo1\n26pK2poQQogG4CeYTt/zc8jPzxP3er14vd5qeeN2u71qH3Sfz4fb7cZgMFSdt1qt6HQ6NJrqq9ad\nn5NeE6vVGtTuby2BBHQhhBCiFZAxdCGEEA3Af9EzXq8Xv//i5y/l1KlToVbosiMtdCGEECHzue2c\n3rQUa95uDCldaH/zBDRRlRPlPB4PEydOJDo6GpfLRa9evXjsscfqdP8HH3yQt99+O+jy69atY/Hi\nxdx///088MADdXpWSyeT4oQQQoTszOZlGHdX5pc7S/PxOW10HbUQgLfffpuhQ4cyfPhwgKoZ7gsW\nLKC8vJzOnTvz6KOPMmPGDLRaLYWFhbz++uuUlZUxe/Zs2rdvj9vtvug1KpWK4cOH07dv36r63H77\n7ajVagoLC8P5NTQL0uUuhBAiRH4sp3ZX+8Ryag8EKlPODhw4QGZmJn6/n6effpo///nPbNu2jdLS\nUu6++242bNiA3W5n7969zJw5k379+pGVlcVf/vIXJk2axIQJE7BYLDVe8/333zNr1qxqwfxyJwFd\nCCFEiJREpHWv9klEmy6gqOz87datG/v370epVLJw4UK2bduGyWQCwGg0Mm7cOFQqVdU+6NHR0Tgc\nDiwWC/Hx8URGRqLT6Wq8pl27dtXyzoV0uQshhKiHdkMex2s3Yz21F0NKZ9LvmFZ17uGHH2b8+PFk\nZWWhUCjo2bMnN910Ex999BH79u3DarVy6623XnDP+++/n2eeeYb09HQCgUBQ15y1fft2li9fjs1m\no127dtx8882N8t7NkUyKE0II0QB8wIX7kwM4HA7UanW1PHGz2UxUVFSNe5oDuN1uVCpVtfO1XXO5\nk4AuhBCixXrnnXcoKCgAoEOHDowePbqJa9R0JKALIYRoVB6P54JV3ETDkzF0IYQQIfN5nJzJ/i+2\n0nwMsSm07f1LNIYYoHIDlieeeILExETy8/N54oknGDRoUNUOZ3a7nd69ezNhwoTLOn+8oUhAF0II\nEbLCA1soP30AAI/Tgs/rpvOge4HK7vDbbruN4cOH43a7GTFiBOvWrSM+Pp5XXnkFgCeeeIK9e/de\n1vnjDUXS1oQQQoTMVnam2rHddBp+HMk9ePAgmZmZAGi12hrTzK6++moOHjzY+BW9DEhAF0IIEbKI\nuDbVjg1xafBj4O7WrRvZ2dlA5XruNU3Z2r17NxkZGY1f0cuAdLkLIYQIWWrPX+DzeLCZ8tDHJNP+\nqp/2Q3/wwQd57LHH2LlzJ8eOHWPq1KkAlJaWMmXKFOx2O506daJPnz6Xdf54Q5FZ7kIIIRqVzWYj\nIiJCVnZrZBLQhRBCiFZAxtCFEELUW2i7nYfG4/E0ymx4r9fbomfZS0AXQggRsgqfl7knjzEqew9T\njx3mjNtVdW7t2rXcdtttPProo7z88suXvE9paSnLli0L6plFRUW88cYbdarnvHnzai1jt9vJysqq\n032bE5kUJ4QQImR/PZPP/8xlAOy1Wngl7wQLu1TOWvf7/YwePZoxY8Zwyy238NBDDzFv3jwMBgPj\nx49n4cKF+Hw+fve733H8+HE++OADoqKi6N+/PytWrABgypQpaLVa5syZU1U2Pj6enTt38vzzzxMZ\nGcmUKVNYsmQJubm5pKenM3nyZPbt28fy5csxGAyMHTuWtWvXolareeaZZ3j55Zdr3Ft9yJAhmEwm\nDhw4wLvvvktJSQnPPvssHTt2bKqvt06khS6EECIkfuCw3Vbts0N2G75zjletWsX48eO54YYbcDqd\nWK1WXnjhBd566y0eeeQRFi1axIIFCxg4cCCDBw9m7NixzJ07l/vuu4+hQ4eyePFilixZUq0sQFJS\nErNnz6asrIwTJ05w5513cu2117Ju3TqcTifz589n0aJFvPzyy2RmZpKZmcm0adPYvn37RfdW7969\nO0ePHiUjI6NqNbuzP1i0BBLQhRBChEQJ9IyMqvZZz8ioanuujRo1imXLlvHHP/4RgPbt2wNQUVFB\nYmIier0er9dbbQa81WqlvLwcpVLJmDFjLigLkJCQAEB8fDwmk4mnnnqKzMxM0tLSsFqt+P1+dDpd\n1T3P3j+YvdUXLVqE2Wxm0KBBmM3mhvmywkC63IUQQoTskbT2uPx+sm1WOhkM/L5dh6Cue+CBB5g+\nfTpxcXHcddddJCYmcvjwYZYvX87YsWP54osvaNOmDTqd7oKyADt27GDBggVkZ2fz5JNPYrfbWbNm\nDUeOHAFgxIgRTJo0ieTkZCZNmkRMTAwzZsxg6tSpte6tnpqayqZNm4iNjW24LyoMJG1NCCFEvfmp\ne5ev1+vF6/Wi1+svOOfxeHA6nURHR1+0rMPhwGAwAODz+XC73VXHULmnutfrJSIi4oL717a3utVq\nJSoqqsZzzZUEdCGEEKIVkDF0IYQQjSYQCOB0Oi96Pj8/v873zMvLq0+VWi0J6EIIIULmc/vI35fP\n4a2HOfXDKdx2d9W5HTt2MHr0aObMmcPSpUtrvH7r1q34/XVblmb27Nl1Kr9hw4YWnV8eLJkUJ4QQ\nImRFuUXYSitT1xxmB4UHC+nQv3Ji3KZNm/h//+//VZt49uyzz6LVaikrK2PBggWUlJQAVO2P3rFj\nRywWC/v27SMmJoaZM2dWyymfOXMmZWVlzJkzh8LCQl5//XU2bNjA1q1bcTqdLFy4EIfDwbx58/B4\nPIwYMYL169dTUVGBw+EgKSmpWo778ePHee+994iIiGDu3Llotdpwfn0NSgK6EEKIkLkqXNWOnVYn\nBAAFPProozz//PMsXbqUe+65h7Fjx/Ldd9/xxRdf8MUXX7B69WoOHDiA3+8nJyeHWbNmkZyczMMP\nP8w///lPXnzxRbKysnj11Vd5++23q9LQPB4PM2fOZMWKFWRlZXH99dfj8XjYuHjtP5MAACAASURB\nVHEjX331FVlZWfTv35+uXbvy0ksvMWLECJKSkrjhhhu47777mDx5MiaTicWLF6NWq7nxxhu57bbb\nWnQwB+lyF0IIUQ+GeEP141gD/JjSnZyczNKlS/nkk0/461//CkBcXBwKhYKEhIQLcrzbt2+Py+Ui\nMjISqFw8xmw2X5BTnpKSAkB0dDQOh4NJkybRoUMHevXqhdlsxmQy4fF4MBqNTJgw4ZI57s899xwK\nhYKRI0dy+vTpBv9+wkla6EIIIUKW0jmlcuJbmRNdtI6UrilV595//3127dqFQqFgwIABAJSUlDBv\n3jz279/PwoULycnJqXa/mJgYIiIiqsq88847mEymajnl54uIiOA///kP+/fv55577mHcuHG89NJL\n9O7dm4SEBAYOHMiLL76I3++/IMd9z549nD59Gp1Oh0ajadwvq5FJ2poQQohG43A48Pv9Va3ucePG\nsXTpUpRKJWr1xduU5+eBXyqnvKbygUAAs9lMXFzcBWXPz3E3mUzExsZeNCe9pZCALoQQImy+/PJL\nfvGLXzR1NVolCehCCCHq7cd5cKIJyRi6EEKIkDm8PrIKyjHZ3UTrNAxMiyNGVxlannjiCQoLCykp\nKeGqq65i/PjxXHPNNWRnZ5Oens69995L3759eeihh/jTn/4EwBdffMGhQ4dQKmXOdl1JQBdCCBGy\nvcUWSn9cTKbC5WFnYTm/TE8CYMmSJXzzzTfs3LmTyZMnU15ezk033cS//vUvHnroIVQqFX6/n7S0\ntKr9zNVqtQTzEMm3JoQQImQVLs95x14uNY6bmppKYWEhK1euZPTo0dXOvfXWWzz88MONUMvLgwR0\nIYQQIUsyVF+MJSlCW+tY+nXXXcc333xDp06dqj7z+XxkZ2eTmZnZCLW8PEhAF0IIEbKrUmLoHBdJ\njE7NFdEGBqRemCZ2vrvvvpv333+/2mfr16/nlltuaaxqXhZklrsQQgjRCkgLXQghhGgFJKALIYSo\nv0DdtkA9X3l5OVar9YLPPR4PhYWF9br35UICuhBCiNB5nZC3A45ughPfgMtSdeqRRx7BYrFw+vRp\nevToAcB///vfGvdGP3r0KPn5+Rd8XlRUxBtvvFHts3nz5jXwS7QOqlmzZs1q6koIIYRooQqzwVFa\n+Xu/B5xmiL0CAKPRiMlk4uDBgyiVSnr16sW///1vhg0bRklJCfPnz2f9+vVkZmZSUFCASqVCqVQy\ndepU9u3bx5YtW+jbty9vvfUW2dnZfPfdd6SlpTF//nxKS0vp0qULU6dOZdu2baSlpZGcnNyEX0TT\nkxa6EEKI0Hks1Y/dNvgxE/2GG25gy5Yt7NmzhwkTJrBlyxZycnLo3bs3c+fO5b777mPo0KEsXryY\nwsJCSktL+ctf/sIf/vAHJkyYwI4dOwBIS0tj7ty5HDx4kM6dO5OZmcm0adPIyckhJiaGJ598kl69\neoX5xZsfCehCCCFCF3FeqzgikbOrunfp0oXc3Fy8Xi+9e/dm165dGAwGFArFBfuSn2W324mKikKv\n11dtZ9qmTRsAdDodPp+van/zIUOGMGzYMKZPn86nn37a+O/azMnSr0IIIUKX1A1QgrMUtDE/Hv8k\nKiqK1NRUoHIv9Ouuuw7ggn3Jz3r44YeZMmUKnTt3vuj2qjExMcyYMYPbbruNLVu2oFAo0Ov1jfN+\nLYjkoQshhGgS5+9LDmCxWMjPzycvL4+tW7fWOgHOYrGg0WgkoCMBXYhm59y/kJ5AAIfPi93nx+H3\nYff7qn7v8Pmw+/04/X58gQC+AHgDAfwE8BLAFwhUHv/4V1ytVKJGgVpx7i/O+b0SjUKBQakiSqUi\n8sdfZ3+vU6qq1VO2yhSNweFw8MEHH2AwGBg+fPhFW+niQhLQhQiTwDn/NXk8FLqdmDwezF4v5V4v\nZT4vZq8Xs9dDuddLudeDzedryipXo1EoiFKqiVSpiFCriFWqiNdqSVRrSNRoSNJoSNRUHsdqNFUB\nXwK/EOEhAV2IBhT48ZfR7eK0y0Wh20Wxx0OJx02Jx02R202px423lf+1UysUJKo1JGi1JKrVtNXq\naavT0V6np51OR6y6crKTBHshGo4EdCFCEKCyO/y000Gey0m+y8kpl4vTLienXU4c/vqtmtXaRavU\ntNXpaKvT006rpZ1WzxU6PekGAyqFQgK9ECGQgC5ELQJAucdDrsNOrtNOrtPJMYedMy7nJfd9FnXT\n1xDNwEA0MVoN8ToNsXoNcToNsQa1BHkhgiCzDYQ4R+X4tpuDDjtH7XaOOe3k2u2Uej1NXbVWr4Pa\nQMANZpcHs8sDFZWfK4BonboyyOs0xOkrf6mUEuSFOJcEdHFZ8wUCHHc6yLFZOeCwccBmo8jtaupq\nXZaSlTX/cxQAKlxeKlxewAH8FOTjtJXBPTFCS6xeIytlicuaBHRxWXEHAhy0WdhttXLQbuOg3YbD\n33xmkl/ODAElLoKbe3BukD9lqQzyWpWSJIOWJIOW5CgdMVq1tODFZUUCumjV/MAxu40frBZ22yxk\n26y4ZMJasxTw1u96t8/PGauTM1YnlIBOrSTZoCM5QktypI5IjUoCvGjVZFKcaFUCQLHbxU5LBbtt\nFvZaLFT46hkpRKOLUWkYqW7cnbIiNKrK1nuEjuRILRFqVe0XCdGCSEAXLZ4fOGSzsqOigixLOced\njqaukqijAYYY+vqjwvrMfi4PUdEGohOj0cfIsqGi5ZMud9Ei2f1+dlWY2WExs7PCTLm0wlu0KzR6\nCONcxFgFuE0OTCYHphMmNAYNkUmRxCTFYIg1yIo3okWSgC5aDJvPx7fmcr6uKGOXpaLVr7Z2OUlU\naCCMWf1tzp0HqQCP00N5fjnleeWodCoiEyuDe0R8BAqlRHfRMkhAF82aw+9nu7mMrRXlfF9hxiNB\nvFXSB5Q4CV+2gcHpocY+HQX43D4qCiqoOFOBUqMkMjGS6MRoIhMiUaolMU40XxLQRbPjCvjZYS5n\nq7mc7yxm3DIrvdXze8P3Z6wGfBZn7QUVlfWyFFmwFFpQqBREJEQQ2yaWqIQoFCppuYvmRQK6aBbO\nTmzbWG5ia7mpWe0yJhpXokqD2xe+npc0IOCv4/MUldfYjDZsRhsqjYro1Ghi28Sij5IJdaJ5kIAu\nmpTR42GTycjmchP5riBaTaLV6a6PoOb+78YR6/HXe7Te5/FRnlc55q6L0RGbGktscixKjXTJi6Yj\nAV2EnTsQYFu5iU3lJn6wVMgGJ5e59ip9WAO60uJq0NF6V4WL4opiSo6UEJUSRWybWCLjIpF1aEW4\nSUAXYVPodvFZqZENZUbMXkkzE5XiFWoCdfix7quPP+DaW2/n1OGDAHTL7Bf0tQkKBT5X42y0EwgE\nKsfbiyxo9BpiUmOIbROLRq8GhYy3i8YnAV00Kj/wfYWZdSYj31WUS2tcXEDnr9sM97yjh8g0/5wN\nq9/F7XQw6aUlKFXBrfqWHKbJdx6nh9ITpZQeLyUmyUNkioHo5E4olNJsF41HArpoFBU+HxtKS/i8\n1MgZj+xeJmqmAHx1nBDndjpZPmsq4+ct5JM3lwUdzAH0F0tXaywKsJbvxXiqAF1kAomd+xPXticq\ntTactRCXCVn6VTSoMy4n/y4tYaPJKJugiFqlqrTcoU4KquzBXd+R0e//UCgUBAIB/D4vWZu/4Npb\nbg/qeq0CuhdYCOc/eWqdE7tpU/XPtAbi0/uQmN4HjS68y92K1k1a6KLeAsBBm5WPjMX8z1wm3eoi\naF3rMMPd7/ORnfU/vvz3B2h1Ojr3voprb70j6GelBRRhDeYASmX+BZ953Q5KjmzHmPsdce16ktTp\navRRiTLOLupNAroImR/Ybi5jjbGYbJu1qasjWqB2Qc5wP3noAN/852O6XNmHEY8+QXK7Kziesw/q\nEKBjXN4gd1tvGEqlH3t57kXPB/w+yvL2U5a3n6iUTiR1upqoxA4oJLCLEEmXu6gzTyDAf8tK+aCk\niNOSOy7q4bGY9vhdwYVZu6WCFXP+SFJaO47s+4Hufa5m9OSpQT8r02TH5wrfCLo2sghr8Xd1ukYf\nnUJSl/7EpWagUEl7S9SN/B8jguYJBNhoMvJ+SRFFbpnoJupPi4JgfyQ8vGcXNw6/lz6Dr8fjdrNh\n9btBPycRRViDOQHw2C7eOr8Yp6WY/N3rKdJvI7nbNSS0vxKFUvZtF8GRgC5q5Q4E+KK0hA+NRRS7\n3U1dHdFKKACPJ/hO8K6Z/Vg242kKThzDbCqlQ7eMoK9NDuPSsgCaCCs2oynk6z1OC2f2baIk9zva\ndL+WuLSekvImaiVd7uKiXAE/60uNfFhchNErgVw0rA4aPbcoE4Iub60wk3fkEADRcfG079It6Gv7\nWN14g9mQpYGodTnYTcca7H7aqATadBtMXFp3mTwnLkpa6OIC3h+71v9VXIjRI4FcNI4u2uBnuNsq\nKvj7/Jl43C4em/USWZs/Dzqg61DgtYYvmCvVHhxlJxr0nm6ribwf1mHMTSal+8+IadOlQe8vWgcJ\n6KKKH/jWXMY7RWfIc8pkN9G40lS6oAP6iUPZXHvr7RzP2U9kTAynjx0N/jkKCGcupVpXhDPQOPPp\nHRUlnNz5MRHxaaR0H0x0UsdGeY5omaTLXQCw32rhrcIzHLBL+pkIj/Gx7fE6gwt8LqeDJdP/gNfj\nJi29M31/dgOZg38e1LWZLh8+k60+VQ1eIIDftwWvKzx/j6ISryCl+2AiE9qH5XmieZOAfpk77rDz\ndlEBWRXlTV0VcZmZGH0FDnfwa7j7fT5y9+8hJiGRNlekB3WNIgBXmez43OGZ4a6NKMNasi0szzpX\nQoeraNfjRtDIkrKXM5k2eZky+7wsPn2K3x85IMFcNAl3HTZK+WLVOyhVKspLjajUwY8UJqEIWzAH\n8LlPhu1Z50qM6wjFhWAuA1ly+bIlAf0y4w0E+NhYxLiD+/mstESWaRVNorMmAp8/uP/7rBVm7BYL\n2zd+Rt7RQ3y47PWgn5MUxuCm1rpwmC9c6rWxRcW3Q6/UVx5YLVBUALJy42VJAvpl5HuLmd8fOcDy\nM/lYfcF3dQrR0Dpr9UGX1en0HN7zPVmb1jN83O+JiIoO/lp74+x9XhOl+kydynu9PkpMFfV+bvv0\nQdU/8Pug3AQlRSALQF1WZAz9MnDG7WLF6Xy2W6RrXTQPY2LSMLjqnk9dlHeSClMpHTJ6otMbLllW\nr1DQ5Yw51CrWiULhx+vcjM8bfAD9+0df8otrrqSsword4eJnV/eo83MT03rRtk3vSxeKjIKYOJCF\naVo9+RNuxdyBAO8WnuGxQ9kSzEWzEqMIbTnTNlek061Pfz55c2mtZVPD2FTRRpTWKZgDnC40kVdo\n5Msd2Xz65fe46jrWr1CQ2vbK2svZrFB0RrrhLwMS0Fup3ZYKfn8oh38VF+CVThjRzKh8oa925vN5\nUWk0tZaLCePa7e46rNt+9GQhAEN/3ocT+SVMeuA2Ig16dNq6LQvSttM1KINd0tbvr+yGLy4E2VCp\n1ZKFZVoZs9fLioJ8NpeVNnVVhKiRCkWdZrgfP5BNRFRUVaraiQPZdOpx6W5mRQACYVrqVW2wYTca\ngyrr8/kpMpazc18u3TqmMfau6zlyooCRwwbX6ZlKlZaEuPS6z2j3uMFYDBGREBsHsvFLqyJj6K1E\nANhoMvK3gtNU+MK4q5QQddRdG8kNitigyn769l9RKpWYigvpe92NpKV3wu/zER2fgCEy6qLXtUFB\nUkF4xs81+oPYSoNbuW7DN3vo06MjcTERfLh+O3sPneI3t1zDwMyudXpmes9fEqNLDKW6P1EqITa+\nMriLVkFa6K1AgdvFa/kn2Wu1NHVVhKhVJ40+6CVfTUWFDPnNfeQfO0Jxfh5Jae1IS+9U63UJvvCk\nqynVPuxlx4Muf2X3DryxagMB4Ld3/5J7bxvMkRMFdXqmRh9DjCEJgkz7uyi/H8pKwemAuHhprbcC\nMobeggWAT4zFjD+cI8FctBht1Lqgy6Zn9GT57GkUnDzBkb27ggrmAFpbeDYVUmuLCPiDTwGNiTIQ\nadAz4uaB/O3D//L86+/TvWNanZ6Z3v3n9Q/m53LYK3PXHfaGu6doEtJCb6EKXC5eOy2tctHyRAWU\neAiuBX3jXfeQOfh6ivJOcseDjwZ1TQTgtTV+/nUgEMBlDX6TGIDiUjNxsZFk9kgns0c6y9/biFod\nfMs4IjYNgyoSGnqk1O8HkxH0BohPlBS3FkoCegvjBz4rLeGtgnwcssSjaIFUfghmuZcTB3NY+/c3\nKDhxnISUNgwd9QB9Bl9f63VpgfDsF66NqMBmrNvCMJ2vaMN/v93PzNdWo9GoGTL4qjpd36HTtQ0f\nzM/ldFSmuMUlgCGi8Z4jGoUE9BakyOPm9byT/GCt/+pSQjQFnUKBK8gZ7t9+sY4Hpz7Pts/XEpeU\nTEJKm6Cui3R5CMc6iH5v3dZt33foFFu+y2HItVcx5tcp+Px+Ig3BDz8ktOmGhjCMc0trvcWSP6kW\n4qsyE78/nCPBXLRoXXWRQTcwu/Xph0KpJO/IIY7s3Y0yiElbCgJgafzudpXGjaP8VNDlnS4PX3y9\nhyu7XYGp3MKu7GN1CuYAqe361rWa9eN0yNh6CyMBvZmz+/0syjvBi3nHscn666KFS9cEt4a71+Oh\ne2Z/ouPi+eVv7qP/9b+gXefaU7tSUeLzNv7fE5WmbjPTLTYHUZF69hw8yeD+GWzbdahO16d2/D9U\nTTHC5veByYjXaSEgWzk1exLQm7FDdhsTD+ewSRaJEa1EG0XtK7yVlRSx86uN5B2tDHpdruxDsMtl\nxNdhwZpQKRR+nOXBT4bz/vgDhl6rYe/Bk8z68wfcVIexc6VSTVJC5zrXs6H4tRrs+gBWrPjCMpgh\nQiVj6M1QAPiwuJB/FJ2RZVtFqxKJGlctQaHCZGL9P98mMTWNr9d9jD4igisH/Syo+2tsrmBT3EOm\niSjDZXUEXf7dT7byi2uupE/PdDq2T+a6q3vUaWZ7+27XoWjINLU6ciRGEcBPgMqgbsCAFm2T1Udc\nnAT0Zsbk9bDw1AkZK2/GAl4vliNH0SYmoE9JaerqtCiKIBrQ6Rk9+dWYh7jmpl/h9XgoNxaTlNau\n1uuiFOC1N37+udcR/EIy8NMmLN/ty6W41My1/TKC/odXo40kNiKlcWe2X4IrMQavsvofmgMHXrwY\nMKAgPBkFIjgS0JuRvdYKFpw8QZkvfHs4i+CU795LwRcbcJWUoFCpMOccoPuE35M69KamrlqLoVcq\ncXqC67I9c/wYgUAAtUYTVDAHaONv/OCi0ttxlBbW6ZqhP+/DoWNnmPTAbcx/49912oSlQ/cbmiyY\n+yL0OPU1f6cePPjwEUEEqnDMvBdBkbXcm4EA8H5xAf8oKsAvfxzNkuPMGZRaHZ6KCk78YyVtbx9G\nwv/1b+pqtSiZ+miuCUQHVXbpjKcwlxrp0juTPj+7gYx+/1frNX0cXrzljTsjW6M/jK30cEjXHjlR\nQACCXhnOEJNM1y6/aJKAHlAqsKbG4ldc+tkKFOjRSxd8MyEt9CZm9flYmHeCHRWyX3lzZmjbFtvJ\nU/ww+Sky/jAJQ9vUyn9oFdLlGKx0rR6CzCj71f0PExEVhUKhoMxYUmt5JQH8jby7mkLlw1F+LOTr\nu3VMo9xiZ+/Bk2T2SK+1fIfO1zVZ69yZVHswBwgQwIEDHz706KULvonJLPcmdNRuY+LhAxLMW4jI\n9A4M+OsyFColR5Ys47833ozbZGrqarUYydQ+wx0qd1jL+e5bNqx+l6L8UyS2Sa31mlSFEn8jb8ii\n0Zfgr+dOhmu+2EGHdsm1lotL7oy2idpbntgo3Jq6/SDhxo0VK/4gl/QVjUNa6E1kvcnIstN5uAPy\nF6ClOP7Ou5j37Uep1RGd0Z32vxmOOjq4LmQBEShxBfEPfk07rNUm3t3I6VQBcFuCT1UrLjXz4frt\n9OjSjl8OuhIAq92Jz+cjLrr2JVXbXnE1TREb/Vo1jig1hJBz7sdfNQteE+QPb6JhSUAPM28gwPKC\nfNYZi5u6KqKO0keNRPn/xhL4cQ19hSyJWTdBxtyzO6z1v34IRXknGHL3qFqvUdvdjZqupomwYDMG\n35P2j39vZdQdP2Pt5p2kJsXRNiWew8cLGD70mlqvTenQt2kWkQEcidEE6vGTRIAAduzo0KEnuEWE\nRMORf5HCyOLz8dzxoxLMWyilVsvRpcv538j7yZ7zJ0w7dzV1lVqMaKUqqDXcf/j6S2ITk/jDomV0\n6tGLux75fe33RtHo6Wp+X93WbXe63Pz32/2MvG0w/92+H51Ww8A+XUmKv3SPjkKpIiUpoz5VDZkr\nIfqCFLWQ74ULGzZZXS7MJKCHyUmng8mHD7Bb8stbLJexFIVGwxX3/IbukydQ8vU3DXbvkq1f4zFX\n4Pd4+OEPT/PDU1NwGY0Ndv+m1k0fFVS53P176JbZj4SUNqSmdyIna3ut17Rp5IljKo0HZ3ndAvov\nB1/F51t+YPl7G0lJjMWgD24WePsug1E0wS6KPoMOp6Fhw4EXLzZsMq4eRtLlHgbfVZSzIO8EdlmL\nvUVTGQwEfF5ie/fi6Bt/RZ9c++SmYBn/t53k63+O6ftdxPfvT+rNQziz7jM6PfhAgz2jKXVQaYPq\nch94060sm/E0fa67gYO7vmPMU8/Wek2k09uo3e0qTWHQS8/6AwG+2XmQ9qkJrHxlIi6XJ+hgrtYa\niItqC2GeVxNQKrDHGwhl3Lw2PnxYsRJJpOSrh4EE9EYUAD4qLuStwtPS8dQKqCMjiO7enZiM7vgc\nNxHw+yjb9QMxvXqi0tdvvFAVGYnbZKIiO4fo7t1R6fX43Y2/6lm4JAaxhjtAh249mPDi6xw/kM3g\nW+8gKjbukuVV0MjpagGc5uAnw/3j31tomxLP7MUfkBgfw/hRN9MtyLzzDt1uCHswB3AmxQSVohaq\ns0vGRhAhk+UamQT0RuILBFhyJo/1pbXn0IqWI75vJgdfeR2v1Yq7rJzYnj2I6dmj3ve94u7hZM+d\njzo6mvQxo/E5nFxx94gGqHHzEIEKZxBN9DPHc9Hq9fS8emBQ902jcdPVdBFmLCW2oMs7XR4CAXj2\n8d+w9bsDxETVPqMdQBeZSKQ2Jux5596YSNxhirF27OjRo6Nu28aK4MlKcY3A4fez4NQxsirMTV0V\n0cBOf/ofojp3IrZ3L9ylJoq/2YZKoyH11qEhz3ov270HR/5pXEYjLqMRt6mcjmNHN8gPCs3F7yPa\n464l8P7w9Zfs/uYromLjKM4/Rf8bhnDtLbdf8preHj8YrQ1Z1WqU6l04zWcuWcYfCOByefj0vzu5\n+1fX8vmWHygoKSfvjJHZk+4N6jnd+/wanSK8q60F1GosbaLCPnFNg4YIgvtBR9SNtNAbmMnr4fnj\nRznqaNwlKEXTiO+Tycn33ufUqtW4jKWooyJpd9ev63VPn8NBwO/H73bT+aEHsRw+grOwqNUE9HiV\nutZgDuCwWrjjwUeDXrsdQN2Iu6uptS7sZZcO5gAVFjuz/vwBWo2a227sz7Ab+/Pxxu+459ZBQT0n\nNjE97MEcwJ4c/mAOlevAnx1Xl5XlGpYE9AZ0yung+eO5FHqCXN9ShEXFwUMUbtiE7fhx+r26sF73\niuhwBZ0eGIM+tQ0Ah179M0mDB9UrJz3p2kEYt/0PTWwM2sQEdMlJFG/ZSsovbqhXXZuL7rrIS06I\nO3noAMnt2mM2lfLGzClc0TWDjP7/xzU3/QrFJZbWjVMo8DoabyMjhSovqHJxMZE8fv8tOF1uXvrr\nJ+h0Grp2SCU2iAVkANqmDwj7IjLu+Gi8yqbrnD07WS4iYEClkDDUUOSbbCD7bRbmnDiGpZ5LQ4qG\nc3jxUiwHD+IxV5Dx9B8wpKViPZpLVNcu9bqvLiUZ67HjmPfuw3aybulMF5M46BqOLF1O0eYv0SUm\n0uXR3zbIfZuDK1T6Swb0QCBAWXERR/ftIT45BUNUFPaKiksGc4DkRhw7Vyr9dVq3/bMtu5j84DAy\ne6TjcLqDntme3P4q1GHYJe5cfr0OR0QzyFj2eVCdyYGk7mCIb+ratAoS0BvA/8xlvHjqhCzj2sy4\njUau/sufKdu9B+vRXHTJyVhy6x/QizZ/iT0vn7jMq+i38MUGWTFOoVLRfcLj9b5Pc5SgVF+ya7dj\nj14ATFjwGoFAgLyjh1Brag+IEa7GS1fT6I04LcFlGXy98wCmcis+nx+VShl0MFcoFKSk9AR/GFvK\nSiX2hAiaZF3ZcygCfqLOHAGnGc7sgtS+EJnYpHVqDWRSXD1tMpXy6umTsu1pM3T647Woo6PwWm2U\n7foBhVpNxpOTUEdGNtgzfA4HliNHicu8qt73Ov3xWuynz+AuLcXv8aBQKun4wBiiunRugJo2nYkx\n7XG46h5AXE4HOr2hxnNqFPQoqiDQSMFQwbe4bKW1lisuNfPB59/idHspKC7j+gE9uXNI7Vu9ArTv\nOpj4qODnCzQEZ3Isrqbe6TQQILogF+W5369CCamZEJXSdPVqBZpBv0vL9YmxmEX5JySYN1Nt77wd\n2/ETuE1ldHvicaIzutc7LchZWFR1D9P3u9g/509oYmIaorrEXnUlHe6tXIUu4or2XDl7ZosP5gCh\njkJ98ubSi55Lg0YL5mqDNahgDpVrtt9180Ai9Foe+s0vgtp4BUCl1hEXc0V9qlln3qiIpg/mQHRJ\nfvVgDpX59wV7oKKAxljg5nIhXe4hWlVUwD+Kap8BK5qOQqkkrl9f8j/6N7l/ewu1wYDlaC7xffuE\nfE/LkaOcWv0+XocDpVpN5p/mNNgmLVFdOhPw+3GXlmI5kovf40GpCT1J2F1eTvkPe1CoVSjUapRq\nNZq4OKK7da1XPY/97e9Yjubid7tpf9evSf75zy5aNkWtDWqG+/l8Pi+qS7x7nNvXaJ3GCn9wk+Gg\n+prt/1r3Db+9+5dBXdeh+/VhXeI1oFbhiNXR1F3tkaYilBdNAwxA0T4IcJU4kwAAIABJREFUeCG2\nPcgM+DqTgF5HAeBvZ07zkbGwqasighDbqycJ/fvBjxOsCjdsqtf9kn/+MyI7dcS8Pxvr0aNkz52P\nQqGg24TH0cbXb2JP3odrMO/PRpuYSMf7R9UrmAPg9+O127EezcXncBDZuRPmffu5au6skG8Z8Pnw\nORz0eWEeAAcWvHzJgN5NF0koA90nDmTTqUfvi55X2BpndTilyou97HjQ5X85+CqW/ONz8gtL6ZKe\nGtT4uS4ijihdfFgXkXEkxTT5muqGChPq0hO1Fyw+AH4fxKcjQb1uJKDXQQBYfPoUn8vqby2GylB9\nDFabmFDve0a0b0dE+3bAUAACfj/Wo7lUHDhI0uBrQ75vwv9djc/hwFViJP/jT1Bo1JRu30Hn3z4U\n0v20CQm0HfYrynbvwVlUROpNQ7AcPBRy/aBy8p79VD4lX39DwO9HUcsPHe1U2loD+pf/Xs3ub77C\nXFpKbGIS9/9hGtFx8bTtVPPkxTiFAp+zcabDqXVFOCtqD3x2p4s9B04yuF93BvXtVqc12zt0/XlY\ng7k7LgpPU+3H+iOdrQJtUfBL6GI8XNlST+iCBPXgSUAPUgB4Je8Em8qCG1sTzcfpteswfrud+P/P\n3nkGRlGubfia7T29kkoIgdC70kRBRLH3eizH9tk46rF7ULFhw95QsCuooIgoItJ7ryGF9N779t35\nfkQ4HtnZTTYVzfVLszPv+yYh88zT7mfoUGQaNaqgQAx925ebNhcVU7Doa+y1tSAIGJP7ETRyRLvW\nVJqMhI4/FXVoKMqAlrx8wKDUdq0JLVGKnA8XUvj1tyTeeEO71xv0xGNUrNvQEpm46/+8XhsoeK9w\nByjOOcqEcy4kIjaOXWtWERIZhVwh/aIQ4eocYyiKItbGrFZdu3jFFmZOGQmAxWpH5qPF7hiGoD5o\nZF03J9ytVmHVK+jOvLTKakFTmtH2M1TngNsJoSn0GvXW0WvQW0GvMT+5MRcUMPjJ/5D/+Zfow0Mx\n5xe226CrggIJmzyRgkXfoAoMoCknl8R/XNuuNe119VRu2NQi/1rbfvlX0ekk9+NP0ScmMOyF53Hb\nrKiC/Y9Q5Cz8GEO/JKq2bEUbEYkmMgJHfT3ycOnKZLVb5lPDfcCosSBC2s5tFOUc9WrMAbQWB50h\nJ6PW19NU2ToZ2cqaBtSqlnNu359FkMnAiNQEn/fFJJzSdbZVEDCH6BG7MdSusNvRlhzxf+hMbUFL\n+D18IL013L6RP/nkk0929yF6Mr3G/OTHmJTEvgcexlpSiuhyEXf5pe0uZJOpVBR8uZjBsx8l/PQp\nOJuaEAQBdUj7emm1UVGEnzYJdVgYjoYG9PFxfq9VuXETcp2OugMHCRo5nMKvlxA8aqTf6wWNGE7J\n8hUk3/l/qMPCEJ0ulCYjSqPR4/UCMFJu8toF0lBTjdNuZ8gpE6mvqWLsGWdhCpb+GSoFCK4xd5JR\nzMBpbWjVlQkx4Tz/3nfsOZxLcVkNl844xacQTkhUKoH6iI44aKuwhppwdKPLJnM5MBSng7Odypm2\nRnA0gz7ieC1ML57p9dC9IALzivJ7jflJjiokmH633kzAoFRqdu+hds9egse0rlfYG9roKEpW/IzC\naKBizVoip7WuwlnynEFBqIKCcFmtiC4n9WlpXgvOfGHo25fKTZvRRkVSfzgNmar9Y7WasnNJf/EV\nAgYPQhcbgzZKejRolEKN00clt8NupzQ/l+RhIxk95Uyf+0eJQqe0q8lVNiy1ratu/+rHzVisdh6/\n4xJUKgUGXStC6IJAZPRg6KR0wZ9x6jXY1N1n/GRuN4biLHBYOmbBxnLgMEQOojf8Lk2vhy7BcWNe\nU9XdR+mlA1CaAjj4nyfRREZiraik6Wg2pgEp7VozcMhgbJWVuB1OEq//B/aqKqo2b8WQ1Nent+YJ\nW1U16S+8TM3u3SCKxF9xWbsq3W3VVVRt2Yqjtg6X2Uz8VVe0u3I+ctoZGFOSkSkUuMxmrxGEkRoT\nIaL3/XIOH+DnLz7iyO4dNNRUEx4Th0otPV4zzu5GtHT8nHiluhC72Xexa1ZeKTX1TYwZksRHS9aR\nX1LFyEGJPu+LThyHXhXQEUf1iSiXYw7tnsErLQdwYyzNRrB28LRJe2OLqIE+tGPX/QvRa9A9IAKv\nFebxa69n/peh7sBB9AkJRE6fhj4hnvJff6PhSDpKkwlVsH/tZm6Hg9KffqZ2zz4Kv1lyPLSti4lp\ns0EX3W4EuRxDUiI1u/Zgq6hEdLnb1zPuFnE77Gj79EEVFIRcrUYVGOj/erT09ruazWijozH6kNA9\nVReI2un956AzBRCXPIBJ512Ey+HAFBwsqQ4HEFVv7YT55y7szXsQ3dKV80fzywgONPDtym0oFQom\nj03ltLGpDEqOQSGXe11dJlcRl3AqQhdVtlvCA3B14+AVY3kBsuZO6gSy1bd0COja363yV6Q35P4n\nRODdkkJW9RrzvxRBI4Zx5KVXqN6+g+b8AkwDBxA6/tR2KbHJVCpcVhtDn3kKmVpF5utvEnrqKX7l\n+RozMjEXFVOzezeDHnsYmUrFkRdeJurss/w/n1qFJiIC0emiats2ZCol+oR4v9cDSHvuBRR6Pbaa\nGgIGDiDuSul530EocHopyGpuaOCj52bjsNu47ckXKS/KJ3WM9MjRYEHAafNdDpdTkENkWCQ6betU\n29S6Whq99LW7XG7Kq+rYdTCbIf3jyMwr5dFXvuKys09hRKpv7zy2/8QuE5FxBOhxKLrPmBuqSpE1\ndrJGR20OyBQQnNC5+5yE9Br0P/F5WQnLqyq6+xi9dDCCXE7YhPFoIiIw9k+mZucuGrOOtjvsLrpc\nWCsqcNTXYy4s8rtoRxkYQPPGTejj42nOL0CQy3CZzS2eu58FfAqDgeDRo4CWgrbCb5f4tc4fUYeG\nkHTrzUDL6Fiv+7u9t6DnZRzm1Bnnkpt2CL3JRHGO9z7l1kxX+/ibj2m2NLNu6zqiI6K5+8a76Rfv\nPcpht2R7/VwulzFh1ABsdgffrtzGkexizp86GqXCu2cOoNSYMGlDu2QAi1ulxGJQ0l0tarq6KuS1\nBV2zWXVmi1EPjOma/U4Seg36H1haWc6XFaXdfYxeOgGX1UroqacgKBQU//Ajzbl5JHfAdLPE66+j\n6LtlKAwGBj3+qN/raKOi0ISHU3fw0O+T4UIJGDIY3G7w06D/sW0t5JRT2uXtl/6yisr1m2jKbpF8\nFeQKlEaD13scTu+Gpd+Q4bz1yL04HXY+fekZhk/wPv9dY3b4FJ2rb6wnNTmVqROmsmHbBqLDo71e\nr9SYaW6lUJRapeSa8ydxudNFVl4pqf18G5P4/pO6bJqaJcTQbS1qmqZ6lJXeX4w6nMq0lr8Nk/ff\n8d+J3mlrv/NrTRXzijpmtnUvPY/GjEwKvv4WmVKJtbyc+GuuRmE0oI+NQa5rXWi2NbTHo+5oKtZv\nwGWxUn/oMEm3/pOCRd/4PWc9Z+HHhIwdQ9H3y1BodQhKJYHDhxI+eZLH6xOUWs6Uea9NqK0sp7Gu\nDktTI4GhYUTESqcDVED/skZ8Pa7yi/JJO5pGUWkR2fnZzH14rtfrlZoMmqtbJybzZ9bvSOO0sdLC\nP/qAKPr27RpVOFuICaume6q/1RYzmuLD/veatwsBooaCoevaAXsyvUVxwOb6Wl4qyu+d8fMXRh0a\nQsCggWgiIjD07Yujrg5zQSFytRp1WPuqZtNffpWyVasx/a7IFnrKOL/XEt1ust//gKKl31O1ZRvB\no0f53W4myOU0ZmaiNOhxO5046ur8HkwTNGI4mvBwQsaNRRcXhyogAEPfRMke9FHaAILc0gHAxrpa\nPpjzKE67nf1bNlBdVkrqaOn8eYwIqibf/cyBpkCSE5IBOOu0szDopKMIcpkLS8NuvwxRQ5OFjbvS\nvVa4Jw2cjrwLWqxcOg1mY/cEWxV2K7riNBC9iwd1Ks2VoDaBquNezE9W/vYh932NDcwtyO0dgfo3\nQB0aijr0v8a7KSeH2j372qXGBoAoknL/vyj+fjliOyuwqzZvwZCURL/bb8VSXELRkqUk+KlA53bY\nac7PB5cbl8VC/DVXtetszuZmFHo9+vg4n4I3UT403B02G+POPJtJ517Uqr1NDt/T1b796VuO5h1l\n8rjJjBsxDrnMe45bri1HbPQexHeLIpt2pRMTGUzf2P96gUtXbefiM8dK3hcckYwS3zn29iLKBMyB\nGrojby53OtAXp7fIs3Ynx0av9hkJ2vYNSDrZ6RmxwW4i12rh6YIcnL3G/G9F4bdL2f/Qo5Qs/4mm\nnNwWPfZ2oA4Po3DxN5StXo2ineF7uVaLvaoal9lM7b59KNvRZqZPSMCYnIxMoyFw+PATBtW0lept\n2zk4+yka0o74vNYkeDdmJXnZrPv+G95/4iHWLFlEc4N3hTbBh3fucDooLCnk9mtvp6S8hGffeNb7\nAUURW6PvYSGffrceq83OU29+w33Pf0pWXkuNTViwieBAae8/qk/7dP1bizU0ALfQ9c8vmduFvjij\n/SpwHYXoQizeg6v5760b8rfNoVc5HNyblU6Vs+NFKnrp2bjM5uN5c3t1Dc35+e0arFKzew9umw3T\noFSURmO7c+jFy5ZTf+gwAUMG0+e8mX5Xzhcs/gZ1WBiBQwaRPX8BiTf+A210+wqIXBYL+V8tpik7\nh6HPPCV5tnsMsVgc0mFYp8NBTtoBgiOiqSjMJzY5BWOgZ+8qFBkRpXVez1VTV8NbH7/F3TfeTVCA\nby9NqWuguXKDz+ve++pXEmPCSYwNZ8POI5x3+igiQr0LxEQmjCYs0Hc7W3txmPTdE2oX3ZiKsxAs\n3n8nXU1lUTZlh35jwA3voTT+PcVn/pYeerPLxX9ys3qN+d+UY8ZcdLtpys2jbPUaDj4xB9HPXuHg\nUSOp2b2X9Bde4cCj/6Fm9x6/z+ZsasLR2IjCoKdmx05Kf/7F77VslZVEnDEFdVgY4aefhrmo2O+1\nAMpXryHjtTdpzstHFxsjacxlgoDd6f1nufC52exa8yu5aQcpL8qXNOYAoS7f+dl3PnuHU0aewlsf\nv8XDcx+mvtG7Spno9F0Aa7U5uPXKaThdLjbsPEJhSZVPYy6TKQgN9i640xG4VQosxvZL+bYdEWNZ\nXs8y5qJIcdY+CrcuxtFYRfbXD+N2SOsK/JX52+XQHaLIs/k55Fk7SGO4l5OS9JfnYa+pRZ+YiNJg\nYOAD9/ntCVvLK1DotAx9bg4AGfNe93sIikylImTcWNRhobgsFirWrPNrHYDoc2fittuRqVRowsPR\n9mmfd64KDSHl3nuQa7xrlycpNLi8BP5EUUSj0xMSGUXKiNH8sPBdr+upLd7b1eob65EJMs6cdCbT\nJ0/H6XQi96LeJlc5MNf6NujzF6/mrmvPYuaUkRzKLOCyGdJFe8eISe4aERlLiLFbWtQMlcXImjpJ\nBc4PRNFN/sFN1GRsOv41c/lR8r5/mr6XPg3C38tn/VsZdBF4oyifvU2tm6jUS89EdLup3rad0PGn\n+r1G8h23H/fUC79dSmPWUYz9k/1aS2k04LL+1yNQGAzU7tmLKXWgT+P3Z2QqFYbEBGzVNViKS2nO\n87+VUhfTh8Jvl2IuKiZ0wqkYfEi1esPtcFD83TIKHQ7cDgf977mrxUv3QKJK57UgThAE3G4Xm39e\njtPh8OqdqwFno3dvS0AgNCiUWU/OYkDSAC4/93JCg6VDrnKFb62J4vIa0rIKaWy2EmDUMbi/76l3\nSpWeAH14p/ed24KNOGVdb8z1tRXI69oX5elIXG4nuTt/oaFg/wmf1WVtpmjdB8Scfls3nKz7+FsZ\n9C/KSnonp53EuG12ipf/SPmadajDQhEUCkLGjvFrLZlGQ/X2HVSsXY8oisRceL7f55LrdERMm8qR\nF1/B2dSEvbYO0en0u3o+4/W3kGs0yDVqTIOk+5x9kb/oawxJfYmYdga5H336e8uef7nduv0HiJw+\njdAJ43E2m8lZ+DH9JYR5IuRqrwb9yK7tTJhxHqdfeBkul4u+qUMkr41qRdtXenY6keGR3HD5DRQU\nF+BwSsvDCohY63z3nfeJCObOa2fw4gc/EBcdwnUXTkankR4aAxDX/7RON+YurRqrtuu9Tm1jLYqq\n3C7fVwqHw0b2lu8xV0iL2VRs/QptcCwhw87pwpN1L38bg76utoYvelXgTlpKf1pJyU8/owwIIGXW\nXRiS+3HkhZf9NuiOujqspWX0u+M2cIsU//Ajhn5J2KtrCD/du2KZJxozs4ieeTYBg1KxV9fQkJnp\nd1X5gPv/dfy/019+tUWYxI90gLOxCVP//qhCgjEOSMHho5LcG7qYGDJefxOZWk1TTi56Ce8cwIgc\nB9J5732b1+N2uSjKycLpcHD6hZcx/mzPL1Qmm8vLSrBz/04yczLJzM3k3KnnkpmbyTmnSz/Alfoa\nbM3e0212h5NFKzYjl8mZM+tyjhaU4fYx9lRrCkOnNHSqiIwoEzAHaenqFjW1uQlVuX/iO52BzWom\na8Mi7PW+NeMLfn4FVWAUxviu6Trobv4WBj3D3Myrxb0qcF2J2+Eg77MvkGs0xF99ZbvXC500gahz\nZtCcl8+hJ59GFxuDMaW/3+upgoPRJySQ/uIrKEwmIs6YQsDgQX5XqIeMHoXw+2hSZYCpZUiLnxR8\n/S31h9NAFNHFSBef+SLuikvJeP0t3DYbutiYlop5P9FERtD/njup3rodbVSU1zntcreIlI9st1oR\nZDKumfUgAN9/+A4Z+3YzaOx4AkL+N0wuiCA2eTe+mTmZTBo7icbmRqpqqyivKvd6vdOS5/VzaJl3\nPnnMQBav2ILFasdmc2DQe0+dxPWd2CpjvvzX1ZRXVXHNRReibWM6xhpq6vIWNaXNgqY0vUvU7lpD\nc1MD2es/xWlu3cup6HaRu3Q2Kde/izr4r6/7/pdXiqtxOng0O4tGVzeLH/yNqN6+g72z7id8ymnE\nXHxhh6wp/31Gdtab75B81/8Reuo4QsaOoWT5CjSREW3OVQMojEYip08jbOIEtNHRlCxb7vewFoXR\ngLWsnENPPt2Sk8/IJGzCqX4ZY2NKf5qysnDU1uG22fxWi5Op1dhra3E7HIRNmIA2OqrNa4guF4ee\neobKdetpyspGrlYj12rQ9olGpjjRH1AIMobJ9JI+pFyhYNOK7ynMyiDn8AFARKlUkTJyDErV/4a0\nw2QCujrvBj02OpbHX34cu8PO5p2bufXqW9GoPf9bUKgtWOoP+Pye1247jMmgpU9EMGVVdYiIxESG\nSF4fGJZEsKmPz3XXbN5CXmEh+w6n8f5nXxAeEkJSK6ffOU06rNrOF6r5IwqHA31RWvcLx/xOfU0l\n2Ws/xmVrbtN9bqedhpwdBA+ahkzpPW1ysvOX9tDtosjTedm97WldSMZrbyAIMgbNfozaPXsBsFVV\nozQZkalU7Vq7du8+jMn90ERGUPjNEqo2byX+2qtQBXhvJZJCplCw+457CJs8kejzZtJcWNSu8xV/\n/wPDXny+ZSBKfDwNGZl+vSBUb93WIWpxhd8saWlZmzyR7PkL0EZHtrkPvTk3ryWLLZOB6MZeV4fT\nbCF0wniP1/dTaX2mkW+f8yKFRzOw22wkDRrKvs3r0BlOlJANdXgv/LJYLazbuo47/3En4aHhhIeG\no1RIv/gIgu/f71c/bkYQBN74dCUjUhMQBIEHb/FeXxEdO5LWFJyXVVZyzhln4HK5ufCs6WTnty5q\nKCoUmI0qujLULnM5W1TgXD3j2Vldmk/B5q8Q/dSLt9UUkbt0Nv2uehlB9tc1e3/Z7+xYRXu6uW1v\nc720j+Q7bj9uuCvWbyB7/ofUH0pj0H8eQR0W1q61A4cNxZxfwJG5L9HngvMwJPXF0dDod0haplZh\nGpRK8JjRZM9fQN2BAy1G2M9QvlynBZcLl8VC5cZNhIzzL78v12qxFJW0Wy3OVllJ3BWXARzvQ2+r\nQTf0S2LwU7NblNWqq7GWleNsbJKMiCQqtUjG2/9AbL//vuhk7t3N8AlTTrhGZbF7bVf7bOlnpCSl\nkJaVxufff87lMy9n3AjPOvqC3IWlLsfrmbLyStGolcycMoLGZgsmo447rp7u9Z7wuBHIW2Fj3G43\nV11wPkfz8thz6CC7Dx5k3hP/8X0jYA4zIHalMXeLGEqywGHusj2lESnNTaN017J2r9SYv4+Cn+cR\nP/MB6AKN/e7gL2vQv6ss57feivYu55gxr9t/gMbMo0SfM4O4yy9D4WPUZmsQZDKizz2HPr9XpNcf\nOnw8CuAv2qhIlCYTSTffRNW2bciV/ot1xFxwPs35BUSfPQN1WKjfEYng0aOwFJeQ8eob/1WL84MO\n7UMXBFRBQf+jhe+JCFnbfn4ul9Pjz1wrCDh9yL2WV5Zz1QVXcdq407jmomu8XqvSVGFr8P6msWbb\nIQKNepITovjPnZdgs3u/XpDJCQ/t3zLi1gufLVlKTV0dF0yfTnJiIo/cdSdqlYpAk8nrfQD2ICNO\nWRfmr0URQ1k2grX7W3tFUaTwyDaqDq/tsDWr9/+EJiyeiLFXdNiaPYm/ZNf9vsYGPixtX/i0F/+x\n19RQtmo1A+6fhUylwl5fT+Ybb3fI2oJCQf3hNA4+/gQV6zeSdNstABT/8KNf68VceD6O+noOPfUM\nMrmCgq+/pTm/wK+1VCHBlP+2hrzPvmDfA4+Q+/Gnfq0D0OeC80h97GH6nH+u3xEIXVwsxctXkP7K\na9jr6v2uundZrRx68ml23noHosvl9Wet96Hh/mfyjhwmccCgE74e6cPrFUWRgckDmf3ybJ5981mO\nHPWiLy+Crcm3bvt1F07GYrPz6CtfsTctF7WPuoWYpAmtEpHRaTXM/+JLMnKyj589OsL3uE+3Ro1F\n17WPaGNFIUJz9ztCbpeLnN2/dqgxP0bJmvk0FR7s8HV7An85D73K4eCFgtzeUajdiCo4mAEP3Mee\nf91P3OWXUv7bWgSFAmezGYW+/SMO5RoNqY8+hKO+gaPvvI+hbyIhfo4sFRQKKjduYtDjD6MKDkYV\nEkxjRobPaWKekKlUxF56CZrIlod1+suvIrpcCF5UyzzhbGqi6PsfsFdXY6usInT8qUSdM6PN5+mI\nHDpA/aE0omacRd2BAwhyOc25eZLXylyeXz5+/uIjElJSGTj6f39PxsAgohNPFLwx2p1e29XKKssI\nMAbw2N2PAVBZI61eptI10VTlfQDPyg37KCip4qLpY7nqXB1ZeSVer1eotAQaolo1evXH1WtY+81i\nPvn6W778bhmhwcG8Mvtx7zfJZJiDdbQqOd9BGKrLkDV0f2uv0+kke9symkszOmV90e0ib9nTDLhp\nPgqd/8OPeiJ/KYPuEEWeL8ihrreivUdgSEpCGRBAc34+crW6Q4x5y7p9yZj3Om6Hg/irr0QdHoas\njUbzj4SffhoZr76BKiQYa2kZg5/w8bD1wjFjDpB028046uqxlpdjSh3Y6jVOkH9d53uIiCc6IocO\nYOibQMZrb4IgkPfZl5KCOWpBhk1iIEte+mHKC/PZ8dsvXDXrQVS/5+DDY058cRJEwIs6XENTA299\n/BZTTp3Ci++9yAXTL2DCaOk2Orfbe/HZ3rQ87A4nLrcbpVLB7kPZjB/pvZgxLvm0Vs9Rf3zW3fzn\nxZd5/4XnsVitqFuRirGGGHEJXWfMdfU1yGu6v7XXbrNydNNirDWdq0hnb6ggf/nzJF3+HLQxqtST\n+Uu1rS0sLWZDfftGYfbScQSPGUXac3MJnzSRvv+8sWPXHj2K8MmTUAaYsBSXULFho98tZ6qgIELG\njcWU0p/wSRMp/WUV+V8uQpDL0beyregYNbt2k7PwE8p++ZXaXXsIHDoYmUqNshX50mMIcjnqkGBk\nCgX22jrKfl1NxOlT2vhdtbT6VW/fQWN6BubCIiKnnoGsjTUC9YfTUOh1BI8eheh0oU+MJ3zyJI/X\npmr0xHBiW5DNaiFz3x6uf+gJVGo1C559nMi4eEIiPb9cRAigrZc26Bk5Geg0OmaeMZNpE6fxxfdf\nMGms5zPJFU6s9bu9fo/7j+RhNGiprW9iUHIsa7cdZtTgvpLXq/UhRIX7fkHbvncvL737Po3NzdTW\n11NaXsHY4cMQfKRQnAYdFn3XGRlNUwOq8swu208Ki7mJrLWfYG+o6JL9bLXFCEo1htihXbJfV/CX\n8dA319ey1IeoRC9diyCTMfL1eYhuN+kvz8NWUYUyKJCU+2Yd7yv3F3NBIUfmvoQxpT8hY0fTmJmF\n6Hb7LQzTkJ5O7sKP0UZHI9dqibn4Qr8GrOgTEhjw73uRazSILheOhgZUQb7Hef6Z9Jfn4bJY0URG\n0u/2W9p8P0DRd8uInnk2glKJLi62zTl00e2mIe0IeZ9/iaWkBE14BM7mZoxJSahCgk+4PkGpBQ9d\nTnVVlUw+7yIAUsecQtLgoaz4bAH9h43yuG+w03vCbFDyIL758RuOHD2C0+nk9PGnS14rV5fia0L0\n1PFDeGzeV4iiyEsfLOOBm723qcX3a52IzLgRIxiWmkpaZhZajYYfVv3K6eNPJTEuVvIeUSHHEqCm\nq0LtKosZdVkGXa0+92ca66rJWf8ZLnvXVtaXrluAPnowxvhhXbpvZ/GXMOglNiuvFnV/uKgXz5Sv\nXoOxXz/kWi0Rp0+h/NffiD63ffrKhqS+BAweRNJtN1OzYyeCIGCvqUUdKi0A4g19XCwRU884LoST\n/tI8vwy6OjSEslWrqVi/AZlCQfgZUwg/bXKb14macRYFX39L6PhTaDiSjiY8HMGDkIs3dDF9CBw+\nrM1e+TEEmYzYyy7BVlXNsOefASBnwUcoAz33/YcJnvf5+YuPSNu5jbDoGKLiExgwciwzrr5Bcl+V\nWbpdzWqzsuTnJQxOGczoYaMJNAUSEij1Oxex1UtrfQNs3HWE37Yc5O7rziY0yIharUTmxYMOCIlH\nLfgOma9ct45Fy5Zz9YUXMP20yYwcMpik+Hg27tjh1aBbQk24u8jHGjzFAAAgAElEQVSYK+w2tCXp\nrU4ddBa1FcXkbfwCsRsEbETRTd4PTzPwpvko9Ce+pJ5snPRV7jbRzXP5OTS3YmZyL92DTKlEGxOD\naeAAshd8hC4mBnNBYbvXDRiUiq2yClVwMG6Hg6Kl3/k901wZEEDNrj2U/rKKg7OfInjsaL/PVbl5\nC0OfncPgp2b7ZcwBSn5ayaDHH6F8zToEuYL6NC9V3BK47Q4OPDqbQ089Q9rcF/06R8s6NkpW/Ezd\nvgM0ZkpreuvwHCa+5l8PM2rKNFJHj+OMi6+kqb6WyhLPXSg6wNks3a72+XefMyh5EH3j+jJv/jw0\nKmmFQJW+HoetSfLzJrOVnQezufTsU3l/0a88885SauulrweIjvOuLfDWR5+w68ABduzdzwcvvcDh\nzExueeAhGhqbGJjcjysvkPb+7YEGHK1pau8AZE5Hi3CMuxWiAZ1IeUEmues/6RZjfgxHYxV5PzwH\n4slvQ076HPoHpUVsa6jv7mP04gVdfBx5n3xGzAXn42xqpmDR11grygkZO8bvEDmAoW8itqoqCr5a\nTMr996I0Ganaus2vXLoglxM0YhiO+gYip5+Jvaoal9lM6c+/EDisbTk2a2kptspKanfvpfi7ZQQO\nHdJmaVq31Ur9ocM05+XTnJ9P+ORJbe7lDx4zmsjp0wifMpmwidJFYz7XGTsGW3k55sIi4q66HKXx\nRFU3gHEKE04PMnFyhYJBY06ltrKCb999jX/8+3ECQ8M9rhEngsJL//myVcuYMWUGSfFJmC1mDAYD\nwYESnpX7CE5bo+RahaVVVNY0MH3iMCaOHsDR/FLWbD3E6aec2EYHEBYzBJPOuzjS0NSBfPjVIrbu\n2cNFM2Yw5dRTGDlkMEEBAeh1Osk57W61CnNg18iSytxuDMUZCN0pHCOKFGXuoWzP8u47wx+w1ZWA\nXIkx7uQOvZ/UBn1HQz3vl7Tf0+ulcxEEgbCJEzj63nxUQUEMfOjfKI1Gqrdu93vE6DHq9h/ANHAg\nhr4JNBw5gqOhgQA/R446m5sp/GYJNTt3oY2OJnD4ML/C7vaqamzlFZhSB7SIwgi0WWTG2dhIc24+\nxuQkomee7ZcOe8mPP2Hsn0zx8hU05+Zh9GMeeuXGzYguF+rQUGQKueTMeJ1MTqqgP+HrGft28+ZD\ns8hLP4wgkzHmjOlExkuPcI21OhGtnr1GURSprqvms6Wf8dPan2hqbuKisy7yWGSmUNuw1O3z+r0F\nBxjYvj+LH1bvYs22w1w0fSz5xZUeK9wFQSCh32n4mo3y7mefk340m4ljxvDOJ5+iUioZO3w4Mm8v\nroJAc3gXDV4R3RhLjnarcIwousnbv57qI+u67QyeaCrYjyF2KOrAtv+t9RROWoNe43Twn5wsrN2c\n/+mllQgCoePGEjAoFUthIZmvv4Vcq8E0cEC7CuR0sTHkfvo5pT/+jMtiIfH663A2NFLy408EtKFV\nDECuUhEy/hQip52BTK2mZNmPGJOT2myMtX2iqdy0iZrtOyha+j2W0tI2j3mVazS4bDYM/ZLIfO0t\nBEHAkCRdee2J0p9XYkxOpmzVaqxl5YSMG9OmnvjqHTup2bmL6m3bacw6iqW0DHNhkcef6xCNkWjR\nw89JFHE5HZTl51FZXEhTQx2mwGCCwk700AVEwussiBJi8A1NDeQV5nH26Wdz9pSzqaqtYunPSz0W\nxclV+TjMVT6/x9GDk5gwagBTxg2ivLKOxNhwIsNO7E2O6TcBndJzZOIY5ZVVZObk8NT997F2yxYm\njhlDRFgYcX28D26xhppwdEk1k4ixPB9ZNwrHuFwusrevoD5vT7edQRqRxtxdhAyahkzVMS22Xc1J\nWRQnAq8W5vf2m59sCAKlP62kdu8+hjzzFHKNhox5r5P62MP+L6lQMOjxRwCwFJeQ/tI8rBWVflWG\nCwoFos3O/icfRxsVReSZU1EY2i5Z+2eBmYxX32jzGraaapxNTVRu3MSA+/9F0XffEzl9WpvWcDQ2\nkT7vNeKvvvL3XHzbWqHqDx0m/uorqFi3gaBRI9HF9OHou+97vDZWofFY4a5Sazj/xtuP/39ZQZ7k\nfpHIcTulX9Df/uRtxo0Yx55DewgPCeeqC67yOIxFJohY6rwXw/3PGZUtj8HahmZOG3tidEeuUBNo\nivEp8bpg0SJyCgq47dpruOvGG3jxnfe44vzzvN7j1GuwqbtGV9xQVYKssWtawjzhsNs4umUJlsq8\nbjuDLxxN1WQuf4mBVz6HIJx8JWYnpUFfVlnOrsbevPnJSORZZxJ1zgzcdjvZHyxs10zzP5L27Fwc\n9Q0kXH8t1Vu3+a2jXn/4MOFTJhN1VstQDnt1jccWLV8ojAaqd+yk/sBBzEVtlyHWx8WR/d6HOH+P\nOuji2q5cN+D+f2EtK8daXk7QkLbPehfkctLmvoQ5v4DG7GzUwcGoQjxXlIdKTLBa9MZL3Prk3OP/\nHxmXILlfkNP7C7pcLqesooxzzjiHDxd9yBnjz/B4nUJXibWpbVPCGposZOWXeTTocf0nt0ri9dG7\n72LZL6uYduXVpCQl8cyD//Z6vSiXYwnU0hUtavraKuS13SeHbbU0c3T9V9i78YWiNTSpotm8eDE2\nXRIjLvCvXbQ7OekMeo7FzMKyzlUR6qXzOCYdmvnG2yT84xqCRgzvkHWN/ZOJnDEdpdFIc14e5sKi\nNovCQItgTca812hMz8BaXomhXxJ9b7q+zevU7tmHvbaW8CmnoY2JoWbnLoLHtL5yXlAoGPLMkyBC\nyfIVqIPb3ssu12rRJyZQvX2HX95G4vXXAVC5YSPm/EJMg1MlleZ0ogzrnwyTuamRmooyqkpLCI3y\nrVCn9NKutnDxQhJiEvhmxTeUVZYRHREtmZd2mD1PVTuUVUiQSU+fiBNf0Jau2s7FZ4494etqXSAG\ndZDXvnOn08lL772Py+Xm//5xLVMnTuCpV19jwVeLeeD/bpO8zxJq7JIWNU1jHYqq1kcsOprmhjqO\nrv8Ml1W6QLG7EWVKCup1ZO9eBcCGD+eQOHoagX2k6z16IieVQbeLIi8W5uFohahDLz0XbZ9ohr88\nl4Yj6ey970GURgOhE8a3OaT8R4LHjiHt2bnIlEpUIcGkzLobZ7OZ6m3biJjq2ZPzhCCTEXLKKWij\no9BGR1G5cTMN6RltrpwPm9RSVS46nTTn59OQntkmgw7/LaRzNjXh8jH5yxu26mrij+bCFZf6db+1\nohJBqfT68uWp6yhr/x4i4xP5/sO3qSotRqs3MGrKNCbOvPCEaw2CgLPZs1dd31hPQUkBs2fN5typ\n52K2mAkL8VxtrtQ001ztOXe+6PdZ5wJwwyVT6BMRwr4juYwblkxYsIngwBPTK3H9JvkUkXl9wUec\nddppCILAjff9m8Xvvs1Ljz9GY5P06GZHgB6HovOfY2pzM+puVIGrqyojb+PnuJ09Y666J+yqMA7s\ny6Sh4r+OosNmYeUrd3PFKz+cVKH3k8qgf1ZWQr7V0t3H6KWdHDNUeZ9+wbC5zyBTqUh77oV2GXR9\nfBxDn3sa3G4a0jM4+OTTxF56MQFDBrd5LWP/fhx9+z2QydBGReFqbm6zQXfb7aQ9OxdBqSRw2FDi\nr7myzec4hlyvR77ke7jkREPYWgoHptD2GvcWavfs5RS1FqkmJ5Ncid11oqd59NB+Lrr5TgJCWkau\nWs3NVJd5Hv4hNV1t3dZ1jBw8kujwaGY9OYsB/QZw+czLpQ8rSne9nD91NGOH9qOorJqPl6zjSE4x\nD91yAQAzp5zYzWAIikUj895u6HK5qKqpwWjQk5yYyHlnTiM7P5/BKSkYDSdW/QO4VUosBiWdrc6m\ntFnRlKa3StWuM6gqzqVg6+JuF66RQkSg0hXJ4V9/Q/RwxqJD29j7/XxGXnS7h7t7JieNQT/S3MSS\nyrLuPkbPQxRpyMxCodOhi43pki2tFRW4LFa/JpL9EWVgAIJMRvmatSATsJaWIdfr2qR7/kdcZjOH\nn34OY0p/Bvz7Xsl+aV+og4NJfezh4y8eh+c8e3wGe2uRqVQMfmo2AEVLvufI8y/6XfyniYwgR6Uk\n0q+724+1rJyiO29HqpIgRaX1mAa+5LZ7AJj/1CP0TR3CtMuupk/ffh7X0FntJ0xXczqdbNy5kSmn\nTuHWa24F4GjeUZwSxbAyhRNzXa7k9zF2aMveMZEhPHL7Rcx561uGDpBOy8QkjJW0uQfT0yktr2D3\nwYM88H+3cdfjswk0mVDI5dx8lfeXN0uIAbGTQ+0KhwNdSbrn0EmnI1KSfZCyPf6NNO4KnMpA0rNr\nqMj51et1GxY+Q+KYMwmK8fd1uGs5KQy6TXQzryi/dyTqn3CZzex/5HFMqQN/l/cU/Mr3toXq7TvI\nfONtgkeNJOW+We1aK+7yS0l7/kUMfRPRhIWx9/4Hibn4QmIvvdiv9RQGA0OeeQqZUkn1jp2U/PAj\nCddd0+bCO0GhwF5ZSenPv1B38DCCXIa9pgZVsH/SkAGDUxGXfOfXvQDayAgsZd03p8BSVoY2Uvp1\nIk6pAWktGOqrKhFKPee1oUWuUmw8cYHNuzeTfjSdFWtWMHXCVDRqDf0SPL8QACjU5VjrT1T7cjpd\nvLfoVzJzSxmRmsC1F0xGqZBz/z+lK9BDowaiFKVDrcmJiTz07PP0iYxELpfzxZuvsz8tjeGDPIvS\nHMMWYsIp61xjLnO50JdkgNPLL6WTEEU3BYe39bge8+OI0KCMZv+mTTgsvoV1nDYrK1++myvnLUeQ\n9fypbCdFcuCz0lKKbNLTl/6uZL71Lok3/IN+t91C35tuQGHQU384rXM2E0Wy5y+gYv1GAgYPou/N\n7Z+eZuiXROT0aRQvX4E+Pp5Tv/wUt81GU460l+ULmVJJ+svzMBcUMmj2Y35X0dvr6gkeO4bhLz3P\n0GfnkPvxZ36fyZjSnyNZWbjt/uURNRGRWMu7LzplLSv/n7GwfyZYQsMdwGYxs3fTOqbeIz2SNgoB\nt4eQ/cYdG3nn2Xdwu908MvcRHp77MGlZnv99i6KIteGox88WfruW08ak8tpj1xMTGcJDL34OgMkg\nMaxGEIiIGiJ5XgCNWs3yjxfyr1v+ya0PPsyN9/0bpw/5aZdOg1XTuS1qgihiKMkCu3T+vrNwu13k\n7FrVY425W64mt97ArtWrWmXMj1GctoM9373XiSfrOHq8h36kuYmlVb2hdk846ur/p1ApavqZCMrO\n+ZVmvfM+hn59CRw2BFtVFY66eoqX/YgyMKBFDc0PmnPzaEjPIPqcGYSOPwWX2UztvgNEzTwbaMlD\n+9N+5rLaiL30YlxWKwVffY1p0EACh3p/QP8ZY3I/EEXq9h2g5OeVkgpprSVo+DBq9+1vs8AMgEyt\nQq7V4qirlxyM0lnYq2taUiNeeti1ogzLCQHzFtL37GTASO/fc6DDs8c65ZQpBBgDOG/aeZw37Tzq\nG+sxSzyI1foGmipPrKKurGnAbLUxJKUlPXTmhKHsPJiN2WpDp/EsaBSdMBaZhLjNMd786GN2HzjI\neWdOY/G7b9NsNqPXSYuRiDIBc6CGTs2biyKG0hwEa9e39Dqddo5uWYa5XFrrvzuxqiLYv+sgzTX+\ntc1t/Og5EsdOJzi2fc+BzqZHe+g20c2rhb2hdikM/ZKoP3T4+P8rTEZyFnxM09GOb1FJvvN2os6a\nTuG331G3/yBlv66mcsNG3Fb/Iyf6xAQSr7+O6JnnkP7Kaxx54WWSbrkJuUZD5pvvkPf5l36tG3Ph\n+ez4520cnvNsy0tIG435MQoWfUNDRgb9br35+ChUfwkcPpS6fQf8vl8bEYGlvOvD7r7C7QBOL2Iw\n6Xt3MWCE9+p+hdnzv6GJYybS0NjAlz+0/DsIMAYQFe5ZltNtz/P4dbvDSVlVHS/MX0Z5VYuhk8sE\nSWMuk6sIDkrwet7yyiqUCgULXn6R9KNH+Xr5j16NOYA1NKDTpV2NlUXImn2r43U0NpuFjLVf9Ehj\nLgoC5Y5wtvy6xm9jDuC021j58t2I7p49wKVHG/QvykootPeG2qVIvOE6qrZup3TlKrLnf0j6i68Q\nc+F55H+1uNP2HP7S88RfdQW1e/fRf9ZdxF52SbvXVIUEM+g/jzL4qdmYi4rYfecs3Fbr8T7otmJK\nHUjqow8x5JmnsFXXsOPm23FZ2t4dEXfV5cRdcRmqkGDq9u7DUui/MEfgsGHU7d/v9/2ayEisZV0f\nqbKWl6OJkA63h8pVOFzShipjz05SvHjoJkHAaZZuycsrzmPvwb1ez6hQ2THXe65u7xMRzNx/X8Ol\nM07h7c9XMvu1xYQESRddxvaf6FNEZsGiRew6cACZTMZdN97Afh+T8BwmPXZl5xpzfU05svqSTt3D\nE+bmBjJ++whbnefuhe7EqQzmUI6Nw5vXdEilf8mRXez69p0OOFnn0WMNeq7FzNKqnq0q1N0IMhlJ\nt9xE5JlTac4vYMAD95H3xSK/51+3hob0DLLeeZ+hzz6NMiCgZXiHD4Wv1pLx2hvYa2oZ88G7RM88\nm4Kvv/VrHUEmw2WxsP+hR0EUGfjQv8n+8KN2nS389CnUP/uC3/cHjRhG7d72GPQIrN1QGOcrf95f\n7d0z9RVyj/AR2v7gyw/QhXjfQ1B4Fpo6nFXIgy98zh1PfsgvG/fx+J2XcOuV07jynPEer1dqTJi0\noZL72B0Onn7tDRqbmpk8bhzTrryaR55/gftvk1YUc6sUWIyd9/cIoG2oQVGd16l7eKKhtorMXz/E\n2VzX5Xt7RYR6WR+2bNhBZX7H9uBv+uR5qvMzOnTNjqRHGnQ38HZJIa5eAZlWIcjlREw9g8w33sZS\nXELy3XcAIHbCjHhj/2SGv/gcVVu2krPwY1xWK1lvd0zBSMqsu4m99GKcTU0UfLPk+CQ2f14YTANS\nGP7SXKLOPgtBLsdW1b5QZOT0aaQdOeL3vHWFXo8mMoKmbOlqb2/0VIPeRyE9WCcvPY2ohETUGoni\nM0Bnkf7d2h121m9bz1O3P+XlhG6sHnTbRVHkm5XbmPvgNbzz5M0MTIphzlvfEhMZgkHvubc8vv8k\n8PKC8e6nn3HlBechiiIXzZjBE/fdi16nZYGXiJglxIjYiUlDdXMDqnLPxYCdSU1ZIdlrFuB29KwI\nqluh5Wi1lt1rfsHZCYXULoedlfPu6bGh9x5p0FfVVHG4uam7j3FSEXHGFMImTWD4i8+h0OvJfPMd\nMl570+/KaikEmQwEgaotWxn8xONEnjkVW01NBy0uUL11O0deeJm+N91A0PBhNGXnkP/V4jYbUkGh\nwFxQwMEn5lCy/EfCJpxK4TdL2nW8qHNmUPrTSr/vP1YY5w+aiAis3ZBD92XQgwTpIsyMvTtJGSHt\nnSsQcDVKp0J+XP0j50471+v5VPoaXB6MSkOThbAgE7LfR6uefsogFHIZooSToA+IQivzHgloam5m\n7ZatjB89irSsTMoqKnjp8ce4/bprPV5vCzZ2aouaympBU5pJZwvU/C8iZfnp5G38rMcZNYsyku27\ncig4tLNT9yk9sptDv3zVqXv4S48z6PVOJx+V9mq1+0Pw6FHIdToyXnsDfXwc8VdeTsZrb3bKXurQ\nUCo3biL95XkEDh5E6S+rqDtwsN3rBg4fytBn5+C229n3wMM0ZmaRcN01PiddeUJhMjHwwX/Tf9bd\nhE2aSM0e77lYX0SfM4OSdhj0wOHDqPPXoHeTh24pL0MbIV0Up3FLP0J8httBclQqwI+//ci5U70b\ndKfFc8QjwKgjp7CcvWl5QEtxnCAIHmenA8Qmnup1n8OZmdx5w/X8tGYtP67+jW9X/MQl57R0Y3hS\nhHNp1Vi1nfd4VdjtaEuOgNh1RlUURQrTd1KyY2mX7dkaROSU2MLY+utqLHVdMxp240fPYG3qYakG\nemDb2odlxTT0jkX1m6otWwkaPpzwKZOpP5xG09FsCr9dSvR5M9s1d/zP9LvjNirWrid65jmU/LQS\nt8NOc3Yucq22peXLT+RaLaU/raT+cBqDZj+GTKUi6+33kCmVJN36zzatpQoMxNHQQPYHC2nKySF8\n0oR2CcSEThjP/ocew9HY6JcKXdDwoWR/sNCvvbWRkVi6pSiuAk3EibPLAQTA6aUgLn3vLq6a9aDk\n50EOl6RvWVtfy5GjRxg/ynO+G0CpsdBcLV1nc++NM3nz05Us/HYNep2a26+c7vG64Ij+KPEuGrJk\nxc/MvncW3y/4AKfTiUIh/egUZQLmIC2d5TnLXE70Jeng8l/fv6243W7y9q+l7uj2LtuzNTiUIRxO\nK6Sm2P/6FH8w11Wx5dOXOOOOZ7t0X1/0KIN+sKmR1TVd33bxVyJ0fIunUbf/AIVLvmPUW6/RkJZO\n8bLlxF5yUZtnYkshUyqJnD6NrLffI3zKZIJHjUR0OqnavAWFXic5las1RJ19FlHnzKBi/QaKl/1I\n7OWXoI3y3K7kC3tNLWETx5N0y00cemIOgkLZLs34Y2H3uCsua/O9urg4nA0N2OvqUAUGtuleTUQ4\n1vKuLxL1FnKPlGtweBCEAairqsButRIeIy0PLG+ySU5Xa413DtK67QCHjhahUSt54cFrvF4X1We4\nZO7c7Xazct161m/bRkPjPzEZDV6NOYA1xNRpLWoytxtDcSY4um6mhcvpIHvnCpqKOkm0yg9EoE6I\n5sDadbi6afDL3h8+ZMjZVxOW6F0dsCvpMSF3pyjydon3P9BeWo+1vJzBT7Soc+UvWkzwiOHsuvMe\nSleu6tB9ku+8neBRI6k/nEbmW+9g6J9M7keftq/yXRDIeO0NLCWlRJwxhZIfVkiGSn2hT4g/XlyX\ncu8sMp+Y4/+5aHnZKP35F7/vDxwxjDo/qt0FhQJlgAl7dQfVK7QCa0UFmrAwkPjZ99NIDy7xFW4P\nEMBplfYwfRl0Qe7EXOu9wHDOm9+QMsr7pL3IhDGSIjKfLVnKmx99TGpyMq/PeZJbHnyIH1Z51/52\nmnTY266F1DpEN4bSbARb140htdstZGxc3KOMuVtuILNcyd61q7rNmAOIbhdr3nnMr3RgZ9FjDPqK\n6sreSWodSOT0MxGdLg4+/iSxl15M1rvzSbr5JpQmY7uLwzyRs+Bjkm6+idyPPgVBwOlldGRrSJl1\nNwqdDpfVytDn5qCLi8XezuI7ZWAAITPPbtf3HzRiOJbSUr/z2UHDhlG73z+BGX/D7mEaLSHytv+p\n20rL0HmrcJd7Meg+BGUivKR+i0qLqK6tZljqMMlrlJpKRC+DR776cTPnnT6KqydKt6HJZApCg/tK\nfh5oMjH/iy/JyMlmcEoKTz9wP4FeBgeJCjlmY2dZczCWFyKYu+6FzmJuJmPNp1irCrpsT180K6PZ\nviOD4iPtq4fpKAr3byJj47LuPsZxeoRBb3A5+aK85wkTnOwISgV9b76RgsXfEDRiOMGjR6EOCcFe\nV4+5oGOjIRFTT6d42XIcjY2YBqS0X6JUEBAUcvTxcdiqqkl7di6lv3j3jlpD0i3/JPuDBe1aoz3F\nccHJ4zHWjcFd3/Y/PUPfRGylbTfojUYjYblteyj3yS/gxbkv8X1pKckSwimB3irc9+wiZaS0Qde2\nwztHFLE1em/V+mDxam65wntqJSbZs4iM2WJh4aKvOe/MaexZ+RMH0tK5/l/38f7nXzL5lHGS65nD\nOq9FzVBViqyx62oomupryPxtAY7Griky84UoKCgyB7P911VYGmu7+zj/w7r5T2C39IyurB5h0D8v\nL6WxtxCuwxFkMqq37yDl3nuwFBeT/8VXHJ3/IfFXX0nWu+936F7RM89GGRBA/JWXE3Nxy9zu3E/8\nH2jSsuY5VGzYRNrzL9D3phuInnl2u/PImohwQsaOoXj5Cr/XiJpxFqUr/Qu76wJTUcnjEcva7slp\n+0STtK3tLTnWygrS49o2Wnf82nUENzQQbrVxmkSaRkr8THS7yTq4l/7DRnn8XCGCq1G6R9iXQVfp\nGnFYpPXKv/t1B5NGDyQ0SLpwUanSE6D3XOw359XXOX38qYiiyI69+7jh8kt5b+5zvPT4o5Lr2YOM\nOGWdY8x1dVXIa7vOS66rKiXrtwW4rD3DSNlVYexNryFzx4buPopHGitL2P7Va919DKAHGPQ8i4UV\n1ZXdfYy/LAnXXYM2OpqUe2cRPHoUw1+aS/2hQ4T+7mk057c8KDpC7S363HMIHDYUAJfFgq2i/b/X\n/nfdwYiXX0ATFcmhJ+aQ+8lnNGa0T/0p6dZ/kj3ffy/dmNIf0eGkKaftIjHKAQ6aDTuob9jS5ntl\nag27jd57pTuK3OR+uCxWHDod2R4m1gmAw+HZgBWu+I4nzvBcUQ4QLQiS7WoZORnIZXKvY1LdTu/G\nbf6i1dx6pXfvPK7/aZKFcOVVVcRGR3HDvffz2+bNXH77HQiCgEzm+XHp1qix6DrnUappqkdZ2fGz\nGaSoLMomZ+3HiF1YQS+JCNViFFt+20hdac8J+3ti15J3qC3qut+TFN1q0N3AB2VFuHsV4TodmVqF\nMaU/gkx2PDS+/5HHqd6yDUtpGfsf+Y/fKmh/pG7fAdKee4G99z9Ec0Ehac/O9cvw/fHcR9/7ALfD\ngSo4mAH3zaJyc9uN4R/RxcVhGtCfslWr/V7D7+I4hYhDXYq9pu2hzK6sdN81YTz3DBzAnKsvZ905\nM074PEahwSVhEGvMFmxBIZJrmxzSCfQVv61g5lTp6X1ypR1zfb7k5z+v38vQAfH0iZBuTdSaItAp\nDZKf9++byDn/uIFrL76IJ++7l5FDhuCUeuGVyTAHd85LltpiRl3WsdKl0ogUZ+2ncOtiulaoxjMu\nhYkjJQL71/+K+ySI3rocdta+/58O0YxvD91q0HfU17Gn0f8JVr20jZyFH5P27FwEhYLAwYMZ9vwz\nhJ02kYxXXmXQYw+3qMC1k8DhQ0l99CEMfRMY/uJz9J91F7bKKpzNrZ8//Gciz5xKzgcLW4yZTIZc\npWrXoBRofy69PapxxgEDsC78pM33dbW4zL6mRgqHj0D0UJ5Df/8AACAASURBVOWe7EXD/ee1v5Lv\nZRiJrNEm+dny1cs5b9p5kp/LlaVeH5rzF6/mVh+587i+472ucfm553L26adz5uRJrNu6jeDAAAz6\nE8VjAKwhRlxCx1c5K+xWNCVHQOz8CmpRdJN3YBPl+/xPQ3Ukzco+bNtykNKs9gtVdSU521eRs6Nj\nu4jaSrf1oYu4yWnMQyYIvR56F9H3phsQXa7jvejmgkIy33ybQU887pdQijc0EZFYyyvYc8+9JN12\nMxmvvs7AB+5Hpm577tjQL4lwp5OwyRMRZDKslVXU7t2LNrZteeE/YuyfjCYyksoNGwmbPKnN9+ti\n+qAKCqLu4CEChwxu071Bw4dyuKKChDbu2dXiMt570NVINZGn793J3S94jqIECwIum+dw7s4D++jT\nZ5DkiFQB0aNu+zHWbDtEfHQYSXHSlfmBYUmofDz2Nu7YQUV1ix5GU3Mzj959l8frnAYdtk4oapc7\nHeiL08FLFX9H4XI7yd35Cw0FXSvM4glRpqKgXkv2bv/bQrsThVJHw3Yz4igRQeFfm2176TYP3WE+\nzEz5b8wLPcI4fY/St/lL80dhmYJvljD4ydkApL/yGhmvvYGzqWMKYRKuu5qipd8z+r23aMw6SuDQ\nITRltzyMi5ctb3PO3jQghYDBLQIOKffeQ8Xb79PQzbn0frfd4lfYXhUcjEKvw9zGKENXe+jeDHqA\n4FmgqCQ3G1NwCIYAz8I5YU7pl/fVm37luos966IDKHW1OB3SkZ7W5M6jY0d4/XzXgQO8/fGnaEJb\nCubOnTbVowaCqJBjCeg45cVjyNwu9MUZ4JSOYnQUDoedrI1LeoQxtynD2X2wjOzdm7v7KH4gMHrs\nvzl/zC/ocwfQsKP7JGG7x6CLTmxN2wCIpIx7dauZE1ZIsrZzxwyerDTl5HbK5LQB9/8LhV7H4TnP\nEXPRBSRefx05Cz4GOqZIzpjSH3NRMVFnTady42a0sbEcemIOcq0WwYfali+S3nyVg48/0a41AocM\nRq7TUb19h1/3a6KjsFf719bjz6AWQS5HFRSIrarzW4m8Sb4CKNyePRBfgjIaq7QQSHVNOf1iwyQ/\nd9nyJD/bsieDQJOe1H7SUZvwuBHIJc59jOv/dR+fvDaPJ26+0et1llATbjo4HC66MZQcRbC3T8Oh\nNdisFjLWfo65opsLuUSBClckW1avo6Gy6+e5t5fk1Mu5aMoa+jRfgOv3xoua1dWI9u6JOneLQbeb\nD+B2/W/uvD/ZzDGs5t6QWiJUvR77McxFxRx54SUOPTGnw7znP+KyWNBERmDom4izsRG3w47bZufg\n7DlYStr3BxY982wajqSjDguj3203c+iJOSTeeD2R06f55aX/EWP/ZELGjSXvsy/adcb2eOmGpL6o\n09Kp3tH2VjJ/B7V01dQ1a1kZmkjpoSwOh2djlr53JwMkJqypBHBJ5M8379pMbX0tO/M8/ywVaiuW\nBul/j+8vWs1tXrxzQSYnPPTEav0/8uI773HutKmk9k/2ep090IBD3tG5bRFjWR6CpfO9u+bGejJ+\nW4C9vutnA/wRlzKQQ4VODm1cjdgFtQIdSXTMOM4/8ydShbtxV/6vvXLWOqjbVtsttYVdbtBF0Y61\nybNHJCAyTraflwPWcUOQFb0f6lZ/JZzNZvb+634GPvQAyffcSebrb3X4HnKtFqXRQPrLr5Lx6psk\nXHcdu+/5FwGDU9ulx36MxOuvw+2wk//VYoY+Nwd1WFiHeekD/n0v2R8swFHvf2Fl8OhRuJ0O6vb5\np96mv/5av4rj/B2lqomMxNoFeXRreTmaCM/h9iSVDpdE3Ys3Dz1KFCTHlx4rhrvytCs9fi6TeU5P\nNNnVLNwUjTp8MiNSEz1eAxCTNMGjiMwxKqqqeWX+fF549BHJawDcahXWTkgRGiqLkTV1fvtufc3/\ns3fe4VGVaRv/nemTmfReCIQUeq/Su6AitrV3RXdd+7quXexrW3vviq64WBbrCoTee2hJSEIgkN6n\nt3O+PyJlMjMk0wL4eV8Xl3jKe86Eyfu87/Pcz33XsW/pBzjNJ5GMLIFBnsbaVVuoLfMuWnSqIjKm\nO7Omf8nI2BcRKn3zjpqWNCDaut5etssjpt20HUk8cUpJiZOZivW8Gr+Bc6NBEaCO9+kMSRTZNe9x\ncm+7hbIPPuLAF1+ijPYtOxkMsm+6kZy/3MSAJx9j77PPkz33BnQ9uodMIlabmkq/hx/AcugwOx+e\nR9Z116CMigo6AwAw8MnHKAgy9Z594w2Uvh/YLj3Q9jV9TjbWqiq/2f9dVUc/Uf08S+ld8tXY2kJL\nfR3pPb33kEfZA2tXk8lEzD7IcDuq09lemUjaoJvxZfymUGmJ0Z/Y3OdIqv2EEATM8bqQq8HpmmqR\nN4ffMrqh6gBl+R8gevGP7yqIcjVlzXo2Lf0Vx2kk9a1SRTJ58utM6/k5qsr0E9r+ArgMTprXdP0u\nvUsDuiRZsZk6n57USSYuVy3npYTdjIsMjUvY6YKW3XsQZDKSJk5oE4dJTSX31ltoCtLT2xcUOh2H\nvvnOQyI2VLBUVXHg3wvoceVlHPruv0R07xa8iQuQOGE8crWK6sVLAx9j/FiUEfEBpcDlGg3xo0dS\nu9x/FauYQYNo3uHfMzXJydhqmgl1+bY9TlRDT5F7J4MVbd1ErxPUzwUf6nCLVy1m0hmTUCq8c2gU\n2jpEp3dmvKNxMwpHFZNz6pH7WPdn5k48YfvXl/9dREx0FDMnTfJ5DYSnRU1raEJRvz+kY3pComr/\nHg6s/vykprZtqhQ2baugfMf6k/YO/kJAxsjRD3L20J+Jqh2EaOt8hG7Ob8Rl6dpdepcGdLtpK5Lo\n/+owkVpu1Szl6YRy+kT8/yDOxQzoT7c/XcTOh+dR+MJLxAweROl7H4Y0yLZHj6su95CIbdq+g7IP\nPgp67CO79PL5/w6piQvAgCfmsfPheUGNETtqAIe+XRTQvYH2pMcOGUSTH85rYp2MROESkuVX4VwW\nCZbw/fpaqqvR+qihR/lguJ8o3R4vCLjs3hdvHfWe242+iVvLVixhTPz3TMzy3vGg1sWjU504s3Xt\nXX/j45dePOE1Tp0Gmzq0mUK12YiqZl9Ix2wPSZI4uGcDVZu/C+tzTvgOyKh2JLFm8VJMjV1vARwo\n+gy4ivMmLiPVMBPR4P9W22V20byysUt36V0W0CXRjM24JagxegrlPKJbzL3x9aT/PyDOxQ0fSv/H\nHmHYG6/gbG0FSSJ5yiQshys58O8FYXnmEYnY3Fv+TOHzL9K6Zy/6nj2pW7U6JOO3N3ExVVQEzeCX\na7X0uut29jz9bMBjdLvwfKyr12Aq961C5gupZ86g6tfFfqtExQwaSHNnndckcG3WI5fpEZ1OpBYF\nrj3aju9zQpQwjkhpNHTyxyyZZEQ4e6ON8+5lrnB5D2xF2zbTy4fDmq92NafTSf7afGZM8C4Vq9Qa\nsftwGCs9WE1B0UFkCb79qLvnjDvhv8vN/7ifV594DLXKd0O5JJdjienEz9oPKG0WNFWFYVUWE10u\nyrYupn53ftie0REcqlh2lpnZsyb/pKuodRYZ3ScwZ/r/yBNvQqwPLkQ2L2/Eaew6pbsuC+g20yYk\nKXjvWgEYKtvFs1H53BhnJkr++07FCzIZcrWaxk1bSJ05A4fBQOG/XibtnLMwHTiI47cde8PGTTha\ngye6HJGIrV6ylKxrriK6b1/2fzrfJ0HKX7iZuJw/h8J/Po+xNHBp2CPIvORPtOzeQ8uu3YG/2123\nB6weF4gDW+zgwTRt3965i0UBLDJkSiWSo22CkFo73jGKdUoiZL2JoBeumk4sgkVwrogkIWU26gMD\nPMRj5AjYnJ5p29YWifKyGp87dI3Fe8q8IyMWyeVbw/vdBUu56ZKpXDDcu4xrdHx31ILvQL128xZ2\nFRVx0xWX+7wGwJIQGdIWNYXDQcThQhDDl451Op3sW/cdLWWbw/aME0KCZlka65ZvpP7giZ3xThXE\nxudw9vSFDIt8CipDI+cr2kSaljd02S69SwK6JBqxmzo5cXUSCkFkmnwjr8Su5cIYEeXvnDjX4+or\nqF2+gk033Eze7beCS6TggYc5sOArqn75lcoffw6p2lv3yy+lZmk++95+h8xL/oRMpWLPP5+jYuE3\nQa+0j5q4CAKj53/M9mtvxN4UvCVisKn3tHPOonHzloBIZ4GQ42RqFfqsLFoLizq+WC4hpLiQKZWI\njrbgKDuRqfgRxDgRMeLChBDb8fWSBNgEJKcTmaRGahfQc1QRHsqO27eJfPdNK4PPeo9dOzynFDXg\nMHonQJ0ooMuVTizN5V7PHa5ppKDwALMm+haKScv0Xc+HzqXaHdE6HIrQzcYyl7NNBc4V/ObGF+w2\nG8UrvsBU1YnvVRggKrTsa1CzNf9XnPbwC+QEC7U2hqlT3mFS5scoKpNDHnxbVjXhbO0as5suCehW\n4wak9jNDiKAVLPxJuZJXEguYHPX73a0r9Hp6XH0lQ156gYiMdPY88yyDn3+G7pdcTOUPP9H3/nsh\nhIsaZWQkPa66kp7XXkPC6FEUv/oGuX/5M/rsnhz8amHInoMgMOKbr1h7qW+FsM5C3zOLpEkTKAtA\nJ/0IAtV4Txw/jqatW/1mrfvTj64YYUKebcchr0bsXofQp+NnybQSTepFNKn/i0zb8UwlyMGVW4lT\nXotsuBGhHaE9S+WeenY4YF+RiM1sQRMRQXGJiLNdej1FELxOkq2GVgoKCxg3YpzXd5Erq32SuDry\nO09MH4hC8v378NSrr3Hx7HPIzfLd6iaqlFj0oePsyEQJfeU+OIHaXbCwWIwU5X+EtTE4r4OAn69M\nYcOmUip2BVde7QoIgoIzxj7G2YN+QF/TFzFMYjCSQ6JxSdfs0sMe0EVXC3ZTYD2+/iBOauBm9VKe\nTSxl4O+YOKdNT6O5YCfdL7sUTXIye555FtFup/TdDyh55z2cJhOWykpa9wTf3ylTq4gfPZLW4mLS\nzp6JMjqK2CGDSZwwnkPffEdN/vLgPxBtrVh9/nEP2+76e9Bj5d1xG4e/+h7bocAEOrpddAHVS5Ye\nLWX4g9RZM6n62d+0ux/96EoR2UAjFfvfwarc61WS1BsEjYbs4s4rgtnEUg6WvYm8m+euIknunsJW\nyEGlAqvZhCZCh0olIZe5v1eU1XMx7xIlFi39kdlTfZDhJAlbq/dUbUOzgRUb93LBjJFezwuCQFJy\nb+/jAoXlNbz772958t57fF4DYInXh65FTZLQV5ciWMPX/21obqB48Qc4jN45B+GEhJzD1gTWLV6C\npaXrn+8vBgyey/nj80lqnoIrAMKbv2hd14yjMXxZmSMIe0C3m7YS9h6b49CdCu7XLeb++Boy1b/P\nwB47ZDAxgwceDeyReTnk3f5Xcm6eiyAIFL7wMtqM9NA9b9Ag6teux3K4rW+8dW8h5Z99TmQHilr+\nIHnKZHQ9syh7/8Ogxxo87xUqP87HZQss3RfoLt3fgG6prMRSWYmmbD/yzhIDBQFVTCwZi37q9HPs\njY0U9/BOcPMG86HDpFvtXjM+kZL7lCHIYMxYOTZDGampWsacoUA47hJBAsHo/u9Q1iDjjVVqVjWM\no/uQuV4rOCpdMw6bd2XEjjTb07PPQOajT9hssfDwGz/w6vPv+bwfwBYfhVMWunkrsrYCwRQ+yd6m\n2kpKln6AyxZ+2dj2cKgS2L6vlaL1y7v82f6ie8/pnDd1MT0dV+Nq6LoyreSSaFoZ/oVOWAO6JFqx\nm7veAk8ABsn28kzkUv4SbyQ2SEWyUxVHAnvbJwYkiV2PPUlERnrIWOnQtlPv/fe7kWs01OQvp3HT\nZsYs+JyDC76i8MWXMR+sCMlz8m67hcbNW6lfF1yfauSoNBoql9G6OzCCXI8rL6di4Te4rP61WMYN\nH4q5ohprTb3Paxo2bKTwhZdYff6f2HjDnxmzvYCfgHm334W+k6RGTUoyOzNDt2BrD0t1DaYRQ72e\nk3nTQncepnjlfcycHUFisvv5BEHm1q7mcsGPO5W0mJ3YnS4q7d2pbPWchlx2790GRrOV7/O3cNk5\nY72eVyg1xER18/XR2LSjAEPVCuaMy/Z5jStCg1UTusle31CNrLUqZOO1R+3BYvav+BipC9zZjocE\nNAlprM1fS9PhcPfSB4f4xD6cM/1bBkc8glTtXRgp3DBsaEG0hHdzG9aAbrcUIEldQwbwBrkgMlG2\nmZdjV3NxrBN1CPy+T0V0v+wSJFGk5K13STvnbHrdfQeNGzcfJU+FAnKNBlV8HFU//0Kff9xD2Uef\nYDl0mOy517P/k89C9pzhb7/OjvseDCjlfRSCwLDXX2HTDX8OeIjsuddT+p6f2QIJBsx5E8eiaMSm\ntu+ataaWioXfsPXOv/Hr8DMo++BjNMlJDH7xOSb+vIiZeTnIFQqim5pJ66T7mjYlGUsY1eJ8yb6q\nBQGbwzOTULR9C91Skr2WAOLbZR5EQcIqQrOhmZioNkc2c7uvqUJlw9Li/Wfx3oKlzL1kqs9375Y7\n/oQSr5MuupgzJk32eV6SCZhjQjfhR7Q0Im/0vxWyU5AkDhVv5dCGEHJaOglRrqe4RsG2Zb/icoY/\nlRwotBEJTJ/6IePT30NemXBS9NWPQLSJNK8N7y49jBHOFXJme6BQY+UCxWpejtvG9CgZvzc+vDY9\nDafJhDopkcTxY4/umGXK0Jcc0s89B9OBg9gbm+j/2COUvPUuTrMZJClkjnBj/v0Zay+7KqgxBJmM\nvo8+xK5HHw/o/p43Xu9/+l+CiMRMHE0tHPhsAWsuupT1V11L695CMuacy7R1Kxnx7pv0uOoK9D3b\nyFhLZp9DeU42m8eOYX+ud8nU9gi3/KsvY5Zctc7rfLh3ywZGnHux17HU7drVlDKBYRkuWlpbiI6K\nJiFCIivOfVSZwrsMqssl8ul3K7juQu8BWR0Rg14d6/UcdM5JzZoQjSiEZtbXmFpR1oanZUuSRPYX\nrKB2h/+CRsHCpExj/YZCDu89NeZ3b5DJlIwb/wwz+/2XiOpcJMep0QPfsqoJ6QQWwsEibLloh6UI\n0WUI1/ABIVZo4gZ1PjMT0/nC3Ictpq5NUYUTyshIul10AU6jkaKXX6P/Yw+z56l/ItrtqJMSyf3r\nXwCoyV9O8pRJAT8ncXwbIzlu2FBql68k++YbMe0vp/j1txDtdvJu/2vQCwltWhq97r6D7ff8g8Ev\nBC4Wk3HeuVQu+oHGLVuJG+Y9hXwiHNmlZ8+9vsNrJVGkYsFCKr9bjFyhR9c3mYHPPElkB0H6UI/u\nvPTYI0h+dCiE26DFl457pkIDXpI+hVs3Mv1izy4FjSDg9CL3GmXdQKxxPZePuI0e8XYUx9fcBRFL\nk3cC37sLlnDTCZjtmTnjfbZU5q9Zy6GqKq6+6EKf9zuidNiVoZlsVVYz6qoiwrEldLlclG36CUNF\n15YzJZmSQ8ZI9m38tUuf6x8EBg+9hZ4Rl+BqFEJvcRsknC1ODNtbiRoeHZbxw7ZDt5lOkqBBJ5DO\nYf4esYSHEyvJ+p0R5wSFgj73/o2apcuI/U1pTq7RYD5YQdUvv2I5HBoTiJQZ09CkJCM5ndQuX4k2\nLZVuF11AzZLQqFKlTJ9KRLeMoFrQAAY8OY+dD80L6N6ec2+grANynKF4H7ufeJpfh43GeKCc/s88\nQNyEfoxwSR0G8yPwJ5hD+C1UfQX0ZLnn74rNaqGqfD89evf1OJfiI5ZV1h7GZNhNXpKIql2nqTKi\nAZfTnURndKgoqM7gs1/2M/di7+l2fWw3NDLfqfKOzFdElQJLZGjmAoXdhray8IT68YHCYbdRvGpB\nlwdzuzKBrbvr2bfRf8+CrkJW7jmcN2UJ3W2X4mo6dfOwTSsaw8YTD0tAd9oP4HKE3wowWPSjmKci\nF3NbfCvxyt8HcU6u0aBJScZWW0d0nz64LBaaC3Zib2qicfMWelx1RcieFT9yBIaiYmIHD6Lbheej\n656JpbIqJCIx0NaC1rB+Aw0bvNvtdgbatDTS55xDyVvv+n2vXK0m69KbqfuwGKnR/ftR9dMvbLjm\nBgoefISoPr05c9tG+t53L/qeWaScOZ1ftoRvQatOiMfe1ByyEsfxEG12nBYzqpgYj3MRkufvSNHW\nzfQa6l3uNcrmPQP2+kevc98N93k9Zze5786dLoEvto/g35vTGHfhOzRaPd8LIKOH9xY2gIeee4E/\nX3UFGam+Hdcs8ZEhaVGTOR2/CceEnjtktZooWvYZlrrykI/tExI0iKmszV9NS01oyK+hRlLqYGZP\nW8RA1T+QanwrA54qsB+yYi4LTzdCWKJYsJrtXQmZAGOFrYyIUfE/5wi+aVFjOQGp5nRBjysvo+Tt\n97A1NND9ysspn/8FA59qqydLoogQIoJgwtgxbv9vq6tD89xLiM8EVrtujxHvvsnScZOZ8POigJXw\ncv58EyvOOpf0c89Bm+6Hx7sEmQNvxLDxEM7NEbgGlXDwq4VULPgPCePHknfX7cQOHuRxm65Hd+Ra\nLa17C4nq47sfOhgc2aWHwrP+eJzIB91bF1fh1o30HuoZTAUJJC/p9oLCAmKiYshM82yjU2hNmOvd\nOwRMTi2tdg11jY3kZaVSbYwiSe9eyktI7YNS8v593rd/P199/wPFq5Z7PQ9gi4sMSYuaTBTRVxaD\nM/T2pKbWZkpXzsdp6Tofc5ciiuLyVqpKFnfZM/2BTp/CuNHPoa3riVR1atTIO4um5Q1EZOsINaEr\n5Dt00dmA03ZqtzB4gwo7sxVreCV+M2dFC8hOcylZeUQEve6+g4FPPY7lcCV977sXp8HI9r/fx56n\nn6VmaT5l73+IoTi0bk997vs7hyeOY8c/HgjZmGMWfM6ma28OypktIN90AeSpcpTRURxevoD1V16L\nQqthws+LGPTMk16D+REE6pPeWYSLGOcroEcIcqxeGO6F2zbT24shS5IgIHq5/kS+54LoyWyPUplx\nNhUQE6UlVmsjJ75d5k8QSE4d4OvjdJhqd2nVWLUhmAYlEX1VCYKP3vlg0FJfw76l73dpMDcp01m/\ndidVJbu67JmdhUKhYcLEF5nR+2s0VVlhJZmFC+bdJuy1oe8OCHlAt5lOn925N0TRytWqZbyYsJdR\nIZR9PJnIOO9cVPFxlLz9Lr3vuZt+D93fpvImk4VUHOYIUmfOIGnypJAFdW16Gt0uv5jdTzwd8Bix\nQ4eg657JoW//69d98n4WIm9WE3lOHJMW/0TPG6/vVKYgELMWfxCugG6prkHrpX6eq/ZuVuHLYS3O\n5X3H+8OSHzhnmqd2u0zhwtzszaRHYvFXt3PL6E1cO2QdEUr3STCtx0ifIjLvzP+cgX36cIYPQqQk\nEzDHhsJFTSKy5gCCOTSlpuNRX7mf0uUfIXZRa5gkU1HeGsWGxf/DZj61SM0gMGzEXZw7agmx9SPD\n3tMdbjStCL3QUEgDuiSasFv2hHLIk4ZUqrlLu5gnEg+Rq/19BHbJ5UKdmEDL7j0IMhn2hkb2Pvci\n+954O+TWhqkzZ5A0aSI77nswJON1u2AOmpQkXPfcH/AY/ec9zO4nnva79iwoBOLHjPLrHnViIrrM\nbjRu2erXfZ1FRGo69mpDyEnUvghx3VWehLMDRXtJ7paJJkLncU5l8gxA67etJzcrl/iYeI9zClUN\nkhf3sf+t2kGP7Dx6pshRyt0ncJlcRVxsD++fw2bjzkcf4+1/+l4EWuOjQtKipq+vRGYItc+3RFXZ\nTg6u+XdYyHXeYFMmsXlnNWVb13bJ8/xBbu8LOX9yPhnmC3A1n347cm8wbGrBZQgtDyakAd1m2g5S\n+CwBTwZyKeFx/RLuTGgi6TT3YO9x1RXse+Nt9j77ArFDB+Oy2Yjq3Qtd90xaQ5x6h7a0c9LECaEJ\n6oJAr7vuYGtLMw0bNwU8TECp9wCRetZMqsKwS3dVKkiNuJFYy2wcq3XgCF15yFcPeqLguagt3LaJ\n3kM8Hc0iEHCaPGV3fe3OJUnCZvTer/3qpz/z2M3eW9W65fkWkeko1e6MisAeAv6UrqkeeVNojVAk\nSeLArnVUbfk+pOP6fqBAjTOFtUuWY6ir7JpndhIpGSM4d/pP9JXfiVh7es+/7SE5JZrXhFZoJnQB\nXXJhN3fSZOI0g4DEaGEHL8Ss4NpYGzr56ak4p8vqQfbc6xn60gu4LFa6X3YJ2rRUDv/wIxEZGTQX\n7EQKMSEwpEEdGPHeW2y78x6cpsDq6alnzcTR1By0vGynnhWAWUuHEEHaqkem1CI6nFCnwlUWOmUz\nXzV0rRfSma90u692NV9WqaqIVhxe6sM/r9jGgF6ZZKR47uiVmiiitJ7HAX7KX4bRZOLi2d5tWSWF\nHHNk8NFcY2hGUd9505vOQBRdlG3+Hw17l4d0XF9wKWPYddDJ7tVLfDrbnQxERnVj5rQvGB33EkJl\n6GyhTzUYGoxIPkpGgSBkkclhK0ESvXse/16gkhzMVKzjlfiNzI6WUISZOLfv9TexVIVWA/qIhGvG\nhedz8D8LcVksDH/zNYxlZRS+8BL7P/wYe0MjTVu34WgJDQknddaZJE0Yz477HwrJeGO+/Iy1lwau\nJDfgycfY2QW7dIUugtihQ0Oqq48kINlBplAiHZH2tYVyh+495U67xJsoQuG2rfQe6rlD19s8W7aW\nrlnK2OFj0ag9Fx+is9zru7y7YCk3+ZB57Z43AXxMhB3tzs2Jwbeoqc0m1DXFQY3RHk6nnX1rvqWl\nPDxlGjdI0KpIY+2qLdTuD96ZMVRQqfRMmvQqU3P+jbqqG5Lr95FePx6CSkA5XYNwkxLjIBOthtCR\nHUOWw7CbTz02ZLigl4xcoVrBjIQkvrQMZI0x9IpztctWULN0OQljx6BNTQ1pqxm09Vj3ve9e7M3N\n2OrqOfDZF4x8/21EhwNrTS2CXI4iUh+y56WeNROAHfc/xKBnngxqrIjMTHJvuZkd9z3IoH8+5ff9\n6oR4sq65iqZ/PseYWTMp6dMbhyo8/atHyHFHFPaCA9UIVQAAIABJREFUhlxCluVA3KdAdDiQcGJ2\nFWJfV4XTYsF19I/16N+btm0nedqUTg3vLaBHyRTYnMd2byazyK//M9F91L+wiu5GKAISGDqfblco\nHZibPfubl63fTWZaPNmZnul/XXQaWpkXMltTEw/962UeuuM2EuLivH4+e2wkTllwQUJps6KpKgwp\n78Rms1CyagG2pvCnvF0yNQcalJTvOHUU3wRkDB99LxnCOYh1Uuhsa08hyNIUyMcrsERZsYqmo4vk\n5uZmoqNDoxwnSFLw30rRZcBQ+x4nVfn+JKJUymK+KYe9ltCISTgMBgruf4iYQYNIPXM61to6mgt2\n0vP6a0Iyfnsc+m4RSZMmoIqJwWEwsOvRJ+j/6EM4jUb/+rY7gaqffqF21eqggzpA4Ysvo0lMoMfV\nnrKjHaFb2X6uv+xKYjIyqMnJ5oWnHscZDlc+SeKXISOZuT3wur+1qhpDaSnmikNYDh/GergahSUF\nyeCkpWEHiiQ18ggtCq0W+dE/mqN/V0REkHmpd6314xF18CD6hx6l9sP33H4Ww7XRDBGPEd/27BbZ\nsKYJQ3MTfQdnMXW6/KjTagoC8VXuxjqiKNJ/Wn/25HsSZlUR5RjrPDcDl931Cg/dcgH9cj2d03oP\nuQCl1E5irqYG0w1z2VVUzMi1qxASEz3uEzVqDPHBlScUDge6Q7vBGZg1rzeYTa2UrpiPw9QcsjF9\nwaZMYfuWAkyNoSbxBY7e/a+gT8JNiHWnZynzRJBkEqrRGsQ+EmZ8Z7B79+6NIgTzT0hmMIdlN/9f\ngzlAtrCfR/T72RoxgM9bk6l0BLdjL375NXJvvYXKH35EEaln/7PPM+RfL4TobT2Rcd65QJvgzJ6n\nn6X33+5EplRQszQfVXwcaWefFbJnpZ41E0mSKHjgYQY+/URQY/X+251svOEmovr2JW64f1rtQzZs\nJDolBfvBCtLUajLKD1Ce49tSM2AIAqlnTqfql19JnTmjw8tdFgvNO3fRsnPX0f8KcjkIMpImTSAi\nI4PYoUPQpqejTUsNWGzHG8b89AsTy8p5r2w/Zce1M3ZTquG4+JWQKGExt6KOiCAp2d02Pc7pWYf9\nYan33bkgiFhaPGvQa7cVE63Xeg3mccl5nsEcwGzhwL4SEnU670Q5mQxzXATBaG7KXC50lUUhDeat\nzfWUrfgM0R7ecqWEjGp7PHuXLwnrc/xBRuY4huU9BFU6xFNfWNQvyGPlyCepsCbaMLrMHV7f2NhI\nUlJS0M8NhaICdktgvtO/JwjAMNlOnotZzo1xFqLkXiadTkC02Ynu34+o3r1wmS2UffgJWddfi8tu\no2H9Rr89uv1BS8Euul14PiVvvUPJ2++hio+naVvoiY5pZ88iYewYCh54GEGSEIJIEo384F223HoH\nLot/E2JZr14odDrQ6aizWKhO8y0LGixOyHaXJGqXraD4tTdZfeEl5E+eQdl7H+I0mcmYcy5jFnzB\nxJ+/J6pXHlfn5NHjqstJnjKZqF55IQ3mAP/NzeGlyEj2t1vYxLdb9yclybFUvMW4sTYGDHT/niu9\nsdt9kOGUEY24vASyd79czE2XTvf6jqnpg70ef3PlSr6eNpWeCxeAF1KfNT4SlxB4MBckCX3lPrCH\nTrKzsaaC0qUfhD2YO5RxFJSZ2bt2WVif01nExmZz1vT/MCz6GajybHk8bSGAYqASxTVqLBc6MMQZ\ncXRSAri5OTTZmaADutNegegMf6rodIECJ9PkG3glbh0XRIso/STOydQqMs6fA4C1thbJ4UDXvTtb\nb7sLSRLZ++wLiLa2Hl+/7T07QMzggcQNH4bTZCbvjlsxFBWjz+pBzZKlIWeFp509i15XXMafZs7m\nwTvupntJ4GzhQOxWdw0dzOsP/IPFf7uDSysOYQ5Huv03JE2cQMPGTUcXHfaGRiq+/pYtt93FL0NG\ncui/i4jMyWbws08zff0qRrz3Fnm3/5WkyRNRJ8QjyOXYW5pZktszbO8IUNdqIH/UCKR2XA0tnotT\nh7kG684f3XbnegGcZvf+c4PJwLZd25gwaoLHGE6Lp6Lk1t1tx4b2y/I4l9pjhFcRGZPZzL1PPcPD\nb7wGOZ6GOE59BLZgKBKShL6qDMHa0vG1nRuQmgOFlK/8zGvvfcggQYssnXUrNtBwMDw2rv5ArY5i\nypS3mNTjE5SVKWEzKOlqCFoB5SwN0o1yTCOsmBRm/K1k2+12TAF27hyPoGcxh/mP3bk3aDFzsWol\n0xLi+co2iOWt/n97+9z7N1TxCVR8tZDUM2fQsH4jqphoLNXV1K9dR9b114b+xYG8O29jzzPP4TSZ\n6HX3HdQtX4H19bdpEGTEj/ZtguEvBrlcDHc4UG/bwcjVazgQYMr7SDtewQOPMPDpzmvIF/fvR3H/\nfsSpVOx8aB6Dngtcia4jpJ01k12PPo75cCWWqiqSJ00k808XMOy1lzp1f2R2NobSUmIGDwzbO/pi\nuIvt0uhF27fQ2tTIsKtvdTueLHouXn2R4eRqE5ZGT6U7X7tzmUxBfFzPNnp9O5yI1S4p5Fii1QQT\nPSLrDiEz1Xd8YScgSRKHijZTtzO8+uiiPILSGhcVu8InP9xZCIKCUWc8SJo4HVeNhPg7Kc/KeyiQ\nnaHAov+N5BbkAqW5uRmdLriMRVA7dEmy4bCGXpDk94Q4GvizOp9/JpYxIMI/xbmIzEwUuggiundD\nGRdDzi03o0lKxlZfj9NgpKVgF+WfzsdpDK1+tK57Jr3/fjcD5j0CQOKkiWR8/jFlH31M2Ycfh+w5\npb17UTF5IpUZGXy+KTh3srSzz0IVG0P5/C/8vjf1zBk4TUbqVodPIav3vX9Dm55B3/vvZUr+r/R7\n5EESJ4zv9P367J4YS71Jo4YO3kRlYuUK7O1ah4q2baKXF0EZvdU9vShJEnuWLOKy2Zd4XCsXPNnc\nu/dV0GK0MGZInse5jFzvIjLfL16C3eHgwrNmef1MloSooDyxdY01yFpCwzwXRZH92/PDHszNylQ2\nbC6hYtfJl+HuN/A6zh+fT3LLNFyG30Egl4FyghrZjSrMU20YI0y4QpRlaWlpQQxSBySogO6wFCFJ\nobcJ/D2iBwd5QLeY++Jr6abyL7AnT5mM5HRxYP4XpF8whwNffEnP669h/2fzSZ42heLX3wz5+8rV\namRq9zzliHfexGkwsu1v94bkGQ6Vitcfup/nP/+YhtnnBK393vvvd1OzJB/H6jWMXrGSwRs2orJ1\njsAU7t50uUZD3h1/Jbp/v4Du1+dkYwyiLNEZWGpq0LarP+epPXcMhVs3efSfy5AQje78jhZDCwUO\nMz27u6fBBbkLc7PnZ3l3wRJuusRTFU6p0hGt82Stw4l35/YYPQ554BOktrURRUN5wPcfD5fTScmG\nRTSXbAjJeN4gIafSmsD6xYuxtIRWgcxfZGZN5bxpv5Ljuh5Xw+ltdAUgS1KgvFCDeKOAMdeMRQo9\n70EUxaBr6UGl3P8gw/kHARgs28OAqEJWiUNZ0BpDk7NzjPi0s9t2IIaiYrJvvB5rbS2ZF1/E4e9/\npM+999C8vYDmggIyLjgPhT50/ePtkXfHrdQsyWfFzNmM+XI+ypjg+iclQUAShDYGuCQF3Ft+BLOf\nfoLrLriY1Ix0ZCoVFT2688qjD2FXq094nyo2lqzrrqboX6/Q6+47An5+uKDPzsZYGt6AbqupRZ3s\nzrTtptB4iMoUbt3EzfOedTuWjMwjNb/wp4WMHzLeox1HqanD1ur+vS89WM3BygYmj/Zc8GTmTfQq\nInPXvMd55K47iPXSwyuqVVh1CgLtvlGbWlHVhKbu7HBY2bd6Idb6gyEZzxvsqkT27CqnsfLkqnXG\nJfTmjCFPo6hKRAqtJlbXQwDFEBXSIAGL3IIk2Tx+F0KN5uZm4nxoKHQGAe/QRWcDLvuppft7ukAu\niEySb+bl2NVcEutC5YdgTGSvPCJ75VH+2Rc4TWaatm1HkMnCultvj+RpUxj50busnHMB9WvXhWzc\nUMjETlv0A8lJidgPtomVdCs/wPBOptKzrrmKujVrw74TDgTqhHhEpxNHc6iIWZ7w5rQW244QV32w\nHK1OT3R8gtvxOGcnrVIlsBvaBUpR5L0vvavCaaOSiVB6LlC3797D8nXruPPGGzw/iCBgjtcFLE6i\nslrQVBUTilZcq9lE4dJPwxbMJaCJNNblr6Gx8uTZVmsjEpg25X0mdHsfRWXiad3FLNPLUJ39G8lt\niAWzzH+SW6Awm83YOplV9IaAA/ofu/PgocbK+YpVvBK3jWlRsk573QsyGX3u/RsKvY4+9/4NS2Wl\n227dYTCEvcVNm5rK1BVLKf/sC0rfCx3bPtigrjcYUOj1yBLisRxuW3BGtnZeWrHNvGUeUqOiLVV4\nCk1MR4hx4YDDYEAmlyOPcLdJ1babIryl2wEU7dzVSg+UYnfY6ZPTx+24UteK3XIsraiqbiTq4feY\nW1jO2aO87M57jvGqyHaiVHswLWoKhx1t5d6QmEwZW5soWvoBDkNoCHXtISr0FFUr2Lb8V1xdZK/a\nHjKZkjHjn2Jm//+iq+mFZD+FfmH8hDxXieJKDbbLXBhSTNjFk/MzbWoK3IY3wIAuYTf/PmxSTwXE\nCk3cqM7n+cQShuo6WV8XBOJHjkDXo4fbbt3e2OS1xS1cGP7Wa4g2K9vuuidkYwaj/b51zGgAVDEx\nIJNhammhYISngYgvRPXqTe6YeZi+tiOuiMG1PhKkU6MGGE5inC+Ge/uKkLeAHikIHu1qvnrPJae7\nzKt+SyGyw7X0s4loSg67nYtJzEZ1XFWwziDx/Vb4+2tLmTp+AgP7uC8WAJw6DTZ1YP9eMpcT3eFC\n6GTv8InQXFfNviXv47KGlrB6BCZFGuvXF1JZuD0s43cMgYFD/8J5Y/NJbJyAaDo9e9AEhYBqigbZ\nXCXmCVZMalPQxLRg0dTUFHBGIKCA7rRXIImhE1j4A23I4BD3Rizm4YQqeqg7F9jb79Yrv//Ro8Wt\nfP4XAbuTdQa5t95C2uxzWH7m2dgbQ0PGST1rJknjx/kd1DePHcOXN1xHeU42B6dP5R6Nhr1+rHhd\nlUpiMoZjq61DcrlwVckRqwMTCQo1wkmM8xbQkxQqHK52LWteHNaSvBhoeEu3y5UOzM3lbscqstPZ\n3WIiYUQvbFnu4j5p3YYc/bvNAc//AIu2OFldnsKoGZ4ZHEkuxxLjReO9E5CJIvrDxeAInuxUd6iU\nsuUfIYVgYdAekkxJhTGWDUt+xWo8OfofWTmzOG/KYrJsl+M6udy7gCFPlaP8kwbn9WDIMmERw5fN\n9BculyvgnvSASHFO66lXY/w9oZ9QxNORRazVD+XfrXE0dCQl+9tuHcBUfgDR4SD9gjkc/ua/WKur\nadm1GySIHToYW1092vQ0InM9BTiCQfKUSUT37cPqCy9lwOOPkjh+bNBjBmrosnbqZNZOnQyAEtgw\nZCQztqzvnLmNrS14a9PTMR+uRJfZDeynhsa0Pjub6l/D0/LkzTY1T62D4756ZqOBuqrDZOb2dn8v\nm/P4yygoLCAmKobMtEy36+TKKo/0+avLt5J1w2zSzx7jpiGblDkE+XF97ZXN0GqB/RUVZGV2Y+9h\nCUlyl521JEQG1qImieirShFsBv/vdR+Iyn07qN7+U5DjeIdNnciu7SW01GwLy/gdITF5AKMGPoW8\nMhbJU0Lg1IcAyhEqxAECZsyAPewkt0DR2tqKPgBycwAzlYTDevJVh37vkAkwTraVl2JWckWsHW0n\niXNuLW7nzebgVwsZ+NTj9LjqclSxMSBJIQ/mR6BJSWbKsl85uOArmpYuI2/TZpT24FL+qWfNJHHc\nWAoeeDjgMc74cj7rLu2cgYsszQ5KEWVUJAJgbalGlhp6N71AEJmTjSFsO3TPHvR0uXvbYtG2zfRu\ntzuXA6LBfXfjbXcuIGFtp9tuNFv5Pn8Ll54z1i0yywQZSQnuvehpMWA11SMTZERHRjEgU3IL5o5o\nHQ5FYGnKyJoKBHNwW01JEikvWB2eYC5Bg5jK2sUraanxdKYLNyJ0ycyY9jFjU95CXhnb5c8PFkKU\nDNUcLeJcGcYBlt+C+amNVj94P8fD74DuclQjukLn3/oHTgwVdmYr1vJy/GZmRQvIOiElm3b2LHre\ncB2mAwfJ+fNNbeYeQPFrbxIzZBA1+cto3Bw+z+Vhr7/CWZ98xnV33sO0738Merzjtd+Vdjux9Q1+\n6b9H9coj87JL2DWvYzMYQSsin9yKkGukvnYplpRNoDo16oPKmOg2GdiG0Oc5vaXcYwT3BJ63+nkq\nMsR2aXlv6nCqiGac7XTQ31uwlLlemO3pueM8RGRqag+zb/m93HZeN64YC+cPO/Z7IKoUWPT+aTsc\ngb6+CpmhOqB7j8AlOind+DONRauCGsfr2Moo9hyGHSsXh1cm1gsUCg3jJzzHmX2/RluVjeQ8vQhv\n8j5KFFersV/iwpDQeV31UwFOpxOz2f+Fh98B/Y/d+clBNK1co1rGiwl7GdnJySuqd6+ju/FD33xH\n8uSJuExmYgb0x1hWRu3ylWF7X9Ott9AycADfP/8vrLXBWzWmnT2L4XNmc8fUM5l3251c+dY7ft2f\ncf4cBIWCiv983eG19ZuWs/TaYcTMSSVpVoh8zEOEcDHdrTW1aNr1oKvFjhnu0e3KQeu2riOvZx7x\nMfFuxx12dzKfyyXy6XcruO7CyW7HFWotMTpPo5yFP/6EVi8we4iMcb3g+ISVJT4yoBa1iOZ65E3B\ntZM5HHb2rfqa1oOh7/82KtNYt6aA6hJPe9nwQmDo8DuZPWoJcQ1nIJpPn0AuqASU07UwV4F5jBWT\n0nzSSW6BIpBdup81dAnHH/XzkOCl1/OpONTEsCGZXHGJZxuQL6RSzd3aaoq1OXxqyKLE2rlVpyCT\nET2gP/tee5Pofn2xVNcgOZ0c+uY7UmZMR6EPretRwcjh7Bo+FFdjE+svu4q+D95H0iRPgw5/MKGq\nmmS1BqniECNWr2XRpZfSEhfT6fv7PXQ/6y6/mqi+fYju19frNbsffwpbYyNnbgmtGU2ocIQYd5Qz\nUbofe2sLTqMRR6sBp9GI02DAYTTiNPz2x2RCEkUUeh0Kne63/+pR6HXIIyJQ6HWYKw659aALgKO9\nhrsXyVeFyeZWP/eWbleobJib3FVGfKnCZeZMBMn9uWs3b+Hrn35mzXffeFxvi4/CKfN/wtYYW1DW\nBTeX2awWSlZ+ia0ltAoqkkzFgWYNZVt/Dem4nUFO7/MZkHobYq0S0XL6BHJ5hgLZOAWWSCtW0fi7\nMH4xGAyktCuDdQS/ArrobER0Nvj1gD/gCZPJxuatB/n8w2v5ZfEe1q4vY8xo/5y08ijhichSNugH\n8UVrArX2E9d50887F2ttLYJCQXS/ftSvXUfOzTdS8uY7FH/0KamPPUzs0CEnHMNfiDIZ6oR4Ji3+\nia133E3L7j3k/vXPAY93MCcbdVIijpYWyuvrMUb7bx96xhef8sug4czc4a4dbywpZeNNf0EdE8PY\nrxcE/I7hgtNkxlBUBCYTyoXfsOW/31NfvI+UGdOw1tSi0OtRRkWi0OtRREaiio4hIiMDRaQeVVQ0\nkiTiNJpwmky//deItaYWl9nMwMOV3BIfx2aniyMV2nSlGudx6myluwvIzO2NUnWsrh4tCDgt7gvK\nH5b+wEO3u3cmCHLPuu+7C5aw+Zt/uh3T6BPQqaI8iHPX3Hk3P8//xGMMV4QGq8b/FjW1xYy6utjv\n+46HydBC6crPcJpDW360qZIp2LYXQ13XinYlpw1nZL/HkFVGIQafUOsSSDIJ1WgNYl8Js2QBbL+L\nQH4ENpsNq9WKRqPp9D2C5EfDm824AathdUAv9wfc8cC8RXTPjOPm64NP6doFJUsdw1nYqsXkOvE3\n2tHcwqHv/ou+Z9ZRcxBrTS077nsQXfdM+s8LnHzWEUrffZ/mgp0Me/2VgMfI3bOX9PID/GKxULRx\nE4Oe9d8hrXVvIbsee5IxX84HYP9Hn3L4hx8Z9uq/2P/Rp4xChuGhfwT8jqFA6569NG7dRtPW7RiK\nirA3NZHdM5vXmxpJFSVak5N4+6nHqE1PD/pZc194iQFbt7FqxjT+c+3VAEzUxZLnbGsBU5hNlL32\nPIci9Iy57ZjeQJ4IyppjAW3pmqV88/M3vPHkG0ePyQQRu3UJ4nHCJx99vYzmVjN3Xee+k88bNAe1\n4E7Ee+rV17BYbTx5r7vOgSQTMKZEIwr+7SIVdiu6it0gBk50bGmsY//KzxAdIWx1kgRqxGT2rM5H\nkrouKumjMhg38lk0td2RvLQfnoqQxcmQT1BhS7KfVnXxQJCUlERSUlLHF/4G+bx58+Z19mJr6/I/\n+s+DRGFRNXKFjHNm9mf+vzeSmKBHpZJz1Y2fYLE4yMtJQqn0r+9Zjkiu7BBTI+qQFKmU2mU+K4py\njYbYwYPQde9+9JhCryPjvHOxNzWz7opr0HXrFhYmfNywoSgjo9hw7Y2kzjozoDR/Y2Ii5bk5KPr2\nQXI6KfvgI1KmeRKrTgR1YptsacXCbyj/9HOU0VEMfekFlFFRJE4Yz/8ef4q0WWeiCNLK0F80bt5C\n+WdfsPuJp2jYtJnInBzihg0h69pr6HXXHVxnsTDkYAVyrYYIlwul08muYUODfm5DcjKiTMaKWWdi\nimxrlRmjjUXlEhBcLobffwc98xczcn8ZxklTsUe3lTkyrA5E67HA+NpHrzFryixye+QePabU1WEz\nuNep/zrvA15+6FpUymMJwuj47sRHu7e5Haqq4i/3P8gPn3gqEVoTY3DK/QtAcqcD/aFCcLl3Xuwq\nLmfN1t30yc70cecxNFQfpHzFpyHtMXcqY9iz30j5jo10lTShQhnB+Akv0k9/O/LmqFNKEdErBFAM\nVCKbpcTSz45da0fswoXPyYIoin5pu3eaFCe6WnE5Tsfmw1MLUVFa/vHQd3z1zVaqa1qJjtby2lsr\nuPu2KYw9I5unXwjcv1gvGblCtYKXEnYzRu+/xEDG+XOYsWkttatWs/nPt2KrD315JXH8WMZ9/SXr\nr7qWmvzlQY0VjExst4suYGhqKpMmTaTXnbe7nRv+xits/mvXGLTULl/JzkcfZ+m4yZS89S4R3TIY\n/cmHjPn3Z/S4+gqSp04hIqNtFy62a10UhdD0xx/I7slXN1xLbeqxel200LaoVDc2oDt4AGNrC0qb\nmZjdOwFQIOBqPbZDFUWR/634H7MmuduYOkxtdWqLXUn+/jye/yGGs848D32EexoxLdOTR+JL3tUR\npcOudI9AX3/5NYZW333kMtGF7nARON131a1GM+//5xfOmTyKFRsLMFt86WhLVJfv4cCq+aHbQUvQ\nqkhn3aot1O4vDM2YHUJgxKh/cO6IX4mpG4JkPbWDoqAVUM36TVd9hBWTvOt01U8FWCwW7H60/nZ6\nh+6w7MZpKw/wtf7AEURGajh7Zn9aWizMmNqH+Dg9P/+6hz/fOJ6i4hqsNicyQeCNd1fS2GSmb29P\nxm9H0GFilLKMwTqBSimRemfnf2kFmYyUaVNQxcex5ZbbkFwisUMG+/0OJ4Jcq6XHVVew79XXMZYe\nI3gFgsjcHCRHYDt117AhOAYN8DiuTojH2dJC3Zp1xI8K/N18oWXXbso//Zwtf70Dl8VM4hmj6fvw\nA2T+6UJiBvT36ZZXnZFBr507iWptpTYlma9uvA5LmLIIZ6iicboknBERaLZvwVW0l5iBQyi9+gac\nOj3pCKiP6z//6oevSE1JZeKoiUePKbQGrC17AfihaCB761IproLknMkMSqlC9Zu1aWLGQKIi3M1e\nPvv6G+oaGrn7prlux0WlAnOcuxrcyvyVtDS1kNkjk2W/LiO3dy7C8e2dkkhkZYmbcEx9UwuCIFBU\nVsG3i9fw4/KNKJUKflqxialj3LkkkiRRsXcDNdt/DuAn6R0umZryRg171q1A7KTjYrDo1e8yJvR7\nHX1zL6TA/T+6BPIeChRnqbANd2LV23CFQFv/dIVSqSSinceCL3S6hm5qWIDTfiioF/sDnigpq0MQ\nBLKzEpj718954uHZnHfpO/xn/o0sWVZIv75pyGUCi37cyQVzBjNogH81UwnYIg3g85YUqhz+pwmL\nX3mN2uUrGfDkYz6Z4cGg9N0PaNq+g+FvvhrUOFU//ULtqtV+Kcp1hA3X3EDeXbcTO3hQSMarXbGS\n8k/m47LZyLn5RhLGje2cet1xkLlcRLYYMERHIsrDJ0n7F236UVLcup8XcfjbBVzyynu4tG0TywC7\niNhwTKd83kvzkOllPDL3kaPHlOq9mBpLkSR4c+MkqhptWCw2UpNjuXTAVjKimhAEgb5D/oSsnT2q\nrFsPXAf3uwdmwJQa68Fq//T9TyndV0pjQyPpGekMGzWM6bOm/3ZWIrJqPzJjnds99z73PvsPVfPG\no7cSqdOiUat458ufyExL5KyJI49eJ4ouyrfl01y2KbAfpBdYlSns2FKAqbFr2Gdp3cYwovcjUNm1\nJSS/IQPlOA2uXiIWMfR+46crdDodWVlZnbq2Uzt0STRjaV0W7Hv9AS+Ii9URFxuB2WxHoZDTarDS\nr08qu/ZWsWpNKdlZCewrrWP22QN5450VnD2zP98s2k5JaR29cj3NNNpDANKEWqZpDhKrSaTErsHu\nR8oqfvQo4kaOYPdjT2Io3kfi6HFIVhmCKjRpr7hhQ1HFRLP+6utJP/cc5NrAtLgjc3OQ7HbKPvyY\nlGlTQvJuKTOmse7SK+l5w3VBjXPom+/YevtdGPaVkHvbX8m79RZ03bt7BKvOQJLJsGk1SH4uBPxB\nD6WWLI6lxJcs/ILofgPJHT766LGUVgvSb5mfVmMrD7/wMPNfmH/0vEzhwNqyBWhTdGu0RrC1xE5a\nchyxWgdjMktRyCQycscSoXTvVrju7nu444brGNLf3X3NFheJ/TjO3Kb1m3jthdeIiIhgzkVzuOya\ny/jxux857+Lzjspm6usOI2/1FI5JjIumaP9O7h6iAAAgAElEQVQhlAo5A3plsXVPCSqFglkTj2Vk\nnA4HJRsWYThY4P8P0QskZFQ7Etm2fCkOS/i5SNExWUwd/w7dnBdAq6rjG04SZEkKFDNVOMe5sMba\ncEqnhjLjqQKHw0FsbCzyTizgOzUrlNSVs7MlGaOUAbJTfJV3miIiQsWccwYyfEgmq9eXMXlCLq+/\neDHfLtrBlIm9WLqsEKPJhssl8q9X89lTWI3V6uDAwUbsjo7TUQqcTJdv4NW4dVwQLaH0I5joe2Zx\nxhefos/K4sB9y7D8B6SqwJS5vCFh7BjGffsVxY+/S+k77wU8TqCGLr6g0Ono9/ADAdXoRbud0vc+\nZMnYSTTv3EW3P11E4rhxxIWAxBZu5Kjc03vtBWViBAHXcWQ4r73n6lq3WnPtnvfpo1vL5OyDXDpo\nI2qFC4VSQ0xkxtFrJAlWrF/P/oMVXHvxn9zGc2nVWLXu09XCLxZy57130lDfQHRsNBvXbeTK668k\n+bd+el1TLfLmNge3ov2HKKuoYm/pQa6851l+XrmJNx69lXXb9nL3M++wcUcRMycck7W122wUr/w3\npspjtW1RlNhcFpghil0VR0GZmb1r8gO63x+oVJFMnvwmU7I+Q1mZdmq2cgmgGKZCcb0a67l2jDEm\nHK4/AvnxsFqtVFRUsH79egoLO8ex6FTK/Zfdv1BYfWzAHrHR9I7XkaSxIhfrOfUpkqcXjEYbi34s\nYNyYbBbnF1JV3creomr+cuN4bHYn+8sbuPSiYUREqLh67id8+PZVqPxkxjcSzwLrYFYY/KhNSWBb\nrMG6tx6Tdh26M1KIHuBZgw4U1soqKr79L6l7CtG/8XLA41T++DP1a9Yy8OmOpV47g4IHHiFh7GjS\nzj6rU9fv/+QzavOXEzdiGFnXXn20Jr5h0nQGfv4J2vS0kLxXuHBFVCoRtrYFn8vl5LKBPflq9zGm\nevt2tStuv4K7597NsAHD2g5IEqK4Audx1qFPvP41msQc/n7JsfJFVt/p6FVtjPm1xfDjDon//e9r\nPr1/LH2zj3FH2reoWcwWVGoVN191MwlJCTz+3OPMu28ejzz9yNGeXa2hCdVxvebNrUZueOBfZGem\n8ezfb+DbxWtZs2U3L95/EzX1TSQnHNMot1iMlCyfj8PoLrH7xuL9lFSbuPSMdEbldFLTXIJmWRoF\na1bgtIe3cC0gY+QZD5ImnYloODXnZJlehmKSCluaA7vr5PiNn6pwuVy0trZSU1PDgQMHMBqP/f4M\nHjyYOXPmdDhGhyl3SZJYXrzcrd+v2WqjpNHAjloLJS1qBGUiEepoVIILOH37AvfsrcJmdxEV1flG\n/nBApVIwoH860dFahg7uxvix2Wg0SqZN7s3zLy/hvr/NQKtV8uvSQrbtOIRKKadPrzaGcll5PbEx\nHRMotFgYodjPcJ1ENUnUOjqxjBdA0c2Fsr+KxtJ1OD/5nEaLmZiBoQnqishI4kcO51BNNSVvv0v6\n7LM7vskLIvNycVlt7P/4U7qNOQOZKCIqAjIWBCB56mQ23nAz3S46H7la7fO6xs1b2HTzrWiTkxn0\n3NPEjxyB7DghFlGtoXblShLHBe9EF06M18Qg/qbbXbhlI1UH9zPlgkuOns+wOBBtbbup6rpqPvrq\nIx649YGj51X6FqwtxySil6zdyc6iAzz+lzOPHlNrY0lNaUupm+0iL/0ssO9ALVFx3cnKTKJXyrEM\nkjUhGudv/3ySJPGvf/6L5598nsuvvZzVy1ezduVaZp4zk7zebYYuarMRdXWR22cyW22cN20Mr3zy\nHeOH92fM0L6YrVZcLpGe3Y4tHgzNDZQs+wSnxVMwJi9VzzlDUnjp51IGZkYRqT3xd0qU6yiplVG0\ncTWiK7ykrr4DrmFcn1fRNeUgnYJxUp6rRH6WCusQOzad/f81ye14WCwWamtrKSoqYtOmTZSVlVFX\nV+fBbLdarYwaNarDMl2HAb3B2MCWg1t8nre7XBxuNbG7zsiOehetrjg06gS0ShUy6fQiNtxx70Lq\n6o0s/G47A/qlERV5cgP7EQiCQF5Om7hARUUTlVXN9OmVwiNP/MDLz13Ezt2Hqak1kJOdyIpV++jd\nq/NygTG0MF5VRq5WxwFXDK0dCNMgB5kGYgcNJOrC86j+32KKX3mNmEEDUcfHn/jeTiJ2yGA0iYms\nu/RKUqZPQxkd5fcYkXm5ZEtw5/VzOXPzVnYOH3a0xzoQxA0fys4HHyXjgvM8zrksFnY+8hh1K1Yx\n+LmnSZ15ppcRIHpAP7bdeQ9Z111z1DDnVMRoZfRRQtyqH78lJj6RgWe0iRApgPhG89Gk3Jfff0lm\nWiZjho85boQinNZjAfG+F77gnhtmkxB37N+xZ98ZKH5rjZMkGT9utXDgcDU5PXrQL10g5zd6iDMq\nAmvEsZ/V26+8zZlnn8nZ553NPx/7Jw898RDX3nQt2bnZAChtFrSVe93kY0sPVnHLvNcoq6ji5Qf/\nzK2Pv8GIAXmMGdKXpPhj0sFNtZWULf8E0el9J61RypHJBIb3jOGp74qRy9tKAHF6z/q0RZnG1o07\naThU5nEulMjsMZnJw98lzjAKyew/JyOcEBQCqkkaxGlgybThUDj+X7WceYMoirS0tHDgwAG2bdvG\nrl27OHToEC0tLSf82VitVgYOHIi2A45RhzX0A00HOv2ykgSljc38tK+ST3c1sbBEQ5EhDTPpIJwa\nwdEXDlc2Y7U6uOvWKbz07IVERWpoaj71bPb+Mnc8s2cN4JfFe5g2uTfJSZHU1hnplhHLcy8tZvjQ\n7ny7aAePP/MT9cexkE8EARgs280/o5Zyc5yJGEXng03vv99N/yfmUfDgIxS+8FKAn8oT8aNHMuHn\nRWz+y60Be4APdjiI0+vR7NpN9t7g+nxjBg4gfvRIyt9bgGg6NnGWz/+C/MkzSBo/jpEfvENE5onF\nSXpcdQXln30e1LuEEzJBwH5cm2PR1s30GnqstpwGSMcx0ts7q8lVNizNx6ReV28uJCE2kt7Zx7oz\n9HHd0MiOZTrsNiPVO17lrDMymdxXYspvXDhJIccc6R4sHQ4HRqOR7NxsZp07i7dfeZuaqjZ9DIXD\nQcThQhBdLFu/A5Olra3uqbe+4JvXHyE5IZYXP/yaD56+m8pad42F2op97F/xMdJxCnKSBAs3eEqw\nxulVJEapaDE7yE525xRJMjmHLfGsW/wr5tYmj3tDhZiEPM6Z/jVD9I8jVQVGJA0X5KlylBdrcF4P\nhiwTVvEU75ELM2w2G5WVlWzevJlFi/6PvfOMjrJa2/A1fTKZSe8F0iAhCSWAlNB71SMqTUFQUbEj\noGLHggXRc/gO4FFRQUBAUSxU6S30UBNSCCG998n0mff7EUiICZBAQpNrLRYr78zes2fyZp5dnue+\n/2Dbtm2cPn260eYr58+fv+pzrhrQM4qv3X+3wmQiJiOP1fG5LIk3sy/fjXyzH1Zxw5VvbhSrf4ml\nR/dg3pj9B/Fnclix+jAp5woBiD1+4z2Ir4RMJkGhkDJhfBcqKgykni/Ez9eJjMwS8gsq0OlNTBjf\nhS/+27gEHInIRj/JYeY772OMkxV5AzOpHUJb0+PnlSg9PdjWZwAFe5pGHlim0dB73W/kbtlO4r8b\nX9Z2rFcPTo8czp5uXVm24fpriIMfexZNcT+Mf0gpO5nA3lGjMeTkMujAHryHD21QHwGTJnB+6fKr\nP/EmESy1w3bJSiEh9hBhHWvKuBxNl6x801IwW8yEBYdVX5NIawfAb37aypNjapuw+LfsUuvn04mJ\n2FkzeGOUijHdRFxMB9G5V7mo5WTVmJ88/eLTrPh+BdOenkZBXgGDRwwmNSUVsdWCfVaNCpy/tzsH\njp+hUm+gpEyL1Wbj+Qn3cehkIms276Fnp8iqDgWBrKRjZB74udaYBAE+33CWVl51k4CtNoGHuvgw\numvtXAiT3J0TCeUkHtxVp01ToVS6MKD/1/T1/w5Jtsetk74kAlk3BeLH5eiGm9BqKrH8Q5PcLq7C\nk5OT2b59O+vWrWP//v2kpaVhvY6jl9TU1Ks+54pJcRarhf/t+V+z/GKclUoiPZ3wVQvYiYrgJs/i\nHnz4G9asmFJ9RvHU8z/y9YKHSc8oZsnyA7zz+nAqKgxobpFt+Iucjs9GEGD9ptPcO6wtH87dxJzZ\n97Lo6934+znTOaol3t6OBAU0fju8RHDmF2MU2ypsDf7eMJeWcfKtd5HYKWn74XtXPHNuDKlLfqBg\nbwxdFv/vmtrnbPqL/B07r0n7/SKCRYRxvYKSo4cp4g8CJj+MOqhh9aGXcvLNd3Dr3g2fkQ1LsruR\nDLZ3paWl6neWde4snz7/OP+3ocZmt32xHouxKk9m/nfzkcvkPDPxmQuPWrGatmM1V/0tHzmdwqLl\nf/HdJ89Ut3fzaYO3R2T1z1arFUVQK95++23enVJTHmhy1qBXiTHoDfTs0JNOXTrh6+/LiPtH0PGe\njgiCQGpKKt9++S2fzJuDOisBkaH2iif+bDrvLVjG1PEjmb90LZ6uzkwZM4yvV23gmznTEAQb50/u\npiQppt7PYmVMFkqZmFH31BV3KtWZcVJVVXoIQAm+nNy7HZuleXKIxGIZ3bq/i6e5L7bKWyWKg8hR\ngrSPDKPXna+rfiWMRiOlpaVkZ2eTnp6OpRnEgtRqNdOnT7/iOfoVz9CzSrOIy45r8oEBGCwW0su0\nnC6o5FShgF5wRalwQSmVIBKa0PSgAVgsNgJauOLvV5W5ajCYiTmYyuABbVj49W7GPNiJ/1u0k8Ox\n6azbeIq+vVtXn59dZOuOBFxc7FEqm66cqyF4uGvw9NCg05vo3jWQw0fSyMsrZ8++s3z03n38sfE0\nH849QOr5LDp28MeuEeOzExnoKE2lq72VQpEnuQ1InJMolfhcWK0enPgYMkfHJhGkce7QHjtvL/aN\nHofXoAHIHB0b1V4TEnzN2u8XEYkh/vs3sDjnEv7Wq8idG5jp/DdUfr4k/uf/aDH6wWtq35z0sHNG\nemERcWT7XwgIdBlQlRPgggj7S46h3pn3DjOfnomjpup3oVAVY6ioOaJ7779reGJ0f/y9L0wmRSIC\nW/XjUj+VR196mVeemcoLj4yvvmZTKqh0rLpPpTIpFRUVPDDuAQKDA/ngzQ/YvH4zXbp3oUVAC/oP\n6odDXioifc329q9/7eN/K9cjEYsZN6Ifn3+3hu8/mcmQnp1ZunYL9w+Mxs/LlZRDGyhLrZ0flFtq\nZPHOdE6klTGhpz+/H83By0mJ64VzcpsAP+zJQBAE/F3tsEo1JGVZST66D+FvvtuxOUbcVBIk4us5\n2xbRtuPTRAfPQ1USgHCLxExJuBzJMBmGdkZMqn+GrvqlCIKAVqslMzOTkydPcuLECdLT0ykpKWk2\n/3WTyUR4eDj2V1CHvGJAP51zmuzS5rfxEwQo1OlJKtJyIt9IhtYeqdwdlVyNTGQCmjcjUiwWVQdz\nAKlUwtFj6Zw8lcXOPcm8MLUPp+OycXdT8+Jz/dDpzTw//SdiDpyjtFxPeJg3H322mdEPRF2TWEhT\nEBzkDsCg/mF0imqBp6cDkeE+RHcNZMqkjiQk5jLpqWVkZJbQLtIHjbrhOw2OlNNTdo4wlZI0qzNl\nV0ucA9TBQQQ/+QRZv/1ByteLce4Yhdyp4d7l9WHn60OLcWM5+PhTyJ2dGm0gcz0yscbCIvY9MJYW\nD48m8NFHGtX27yjcXMn7aytKL09UTeCW1pT0UDhhu+C6tWHFd7Tp2IXA8KoVdQubgK3CxI6zEn4/\nVonO6sDYQdFIL8xtbZZTWE1VAf90cgbb9p1i2uSaSgWfwG7YK2oS47bs3sOWPXv47K2aDHnEYird\nNQiXRP2O93TkrZlvEX86nq+Xfc2YCWNwcHRAJBLhUJCJWJuP1WpDLBZRWFLG79v2M/H+AWzff4KH\nhvWibetAbDYbHq5OtA70IzTAi+R9a6jMqSprSy/S43hhtb1wSyrPDAxkR3whLdxUDGnrQVKulhZu\nKrQGC4u2pjI8ypNIPwcqpT4c3X+ckpy6eUZHc4xklls4X2qhleu1TfJbBg+hX8f/4VzWEUF/CyS8\nKUA+wA5rfzD4GTBLbpHZxQ3CZDJRVFREcnIyR44cISkpidzcXPT6G5f87e7uju8VvjOuuOW+JnYN\nmSU3V+5VIhYR5u5CiLMcZ6kWke3ahB2uBUEQyMktJzO7lLbhPqz8+Qj29nLS0osZNjiCthE+THl2\nBa/NGMyLM3+iR7dgekYH07dXq6t3fpP4dmkM8+Zvo2/vVsx8aSDBgW5Xb3QJNgH22TqyqsKFInPD\ntpVKT53m1Fvv4jmgP61ffA6VVou6QkuBlyfCNU6ATsx6E4WbG2EzX25025yNm8nftZv2n8xp0PPz\ntu8kfs7HdFu+BDvvxmvr10fBnn2kr/7puqxkAUxFxWjPn6cy9Tym3DysuXmI9HqsOj2WykpMOh1W\nowGr1YpcpUJqp0KqskOiUqH088Ukl2Hn74/K3w/7Fv7MDIzCcGEn5sXhvXltwXf4BlVNnNprTWw4\nZCE2S0JOfg5ymZxuoY482M6KVKlDV1STs/HiB9/zwOAu9O1aleEmlsgJbz8K0SWrF5+O93B003q8\nL7GHNLg7YrwkD66woJCFXyzknm73kBCfwPTXp1c/pi7KRVJcFUznL11Lp8hWhAX5M/Wd/6N9WBBv\nPvMwr879hnmznqrp31DJ2V0rMZXXyK6uPZyDRCzivk5evP9rIhqllAk9/TmdWU6EnwYPh6ojCJ3J\nCgLY2SnJrFCTfHjPZX8vggAiEfwcr6VnCzu81Q1PNHXzjKB7uzmIc1xviTNyib8UcQ8peo0Bq+2f\nU24mCAKVlZUUFBSQkZFBQUHB1Rs1M2FhYYwdO/ayj1+2kNJqs5JbVlcy8UZjtQnE5RURd8Hozd1e\nQ6SHIz4qKwoKEZpxD0okEuHj7YjVamPuv7dQWKRl6pRe7D+YSqsQD7RaIxKJmFU/H+Hfnz5EWGtP\nnn5hJX17taKiwoBKJa+zNX+zeWJSNE9MimblT0cYM2ExbSN9mfnSACLDGyZ2IhZBL0ksXZ0UbDR3\n5rdyBfqrbDE5tY2k1++/cO7b7zG/NJ3XU1JxdNBwqGc0y5+dek3vo/0nczi/bAVHn59GpwWNE6Hx\nHjYEBIETr791Ve33pPn/pfJ8Gv22XbsLXn249+pBwrwvqDyfhn1Ay6s3oCo/oejwEXTHT6A9dZqS\nc6kolUqCQ1vTOawNndp3wKm3ExqNBrVaXf2/g0ZTvUWorays+l+rxWKxcObMGeKSk0j6axsnU1J4\noLSMrn36Y+/sSnFuDhrnqgRWOWCpMJJaVLXaLCsvIyQwhLQiKYJgRURN4ujZtFwyc4uqgzlAi9a9\nagXz1z/+lBefeKxWMLeoVbWCOcCWDVuI2RHDux+/y7Ejx6qvq8qKkRSnYTSZkUmlPDF6KGNenMOf\nX73P0N6d2XXoFM+/v4Cp42sy8CsrSknZtbxOjbnGTsriHWkEe9oztrsvi3ek8fPBLBzsZPQLr5nw\nquQSTHJ3Yk8kU5Z3jCtxcZ46vJU9q09rGRVmj1gMjorLfx/Y2bvTq/tcVAWtELJvbiQXxALy6Cpd\ndR0GwHhrKs41MRaLhZKSEnJzc0lPT8dguLHHv1cjLS0Nm82G+DIJy5ddoeeU5bD6yOpmHdz1IhOL\naePuTLCzHEdpBSJb2Q153cTkPL5fdoCiIi0vP9+fx59dwf7tMygt0/PeRxv4z9yHWL/pNHv2naVX\njxBGDI28eqc3id/+PMG8+dvw83VixosDuKdTw4LLRcpw4DdTJzaXUys7+nI8MPsDuu3Zh7iyEllg\nAG9+tRCtQ+PrzC+y9/6H6LTo/7Dzabz62tUMXU7P/hBVC3+CHp90zeO7Ehm/rKU8Lp6Idy4vLVuw\ndx/aA4coO3KUyrw8evXpy71DhhAVFUVYaCiOjcwluBqGU6fQfvghlbGxnNPr+byigjgPLwYPHkG3\nwLZky3pzPE1PYVEhAf4BeGqsTOluxFD5F8KF1durc5fTv1skQ3tXufTJlA6EtRlWXRuecDaFUVOe\n5MzOmhW9IJWg9XTAdknU+HHJj+zdtZdF3y+qNUZlZTmK7ARA4D9L1rLj4AnemDqOtKx8svOLmDZ5\nFBarFekltf5lRXmk7l6GzVJbsGNPQhFao5UerV2Y/UsCb40KxUEpxWS1oZLXtBcQUWTz4tTe7dXv\n8+9YbALSv52X2wRYdVqLnUzE0BAVdtK6O1JiiYLoHu/jru+BTXdzA7nYRYykjxyDmxGL7Z+Rpa7T\n6SgoKCAzM5Pc3Ju/iL0aTz75JD6X+b67bEA/mn6UPcmX31K6FfHWqIlwd8DTzoSCIoQbIPJvNFnY\nsSuJ3fvOkpVdyrtvDCc7u4ytOxLw93PmVFw2jz/anf9btBM3NzUD+4XSv08o+QUVeHleeyBrajZt\niefz/9uGnZ2MmS8OpHfPxp1P5+DDj/pwDmuv/Jn3W7+RUStWYiotIzU7m7feeQvvB64uaVgfZz75\nDFXLFrQcf/ktqKtxOZnYg5OeIPTlF3FqIqe1y7Gle2/6b9uE5BJ7xJJjxylZv4lzv//Bv8aPp0eH\nDgzo35927do161goLYUHHoCKS3zFxWLOzZrFfp2O7xZ/x8kz6YR0ew1nr7a0aenG/RE2/L2zqMiv\nSi7LzC3iqbe+ZsPi16u7CGk3EjtxTa1015H/4r8fvkeXDjW2vDovZ8ySmmB+5vQZHh//OPtP7a81\nRLlBh11mHCaTCZlUglZn4I3PvyOydQAp6TkcOpnIqn+/gZd7TU5MYXYq6TGra4nNXOTg2RLOF+oY\n282XzSfzOZRSytujWtd6jlXmQGJqOblnT1/2o8vRWjlfaqa7X+3clAqTjSKdjQCn+jZDRXTo/AJB\nitFYb9xJYn3DQNpODlEidFL9HS/+YrFYKC0trV6F38gz8KZg0KBBREdH1/vYZQP6n6f+JCU/pVkH\n1pzIJRIiPF0IdJTiKCkDW8XVGzURTzyznG+/nMBf285w/GQmyWfz+e/nY1AqZRQVV/LTL7GoVHIm\nPdL1ho2poezee5Z5/7cVvd7Movf+RejeZCReDphHd67ZR7wCiUIIy7SBnDXUfxQistnovn0nLsXF\n7O/Xh10LvkSXkUnbD2c3apVduC+G8ytWXbftKtQN6gcmTCZ05stNZpt6Jc5++TWIwP+BUeT8+hv5\n6zYQ4OfH0489xqRHH0XRRGV/DeKnn+Czz+peHzECLuTOlpSUsHr1alau/Bl9hZZ+Xfrw2JhWmC9s\nY787/yc6hAcwalBVrbm9ow9BgTVSt4uW/kBcUjIL59RMoExOavT2tc+YPZWepJel13r/UpMR+8w4\nsJrZdegkn3/3C++9OJGEcxm4OjnQoU0wr85dzJQxQy/UmQvknIsj5+gftfoWhKrkt8IKE9OGBfG/\nredx08gpqDDx2sgQxJessrUyX47v24dJVyXSJAAGs0BCkQknpYQKow1/BykahYh1STruD2uYeVVw\n6H20852GLe/GVsVcikglRtpHhtnfgvEO1lUXBAG9Xk9hYSFZWVnk5OTc1pOWVq1a8fDDD9f7WL0B\nXRAEvtn7DTrTraeUdq34OWgIc1fjZWdGJhRCM2oJb9mewOGjaezak8xX/x3P3P9sZdG/a1aRTz3/\nI6GtPRkxNJKw1le3QL0ZHD6aRsFrv9A5swQXFxWK+eOx3hPQoLYCIg4KHfixzJX8BiTOFR+N5dRb\ns/H910hCpj511ecDbOpwD0OPHWrQJKMhXAzqLc8k0HfkcNL+dR/Fbk0jZXslKpKSiJ/6Ai0jIxje\npy9PTJ5MUAO9j5ucJUtg4cK61wcMgE8+qXO5pKSEjz76iIULF/DcxBEM7xXJmBe/YPuyd6ufExb1\nADKhKlhX6nR4duiENulM9eM2hRytmwrhkuyvoT2HMvvT2XTrUWPXKraY0WTEg6XmTLOkrIL3Fqyo\nSl4tKGbZZ6+ikF+oDRcE0uP2U3RmZ60xCwL8e2MKg9q64+Gg4IsNKcwZ04a8ciPuGjnyCyn7gljO\n+RIFqcdqdghMVoHD2Uai/ZXMiymlVwsl7b0UbEjWEeIsI7nYxEPhNfLCpQYbh7IMDApWcfEu9fDu\nSLfI9xFlN+1RSWOQBMkQd5egs9PfseVmFouFsrIy8vLySE9Pp7Ky+e1qbxT29vbMmDGj3oqqegN6\nia6EpfuX3pDB3QyUUikRHs4EOEpwkJSBrWESqY2lsEiLm6uarTsS2L4ricED2tA5qgVvvvcH8z8b\nzen4bL76di/2KjkPjepI544tyMwqxc+3qrzr1z+O88B9Ha7yKs2H9MdDSL7fS9K5Et5wt+O+V4Yw\n9sFODW5vEsnYau7MmnIVugYoJJ398muy/lxHuw/fw7ljFACCRUAkFoO45jY9OOkJTKWl9PxlNaLr\nMF35O5qh9zJbJkOmUWNUKpn70QcUeDXPhKsiMYm875ZiSE7mgzffYvJj1+e53iScPQsPP1wV9S7l\n/fdh2LDLNtPpdMx+9112zp9PxIieTJ9SVarm4hWKr1fNMcFDT01l/P3/4sHhF/oSidB6O2K9pERt\n1rRZBAQGMPWlmmRJsc2GOvMMImPN36kgCAx+/A3ef3EiKjslMz7+mnmznqRDm2BsNiupR7dQdj62\n+vlHU0vZHldImI8arcFaLRhzPK2MM1laxkfXlAIZ5Z6cjI2norBGoe4i2RUWyo02POylbDmnY2xE\nVQA/nG1k2zk9r/V0QhDgYJYBk1Wgh78SqViEWuNDz66foswPRLDehNWhFGQ9lFhaWTHcYJ2PG4XB\nYKhehWdlZd3Wq/CrMW3atHrzZ+qtQz9XcI5zhc1rKnAzsdhs5FToOFOo5Xi+hRKzEwqFO3ZSBWIM\nNFWtiEpVlbIbFOjGgL6htGzhwo7dSbTwcyGstSfTZ/1CSJA7E8Z3YemKgwQFuvHc9J84m1JAaCsP\nFHLZTT1nt0X4IGrlhdOUHkQ+1IkfV/m48pEAACAASURBVB/hjdl/YK9S0KGd31XbS7DRSpzJALsC\nbDIfUkyiK36yLvd0wrNvH+I/+Yyy46dw1QzHcsge21kFInsBkYOV9FU/IRKLCZ32ArsGj0ATFtrg\nLPErsXfUGGaHtcbrgsuR1GKhzMmJc2Gh1933pZiKisle8CVlP61hzrSX+farr+gQFdWkr3HNuLiA\nqyscPQoWC4jFMGYMTJx4xZ0QmUzGoMGDeWTqVI4kpPLUq5+iVGm4f+TEahGZP7ds5fCJE3zwyozq\ndgY3B8yXzMdWLVtFQlwCsz+dXXNRsKHJOVtHBW7Sa59hVboyfcJQfDxceXTUQLzcXbBYTJyN+Y3S\n9NNsjyvE2V6ORCxiZUwWj/VpwZqD2UwdGMDvR3PxdFQQ6edAW/8Lf2OCiDyrF0d3bsekq0CA6pX1\nmUIT8QUmIt0VbErR0dFbQaVJ4GyJmZwKK938lOgtAh72EmRiESqZiHB3OXK5Pb16zyXC4WUkJY43\nvAxN7CFFOkyOubsFg7MRC3dOopvVaqWsrIzz589XG51kZWU1WiP9dqRly5a4udUtOa53hb49cTsn\nM0/ekIHdaqjkMiI9nGmpEaORlCLYmnarprRMz/yFO5gyOZo5n23msw/v588NpwA4e66Qh0ZFEdba\nk1U/H8HDw4HwMC9cXeyRNdLvvLnIyCxh3vytrN8Ux8yXBjB1Sq8Gt80TPFltaEvMVRLnAPJXHUd8\n1guVrw8yR0cEiQ1rhyQOPfMkfTbUnInGvjQdhZsbEW+/cYXersyhKVMJf+NVnty6ne47a2ROv5v2\nAse73HPN/f6drG+XkLFyNT8uW8awIfU7st0SlJdDejp4eFT9aySVlZXMnj2bL79cxOzp05n59JO4\nRLQjJWYPzhdWFRZ7JZVONefjiWcSefTBRzkYf/CSngQ0uecRV+TX6n/0ix8ydngfHhpa+94zGQwk\n711FUU46n29IYXBbd9q3cEQqETFzRRzhfhoe79OCXw/nMKqzN4fPldAztOpYxSJzIiG5gPzzNbar\nO87r6RdgR5HeyuEsI0NDqhIXsyssHMs1MaKVivOlFvwcJEjFItYn6xgWoqLqCF5E5y4zaCH9F9Yb\nU3xTgwikneQIbUEvMdxRK1WDwUBRURHZ2dlkZmY2myrbrU6vXr3o379/nev1BvRVR1bdEjXotwKB\nzo6EuapwVxqR2Appyin29l1JbNuZSKtgdx59uCtPv/Aj3yysUiGb+uJKFv1nHC/M+IkvPn0Qq8VG\nRlYJzk4qnJxUyG9ygC8s0jJv/jZ++PEgM18ayPQX6t5cl+MsgSzThpCov7yGgPWkCmuyHH1WNoLV\ngtLXh9N/TKXNB89jHxhQ67kZa34l5Ztv6bRgfqPV4w498TQtxo/Ba+AAVJWVjP5uCT7pmRzv1oVN\nD9x/zcI3l1J08BBn3/+IKY8+ytw5DROzuROorKxk3iuvkLx+PR0nP8r0p54EQJBI0HpqsF2y1e5t\n7825gnPYqWqy4dWF2UhKahsjXS6Y6yrLSdm1HHNlKV9uPc99Hb3wdVGyM76QLacK6BrizIn0MuwV\nUroEO1UHcgQol/pyYu9uzMba2c4Wm0BMhpFWrjLi8k0MDKoam9ZkI7nYTAcvBfXdHa3CxxDp8Qy2\ngvqPgzYmb+ZAxgHGRI4mwuP6ZZEvIlKLkPZVYPIxY7pDktxsNhvl5eXk5+eTnp5OWdmNnh3dmoSE\nhPDII3UVK+vccTabjcKKwhsyqNuB1JIyUkuqbiKNXEmkpzMt1CJU4mK4Tr/3/n1a0693K0pK9Zgt\nVqY9XxUUM7NK8fF2pKxcj0atQCGXsvK3I3h4aJj3n61ERvhQVqbnnddvnrmHm6uaT97/F+/MGsa8\n+Vtx8XuFmS8NZMZLA5BJpVzJqC2EVGarUzlq35blZV7kmusGdrG3CetZOSo/XyxaLeVnYgl4ZnSd\nYA7g/9ADuPfswdHnX8J7+LAG142fmfs5nv37VsvA6uztWfrCc4gEoUkCOUDqf/6L+tx5YvfsISCg\n7tjvZOzt7XlXqcTq6sq/Vq1GJlfwwuRH0bvVDubD+wznl42/1Arm9qWFdYL5mJfmMGZY7zrBvLy0\nkHO7lmEzVf09luvN1ScEYrGIvuFu5JQamDkiBKlEjExS9aBVrCCtUMr5k/WLBknFIrQmGzZBoNRg\nY1eanlKDjY7eCqK86lYfePt3o0vou5CjxnYZUbH1iRuwCjZm9JjOrL9eZ9G9C678ITYAaagMURcJ\nOqUeg62yuZWymx2j0UhxcXH1Krw5jE5udy5m6v89Ma7OCr1QW8jyg7euveOtgkgEwS5OhLqqcJXp\nkAhFV2/UQHLzyrHZBOLO5FBZaeT+e9vzxDPL+fyTB3j7/XX89/MxvPvhelxd7ElJLeCZJ3vf9Gx5\nm01g3vytzP/qGIMe+S8TRggM7Hh12WALUrZbO/NzmT0Vf0ucs2ZLEVLtEMlsiNroEGuuvjuSNP+/\nlJ44RaeF85HYXQgQlx6GXiB73QYK9x+g3Zz3G/oWG4UuPZ1jU6aycMECJj40ulle47bg4EE4fBie\neooXZ84gKyOD79bWJNy+Mf0N/Pz9ePblZ6uvKStKUeQm1upmzEtzGD20F6OH9a51vTgvk7S9K2qJ\nvSTlaPnftvN8Oj4CmUTEin2ZtPZWc09QjZeAQe7F8cMn0JXUjbwHMg1klFsYElwlBLMqTsuEthoK\ndFaclTUTgos4OgUSfc/HKHL9annF14dNsCEWVc12Z/31Jp8MvrYdG5FchLSnAkuw5bb3GxcEgYqK\nCvLz88nIyKC4uPhmD+m24OWXX8bhb6JcdQJ6fE48f8X/dUMHdifgqFTQ1sMZPzVVdrBNkElaVq7n\n4882Y2cnx2YTCA5yI6CFK717hvDEM8tZvOgRtmxPoEJrJC+/gnaRvvTsHtQE7+baKSxX8sqX4eQn\n/c7q+R6o1Q2ro9Zhzx/mTqwrk2C5zjO/4qOxHH3uJdq+9z7uniOwFUoQO1uRtNeDVEB77hzHZ8yi\n59qfrut1Lkfur7+Rv+xHDu7Zg981KNjdyfzyyy88/fTTrNu5jtMnT/PX+r/4ZsU31Y8rdJUos+Nq\nZdrXH8wF8tKTyDr4S63+KwwWlu3NpL2/A78eycHBTkrfNm70aVO1xS6IJOQYXEnYv536+CtFh6e9\nlBAXKb8n6ni4rZpzJWZcVZI6sq1yuYaePT7GsawDNmPj7tkzBQnEZsfycPvxCIJQHeSvhsRHiriX\nFIOj8bb2GzeZTJSUlJCVlUVmZibmenbp7nJlxo4dS1hYWK1rdQL6zqSdHM84fkMHdqchEkGomwut\nnJW4yCsR265vxqnTmTCaLKSlF9O+rS+n43PYuiOBl5/vz4zXf+X1mYNZ+fMR1q7LpqjwPA/dH8Xo\nUVGEhXo10TtqHOs2x/HjqsP8+P3kRrctwp3Vhnbsrrj+fcPMj2NwUHfA7oI7kcjPjLSLlr+6RDNw\nz07ECvlVemg8KW++QxdPb5YvXtzkfd8pFBUV0aNnD3xa+LJ286/V12VGA6rMOLhEcnTstDk8OLgX\nY4bXBHNBEMhKOkr+ydoLD0GAp789gXNwZz7pa66TmG+Su3AmIZui9LMAGC0CG87q6Bdgx/ZUPd4a\nCWq5mDKDjZ4tlBzLNWK1QWef2pNSEWK6dHsdH4Zhq7hyIP/p9M/0aBGNr0Nth6zP9/0HV5ULZwoS\neDn6RbzUV/hbFYGsqwJruIBedHupml3KpavwoqKm29H8p9K7d2/69etX61qdM/SCipvvKHO7IwiQ\nUFBMwoWP0lWlJtzDET+VgJ2oCEFo3BaZSiVHpZLj7FSVZRsU4MqUSdGYzFYqdSbcXNW8MLUvL0yF\ntPRi1vx2jMlTlyMWixg9KorRozpW17bfCL79fh8vPtv3mtq6UsCzym0MU7RghS6U07prnLkL4Nlu\nKKa8CsoTErFv2QJJnoIDk56gy9f/a5ZgHjtuAp++9RaTH74+e9U7HVdXVxLOJPD8888zefRklvy8\nBKnFjCo74arB3Gazcf7EDkrPHqzVZ1xmBZP+F8vK5zvTyutv94wAJWIfTu3chcVkRH+J0puzUsym\nszrGRKjZnqrH015EfIGFCpONKC8FpYbaWdRt2k4kzGUKtkIxtgsJshXGCjQKDUuO/cDgkEEUVhay\nLz2GpzpPwWqzUWIorRPQNQo1Qc6BTI569LKfk8hRgrSvDKOnCa319hP5MplMlJaWkpOTQ3p6OibT\nnZGod6uQk1NXJ6HWCl0QBBbtWoTZenf7o7mQiEWEujkT4qzARVaJyFZyXf1ZLDak0vq36+LP5PDz\n2mP8vDYWX28nHhoVxUOjoqonBs3BufOFPPTwYmJjZl13XwJwXAhnRbkvmabG35OWvWqEfBk2iwVd\negYmWw4G/5PXpf1e7zhtNvYOHMrenbvoEHnrGvHciqxZs4bpM14mbddKROaaoDVu2keMGtyDscP7\nVF+zWiykHF6HNjO+dh8Hs/kjNpcfnulYp3+rxJ6UHAuZ8VVa83qzgFImqlZ66+KrZMnxCia2VyMW\nifjxVAXDQ1SUGmwEu9TIsvq16E2n1m9CTt2/nfWJG+gZ0JM/E/5kW8oO/j18Hpllmaw4uZLOPp3x\n0njSo0WN9nZBZQHZFTm096pfm18SKUfUSYxOprutSs4EQUCn05Gfn09mZib5+flXb3SXa0atVjN9\n+vRaiXG1AvqdrhDXWHb/uhuFSkF413A0zppmeQ03ezsi3B3xtbehbEY72INHzrNm7THWrD1Gxw7+\njB4VxYP3RzV5ffsbs//Az8eJZ5/qffUnNxCLIGaPrROryh0oszR8K16oFGM9YI9QJkXkZKVCug/n\n3m2bbFwAxsJCdg4aTk5ODp7XULN9FygoyMfLyxtrwkag/mBuNhs5u3cN+sK0Wm0/WJuIVCLm9fta\n1elXJ/Ph5MHD6MpLMFoFtqfqUcvF9GqhpFhvq1Z6yyy3cDrfxNAQFWVGGw5ycfV2vbNrCNFRHyPN\n9QKhZjX+d76I+Q/To6fx6uZZvD9gNkqpkrTSdGZuepXJUY8yInQ4WeXZ/Bq/FrVczejIB1HLa2Ri\nUYCsjxJzSwvG2yjJzWw2U1ZWVr0Kv9XsRu90pk+fjkZTcz/WCugpBSn8efLPmzKwWw1BEPju3e8Y\nNmkY21ZvY8jEIXj4N+8XtkwsJszDhWBHGU4yLSJb81gwbduZyM9rj/HLb8cYPiSCh+6PYuSwyHq1\ngRuLR8BrpCV8iJ2y6U0nDIKS9ZYu/F4uxdRQQQmh6ghEJKJOpvv1YqnUcWTUQxTn5jV11/84CgsL\naBMWyoCu7eoEc4OukuTdKzBfUk5rtQlMWBTL2G6+3N+59vmzIJaQrXMi8cCuqp+BRYfLGBOuxs1e\nQnqZhZaOUmIyDBitAgqJCIVUREfvmrpyhZ0TPbt9ikNpBDZTzSr54mrcUeFAmaGM5Sd+ZFDIQLan\n7KBXQE+MFgM7UncT7BLE/W3u41jOcZIKkxjbdgwHMg7S3rs9dtIaRzZpCymiHlL0agPWy9iy3kpc\nXIUXFhbeNnajdzLjxo0jNLRGzbJWQD+cdph9Z/fdlIHdauSk5rBm/hr6jenHid0nGPTIIACKc4sJ\naheEvBnOYP+Op9qeCHcHvO0tKISiZlm9/77uJL/8doy0Y+lEj2jP4IFh9Ovd+uoN6+GHHw/ywScb\n6dk9hMEDwhg/pnMTj7aKEpxZY4hie4XtRitpVmPIyeXctJmknTlz9SffpUEcPXqE8WNGk7Tpq+pr\n2vISUnYtw2qo0XE/lVHOE18fZ/mzHWntra7Vh0nmRlzceUqyz9e6fjDLSJHOSrmxqo68tWvVhPNS\npTcAkUhKt+5v420dgFVb/911cTX+5tZ3eLXnDByVjlQYK/h496d8NOhD9qTtxUfjQ7BLEF8e+oqB\nwQNo5VojeCSIBeQ9lFhDbehvA131i0YnF+1Gdbrb7zz/TkEkEuHfsiUtAgPx9vXF3dUVd6ea/Kha\nAX1z/GbO5Nz9ggLY89senD2qPJXPHD7D6JdGU5JXQnFeMTHrYpjw+gREIhG553NR2itxcnci5WQK\nLdu0RCprOsOQi8glYsLdXQhykuEgLUdka1q94ty8cmZ/mkRediwnT2dVb8nf06nhOul9hvyb+Z+N\nZs06C0X5B/h93UmmTI5myqRoWvi7NOl4ATLwY0VlG45fa+LcNWLV6dgzcBh6bfOY+vyTOXBgPy+/\n8Bz7f/yE0sIcUncvR7gkp2f1gSw2Hs9nydTa+vcCUIIPJ/fuwGapfT8U6awcyjKSVm5hTLgaFzsx\nqSVm3O2rstov0rbDk7RymIi1qO5+y8+n15BelskL3Z7lu6NL6BXQk+9jlzBv6NwLry/wW/zvjAwd\ngUxS/+6U2E2MtLccvdutX3J20W40MzPztrcbvV3x9vUlICgIbz8/XNzcsFOrkcrltRYxcsDukp9r\nBfSVh1eSV553wwZ8K7P0g6X8a+q/cHRz5KtZXzH+1fFsWroJF08Xzhw6w3OfP8dfy/9CqVIiEonw\nDvJm/bfrGf/KeLwDvZt9fL4aDW3c1XjamZBT1KR2sEXFldVb8vkFFfWWwVXo5WQWOuDuWImbg54j\nsenMeuc3tq57sfo5Op2JxUtiWLw0htBWHjwxKZqhg5pO6hKqvshPC21YXuFHmvHGBPbt3XpRXFiI\nvar5kgv/yWxYv57/mzeHjwYpuFRqefYviajkEl69t7a8r1WqITlDR3biiTp97cswEJtjpF2vobQp\n3svmFB1OSjHOSgnR/krEImgZNIiowFcRcpVYbBZsgg25pGYH7uWNMxnXdgxSsZQjWUd5uN04Pt79\nKUEuQUhEYtxUblSadYxrO6bumxGBtL0cOojQSfX1BkZBENi6dSvHjx9n5MiRtGnT5to/vGvkotFJ\nXl4eaWlpd5Td6K2Ou4cHAcHB+Pj74+rujkqjQaZQNGj3UQJcukdVHdAFQeDL3V9istwtLQBIT0gn\n4WgC5UXlhHUOQxAEtKVa2vZsy8q5K3lyzpMs/WApk96ukhm1WW0s+2gZHft1JKJ7BGVFZZiN5mY/\ndwdQSCVEergQ4CDFQVrapHawF8vgfl57DIlYxEOjoojuM4jfY3tiskiRiARG90xg8cIv6NszhHGj\n699m37I9gW+XxnA6Ppspk3swZVI0arUCQYDiCjvslWaU8mtftdgE2Ct0YlW5M8UN8GC/VvaPvJ/D\nO3fRKujmCvjc6Sxfvow133zGO0NcMFlsTFgUy8SeftzbsfZ5uVbmw8mYgxgqa2t852mtrIrT0tJR\nyv1h9tXXj+caCXSS4agU4+rehu4dPkKS41Y9bziVd5qDmYdo6xnJX2e38ESnx1lz+hf6B/cj0iOC\n1/56g9n93mZT8mZGho7gdH4cYpG4Tsa6SCVG2keG2d+C8Sq66rGxsVRUVBAVFcWHH37I3Llzr+OT\nazh6vZ6ioiKysrLIzs7+xxqd3CicnJ0JatUKHz8/3Dw9UTs4IFUoruhkeDVEwKVacdUBXWvQsnjf\nXTGMy2Gz2Tiw4QCCTcCgMzBg3AB++PAHJrw+AbFETHpCOmkJafS6vxcJhxNIOJKAV0svdFodfR7o\nQ9qZNJzcnXD2dG6S5LMr0cLRgTB3NZ5KI1JbIdA0f6hxZ3JYs/YYe1JGYO/RFmcnFS7OKtQKE9/O\n6UdW0gdX7SMzq5TFS/axeGkMI4a0pXWPmeRUhiKTWHl0wGna+F+fj4AJBRvNnVlbrsDQxF9QKe+8\nz5czX2FAz55N2u9d6mf+F/PY//s3rI05y/JnOxLsWROYbWIpmeVqzh7ZW6fduiQdCUUmxkWo8XOo\ne/xlp3KjZ/e52Be1RjALmK1mVpxcyeCQQZToS1gSu5S2Xm25L2wkH+36lDf7zOKzvV/w4cD3iM8/\ng0pmR4BzQL1jlgTLEHeToFPpGxUgjUYj33//PfHx8Xz00Ueo1eqrN2okVquV8vJy8vLySE9Pp6Ki\noslf4y6g1mgICgnBr2VL3Dw80Dg5IVMqrytwXwkHavJ9qwN6WnEaa4+tbZYXvFPJS8/jyJYjtGzT\nEoPOgFwpp13Pdiz7aBlu3m5I5BLy0/PpcV8Pdvy0g7B7wrhn0D3kpuXi4OqAo6sjgiCw46cd9B9b\n41ZWkleCo7sj4is5nDQQO5mUCA9nAh2kqCUlcJ12sIIA8//oSlKanJJSHcUlOhQy6OW3gFdeHNCo\nvpasSmHt8fuxCeDuZk/nNhaeHXnkusZ3kTIcWWvqxOaypkmcy/hqMYNdXPnigw+boLe7NAhB4Jth\ng4mXZTKxe41XgVnuzokTSZTnZdV6ekKhmVVxWvoFKOnT0u7vvSEWy4ju8T7uht7YdDb2pu1jXeIG\nHowYRWJhYnUNeWJhEnF5cTze6TG+Pfo9nX07kVx0lvvb3IdUXE9+jBRkPZRYWlsx2K4tyc1ms5GR\nkYHVamX16tW8/vrr19TP3zEajdWr8KysLKzWWz+T/nZBrlAQ3KoV/gEBuHt64uDsjMLOjis6UzUD\naqq23uGSgH488zg7E3fe0IHcSVjMFg5tOkTrTq3Z/etuBj48ELWjmrKiMo5uO0pk90i8ArxY/+16\nnD2cyU7NpuvQrqgd1QiCgLOnM6lxqXj6e/LH138wbua4ZlnJBzg7EuZqj4fScM12sIcTfflpT5vq\naaG/+hgvjm28lKPOIOP9H3ug1dkoKNRiLD1EC9laXnq2H8GBbo3urz6yBR9WGcI51AAP9stRFnsM\n0+IlHNlbdzV4l+ZGoHP7SF7qoSTcz4Eimyen9u6oZcZisQmsOq3FaBUYF6HGXv73L1QRHTo+S5Bq\nLNaSqpt2Y/JmDmUe5q2+r2OymBCLxLy97d3qGvLpG19h7pCPMVlNHMo8TN/APvwdsacESS8ZBmcj\nlksU7mw2G9nZ2fj5+dX7jlavXs3YsfWLG+3du5cTJ07w3HPPNfJzqkIQBMrKyigoKCA9PZ3S0uYp\nff0nIZPJCAgOpkVAAB7e3jg6O6NQqRBJbq6F9UVUwMU0zOqAvit5F8fSj928Ud1BGHQG9qzdg8lo\nInpENBuXbOTh1x4GqD53z07JJvFoIgIC4V3CObL1CB7+HhTnFlOUW8Qjrz1C7vlc7DR2OLo6Nss4\n1XI5EZ5OtNSIsReVgNDwcpSkTFeSclzwcdYSFZxzzbtJ8WkebD3eEie1gR6tjxJ7JI5Z72yibbgL\nUyb3YOSwplFeSxBa84O2JecMjU+c2xzVBYvZ3CQ7JndpPMlJiQwZ0If3RoaSlxJX67EDmQZ+T9Qx\nLlJNe8+6paSBrUbS3v9lhLzaj5mtZl5YP40o7/bkaQt4tutU0kvTqmvIfTTeuNu7EegcWLtDEcg6\ny7FFgl5iuGz295YtW+jcuTNr1qyhR48eCIJAamoqI0eO5L333uPdd9+t9fyioiK++uorIiIiuPfe\next1rxmNRkpKSsjOziYjI+Ou3eg1IpFIaBkYiH9AAF4+Pji6uKC0t0csbfqqpaZECVx0G6geabm+\nacug/skoVcrqunWAwRMH13pcEAROxZyidVRrDmw8QL/R/SjJL2HklJGknk4lNT6VTT9sQuOkobSw\nlNCOoQS1DeLMoTO4eLk0WRa91mTiYEY+B6k63glydiXUVYWbQo/EVsSVVu+t/Ypo7Xf9BgvhLfMJ\nb3lRIlJOsH9VRv3OPcksXrKPGa//whOTopkyuQcuzteeVR4mSmKOJpkD9h34sdyVggYmzsW/NIPN\nW7feDeY3kVatQ5n42JP8tnkF3S/MbQt0Vlaf1uKtkfLxgLolkR7eHega+T7ibGeEegp3crX5dPfv\nhkpmx9P3PIWAgL1MRaVZV11DfikijQhpXwUmbzNa6wWDFAG0Wi0mkwkXFxcsFgsbN27E3d2dwsJC\n0tPT+fXXX2ndujW9e/dmy5YtHDp0qN6dNxcXF954440GfR537UavD5FIhK+/Py2DgvD29cXJ1RWV\nWo1Y1vRiWDeCSzM1agK64W5Aby7cfGq2jwc+PJAN323A3dedgIgADmw6gEgkQrAJCILAyb0nieob\nxa8LfyWscxgSqYSzJ85SkFWAzWajorQCsUSMg4sDduq654TXiiBASnEpKcVVW3QauZK2ns74a0So\nmsgOtjH07dWKvr1akZdfwbdLY+jc8xP69GrFlEnR9OgefE19ihDoLj5GZycZW6ydWVOmQneFM8XM\nNb/SNTiYQX9zNLrLjee99z8gcOkSguzdiNUFcOrUVsZGqmnpWHv1ZK/2omf3z7DLC0TIrjshPVOQ\nwJJjSzmUeZg/J/7Gq5tmYSezY0/aPiZ2eIReLWsnPErDZIjukaBT6jHYKuFvt4tWqyU/Px8XFxc+\n++wz7rvvPlq3bo2bmxs7d+5k/PjxODtXJcK+9NJLzJkzh7Kymoz8EydOVAf5xx9//LITR7PZTHFx\ncfUq/K7daMPw8vGpVcut0mjq1HLf7lwa0EVCFXy15ysM5ltftehOwma1UVpQiouXS1WZ3JEECrMK\nGTdzHMs/Xs6E1ydgNpkxG83oK/Vs/mEzXYZ2QSwS8/tXv6OwUxAQHkBgRCCBkYGoNM1TFy0SQStX\nZ1o5K3FV6JBcpx3stbL2jxMsXhpDUZGWJyZF88SkaMRiETYBEBqfi1KBA7+ZOrKpXIT1b1ungs3G\nls7dsd7dvrxlOHBgPw9PnklwQC+G2GpX5EilSqJ7zMG1shs2fd3s8mM5x/ny0FfkafOYHj2NzA45\nPFI2lnWJ63FQONI7oCaQi+QipL0UWIIaluQ2b948Zs6cyWuvvcann35aff21115jxowZfP3114wb\nN46goCCsVivvvfceH374ISkpKRQUFNClS5d6A/nFyUJGRgaFhddX/XGn4+rmRmBICL7+/ri4u2Pv\n4IBULm+2zPJbCTFwUc1dJAiCYDQb+XL3lzdzTHf5GwWZBRzechiRSMSgRwZxcs9J2vduzzdvfcPU\nT6ZitViJWx1HgaSA1LhUUk+n2GVT6AAAIABJREFUonZSExgRSEBEVZD3bOF59Re6BpyVSiI9nfBV\nV9nBcoPNJBKS8vh2aQzfLo1h7MRJyPyfItDHwtRhsdgpGh+A8wRPVhki2a+tWX4lv/sBr953H089\n9nhTDv0u18nTT06h/MQmOjldDLQiOnd5mRayB7CW1l13Hcg4yKJD/8NoMfJMl6frTW67iNhHWpXk\n5mioVnLLysrC29u7TsA9efIkp06dYsyYMaxZs4bw8HD27NlDeHg4Pj4+5ObmUlZWRv/+/dm/fz96\nvZ4RI0YQExNDRkYGjzxS12LXbDbXshs1Gm8fk5YbhYOjI0GtWuHr719dy92cJWG3CxezrESCIAgF\nFQWsOLTipg7oLlcm+VgySbFJBLcLJuyesHqfk5+RT2pcKufjzpMal0pFSUWtFXxAeAASaU1mpshq\nRbjOTE2JWERr1wt2sPJKxNdpB9tYZi1wIi7dD7FEzKR++xnUXYJGo7x6w3o4KwTxQ2UwB/cfQf/l\n15zYf6CJR3uXpsDJQcOMTnLatR1NpPdz2PLrJi3tTN3FokP/QylV8myXqXTz71p/ZyKQdlVgixDQ\no6/z8KpVqwgODqakpARBEBgyZAhz5swhJCQEX19fEhMTGTVqFIsXL2bmzJn8+eefiMViBg8ejEKh\nqNOfXq/Hzq7mqKyyspL8/HyysrLIy7ur0nkRlb19dS23u6cnGicn5ErlDS8Ju13QULVSFwmCIJwr\nOMcfJ/+42WO6SxOjq9BxPv589Qr+fPx5fIJ8CIwM5HmDma5nM4kb04/EvlFX76yBuNrZEeFRZQdr\nJypCEJpXeTA114Gf9kRi0WeTcuBTysu0tIv0ZsrkHvh4N746QAAGPPgjq5auolWrupacd7n5bNyw\ngblvfMTX/b7BhkAFYjQIiIFNyX+x6NCXeKm9eLbLVDp4t6+3D7GzBGlvGQZPE2armfz8fDZt2kRq\naiqvvPIKCxcu5JFHHsFisTBz5kxmzZpFTEwMvXv35siRI0RFRREVFcWsWbP45JNPWLZsGRMnTrzq\n2C+1G83IyECvrzuJ+CchVygICgmhRUAA7l5eaJycUKpUdwN3I7lYuiYSBEE4nnGcnUk7b/KQ7nIj\nyEjK4Pypc8xYvR0HnYlYbPynazgBkYEERgTi39q/yV5LIhYR5u5CiLMcZ2nz2cFW26MC8xaVIrbG\nsnjJPtpF+jJlcjQD+9W/o1EfK386wv6jNpb+sLpZxnqXpuHFJ18kKCeY4sCRpAtibOXp7N34JKHO\ngTzb5RnC3EPrNhKBNFKOECVCL6+tqz5u3Dg+/vhjAgOrytQee+wxoqOjmTBhAm+++SZz585Fp9Ox\ncOFCHnvsMVasWMGMGTNYuXIlPXv2xN+//r8bQRDQ6/UUFBSQlZVFTk5Og97fxTK0iIiIxn84tyAS\niYSA4GBaBgbi4e2Nk4vLLVXLfbtjR5VRi0gQBGF38m5i02Nv9pjucgNpeTiBoIPxHLynDTEGY1W5\nXFwq2eeyCYwMJCgiqOosPjIQperatrD/jru9ikgPR3xUVhQUNosd7KVs2hLP4iUxnD1XwJRJ0UyZ\nHI3yKj7t7bvNZc0v6+ncuXmsX+/SNJw7d45hQ6YQ1vszCioLUclUPCa10MXJq+6TFSJkfRWYW1ow\nWus/l164cCEODg5kZGQQGhpKeHg4+/fv5/HHH+fPP/9Eo9HQt29fPvvsM1555RW+++47Hn+8/vyK\ni0YnF+1Gr8XoZOfOneTm5jJu3LhGt72ZiESi6lruiyVhdvb2iG7xWu7bHQVV9egiQRCEjXEbScxN\nvNljusuN5tKl7QWsFiupp1M5F3eu6iz+dCpOHk7V5/CB4YG4+V6/iptMLKaNuzPBznIcpRWIbGVX\nb3SNnE8rYvHSGBYvieGBf3VgyqRoOnaou6L67c8TfDRvH23C2zJ8+HCeeuqpZhvTXa6fQf3uw+L2\nNL5urdFIJDwtNWB/yf0sbSlDFC1Fr9ZjtV2+PDE2NhZ7e3sWLFjAvHnzqs++Z8yYwYwZMxCJROze\nvfuy6m4ABoOhehWenZ19XXajVquVPXv2UFpayrBhw+o9i78V8PX3JyAoCK8Lgdteo7lta7lvdy7a\nqIoEQRB+PfYr6cXpN3tMTcqBDQfITM7E3tGefqP7obRvmlXmP5Hc87nV5/Cp8alYrWq6jhzMkHFN\nZ/PorVET4e6Ap50JBUUIQvOUi/24+jCLl8YAMGVSNA+Pvaf6sZ6D/suP367mz+XLyTCZ+PW333jn\nnXeuWYbzLs3LoUOHeGriTN4d+g0txQIaBBCDtIcCW6iAXrj8+XR2djbr169nw4YNSCQSPvjgAxYs\nWMCbb77Jpk2b8Pb2xt/fn+PHjzN8+HBcXGqL11gsllpGJ1rt5R0O8/Pz8fDwYMeOHXTr1g2gOjEu\nNzcXR0fHWoly8fHxqNVqEhMTMRqNDBs2DMlN3Jr28PIiICgIH39/XNzcqkvC7qRa7tsdGVXn6CJB\nEIRlB5dRpL1+1a9biZ/+/RMjnhhBXloeSbFJDJ00tMFtL86um9sV7XYl5dQ5Vn/+E28smdUs/csl\nEiI8XQh0lOIoKQNb07tCxR7PYPHSGH79/ThTJkcT2cYb7XcnmaFyBLMZWrem8LXXmP3116xcuZK3\n336badOmNfk47nJ99Ovel8d9JxMd1R1pbwUGNwNma/2TwdLSUjZs2MCGDRsoKChgxIgRDB8+nJCQ\nKn/1P//8k9zcXIYPH46vr2+d9hftRrOzs8nKyqrjpmY0GjEajTg4ONS6npiYSGhoKOvWrcNqtdKh\nQwdycnLo1q0b69evZ8iQIUgv2ZI+ceIEeXl52Nvbo9VqGTJkyPV+TA3C2cWl2t7T1cOjSew973Jj\nkAL2F/5Hb7rzMi3LCstIT0gn+XgyHv4e5GfkE7sjlpD2IYS0DyH5WDK6Ch2CINChT4dabROPJqLX\n6olqwuzvO4mK4nJ8g5tGfrY+TFYrx7ILOJZd9bOfgxNh7mq87MzIhEIQrt8xqmMHfxZ1GMsXHz/A\n4iUxLPtgAxtdvUF24Vw/KQm3pUtZsGAB77//Ph988AEODg68/fbbvPLKK9f9+ndpGmZ//B5fLfiK\njvffU5WT8bdbw2w2Vwfx+Ph4hg8fziuvvEL79nWz3++9995aP9tstlqr8PLyK6tpXly1XwzoBQUF\nmM1mRCIR6enpdO/enfj4eFq2bMm5c+fIzs7GYrHUCuZA9dgEQSAjI6OxH8lVUWs0hLT+f/bOOzyK\nOn3gn+0lW9J7D5CENAi99y5VUKycind2Pc87vZ+C/SyneJY7GyfqKYqiCCJKEZDeW0iBBBLSey/b\n5/fHkoVITbKQBPbzPPOQzO58551lM++8vQdBoaF4+fqi1etdtdxdnOZHS6nNZqPJfO0pdJFIhEQq\nIW5gHJEJkSx5bgm3PXWbY9pZxt4MwnqG0T2pO/vW70MilSASi+g1ohcVRRVYzVa2rdxG/4n9kSvO\nHfpwPVOcU4x/+HmSj64Q+bV15NfarXSlVEqcrw/hegk6SQ3YLuzqvByUShlzZiVz/J3NaLXali9m\nZIDNhqenJ2+99ZZDsatUKhYsWHDZvbddXDlGjBzBzXNv5t7Se/Hx8XHsX79+PT///DObN29m8uTJ\nzJs3j8GDB19yveZxo4WFheTn57cYN1pZWYlOpztHARcWFqJSqfDw8GDnzp0EBwezY8cOpFIpgYGB\neHl5kZaWxrBhwxwd34YPH87KlSsvOiNAJBIRGhra2o/EgVKlIqp7d0ctt87Dw1XLfY3SHP6QGswX\nnhjUVREEAblSTo/kHgBUl1XjG+KLQqUgIDKA6rJqGmobSByaCMDe9XuZ89gc0nalkbEvg8qiSrol\ndUOhVrB1xVYCIwIJ6h6EzlNHUU4RKjeVw8IfPmv4deeaL8ouos/YPh1yboPFwv7CMvaftt7D3D2I\n8dbgqzAgFSpo2dn48li2fD/xs2bBkZaTvOjRo8XNT6vV8vrrrzsUu1QqZeHChSxYsOC6+w50Jm67\n7TbWrFlD9+7dHdb4yJEjmTRpEosWLbrosWePG83Ly6Oq6sKNkXJzc9Hr9SgUClQqFTKZjFWrVpGY\nmEhaWhozZsygsbERm81GcXExs2bNchxbUWEPaUZFRbFhwwYGDx7MwIEDSU09852rqakhLy+P6upq\nhg4des75L4RMJiPidC332eM9XYr7+sGh0BtNlz8ysysx6+Ezf0xaDy2l+aXkHc/j2N5jJI9KZs+6\nPY7XNe4avAO9CYsNoyCrgMa6RmIHxFJRVIHFbEGhVnBs3zFi+sWw5bstJA5NpPBkIWPmjsHQYGDn\nTzvRuGvoP6E/1WXVZB7MpKmhieRRyXZPgUzitNKvzkDxqWL8w66ehX4xTlXXcqra7gpVy+XE+3oQ\nphWjlVQj2C6vXGjZ90f46uvVcPAg/Oc/YLVCVBRcwLWuVCp5+eWXeeGFF3jhhReQSCQ8/fTTLFy4\nEJkry/eq85C/P4+99BI74uOZPHkyzz777EX/Hy42btRisTiavsjlcuLi4ti7dy/JycmEhITw448/\n0rdvX4cCl8lkxMfHIxKJOHXqFP7+/hQXFyOXy6msrESv11NXV4eHhwcAiYmJjnPt27fPUfd+6tQp\nKisrCQ0NJT7+/CODm8d7hkZE4BcYiPvp8Z6uWm4XYFfq0gZT62skOzsikQiNXuP4XSKVcNOfbyLr\nUBYzHpiBQqVg+p+mA/bZ5YUnCik8Ucje9XsZPnM4p46dAqCiuAIvfy/CYsM4uPkg+Vn5jLttHGm7\n0+gzpg8adw3fLPqGMbeMIfdYLnvX7UWj11CaV8rQ6UNZ8vwS+o7tS8r2FO554R4qiirOG8evq6rr\nMq59m9VGeWE5viG+HS3KOTSazOzJL6X5Uc0+DlaFj9KIxFbO+cbBHk0rRCJRkZCQAAkJMGsWVFVB\nYCBc4kYpkUh4/vnnHcM2YmJimDNnDgsXLkStvjKDclycS8TcuZR++CFP/vWvjgS3sxEEocWgk2Zr\n+XxkZmaSlZXF4MGD8fLyoqysjKNHj6LT6ejVqxdubm4tFLhMJkMQBEJCQti3bx9xcXFUVlYyZswY\ndu7ciVgsJikpiREjzu0hn5iYiLu7OwBhYWGEhYUB9vtXSFgYoRERLcZ7umq5XVwMG9ewhf57NHpN\ni+S35slklUWVDJg4gLLCMvpP6I9viK9D2Xv4eOAd4I1EKsHQYMDTzxNPf08qiipIHp0MgMlowivA\nC5vNxoFfD2BsMtJrRC90Xjq8A70ZNGUQJbklGJuMrF68+pw4frekbgRGBrJ1xVaGTB3C5u82o1Qr\nGTJ1CDJF57P2rnb8vD2crKrmZNWZcbDxfh6EakSoxZVwuqRp/cbjPPjQo2cO0mjsWyt55plneOaZ\nZ3jttdfw8fHhvvvuY+HChej1rW8/66KVhIRwyyOPsHnzZodCNxqN1NTUOKxwk+nSLYgtFgt+fn6k\npaVRVFTE/v37GT16NMHBwQ7L+vcKPDQ0lPr6enQ6HUlJSXh5eeHnZx+KNHr06Iuez93dnYCgoBbj\nPVUajaskzEWbEACp2XZ9z9WVK+X06NODwMhAx75mZe8TbE+ysVlt2Gw2Rt9s/wMdd9s4x3sUKgVZ\nh7I4uvMovUf25tBvh0genUxtRS3u3van78a6RkwG0zlx/N+79uVKOcOmD6OypJJfl/3K+NvHs/nb\nzZiMJvqO6UtTfRPufu5o3X+XvHUV6Uzu9tZQZzKxM6+EndiTeaM8vYj2UvPdyjS++PIlp53nySef\n5Mknn2TRokWEhYVx5513snDhQry929+Mx8WFGT58OO+//z5jxowhLy+PsrKySx5js9nIy8sjNzeX\nvLw8pFIpGo2GqqoqdDodMTExSKVS/P39KSoqIjAw8LwKvJmzf/49Pr6+hEdFERgSgpePD2qtFplC\ncV7F7VLmLtqCAEhN1is7PKOzczldz7at3MaIWSNQqO0dm86eOz7zwZlk7M2g79i+BHcPxifYB7VW\nTYOtgcTh9qd6/zD/i8bxm137m7/bjGATMDYZMZvMFJ4oxNhoZMytY6irquPbt79FbBSTm5uLu687\nHj4euPu64+7tbv/Xx755+HqgcW+9lXk5FGUXERBx5UrWrgaCAFkV1RzJKSSvoOK8JUzt5fHHH+fx\nxx/n3XffJTY2ltmzZ7Nw4UICArr2Z9dZ6dWrF4WFhWzfvh2ZUocgKJGJW84yr62tJS8vz7EVFRUR\nEhJCaGgoffv2JTIyEolEwsqVK/H19aW2tpa6ujri4+MdnduSk5Md651Pgevd3Ynq0cNRy63V6y9Y\ny30pxW21WinMz6cgL8/ekS0w8BJHuLieEQDR9hPbhT3Zey75Zhftp76mnqxDWYT3DMfdx53GukbU\nWjVl+WVIpBI2frORhMEJZB7KRO+tZ+j0oWxbuY3cjFym/nEqWg8tIpEIQRCoLq2mqqyK6tJqqsur\n7f+W2beq0iqa6pvw8PWwK3k/L/Qh9+EbUIibIhsPP/v+sx9MLobNJsJoVKBQGFjy3H8ZMHEA8YPP\nn7jTlTi85TCVKZWs/H7lFT/XBx98wAsvvMCUKVNYsGBBu8qRXJyfG264AZk+BsHnZmyCGK1pJ9W5\nPzsUuM1mIyQkxLGdr3kMQEpKCjk5Ofj4+BAREeFwoZ+NRqt1jPf09vVFo9cjV6mcWsu9ddMmPl+8\nmCkzZjB4+HB8zyOHCxfNKACpyXJ9W+hXkwvF8Ztd+9P/NJ2TKSdJGp6Eyk1FyvYU/EL9qCmvofBk\nITF97VPDRCIRHn4eePh5XPBcVouVqtIqu5IvraO0SkF5QTVZBYfJPZxLXWMdFpPljGXfbPH7nLH2\nPXw8EEk1HD7Ym6YGNzSaOopz3+jyFnozOSk5zB4z+6qc67777uO+++5j8eLFDBs2jFGjRrFgwQKi\noqKuyvmvByZOnMiSNY2oRNWYTCZKLF5QXkGPHj0YM2aMIwHtUiQkJNiTJLGP94zq3p2Q8HBHLbdC\npbpoSZihqYmy0lJCTie5NVNcWIibRoP2d53kwN4Ax2wyoXZzc+wLCgnBYDCQm5NDcr9+5xzj4tpG\nhN2bCAIIYLMJCDYBm82GxSpgs9qwWm2YzTYsFhsKqRjR2rS1QlphWgeL7uJ8WMwWTh49iUQiISqx\nfTf+88xhwWQ0nbHsmy3+sjPWflVZFd6RkwhNug+JVIJEKiF71yKGT3dH56FzPARI5V0z+3bRvYtY\nt2YdMTGXP17VWXz22We8+OKLDBgwgHffffecXuEuWk9aWhpTb3mR7oMeQS6X46UoIlyz/7KOlclk\nhEdFnVPLfb6SsGPp6UTHXniOQU11NalHjjB4+HAATCYTUqmU1CNH8PTy4r/vv8+Tzz6LzWrlvUWL\n+Oszz/DZxx8TExfHgLOa35hMJvbt2oWvvz9/f+wxvvnpJ1e/gy6ESBAQBBBsAoIgYLUKWG02uyK2\n2DBbbFisNkxmG2aLFaPZislkxWiyYDRZsVrPBGUuJ68i2NfNZaF3ZqQyKT1693DKWue7D8gVcnxD\nfC9aglacryX1qBdWixWjwUhTQzHlBRa2f7WdelM9VWVVKJSKlpZ9s6v/rE0ilVBXq0cksqHROr83\ne2tpqG3AP9C/Q5Q5wLx585g3bx5Lly7l+++/Z/78+R0ix7VEz549sVTvJEo7CIncDU/5ubPHJRIJ\noeHhjvGe+tO13OLflYQ1NTaSlZVFYX4+3j4+xJ1VP/7uG2/wrw8/xGKxoFSe6S9hNBpRKBTo3d35\n7ddfGTx8OK+/+CImo5HuMTEkJCWxb/dujh4+zLN/+xu33303ZpOJ4xkZHNi7l9t/N45VLpc7Hgrc\nNBrMZjNyeecvbe3KiMCuPQUBmyBgs53empXxaSVsttgwma2YLVZMZismkw2j2YrBZMFiPtPc6mom\nOFqtAlLLBQYZuHAB4BdUh40cKis9EZuPkyEpZMIdtzHhjjMDIxpqG1pa9qVVFGUXOWL61WXV6HyC\niRn9AVKpGBXvofdQolApWrj7xZKr19mqNLcUwdLx+cS33nprR4twTeHp6YGpOsUeIw8JcdRye3h7\no9ZoLnu85/N//zs+fn70jI9H3707v/z4IxqtlqEjRxIQGMjLCxbQ1NhIj9hYevfty6cffURAYCAl\nxcW89cEHFOTnY2hqIjcnh/f++18A8nNzSU9NZdqNNxIeGUl8UhJhERH83+OPI5FIzpmoZrPZeOL0\npL+RY8e6lPlFaFbEgmC3hgWb/fOz2QSsVrtVbLbasJgFzJZmRWzDZLJgMFsxmuzWcTMdf2doPVab\nDanRYuxoOVx0YkQiCAzOJzA4n5MpJ8/b8c5N54abzo2gqPMnGQHUVDSQlmLD2FSD1Kyk4XgDJ40n\nW7j73fRuLeP43uda/c3IDCYEwKJs202uNL+UnrE923Ssi85LYmIivQYM4I7589t1Uw4KCaF7dDTe\nvr5UlJdzPCODndu2UVdbS1BICIHBwYyfPJkH7rqLYaNGoXd356nnnuORe+/FarUiCAIyuZyG02NV\nBUHAPzCQ4sJCBg4ZQv7poStanY7YuDjcztP7QCwWs+j999txFZ2f38eJhWaL+AJxYtNpZWww2jCZ\nLRhMVkwmC83dy7uiInYWVquA1Gy9vuvQXVw+hkZDm1vY6r3cGDji+GnX//mHZNRV1rWM45dXk3c8\nz2H1V5dV4+7jTnioH9+ZLdj0GlYvuLNNPaurCqsYlTiqTdfiovMSFxdHVmbmZd/Yi4uKKMjLc5SH\nVVVVkZGayuTp0/l+2TLGTZ5MfGIi0268kcaGBiZNm8b6n3+mtqYGsCeoBoeEUHd6EltAYCAlRUV4\neHoikUiYedNNPP2XvyASiXju1VfRaLX0HTCAp//yFyxmM9NuvJFj6en8/bnnHDIZDAYK8/MBiDxP\n57vOxEXjxFa7EjZb7ArZdNo9bXTEie3vaeZ6VsbOwGoTkFqdMIrSxfWBocGA0q3tPekvlc+j9dSi\n9dQSGn3hkq7qsmq+feNr8iRiNBfJ8r8UFQUVxNzUMfFzF1eO2NhYNn/8MQDlZWUU5OXZt9MKuyAv\nj/zmfXl5+Pj6OizuoJAQomNjOX7kCOEREfTu25c5p0MiRqORokL7RKCQsDB2bt0KwOBhw1Cp1Q53\n+JARI7DZbLz0xhsATLvxRqbdeKNDvub9b3/0EWDPfH/w8ccdNeYfvfceFrOZwODgFnF7Z9KmOLHF\nhslo7fA4sYsLY7HaEC3ZsUSobqzuaFlcdAF2rN5BQVYBcx6b06FyfPDUB4y+cRQ9+kW3eY03732T\n9WvWd1hSnIsrQ0lJCdNv/QtH961HpRAIOh1LDzqtsINCQghu3hcSck7cupmiggLumzePmJ72sMyC\nl19m0Suv2AfxvPji1bwkB+fEiYXmLpb2OLHVKmCxWs+KE9tOJ2xZMFqsdve0sWvHiV1cGJVCYp+H\n7sLF5dAel7tT5WgwoNC0Tw61Wk1kZKSTJHLRWfDz82PZ0kWo3O1jTttKQFAQKzdsaLFv4T/+0XbB\nzhsnFrBYbS3jxFYbZrPdIjaaz5QwGU0WBNtZS7lw8TsEQUBqE1wK3cXlYWwwonBr+03SaXI0Gh1t\neNuCzWrjxLETrqzhaxQ/P1+cleprt4ovFicWzooTW8/Eic1WTEYLBlec2MVVQkDkUuguLh9DowEv\n9wsPoLhaNDU0oXJTtfl4Q6MBt7M6crm4thA1N1G6zDhxcwmT2dKcsOWKE7voeggCLoV+KTYu20hx\nTjEmg4n+E/vTc8CVKXUyGUzYrDYsZgtqrfqq1mRfLp3G5d5OOYxNRtw0LoV+rVJe0cD+Y6WASxE7\nE6vVCoKAxDWXvVMiCAJSQXB95S+G2Whm1M2j8PT1ZOnrS6kpr8HYaETnpXPMRL9ccjNyMTQZztv9\nLSc9h4bqBopzihk6fShaz44bkXoh2pvl7gwEQcDUZGqXy93YaETThpnnLroGErFLkTubX1Z8yamT\nx5ArlCQPHEFk955s37iGiTNva9U6dTVVbTrOxaURBFxla5fCarWydcVWzEYzicMSOZV+iiHThuAX\n6sexfcfI2J+BXCFnwp0T2PTNJsbMHUNDTQPpe9MJigpix+odSKQSxt8+nvS96ZTll2Gz2vAO9Gb7\nqu0IgsDom0djs9gQS8VYrVbEUjHHDx7n+P7jmE1mpv1xGpVFlUjlUsym1vcNqKyMQKlqQqkoRCaX\nYbW07f+8qaqeiPrGNh3rLNobPwe7ha7RuhT6tYr4Gul3Lmmsp6yuliaj4dJvPg9SqdTRjtZiaVtH\nULlciclk5MDu33jk/15Ho7M3d9qzbQPbN61BqVZTU1UJgG9AMEGhkaxf9TUAM2/7I1s3rEYkElGY\nn830m+eTl5PpOC44rBsb1yxHLJFw6z1/RkBg2ZJ3kEhlDBtzAzab7aKvSyRS1q5cilyh5Oa7HmHd\nqq+ZPvceDuzajK9/MGlH9lGUn4OXjz83zPlDm66/KyEIAlLXo+zFsVqsjJw9Ep9gH0QiEdlHs/EO\n9EYQBLas2MLUP07l+IHjpO9Jx9BgoKq0isNbDhOZEMmGrzYw9y9zKcsvY+sPWwnuFkxQVBAxfWP4\n8tUvGT5rODarjU3fbqJbYjckEglWixWJREJ4z3CsZisnjpwgY28GG7/ZiMKioKK+olXyi0RSwga+\nh2DOJWfPEtRSFU22pjZ9Fr09ddy68SCrJwxA6KCbptFoJCIuol1rWM1WekQ7p0e+i86HqA2Nhjoj\n2i8/4s0t68hsY3tuTy8fCnOzCOw2lMqilDatERYVTcHJNB559l0+XPQsJqOBOfMeonvPJGISkhk5\nYSbvvfoUt9z9GF6+/rzx7CNMveku6mtr+Gn5Z9RUV3LTvIfQ6Nz59N+vcMv8xxzHvfHsI/x54Vuc\nOJbC2pVLMZtNjJwwk8gecQCXfP3N5x7lkaf/iUxmT27Ny8kEoKKsBDetniP7dzB97ny6RXf9Uc+X\ngwBIxWIxuMLoF8RqsSLBssAIAAAgAElEQVRTyBxTjmxWG2KJGKvZitlkpiy/DJ2nDv8wfzz9PTmw\n8QCFJwsZOXukvf2jQoabuxtN9U3YrDakMnv8qamhiZryGqwWK72G96K2ohapTGpfXypmxXsr6De+\nH3pvPcYmIw+++SDiNt6oGptKkUqkSO9/ss1rNPOjzebUmc+tRaVWceLIiXatIVPKSEt1TRi8VrG0\n0QPV2dgQ14v6zDT+/friNq9hs9na/TffvMZfnnubqopSPv7X8/zxz8+3eI+Xrz8AhqYGGuprEYlF\njJgwk1XL/otG545KpcZkNCCi5b1DIpGg03vS0FCH2WRC/7uk24u9brPZHMr8bEwme43Dnx5/nl1b\n1vHd/97nqX9c2y10we6ZkkpE52+s4MLO9PumtxhZOOfPcxCJREjlUsJ7hlOaZ0++CYsNIyA8gO/f\n+55ew+0zz6P7RPPTJz9RU17D8JnDkcgk/PrVr8gUMvqO7cuJlBN4+nnipnPDarUiV8odFrpMISMn\nLYe843kkDU9q1x+lWtVskTvBculg60eulGM2mhEEoc2jJBUKNfV19U6WzEVnwWK9NiyUxoZ61G7t\nCw21V5k3r/HtZ//GarVQWV5C/6Fj0eo9KMzNZu3KpS3eO3LCTA7u3oq7p7dD2f6w9CNqqisZPm5q\ni+N69R/Gp/9+hcryEm6a9xAAn3/4OuGR0fTqP+ySrw8aMYHFb7+Azt2TqXPuQi5X8M1n73E89RDd\nYhJYu/IrJBIJKvX1kQArEYsQfbT1I6HB2NDRsnRZGmobEIvFqDT2MiqrxYpYInYoG0OjAalU6pgZ\nLgj2gQMSqQSTwYSh0YDOU8fZyYkikQhBEGisa7SvK9Aps947iqdnPs3Tnz+NWqvGarFiaDTYt4az\ntt/vO/2zxeqNKvAhTm5dSPGpy5uV7aJrkV1Uy5GTrQtNdUZ++eFLcrIyuO+JjulM93saG+qRyxVI\nLzGxzmqxYDIZUandeO/Vp3jwyVcwm03I5efmvpiMBqQyGWKx3bAUbDaaGhtQa7SX9brFbMZqtaBQ\n2u+/BkMjSqUaAJvNSmNDPRqt3jkfQCdHKZcglYhdFnp7cNO1fPqTSFt+nr8vrxKJRI73yJVy5Ken\nhf3e2hSJROes7cKOSCzi0+c/JSc9B5vVhlKttG9uZ22/26f31qN0U6JQaWky55GyOrejL8PFFcJy\njXS/bGqoR9VOC92ZXK63QCKVojpd2jZivN3DeT5lDiBX/O7+KBY7lPXlvC6VyVo8YDQrcwCxWHLd\nKHMAsdjlcnfRBdF6aBl7y1g8az3xHuXdhhUMfPVSudPlctE5uGZc7o31qNWdR6G3hYTkQR0twnWD\nWCRC7LLQXXQ1VG4qZApZG5W5nX5D+lFf74qjX4uYzddG6Y4zYugurh/EYhA7I2nChYuriVKjxNDQ\nttrcZqqqqsjIyHCSRC46E43G1vdq6Ix0Npe7i86NWCRCLBa5FLqLroVSrcTQ2D6F7hPi41Lo1yAC\nUN/UtrrtzobLQnfRGlwudxddEk8/T2oqatq1hkegh0uhX4PYrAKNhmvDQm9sqEXtputoMVx0EcRi\nXFnuLroeviG+7W4u4xPsw9GjR50kkYvOQoPB1CmaXx5LTWHN6k0E+Ah4+wac2fwCUarUFzzOI/UQ\nXkf3Ux2d4LLQXbQKV2MZF12SgIgAtq3c1q41fEN82f3dbidJ5KKzUN/UOazzz9//B93jBwMCGUcP\nUF5aZN9KCpFIpHj7BeDl06zk7f8mmEwM+v5zZFIZQetXkVRZ7lLoLi4bsVh0uvWri2sWo1FBfa0W\njb4Ghbxz3Ozai3+YP8Wnitu3Rrg/at2FLSUXXZOaxs4RPy8uOMXjz76Fl4//Oa811NdSXlJERVmz\nki/i6IFdeKYdoqgoH4vZhJtGR6zZxAdvLiQgKKyF4vf2DcTbL+C8bU8dNDequkYG1bi4NPYOppKL\nfClcdGlqavQcPdQLq1WMWGohKfkAWk3X7wooU8jQeeioKK7Ay9/r0gecB7FYTKOhkW3btjF06FAn\nS+iio6isbdvgIWdiNDRRX1dzXmUO4KbR4abRERYV3WK//sQxQl97CpHNRm1lCVsNjUy/+R7KSwsp\nLy3iyL4dpy39QspLilCp3fD2CzzLnW9X9n4e3kxa9wMquYJjDzyF5TppfXq9I5WIkKpkqo6Ww4UT\nqS6rdmwlZcMwWmuxmC1YLVZyDuQx+4/qc7rXdUX8I/wpzi5us0IHiEiMYMOGDS6Ffo1gtQpU1hk7\nWgwKck8SFBrZ6uNqoqI59PfX8Dy6n6MyJQXLP6XPoJEXfH9tTRXlJYVnufOLyMnKwO/UCcZnZ9KA\nwHcnj7HNYj5j2fsG4O3r7/i9eajKpdi1ZS1HD+5GIpHSf+hY4nr1b/X1ubiyyKRipEpZ17+5d0XK\n8svwCvRqMTzBarE62sI2Dx+pqajB0GDAL9SPqtIqjI1GSvNLqS6tpqqsiurSamrKa6gqraK6rBp3\nH3fH5hERj1QtRaFSIJFKKKkxcPxAPolDEzvqsp1Gs9s9oX8MNknb8kCiekWx9ru1PPfcc84VzkWH\nUFlnwGbr+JS4wrxsAkPaNuK3NqIHtRE92PPzd4RGXHzEr07vgU7v4Rgn2ozYbEb+zSdYTEbGTL+V\nnsUFZyz70iKOpx1y/F5RWtzCuj/b2g8MiUSlVlNRWkLKgV3Mf3QhgmBj345NCILAqmX/xWq1MGrS\njXh4+rTqOq1WK2KRCKvVesne8C4uD7lM4lLoHYHNaqOiqAJ3H3f2btpLdJ9o3H3cWf72csbMHcOv\nX/+KxkNDTXkNodGh5GXmMWrOKD586kMCvAOQeclw93XHw8eDsJgw9N56PHw9cPdxb3Eek0lGRoqF\nmjoV7p7VmMuOUZxjvjYUerg/Qat3ctP2FA7MHsnxEb1avUZUYhT/eeI/Thkx6aLjKe8E7nZon0Jv\nJvfkcUIjL67QL4RNJiPztj8BoAG6e3rTvWfSBd/fbN03K/ziwlyOHtyNWCwi9eBORk+5mTGTZyMS\nicjJOkbPpH7UVldycPcWnnz5fRrqa1m6+C3Ubhomz7qDspJC0g7vpbqynOHjp+EXEHLOOXdtWYtK\n7UZZcQEjJ8x0DFdx0XbkEglSpdSl0C9GfU39ZQ1KaZ6Wlp2aTUNNAwlDEqgpr2H90vXI5DL8Qv3o\nltSN9V+tR++lJzAykMqSSgSbQE15De4+7giCgEKlQCqXMuXuKXz+8ucMnT6UE0dOkHcsjwVfLmiV\n4pHLzST2OYjNZq9RtFS6k7ItpV2fR0dhs9nISc0hOzXbvh3N5s0eIYjqzGhKq9q8bs++Pdm0aRNj\nxoxxorQuOoLymvY1G2pGEOxbW5/xGurriE3o0y4ZcrMzSexzdfqgN1vlkHzOazabjaWLFwH2SWen\nTh7j60/e5qY/PEyfwaNQqd1QKJVMufFOCvOyWb38U/wCQqipqmDyjXew5N2Xeejvr/HrT8sZM2U2\n1ZXlWCxmKkqL6dVvKNUVZZelzNeuXMr4qXMRnec/xWw2IZPJsZjN17W1L5eJkSpk55+C48JOfmY+\nhgYDicMSHcr0169/pam+CbPJzMwHZpJ1KItDvx1CpVXh6edJyo4UBEGg5FQJviG+SKQSDv12iLiB\ncUilUibfNZnDWw5TVVKFh68HlSWVhMWGUVdVh5u7G1azFQCNXoPJYELnpSMnLafNVmTzYQHhAaz7\nYp1TPpcrTW1lLdlH7co7Jy2HvGN5hMeFExEXwaDJg7jlr7dgVinYeLKIsm5BbT5PzMAYfv7lZ5dC\n7+IYTFaq6kztXqe8GnYfFmO1QnKcjWC/1q+x67e1TL7xjnbJkXvyGKGR0Zd+4xVGLBYzevJsvlr8\nFjNuvZeA4HA8vf0oLy3E2zcQgO+//AiFQkF9XS02m5Xy0iL6DhmNm+ZMU5y0I3sYM2U2qYf3oFK7\nnT4+gJXLFjN68mzyc7LY+utq/AKCGT15Nsv/9z4Ws4kxk2ejVKn5+fsvqKmuZPLM29HoWnoiP3xj\nAXfe/yQ/fLWYO+//21X9fDoTcqmk6ybFleWXUV5YTki03Z1zPiu62WpuHk1qMVuQyqQt3pN5MJOj\nO49iajIxeOpg3HRurP3fWqRyKbH9YvH082TLii0UZRdRXVbN3CfmEj84npTtKeSk5VBfXc+un3dx\n21O3IRKJqKuqo7ygnMShiWwp3YJaqyZ+UDyDptiftoXTMT6tp5by/HJ6jerFt299S+GJQkKiQxCL\nxciU9qfMiPgITEYTHj4ehPcMb/dn5h/uT3FO+8q9rhQFJwrISc3h5NGT5KTlYDFZiIiPICIugt4j\nexMWG3bOMVagJPpcd15r6D2qN6/d9Rpv/PONdq3jomMpKK93/L23lfycLJYsy0brHYtKrWGbQcXN\nkxStqvyqrizHaGw6r5v5cmlqbKChvva01dzxBAaHM//RhRzY/RsAc+9+tEWP+YrSIpL6DaGkKJ/g\n0CgKck/i7eOPyWhAdnpsquh0i/HykkJ6DxhBY32dYwyq1WLhi4/e5M8LF1FRZr8/TZg2l8bGepb/\n733u/+tLhHeLZc6dDyLYbKz/cRk11ZWMn3ozOndP+7qlRZed4HetIpd1UYW+YekGBEEgNCaUjD0Z\naDw051jRX/3zK7QeWnReOqL7ROMX6seyN5cx4c4JrPvfOjx8PRg4ZSA7Vu8gcVgiVaVV7P5lNzpP\nHWPmjsE3xJfPX/6cmQ/MROehY9IfJrH1h63kHc9jy/dbuOWvt9BU30RVaRVisRiLyYJMIUPjrqG+\nxj7Fa8CkAaz5ZA2leaVIZVLG3z7eoaz13noKsgqQK+Tc9tRtLa5v5gMzAeg9srdjX1RilFM+u2al\n7h/ecV9+k9FEftopBnyxlk9VCn47mIlvsC/hceHEDYxjyt1T8PT3vCqyqLVqIntGsmbNGiZPnnxV\nzunC+eSXtX9y3vdffkRI9wewiNxpaqwnO/Mkd3/4EIl9BpDQZzCJyYPwDQi+6BrHUg8QHXeu67o1\n5GYfv2RC3NVG7+HFqImzzvva3Y88w/HUQ0yYfgtyhZJh46biptFhMhoYe8NNANTVVJNyYCc7Nv3M\nuKlzERAwmYzI5UrKSgoJ7xaDQqkiMCSClAM72bPtV4JCIygvLQTsRplIJOKXVV/h5ePP4FGTWLr4\nLW679y+o3LSUlxbh7RtAdWU5a77/nyOe//t56tcycmkXTIqzmC3kHsvl7ufvduwrPFHIjtU7KDpZ\nRHV5Nbf89RYa6xq55a+3YGgwsOqjVYy/fTyefp7UVtQikUqITIxE56lDJBYRGBlI/KB4JDIJW1ds\npaHWXqstEonQuGtorGt0/I5gn8e9ZskaRPZm+Iy6aRQr/rMClZuKfhP6ofXQ8tMnPzHl7inMfHBm\nC/mblbWXvxfDZgy7Sp/aGZqzw52l0DVlVQhSKQ0e2gu+p6K4okX8uzy/nMRBPektiOgZGs/4BX9A\npui42FfiqEQWL1nsUuhdlNoGI9X17Xe379m+gVf+8AxpOVqsFh29evqhuv0HjuzfScr+HXzz6bsA\nJCYPsiv4PoPw8PJtscaxo4eIjm99gubZtCchriOQyeTnLWOTK5RERccDcN8TL1CQe5I7738StZuG\nux56GplMzh1/+isKlZq87EyOpR5Eq3OnurIcjVaHTKZAdXoefEN9Lekp+8lMO4whvIGcrHS0OneH\nIi8vLSI6vjc6d48W8fxZt913VT+LjkQuEyOViqVIJVIs1s7RYelSWMwWR2lXM1pPLTpPHZPumsTy\nd5ZjMpoc7nelmxKfIB/WfbGOARMHEBYbhqe/JyeOnODnT39m/O3j2b5qOwqVAv9wf/pP6M+PH//I\nod8O0XdMX0QiETabjbWfr8XQZGDItCGExoSeI9dNf77J8fMN82+4sh9COwiICKAou4hebcgKPxuJ\nxcqQ/64m6LC9p3rOgFh23TkRQSTiVPopctJyHDFwmVzmiH8PnjKYwCh77K0GaF8usHPoPao3T7z6\nBBaLBalUeukDXHQq8srbb51npBwgOCySkCAdwYECIJwO1fkyYvx0RoyfDkBpUT5HDuzkwK7NfPrv\nV3DTaElIHkRin8H0GTyKY0f3c+u9f2m7IIJAbnYmoRHd231NnQkPL98WDz8arR7A4XZ/8MlXOHJg\nBwqlimFjp5KZdhiNzp2QiG4APPbMm5SWFNCr/zAqyooZOGIiMpmcooIcvH39OXEslSGjJp8Tz79e\nkErE9tavACqZijprXUfLdFko1UqMTUYaahtw07lRXliO3luPzWoDwN3bndqKWhTqM8l+Q6cPZdGD\ni5jz2BzqqurYsmILVrOVngN64h/mz6yHWrqSzlbOAPNfnH/lL+wq4R/uz/4N+9u9TsTOVIIOn8Bm\ntWE0GPH4aRd7tx9laXYRoTGhhPcMp/fo3sx6eBY6z849MSpA58O9997Ed8uXc/PcuR0tjotWYBME\n8kvb3/1w7/YN9BsyFrh4t1TfgGDGTpnD2ClzAMg/dYKUAzvZsmEVy5e8SVVNPdFxvS+8wAUQm0zE\nfPwm0qYGDDlZhFykocy1iFqjZeDwCY7fm8vsAghzvB6uiSE8KobszDRystKJTehDfO+BIAj06j8M\nN43unHj+9YJcag81S0UiEQqZgjpD11DoALMemsWaT9YgU8hQqBSMv308cqW9hW1IdAgIZ1zbAEU5\nRUT3iUYkEqH10DLtj9M6SvQOJyA8gKKcojYfX5pXSnZqNtJf9xNVXElTQxMKlQK5Us7EgXH0+fAJ\nRxJiZ0YqlhLtFUySXo2v1ELvW0cx9e6nXQq9i5FfWo/B1H5LbO+OjTzx3DutPi44LIrgsCgmzbyd\n3VvXs+b7/7WpdMoj7RA+B3cB0KO4kPycLHz8AtvUce5aJ6J7TyK692yxrzlW/vt4/vWCXCZGBHYL\nXS3pWkMqvAO9mfPYnBb7Ztw/A4DoPueWehgaDEy+2xUfBfvY0IqiCmxWG2LJxcvgbFabI+7dHAPX\nuGuIiIsgYVgimopa9Bo9Eo0EQSzCOr5fp1fm7iodSd4B9HQTocAG2ENNPSKDSIoN5dtvv2HOnJsu\nvoiLToFNgMyCmnavU1ZSSEBQWLvj1nu3/8qwMW0Lt9VG9qAuNApZUx295j/G15t+5ucVX1BbU0VM\nfDIxCX2ITehDTEIyYtfI6wtyoXj+tU6zhS4SBEFYn76e1MLUDhbJxdXijT+9wS1/u4WgqJb12zXl\nNY667+yj2eRn5RMRZy8da46Bq7VnHv4i9qTT/beDCCIJ6eP7ku+kTHxnIxKJiPIIItFdR4jMckGX\n6uG0bOb95T8cOuL6W+gKFJTVs+94WbvX+fLjN5HLlcyZ92C71rl1QiKLv9/R9pGn55mQVldTRcbR\nA2Sk7Cc9ZT8ZKQeIiom3K/d4u4L39G5DsbyLa4pQPw29u/nYLXSdqnPHOF04F/9wf/Iz81EoFaTv\nTbcr8NRsbFabXXn3DCf5kWRCo89N/jub7P6xZPePvUpStx61XEWCdzDxGilasZVma/xCJPWMIMTf\nndWrf+SGG6ZeHSFdtJnMgmqnrLNu1de88/kv7Vrj4O4tRMcnt29++XmeNLV6D/oNGUO/IWcaH2Wm\nHSY9ZT/bNq5m8dsvIJXJiIlPJjYhmbkNDcgCgikf6/r+Xk+oFfZkXrtCV7gU+rWOocHgcJ+Xlblz\nfPHPhAYF49ndk7iBcdxwzw14+Hl0tJhOIUjnS5KnN1EKCxIR2FvQXB7PPDKbVz/6j0uhd3KKKxup\naTC3e53dW9cTE5+M3qPtU/sAtm9aw5BRVyes171nEt17JjHtZnvpbmlRPhlHD5C/fyf+W36h0NDE\ns6u+IjqhLzGJdku+XQ8aLjo9LRS6VnnhGmIXXZPygvIzfc9Ts6kuq3a4z/uN1LB3nZ75b1872fsy\niYye3iEkapV4SS1cyhq/EAN6R6OU/MTXX33F3Ftuca6QLpyCVRBIy6l0ylrrVn3F5Fl3tnudHZvW\ncPfDzzhBotbjGxBsb3gzbhrlE2ZglsmZbTKQnrKf1d98yhsLH8bbL5CY+D7EJvYhNqEv/kEX9765\n6Fq0UOh6lb5DhXHRfs5OXMs+mo1So3Qo8OEzh5/TSObnJatprGtsERPvinipPUjy8iNGLSAXCbRV\nkZ/N4tcfwK/XHS6F3kk5UVBDXVP7rfOKsmJysjIuOnP8cnCKu91JVPQeAEACkJB8ZrhL7snjZBzd\nz5F9O1i25B2aGhuITehLTEIysQl9iI4/t7vd5rUr6Dto1Dm90110PtSnq7ykAG5yNyRiCdbrqBC/\nq2Gz2ijNL8UnyAeL2ULesTzS96Q7LPDmxLV+4/tx0+M3odFf/OYS0y+GjL0ZJI9uX5vKjkAsEtPN\nK4gkvZYgmQWwOXV9N7WSl/52B39+7CHe+td7Tl3bRftoMFg4nuec2PmOTWuYeXrMaHu4mu72thIa\n2YPQyB6Mn2Z/SK2pqiA9ZR8ZKQf45L1/cDz1oD2bPrEvfQeNIio6nl2/rWPE+BkdLLmLSyEWi1Ao\n7JUPUrBnAWuVWqobnfOH4qL9mAwmzCYzpXmlhPcM56dPfsI3xJeNyzYydNpQtv+4HR+5D1P/OJWI\nuNb3W+s5oCdpu9O6lELXKNxI9AoiTiPCTewca/xCPDZ/GvFjHyY1NZW4uLgrdh4XrSM1pxyrrX1D\nWJr57zsv8cO2k+1eZ/vGn7jnkQVOkOjqoffwYuDwCY5mLoIg2LPpj+xj6fsvcsfDzyOWiB1lqFar\nlV2//UJAcDiRPex/D/mnTtDU2EC3mASaGhs4dfJYu8fGumg9aoWU5nRKl0LvAM43HMXYaKS2shaf\nYB8aahpY/s5yYvvFsvuX3Tz8r4dJGJJAxt4Maitq0XpombdgXrtkiO0fy/fvfd+uNa4Woe7+JHl4\nEiG3IBYBOOeGfin++88HeeHZv7Ns+aqrcj4XF6eoopGiiianrPX1J28z9+5H273Owd1biEnog0rt\nduk3d2JEIhGxp2vdZ972J04cO0p4tzMVLILNRkh4dw7t3UZJYR6IRGSmHSYqJp7qyjKyMlIwNDUQ\nHBqJVn9tJNd2FdQKiUOhOzqLuErXrh6/fv0rZqOZkyknsVltlBeUs2n5JjL2ZbDuy3XkZ+aTNDyJ\n/hP74xvii7HRyI4fdzBx3kRCokM4lXGq3TKotWp8gn04ld7+ta4ECqmCZP8o5nWPZZa/jihFszK/\negzoHUOPEB0vvfj81T2xi3NoMlo5fKLcaestW/ION9/1SLvX2b7xJ4aMnuIEiToX6Uf24eHpg2Cz\nh7N+/HYJ235dTUVZMUUFOezaspY7/vQEQ0ZNpt+QMQiCQO/+w6muKqekKI/UQ7sdvdSXLXkHk9HQ\nkZdzTaNSnpk/cUahK10K3VkIgkBJbgkm45kJULWVtY6WqyqNig1LN1CSW8K6L9fhHeSNd6A3jXWN\nnDh8Av8IfzIPZSIIAoZGA3mZeXRL6saKf68gPDb8nIYwbSW2fyzpe9Kdspaz8NV4MS40lnujwhnu\nLsFD0rF5HS8+cStr1/zAtm1bO1SO6xlBgAOZJRjNzvkufPPpu8yZ95BTuhru2X0Ir4jpmC1t8xqJ\nzWY0ue13+zub/kPHYrNZWfzOixzYtZkTx44y6/b7kCsURHaPQ6PVU1Fe4nh/eWkRvfoPQyZT8MWH\nb9DYUM9Hi54DoKQon5KiPEwmYwddzbWN+qxJlQ7Vrle6Mt3bw48f/cjEeRMBWPHvFYT1DOOn//7E\nrU/eyqoPV+Hh64HVYiU/M5+QHiGodWriBsax9PWlmIwmslOzmfPoHN559B0kEgmx/WJZ88kauvXq\nRn11Pf0nOr+dYWz/WL575zuH3B2FRCyhh1cwSe4a/CVmWlM3fjXY9PULqLqNorGxCVkb+nS7aB8Z\neZWU1zhPGXz9yTss35zR7nVMRgPDZvyDXzZmk7I/m1nTB7Y6I9x39290W/Iu90R0Z+C0ucQm9m23\nXM7ANyCYCdNvdfzu4x/Emu8/x2qx0qNnL3rE9ean5Z+hUKqYdvPdmE1GTEYDu7euY8at9xLVI55t\nG3/CaGjiVFYGhXk5LFvyLk88/w45JzIoKcwlsc+QLh+q6Aw0l6yBy0JvN8YmIwUnCshOzWbjso00\n1DZgtVkZMHEA/Sf0J31POlaLlUE3DGLivIkc23eMkOgQinOKAZAr5CCAUqVk9eLVTPrDJCRSCYGR\ngciUMvKP59O995UZpRgaHUpFcQUNNe2fVtUWdEotw4Kimd+9GxO8FKeVeedDKpXwyGPPM2RE5x2L\ne61SWtXI8bz292tv5qvFb3Hn/X91Sj90uULJrJnJDB8QgsR4gvvmjuaNZx8h9dCey16jdMAIHtbq\nsWg0fP7B69wzazCfvf8aOVmdy3MWEt6dWbfdx533/w21RovaTcOceQ86mtvMufNBtm9ag5tWT3VF\nOVUVpYhFYjLTDzNu6s0MGDYOLx8/amuq0Grd8fDy5YM37YmEgiCQmXaYwrxsAFZ/+ykGQyPffPYe\nBkMjn7//eoddd1dAfZbL3fGTp5tnhwjTmbGYLZQVlOEf5o9IJMJqsZJ3PA/fEF82fbOJSXdNIict\nh6b6JgZPHYzeS4+7jzvGBiNWixWTwYRMISM0JpTMg5kkDE5AIpXgF+rHoc2HABgxewSIYOofW3Ym\nU7opGTV7FDLFlbUIm93ufcddPcsgwjOQJHd3wmQWRKKrk+DWHl5+ZxlH08RMH9eLt996jUf//GRH\ni3Rd0Gi0cCDTeXHzkqI8Nq/9gQ+//c1pa3rpRQzpp2ZIvwe5bf6DbPt1NUsXL6KupopJs+5g0szb\nL3p8RV01v5w8xpJ/fW7/vbSYLetX8q+XnsBiMTN83DSGj53W6RvBNJfFCTYbv6xcyvG0Q/zhwb+z\nbtXXKNVqLGYzxQW5mIwGvv7kbXz9gygpzAXg8w9eJyg0EovJhM1mIzi8G0qlmuJ8e36PoaljDI6u\ngkZ5RkdInnvuucIA5T0AACAASURBVOfA7vZMLUzFZDVd6LhrHrPRzKn0U+i99TQ1NPHNW98gkUjY\nvmo73Xt3Z9miZXj6e6LWqXHTu3F4y2EaahqIiI/A09eTjL0ZRCVG4RPsw6ZvNwHQf2J/RCIR23/c\nTnlhOcNmDEOtVdOtVzcA3HRuSKTnWgsikei8+52N1WwldVcqScOTruh5VDIlvXzDmRjgR5JWhrvE\ndtG5052FmfNfwkOvYcmrtzK8Tziff7WS3MJy+vW7/iY6XU0MZis7jhbTZHReaeI/FzzEnQ88iX/g\nlVOOoZE9GDN5NnG9B7J/xyZe+ts9VFeV4+sffN72siu+/IjouF7E9bI3hFG7aYhN7MvEGbeRmDyI\n7Mw0Pnv/VX5bvxKjoQn/wFCUKjXa7ONEfv8/9JmpNASHY1Wqrtg1tQaRSET32EQSkgeiVKnx9gtA\nhIhfVnzJ1JvuIv9UFjq9B0NGT+Howd0MGzuVjWuWc9u9f6FbbCJKtRs/frOExL5DOLJ/B2o3HSo3\nNwSbDZFIjFLVtRthORulXEKPEA9HlrtDoYtEIk5VnqKmyXnurc5ObWUtlSWVaN21bFi6gaxDWVgt\nVtJ2pyGRStB6aBkwcQBZh7OwWWzovfX0HtUblZsKTz9Pju44yokjJxgxawRuejcyD2Vy8uhJeo/s\nTUy/GCLiIhCJRGj0GjIPZDLj/hmdrjObh68Hy99Zzthbxl6R9QN0Pgz1D2Osr45wpQiF+NIW+esf\nb2RwcniHjmItLa8mduR9/P3BOTww74yrfcroPrzy1sfIlVpiY3teZAUXbcVitbEztYTaRucZF9s3\n/kRJUT6znNBI5nLQe3jRd/Ao5t79KOUlRXz2wWts3fAjcoWSsMgzI55fX/AQjz3zBorzKGSduycJ\nfQZxw5w/EBEVS9rhvXzw5gLyt/3KnT8uw6ukEP3J43ikHqJoxITzDnfpaDRaPQHBYSQPHIGHlw9B\nIRFkZ6VTkHsSb98AesT1YvumNfQbOgaJRMKxoweRyeVYzGZkMjl5p7LoO2gUv6xcSlLfIYjFEpYu\nXkRMQh92bP4Zi9mMp7dvR19mh+GpVRDie6Z1u0OhA5TXl1NUU9QRcjmdk0dPsmXFFgqyCoiMjwSg\nvNDuvpMpZHzz1jdUFFVQlF1EVVkVCpUCn2Afkkcns2ftHpJHJ7N/w37iBsaRsiOFnv17cui3Q8QP\njqeyuBKVRkVEfAQHNx6k/wS7tdYtqRtR5xkhKhaLCYgMQK3pXMocQCqXkrYrjcAAL/T+zgm7SCVS\nevqEMjYgkAF6Bd4ygYtPXgeLxcqL//qa8bc8g94rgDXrNzNjwqBLHHVlWLNxLxNuW8juHxcxoHf0\nOa/fPHUI8x9eSLfuMYSHt76pj4sLYxMEdqeXUFnr3Izop+6fw0tvf4lMrnDqupdDt9hEJs28nYDg\ncH5b9wP/ee3/0Ll7cnjfDuQKBaMmzrrkGl4+/iQPHMHMW/9IYnkpfgd3U1KYh9VqQVJVQfW4qVhU\nnT/BTCQSEdkjjqjoeHrE9QIgvFsMq7/9lKbGerIz00jqO4TD+7aR1HcIe3dsZMyU2WxZv4oR46aT\nmX4Ys9lERsoBVGo36mqrUarUaLTXZ1K3v5caX/czekV69ovebt5XXaArQerOVHKP5TLl7ik01Nrj\nL1t/2IpUJiXrcBYzH5zpSFTT6DV88coXjL11LKk7U4kbGIdcIUepVtKtVzd+eP8HYvrE4B/uT9yg\nOH54/we8ArwYNmMYp9JOERp7ee47L//2TXO6EqTvTmf/xv3kpuUQmV+C+XQYoK14qPQkevvTUw2K\ny+yrXlffxMvvfM2bH63g6UdupiHrO2RSKYljHyQlI4eEmPB2ydRaXnjrK3YfPEbJoS8v+r7tK17h\nzsf/idVqZfSYK+PduN4QBIEDx8ooq3ZuzfLyz//DH+7/O2pNxw6h6pnUj55J/aivq2Hdqq/59tN3\nePqfn7R6HZ/Rk/Hdth7fgCAa6mrJqa1k5ozBDBg3jeHjppI8cKTzhb+CBIZEcPsfnwDsk+N8/IMY\nqlDi4x/EzXc9DICxqQmr1cqWDT8yfupc5Aol33z6LsPHTcMvIKQjxe9QdCp5i99bWOg2bBwtOHq1\nZXI6a/+3lhvm3+BQzADuPu4Ol7rFZEHjoaGusg6fQB/S96YzcNJAjh84Trde3fAJ8UHppiS4WzAx\n/WLwC/UDwDfEl5h+MYTFhAH2G1DSsKQOdQ23lpMpJ9nw9Qa++McX1FbXkjg0kXkL/4DtErPPL4RI\nJKKbVzCjAoIZ7qUmQA7Sy/g4Ssqq+b9XP+XOx95k/Ig+rP3yRUYOSkQittvy3cIDefbNL7njxtFt\nkqstTLvrBfx83Pn4n5fXcGTmhP7MvvNRgkPC6NHjXEvexeVjtQnsPVZCUWWjU9fdvvEnUg7s4s77\n/+bUdduDXKHETavn8N5tzHvgqVYfb9J7YPT0QVlWjDU0krK/vcKUxxZgNDaxfvW3fLToWcpKCnDT\n6PDxC7wCV3DlcNPqEIlEjn+bLW//oDC2rP8BQ1Mjw8dM5eCeLcy45V6WvPcPRoyf3sFSdxzRIe4o\n5WfscpEgCI6gpsVq4d+//ZuzdnVJlr+znBE3jsAnyMexb/Xi1QyfNZzCE4Wk7U6j3/h+rF+6nqCo\nIPqO7YtXQOezoJ1FQVYBBzYeYP/G/XgFeNFndB+SxyQ7HnbagptcTbx3EAlaKRrR5deNZ+eW8PK7\nX7N6wx6efmQuD9914bnjk25fyKPzpzNx5JXtD11UWknfSY/ywasPMXXcgFYff8Nd/2DmTfO4Z/69\nV0C6ax+Txcbu9GKnu9nLSgr5vwdu4uPvtjl1XWfw4ZsLCY3sccks+IsiCOeNmzfU17J1/Y/8tn4l\nZcUFDBs3jRHjprVo5drVST+yj8P7tpOQPNCRUHi9IRKJmDIgDInkzHeghUIXBIH/7f4flQ3OmTXc\nUeQdz2Priq3c+PCN1FTUkL4nnciESLav2k5kQiQBEQEERgby7b++Ze4Tczta3CtCeUE5BzYdYP+v\n+5EpZCSPTqbP6D7ovdsXawrW+5Hk6WVvxdqK49KO5/LyO8vYeSCdpx+eyz23jL+sY+bc9wqpG99v\nu8CX4Mf1u/nTk++x7+e3CfRrew7B/L+9T0RMH55e8JzzhLsOaDJZ2ZVa7NQEuGbumj6QRZ+swsOr\n8yVNzRga6ZTBMJeivLSIretX8dv6VY4yuBHjpuF3BTP9XVwddGoZo3oHt9jXQqED/HT0JzJLMq+q\nYFeCU+mnSNmegt5bT7/x/c5rjVYUV3TK2HZbEAQBQ4OBPWv3cGDjARrrG0kelUyfMX3wDWnfDU0u\nkRPrHUyiToFXK1ux7juSycvvLOP4yQKefuRmbp0xslXHz//r2wxKjr2sB4DWIAgCr/1nOTv2pbNq\nyUKnrPnsoq84llfP19+scMp61zrV9Ub2ZpTS6MTStGZe/b/7GTlxhmOaWGfilxVfknMyg/v+8uJV\nPW9+ThZbTit3nbsHw8dNY8yk2ajcNFRVlPLJuy+j9/DCarEwZsocusf+P3tnGRB19v3hZ4bu7u6Q\nMLDFFrG7u3NtXWvVNdZV1661u7uxO1BBRFFEaQURRZGumf8Lf7r6FxWYGcB43gAz33vPgWHmfO+9\n53yOR7H694vCYWaghpfjp5/tnwV0/0h/rkdcL1bHflE0cnNyefPiDfpm+qyZvIacVzmYephSvm55\nLIt4Jv4xemo6eOoZ4awiRrGAAjA3nqgR+1KVvKSTBAYGcf5aMJOGdaClb9Ey1pNT0rCq1Is3D3cX\naXx+iEQiarQai4KaIRe3S1ckZtfhywyftpaLl67g5PTrXP1LRMa/5X5UEiIptUL9mB1rF5IuNqFG\ng87YmotRkC9dR4hDureg62//4lXeBAXZS03ky+MHd7l0+jBxzyJJfRWPsbUL7XsMxczSFpEoj1OH\nduLbqkvJOPeLAuFipY2j+aed7T4L6E9ePOHovaPF6tgvCsejgEeIxWIi70WSnZ2NlbMVhuaGGFkZ\nSSxGIxQIcdB9p6tuqlC4ldPTJEV+36pHXEISxsqRNHC4T2yqDlP7VpTIp6nztyInlGPKyE4SzQPw\n7PkrvBoNZ9uysdSq4o6cXGEODgpGQuIbarWbxMjR4xgwcJDU5/+eyckTcfdJIs9eSjf57T0hQTfZ\ns+soymZdMbe2x9pMnhrlRDKxVRQy0tNYtzWQLCxwthbQxMeqRP3JzckhNuoJ29bMZ/LctcREhCES\ni7C2cy5Rv37xbSq7GGKs+2mp4mefZvrqP0bp2vdMTlYOb5PefvLYzZM3ycvLY/XE1eTl5vHQ/yHW\nZaxp3r85IddDMLUzlSiYayirU83MkT4ODjQyUC50MD/od53WvSfyPOE55sZ6tPN1p3dHH4mDOcCf\no7syd+Ve0tIlK2c6dPIGlZuO5M6ppdSt7imTYA5gZKBN6IXl3Lnux9hRQ8nM/NU6EuBNajYXg+Jk\nFsxzc3KYOrIb3QbPwNzajtiox8TGPKc05fiqqKrRtGlNTI11uHNlG2P7teTmlTMl5o+8ggI2Di7I\nyckjFovRNTBi2+r5RD15yMlD29mwbBZrFv3J2+TXpKYk8zb5dYn5+otP0VT7XFPhk7I1eNeH+u7T\nu+SKpH+u9YuCkZWRRXxkPNoG2pzYcALH8o48e/KMrPQsEmIS8G7ljbm9OXcv3cWpghORIZGY2Zqh\npFJ40QwrbRNqmlhSR08NcyVQLGQF3o6DF+k4eA5P418yd3xnuvkaUdYml1rOb6UqXOVoY8byjUdp\n7lO0jNYp/2zl5MUAbh5bhLpa8chkNq3nRdrbl1Sq2RwtTXUqV65SLHZLFRcvki4Q8uhNLkFPXpKd\nK7vV8ph+LZk0Zw021oZkZ8lhYKTP/QtziIsKxq1c6fnba2uAm6Mytep6Y+PgytE9G9izeTnqGlqf\nqMgVq0+6euzetBSxSExk2AMaturM2kV/4upZEVvHMoSH3iP0XgC3rpwh8MYF7J3dEcrJIScn/+3J\nfyF1FOSFuFp9nsT72RJFIBBgrGVcLE794nPS3qbxPPo5jwIeIRAKeJP4hrzcPNyqu3H38l3ca7gT\neisUbQPtD6I59TrWQ1mt4CVoSvJKlDe2o6eDC62MNd5lrBcy+K7bcQrbar05csafPf9O4MDayVTw\nsMdMNwdPqzSEBZB4LQxtm9YgOyeXzXvPFnps425TUZCX4+C6P6TqU0Fo5VuVjPD9PA6+iIebC/7+\n/sXuQ0nh5+dHq67d+fOflYQ/eyvTlfL8acPxadYRW8cyCIViKnqIqFtJzMQZ0wGYOa6v7IwXgfc3\nuw4uHkz8ezVjpi3h5pUzDOxQm7PH9ha7P+7lqzJozCzMrGwZ8vtssjMzKVO2MnV8W5P8+hUOLh6E\nPbxL3+FT8PCqxo71i9i/9V/8DnxdgOkXskFHQzHfxz9boQO8zXxL7OtYWfv0C+D1i9eEXA9BS0+L\noAtBBJ4LxK2aGxmpGWSlZaGpq0lceNw7Fa1zgTTq0YiIexFYOlviVtUNAEVlxQJttxuq61HN2Bof\nQy1sVAQoFyHoLttwhBa9Z6CiosjaeSPo26khBnrFI7vYyrcqDTpNpmf7+qgVoIY+5lkiDt79mD2h\nJ306lWy2c6M6FahR0YnBI6cQHRWNrZ0D2tqF6539vXDlyhU6de7Chcs3aDxqJrv3bsHQxAxDE/Nv\nDy4Cm1fOxatqbWo1bJnv827lqqCqps6kIR3xrt8MVTV1mfghCVo6elSr3QivanW5eOoAq+ZPQVFJ\nuVgzzYVycujqGaKqpo6Ssgov4mO5efkMJubW6OoZ8vZNEu7lq3LiwFY69hqGi8c7PXU1dQ12bVhC\nSJA/qqrq6BuacPX8cQxNzLh48hC2jr96HkgbC0N19LU+32nM9xDRWPPXCl1WxITGEHQxiOdRz3mT\n+Ibzu89jbm/OvqX7sHK1QlFJES09Ldyru3Pv2j3K1SlH6ptUXsa9ZOiCoSgoKVCjRY0C25MTyuFq\nYE1Hexc6m+tRRjUP+SK0LJ23ch/aLu15FPGMO6eWsnbecGz+p6BXnBzf8ieNu0395nX7T1zDu/VY\nQs6tpFGd4msN+zXcna25cWgOrmZi6tSqTpdO7Xnw4EFJuyU1goKC8GnYiN9GjKFZl2GM/3sdto5l\nGDr+b5b9XXhFtIKwZuE0FJWUqFjj6/K7XtXqsmDjUcb1b12iZ9bfwtjMkt8mzOWftQeJiQija6Ny\nHNq5tkR8adiiMz2HTKCydwNU1TVo2KITeXl5pKW8RUtHD/9Lp6hQpTZ7t6xE39CEmg1acP7ku5LN\nGxdPkpWRQVR4aIn4/qOjq5H/gibfgG6iafJdyZl+D8SExuDv549IJOL0ttOkp6QTHxFPRmoGdy7c\nwbWKKwbmBrxOfJd0oqqhio6BDgKBgDrt61CxQeGSy7SUNfE2d6KfgwM+eooYyxeufhwgIjqefcev\nomTTgsSkZKJvbmDpjIEYG+h8e7CM8PJwoFmDykydv/WL10yas5lt+88T7b+x2HYPCkOnlrWJvLaG\nJjWsade6Ga1aNCUoKKik3Soy169fp1XrtnTo3I2qPu2ZtngHLh7/3UQZm1lSvU5j9m39V6p2508b\njqmlLR17Dy/Q9Tq6Bqw7cI0zR3ezfe1CqfoibXT1jRgwejr/7r5A0ssXtK/rgv+lkyTExZKbKy7W\nRD85eXl09Y3Q0TNETk6OfiPf3VBHPH6AZ8XqqGto0abrIF6+iMfTqwbR4Y+wsnPmytmj1KjbmPS0\nVDIzZJMI+TMiEICOev4B/bOytfdsu7mNxJREmTr2I5P4LJHEp4k4ezkTcj2EpIQkKvpURFVDlT2L\n9tBiYAtyc3LZvWA3rYa0IjIkEnUtdRKfJVKudrlCnYl/jK2uGR7aWlgp5BY5Ke19w5T48KfoWZqg\nbuzG9AGlJ6kIoGrz0Syc1o8q5T8tr2nY5Q9qVXFj4m8dSsizwnPQ7zpbD10jPPoF3Xv0onuPHujp\nlW7Bo8ePH7Nl61Y2b9qCpo4evm16Ur1O46+O6d6kAsu2n0FTS/IbwmmjelCvcVu8639ZOvhr7N64\nlND7d5jyT+Gbo5QE2dlZLJzUG7TKoW7VjWpeupRzUShptwC4f+cGNy6dQs/AmFad+7N19T80aNaB\nbavnM2rqIh4/DCbo5mXEYhHte/5W0u5+92irK1LL0yzf574Y0M+Hnedu7F2ZOvYjkJ2VTVZaFhq6\n/3VyirgfwfOo56hrqxP1IAqAOm3rfLgm5EYI6W/Tsfe0Jyc7hwf+D7BwtMi39WpBUFFQxk3fAncN\neTSFhV+Jvych8Q2zluxk454zTBrWkd8Hty3yXLLmdXIqdtX6kBSyC3inEe/VeDg7lo/Dp1b5Evau\naASFRLB53wU27z1L5UpedO/Zhw4dSo808Zs3b9iydSsbN27i5askajZogXeDFgWWEfW/fIpzx/cz\nYbZkK/XRfZrTbcBYylbylmiewBsXWDlzDPs79kVN34CYhq1LZU/xj4lNgCNnXhJ2YyXu9tCuxxA0\ntaXT9lhS8nJzkZOXZ+H0kXTpN5pTR3bSoFkHju/bgoaWDuGhwfw+S3Yyzj8LNqYaeNjkX17+xYAe\n+jwUvxA/mTr2I5CWnMapbaeo0qgK0aHRlKtdDiUVJa4dvUZqcioR9yKo16EejwIeUbN1TR7feUz5\nuuW5uPcieqZ6uFd3L7JtE00DPHX0cVDJQxI5majYBGYuKVjDlNLE9oMXOHr6Jp1a1mL41FXcPr4Y\nXe2SbZEpLY6fu8XmfRd48DgOHX0j6tarT726dalRo+D5E5KSnJzMzZs3ueHvT3TMM3bv2kG9Rq2o\nXq8FDq6eRZpz5rg++Lbsile1OkUa379dTX6fuQI7J7cijf//qJ89ht7MURgYmfF46kKSXYr2exUn\nmdlilBQEHN27gT2bllOlpg/tegwtFZ3V8nJziY16jJaOHiKRiJMHt1OnURtU1dRZvWAqY2csK2kX\nv3sqOBpgbpB/YucXA/rbjLesv/Z9bEeVBDGhMaSnpONc0Zktf23B1NYUe097rh6+SuffO7N19lY6\njunI+qnrqdu+LiKRiGdPnuFR00Mi/Xh5OXlc9Czw0FTGoAjn4h/zvmHKtYCHTB5WsIYpknLh+j1q\nVy36Tcz/Z/CE5Vy5/YDW7XswrV8lqc1bWhCLxaw/95qzl27z4M517gcHUr9BQ8p6euDs7ISzkxNO\nTk7o6Ei2jS0Wi/H398f/5k1u+t/E/+ZNXiQk4OxWFhsnD1w9Kkq8IgZ4nZTIqJ5N2XC4cOV7eXl5\ndG1UlsWbTkg1W1414RnlZozmfth9Nvi2ofWoP6U2d3Fx6vBO9mxahmvZSrTrPgRzq6Lt9MmChLgY\nTh3eycsX8ZSvUvunbnUqLXy8LFFRyn8J98WALhaLWXd1HalZqTJ17nsi7W0akfcjyUzPJCs9CyUV\nJZISklDXUkfLQIsyVcqwe+FuWg5uSdCFIBKfJuLdyhtNXU2JbeuoaOGpZ4KLmhilImSpf4ykDVOK\nwqPwp3QfPh99PS2a1K3I4B5NpDZ3tRajmT+lH1Ur/IBylUIFjkTa817yPC8vj3uBNwgPDSbhWRRx\nsRHERIWjoKCAV8XKKCspoq2liaamJpqaGqhraKCpqUlubi5JSUkkvUri1atXvEpKIinp3fevk5Kw\nsXckOzsHBxcPbBw9sHfxwNTCRia/0u5Ny8jNzqZzv1EFuj717Rt6NKvI1hNBqKiqfXtAIZHLzgax\nmP0HthJ44wJ/LtoidRvFwcWTB9mzeTkW1va07TEEO0fp7GJIg9ycHOCdMt0vio6qkjz1vSz40sHQ\nFwM6wNF7R3ny4omMXCt9vIx7ib7pu7OJj5PaTm07Re22tXmT+IawgDCSEpKo36k+6trqbPlrC60G\nt2LbnG20H9mew6sO031yd6lUCQgEAux0zfDU1sSikFKs+XHZP4SZS3aS9DpFooYphWXi35vYf+Ia\nmxePplJZR6wq9+Ty/nlYftSvXlJkMWdpIF1owOmIb8sxJ79+RVxsJK9fJZKRnkZGeiqZGWlkZqST\nlZmOQCBATUMLNXUtNDS1UdfURl1TCw0tHTQ03n0tTvq1qcFfK3Z/c5v43Il9nD+xnxlLikfA5O7t\nq8ydPIT56w5jbPZ9thi9fvEkezctR0tHj3Y9h+LiXqGkXfqFlMivw9rHfDWgB0QHcPnJZZk4VhoQ\ni8VE3o/k/vX7uFV1I+RGCLXa1OJl3MtPktqqNanGya0n8W7pzbPwZxiYGhB2Jwzvlt4cXn2YLr93\n4eSWkxhZGmHpZImusWRJKmpKqrjrmeOmIURdIJlUZl6eiNAnsQyauByAycM6FlvS2JnLQfQYMZ+h\nvZoxYWj7D48HhUTQa9RC7pxcKlV78lbNyIo4JDON9pIgKtuGu3FFq3gozQTdusLB7auZtnBzvs9n\nZqQzb8pQtLT1GDZpXrH6lpb6ltF9mtOl3+giZ9GXBgL9L7Jn4zKEcvIMGjsTU3NrIh4/4Mju9Whq\n6dKkbY/v9qblZ8XdRhdb0y+X4n41oL9IecH2m9tl4lhp4EnQE26cuEHb4W1RVlUm+mE0MY9i8G7p\n/UlSW/9Z/QkLDOPCvgtUbFCRCvUqEHI9hOfRz6nsWxl1bekoT1loGeOhq4OdUl7+AgEFJDYukYVr\nDtKrQwNmL91NSORrlk3tinflMlLx81uIRGJ6jJjP88TXbFo0GlOjz29wpi3YhgABU0d1lprdFy/f\n4F5/CAlBP44c5dnnLqT+oL1d5k35jWq1fale99PjlzPH9rB20Z+Mnb6MClVrl4xzvKtz19U3otfQ\niSXmgzQICfLnzLE9vHz6GDM7D5q264mBkSknD+2geYfeJe3eLwpBLU8ztNXzl32FbwR0sVjM2qtr\nSctKk4lzJY1IJGLNxDW4VnElPSUdn64+bJ+7nS6/d/ksqc2+rD0hN0KwdLT8pERNUhTlFHHRM8NT\nSwVdOcm21W/dDePAieuoqykzpGdT+oxezJq5w1BXV0ZBvniaKGzcfYY+YxaxadFourb+eiZzWZ+h\nbFo0Gk9X6Z3V3rkfTp8xiwn0WyK1OUuKXDkNjoXLRi61NJCRnkbvllXYceoeAOmpKcyb+ht6+kYM\nnTCnhL17x6Gda7l55Syzlu0oaVckIi83l6ysTJJeJrB+yUwGjZ2JgbEZ4WH3uX31HB16DStpF3/x\nDZQU5PCpZPnVxV6+Wu7vEQgEvEp9RWLqjykwIxAIiAiOwM7Djsq+lREIBEQ9iMLUxhSxWEzw5WCa\n9GmCiY0JAIbmhkXqaJYf+mo6VDWxoaGRNnaqQlSEkm2tz1mxl9i4RLq1qcvOQ5fo3Ko2IpGYyNjn\neLjIJrnpY2KeJdKyzwySU9II9FtaIJu+tSvQqNsURvSVXuariaEuZsZ6jJ6+tliS/WRJksiI2OQv\n341/7ygoKGJuZcfpI7tJjH/K9HG96T10Ei06lp5GKs5u5TE2tWBYV1+q1Goo25pv0f8+A2RQCy8U\nCnl4LwAHFw/cylVh9cJpeNdvxpoFU5GXf/c6qGlInrz7C9lhoq+Kmd7Xk0K/GtABcvNyeZL44ybG\nySvI8zz6Odau1sA7ydW3SW9xr+6OY3lHqQVwAKFAiJO+JXVNzKiuo4KRghi5Qr53Xya9RfUjn05d\nDCQi5jmujpYEP4yiVaNq3L77GGsLQ6pXdOXmnTDKu8u2jGXGoh389sdKFv05oFDBWVtLHYEAdh66\nhG+d/yXu5OZBSjooFz2QOdqakZqWycotx2juU7oU7grDo2QjkjN/nHyA/FBT12LxzFGoqGsyd9V+\nTMytStqlzzA0Nqdp+55MGd4VNXVNrO2lX02hd/cWZf+ZjMXJg2QYmZFhnL8SmCTcvX2Fy2eO8jop\nkeysTBxdPXkSeo++I6aSlvqWg9tXk/wmqcRauP7i69ibaqGVTw/0j/nmp4WlruUPrevuUM6BnOyc\nDz9Lotj2vB34MwAAIABJREFUJTSU1alm5khfB0d89ZUwLUTGetKblA/fi8Vi9h2/CrxbkadnZFGr\nqjub9pzFy8OBJ1FxZGXn8Fvv5oQ+eYqcnFBmteVisZjw6Hjsq/clJzePaP+NRaovH96nBckpaVy9\n9QCeJULfWdBpMvy1gQ+1WkWgfxdfurepR6chpWPrtrCIhYrEJksiF1T68Tu4jd+6NWTC32sYNnFu\nSbvzVZSVVVm27TSBNy+xbvEM6U4uFmO/bRWKya9RfPsG+x1r/lutSxGf5p1o220Q1nZO9B85jTPH\n9tCkTXeyszK5ffUc7hWqEfXkISnJrxGLxXzlNPYXJYChzrdLNr96hv6enbd38jz5uVSc+pmw0jHB\nU0cHGwl01QdPXMGkYR3Ytv88CgryuDtbkycSoaaiRFBIBEN7NWPcrPV0aFaTtIxM9HQ0KOMo+1VO\nl4F/Exz1moOrRmBnZSLxfJrObUkc1Balkzf+e3DOUHC3l2jeRWsPce32A3b/O0FCD4uXNKEhZyJK\nt557UfG/fIrDu9ZjYe3AwDFSDo7FwJE9G7h27jizV+6RzoQiEZX+GIxKQjwAL5SUebB0BwKhbHdn\n7gVe517AddQ0NLF3dkckErFuyUwWrD/M9YsnuXXlLOUqeVPTp8W748gnD7G2d5GpT7/IHx0NRWp6\nfHvXpkD/MVZ6pW8brLSiJK9EBWN7ejq60MpIA1vFogdzgCE9m9Cs5590aV0HW0tjbgY9YuPu09So\nVIabQWFcDwhFQV6eqKcJ1KzsJvNgvnX/eeQsmzK0b3Ou7pkqlWAOcO/MCqau2v/pg6qf9/stLCP6\ntqBdU2+qtxwj8VzFSUK69AVUSpobl04yomcTzh3fT78RU7/LYA7QrF0vug8ez6ju9bl5+azkEwqF\nPOrxG6lmVjxX12TsmyTa1nHi0unDks/9FdzLV6VTnxG4elbi8tmj3LxyFu/6zRAK5bh06hB9hk1G\nIBRyx/8iL+Kfct7vgEz9+cWXMdRRLdB1BUp9ttSxxJ/CSTX+bBhp6OOpa4Cjigh5xEDRZVmTU9LY\nuPsMjrZmNKrjha2lMZrqqrRoWIW9x67g4WLD7eDHzJ/Sl8On/Bk7qA3amrINAHEJSfQYMR9jAx1y\noo4gFEr3GObc1bsEl7FlR8JrOrnbQaOqYCedc8R2TWtgZqyHdZVeRN3YIJU5ZU1EUulLhhNmZ6Ga\nGE+6gSkixYL7F3jjAptXzsXYzIoRk//5IVZ5Lu4VGDRxIYf2HCYtLZk6vq0lmi/ZsQwB0xbTtVE5\nVu29RA8VNRbPHM25E/sYPvkfdHRlI5gkEApxcPHAwcWDR/cDsbBx5Pa1c1jZOqGh9a59s0gkYv+2\nVahranH/zg3cyn2/eSnfK4baBVvcfDMpDkBdUZ2gp0HkiSTTDv/RkBfK46xvQX1TM6poK2GgIJao\nfvw9QyatZEDXRuw9doWc3Dy8K5dh6vytiMWQmpbByH6tuHknjMrlnCjvboeykmw//Gcv202/sYv5\n54++jBnYWuo5FUMmrSA8+jm7107mSGo6J1VVqNu7uVRtWJga0Mq3GvruHRnQtTHqRWxPWxzkymkR\n8rJ0ZRyrx0RQftZYLPwOYHrBj7cOLmR9JcgkvUzg0M51zJ82AoFQSNcBY2jarifaMgpMJYGevhHV\natXk8M513Au8ToUqtSWab8H0kTTr0BsHFw+EQiFVa/uiraPP9FE9EYnyPukxLwv0DU1QUFRk+9qF\nqGtq8SbpJf6XTlHHtzVBty7Td/gUdm9ainv5qmRmpKGk/F+QeZP0kuzsrE8e+4V0UFSQw81W74ty\nrx9ToPgjFAqx1PulKPQeLWUNvM0d6etgj4+eEkbyksuy7jx0iUlzNvPqdQpZWTlYmRsydVQX9h67\nSs3KblTzcsXNyYrZE3qiralGxxY1pfCbfB3/O49wrjWAlNQMngVsob53WanbqNx0JGUcrVg/fwQA\nE3/rQHhMPDsPXZK6LStzQ7IiDuHpM4TAe+FSn19aJOWUrmAOYLd7PYrJrwFQSEvBdtd6yCf95uaV\nM8wc14cxfVsCsGD9YQaOno613Q+os/8/hk/+B1Nza34fWPR2wxdPHUIgEFCzwac3smUrebPhsD+p\nb98ytKsPjx8GS+ruV3n96gUVq9ejfc/fMDQ2Z/gf8zm2bxMdev2GQCgkOysLFVU1tq1Z8Mm4fVtW\nkpOVJVPfflYMtJULvFAssNqIla4VjxMeF9Gl7x+BQICNjime2lpYfkhyk04map8xi2lSryJ9OzVk\n+JRVeHk6sGT9YQx0tXB3tgYo9pamgyeuIPDeEw6t/wMnO+mLm9y5H45X4+FcP7yASmUdP3lux/Lf\nKVN3EB4u1rg6SvdGUk5OyPM726jQaATLZw2kSvnSF2hik6VXKikVxGLkU95+8tD74A5w+9p5bl45\nw+tXCQgEQonao36vNGnbA3tnd9rUdmTBuiNY2RW89Cst9S2rF0xlm1/QF6/pPmgcdRu1ZvGsMTi4\neNJfRl3hdPQMP3REc3Z/JxFdtpI3RqaWhATdxLFMWQQCAcL/JeztXL8YaztnRKI89AyNZeLTz45R\nAbfboYArdAAbPdmLk5RGVBSVqWhiTy8HJ5obqmElYZIbvJNG3br/PGu2+5Gbm4eLvQXqqsrYWBqh\nrqZM/y6+ONmZY2SgLVXRlYKw99gV1Bxa4+5sxY0jC2QSzNfuOEmfMYvJiTryWTB/T/Dp5XQY9LfU\nbQNEvVCi3eDdjF+fRXzCG5nYKCpigRLPkotH1a/ACAQk1Kj/4UeRSMRFTW1mTxxEq5r2+B3cir2z\nG0PHz2Hi36t/umD+Hie38uw+84AF00dw9tjeAo+bPqY3U/75dqtqc2t75q05iLm1PR0buHH94klJ\n3C0wnl7VgXfKfg2bd/rw+NrF07F1LMOjB0E0a9+bQP+LrF08nYunDhWLXz8LBtoFS4iDQqzQ1ZTU\nMNEyIT45vkhOfW+YahrioaOHg0oe76qBJVuNr9p6grrVPXmbko7fhQBqVXHj1esU/pi3hYm/daBJ\nj6lk5+SSkpqBspIiDYupgcp7kt6k0GPEApSVFEkM3vGJeI00GTh+GXl5om9Ks8rJCTm3ezaGnp15\ncVe6/QQuhmpxITAZQ9sGZAjeAqVHLD0NbcQfnZZlZWdy48JJLG0csLR1Qk6u+GvTw8Pu45eagpqW\nDhoP7xKtoUWsUEDdxq0ZP2uFzMurvifk5OVZvOkES2eP40loMANGT//q9bs3LcOzQjWc3Ar+fm/c\nuht1G7Vh8czRnP9f0pya+n/HNNnZWSgqSv/9+/5GLTcnh7u3rzJ43F9Y2jhw+9p5lFVUuXjqECMm\nz2fPpmXExUbKrP3uz4S2uhLKigV/zxdqKeBg5PBDB3QFOQWc9czx0FLGQC4PSTLV4d1KtLqXKy4O\nFqgoK9Jz5AJ2rRxPXMIr3F2s0dJQY9eRS2ioq1DdyxWRSMy6+cOlnkH+NcRiMRt3n2HMjHVsWjSK\npvUrycyWV+Ph9Ovsy4CujQp0vYGeFoF+S7Co2IPYW5uk5kd4yEkU5arjbq2EuW7pOvf7uFzt1RsB\nW/ZEk/Y8iZc7xhET8QgjU0usbB2xsHH88NXcyhahULJAn5L8moT4pyTEx5IQF0NC3FNePH9GcMBV\nrG2dcSjjiWP9Zsh1GcDRv8axZmLxdkD73vhtwlxOHNjK2P6tmLc6/3Kv8LD7+F88xfz1hS9PU1ZR\n5fdZK7l55Qz929ak38ip1PJpiUAgYMWciYz4Y76kv0K+BN64wJWzxxg3YzlWdk4kxMXQqnN/Qu8H\nUKVmQwQCAVmZGQgEQvwObCP+WRQVqtbFo0LxtGr+0TDVL/jqHAob0A0cuBQm/WSlkkZXVRtPPWOc\nVcUoCSQrOfuYy/4hXLx+j/FD29G9bT3OXwtGS0ONnu3rM3r6Wrq1qYum+rsXbFif5qzYdIzmPpWl\nYrsgiMViPH1+Q0PHhFf3d8rMzu3gx1RsPILbxxdTwaNwQjHmJvpc2Ps39tX78uTqWol9uXrrAedO\nbefsnvLIC2MpXZ1WBYR/VK6W8AoyswS4V+1E00m9EAohLjaS6IgwYiPDuHbBj9gNS1BV0yAiLARV\ndQ1UVdVRUVNHTV0DFVUNVNXUUdPQAsT/642e8aFHelZmJgbGZgTeuICcvAJGJuYYmVhgZGqJraMr\ndXxbMXnOGuT+X2MfoVCOhLgYjEx/Jcp+jUatumLv5E6rmvbMX3sIW8dPux3OHNOHBRuPSmSjUo36\nbPMLYv2yv9ixei5/LtmFnoHRh+dzcrJRUJBeFUz5KrUp/1E2//v/ATV1DTYun83zZ9FkZWUSFxtJ\nZmY6vYZO4vKZI4hFol87OUXAVK9wnTwLpBT3MT+KapxAIMBe1wwPbU0sCiHFWhj6jFnMspmD6DNm\nEeOHtCMjM5uDftcp726Pk50ZjyPjaFq/EkqKCjKx/zEikfjDyv/UxUAuXL/Hb72bkZmZg7WFoczk\nff/dcpx1O05x6/giieZ5EBZDu4GzuXdmRZF3MLKyc9BybkdmxEGJfJEVOXLaHA//T6jnxfPn/D1r\nMVP/mo3WNxr8ZWdnkZ6aQnp6KhlpqaSlppCRnkJ6WioZ6amI8kQoq6iipKzyv6+qKCkro6Kqhr6h\nKapqBf/gWD5nAo6uZWnQrENRf9WfCrFIxOi+LWjZuC2tbRx4XaYcixdOw9nDi/pN2knHhlhM4vOn\nPAm9j0AgoGptX04e2k5E2AMGjZ0pFRvfIi83l5cv4jAytWTTir9p0bEv2rr6AMQ/jebong3oGRrT\nvH0f5BVk/5n3vaOjrkhNz8JpcRQ6+8bB0OG7DuhqSqq465nhri6PmjAPkE0wB5CXE7JwzQF0tNSZ\nsWgnk4Z1oJqXC+Ym+ni42BRLF7S4hCR0tNRZsv4w4wa14czlIBKTkqlb3ZN2A2Zzad9cqQdzsRie\nPX+J3/kA7j6IlDiYA7g6WmJhYkjFJiMIOLG4SHNU8B1OgF/RxhYHSdmfRu2wkNuY6qZ9M5gDKCoq\noair9OEDVJZ4VKjGzStnfgX0AiIQClmw7jB5PZtgkZ5KvIsnaaI8qQVzeLdAMTSx4OShHdRq2Ipl\ns3/H3tmDjn2G43/5FG7lqnxyzi4L5OTlP6zYq9VpzP5t/1KvcTus7JzYvPJvfpswl6jwUM6d2Iux\nmTX+l09hY+9CvSbtfuh+IUXF1KDwYmGF3gNxMHAotJHSgIWWMU1tXOljY04VTcH/grls0dZSp3ZV\nD5bPGszmxaNRVlKkWYPKlHOTbfezj3n+4jV/L9/N6P6tmLl4J/W9y6KqokzU0wTaNK7Ov1uOS9Ve\nyFMV5p8wZvg8f4IfRmFsJ50z+U5D5tCzfT2WzRxEtRajCz2+58gFjB3Uplh07otKTPKn5SkP7wXg\n4l6hhLz5Mu7lq3Iv8HpJu/F9IRDg0KIDKSlv2H/zEr/PXCETM9ERj9i8cg6N23SnQrU6zJk0CC1t\nfTYun012dvHlizi4eNC2+xDEYhGpKcnoGhijqq7x4cjnzNFd9Bk2GUtbR+KfRRebX98TprqF226H\nIgR0TRVNjLW+j3pDRXlFyhrZ0t3BhTYmmtgr5UpFya2gWJoaYGL4rn+yirIizvbSLwH7GmKxmIdP\nYjh54V2LVZFIzLXbD7kRGIqZsR5Jb1Kk3lp1zxURu07F4ValG4unD2Bq34oSz9lpyBxa+FSlY4ua\nVK3gzN7Vk6jRcmyBxy/bcAQNdVV6tKsnsS+yQixUJu7tp4ltofcCcC6FAV1bVx8NTR1io35eXYqi\nENG6Bw0UlSi/cAutvO0ID7svdRvtegxl1NRF2DqW4eLJg9Rv2oHrF/2Ql1fg7ZskxCIR+7f9K3W7\n+aGppYO1vQvqGlrk5eVybO8mTh7agaGxOZVq1EcolMPRtSxycnKsXTydvVtWkpGeViy+lXZ0NZRQ\nVS58+Wqhz9ABAmICuPz4cqGNFRf6ajp46hnhrCJGQfDztQDMzc1jxeZjqKkoY2qsi42FMdMXbWf9\n/BF0HjKX9QtGsu/YVZo1qIShvrbU7K7YdIzNx8LpMWAW1Rze4mmZIfGcHwfzjwkJi6Z22/FEXl+P\nutqXhRduBIYyctoarh+WTdavtEgRGHEuUvfDzzk52XT28WDP+dAS9OrLrFk4DVNLW5q06V7Srnw3\njO7dnMHj/8LO0Q2xWMyYPi1o2LITPh/VdkuT29fOkZqSjHe9Zlw5d4xaPi04sG0VLTv3JzjgGq9f\nvaB2w1YysZ0fCfGx6Okbk52dxdrF06ndsBXu5aswd/Jghvw+m9zcXKLCQ/GoUFXiqo3vHTcbXexM\ntQo9rkgL1tK47S4nlMNZ35IO9mXoamGAu6ropwzmObm5tO43i9pV3RGJRaiqKOFsb46ZsR5HTt9k\nWJ8WvE1Jp08nH6kG896jFxESFs2N3cMYVC9BpsEcoIyjFQ8vrMKkfDfuhUblOz4nN5earX8v9cEc\nID790+21h8EBuHiUvtX5e9wrVOVewK9t94Iyc1xfOvUdgZ2jG/DuzHv++sM8Cb3PirkTZWLTq1pd\nlFVU2b9tFbV8WnDH/xJy8grkZGdx8tB2atRrxtLZ4xDLoPd6fhiZWCCvoICqmjqDxs5EQUGB7KxM\ntHT0UdfURltXn7IVa/DvP1NIT00pFp9KK4XNbn9PkQK6poomRppG376wGNBU1qC6mSN97B3w1VfG\nRD6npF0qdkQiMau2nmDuinfqVB4u1rxOTqVTi1osXnuIXYcvoa2pjpuTFbWrumNpJr0GGdk5uXjU\nH4J3pTIsnzVYavN+LZi/R19Xk5RHe+kydB6HT33eDdCr0Qhun5A8IU/mCAREJH2a9Rt6PwBnt9Ib\n0D3KVyM48FpJu/FdsHLeZCpWr4tXtbqfPTd43CzsnT0Y2aspIhk0v6pSsyHtegwhKzOD00d30bRd\nD/ZsXk7rLgM5d3wPXlXrlkg5mYKCIi4eXigpq6CgqMT1C36kp6Xy/FkMyioqqKprcP2CH4H+F4vd\nt5JGT1MJFaWi7VAU+ZV0MCrZVbq1jinNbV3pZWVCRQ1QFRbPXWZpZOmGw3h5OJCemcXEvzcxaVhH\nlq4/gqqKMluXjsXUSI8xA1vj4mAhVbvXbj9Ew7EN25aNpVeHBlKbtyDB/GOCzyxn3c6TLHkv0HEx\nkLndpzG8T/NiqSSQlGyhFlk5n2b5hgYH4FyKV+iq6hqYmFrJ5Bz4R2L3xqVo6ejRsEXnL17j07wj\nwybOpW1tZ8IefFnPXRIS4mJp220wsZFPyMnORt/QhIfBAZSrUpPLZ47w/FmMTOwWhD7DJqNvaIJQ\nKOTSmcP4NO+EWCzm0pnDlK1Yg9ULprJ+6Uwe3Q8sMR+LE1O9orfCLnJAdzZ0LvZSA2UFZSoY29PL\nwZWWRurYSkFX/XslPSOLKf9s5WZQGMN6N+fkxQAaeJcjIvo5jyOfMah7Y+ISXqGqooR35TJSr3Vf\nsv4wY2euIyvy0IcGMtKgsMH8PYfWTyE8Kp6pvy8hdsQCej2OpXej70Od6lX252dlD+/dxsVdtu0y\nJeXXtvvXOXNsDy/in9K578hvXmvj4Mr+S49Zu2g6x/dvkbovlraO2DqWIf5ZFB17D2fbmvl06juS\nhX+OQlNbl2P7NvMsJkLqdguKg6snyiqq2Du7c+rwDtYunk65SjURi+FVYgKd+40iL+/Hb98toOjb\n7SBBQFdXVsdKr3hKgIw19PGxcqGvnRXe2kK05GRXO/698OfC7fTt1JBKZR0RCATcC40iJzeP8u72\nCIVC6tUoi7mJbGqSuw+fT3hUPFcP/iPVeYsazN+zePoAFIz12ZWWQaCVPWgW/Y1RnES/+VR3OyYi\nDANjM1RUi36nXhz8Kl/7Mnf8L3H13DGGTphTqHFzV+/nadQTlvw1TiZ+vZdnLV+5Fi/iYylfpSae\nXtVxcPHgWUwEkY8fcPHUIXJysmVi/1uUr1yLnkMm4OlVnTq+rYkOD6XHkPH8O+8PXD0lr5gp7ehr\nq6BcxO12kCCgA7iZuEky/KvIC+UpY2BNJztXOprp4qqShzw/X5Lbx5y7epdhf/zLrbthvElORVPj\nnWxs0psUZoztRsyzF4wb3AY3J9ncaKVnZOFaZyANapZj8fQB0pn0WSIEhtJ5sGTBHCAvT8S0RTvw\n2jSNRlevcvqybLYvpYlIqExCyqdv4O9hdQ6/VuhfIjr8ERtXzGbq/I1FGt9/1J+4la3EsO6+Mgms\nSsoqVK3ti56BCfFPo4kKD+XymSOUrViDnesXIy8vz7LZv5PyUYvc4kQolKNSjfrIKyhw5+Zl/A5s\nJSszvUR8KW4sDSVbhEjUp9FG3wZVRVXSs6X3x9ZW1sRD3wRXNQHKAhGyVHL7noh++oIT528ze0JP\neo5cyOAeTeg9aiENa1fgUfhTFkzth721qczsP46Mo6zPUG4fXyy9s/jnr2DAX0RExTOqcTW8JAjm\n8K75y+3jiylbxhZR7FF8Ok/m9OU7zJ3UWzr+yoBU0eeVBg+DAyhbqUYJeFM4FBWVsHEsw6P7gYXq\nFvYjYuB/CbWEp9yv1YhJv3Vi63HJznvrNm6LvbMHnX08WLbt1AcFtvBH97G2c/5MX78omJhbUbdx\nW+4FXGPI77M5eXgHPs07UaFqbcIfhZCRnkZ0xCMUlZRxdC0rsb3CIhAIaNN1IHm5uR/6r//IKCrI\nYSLB+TlIuEKXE8rhbOwskQPw7oWz0zOnla0rPayMKa8u/l8w/8V7cnJzUZCXR01VmUHdGxMVm8Ca\necOpWdmNBVP7ycRmXEIScQlJTF+8k9aDFpP2eL9UE+vyEl8TFv4UEXJ4mUqWed9v7BKG9GxK2TK2\nHx47tX0mBrpalPcdRtKb0lkGE5/++Ru4tGe4f0zDFp15FFL6d0JkikiE/e4NmB/YzoyWVVl/UDq7\nFpa2juw5H8qWf/9hyZS+xEQ+Zu4fQ6Wa+W1p40CTtj3Q1tVHU0uXClVrkxAfS1rqW04c2MrjB3eJ\nj43i1OF3zZt2rFtEQnys1OwXBDl5+Z+isYuFoRpyEnbalPivVMakzLcv+gKqiipUMnGgt4MzzQxU\nsfqJk9zyI/FVMoMmLGfJ+sPYW5vy5m0aKzYdY/+Ja9Ss4oaejobUM9ffE5eQxPxV+xk3cz1ujpac\n3jxe6ja6/buP123qY9u/OXRqWOR5/t1yHHl5OfrmM8fYQW1Y989wHGr0Y/eRUiaGJBAS8erTZMX4\np9Foa6hibPZ9dDLT1NYh6NqZknbji1w5e5R+7epw9bx0JY4/QSgkrNsgrtWoj1FtX6n3Iu8z/A+a\ndhnJln/nUrZiDTy9qgOQ9DJBqnZq+bQA4PThnXTuN4oX8U/JE4nIysokJjKMmMjHZGakYWhsXqz1\n6z8LVoaSa+1LHND11PUKLQVrqmVII2tX+thaUE1LgEYx6Kp/bzwIi2HIpBUsnNaP7OxczlwOYsVf\ng6lczokZY7thZ2Xy7UmKyMzFO+k16t22/voFI9hx8CIKCpJv8X1MpyFzaO5TlcozByAc1gGMdL89\nKB9uBz9m3Y5TrJw95IvXlHOz49X9new7fpU/5kk/g7ioZAu1yc777w428Q0ERyhhUa4nIvH3cWdb\noUodwkthr6bs7CxmTxjIjUunWLPnPLs3LiU6/JHM7L0qWwlRnxFUqFKbhTNGSXVubR09DuxYTY9B\nv6OkrMzLxOesmDuRsf1akZkh/bPlrgPGoqWti6q6Bo1bd8OxTFlq+7Zi14YldOw9gtNHdpZY/fqP\nip6mEhqqklciSeUVcTP9dnKcgpwCHoa2dHVwpb2JNk7Kufzc4n7vyMzK5mn8yw8/r97mx7hZ69HW\nUiMrO4fs7FxG9mvJ6m0nyM7JpYKHPTpassvenvj3JiqVdWTh1H5MX7gDRQV55k/pS/DDSKnZkDSb\n/WMqNh5R4G5uu1aOx9nOHAXr5mzee1Zi25LyMuu/NmpvUgSc8xfwJFqIULsedx6WoGOFQCAAK2MB\nwaUoOe7c8b109S1L3catGfPnEgD+mLeeGWNln0tRq2FLyleqKdWgHh4WQo16TclITyP80X2unTuO\ngoIifUdMRVlFVWp2/j/dBo7j0M615GRl8eRhMDUbNCMrM4OHwQFUre3LgW2reBr1RGb2fyYsDQvQ\nUrEASCWgOxo6oiCX/92Frqo2dSyc6WdnS11defR/lZx9Qm5uHuNmrUcsFrN1/3mM9LUZ0qMpQyet\nZMbYbsxYvAM5OaHME7vS0jMRi8XYWBoREhaDq6MlTepVZM12PyzNDKhTzUMqdqQZzN8nwRWGLq3r\nkPHkAGcuB1G53mCeRMVJ7EdRiXqt/OH7uBcgFgvISE9DRVWN2OcCCt9loWRwL1+Ne6VANS4t9S1/\nju7J/aCb7D73kMrePh+e0zc0oV2PIaycN1nmfkg7qNs7u1PZuwF2zm6MmrIIYzNL1NQ1qVqr6MdU\nBUFTS4dOfUZ8qBGv7O3DtjXz6dJ/NI8f3KV2o9b4HdrOyxfxMvXjR0dBXoipgXQWaVIJ6Iryip8o\nxwkFQhz0zGlr50p3S0M81UQoCr+TT6di5nbwE7Kzc9m89xyZWdmoKCtiZW6Im7M1GmqqeLjYIBaL\nsbYwQlHK294fc+XWA+as2Eu/zr6ERTwjIPgJ7Zt506NdfanZkGYwHzh+Gf06+1LBw77QY+Xl5cjK\nzqFx0xo06jqV8X9tkNifwiKSUyEx7b+33/tNl8yMdJRVVNHR4LvJJ/Hwqkbw7ZIN6Mf3b6F/25o0\nb9+bYRPn5ntNwxadSXqZwK2rst+dkcVKXSiUIzMznesX/GjfYygr5k5iw7JZbF01TyaysR9Tu2Er\nsjIzKF+5FiFBN7kf5M/ZY3tJiIslK1Pyvg0/M2YGashLmAz3HqkdgpQxKYOakipVTR3p4+BEEwNV\nzBV+rca/RG5uHo8j4zh5IYC1/wzn0MnrNKrjxfJNR9l24DxxCa+wNDOgW5u6MlHkm79qP2KxmAvX\n7/E2zTvKAAAgAElEQVQkKo6GtcqTlp7Juat3WTC134djAGndREgzmK/Z7odIJGZA10ZFGn/83C1S\n0zKZOrIzj6+sQUdbAwOPTvnqwcuKFJHOJz+bGooxUotCgWTMDcRUcv9+boCdypQj8slDsrMyi932\nlbNH6d2yKq9fvmCbXxDlKn/9/2vSnDXMnjBQ5gEQZBPUjU0tGTphDhdPH0ZeXh4zS1vMrOyIehJK\nZka6TH+v9/XrGppaZGakY2Bogqa2DmaWtt8e/IsvYi2l7XYAuWnTpk2TxkSaypqUVUrDQiEbxZ+w\ny1lheJn0lnGzNlC1gjMPH8fiW7sCaqrKbNx9hjVzh5GTk0ffTg1RkJddlkHlck6s3uZHfe9yDJm0\nkuYNKlOzshvNe01nQNdGpULONT/u3A/nj3lbObppWpHnqNZiDGd2/oWqyrts5BoVXendwYdpC7Zx\nPSAUYwOdD33sZUVkqiGv0v97fQUCCL6+B2HmA1q0rIEMN2NkwqOQQDS0dDG1KB7t/If3Apj7xxDe\nJL3k91krqOxd8F4CTmXKsWrB1GJpHWpt70x2ZgYHdqyWyha5UChEQUGRsJA7eNWoi7aOAcf2bSY7\nKxP/y6cJvHERD6/qyMnJ7rPDxNwaUwtrAv0v0qbbYFRUSreiYWlGR10RJ0udb19YQKQW0AGEAnnI\nlG4pxY9EUEgE90KjcHe25l5oFHraGtwIfET8iyQC7j2hV/sGmJvoY26ij5yc7DJIU9My2H/iGkpK\nCvgHPqJn+/qM+nMNAcFPmDOxF6bGelKzJc1gDmDu1Z2ntzYXeddizIx1NKpTgfrenwplqKoo0alF\nLYQCIcOmrOL4uVu42FtgbCi9N9sHBHLcfG6I6P/d9x7asYYK1epgYV34Y4SS5vWrl0SHP6RcJem8\nzl/iRfxTls7+nZuXT9F3+BSate+Fimrhzh+Nzax4EnqPuNhIHMt8XTBFmJ2NWMLgKO2g/m5OF47u\n2YiCgiI+zTsSGnKHPsMmo6yiytbV86lWp2i7VwVFVU0djwrVfgVzCXGy0EFbXXpljtKNGqrGIKf8\n7et+UtydrVm74yRZ2TmM6NuC4VNXsWT6AFwdLBk/pD2errJf3bxMekvv0YtoVMeLzi1rExmbQEZm\nNstnDWbsoDa4Okqv/lmawTwx/CmDu03j/tmVCIt43nQvNIpTFwMZPaD1F69pWLs8gX5L6NOxIb1G\nLaRlnxncfSC9DH+ALIE2ufmU8D68F4CL+/chKPP/8ahQVaaZ7i/in7Jz/WImD+tMbd+WzF65BwdX\nzyLP13f4FI7t20T80+gvXqMZ/ojqwztjcepgke28R9rb7/IKCvQcMoEqNX3Izs5CXUOL3Jwc/A5u\np33P38jMTOdpdLhUbP1CNigpyGEuodTr/0e6AV0gB6rF07Dle2L1Nj/GzFhH9LMXjBnYmmF//MvS\n9UeY+FsHRGIx1bxc0NOR3jlKftwOfsyoP9ew6/AlFBUUCI9+l5k6e0JPXrx8g4GeFsYG0luNSntl\n7r/uMPXSM9h9sehFzz1GLGDTooJ9oDb3qcydk0vp1b4BPcbvolaHmVIr3XuZ/fmbOCEuBiVlVbR1\nZdNQR9bYOLiS+PwZqSnJUp037EEQcyYPZvKwzhgam7N6zyWq1JTOKvdbpWwiBQUSs7K5FyqdFrGy\nOFN/HhdLTMQjrO2cmTS0I1Vr+WJp40Bebi73A29w5uhuqdn6hXSxNtGQWjLce6S65Q6AgjqkRcNP\n3EglL0/Ev1uOIwZuBYWhrqZCRU9HFq09yODuTXCwMcPJzpyald1kurX+HpFIzKwlu5g2ugv/bjnO\n3Em9GT97I43qeqGmooyTnbnUbInFYgaOX4ZvbS+pBfONu89wIiqOCev/oHZ5syLNsXjdIbQ01Ard\nt93Jzpzdd8rg6mjD4mWLCAh+jJamGtbmRkXyAyD4lTEZ/6//ecC18+TkZsu8FEmWPHl0DyUlFSxs\nHL598Te4eeUMy/4eT8C18/i26MzgcbOwcXCVgpf/oaGlg0iUx5WzxyifTzLd+l3rWJ74nDAFBbIz\nM7G2l1zm+v32++kjOylfpZbECa9aOnpEhYdy99YVqtTyoWaD5iyeOYaIsBA0tLQJf3SfitXrSuz3\nL6SLUCiggoMh8lL+/Jd+NBEqgqps5Ei/F/5cuJ3qFV2pVNaR5JR0jp29ReiTWFbNGUrgvXCc7c1x\ntpdeEM2P7Jxczl4J4uHjWN68TSX66QvmrdzHmrnDOHkhkL8n9CIiWroSX2KxmAadJvH0tVBqwfz+\no2jmr9rPhgXf7in9Jd68TWPa/G0s+rN/ocfeCAwl+8k/LBvlxN3Ty2juU5mp/2zDqWZ/5q/az9uU\nwil1iYRqvEr7/G33PW+3v8ejfDWCJaxHP3V4J4M71uXM0d10HziOuav3U7W2r5Q8/Jxm7XsTE/GI\nu7evfnjs9asXjOzVFGVlVWat3MPIKQvZs3m51LawazVsiZmlLWN6+pCelsq6xTM4tHNtkTPUazZo\nzsAxM6jj++4oKSsrgy79RvP8WQwOrp5kZWbw+GGwVHz/hXSwMFRDWVH6iYsCsVgG8hW5aZAgvQYC\npZ3MrGyWrj9C8MNIJg3ryMmLAQSFRKCkqEBKagZpGZk0quNF8MNIRvRtiYON7LqifUzjblMp42TJ\n3Em92X3kMicvBqKno0FFT0faN/OWqq0DftfR09FARUmRsm62KEihGxSAsm1LkkP3oKRYdFnEFr2n\n06djQ5r7VC702KY9pjGoexOa1Pu0F3NYxDNWb/NjzXY/GtXxon8XX+pW//aZ7mtMuRSl9dnjI3o0\nZsSUBVjbSb4KLCmexUTw1/j+LN9eOG33kKCbnD+xjyvnjlGzQXNadu6Pqbm1bJzMh7zcXNrXd2XX\n6RAunDzAtjULmPLP+k92BDIz0+nZtBI7z0hn+z0vN5eIxw8IexCEppYOphY23Lh0ki79Rks8d+Lz\nZxzatY7M9DSGTpjDv/P/wNG1LFFPHtJr6CSZlMH+onDULWcuFanX/49sAjrAq0DILIUizzKgQadJ\nzJ7QEwsTAwZPXM6+NZMAeBIVx7INR5n3R2/CIp7hbGdRLFvs/nceceL8bbq1qcvvszawfv4INDVU\nSUnNQF5eDhVlRanaux38mPuh0UTEPMfUSJeB3RpLZd4arcYyZ2Ivqlcs+lbr/hPX2Lb//IfXpDDc\nfRBJjxHzCTq17KvX7Tp8idXb/Ih++oL+XXwZ1qc5ykr5/43vp9oT/vLTN7K0g0VJ0rtlVf5ZexBd\n/a8fSSTExXDuxH7O++3HwMiUOo3aULdRa4TCkhGE9r94kqWzx1KldmOGjv8732tCgvzZvnYRs5bt\nkNheRnoaSsrKPI2O4PCudQwd/zdBt65QtqJ02ubm5eYiEotITUnmfuAN4N12v4amDkkvE7B1LHpT\nrV9IhrGuCpVdCtf/pKDILrpoWMts6tLGkB5NOXUxkNvBjynj9C4p8LJ/CCfOBzBnUi8U5OUp42hV\nbOfla7b7MW1UF+ysTJg9oScDJyxjzIx15OTmSj2Yr9h0jLEz1uHl6cD0MV1JSHzDvuNXvz3wGwyf\nsor2zbyLHswfRsKRy4wZPr/AiXD/n1lLdjJpWMdvXteheU3O7vqLk9tn8OpNGg0H+ZGTm4+okkCO\n6KTP78pDgwNw9vi+t9vf416hKvf+l+0uzMlBPea/RMKU5NecPbaXCYPbM2VEd4RCITOXbGfWsp3U\nb9KuxIJ5cMB1/pk2nH6jZ3wxmAOUKVuZSjXqs2HZLIlthgTd5MrZY1jaOCAWi3j14rnUgjm8azkq\nJyfH1lXzcPHw4srZY5hZ2rJ8zgSuX/Tj9JFdH649d3yv1Oz+4tvYmX6+QyctZCdfoagLitqQ/UZm\nJkoLLX2rsmH3aYRCIdPHdAXAu3IZvCsX/12wQADJb/871331+i3zp/RFWUlR6k1djp29hZKiAntW\nTWTQhOUsnTmQqaM6k5ommRTkln3neJ2cyrDezYs2QfBjmLCCmGcJnDc3RL0IXaEeR8YRFBLB7n8n\nFHiMnZUJ1Sq4EBIblu+RQ6ZAJ99ytdD7gTi7lS+0j6WRClVq8+DuLWo1bInJhROYbVrG+Or1uRZw\nlYT4p3jXa0r3geNw8fAqaVf5P/bOOjzKq+nD92rcXZFAggZ3d4q7S3GX4i4tUFyDQ7HiUNzd3SFA\nIEDc3ZOV74+88FGaQPbZQALkvq5cpew+c2bD7s5z5sz8BmCTxxzevnrGjtOPkcm+fLPbslMfFs0Y\nwZWzR6hRv7ngdctXrcOuv5ax/+81BAf4oVCksWXVXKQyGS079sHQ2FSw7feIxRL6DJ/G0X2bqd+s\nPVtXz6dRy86Ur1qXNYumUjutNcf3b8PS+uvsFvP4L2aGcixN9L6a/a+7ZTT8NqpRuYHF0/tl60Qy\nTUhJTWP+qn3MW7UPtRraNqnGr78tZuysjQSHRmFnbZ7twTwyOg61Ws2tBy+xNDdm1ZzBbNhxCgBD\nA+Fv2Oev/PjTYw9bl2lxlvjEm7j4RJKS08inqwN+oRqbmLVsF1NGfHl3/ik7D12g+y8Z9/KHJmf8\nbxAZHkql6ppV3+dWbB2cuHTqH+ZPGUKj+ZPoGBFGslzGwDGz2HbsHv1HzcwVwTw0yJ+h3RpibmnN\n78u2ZymYv2f0jGXs3LCEQP93WvnQqfcIKlSty/jZq9i6eh4qlYqWHfuwb9vqD89JTtZuPKq+gSEd\neg4lOSkRz0d3cC9XlYT4WGIiw3n++B6P7lwlwPcNYcEBWq2TR9Yo+BV35/A1z9ABUEHwZVBm/8ze\n3MjOg5do/UuVTM9PvxbTFv5Nj3Z1mbdyH8ZG+iya1pfYuETEYpFWwTUzlEoVXYbOZ8aorni+8uXB\nU29mjeuRLbYNCrch7PHOD7KsQlB7B/Dgl+FYGBiRr2pRWDoaTbRU/YPCqdJiNH53tmi2rlqNxLk5\nKr+jGT5+KcSN6KR/30OnpKqZ8VsvmtSvQI3Wmc90z40kJsTz+sUTvF8+wfvlU0KC/IgMC6Fk2cpU\nrN6AspVrsXrBZMpWrk2thi1z2t0P+L3zZvakYUyZsxxHgap8iQnx9G1TlR2ntK8eV6tUbFwxiyZt\nunP68C6UCgV9Rkxlk8dsylSqpXUqXqlQsGvTMpq378WODUtISU6iQfOOnDy4nZFTFxEaFMDZY3vo\n1n+M1q8lj8zR15FSr5wj4q9YlPiVAzoQ9w5iPb/qEj87KalpzFmxmy6tajNzyQ46Nq9Jy0aVs82+\nb0AYwWFRVCztyoXrj6lT1Z34hCS6j1jEgim9eesbQq0qJbUe5FKr7Xj+GNedmpVKaGVn/qp9JPqH\nMqN9XSjuAhpWyA+auJJSxQpoXNy34+BFjp29w3aPsf95TCkx5Kj3v9s5w6Pg2JVEQgOCaNOiIC4O\nubP6WKVSEhYcQER4KF7PHnwI4jFRERQqUhIXt5K4uJWgkFtJbB3/LSx1+cxh7l4/z6jpWZtZ/y1Y\n6nEBXXN3mtU3x9Fa+O/8yf0b7NnswR/Lt2vt075tqylc1B0rWwf09Q05sGMtRd3LZ5uIzqecO7aP\nSjXqY2hsyuoFU2jatgd6+gbo6OljbPIV5I7zoER+C1wcjL/qGl8/oKsVEHwJVClfdZmfhdQ0BXNW\n7GZUv9ZMW/g3aQoFM0d3Y/ycTTSsWYbgsCj6dWms1Q73U9IUCu4+eo2ujoyX3gF4vQlg2m/p08mu\n3fVk3qReWq8xauZ6nOyt+K1fK63shIRFU6rhEIIfCPuSjYyOo3D1fkQ83aXxtZm1uAFE4sCVd//+\nMN97LuLuw0hSU1MoUdSOOhWz9lF8+vAuj25fQt/QCH0DQ/QNjP73Y4iegSEGBkboGRiib2CYYaGZ\nWqUiJSWZlOSk9J+UJNLS0ogMCyY0OICwkEDCPvpvdGQ4VrYOlCpfFX0Dow9B3M7xy6qQCfGx9G9X\nk+0nH2bptX1t1Go4f0fE7VvPad7QiRJu2mmRH9ixjtjoSHoOnqC1b3evX6BMxRpsXTOPou7lUavU\nPHt0m+KlK301waHj/2xDV0+fWg1bERMVzpE9m6hWtymFipT8Kuv9rOjIJdQv55TtynCf8vVnOomk\nYOiSt0vPJuQyKXbW5rTpN5sDG6YQG5/IiGlrWfb7AK7d8WRIz2ZIs3lKm39gRLre++ajjB/SjjSF\ngj5jliGTSlg5e7DW9nccvEhIWDSLp/fT2lbPkYvYslT4+fvs5buZPLyjxtfFxSdx+dbTTKfABcT+\n9+jDwUbFlcRY9I3McLLLWjCPiRdx6KIMe0NbFNF+BAf4kpgQ97+feJIS4klIiCMpIZ7EhHhkcjmm\n1q6oVZAQ/ZaUlCSUSiU6Orro6Oql/+joYWPvCIiwtnXAysYeF9fiWNnYY2Xr8MUWtM9hYGiMY/5C\nvHx6H7dcUPgnEkGNsmok8Qkc/Gs4JeZt1Mpe6y79WTBtGNfOH6Na3aZa2SpftQ4P71ylqHt5dPUM\n2LN5BX1HTOPRnasE+r39KpPsKlSrh46uHgumDsXK1oGSZStz5eyRvICezbg6mHz1YA7fIqADGDpB\nwhtQfvt5yT8SOw5e5NodT3p3bMi1O5488/KhctkiGBroYm5qlK1p9vcEBEcwf/U+lv8xgCrlitB7\n9BKm/9aVpvUqYGigp3Ur3o37L1iy7iB3jmufkt158BLmZkY0qiUscCSnpLJqyzGSvA9ovvahS3Ru\nWSvjB8VSfKL+m/a3NRfx4twQJs5dTz6nrKXiZOJkwt4cZ/SCiehmIQkTEZXMziMxqFHT4RcDLEx1\nkcqyX9Dic5SrUpt7Ny7mioAOIJdC7brluHNBj2sXjlOtjna6CWN/X8FvvZphY+dEoaLu+L17hVql\nxrmgq8a23p+X79niwbg/VnL26B78fF5TqVYjUpKT0NHN3poYKxt7/N+9xs4pP936jWbm6F/pO3J6\ntq7xs6OnIyWf7ddNtb/n6zdGQ/rQFkPt9Z1/Zm4/9CIqOp6FU/vyp8cepo/qysQ/NzN/1T7cXBwF\nTyD7EhZmRvj4h/LitT96unI2LBhBWEQM5qZGWp+Zq9Vqev22hKq1s2fUoybDVzJCaGU7wI4DF+nS\nunaGjyVhhjKDDXhkeAipiRHkc7bL8jrREYGkhp3NUjAH0NXVBbEakRgMDY2+eTCH/w/ouY0RUxay\nbFb2FIKNn+XB3Il9uXHxJDs2LOHQ7g0kJSYItlencRv2bVtFkzbdadyyCy+f3mfOhP6EBvlni78f\n45i/EBWr12fOxP7UbdIWAwMjFk4fziaPOZw+rPnRUx7/prCDCZJvsDuHbxXQAQwcQKr/zZb7kdh/\n/BoxsQlExyagpyunf9fG3HrwgrXzhtGgZhlG9W+d7Wu+fhfIyOnr+NNjD3+vGMMfS3fi7ROEgb6u\n1v31arWa5X8dZsn6gzw4tZxl47Q/H+w3djmr/hwsWHI2Ojae05cfCEq3B4VG4vUmgFqVM05ThiRn\nfE4rRL89PDRYo75hAz0wTzuKedpRvkLDQ5ZwcS1BeFgQMVEROeNAJsh1dOk9bDJrFk7V2paNnTN1\nmnRk/9+rGfv7Cho068S5Y3sF27Oysad1l/4E+L0lONCXAB9vJs1dx86NS0lNyf5MZ9GS5Rj7uwe1\nG7Vm77aV2Ng5UrF6PfzevUatVvP4rnYa/T8r+rpSnG2/7iTNj/l2AV0kBkPNU1A/O9v2n+edXwgN\napYhIiqWqQu2se/YNepWK4VrQQfKlHD5Kuuu+OsIv4/pRlBIFKlpCjYuHElAsPAvZKVS9WGQicfm\no1QuW4TX74LoPGQ+wWFRWvl69fYzXnj707ez8BuDPYevo5YKS4vtPHiJzq0ySbcDbyN0M/z7F0/u\nU6SkZmno8NBALK01mwUgVicgVgvfLWYH5arU4d6NC9lu99LpQ7x84YXQ0t7Grbry9pUnL5890MqP\n3ZtXkL9QEbr2G82ahdPYs8WDwkXdtbJpYWWLta0DYSGBdBswFjVqEhPikUi/TpZFVy99wyURS+jY\newThIUEkJyWwZ/MKLp89zJ7NK/jaNdQ/Gq6Opki+oXb+tzlDf4+BHSR4Q1rcN132e2Tb/vNIJGJK\nFSvArGXpaa/F0/vhFxiGtaWpVsNKMuN9wNbVkRMbn8i0hX8zZ0JPdh++TLP6FbVqJwuLjOH2Ay/K\nlChI5bJu+AaE0aVVLW4/9OL0pfv0aFdPsO2eIxdzZpd2cpxj/txN8N1Vgq7dcfAia+cOy/AxpdiI\n2JSMP9Avnt6jpoZqY+GhQVhaZz1FD+kZEbEAtbzspFyV2lw/f5y6TdppbUulUnJkz2aO7ttMgeL1\n4YUrLeVQvKAweyOmLGTWuL6s2nlOsE+deo/48Od8Lm6IxZJsmW1vYmaRLgyTnMiKOePpNmA0Ny6e\n4OGdq5SpWEPrQryMaN11AH8tn5Wefjcy5vWLJwydMJfEhHh833jh4FwwR45uvjcM9WQ4WWevoNeX\n+MafchEYCRNy+NFRKJQsWX8QgGdePoSGR9OlVW3cixagab2KrNycLlbiZG/1VYK5UqnitxnrmLVs\nF8ZGeozs24p3/iH86bEHA31d8jlaa2Xf1sqMBjXLMGX+NqJjEoiLT+LUpfu8eO2vVTD/Y+lOurap\nQ0Fn4fKVSzccok/7SoJa/V69DSQ2LpFy7hm/r6OVGStDKZVK3rx8SuFiX57Q9jHhIUFY2mgW0HMD\n2XGOHuj/jnWLp9OudhEiw4OZ47GLoWNnYGyQyvP7ZwTbtXcqQNXajf+l0KYN5pY2mJpbcubIbq3O\n0T/G940XnXoPJyw4AN83XgydMBcf75dEhGb/ACxLazsGjvmD/IWKEuD7ho69hgMgl6d/PtYtmUF8\nXEy2r/uj4epo8lVFZDLi2+7QAfTsQP4GUvPeEO9JUyiQSaX0aFePXYcuU7SwE4lJ6X37SqWK4m7O\nvH4b9FV9kEjEjOjTkmUbD/HSO4BSxQqwd81EEJFto1D1dOVsWvwb0xZuw8bKjGb1K1KscMYyqVnB\nNyCMDTtP4XNrs1Z+zVq2k5eX1wu69kvpdr/YzNLt9ygiYP55eGgQlWt+fzKxurr6uBQpwbOHtyle\nuqJG1z64dZkjezcT7P+OZh168c/lVx89qqZrKwd+69WPdu2E/166DRhL71ZVqPtLG63a9CB92El4\naBD1mrRn119L6TVU80l/n+JarPT/bO+nw6/p2aDw0CCkMtlXqX6H9ADeslNfAJ4+uMnZo3sxNDah\nQOGiPH98lwrVhN+I/+gY6ctwtP52Z+fvyZk8nFFexfvHNO85k7//uYCFmRHX73qiUCiJiUtk3Oy/\nGDJ5FSZGBnRqWfOr+rB43QF0dGRsWvwbvy/ZwejfN3DxxhOtg3l0bPoOZeKfm+k3djk+/qHMGteD\nkkXyU6mMG0aGwr+ItO05B1j79wnaNa2OhZmwD9/OQxfp3LJ2xg+KZfhGZ/z7EzqQRcgZem5Bk116\nbEwUF078w+DO9Ti85y+atevBql3nadKm+3+ea2ZhSfmqdTl7dI9W/mVH1XtSYgJP7t+kfrMOHN2/\nhcSEeK3sfUqjll3Y5DGHRTNGUKZSTe7fusTs8f0ICfLL1nU+JdDvLdXrNaVtt4GcP76PUuWrfdX1\nvnfcnEzJCd3Hb79DB9C1Tp/GlhqZI8vnNoq5OnP49E1KFy/Igql96Dp0AevmD0OpVGFqYpBtO+TM\nuHTzCbbWZpR3T7/R2uExjsjoOKwttZv4pFKpGTFtLRVKFaZq+aJUr1icoZNX079bY2pX0U64YvOe\ns+R3stHazuzlu7l2cIGga89de4hU15QihRwzfDxRbYpanfHH+vnjuzRu1UXjNYWeoYu+ceovI8pV\nrsPi30fSY9C4DB+Pi4ni2vnjXD1/DN83L2naridT5m/IkqBK+55DmDa8G/WbdRDsX6ny1Th/Yj+X\nTh2kViNhioV6+gbYOxXg2oXj+L19RfcBY3nl+Qi/d6+ypX7A1sGZweNmo1QquXzmEAG+b5iyYCMr\n5oxj1PSlX+3fuUHzTly/eIJZY/syctoi5DoZZ57yAGNDOfaW3/bs/D05Vylj/HPv0lduPkqnwfPw\nDQijVuWSdGheg3Gz/iI1VcHCqX146xuClYXJVw3ma7YdZ/qiv4lPSCYqOn0nERuXyPHzd7UO5gBi\nsYg5E3riFxTOjXsvMDMxZOuy0R/WEoparab36KVsWvybVna27jtHnaruONlbabg+nHtmwr4HbrRo\nnnkACclkuhoI26EnJSagVqnQN/z2qbzsIJ+LG/GxMUSE/f+5b3xsNCcPbmfaiK4M6tqS23df0qn3\ncLYeu0fHXsOzrI5mY+eEW4kyXD5zWCsfR05eyNLZ/96la1rZ3b7nENQqNcMmzuPV80ecOryTxIT4\nf80g15b42Oj06vf+Y/735wBOHdqBj/fLbFvjY0QiEdXqNGH2yl045f+5v7u/RMn85jmyO4ecDOg6\nFqCrfRXo90rjOuWIjI5j7d8neOblw837L5k9vgdj/thAfiebTIussovVW49Rwi0fySlpbNx5ipfe\n/gydsprxczZRrUIxre2fufyAwZNWcfLCPeZN6kUxV2eGTV2DSq2iVeMqWtlu2fsPunXrprWPQmVe\n773TY98tSx77GBAqb01UQsY3XW8i/1tkJ1KpMN28gt8kUow1PPf8ntPt72nRsQ+7Vk3n1KEdTBvR\njYGd6vLu9Qva9RjK4g07CHh9kxJlhCketu85hL1bVmrln0gsZvrCTUzo24Sw4AAWTB3K4d1/aWyn\nRcfePH9yF4ChE+bSrP2vvH3lmW3FZO+r3yPDQ1i3eAYTZq+hUYvOHNixLlvsZ8b71rY8MsbeUv+r\nzjv/EjmTcn+PSTFIuYLgJtLvGJd8dgzu0ZS7j1/RpG4FHnm+pUwJFxZN6/tN1m/VuApXbj2jTlV3\nbCxNSUpOZczANtlWQd+gZhnOX3vEtbuedGldm7ZNqlHQ2YaExBRMjYW97W7ef8HGnadpVr8i3dDp\nzLUAACAASURBVNrU0cq/vUevUqpYAVwLOmh8bXySnLiEJHTkMqRiGQkpYsw+0Y5RSIyJz6BdzerW\nZRyO7aWbSknchRP4a5DaFVzhrlani5jnELHRkTx9cItnj25z/+ZFjIzNEOt70q77YNzLV/3Xc83M\njQX15wM45S+Mg3NBbl4+pdWUMtfiZSjsXpWpI7oyc+k2ju/fRlhwAFa2mr1XPvbB++VTDI1MMDTK\n3nnYYcEBDBo7CxMzC3asX0yV2o2z1X4eWUcsFlEsn0XO+pCjq0sNQT/7Bw58L7RqXIU0hZLAkAh6\ntk+vGP0a88vTFAqOnLlFapqCUTPX03v0UsIjY4mIiuX5Kz/8AsOYPLxjtgXzR55v6T9uBc4OVgzv\n3YKuQ+czbOpqCjjbYmosfLrVheuP8Zg9iOiYeMbN/uuDUI0QZi/fxeThwmReqxSOIyHiKVbmetQp\nHoOjeep/nhOlyFikJsXShsSkJCRiSNbwLDwiLBgLK+Hted+KiLBgrpw9wuoFUxjatQFDuzXk6vmj\n2DvmZ/zs1cxf9w+Dxs76TzAHqNmgJZfPHBK8tra7dKVSyeKZI3AtVorOvUfi4/2Sjr8OI9D/nWCb\narWaf7avpUaD5hzatZFNHnNQq9WcPLgdlUop2C6AW4mymJhZsGeLB3ZO+SnqXp71S2awyWM2cTHa\nCTbloRmFHIwx0M3ZPXLOrg5g4gLJgT/t4JbZ43pw/Pzdr7qGTCrlkedb9hy5wqRhHcnnaE3PkYvZ\ntHgkdx690kphLSM8Nh1hzdyh7D5ymSNnbrFr9QQUCqVWI1037DzFuauP6Nq6DuMGt+PV20DUCMvs\nHD17Gyd7K0oVE3YzqSNTcX73AHxubcHUOOMUpF9Mxn8fU7goa4qWpEXbnhiUqaTRukIK4mTxcbR7\neBuxRIKsbU/SNDh/lyQlIktOJNks86OxiLBgAnze4O/rzVuvZzx5cBOpYSEsnBtQpHhHhrfsh6vr\nl8esvqdm/eYM7FSX/qNmZvmaj3FxK4GJqQX3b12ibKXM2wkzQyKRMHHOWiT/q115dPca+oZGlCpf\njeSkREEp5/jYaBLiY7ly9ihVazfG3MqW3ZuW06JjnwzH2wqhUYvOmJhZMG/KYHoNmYS+oRF7t3hk\nS8tcHl9GVy6hsEPOz5HP+YAukoFREYjOHfOSvzVSqYQWDTX7YhfClBGdmPjnZi7eeMygHk2pU9Wd\n1++CqFNVO3lKgKTkVP702INLPjt6tq9HaEQ0SpWKLq1qM3CCB3KZVKtBLolJKURGxbFp8Ugmz9tK\njUrF6ddFeGpx9vLdLJkhfFTrsXN3qFGxeKbBXC2W4x+dcfIrLiaK456P6LxA82CjVquRpmomv+t8\nbC/6/u9ALCLx2F68O/bO6mIUX/knxu9ecWXBJvyC/PD38cbf15sAH28CfN/g7+ONgaExDs4Fcczn\nQlH3CtRuNYInPg68eemJWr8IzwNEuLiARJK1my9DY1MKF3Xnwa3LlKkkrFWzfc8hbF0zX1BABz4E\nc0ivfA/0f0d0RBgqlVLQ+b6RiRkzFm8BwNvrKasXTKbP8KnoG2RfJbSJmQUpyUlY2zpgbeeI37tX\ngAi1Wk1aakpeVfpXplg+M6SSnO8kyfmADmBgD4m+eW1sX4GExGTmrNhDXHwi44e0Z/G6AwwYv4LC\nBRwE71A/RqlUMXTKaob1as6abccp516IcYPa0a7/HBxsLWhUW3PxlE/ZsPMUz7x8sbexYOuy0Vy/\n+1ywrXNXH2Kgr0vlskUE2/iSmEwipqgzqXMV2n8OEJ8sp1y5hhpdk2ZkjFgiIS0lkTRjDc5vRSK8\nS5bj/qPbTGrsjkM+FxzzueDo7ELZyrVp3qE3jvlc/rNjvf9CDOr04qnkpATEYiMiYlRYm2d96Rr1\nm3Pl7BHBAb2oe3nEYgnPHt6ieGnhN8uKtDQO7FhHdGQYtRu1xt5Zu89LRGgwZ47s5rdpS5CIJfy9\ndgHteg5BVzd7Cs10dPUwNbdi/ZIZxMZEMXD0H6xeMBmZXIfuA8bmFbR9JcyN5DjlgIhMRojUuUVt\nPy0GQq+DwDRqHhkze/luendqwJptx/mlTnkqlnbjxIW7NK1XIVvsv/T2Z8jk1WxbPpq5HnuJT0wm\nKTmFiqXdGNj9F3R15FrZT01TIJdJOXP5Aeu2n2T6qC6UcMt6CvdT6naYyNSRnbXKTIidmqH0PZJp\nz693ckGeBmd8vLBtzXz0DY1p222gRmsmpapZsfEN1SvoU7V81tPuIqWSoMXTEIvE2Pw2A7Uk6yne\nd6+fs2jmSFZsO5Xla16+E/HghYjIiFBQqTGzsqZ5TTWGGsQSpUJBh/rF2H/RK+sXfcLDO1c5uGMd\nM5ZsFXS9UqFg6azRNGjeEc9Hd3j++C7V6jalYQthdRcfExUZxoYlMylephJB/j506DkEI5PsS9cq\nlUrEYjEbls6kRJnKFC9dka1r5jN0wtxsWyOP/6emux1mRrkjA5KzRXEfIzMBfeEyoHlkTJpCwfxV\n+2hWvyJ6ujrsPHQx24I5gJuLI2vnDaXToHmYmxqxceEIdniMY0SfFloHc4B/jl9n6JTVVCzjyqbF\nI0lO+W8BWla5cvspUplUq2C+69BlOrao8RkBDxFvIjN/3UJGpgLoykS8vv47xQtrthNQSyScN7Xg\nopWNRsEc0jW9oyLCNLrGxUmNnSXo6RmQlBhHKVc0CuaQnvKuVKMB1y+c0OzCjyhdoToqlZIXT+4L\nul4ilTJ80gJOH95F2cq1mLl0G0qlgjdezwT7BKBWqdixfjF9R06jSZvuGJmY8uaVp1Y2P0UikfDw\n9hXKVKpFldqNiYuNRiLJHcnYHw1Ha4NcE8whNwV0AJPCINY+CPzsvPMLodeoJUxf9Dcj+7YiIDiC\nXYcus/folcxlSrXAJZ8dR7fM4JmXD7sPXwbINsWqTi1rMvTX5nQcOJfLt55+ULPTFK83ASxY/Q/m\nttqJYnxW6hVIkxiTmJr5axfakpWUGE986ANMTL6dApWhsSlpqSmkJCdl+RqpBGqVV9G2oYS7/3Sm\nWEFhGbca9Vtw5ax2IjFNWndn09LJgivJZXI5Y2Yux7VYad69fs7ju9ewsXfSyieRWMyQ8X9iam7F\nns0rSEpMID4uhgPb12pl91PKVKpJ+ap1CPR7y/b1i/h1yEQiw0NYv2QG8bHR2brWz4pEIqKYc862\nqX1K7rptE8vByA1inuS0J98tAcERLF53gPXzh3Pq0n2mzN/K7tUTSFMotSpM+xJGhnrsWjWBG/eE\nn29/Sq9RS+jeti51q5Wie7u6WJgJm1d+/e5znr/yY/H0vly68RSFQolUqnl1cUJiMueuPuLQX9My\nfU5UWubn1F6eDylUpKSgyuaIsCAsrL79lDULK1siwoKzrNj2HmNDOfaONni/fIqLm+Zjd6vUasTi\nGSNIS0tFJhN2k1+qQnXu37nCnxMHIpXJqFC1riD51SN7NxEVHsaIqYuy7bz79tWz5C9UlIrV6xMZ\nHsKjO9eyxe6nvHv9gv6/zWTLqrkYGBrRolMf9m9fS89B47/Kej8TRZxN0dPJni6F7CJ37dABDB1B\nnr3iCz8LCoUSESLe+Abz6m0gTetVoF710tx+6PVVg/l7xGKR1ipzcfFJeGw6gkqlZv384dx68JKe\nIxdz4fpjKpVxE2Tz6NnbFCpgx4xFO4iKiRfcJrjz0CU6t/x85bRvTOateUJ355BzY1Mtre0IDxE2\n6a9IyXK8eHJP8No1GrTgihZSrtvWLqB2w1ZMnree8bNWEeD7hqiIUI3tNGrZha79R7N55Z/MmzyI\nNQunkpwkXAMBoFKNBlSsXp+Xzx6wcdkfNO/Ym8tnDhMVqdkRx5eoWucXQgJ9cS7oSttug1i/ZCaO\nzi7ZusbPiKmhHBc77eWxs5vcF9ARpSvI5aExgSGReGw+wu7VE5ixeDvePkG0blxFcCDMCYwM9ahR\nqTiDJnpw+MwtJg7twMaFI1g/f7hgm0N+bcb1u8/xmD2IpOQUwdX9Ow5cpEvr2pk+rhbrEBCT+Y3T\n8yd3KVqyvKC1hfSgZweWNvaEhwYKurZoyXI81yKg12zQQittdpVKRbFS/18vUqp8dbxfPtXYjlyu\nw81LJyleqiIOzgVp0rYH184fF+zXe9RqNU8f3KJtt0FsX7sQEzMLdm5YQmpqita2P8atRFnEIjFr\nl0zHKX8h6vzSmsUzR7Ju8fQ88RkBiEQiSrlY5aT4YqbkwoAOyM1AX3NJzp+V5JRUgsOicHawIig0\nErlcyoYFIwgI1qxnOTegVqs5fPoWa+YOJTQ8mj5jlhEZHSf4TH734cus/fsEXVrVRiaVUMzVmXyO\n1hrbCQ6L4vkrv88W1CWoP3/HrtUOPacCurUd4aE5s0MvXaE6b7yeESsw6OgZGBIdGf7h/wsVKUkZ\ngb3pegaGGBgZ416+OltW/Un+wsLbHt8jEolo220gZ4/tYcSUhZQqXw1zSxuiNSxEzAqNW3elXpP2\ntO859H9KwCK6DRir9TCbn5FCDsaYGubOWq/cGdABTIqCJPdUD+ZW0hQKNu0+y/xV+xg+dQ2uBR04\nePImRoZ61Kyk+dllTnPp5lNOX35AZHQ8A7s3YcaoLiQlC6tsv/PIi6iYeEyNDVCr1Vy/+5y2TYTN\ncd7xhd5zgODEzGVtQ4P8kcnlmFlofjMBOTeYRZuAbmlthxo1EaHBX35yJmiTdm/bdQAnD24nPCSQ\n6Mhw7lw7R4CPtyBbZSrW5NGdazjld2HgmFnkL1gERVqaIFufUtS9POeO7eXgzvXERkci19Fl11/L\nssX2x7iXq8K188fwevaAgq4lCPDxpmm7ntm+zo+MoZ4MN6ecV4TLjNwb0MVyMP3+AtK3RKFQMnX+\nNmpWLs7i6f34fWx3pBIJe49eyWnXNEahUDJr2S6Onr3NnPE9GDJ5FQdO3sDJ3krQjhogODQKS3Nj\nYuISsLIw4fItzdOtkJ412HXoEsnSz+2QRXhHZH5+LrRd7T05doZuI/wMHaBoyfIfpo4JoWGLThzf\nu0HjEaaQXqVfp3Fr/vKYzd4tHhQrVYFzx/cK8kMkEtFr6CTMLKy5f/MiS2eNZtX8SdkyrrRG/eYU\nLlaKIiXKUbtxa9YsnIqljT1bV8/X2vanNGjeEc/Hd3nj9RRzS5tst/+j417QAok4F+ba/0fuDegA\nutagr12byI+MVCpBLBZz7U56ZbmpsQFjB7XF2tKU1DRFDnunGRt3nab1L1XQ19OhaGFnxg1qi7mp\ndi1aTetV5MzlBzx/5cfACR4M7N5EkB0f/1Bmj+uBx8SmmT4nTWJK8md+5S+e3KOINgE9x1Luws/Q\nAYqUKMuLp8J6wQGc8xdm6OQlHN+/lSnDunDptGaDW6RSOflditBj0Hi2rJ6ntQRqRGgw/u+8GT1j\nGUMmzOXCyX+0svcet+JlsLCy4fKZw4yZuZz6TdsTGR6iUctgVmnbbSC/TVuChXXuH/STm3C2McTK\nNOdGo2aF3NW2lhGmRSAlHJTZ/8b+XolPSGLeqn0kJqUweXhH5q7cy+HTtz5owtetVuqbVLVnJ/EJ\nSVy8/oQSbvkICo3k4bM39O6kmczpx3j7BBEbl8jaecNISk5FRy5DLODO+taDl+w+fJkHT71Zsv4g\nv3aoT4fmNf7zvIi0zwu+PH9yj0YtO2u8/nu+xzN0SE8nCw16Xp4PObhzPfoGRhR0LY6NvaPGcrAW\n1rZY2zkybkAbmrfvRb0m7Xj59D5JiQmUrvjff8fPcfrwTspXrYtILCIsJJCDO9cjFktISUpCR0/7\nL3orWwf6jpiGUqlkk8ccipeuiI5u7g4gPws6cgnF8+eunvOMyN07dEgf3mKWl3qPT0jiwdP0878/\nPfYyuGdTBnT7hT5jljF/cm8kkv//p2zzy3/HUuZmUtMUDOzehMu3nnLq0n027jxN93Z1tbLpsekI\nJYvkB9KHuwjlxIW7TBrWkWb1KzKqf2sszDIO3D5RmafbU5KTCPJ/R/5CRQX5EB8Xg0wmz5Evd30D\nQ9RqNUmJCYKud3Ergc+bl4LOm+0d8/PbtCXUatiSsOAABo+dg7EAidQqtRqzZNNRqtZpwv7ta1k+\nZxxSmeajgstUqsXeLSsxMjZj4fThlK9Wl8jwEDYs/53t6xdpbC8zju7dRMXq9WjQvCOBfm+5e/1C\nttnOQxjuBcyRS3N/uMz9HgLoWP3UsrD+QeGMmL6O+IT0EbMKpZLomARcCzrgWtCBqJj4bJVz/VZ4\nevmy58gVZi/fhYG+LrtXT2D9/OEsndkfmVR4hkGtVhMdm/ChMn7l5qPEJwjL8PTu2BCRSMSTF+/Y\nf/waBZz/m6ZUi3UJjvtMu9rju1SsIKxdDXJud/4ebdPuLTr04fCm2RpfZ2hsikwm5/ThXajVarat\nXcC6xdO5deWMRnZ0dPXwffuK1QsmU6ZSDaYu+EvQmbyVjT3tew6hZNkqzF29lztXztJn+BSGjP8T\nmVxHcDX+p7Ts1Bdbh3xs8phNTFQEfm+98H0jXNc+D+2ws9DD3vLbKTRqw/eTlzV1g5SwnzL1vmD1\nfpb/PgAD/fTzv4lDO9B/3HIKOtuiI5dh9g3lQLOTIoWcmL18NxKJmIioOCzMjHj1NgA3F0fBNlPT\nFAybsppeHRvStv9sHGwtcMlnh7GR5gpfD556s2bbcSqUdmVE35aIEFEwg4Ae/4V2NURiSlRuoPH6\n78mpgrj3vC+Mc8ovTDbXwtoKkBIS5IeNneY1MSOnLOLhnatcv3ic5KQkQZmK5MREKtVogItrerbP\n1kHYBsHc0uZDMZmRiRkqlYpXzx/z5uUzDI3SlQyTEhPQ08+84yErHN69kSZtunP72jmSEhMIDfbH\nuaCrVjbz0By5TELJglY57UaW+X4CukgGZiUh/HZOe/LNiYj6dx92RFQsE4Z0wCW/LSZG2n1x5CQX\nrj9ieJ8WWJobM3zqGmQyCX07N9IqoMtlUjq1rMXRs7c4sGEKScmp6Otlng7/HAdP3WDx9H5cu+OJ\nx6ajjOzbMsPnBSVmfrMQGxPFG68nmJpZEhLoi4295oEkp1rW3qPNOfqNiye5feU8xUtX5MieTVhY\n2tC664AsXx8TFcHqBVMoXaE6PQdPFJRyByhSsiwxUfnSz753rEOhUNCux2CsbIT/Xlt37c++ravQ\n0dFj+KT5JCcmsvOvZdjaO2ndDlavSXvOHttLakoyarWaAoWKsXH5LBq26Cj4xioPzSntYoGePHfJ\nu36O7yegA+hYgn4+SPTJaU++KX06N6Tv2GVsXjIKiVjM0g2HmDSsw3cdzFUqNQdP3WTFH+ljRP9a\nPBKFQvkhCyEEH/9Qzl97lF7ln6pg8boDjB7QRpCtNIWChMQUXrz2p2GtsjSslYkgjEjMm8+0q508\nuJ3yVeoQHxfL+RP/4F6uisYzuuNiohCn5pyiV4HCRXl+5wwNmnfU6Dq1SsW1C8eZsXgLInH66d6W\n1fM00mc3MbNgwpzVpKWlcu/GBaRSOeWr1tH4NUB6Cn/B1KH0HzUDQyMTdmxYwq9DJgqyBaCrq0+3\n/mMAuH7hBNcvnqB9jyHZspN2LuhKLUkrvDwfUrN+C04d3knVOr9w6tBOug8Ym1cs9w3IZ2uIncX3\n9R37fZyhf4ypG0izZ0DC90Kdqu70aFePLkPmM2DCCnp1aICdtXlOu6UVKpWKsIiYD2eZU+Zv1SqY\nAxgb6VPM1RmRCMq5F+KdfyjHzt0RZGv11uNUKuPGyYv36DxkXqY97KkiE1I+066Wr6AraakpuJer\nQuc+IzUO5gAVqzegRc9xGl/3Hh09fULfPhZ8fdlKtWnZc6zG14nEYswsrD8Ec4C01BSUSs1aKlOS\nk1g4bRhpqanEx0Vz8uB2jX0BSEtLwTG/C+aWNkRFhJKcnCjoLP1T/l63kLjYKEzNLTm8ZyNLZ40m\nNSUZpUK71lHHfC7UqN+cv9ctpEqtRty7fp5Wnftp7W8eX8ZQT0aJApY57YbGiNTZ8Y7+1qREQPit\nnPYiD4EcP3+Hd36hmJoYsPfoVSzNjGnfrHrmu+As8PyVHwvX/kN590L07tQQHbmMxKQUfl+yg7mT\nemlsb/CkVUz/rQs2Vunn40nJqejp/ndXGaR05rZfxnfxyUmJLJ8zFnunAoSHBGFt50iXvr9p5EdE\nWDA7Ny4lIiwYA0NjfmndjeKlK2b5em+vpwT4vKF46YpYWGnWd5ycnMjl04cIDwkiPDSIlOQkLKxt\n6T1sSpZt7Nm8Ah1dPSyt7bh/6xK29vlo33OIRn54v3yK37tX1G7UmpTkJHZsWEyvoZM1svGekwe3\n8/zxXaQyGYZGpoQG+zN+1ipBtt6jVqs5c2QXljb2lK1Ui8f3bvDi6T0CfLwZPnkhEg3n0H/KpVMH\n8fJ8iFQmp9fQSVrZyuPLiEUiapS0x9Qod8q7fo7vM6ADxLyEeGEyjnnkHNfueHL38Sv8AsN5/sqP\nwT2b8EudCoJ6xD9m7sq9/NavFVduPWPDzlMM792CquWLkpKaho5c8xalAydvcPDkDUyM9OndqSGl\nixfM8Hk3ItwIjcs40RUTFcH9W5eo0zg97a9WqzXWpN+7ZSV1f2nL1fNHsbCyxTF/IfK7ZF1HPCoy\njE0rZlO7USvkOrpY2zpibZe1GoX4uBg2LP2dDr8OxdLaTrAoy9MHNwkLCcTFrQTGJuaYmmu281Eq\nlayYMw4zS2sCfd/Qtf8YnAsIP0c+d2wfL589oHGrLqSmpPDO+zmNW3UVbA/g5uVTiERiHJwLsnnl\nn/9rO+tEclKi1gVykD2FdnlkjWL5zSjskPsmqWWF7+sM/WNMXCE1ClIjc9qTPDQgJDyaTi1qsePg\nRdo3q865qw9pWi/rO86M8A8K597j11y/+5z6NUpTv0ZpFAolgKBgvmXvOaqUK0LrxlUIj4zFLzDj\nYRkqiV6mwRwgyN+Ha+eP8+zhbVyLlaJqnSYYGmk2GlhXXx8dXV2CAnwAESZmmolbyOU6VKnVmIT4\nOOJiotEzMMxyQDc0MsHAyFjjWegfo1QoeHjnKpFhIVw5c4SCrsXoNkCz9L1EImH45PnEREUglcm5\neekUSYnxuBUvI8inOr+0pl7T9Lnono/uEBYcIMjOx1Su2YidG5dy+cxhhk6Yi4mpOW+8nuHl+ZDG\nrboKHi70nrxg/m2wNNGl0HcazOF73qFDegtb6DVQCRvekUfO4OMfypT5W9HRkfHnhF+xstAsyH3K\n1AXb6NGuHvuPX+PpCx/+GNudAs7CdaoTEpMZOMGDYb1bULF05gVOMdhx8V3mH/5bV05jY++Mg1NB\nXr98goNzQcFV2s8e3iY8JJBajVppdF1iQjybV84hKTEBc0sbeg4ej1ic9RTwstljkEikdO03ins3\nL1G/aXtNXScqMgwz8/TWn11/LaNd98EaC7tEhoewbc0C5Dq62DnmQ1dPX6td9RuvZxzduxnH/C60\n6NBHkNDMpygVCiRSKe9eP2fvlpXUa9qOspVra203j2+DTCqmdmkH9HW+333u9x3QIb03PVxY4VMe\n3440hYIp87cRHhlLvy6NsLE0QywWCR688p6g0Ei6DJnPzlXjsbUyIz4hCbU6fa66EBISk4mMjiM+\nIZmRM9Yxqn9rGmVytv88wQWvsMzP2d6+8uTxvRs8uX8De6f8Gp09+/t4c2DHWgD09Y2wtnfE0dlF\nY+nTQ7s2UKFaPeydCnD/5kXS0tKoVCPrPfFrF02j+8BxHN23GZVSSYdfh2p0Q/ApKclJKBUK7t64\nQM0GLbJ8nVKpRKVSfqiOX/rHaFp36U8+FzdBfgQH+GJmYcXbV8+5dPogFla2tO46QOvz7qvnjuLt\n9YyOvYahq6svuPc+j29PeTcrHL4TAZnM+P4DOkCMF8S/zmkv8siAmLgEpi/cTpVyRSjgbEvJIvkZ\nNNGD8YPbU7Rw9nzRPX7+lsXrDuBga8m4wW21auc7efEe95+8Rl9PFz1dOY+fv6V9sxrUrlLy308U\niTnu60qaMuNU6sfn5SqVkuP7t9Gs/a+CfEpMiCc0yI/Y6Cjcy2sm63v++D5EYjFlK9Xi4qkDuBYr\nTVH3rKvWHdy5Hhs7J65fPAHA6Bmaj/UMDfLnyN7NJMTFINfVpUnr7ugZGGrUA56YEI++gSEqlZJN\nK+ZQslwVKlavr7EvHxMS6MveLSsxMbOgTuM2PLp3naZte2hl8/3X6fWLJ3BwLsjd6xcoX6W2YNnf\nPL4NzjaGlCn0/QjIZMb3m1v4GJPCkBaVXv2eR67CxMiAQT2aMHTKalo0rEzF0q70bF+f56/9tA7o\nCoWSzXvPolSq8Jg1CG+fYJRKlWB7SqWKR55vmTTs//utQ8Oj2XPkyn8CeorYNNNgDuD56Dbnju1D\nV08fmVwHJw2LuG5dOY2ltT0n/tmGsakFtg5OFCrirtkLAuo0bsO54/vYt201RUuW0yiYQ7qiWnhI\nEDXqN6dEmcoarw9gbGZOx17DMDQyQalQ8OaVJ4/uXaNJ6+5Isijxe/XcUWKjI3nx9B5O+QsjkUjT\naxOKl85yT/unhIcGU6F6fZKTEvF++ZTUbJhsJhKJuHHxJBGhwfi+8aJanSacP7GfX/MCeq7F2EBO\nye+wRS0jfowdOoAy+X/n6cIHceSRvdy494KU1DRqVkqX2/TYfIT9x67RoGYZJgxpj1SqXXpzyfqD\nlCpWALVazfK/DrNz5XjBqnAAT1/6sG3/eeZloc0tQJGPu/7/1UMICwkkKTEBe8f8SGUyUpKTiIuN\nFqzFnpSYgN+716iVSqQ68g/SpVnl2cNbFClRDolUSkRoMElJCTjmcxHki1CUCgU7Ny4hJMifuNho\njIxNadN1APkLFdWoWCwk0JeY6EiSExNJSkogOSmRUuWraVw1/8EvpZJ1i6fTc9B4ju7fQqvO/YiL\njuLq+WO07NRHkE1IT+efP7Ef93JVWLdkBiOnLKKga3HB9vL4esikYmq622Oop30NRW7g9KIgsQAA\nIABJREFUx9ihA0h0wbzUTykNm1upUq4IEVFxdBw0l6kjOzG8dwua16+EWCzSOphDenV719a1sbY0\nxTcgDK83AZm2l2UFU2MD9HTldBw0l9pVSn7oZ8+It5EZt3DpGxgiEonYuXEJURFhmJhbUq5yLUEB\n3dvrKUd2b8LeuQBvX3nSd/g0ja73e/eK8yf2ExcbjY6OHq+eP8K9XDWN/di3dRV+716ho6tPr6GT\nNK64lkilKJVKhk9egEwmZ8eGJTgXcNW48tvG3vmDdK7/u9e8ff0csVi4NpZEIqH7gDHIdXSpWb8F\nW1bNRSQS0aJDb8E2IT2rUbJsZc4c3cOsFTsFF0Lm8fUpW9jyhwnm8CMFdEiXhjUqDHGvctqTPIDz\n1x6xec9Z2jWtzpa95zA21GfS8A5aTVL7mFH9WzN0ympsrcxITkmjR7t6gm0plSqu3HqGe9ECTP+t\nC1duP8s04KjE+kQkZhxIDAyNCfL3oXHrbljZ2BMdGS64LerVs0f0HjYZY1NzAv3e8ujuVeo2aZfl\n6yVSGVY2DohEYhIT43EtXoYiJTUT7/F8dAdzS2va9RhMWHAAJw9up3WX/pq+FJRKBYG+b4mJjiTA\n941WgfjK2SPcvHSKAq7F+XvdIvqOnIZcLiwzY2hsytbV81GrVbTrPggzC2tev3jCy2cPqFG/uWAf\nS5atQsmyVQRfn8fXx83ZFFvzH6sd8McK6ADGhdL701PCc9qTnxq1Ws21O55sXjKKtX8fJzo2gV/q\nlCc7DniSklOZuXg7TvZWbF4yitQ0BSZG+lr1+i7dcJBSxQpy8NQNKpQqjI5chlyW8ccj9gvT1aIj\nw5HKZFjZ2GNqbik4JSyWSJgzsT8Vq9fn3esXNGrZmZTkrE8bs3fMT51f2qCnZ4CxqTkRYcHExURh\npMGOUZGW9mG6mLmlDUqlUtBradttEOdP7MfA0Jgh4/8kLS1VsFDNq+ePGPP7CnZvWk6hIiUIDfLX\n6hiha79RSKRSPB/dYcuqeTgVKEyTNt0F28sj92Njpoeb04+XOZHMmDFjRk47kb2IQNcCkgJBLezL\nJw/tuXTzKZt2n6Flo8rUrFSCsiVccHNxRFdHeznFrXvP0bhOOQwN9JixeDtymYzibvm0srnv2FVq\nVCqBVCohNi4RqUSSaUvdmwQbIhMzPzLwfHSHo3s34+X5kOSkBJzyFxZ0s+HiVoJqdZtibGKGmaU1\nfm9fkZSYqJHQy8kD2ylSshwymZzI8BA8H93RSGnOytaeq+eOcfvqWc4d30d0RCh3r5/H3jG/RiI3\nunr63Lx0ikC/txQuWpL9f6/WuAXvPcGBvshkcgL93hIRFkLNBi0QiUQolUpBO/+U5CSWzx6LUqmg\nbpO2ODgV5OmDm3mV6T8oBrpSKhe3Q6qlOmVu5AcM6IBICnLT9KDOj1Hz972R38mG6hWLMfr3jUgk\nEiqVcUOWyY43q1y+9ZR8jtZMW7iNsiULUbuKO22bVMPZ3kqQItzH2FiZ0XPkYvT1dPD08mVQjyYZ\nB2GRhNtB1qg+87YyMDKmcFF3qtdtSlxMFHaOmt1s+Pt48/zJXa6cPcL9m5dISIjF3MKa2o1ba6za\nFhUZhpfnQyys7bj0v7Y1C6usi+6IRGJMTM0pXaE6NRu0wN/Hmz7DpwjKOty7cYFewyZx9sgeUlOT\nKVNRWEAv6FqciLBgatRvTj4XN84c2c3x/VvR0dEVpGonk8mpVL0BB3asJSUpCZlczosn9ykr8IYj\nj9yLRCyiSjE7DHR/vOQ0/Igp9/fIzcGkJEQ/ymlPfjr2H7/GlVvP6NGuHjtXjst0UpkmqNVqZFIp\nq7ceo3PLWhw9e5tt+88zYUh7CuXXblb4jXsv8PTy5cjmGYAaB1uLTHfUySIzFJ/pjHvl+Yjrl04S\nHhLIsEnzSYiP1dgfx3wu2Dnkw9jUAkfnglw+ewSVwLOKqrV/4dLpgxzYvpaSZatQuKjmrW+O+Quh\nSEsjLCQQfx9vwelya1tH9m1dxeO71ylXpbbG179HIpGgUilZ+scozCysqV6vGS079RF8HADphXtW\nNg606TaQv1bMIj42WrCtPHIvpVwsMDH8/oauZJXvb3yqJhg4gGGhnPbip+Lx87f4+IcycWgHPDYf\n4eb9l9SqXPLLF34BkUhElXJF6NelMckpafgFhtOwZlnS0rQ7VlEqVWzcdYrCBe1ZtvEgMxZ/fjRn\nWMrni2hePL1Hiw69sHcqQHJiApERoYL8evH0PonxcZw8uCO9d/ulsJuitNQUIsJCSE1N4eHtK7zz\nfqGxjfMn9rN+6UyunjtK224DBZ99F3Uvj3u5akxfvJnm7TWfgPcx+Qq6MXLKInoMGkd8XAxrFk1l\n9YLJqFTC3w/NO/RiSJd6GBgYMWD0H1r5l0fuo4CdEU7WRjntxlflx+lDzxQ1RD6ApOCcduSHZs6K\n3UwY0oHrdz259eAlowe0ISA4gi17z/5LqEUooeHRnL78gKb1KmBmYohCoeSR51vKuQu/YZu+6G/S\n0pToyGVMH9UF+PJEtMshbkQlZX4f/OzhLQ7sWI+BoRESqYyu/UZpPLYUwMvzIedP7EelVNJ35HT+\n+XsNnXqP0NhOul55Id54PUVP35CSZSrjmD/nbnKvnjvKzcunMTYxw9zShnY9Bgu2tWX1PCLDQ3Av\nW5UqtRujb6C9bGfeVLMfEwsTXaoWt0Ws5ZCc3M6Pm3L/gAjMSqUPckmNyWlnflgmDu3Aqi3HiI5N\nICU1le7DFyKRiPl9TPZUC6/YdISDJ29QtoQLZiaGPPPypWTR/FrZnDm6G94+QWzdd47OQ+ZRq3JJ\nenVskOl5vFJikGkwT05KxMf7Bc8f32PcHx54ez0jNipCUDAHcC1W+sO400C/t1Su2VCQndTUZAq5\nleDe9QvYlS6Az1svjQO637tXXL9wgvDQIKIiwuj46zAKFyslyJ+XTx8wZuZyAP5eu+DDQBMhtO8x\nBH0DQ9QqFaEhAURHhmk1GQ7yppr9iBjqyahYxOaHD+bwUwR0QCQB83IQdj1dUS6PbEckEjHk12Zc\nvPEEj01HGDuoLeVKFsoWARmAIi6O7Fw1nr//uUBwWBT6ejp4zBqklc3klFSOn7+LqbEhS2f05+Wb\ngM/uzmOVmberqZRKrl88id/bV/j5vP4wkKOSwEAMfKhG16Qq/WNuXj6FW7EyqIESZSvj4/2CVgJ6\nyE3MLKnZoCUW1rYE+Hjj7+MtOKBLZTLUKhUisRj38tW16keXy3WYPb4fhkYmdOk3ipNHttNz8ATB\n9vL48dCRSahc1Ba59Mc+XX7PzxHQIV1JzqIchN3Ma2fLZvyDwvlj6U505DLGD2nPtuVj8PTyzbZg\nfvfxKxRKFSXc8jFnQk/8A8Oxtda+h3TNthOUdy+Ejo6MQRNXsm7+8Ex7zwEC4jLv/9Y3NKLHwHGI\nJRJEIhFhIYGYWwifJHfn2jkunT6EWCzG3qmAoHT77avnSIiLpWTZyujo6mFpY098bPSHvvKsYmxi\nhrGJGfGx0USGhxLg+0ZjX97TuusAVGo1EsDKxp5LZw5RuGgpHJw1V/hTKNLIV9CVdj2HcGjnBhIT\n4gX7lcePh0QsomJRGwz0fp4w93PctrxHZpIuD5tHtrLjwEWWzOjPuMHtGDxpJVKpWKuz7U8JConE\nQD9dCSwhMZkNu05ly83Ci9d+FHC2pUIpVzo0r4m3T1DmTxZJeRf5+da4zSv/RK1OL4FPSogXnEoG\n8Hx8lzEzlzNq+lKkMjnRkZoLJQ0YNZOi7ukDWfK5uGHnkE9QQVtCfCwr/hzHvm2riYoMo023gRrb\neI+RkQl7t3iwfPZYDu3ewL0bF9E3FFaopKunj5mFNfMmD+add7rwTh55vKdsYSvMjYTPdvge+Xlu\nXd6jawvGRSH2eU578kMQHhnLtv3nqVu9FOXdC1O2RCFiYhOxNDfOtjWa1K3AiOlrOXnxHsnJacyd\n9Gu22G1UuxwT5mwiKTkVa0tTOrXMvO84SWyK8kvloyLRh1nhl88cotuAsYJ909c3/FDQ5uP9QiN1\nN0gv7vL38aZ4qYpER4YjkUgQS6QYGGgePA0MjWnatieHdm0gMjwEqVRK7UatNbYDEBMdiVQmZ/jk\nBQBcu3AcM3PhYysr1mhAtbpNBavx5fFjUryAOfaWP189xM8X0AGMCoAiHhL9ctqT75oHT73ZvOcs\n44e0Y8vec0yZt5We7etnSzAPCYtmyvyt2NmYY29jToMaZbA0N8a9aAGMDLMmffo5/ALDSE1NY/b4\nnujpytlx8CIDJ3iwZu7QDJ8fmvzlCmpdPT02r/wTMwsrwa1d78emhgT6kpKSzJtXz6jXpB0SiWYZ\nCbFYjI6OLinJSaSmpqBSKrTq0z57dA/DJs5HKpPx14pZ1KjfQmOfAEzNLSlVPn1ATGJCPFVrNRbs\nE6DRTPU8fg7y2xlRyN4kp93IEX7OgA5gWhyUiXkz1AWSplCwfscp5kzoyabdZyjgZEPrxlVYteUY\n1SoUw9lB+K4LQE9XTnRsAkN+bUZQaCSbdp+hWoViFCmk3Qx1gPiEJKbM30bbJtX4fekOmtevxIg+\nLT97zZuIL6fuOvUeSVhwAIkJcYLHZVaqkV5EN3TiPGKiIggO9EUq01wFT6VS4e/jjUQqQSaTI9XT\nRywR/nEXSySEhQQCEBEarFUxm3OBwiz9YzSBfm9xzOdC5z4jsbJ1EGwvjzzeY2uuh/sPMttcCD9B\nH/pnUKWlj1tNy2tn05TklFR6j17K9hVj0yvcJ69i5ezBJCalIBaLskWzPSQsmsGTVuJoZ8nYQW1x\ntMueD6qnly9nrz5keO8WAIz+fQOLpvXN9PlKiRFHvR0/a3Pr6vm8fe2JCBHmVjYMGP07Mpnmv4OH\nt69gZmGNjYMTurr/nbeeVVKSk/B8dAelUoFSqUDxf+3dd5TU9f3v8ef3+52+O22nbGNZ6gK7IAhI\nU9RgiV5zLZHEJP70+os//RlyTTy/m5Puzc29MYkmeswvJtF4oonlp8YWK6IiCEoHkS5lF7aybJ0t\ns2Xa/WPAmBzYMjPLd8r7cc6eFT18531wmdd82vsTDhMJh1l6yRdQEgjjjvYWVr70FMRiXHLV8k+v\nMU3EpnWrsDtc7N6xiatvuJU3X3qS5Tcld2JBCFe+iQtmlqBp2X887Uxyd4QOoBrBOx9aNsen4MWI\nDIbCHD7axJe+sJTr/u1nFHpdXHtF/KpImzV1m1AKfS5+dfet3Pzt+3E5UrMeFolEefXdLRxvbufO\nux9GVRQuXTpnyN/TGRl6CWFwcACjyUTVnIVc97Xbef4vDyUU5hDfuf3W356m5vA+vP4SugMdrPje\nzz89BjdS0WiUfIcLYjG6Ah2YzdakRujNDXVceNnVHD28n6f+eD/X/8sdCV9e4nL76O7qwFXg5cmH\n72PRRZ9PuC4hAGwWAwtnFOV0mEOuBzqAagbvedC6GcJBvavJCGs37MJht3HdFYu5+rKFhCORpC9H\nOZNJ44v4/c9X8NfX1vP1ryR+pvuU/Yfr6Ojs5sGf3k5rexfRaBS/d+jrUOu7hh4pq4pK1ewFHNiz\nnU3vv0Vv9+j7t58yf8kyDuzezi//8AIQ7/SWyKaxVK+h19ceofKc+ezZuZm77n6AF574XcKBPn3W\nXLZ88C6LL7qC2fMvwGTOrZ3IIrUsJo0llcVYTKk5JpvJcuvY2plo1nioa4ltZMoVL775IR9s2csf\nn36L7bsOA6Bp6piF+SnnzJiYkjD/62vrcTnysFpM3PCNX/L86+txDjfyV43Udgz9uTccDtHb08X0\nWfMA+NItp99YN1IGo4m3/vY0e3du5tCBXQlNkZstVmoO72dq5Wz8RaWcv+yq+DWjCa59V81ewJOP\n/AqjwUQsGk36atFARxtPPHwvTz5yH7/9xfeSepbIXWajxpKq4pw6az6U3F5D/2fh7vj0e3RQ70rS\nzv2PvITLkc/ajbv4+lcvZ/f+o+z95Bg///4teNzpf+FBTW0zz7++nu+uWA7Ee7av37KXRXOnD9lM\nJqj6eKd66LX7h399N/OXLKO5sZaG2mpu/4+fJl3v7h0bOdHUwJzzLsDjT6x97KMP/pTb7voJf/rN\n/+PWb9+ddE0D/X2YLcmfMADobG/F6Y7fardhzUry7A66Ax0svvjKhHbPi9xjNKicX1Wc1benjZZ8\nrPksg/3v0+/RsN7VpI3jLR38bdUm3nrq/+Kw2+jvH+RbX7+amtpmenr7MiLQn355DRu3H2BCWSFX\nX74Qi9nEhQtnDvv7hjqudvjAbhRVwesvZv6SzwHw+EM/T7jGU0fWVr70JA6Xh6LSMgKdbQkHesOx\nI7z96jPU1hzkvZUvYjAYE9oU11hXw+EDu2k90UhrcxOtJ5pYsPQyLr3qSwnVBWB3uHjmTw/SeqIJ\nVVFYsPQyZsyanxP9tkXyDJrKosoiCfN/IiP00xlsh9at0iL2M9Zt3sM9//kcNquZlx790ZA9z9PR\nHd9/iPt+9HX++vp6Xn17M6VFHn70rRuG3Tm/+vgMes7Q/r+p/hjbNr7Hvp1bALDm2Zk4dUZSV4PW\nVh+kreU4kyqqON5Yy5EDe/hv1yd2wc3+3dsJDQwQjoSIhOM73RctvWzUgV59cC+dHa1sen/Vpy1o\n1656mS/emHjHOIgffzv1YaWx/iiFxWUyOhfD0lSFRZWFeJ2pmS3KJhLoZzLQAm3b4WQrTwF9/YP8\n5P6nCHT18sBPbiPPlhl7Dvr6B9l3sPYf2tFW1x6nwGUfcvd8WLPzxjDH1aLRCHU1h3F5fAQ62lBV\nlXHlkxOq88DuHTz72INY8/KZNLUKi9WKyWzh89d8LaHnpVIkHOaxh+7htrt+Qk9XJ0/98X7u+E5y\nd4b3dHXy5CO/pi/YQ0nZRK796m1YrIkf1RPZT1UUFszwU+iWn5PTkUAfSv9xaPsIkD+iz9q5t5qq\naeMxJtGrPBO0xsr48NjQHeIeffCneHyFHG+oo3zyNK66/uakXvN4Qy1Ot4dARxvdXZ1Mnlb1aTtZ\nvX245k22fPAuZrOV62+6Y9RH6f7Z268+w8SpVUydcU6KKhTZTFFgfoU/J1u6jpTsch+KpQjcs/Su\nIu3MqZqU9WEOUBcYfgZCVVS+eOMdrPjuPZxoqk/6NTvaWzCZLfGz7UZj2oQ5gNNVQGnZRBRF4a9/\n/i1HPtnDxrVvJfy8eYs+x45Na3n/7Vd47Lc/Y+XLT6WwWpFtzp3ilTAfRva/KyfLdnLKtWM3MlLP\nHTHVRF1g+DDVDAb+8vtf4vUXY06wf/tnbfngXSZMns6zjz2Iphm48wf3JtwXPtV8RaVcXDQOj6/o\n05vkJk8bfmPhmRT4ConFYuTbnXz5ljvJt+dm/20xNAWYM8VHmX/4+xRynUy5j1RfE3TsBPnjygm9\nqp93qz2n/W/RaISN76+icvZ5uAt8NNUfoyvQTsWM2Qmf8z7ld/f+AEVRufzqr7B94xqu/eptKTsq\nlqy6o4fYsGYlrSea6Ghr4YZb7mRqZequI+5ob8HpKkirWQmhL0VRmFfhpdQrYT4SMkIfKWsxKBq0\nfyS733NAc3DoqT2Lxcarzz1GZ1sLVlse02fNo2JG8uH2r9/8IS3NjZRPnkb9scNpE+YATreXCy+7\nBo+vkJrD+2lqOJZ0oO/5aBPr3nmVwYEBGuqq+eEvHsHt8aeoYpHJVFXhvGk+igpkmn2kJNBHw+I/\neU59G8TknHo2q24/8/lWVdWYt/hipkyfRaCjDV9RKYf2J9bR7bMikQjPPv4bGutqMJutzD7vgqSe\nl2oOpxvHyXvZp1Wdm5LZqgmTpzNj1nw0g4GuznZWv/E8193470k/V2Q2TVNYON2PzyW72UdDAn20\nTAXgWxAPdekol5XCmpPewaHDufrgXl5//s+UjJ/E4f27WPHde5J+3U/27KBqzgLy8h1c/Plr2b1j\nU9LPTLUn/nAfADf86500N9UzbebcpJ6X73BRf+wIB3ZvZ9O6VVx5XWJn7kX2MGoqCyuL8Dikx/9o\nyS73RBhd4FsImvzAZaP20NC3qwHs3Lqem77xXZbf9A2+cuu32b5pbdKvazAayct30BXo4HhjHe1t\nJ5J+Ziq1nThOnt3BOfOXcGDPDuqOHkr6mbFYjG0b3qN43AT+5/fvZf+urUSjsqSVq0xGjSUziyXM\nEyQj9EQZ7OBdFL9PPdKndzUiheoCw7+ZLDj/Un5/7w85d+GFVB/cy/KbViT1msHeHioq49e4ev0l\n7Nyyni8svyWpZ6aax19EZ1sLPV2dbP1wNQXewqSfqSgK1371NgAaaqtpqKthcHAgqbvgRWaymDQW\nVxbjyBvby56ymexyT1akL94mVu5TzwoxxcxrNROJcfrWtvXHjtDa3MicBUtpPl7P0UP7qKick/RG\nrlMXqaxd9TIXf/66pJ41ll57/nFMJjMlZROpmrMgJTvSt29cy7p3XqF0/CQuuPS/UzJuQvKFioxi\nMxtYXFVEvlXCPBkyQk+WZo1Pv7duhVDi92CL9NCL64xhDrBm5Yssv/mb1FYf5LGH7sFkMuNweZIO\n9FO98Q/t35XWgX7Jlct58pFfse/jrezftY0v33Jn0s+ct/hi5i2+OPniREay24wsqizCZpY4Spb8\nCaaCagbvAmjbEb/YRWSs4Y6r9fZ2Exoc4JnHHuSuH99PT3eAPR9tYsbJu9ATEQ6FON5wjF/97zup\nO3qIpx+9n3HlU7jo8msSfuZYefPlp7j6hlspHlfO2lUvc3Dfzk+XCoQYLa/TwnnTCzEZZDtXKkig\np4pqiod6x27oa9C7GpEQhSNDHFcDuOLaG/nDr3/MBcuuwlXgZe2ql5m78KKkXtVgNPLj+/4EQCg0\nyImmegIdbUk9c6xEwiHcXh8A/qJxDPTL/hGRmDJ/HnOm+OTK3BSSNfSx0HUYug/qXYUYpZDm4s0j\nxaP6PZvXv8PCpZeNUUXpp6uzHVVVyXe49C5FZLDp411MK3PrXUbWkUAfK8FG6Nwl169mkOZIGZvq\npMXkcDatW8WqV57B5fZy3dduZ/ykCr1LEhlCVRRmT/Ew3m/Xu5SsJAsXY8VWAt6F8al4kRFqA+nT\nZjVdRcJhdm79gGVXXs/ym1ew+s0X9C5JZAijQWVRZaGE+RiSQB9LJjf4l4BRfoDTXUy10Ngll4IM\nJxqL4nJ78fqLObT/Y2IyAyVGwGYxsHRWCT6XfGgeSxLoY02zgW8RWHx6VyKG0BOTqztHwmg0UVxa\nTvG4CTTWHU26oY7Ifm67iaXnlGC3yRnzsSaBfjYoRvDMB1u53pWIM2gKytr5SJWUTeQvv/8lc867\ngI+3fcjgQL/eJYk0VerL4/yZJViMMvt1NkignzUKuKvAWRX/Z5E+FIXqdhk9jNS6d1/jm9/7BVs/\nXI3d6ebQ/l16lyTSjKIozJxYwPwKP5oq73dniwT62ZZfDp55oEqApItB1clASN50Rmr2/PNZ9cp/\nEehsZ/27r+ItHN1RP5HdzCaNJVWFTC6RZayzTRrL6MHiB//50P4RDAb0ribntQ3KG89oFHj91B09\nxNyFFzJ91jy8fgl0EVfgMDN/WiFWk0yx60HOoespFoXAAeg9qnclOW1TWwXN3fIGNBKvP/9nvvCl\nW/QuQ6ShCcV2Zk30SOc3HckIXU+KCq5KMLugYw/EwnpXlHOiqkXCfBT6+4J6lyDSjKYqnDNZmsWk\nAwn0dGAtAaMzPgUvN7adVT1RaWEqRKJsFgPnTSvElS8NtNKBBHq6MOTFz6t3HoBgrd7V5IymYW5X\nE/9oUkUlsViM99/+Gw211XS2t+J0e5g+cy7+onHSBjaH+Nw25lX4MMtNaWlD1tDTUW8jBHZDLKJ3\nJdlNUVlZW8FgRNb8Rqu2+iB2pwtXge/Tu9xFblBVhcpyt+xiT0MyQk9HeSVgtp+cgu/Ru5qsNai6\nJMwT1NZynHXvvkprcxN9wR7uuvsBrDaZ7ch2DpuRuRV+nHkyxZ6OJNDTlcEOviXQuQ+C9XpXk5Va\nB2QTT6LGlU+mbOJU3B4/a1a+SGd7qwR6lptUYqeq3IMqjWLSlgR6OlMM4D4HLN54sEcH9a4oqxzt\nsOhdQsbyFZUSi0bpaG+h9UQTrScaKR4nrY2zkdmkce4UL4Vum96liGFIoGcCawmYC+Kh3ndc72qy\nQlSz0tIrm3kSdXDfTt5+9VncHh/Tqs5l1tzFepckxkBRgZXZU3zSiz1DSKBnCtUCBXMh2AiBvRAN\n6V1RRuuOuvUuIaNVVM6ho+0EH6x+gxPHG/AXlzF+4lS9yxIpoqkKVRMKmFjs0LsUMQoyRMk0thLw\nL423jxUJa+yWe5mTEQoN8tGW9fyv//MbvvWD+3jntef0LkmkiCvfzIWzSyXMM5CM0DORZolfx9rb\nAF17ISod5kZF0ahul126yYjFYjhdHgA0g4G8fNlgmOk0VWHaeBdTSpxyFDFDyTn0TBfpg8490N+i\ndyUZY0D18Fa1zHAkq6G2mtLxk/QuQ6SAz2XhnEk+8q0yxstkEujZorceAvukH/wINITL2VYvO3aT\nFezp5olH7qO5sY6q2QtYfvMKvUsSo2Q0qMycUMD4QplhyQayhp4t8sZB4QXx3fBiSDVyXC0l3nrl\naa654d+YPnMuxePK+WTvR3qXJEahxGtj2dxxEuZZROZXsolmA+8i6GuCwH6I9OtdUdqJqnm0yXG1\nlBgcGMBbWEwkEuFEUz0lZRP1LkmMgNVkYNakAoo90ggo20igZyNrMVh80FUNvdXxe9cFAIGo9J9O\nlUUXXk5jbQ1FJWXkO1xMnFqpd0liGBOK7VSWF2DU5ENtNpJAz1aKAZwVkFcaH633n9C7orTQ0CNr\n56miGQxsWLOS1hNNdLS14C7wMbVytt5lidNw203MnOilwG7WuxQxhmRTXK7ob44HeziodyX6UTTe\nOFZBWCYsUqIr0EFvdxceXyE1h/fT3FjHhZddrXdZ4jMsJo0Z5W7K/HbkIFr2kxH6I/EkAAAIgUlE\nQVR6rrAUgtkL3TXQcyQnr2btV9wS5inkcLpxOOMd96ZVnUt3Z7vOFYlTVFVhSqmDqaVuDJpEea6Q\nQM8ligaOKfHrWTsPQH9u9YU/0Z+vdwlZ58gne9iw5k062lupPriXj7dt4NZv3613WTmtxGujstxD\nnkXe3nON/B/PRZoNPHNhoCV+4Uu4V++KzoqaDlk/TLXVbzzP8ptX4C7w8fwTv+PLt9ypd0k5y5lv\nZOYED16ntDXOVbKGnvNi8aY03Yey+phbRMvn9SNlepeRdfbu3ELVnAUA9AV75U50HZiNGjPGuxhf\n6EA6tuY2ObuQ8xTIK4PCi8BRCWp2jmIDETmuNhZMJjO/+dl32PfxVrZteI/Bgez9UJhujJrKtPEu\nLpk3jvIiCXMhgS5OUTSwT4Cii8A+DVSj3hWlVEOXTEOOhXXvvsY3v/cLtn64GrvTzaH9u/QuKesZ\nNJWp45xcOr+M6WVuOVMuPiVT7uL0ooPQfRR6azJ/R7xq4PWaqUTkJz3ltm1YQ3NjLUcO7kVR4Mu3\n3ElhsSxtjAVNVZhYbGdKiQuzSdO7HJGGZFOcOD3VFG9MYy+Pd5wLHsvYjnN9uCXMx0iB10/d0UPM\nXXgh02fNw+sv1rukrKOqChOK8pla6sYiQS6GICN0MTKRPug6AsE6ILN+ZI4OTuDjRplyHyub1q1i\n1SvP4HJ7ue5rtzN+UoXeJWUFVVEYX5RPRakbq1mCXAxPFl/EyGhWcM+EogvBNh6UzPnRqWmT29XG\nSiQcZufWD1h25fUsv3kFq998Qe+SMp6qKJT77SybO47Zk7wS5mLEZMpdjI6WFw9251ToqYXeY/H1\n9jQVUe10Dcj237ESjUVxub14/cUc2v8xsQxdlkkHRoPKhCI7E4ucEuIiIRLoIjGqGRxTwT4Rehvj\nm+fSsEFNpxxXG1NGo4ni0nKKx03goy3rWX7TCr1Lyjg2i4FJxQ7GF9plx7pIiqyhixSJQn8L9NTA\nQPr09N4ZmMKxjuw6gpcu9ny0CbvDTfnkaXqXkpHc+SYmlzop9uSjyiSSSAEZoYsUUeMXwFgKYbAz\nfuStvwldN9CpRmo75Ud8rNgdblqaGyTQR6mowMrkEqe0aBUpJ+92IvVMLvDMgUgFdB+DYK0uZ9mD\nMRexmAx9xorHX8T+Xdv0LiMjaJpCmTefSSVO7DaZMRJjQwJdjB3NBq4Z8Rvego0QrIdQ4Ky9fLPc\nrjam8u1OfEWlepeR1lz5JsoL7ZT68mV9XIw5WUMXZ1coAL0N0NcA0dCYvtTqpun0yA73MXdg9w7y\nHU6OHt7P5vXvcP2/3MGEKTP0Lks3Rk2l1J9Hud+OKz8770YQ6Uk+Moqzy+gEVyUULYOCOWDxjcnL\nhDWHhPlZUl97BFVV2bNzM3fd/QCb17+jd0m68DjMnDvFy+ULxjN7klfCXJx1MuUu9KFoYC2Jf0X6\nTo7a6yEcTMnjO8KOlDxHDK9q9gKeePhevL5iYtFoTo3OTUaNMn8e5X6HrI0L3cmUu0gjURjoiN/P\n3n88qY10OzorqOuU5hxny5FP9vDiU38gGoly0eXXsPjiK/QuacxomkJRgY1STx5+tw1NzpyJNCEj\ndJFGVDB74l/Rynio9zXDQOuoLoaJqSbqO2U16Wx6780X+B/f+B67tm/k4L6dLFh6GZqWPR+oNFXB\nX2Cl1JNHYUEeBglxkYYk0EV6Uo1gK4t/xULQ13Iy3E8MO3IP4iKGvOGeTVZbHv6icTTVH6OnO4CS\nBX/8qqpQ6LZQ4smnsMAmu9RF2pNAF+lPMYKtJP4Vi8RH7MGT4X6aPvLHg3Jc7WybPG0WoXAIk9nM\nVdffjKpm5uhcVRT8bgslnjyKCvIwGiTEReaQNXSRwaLxNrPBZhhohkg/oPBOwzSCoSwYImaQWDTK\ns4//Jy3HG1BVlRv//Tu4C8bmBEOqWUwafrcVv8uKz23DJCNxkaEk0EWWiMJggMFgJx8eNdLVO7Zn\n3MU/2rZhDYMD/Sz53JV0Bzp45/Xn+OKNd+hd1mmpikKBw4TPbaPQZcORZ5IFGpEVJNBFVuofjNDS\nGeREoI/Wzj76B+Vaz7HUVH+MbRvfY8H5l7Bt41pamxtxe/xcdf3NaAb9V/asZgN+t4VClw2v0ypT\n6SIr6f83TYgxYDFplPntlPntAHT1hmgNxAO+LdBPOCKfY1PJ4XJz7MgndHd24PEXMfPcRXj9xaiq\nPsFpNmoUOMy47VYK3VbsNqOMwkXWkxG6yDmxGAR6B+no6qOtZ4D2rn76Bs7+5TEidew2I267GY/d\nQoHDQp5VAlzkHgl0IYBgf5i2rj7aewZo7xqgOxhC/mqMztpVL9NQW01neytOt4fpM+fiLxrH+EkV\nKX0dVVVw55twOywU5JspcFgxG2UKXQiZchcCsFkM2Cx/n6KPRGN09Q7S2TNAIDhAoGeQrmCIaFRC\n/kyaG+u5/Oqv8F+PPgDA/CXLkn6mQVNx5hmx55lwWE048804801o2XDQXYgUk0AX4jQ0VcFtN+O2\n//2CjUgsRndviEBPP119Ibr7BukNhgjKdD0A/f1BeroCzDhnPh1tLUQikRF3i1OAfKshHtwnw9uR\nZ8ZmMcjUuRAjJIEuxAhpioIr34Qr3/QP/z4cidHTF6I7OEB3f4ieYIievjDB/hCRHBrRq4rCc4//\nlhtv/w/qag6jnmYUbTZp5Jk1rBYjVrOBfIsRp81Evs2EQZPoFiIZsoYuxBiJAQODEfoGwgQHQgQH\nwgQHwvQNhOnrj38PZdFu+1gshhoL43LkYbUY4ssYJiM2swHbyQDXNEVG3EKMEQl0IXQUicYYCEUY\nGIwwEArHv4cj8X8XihIKRQhHooQiMcKRKOGT38/G31qDpmIyqJiM8e9Go3by1xom7eT3U782apiN\nGqoqgS2EXv4/02pjnwU/Y8cAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "phylum_color = ['lightsteelblue', \n",
    "                'moccasin',\n",
    "                'darkseagreen',\n",
    "                'khaki',\n",
    "                'mediumturquoise',\n",
    "                'lightblue',\n",
    "                'thistle',\n",
    "                'tan',\n",
    "                'mistyrose',\n",
    "                'honeydew',\n",
    "                'peachpuff',\n",
    "                'peru',\n",
    "                'saddlebrown',\n",
    "                'orchid',\n",
    "                'lightgray',\n",
    "                'gray',\n",
    "                'azure',\n",
    "                'lightcyan'\n",
    "                ]\n",
    "\n",
    "img = deepbiome.deepbiome_draw_phylogenetic_tree(log, network_info_with_covariates, path_info_with_covariates, num_classes=1,\n",
    "                                                 file_name='%%inline', img_w=500, branch_vertical_margin=20, \n",
    "                                                 arc_start=0, arc_span=360, \n",
    "                                                 node_name_on=True, name_fsize=200, \n",
    "                                                 tree_weight_on=True, tree_weight=trained_weight_list, \n",
    "                                                 tree_weight_classes = ['Genus', 'Family', 'Order', 'Class', 'Phylum', 'Disease'],\n",
    "                                                 weight_opacity=0.8, weight_max_radios=100, \n",
    "                                                 phylum_background_color_on=True, phylum_color=phylum_color, phylum_color_legend=True,\n",
    "                                                 show_covariates=True,\n",
    "                                                 verbose=False)\n",
    "img"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
