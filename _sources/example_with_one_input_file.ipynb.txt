{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Example : k fold cross-validation with an input file \n",
    "\n",
    "DeepBiome package takes microbiome abundance data as input and uses the phylogenetic taxonomy to guide the decision of the optimal number of layers and neurons in the deep learning architecture.\n",
    "\n",
    "To use DeepBiome, you can experiment (1) __k times repetition__ or (2) __k fold cross-validation__.\n",
    "For each experiment, we asuume that the dataset is given by\n",
    "- __A list of k input files for k times repetition.__\n",
    "- __One input file for k fold cross-validation.__\n",
    "\n",
    "This notebook contains an example of (2) __k fold cross-validation__ for the deep neural netowrk using deepbiome."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Load library\n",
    "\n",
    "First, we load the DeepBiome package. The DeepBiome package is built on the tensorflow and keras library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import logging\n",
    "import json\n",
    "from pkg_resources import resource_filename\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from deepbiome import deepbiome"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Prepare the dataset\n",
    "\n",
    "In this example, we assume that we have __one input file for k times repetition.__\n",
    "\n",
    "DeepBiome needs 3 data files as follows:\n",
    "1. **the tree information**\n",
    "1. **the input file**\n",
    "1. **y**\n",
    "\n",
    "In addition, we can set **the training index for each fold**. If we set the index file, DeepBiome builds the training set for each fold based on each fold index in the index file. If not, DeepBiome will generate the index file locally.\n",
    "        \n",
    "Each data should have the csv format as follow:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example of the tree information\n",
    "\n",
    "First we need a file about the phylogenetic tree information. This tree information file should have the format below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Genus</th>\n",
       "      <th>Family</th>\n",
       "      <th>Order</th>\n",
       "      <th>Class</th>\n",
       "      <th>Phylum</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Streptococcus</td>\n",
       "      <td>Streptococcaceae</td>\n",
       "      <td>Lactobacillales</td>\n",
       "      <td>Bacilli</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Tropheryma</td>\n",
       "      <td>Cellulomonadaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Veillonella</td>\n",
       "      <td>Veillonellaceae</td>\n",
       "      <td>Selenomonadales</td>\n",
       "      <td>Negativicutes</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Actinomyces</td>\n",
       "      <td>Actinomycetaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Flavobacterium</td>\n",
       "      <td>Flavobacteriaceae</td>\n",
       "      <td>Flavobacteriales</td>\n",
       "      <td>Flavobacteria</td>\n",
       "      <td>Bacteroidetes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Prevotella</td>\n",
       "      <td>Prevotellaceae</td>\n",
       "      <td>Bacteroidales</td>\n",
       "      <td>Bacteroidia</td>\n",
       "      <td>Bacteroidetes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Porphyromonas</td>\n",
       "      <td>Porphyromonadaceae</td>\n",
       "      <td>Bacteroidales</td>\n",
       "      <td>Bacteroidia</td>\n",
       "      <td>Bacteroidetes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Parvimonas</td>\n",
       "      <td>Clostridiales_Incertae_Sedis_XI</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Fusobacterium</td>\n",
       "      <td>Fusobacteriaceae</td>\n",
       "      <td>Fusobacteriales</td>\n",
       "      <td>Fusobacteria</td>\n",
       "      <td>Fusobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Propionibacterium</td>\n",
       "      <td>Propionibacteriaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Gemella</td>\n",
       "      <td>Bacillales_Incertae_Sedis_XI</td>\n",
       "      <td>Bacillales</td>\n",
       "      <td>Bacilli</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Rothia</td>\n",
       "      <td>Micrococcaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Granulicatella</td>\n",
       "      <td>Carnobacteriaceae</td>\n",
       "      <td>Lactobacillales</td>\n",
       "      <td>Bacilli</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Neisseria</td>\n",
       "      <td>Neisseriaceae</td>\n",
       "      <td>Neisseriales</td>\n",
       "      <td>Betaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Lactobacillus</td>\n",
       "      <td>Lactobacillaceae</td>\n",
       "      <td>Lactobacillales</td>\n",
       "      <td>Bacilli</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Megasphaera</td>\n",
       "      <td>Veillonellaceae</td>\n",
       "      <td>Selenomonadales</td>\n",
       "      <td>Negativicutes</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Catonella</td>\n",
       "      <td>Lachnospiraceae</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Atopobium</td>\n",
       "      <td>Coriobacteriaceae</td>\n",
       "      <td>Coriobacteriales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Campylobacter</td>\n",
       "      <td>Campylobacteraceae</td>\n",
       "      <td>Campylobacterales</td>\n",
       "      <td>Epsilonproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Capnocytophaga</td>\n",
       "      <td>Flavobacteriaceae</td>\n",
       "      <td>Flavobacteriales</td>\n",
       "      <td>Flavobacteria</td>\n",
       "      <td>Bacteroidetes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Solobacterium</td>\n",
       "      <td>Erysipelotrichaceae</td>\n",
       "      <td>Erysipelotrichales</td>\n",
       "      <td>Erysipelotrichia</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Moryella</td>\n",
       "      <td>Lachnospiraceae</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>TM7_genera_incertae_sedis</td>\n",
       "      <td>TM7_genera_incertae_sedis</td>\n",
       "      <td>TM7_genera_incertae_sedis</td>\n",
       "      <td>TM7_genera_incertae_sedis</td>\n",
       "      <td>TM7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Staphylococcus</td>\n",
       "      <td>Staphylococcaceae</td>\n",
       "      <td>Bacillales</td>\n",
       "      <td>Bacilli</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Filifactor</td>\n",
       "      <td>Peptostreptococcaceae</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Oribacterium</td>\n",
       "      <td>Lachnospiraceae</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Burkholderia</td>\n",
       "      <td>Burkholderiaceae</td>\n",
       "      <td>Burkholderiales</td>\n",
       "      <td>Betaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Sneathia</td>\n",
       "      <td>Leptotrichiaceae</td>\n",
       "      <td>Fusobacteriales</td>\n",
       "      <td>Fusobacteria</td>\n",
       "      <td>Fusobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Treponema</td>\n",
       "      <td>Spirochaetaceae</td>\n",
       "      <td>Spirochaetales</td>\n",
       "      <td>Spirochaetes</td>\n",
       "      <td>Spirochaetes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Moraxella</td>\n",
       "      <td>Moraxellaceae</td>\n",
       "      <td>Pseudomonadales</td>\n",
       "      <td>Gammaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>Haemophilus</td>\n",
       "      <td>Pasteurellaceae</td>\n",
       "      <td>Pasteurellales</td>\n",
       "      <td>Gammaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>Selenomonas</td>\n",
       "      <td>Veillonellaceae</td>\n",
       "      <td>Selenomonadales</td>\n",
       "      <td>Negativicutes</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>Corynebacterium</td>\n",
       "      <td>Corynebacteriaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>Rhizobium</td>\n",
       "      <td>Rhizobiaceae</td>\n",
       "      <td>Rhizobiales</td>\n",
       "      <td>Alphaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>Bradyrhizobium</td>\n",
       "      <td>Bradyrhizobiaceae</td>\n",
       "      <td>Rhizobiales</td>\n",
       "      <td>Alphaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>Methylobacterium</td>\n",
       "      <td>Methylobacteriaceae</td>\n",
       "      <td>Rhizobiales</td>\n",
       "      <td>Alphaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>OD1_genera_incertae_sedis</td>\n",
       "      <td>OD1_genera_incertae_sedis</td>\n",
       "      <td>OD1_genera_incertae_sedis</td>\n",
       "      <td>OD1_genera_incertae_sedis</td>\n",
       "      <td>OD1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>Finegoldia</td>\n",
       "      <td>Clostridiales_Incertae_Sedis_XI</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>Microbacterium</td>\n",
       "      <td>Microbacteriaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>Sphingomonas</td>\n",
       "      <td>Sphingomonadaceae</td>\n",
       "      <td>Sphingomonadales</td>\n",
       "      <td>Alphaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>Chryseobacterium</td>\n",
       "      <td>Flavobacteriaceae</td>\n",
       "      <td>Flavobacteriales</td>\n",
       "      <td>Flavobacteria</td>\n",
       "      <td>Bacteroidetes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>Bacteroides</td>\n",
       "      <td>Bacteroidaceae</td>\n",
       "      <td>Bacteroidales</td>\n",
       "      <td>Bacteroidia</td>\n",
       "      <td>Bacteroidetes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>Bdellovibrio</td>\n",
       "      <td>Bdellovibrionaceae</td>\n",
       "      <td>Bdellovibrionales</td>\n",
       "      <td>Deltaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>Streptophyta</td>\n",
       "      <td>Chloroplast</td>\n",
       "      <td>Chloroplast</td>\n",
       "      <td>Chloroplast</td>\n",
       "      <td>Cyanobacteria_Chloroplast</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>Lachnospiracea_incertae_sedis</td>\n",
       "      <td>Lachnospiraceae</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>Paracoccus</td>\n",
       "      <td>Rhodobacteraceae</td>\n",
       "      <td>Rhodobacterales</td>\n",
       "      <td>Alphaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>Fastidiosipila</td>\n",
       "      <td>Ruminococcaceae</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>Pseudonocardia</td>\n",
       "      <td>Pseudonocardiaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            Genus                           Family  \\\n",
       "0                   Streptococcus                 Streptococcaceae   \n",
       "1                      Tropheryma                Cellulomonadaceae   \n",
       "2                     Veillonella                  Veillonellaceae   \n",
       "3                     Actinomyces                 Actinomycetaceae   \n",
       "4                  Flavobacterium                Flavobacteriaceae   \n",
       "5                      Prevotella                   Prevotellaceae   \n",
       "6                   Porphyromonas               Porphyromonadaceae   \n",
       "7                      Parvimonas  Clostridiales_Incertae_Sedis_XI   \n",
       "8                   Fusobacterium                 Fusobacteriaceae   \n",
       "9               Propionibacterium             Propionibacteriaceae   \n",
       "10                        Gemella     Bacillales_Incertae_Sedis_XI   \n",
       "11                         Rothia                   Micrococcaceae   \n",
       "12                 Granulicatella                Carnobacteriaceae   \n",
       "13                      Neisseria                    Neisseriaceae   \n",
       "14                  Lactobacillus                 Lactobacillaceae   \n",
       "15                    Megasphaera                  Veillonellaceae   \n",
       "16                      Catonella                  Lachnospiraceae   \n",
       "17                      Atopobium                Coriobacteriaceae   \n",
       "18                  Campylobacter               Campylobacteraceae   \n",
       "19                 Capnocytophaga                Flavobacteriaceae   \n",
       "20                  Solobacterium              Erysipelotrichaceae   \n",
       "21                       Moryella                  Lachnospiraceae   \n",
       "22      TM7_genera_incertae_sedis        TM7_genera_incertae_sedis   \n",
       "23                 Staphylococcus                Staphylococcaceae   \n",
       "24                     Filifactor            Peptostreptococcaceae   \n",
       "25                   Oribacterium                  Lachnospiraceae   \n",
       "26                   Burkholderia                 Burkholderiaceae   \n",
       "27                       Sneathia                 Leptotrichiaceae   \n",
       "28                      Treponema                  Spirochaetaceae   \n",
       "29                      Moraxella                    Moraxellaceae   \n",
       "30                    Haemophilus                  Pasteurellaceae   \n",
       "31                    Selenomonas                  Veillonellaceae   \n",
       "32                Corynebacterium               Corynebacteriaceae   \n",
       "33                      Rhizobium                     Rhizobiaceae   \n",
       "34                 Bradyrhizobium                Bradyrhizobiaceae   \n",
       "35               Methylobacterium              Methylobacteriaceae   \n",
       "36      OD1_genera_incertae_sedis        OD1_genera_incertae_sedis   \n",
       "37                     Finegoldia  Clostridiales_Incertae_Sedis_XI   \n",
       "38                 Microbacterium                Microbacteriaceae   \n",
       "39                   Sphingomonas                Sphingomonadaceae   \n",
       "40               Chryseobacterium                Flavobacteriaceae   \n",
       "41                    Bacteroides                   Bacteroidaceae   \n",
       "42                   Bdellovibrio               Bdellovibrionaceae   \n",
       "43                   Streptophyta                      Chloroplast   \n",
       "44  Lachnospiracea_incertae_sedis                  Lachnospiraceae   \n",
       "45                     Paracoccus                 Rhodobacteraceae   \n",
       "46                 Fastidiosipila                  Ruminococcaceae   \n",
       "47                 Pseudonocardia               Pseudonocardiaceae   \n",
       "\n",
       "                        Order                      Class  \\\n",
       "0             Lactobacillales                    Bacilli   \n",
       "1             Actinomycetales             Actinobacteria   \n",
       "2             Selenomonadales              Negativicutes   \n",
       "3             Actinomycetales             Actinobacteria   \n",
       "4            Flavobacteriales              Flavobacteria   \n",
       "5               Bacteroidales                Bacteroidia   \n",
       "6               Bacteroidales                Bacteroidia   \n",
       "7               Clostridiales                 Clostridia   \n",
       "8             Fusobacteriales               Fusobacteria   \n",
       "9             Actinomycetales             Actinobacteria   \n",
       "10                 Bacillales                    Bacilli   \n",
       "11            Actinomycetales             Actinobacteria   \n",
       "12            Lactobacillales                    Bacilli   \n",
       "13               Neisseriales         Betaproteobacteria   \n",
       "14            Lactobacillales                    Bacilli   \n",
       "15            Selenomonadales              Negativicutes   \n",
       "16              Clostridiales                 Clostridia   \n",
       "17           Coriobacteriales             Actinobacteria   \n",
       "18          Campylobacterales      Epsilonproteobacteria   \n",
       "19           Flavobacteriales              Flavobacteria   \n",
       "20         Erysipelotrichales           Erysipelotrichia   \n",
       "21              Clostridiales                 Clostridia   \n",
       "22  TM7_genera_incertae_sedis  TM7_genera_incertae_sedis   \n",
       "23                 Bacillales                    Bacilli   \n",
       "24              Clostridiales                 Clostridia   \n",
       "25              Clostridiales                 Clostridia   \n",
       "26            Burkholderiales         Betaproteobacteria   \n",
       "27            Fusobacteriales               Fusobacteria   \n",
       "28             Spirochaetales               Spirochaetes   \n",
       "29            Pseudomonadales        Gammaproteobacteria   \n",
       "30             Pasteurellales        Gammaproteobacteria   \n",
       "31            Selenomonadales              Negativicutes   \n",
       "32            Actinomycetales             Actinobacteria   \n",
       "33                Rhizobiales        Alphaproteobacteria   \n",
       "34                Rhizobiales        Alphaproteobacteria   \n",
       "35                Rhizobiales        Alphaproteobacteria   \n",
       "36  OD1_genera_incertae_sedis  OD1_genera_incertae_sedis   \n",
       "37              Clostridiales                 Clostridia   \n",
       "38            Actinomycetales             Actinobacteria   \n",
       "39           Sphingomonadales        Alphaproteobacteria   \n",
       "40           Flavobacteriales              Flavobacteria   \n",
       "41              Bacteroidales                Bacteroidia   \n",
       "42          Bdellovibrionales        Deltaproteobacteria   \n",
       "43                Chloroplast                Chloroplast   \n",
       "44              Clostridiales                 Clostridia   \n",
       "45            Rhodobacterales        Alphaproteobacteria   \n",
       "46              Clostridiales                 Clostridia   \n",
       "47            Actinomycetales             Actinobacteria   \n",
       "\n",
       "                       Phylum  \n",
       "0                  Firmicutes  \n",
       "1              Actinobacteria  \n",
       "2                  Firmicutes  \n",
       "3              Actinobacteria  \n",
       "4               Bacteroidetes  \n",
       "5               Bacteroidetes  \n",
       "6               Bacteroidetes  \n",
       "7                  Firmicutes  \n",
       "8                Fusobacteria  \n",
       "9              Actinobacteria  \n",
       "10                 Firmicutes  \n",
       "11             Actinobacteria  \n",
       "12                 Firmicutes  \n",
       "13             Proteobacteria  \n",
       "14                 Firmicutes  \n",
       "15                 Firmicutes  \n",
       "16                 Firmicutes  \n",
       "17             Actinobacteria  \n",
       "18             Proteobacteria  \n",
       "19              Bacteroidetes  \n",
       "20                 Firmicutes  \n",
       "21                 Firmicutes  \n",
       "22                        TM7  \n",
       "23                 Firmicutes  \n",
       "24                 Firmicutes  \n",
       "25                 Firmicutes  \n",
       "26             Proteobacteria  \n",
       "27               Fusobacteria  \n",
       "28               Spirochaetes  \n",
       "29             Proteobacteria  \n",
       "30             Proteobacteria  \n",
       "31                 Firmicutes  \n",
       "32             Actinobacteria  \n",
       "33             Proteobacteria  \n",
       "34             Proteobacteria  \n",
       "35             Proteobacteria  \n",
       "36                        OD1  \n",
       "37                 Firmicutes  \n",
       "38             Actinobacteria  \n",
       "39             Proteobacteria  \n",
       "40              Bacteroidetes  \n",
       "41              Bacteroidetes  \n",
       "42             Proteobacteria  \n",
       "43  Cyanobacteria_Chloroplast  \n",
       "44                 Firmicutes  \n",
       "45             Proteobacteria  \n",
       "46                 Firmicutes  \n",
       "47             Actinobacteria  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tree_information = pd.read_csv(resource_filename('deepbiome', 'tests/data/genus48_dic.csv'))\n",
    "tree_information"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This file has `.csv` format below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Genus,Family,Order,Class,Phylum\n",
      "Streptococcus,Streptococcaceae,Lactobacillales,Bacilli,Firmicutes\n",
      "Tropheryma,Cellulomonadaceae,Actinomycetales,Actinobacteria,Actinobacteria\n",
      "Veillonella,Veillonellaceae,Selenomonadales,Negativicutes,Firmicutes\n",
      "Actinomyces,Actinomycetaceae,Actinomycetales,Actinobacteria,Actinobacteria\n",
      "Flavobacterium,Flavobacteriaceae,Flavobacteriales,Flavobacteria,Bacteroidetes\n",
      "Prevotella,Prevotellaceae,Bacteroidales,Bacteroidia,Bacteroidetes\n",
      "Porphyromonas,Porphyromonadaceae,Bacteroidales,Bacteroidia,Bacteroidetes\n",
      "Parvimonas,Clostridiales_Incertae_Sedis_XI,Clostridiales,Clostridia,Firmicutes\n",
      "Fusobacterium,Fusobacteriaceae,Fusobacteriales,Fusobacteria,Fusobacteria\n",
      "Propionibacterium,Propionibacteriaceae,Actinomycetales,Actinobacteria,Actinobacteria\n",
      "Gemella,Bacillales_Incertae_Sedis_XI,Bacillales,Bacilli,Firmicutes\n",
      "Rothia,Micrococcaceae,Actinomycetales,Actinobacteria,Actinobacteria\n",
      "Granulicatella,Carnobacteriaceae,Lactobacillales,Bacilli,Firmicutes\n",
      "Neisseria,Neisseriaceae,Neisseriales,Betaproteobacteria,Proteobacteria\n",
      "Lactobacillus,Lactobacillaceae,Lactobacillales,Bacilli,Firmicutes\n",
      "Megasphaera,Veillonellaceae,Selenomonadales,Negativicutes,Firmicutes\n",
      "Catonella,Lachnospiraceae,Clostridiales,Clostridia,Firmicutes\n",
      "Atopobium,Coriobacteriaceae,Coriobacteriales,Actinobacteria,Actinobacteria\n",
      "Campylobacter,Campylobacteraceae,Campylobacterales,Epsilonproteobacteria,Proteobacteria\n",
      "Capnocytophaga,Flavobacteriaceae,Flavobacteriales,Flavobacteria,Bacteroidetes\n",
      "Solobacterium,Erysipelotrichaceae,Erysipelotrichales,Erysipelotrichia,Firmicutes\n",
      "Moryella,Lachnospiraceae,Clostridiales,Clostridia,Firmicutes\n",
      "TM7_genera_incertae_sedis,TM7_genera_incertae_sedis,TM7_genera_incertae_sedis,TM7_genera_incertae_sedis,TM7\n",
      "Staphylococcus,Staphylococcaceae,Bacillales,Bacilli,Firmicutes\n",
      "Filifactor,Peptostreptococcaceae,Clostridiales,Clostridia,Firmicutes\n",
      "Oribacterium,Lachnospiraceae,Clostridiales,Clostridia,Firmicutes\n",
      "Burkholderia,Burkholderiaceae,Burkholderiales,Betaproteobacteria,Proteobacteria\n",
      "Sneathia,Leptotrichiaceae,Fusobacteriales,Fusobacteria,Fusobacteria\n",
      "Treponema,Spirochaetaceae,Spirochaetales,Spirochaetes,Spirochaetes\n",
      "Moraxella,Moraxellaceae,Pseudomonadales,Gammaproteobacteria,Proteobacteria\n",
      "Haemophilus,Pasteurellaceae,Pasteurellales,Gammaproteobacteria,Proteobacteria\n",
      "Selenomonas,Veillonellaceae,Selenomonadales,Negativicutes,Firmicutes\n",
      "Corynebacterium,Corynebacteriaceae,Actinomycetales,Actinobacteria,Actinobacteria\n",
      "Rhizobium,Rhizobiaceae,Rhizobiales,Alphaproteobacteria,Proteobacteria\n",
      "Bradyrhizobium,Bradyrhizobiaceae,Rhizobiales,Alphaproteobacteria,Proteobacteria\n",
      "Methylobacterium,Methylobacteriaceae,Rhizobiales,Alphaproteobacteria,Proteobacteria\n",
      "OD1_genera_incertae_sedis,OD1_genera_incertae_sedis,OD1_genera_incertae_sedis,OD1_genera_incertae_sedis,OD1\n",
      "Finegoldia,Clostridiales_Incertae_Sedis_XI,Clostridiales,Clostridia,Firmicutes\n",
      "Microbacterium,Microbacteriaceae,Actinomycetales,Actinobacteria,Actinobacteria\n",
      "Sphingomonas,Sphingomonadaceae,Sphingomonadales,Alphaproteobacteria,Proteobacteria\n",
      "Chryseobacterium,Flavobacteriaceae,Flavobacteriales,Flavobacteria,Bacteroidetes\n",
      "Bacteroides,Bacteroidaceae,Bacteroidales,Bacteroidia,Bacteroidetes\n",
      "Bdellovibrio,Bdellovibrionaceae,Bdellovibrionales,Deltaproteobacteria,Proteobacteria\n",
      "Streptophyta,Chloroplast,Chloroplast,Chloroplast,Cyanobacteria_Chloroplast\n",
      "Lachnospiracea_incertae_sedis,Lachnospiraceae,Clostridiales,Clostridia,Firmicutes\n",
      "Paracoccus,Rhodobacteraceae,Rhodobacterales,Alphaproteobacteria,Proteobacteria\n",
      "Fastidiosipila,Ruminococcaceae,Clostridiales,Clostridia,Firmicutes\n",
      "Pseudonocardia,Pseudonocardiaceae,Actinomycetales,Actinobacteria,Actinobacteria\n",
      "\n"
     ]
    }
   ],
   "source": [
    "with open(resource_filename('deepbiome', 'tests/data/genus48_dic.csv')) as f:\n",
    "    print(f.read())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example of the input file\n",
    "\n",
    "Below is an example of the input file.\n",
    "This example has 1000 samples' microbiome abandunce. __The order of the microbiome should be same as the order of the microbiome in the Genus level in the tree information above.__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Streptococcus</th>\n",
       "      <th>Tropheryma</th>\n",
       "      <th>Veillonella</th>\n",
       "      <th>Actinomyces</th>\n",
       "      <th>Flavobacterium</th>\n",
       "      <th>Prevotella</th>\n",
       "      <th>Porphyromonas</th>\n",
       "      <th>Parvimonas</th>\n",
       "      <th>Fusobacterium</th>\n",
       "      <th>Propionibacterium</th>\n",
       "      <th>...</th>\n",
       "      <th>Microbacterium</th>\n",
       "      <th>Sphingomonas</th>\n",
       "      <th>Chryseobacterium</th>\n",
       "      <th>Bacteroides</th>\n",
       "      <th>Bdellovibrio</th>\n",
       "      <th>Streptophyta</th>\n",
       "      <th>Lachnospiracea_incertae_sedis</th>\n",
       "      <th>Paracoccus</th>\n",
       "      <th>Fastidiosipila</th>\n",
       "      <th>Pseudonocardia</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>841</td>\n",
       "      <td>0</td>\n",
       "      <td>813</td>\n",
       "      <td>505</td>\n",
       "      <td>5</td>\n",
       "      <td>3224</td>\n",
       "      <td>0</td>\n",
       "      <td>362</td>\n",
       "      <td>11</td>\n",
       "      <td>65</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>87</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2133</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1445</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>573</td>\n",
       "      <td>0</td>\n",
       "      <td>1278</td>\n",
       "      <td>82</td>\n",
       "      <td>85</td>\n",
       "      <td>69</td>\n",
       "      <td>154</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3638</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1259</td>\n",
       "      <td>0</td>\n",
       "      <td>805</td>\n",
       "      <td>650</td>\n",
       "      <td>0</td>\n",
       "      <td>1088</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>74</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>39</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>982</td>\n",
       "      <td>0</td>\n",
       "      <td>327</td>\n",
       "      <td>594</td>\n",
       "      <td>0</td>\n",
       "      <td>960</td>\n",
       "      <td>81</td>\n",
       "      <td>19</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>157</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1162</td>\n",
       "      <td>0</td>\n",
       "      <td>130</td>\n",
       "      <td>969</td>\n",
       "      <td>163</td>\n",
       "      <td>1515</td>\n",
       "      <td>167</td>\n",
       "      <td>4</td>\n",
       "      <td>162</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3945</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 48 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Streptococcus  Tropheryma  Veillonella  Actinomyces  Flavobacterium  \\\n",
       "0            841           0          813          505               5   \n",
       "1           1445           0            1          573               0   \n",
       "2           1259           0          805          650               0   \n",
       "3            982           0          327          594               0   \n",
       "4           1162           0          130          969             163   \n",
       "\n",
       "   Prevotella  Porphyromonas  Parvimonas  Fusobacterium  Propionibacterium  \\\n",
       "0        3224              0         362             11                 65   \n",
       "1        1278             82          85             69                154   \n",
       "2        1088              0           0             74                  0   \n",
       "3         960             81          19              9                  0   \n",
       "4        1515            167           4            162                  3   \n",
       "\n",
       "   ...  Microbacterium  Sphingomonas  Chryseobacterium  Bacteroides  \\\n",
       "0  ...               0            87                 0            0   \n",
       "1  ...               0             1                 2            0   \n",
       "2  ...               0             2                 8            1   \n",
       "3  ...             157             1                 0            4   \n",
       "4  ...               0             9                 0            0   \n",
       "\n",
       "   Bdellovibrio  Streptophyta  Lachnospiracea_incertae_sedis  Paracoccus  \\\n",
       "0             0             0                              0           0   \n",
       "1             0             0                              0           0   \n",
       "2            39             0                              0           0   \n",
       "3            60             0                              0           0   \n",
       "4             0             0                             60           0   \n",
       "\n",
       "   Fastidiosipila  Pseudonocardia  \n",
       "0               0            2133  \n",
       "1               0            3638  \n",
       "2               0            3445  \n",
       "3               0            3507  \n",
       "4               0            3945  \n",
       "\n",
       "[5 rows x 48 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = pd.read_csv(resource_filename('deepbiome', 'tests/data/onefile_x.csv'))\n",
    "x.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Streptococcus</th>\n",
       "      <th>Tropheryma</th>\n",
       "      <th>Veillonella</th>\n",
       "      <th>Actinomyces</th>\n",
       "      <th>Flavobacterium</th>\n",
       "      <th>Prevotella</th>\n",
       "      <th>Porphyromonas</th>\n",
       "      <th>Parvimonas</th>\n",
       "      <th>Fusobacterium</th>\n",
       "      <th>Propionibacterium</th>\n",
       "      <th>...</th>\n",
       "      <th>Microbacterium</th>\n",
       "      <th>Sphingomonas</th>\n",
       "      <th>Chryseobacterium</th>\n",
       "      <th>Bacteroides</th>\n",
       "      <th>Bdellovibrio</th>\n",
       "      <th>Streptophyta</th>\n",
       "      <th>Lachnospiracea_incertae_sedis</th>\n",
       "      <th>Paracoccus</th>\n",
       "      <th>Fastidiosipila</th>\n",
       "      <th>Pseudonocardia</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>1401</td>\n",
       "      <td>4</td>\n",
       "      <td>30</td>\n",
       "      <td>526</td>\n",
       "      <td>0</td>\n",
       "      <td>923</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>127</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4470</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>2655</td>\n",
       "      <td>6</td>\n",
       "      <td>106</td>\n",
       "      <td>74</td>\n",
       "      <td>0</td>\n",
       "      <td>952</td>\n",
       "      <td>76</td>\n",
       "      <td>13</td>\n",
       "      <td>158</td>\n",
       "      <td>125</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2826</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>335</td>\n",
       "      <td>0</td>\n",
       "      <td>71</td>\n",
       "      <td>259</td>\n",
       "      <td>67</td>\n",
       "      <td>718</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>167</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>246</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6527</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>649</td>\n",
       "      <td>69</td>\n",
       "      <td>966</td>\n",
       "      <td>1227</td>\n",
       "      <td>0</td>\n",
       "      <td>508</td>\n",
       "      <td>2</td>\n",
       "      <td>30</td>\n",
       "      <td>550</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4402</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>1258</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1119</td>\n",
       "      <td>0</td>\n",
       "      <td>2348</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>137</td>\n",
       "      <td>176</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2585</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 48 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Streptococcus  Tropheryma  Veillonella  Actinomyces  Flavobacterium  \\\n",
       "995           1401           4           30          526               0   \n",
       "996           2655           6          106           74               0   \n",
       "997            335           0           71          259              67   \n",
       "998            649          69          966         1227               0   \n",
       "999           1258           0            0         1119               0   \n",
       "\n",
       "     Prevotella  Porphyromonas  Parvimonas  Fusobacterium  Propionibacterium  \\\n",
       "995         923             25           0            127                  0   \n",
       "996         952             76          13            158                125   \n",
       "997         718              1           4              4                167   \n",
       "998         508              2          30            550                  0   \n",
       "999        2348             25           0            137                176   \n",
       "\n",
       "     ...  Microbacterium  Sphingomonas  Chryseobacterium  Bacteroides  \\\n",
       "995  ...               0             0                 7            0   \n",
       "996  ...               0             2                 0            0   \n",
       "997  ...               0           246                 0            0   \n",
       "998  ...               0             0                 0            0   \n",
       "999  ...               0             2                 0            0   \n",
       "\n",
       "     Bdellovibrio  Streptophyta  Lachnospiracea_incertae_sedis  Paracoccus  \\\n",
       "995             0             0                              0           0   \n",
       "996             0             0                              0           0   \n",
       "997             6             0                              0           0   \n",
       "998             0             6                              0           0   \n",
       "999             0             0                              0           0   \n",
       "\n",
       "     Fastidiosipila  Pseudonocardia  \n",
       "995               0            4470  \n",
       "996               0            2826  \n",
       "997               0            6527  \n",
       "998               0            4402  \n",
       "999               0            2585  \n",
       "\n",
       "[5 rows x 48 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This file has `.csv` format below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\"Streptococcus\",\"Tropheryma\",\"Veillonella\",\"Actinomyces\",\"Flavobacterium\",\"Prevotella\",\"Porphyromonas\",\"Parvimonas\",\"Fusobacterium\",\"Propionibacterium\",\"Gemella\",\"Rothia\",\"Granulicatella\",\"Neisseria\",\"Lactobacillus\",\"Megasphaera\",\"Catonella\",\"Atopobium\",\"Campylobacter\",\"Capnocytophaga\",\"Solobacterium\",\"Moryella\",\"TM7_genera_incertae_sedis\",\"Staphylococcus\",\"Filifactor\",\"Oribacterium\",\"Burkholderia\",\"Sneathia\",\"Treponema\",\"Moraxella\",\"Haemophilus\",\"Selenomonas\",\"Corynebacterium\",\"Rhizobium\",\"Bradyrhizobium\",\"Methylobacterium\",\"OD1_genera_incertae_sedis\",\"Finegoldia\",\"Microbacterium\",\"Sphingomonas\",\"Chryseobacterium\",\"Bacteroides\",\"Bdellovibrio\",\"Streptophyta\",\"Lachnospiracea_incertae_sedis\",\"Paracoccus\",\"Fastidiosipila\",\"Pseudonocardia\"\n",
      "841,0,813,505,5,3224,0,362,11,65,156,1,55,0,1,20,382,1,333,24,80,43,309,2,3,4,0,1,32,0,2,4,382,0,0,96,23,0,0,87,0,0,0,0,0,0,0,2133\n",
      "1445,0,1,573,0,1278,82,85,69,154,436,3,0,61,440,0,394,83,33,123,0,49,414,0,0,37,0,0,42,0,0,384,27,0,0,0,146,0,0,1,2,0,0,0,0,0,0,3638\n",
      "1259,0,805,650,0,1088,0,0,74,0,155,228,430,765,0,0,11,102,68,90,77,83,322,10,0,7,0,122,76,0,1,25,0,0,0,44,13,0,0,2,8,1,39,0,0,0,0,3445\n",
      "982,0,327,594,0,960,81,19,9,0,45,457,1049,0,3,450,19,170,388,147,0,0,41,63,0,1,0,0,121,0,0,1,0,0,0,0,344,0,157,1,0,4,60,0,0,0,0,3507\n",
      "1162,0,130,969,163,1515,167,4,162,3,12,0,48,73,93,259,52,0,201,85,14,14,434,2,0,0,0,0,187,0,0,188,45,0,0,0,4,0,0,9,0,0,0,0,60,0,0,3945\n",
      "1956,37,41,661,47,1555,374,7,142,19,61,226,0,30,52,0,6,480,142,148,9,575,12,0,0,0,0,3,168,0,56,50,0,0,0,98,989,0,0,12,0,0,0,0,0,0,0,2044\n",
      "1037,14,83,1595,132,305,103,174,1195,0,410,224,1,320,26,0,476,0,7,37,46,61,20,0,0,0,0,0,226,0,239,8,1,0,0,0,0,188,0,20,4,0,4,0,0,0,0,3044\n",
      "641,0,172,179,0,1312,84,9,81,376,128,223,160,0,532,155,89,355,1,282,0,0,25,0,0,43,0,9,311,0,0,0,0,0,0,0,845,0,0,8,0,0,0,0,0,0,0,3980\n",
      "852,146,504,99,2,376,116,152,67,0,120,3,23,2,34,0,127,75,240,60,42,0,9,0,15,0,62,0,13,0,197,187,396,0,0,20,51,0,0,3,0,0,0,0,0,0,0,6007\n",
      "901,3,187,1214,0,1508,675,0,107,49,318,2,393,5,3,65,4,285,79,11,0,0,4,3,0,0,1,0,729,0,0,173,0,0,0,0,254,0,0,0,0,0,1,0,29,0,0,2997\n",
      "677,60,635,45,268,2461,466,9,338,0,97,63,45,82,128,1,139,4,323,6,0,0,58,0,0,0,0,0,36,0,646,29,0,0,0,0,120,0,0,41,0,0,0,0,0,0,0,3223\n",
      "413,0,355,1258,0,583,48,107,250,5,102,204,287,4,0,18,2,145,454,11,0,79,104,25,164,1,0,100,55,0,1,33,206,0,0,10,81,0,0,0,0,0,0,0,0,0,0,4895\n",
      "351,99,17,268,0,912,4,96,847,472,67,8,440,16,0,0,247,0,165,83,0,0,0,0,4,0,0,0,275,0,21,1968,3,0,0,0,173,0,0,1,37,0,0,0,0,0,53,3373\n",
      "1829,0,32,77,0,1971,8,6,319,1,8,140,302,165,177,0,166,27,857,19,0,0,155,0,0,579,127,112,54,0,1,19,0,0,0,0,143,0,0,8,51,0,0,0,0,0,0,2647\n",
      "1089,0,4,30,0,847,51,42,48,0,211,1,24,0,81,1,687,494,758,27,0,0,123,7,0,0,0,1,310,0,6,4,780,0,0,4,1,0,0,0,0,0,2,0,0,0,0,4367\n",
      "1761,0,60,517,4,576,63,0,169,0,12,437,0,7,130,0,2,7,47,346,115,0,539,0,2,0,0,0,515,0,0,68,5,0,0,0,315,0,0,16,0,0,0,0,0,0,0,4287\n",
      "938,0,601,794,0,1836,52,6,10,0,1104,8,219,168,174,3,0,12,425,885,0,15,268,34,0,141,2,0,8,0,0,5,8,0,0,0,2,0,0,0,0,0,0,0,0,0,0,2282\n",
      "882,8,110,975,0,1042,11,3,211,0,15,22,56,0,47,140,5,4,194,109,0,403,129,6,0,10,0,3,19,0,1,591,2,2,0,6,0,0,0,1,0,0,0,0,0,0,0,4993\n",
      "1395,0,76,60,0,916,2,466,353,13,1,159,369,0,92,2,14,528,103,133,100,4,17,0,0,0,0,0,7,0,0,6,48,0,0,44,578,0,0,0,0,0,0,0,0,0,0,4514\n",
      "1150,3,168,1265,0,1328,14,0,432,14,140,0,1,179,77,0,92,55,33,123,0,8,844,0,0,82,34,113,14,0,0,99,26,0,0,0,14,14,0,24,49,0,0,0,0,0,0,3605\n",
      "352,0,20,48,0,1035,269,1,1,53,122,1,0,0,107,0,12,414,253,483,335,3,117,0,0,1,21,37,7,0,8,13,15,0,0,186,0,0,0,18,0,57,0,0,0,0,0,6011\n",
      "1120,0,124,1198,0,2161,795,1,483,0,0,5,8,16,78,7,22,3,62,203,0,0,148,0,0,68,0,2,22,0,0,23,148,0,0,0,127,0,0,2,0,0,0,0,0,0,0,3174\n",
      "406,5,6,1191,0,2582,239,155,81,0,2,183,4,7,483,0,190,0,10,8,0,0,447,4,226,0,59,4,146,0,22,225,0,0,0,0,34,0,0,1,0,0,0,0,0,0,0,3280\n",
      "439,133,130,108,0,1511,50,180,33,0,110,86,539,0,88,145,7,11,745,487,0,40,176,43,8,103,0,6,193,0,4,306,6,0,0,0,2,1,0,0,0,0,0,0,0,0,0,4310\n",
      "513,0,130,583,2,781,3,34,201,84,3,1358,59,3,343,117,148,278,0,335,0,51,80,47,0,5,63,775,35,0,16,562,0,0,0,0,62,0,0,5,0,0,18,1,0,2,0,3303\n",
      "229,0,126,179,0,1581,61,26,1018,25,27,73,289,25,9,2,4,150,32,130,0,84,78,102,0,29,1,11,143,0,1,15,0,0,0,471,179,0,0,398,0,0,0,0,0,0,0,4502\n",
      "1378,3,327,351,3,1129,103,35,140,245,23,1,251,0,13,1128,0,0,81,16,0,0,193,31,0,0,0,255,273,0,1,15,8,0,0,0,29,0,6,0,0,0,1,0,0,0,2,3959\n",
      "701,0,402,918,0,1518,116,234,881,252,144,14,4,0,18,374,22,8,0,363,1,0,37,0,0,0,0,0,187,0,0,7,5,0,0,0,0,0,0,2,120,0,0,1,0,0,0,3671\n",
      "1116,1,630,232,0,1291,318,93,423,0,166,122,432,0,13,0,6,54,5,3,0,11,2019,0,0,51,0,0,88,0,0,91,1,0,0,34,0,0,0,0,0,0,0,1,0,0,0,2799\n",
      "1356,813,40,210,0,1337,628,0,134,0,145,203,247,1,28,5,25,0,1,373,58,0,93,2,0,80,260,0,18,0,0,196,0,2,0,0,0,0,4,0,4,0,0,0,0,0,0,3737\n",
      "470,0,167,18,41,882,318,820,189,38,521,65,58,132,25,257,43,6,973,46,132,114,17,48,0,0,51,0,4,0,0,131,76,0,0,0,106,0,0,0,2,0,0,0,0,0,0,4250\n",
      "487,16,412,945,1,535,1,0,122,0,530,392,1,182,167,1,1,44,374,61,73,9,33,0,8,0,0,9,484,0,52,66,4,0,0,0,571,0,0,1,0,0,21,0,0,0,0,4397\n",
      "994,0,1190,98,0,917,16,9,357,0,101,15,0,0,48,2,8,0,25,40,0,286,27,0,0,75,243,0,1610,0,0,387,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3477\n",
      "383,6,1452,690,4,775,2,58,287,0,833,0,83,1,5,0,50,400,28,120,0,16,6,0,3,274,0,0,313,0,0,0,0,0,0,4,27,0,0,0,0,0,72,0,0,0,0,4108\n",
      "179,101,59,491,0,1902,59,0,150,0,11,75,131,461,112,0,0,462,0,6,0,225,78,50,96,21,1,1,35,0,0,0,79,162,172,0,250,0,0,0,19,0,0,0,0,0,0,4612\n",
      "822,0,168,475,0,1640,600,6,247,13,138,2,51,2,64,169,24,55,360,126,0,841,94,158,0,0,0,27,448,0,0,190,0,0,0,0,5,0,0,0,22,0,0,0,0,0,0,3253\n",
      "525,50,142,278,1,1005,148,26,905,5,256,9,1536,37,6,116,48,13,116,14,23,0,0,0,0,1,1,1,8,0,0,48,7,0,0,0,289,0,0,0,0,0,0,9,0,0,0,4377\n",
      "660,14,132,252,64,597,0,206,13,23,12,233,160,0,212,21,281,160,45,102,4,133,44,0,0,88,53,0,204,0,20,127,13,0,0,0,1,0,0,0,0,0,0,0,0,0,0,6126\n",
      "480,22,72,170,222,1481,6,2,585,211,448,503,11,48,14,527,832,0,9,192,341,272,2,0,0,50,2,0,52,0,0,86,192,0,0,0,14,0,0,0,0,0,0,1,0,0,0,3153\n",
      "741,23,189,143,3,2487,35,201,312,0,3,233,0,1,150,12,495,0,1,102,285,0,507,26,7,62,0,1,41,0,0,0,588,0,0,29,18,0,0,0,0,0,0,0,0,0,0,3305\n",
      "623,168,18,1993,0,1829,157,0,146,0,177,1,86,8,1232,0,6,0,5,14,3,0,59,0,5,0,122,8,25,0,2,202,265,0,0,0,201,0,0,0,12,0,0,0,0,0,0,2633\n",
      "835,0,79,117,17,1140,559,59,350,262,242,178,6,178,0,0,59,133,27,62,39,20,5,0,69,3,0,13,449,0,0,0,0,0,0,0,178,0,13,0,0,0,0,0,0,0,0,4908\n",
      "2196,0,614,328,0,1809,467,70,470,3,131,0,2,1,1,4,3,172,417,14,14,0,231,0,0,1,4,47,258,0,0,73,133,0,0,0,0,0,3,5,0,0,0,0,0,0,0,2529\n",
      "618,0,73,740,0,1253,21,115,508,8,124,15,221,0,88,14,33,304,733,10,258,177,305,0,0,46,0,0,342,0,13,512,0,0,0,0,117,0,0,0,0,0,0,0,0,0,0,3352\n",
      "835,7,94,769,1,1235,65,97,629,0,115,436,42,0,265,31,70,15,396,99,0,611,66,26,0,0,32,1,86,0,0,395,935,0,0,0,18,0,0,140,0,0,0,0,0,0,0,2489\n",
      "587,24,12,1374,0,2272,96,109,789,26,238,1,1,46,1,2,10,6,120,80,19,0,13,10,0,5,0,8,175,0,0,83,0,0,0,0,17,0,3,0,0,0,0,0,0,0,0,3873\n",
      "750,0,261,235,5,592,30,0,704,579,0,12,61,2,64,576,0,100,0,44,26,0,343,0,0,13,12,4,32,0,0,451,16,0,0,440,186,0,0,22,12,7,1,0,0,21,0,4399\n",
      "940,1,12,2219,2,447,203,35,451,10,76,22,183,5,78,16,0,0,194,394,68,0,14,0,0,305,7,0,567,0,1,183,410,0,0,1,27,0,0,0,0,0,0,0,0,0,0,3129\n",
      "516,2,300,127,0,831,494,18,798,0,0,589,342,53,86,922,140,5,118,207,0,2,37,31,5,77,144,0,113,0,169,34,195,0,0,0,5,0,0,60,37,216,0,0,0,0,0,3327\n",
      "449,8,130,731,8,1533,220,0,147,3,253,248,6,20,77,50,9,0,6,255,0,0,138,0,0,0,10,390,43,0,0,56,3,0,0,0,278,0,0,0,0,0,141,1,0,0,0,4787\n",
      "429,0,0,460,0,937,899,222,58,0,38,62,3,6,657,0,130,20,81,552,41,4,184,72,38,3,12,0,489,0,14,317,307,0,0,0,101,0,0,0,0,0,0,0,0,0,0,3864\n",
      "1453,368,215,377,2,1464,1,22,346,0,473,114,16,0,1,24,47,0,458,349,208,0,79,117,6,199,0,28,542,0,11,46,3,0,0,0,290,0,0,1,0,0,0,0,0,0,0,2740\n",
      "946,200,7,506,183,366,5,124,152,571,302,47,70,5,6,55,5,42,272,470,13,367,3,161,31,0,0,2,599,21,0,3,0,0,0,0,263,0,0,104,0,0,0,7,0,0,0,4092\n",
      "2039,1,288,1033,302,562,313,1,50,0,4,3,2,3,41,209,151,0,637,1031,43,5,0,0,0,1,6,101,318,0,1,20,0,0,0,0,13,0,0,7,0,0,0,0,0,0,0,2815\n",
      "707,81,332,103,436,1272,0,87,1262,0,102,69,12,22,2,2,436,507,425,177,0,0,425,0,0,0,0,0,90,2,207,272,487,0,0,477,4,0,0,0,0,0,1,0,0,0,0,2001\n",
      "534,0,94,1573,0,1752,75,0,830,7,35,0,3,5,135,16,502,65,121,4,0,0,17,1,0,314,0,262,16,0,2,274,47,0,0,162,5,4,0,3,0,185,0,0,0,0,0,2957\n",
      "1160,9,122,189,14,1479,305,158,291,9,39,4,301,0,376,0,85,0,532,32,6,621,990,0,71,61,1,4,24,0,0,160,104,0,0,0,33,0,0,58,0,0,0,27,0,7,0,2728\n",
      "564,2,31,423,0,2131,604,1,224,2,4,69,0,0,371,0,62,573,3,0,0,0,52,0,0,0,0,42,210,0,1,258,27,0,0,0,0,0,0,312,10,0,0,0,0,15,0,4009\n",
      "779,0,11,47,0,1710,568,2,188,0,255,4,2,88,75,95,786,421,698,72,7,0,31,0,21,137,0,10,354,8,0,379,103,0,0,0,126,0,0,0,0,0,0,0,0,0,0,3023\n",
      "1015,353,145,58,127,1030,47,0,39,0,410,64,22,104,212,1,260,51,86,30,8,146,78,2,0,22,22,0,19,0,43,982,382,0,0,10,0,0,26,0,154,0,0,61,0,0,0,3991\n",
      "1123,0,188,483,0,649,72,19,386,43,4,35,3,150,10,66,46,4,36,0,169,445,0,0,57,2,9,132,1286,0,0,38,12,0,0,16,22,0,0,15,0,0,0,0,0,0,0,4480\n",
      "902,0,336,744,0,1350,10,0,109,397,0,968,53,0,0,1,18,0,560,0,12,0,256,92,237,8,272,4,81,78,34,11,78,0,0,0,13,0,0,0,22,5,0,0,0,0,0,3349\n",
      "1586,0,11,473,0,2151,138,373,6,0,13,482,175,16,1,222,8,13,32,362,0,2,29,0,29,86,0,0,12,0,84,582,24,0,0,0,201,0,0,0,0,3,29,0,0,0,0,2857\n",
      "965,0,142,930,0,510,332,282,9,0,109,1,51,2,120,0,0,542,439,0,0,0,148,247,0,0,0,304,146,0,123,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,4501\n",
      "922,0,900,203,0,1362,21,384,26,0,523,16,42,10,42,3,29,3,9,204,0,0,13,2,57,65,0,6,108,0,140,33,43,0,0,0,70,0,0,0,0,0,0,0,0,0,0,4764\n",
      "826,0,61,84,6,1248,112,7,365,1071,193,45,0,0,1698,0,2,15,0,692,5,88,0,17,40,18,19,0,433,0,0,1,28,0,0,0,36,0,0,43,0,0,0,0,0,0,0,2847\n",
      "1138,0,504,573,3,1529,346,72,166,0,190,0,131,38,18,0,261,142,10,17,149,0,726,0,20,12,4,0,32,0,0,58,0,0,0,2,37,0,0,0,0,0,0,0,0,0,0,3822\n",
      "1610,0,17,35,0,721,597,2,588,24,32,6,187,15,31,0,15,3,531,190,34,75,10,0,0,6,0,0,250,0,0,177,44,0,0,0,78,0,0,0,0,0,25,0,0,0,0,4697\n",
      "1351,0,202,492,34,1607,639,28,197,0,55,0,155,0,174,0,10,0,158,494,47,70,32,227,0,0,0,0,445,0,0,120,1,0,0,0,42,0,0,12,0,0,0,0,0,0,0,3408\n",
      "1255,0,181,78,0,855,33,0,394,0,300,2,18,54,163,4,146,1,171,173,0,3,183,1093,0,274,288,0,336,0,0,201,13,0,0,12,24,1,0,0,0,0,0,0,0,0,0,3744\n",
      "1430,253,2,485,0,54,99,0,122,21,40,0,12,0,0,0,5,116,469,17,969,0,31,173,0,41,39,0,661,0,288,0,934,0,0,43,46,0,0,20,0,0,0,0,0,0,0,3630\n",
      "266,0,60,414,0,668,88,55,71,0,88,38,3,72,0,4,499,101,78,7,8,558,0,40,0,44,154,109,241,0,292,494,23,0,0,0,850,0,0,0,0,0,0,0,0,0,0,4675\n",
      "974,402,252,441,0,1557,40,0,188,1,231,0,2,57,1,0,655,462,468,143,239,0,60,0,0,0,0,0,56,0,0,35,10,4,0,0,254,0,0,0,0,0,0,0,0,0,173,3295\n",
      "710,503,53,94,0,1490,2,5,269,1,24,0,12,0,97,108,285,152,329,2,59,8,99,40,0,0,0,0,91,11,183,374,2,0,20,0,0,0,0,0,461,0,0,0,0,0,0,4516\n",
      "2075,309,141,83,19,1424,184,27,97,85,180,0,10,70,34,4,266,0,488,145,0,17,78,1,0,0,53,243,177,0,0,12,130,0,0,0,76,0,0,3,4,0,0,0,0,0,0,3565\n",
      "1319,3,1019,4,0,1102,1136,18,436,0,85,139,129,0,132,6,2,1,0,1,0,244,73,1,0,9,0,0,4,0,0,0,67,0,0,0,0,0,94,0,0,0,0,0,0,0,0,3976\n",
      "262,0,46,421,0,1027,501,62,377,1114,5,18,0,15,56,0,447,313,0,734,69,0,14,16,0,2,2,79,222,0,0,60,11,0,0,241,12,0,5,0,0,0,0,0,0,6,0,3863\n",
      "964,0,132,214,32,1532,130,11,1138,0,20,0,0,0,166,0,359,25,110,11,0,221,111,0,0,0,15,0,11,3,1,98,154,0,0,0,6,0,0,1,0,0,70,0,0,0,0,4465\n",
      "1813,0,110,549,20,428,1,177,131,111,0,0,5,0,3,0,0,0,318,4,7,0,52,0,0,305,0,23,441,5,124,8,829,0,0,5,10,0,4,25,0,0,0,0,0,0,0,4492\n",
      "942,3,424,292,0,658,191,37,147,0,419,50,1,542,13,0,11,6,1090,4,45,1,122,95,4,0,242,349,148,0,537,113,0,0,11,0,12,0,0,0,0,0,0,7,0,0,0,3484\n",
      "298,0,672,366,0,1176,3,8,304,253,18,432,31,0,2,50,299,6,3,32,1,618,16,258,0,0,0,0,182,0,0,1893,13,0,0,75,30,0,0,1,0,0,0,0,0,0,0,2960\n",
      "412,0,33,663,0,678,300,308,347,46,122,220,1,0,143,1,7,0,68,40,3,4,521,0,0,0,0,0,12,0,407,120,0,0,0,0,389,0,0,17,44,0,14,0,0,3,0,5077\n",
      "931,6,138,452,0,511,47,0,60,21,0,0,317,4,0,5,31,177,4,22,14,0,40,0,0,72,50,0,645,0,0,308,11,0,0,0,36,0,0,0,0,176,1,0,0,0,0,5921\n",
      "1836,605,11,72,0,2037,155,50,505,34,255,0,0,0,100,0,643,52,164,46,0,0,62,0,83,22,0,0,81,0,0,374,0,4,0,0,41,0,0,11,0,0,0,0,0,0,0,2757\n",
      "1304,2,37,119,76,1263,278,148,18,0,202,3,62,28,330,0,117,33,271,0,0,0,302,0,0,496,0,0,394,0,0,135,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,4381\n",
      "1283,90,350,408,0,764,453,4,66,0,30,0,0,60,0,12,5,30,59,225,0,25,45,0,2,0,105,5,361,0,300,259,244,0,0,115,17,0,0,7,0,0,0,0,0,0,0,4676\n",
      "675,72,166,372,27,1507,8,73,720,0,4,1,0,0,8,19,108,0,746,44,0,0,140,0,0,100,0,0,191,104,1,604,3,0,134,47,126,0,0,1008,34,0,0,0,50,0,0,2908\n",
      "2130,168,163,154,244,1733,192,19,3,57,58,1,97,0,104,34,2,8,1195,23,288,114,77,214,0,27,19,0,10,0,0,479,0,0,0,0,159,0,0,155,0,0,0,0,0,0,0,2073\n",
      "488,0,608,808,0,621,0,35,427,0,319,522,0,0,320,13,292,0,67,21,0,1,520,0,0,18,0,0,281,0,19,8,0,0,10,0,17,0,0,0,0,0,30,0,0,0,0,4555\n",
      "793,60,872,436,28,1153,0,28,18,1,0,4,145,50,216,0,4,1,93,318,44,30,22,81,0,0,0,467,72,4,0,3,0,0,0,53,99,0,0,0,413,0,0,0,0,0,0,4492\n",
      "556,0,343,804,4,1317,60,39,644,1,94,148,0,0,50,0,2,530,45,70,0,0,135,0,0,325,6,0,25,0,13,166,82,0,0,0,0,0,83,0,18,0,0,0,0,0,0,4440\n",
      "422,1433,55,365,0,513,45,9,251,10,17,31,3,400,387,0,3,88,338,4,0,95,7,8,192,180,3,6,118,0,0,369,30,0,0,240,886,0,69,11,0,0,0,0,0,5,0,3407\n",
      "818,0,411,362,332,654,174,47,137,0,223,515,15,312,614,0,255,117,58,275,0,99,159,0,0,0,83,506,380,0,1,371,48,0,0,83,108,0,0,0,7,1,0,0,0,0,0,2835\n",
      "875,0,323,50,13,1542,11,84,40,3,937,0,19,0,453,149,138,1,199,391,129,2,6,0,132,0,0,1251,75,0,0,10,0,0,0,0,2,0,15,39,0,0,1,0,0,0,0,3110\n",
      "1029,224,830,561,109,1795,17,182,40,11,1,8,2,47,88,0,516,0,4,18,5,62,0,713,0,148,0,15,204,0,3,489,1100,0,0,2,122,0,2,0,0,0,0,0,0,0,0,1653\n",
      "635,59,392,622,0,2423,4,11,294,148,60,27,164,15,38,0,7,56,572,127,5,0,922,107,5,2,0,0,232,0,172,220,62,0,0,14,0,0,0,0,0,0,0,0,0,0,0,2605\n",
      "673,13,268,526,0,2855,549,0,245,2,1,30,3,0,2,24,15,1,108,2,0,0,352,0,0,244,22,1,22,0,0,18,8,0,0,23,108,4,0,0,0,0,0,0,0,0,0,3881\n",
      "1239,7,60,1294,1,643,16,129,799,0,86,11,10,0,398,11,91,1,28,101,4,271,1,316,0,0,0,6,70,0,0,14,0,0,0,4,3,0,0,0,0,0,0,0,0,0,0,4386\n",
      "1470,0,334,281,0,975,2,225,12,0,22,631,23,0,127,7,12,334,2,36,0,0,644,27,12,5,1,0,683,0,1,276,26,0,0,5,75,0,0,1,0,0,18,0,0,0,0,3733\n",
      "641,1,135,649,0,1211,849,10,496,5,8,0,0,0,10,3,5,11,10,999,137,39,375,0,0,0,19,0,7,1,364,88,72,5,0,0,2,0,1,0,0,0,2,0,0,0,0,3845\n",
      "1163,0,786,861,0,785,86,599,291,0,239,205,3,0,47,0,37,2,4,141,158,0,240,40,0,0,7,9,39,0,0,57,20,1,0,0,364,0,0,0,0,0,0,0,0,0,0,3816\n",
      "568,2,523,348,0,1221,22,75,361,20,3,172,280,117,59,90,583,0,203,35,0,6,6,243,0,553,0,0,742,0,0,19,0,0,0,4,110,0,0,163,0,0,7,0,0,0,0,3465\n",
      "493,0,96,79,0,2091,238,72,258,0,422,146,0,36,8,104,1,5,42,49,0,1,138,0,40,0,0,2,419,0,0,56,506,0,0,0,4,0,0,7,0,0,5,0,0,0,0,4682\n",
      "395,0,46,1373,0,1394,55,0,48,34,48,0,24,124,123,336,40,23,17,1,638,0,63,7,0,0,0,0,5,0,0,109,243,0,0,0,3,0,0,2,0,0,0,0,0,0,0,4849\n",
      "694,0,6,414,0,1196,168,122,22,0,83,83,180,0,21,21,28,7,142,75,8,116,5,8,0,5,41,3,816,0,0,5,279,0,0,253,44,0,0,0,48,0,0,0,0,13,0,5094\n",
      "855,110,367,662,0,1401,4,107,29,2,20,7,101,0,108,29,358,2,53,18,7,9,639,2,0,1,4,0,202,0,0,53,8,0,0,0,244,0,0,14,0,0,0,0,0,0,0,4584\n",
      "600,0,1,148,0,1042,423,3,15,3,30,995,47,0,744,1,0,0,263,53,0,115,206,0,0,0,0,0,22,0,0,0,12,0,0,0,22,0,0,0,0,0,0,0,0,0,0,5255\n",
      "312,0,93,1111,0,1802,227,30,0,0,6,25,9,0,60,47,178,0,270,864,1,1,383,0,0,50,0,73,199,0,0,17,419,0,0,0,83,0,0,0,0,0,0,0,0,0,0,3740\n",
      "523,0,98,197,497,2342,15,0,662,0,52,222,10,12,23,37,203,0,423,444,1,0,61,39,0,18,109,2,148,0,1,32,15,0,0,0,14,0,0,177,0,0,0,0,0,0,0,3623\n",
      "297,0,175,232,0,484,0,170,35,0,358,31,2,0,2,0,6,0,104,22,168,150,42,1,0,57,0,2,409,0,1,511,551,0,0,0,16,0,53,6,0,0,13,0,0,0,0,6102\n",
      "936,26,35,73,1,958,4,0,1274,0,219,5,170,1,17,1,103,437,168,124,105,437,141,0,0,3,0,139,361,0,0,229,2,0,0,0,36,0,0,0,0,0,0,0,0,0,0,3995\n",
      "2003,0,304,329,0,852,121,9,209,5,95,135,693,0,216,0,33,6,2,1,0,2,416,38,0,111,3,0,122,0,0,43,134,0,0,0,1,0,0,0,0,0,0,17,0,0,0,4100\n",
      "724,190,18,877,0,1560,1002,725,429,75,0,0,49,17,103,0,25,0,15,52,0,0,638,0,0,24,0,0,267,15,0,146,2,0,0,1,0,33,0,0,0,0,0,0,0,0,0,3013\n",
      "646,4,332,674,0,861,381,6,897,4,145,149,38,36,108,3,1072,1,16,0,0,0,84,0,0,7,0,261,491,0,24,273,2,0,0,23,0,0,0,0,23,10,7,0,0,0,0,3422\n",
      "261,0,11,213,24,2144,35,337,178,45,423,0,127,13,72,0,0,0,2,11,196,0,13,0,0,0,0,111,261,0,0,597,284,0,0,47,10,0,0,0,1,0,0,0,2,0,0,4582\n",
      "1387,5,154,44,0,893,0,80,234,117,418,196,0,1,269,0,203,75,45,0,10,0,142,12,0,16,5,0,58,2,266,159,0,0,0,160,2,261,0,0,0,0,0,0,0,0,0,4786\n",
      "1154,31,13,1332,0,654,504,13,127,428,191,39,15,0,1,0,0,0,62,23,0,0,1,1,0,0,1,0,307,0,0,336,366,0,0,0,236,0,0,0,0,0,0,0,0,0,0,4165\n",
      "1315,5,309,698,0,759,31,8,110,26,69,245,622,232,74,0,22,0,17,7,4,0,6,6,0,2,1,272,443,0,0,93,61,0,0,0,22,0,0,0,0,0,1,0,0,0,0,4540\n",
      "1196,49,1,675,0,1126,412,5,24,15,674,157,36,0,1,1,0,0,161,79,958,3,203,0,0,0,8,0,3,2,14,242,0,0,0,0,157,0,0,1,0,184,0,0,0,0,0,3613\n",
      "267,0,228,584,58,634,450,0,240,0,137,2,202,0,48,58,20,61,75,151,2,0,424,0,0,10,35,85,16,0,805,0,846,0,0,3,4,0,0,0,0,0,49,0,0,0,0,4506\n",
      "1589,7,101,23,0,3168,54,1,20,43,124,129,14,16,107,27,0,0,2,20,0,0,25,0,0,8,0,31,2,0,0,111,131,0,0,0,0,0,0,0,0,0,0,1,0,0,0,4246\n",
      "2039,17,76,177,0,1770,15,851,320,0,366,52,314,0,39,0,208,0,9,71,17,166,26,1,0,0,8,75,133,0,0,4,0,0,0,0,121,0,0,0,0,3,8,0,0,0,0,3114\n",
      "1040,21,1246,901,412,789,809,0,76,0,0,158,7,79,55,0,31,0,157,2,118,51,191,0,11,2,0,15,188,0,678,46,1,0,0,0,162,0,0,24,2,1,0,0,0,0,0,2727\n",
      "341,70,337,88,2,322,415,2,494,4,97,107,148,0,217,781,0,27,161,421,35,0,722,5,4,0,0,31,3,0,19,281,1,0,0,0,1203,0,0,0,2,0,0,0,0,0,0,3660\n",
      "633,0,505,43,220,993,55,326,270,2,375,14,68,258,88,51,28,1,4,153,12,429,386,0,0,48,294,31,129,0,2,38,147,0,0,0,293,0,13,0,0,0,0,0,0,0,0,4091\n",
      "667,109,472,85,2,998,125,66,479,161,0,9,217,0,0,0,46,1,18,37,0,0,4,6,0,48,7,81,390,0,12,52,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,5878\n",
      "1427,0,210,376,49,1506,10,33,4,10,29,350,21,62,254,14,78,0,2,211,3,0,10,35,1188,18,0,12,34,0,25,330,261,0,0,1,4,0,0,244,7,0,0,0,0,0,0,3182\n",
      "704,0,771,390,0,2541,82,27,212,13,498,244,17,161,0,12,38,0,22,533,58,62,504,0,303,30,0,1,70,0,5,11,5,5,0,0,1,0,0,0,0,0,0,33,0,0,0,2647\n",
      "1450,3,99,303,4,385,267,83,182,55,44,0,329,11,80,1,294,130,22,3,0,6,205,0,0,1,18,8,88,25,0,6,29,0,260,0,17,0,0,420,0,0,0,0,0,0,0,5172\n",
      "431,1,118,195,227,1150,579,18,77,0,16,4,275,196,0,44,16,1011,788,13,0,0,20,8,0,4,0,1,130,0,0,32,303,327,0,0,70,0,93,3,0,0,64,0,0,0,0,3786\n",
      "150,0,757,821,1,535,48,0,108,0,132,7,288,431,1,1,56,68,122,300,14,0,276,0,0,34,6,0,438,0,2,2,0,0,0,0,63,0,0,0,0,0,0,0,0,0,0,5339\n",
      "648,0,239,947,0,935,4,0,189,12,217,0,33,0,3,0,808,6,99,612,0,29,12,0,0,11,5,94,10,0,0,23,0,0,0,0,32,0,0,2,0,0,1,0,0,0,0,5029\n",
      "2104,63,4,505,0,1186,420,95,320,54,69,157,258,307,332,162,1,20,0,111,42,16,85,78,24,0,1,1,277,0,0,39,281,0,0,0,1,0,0,0,2,0,1,0,0,0,0,2984\n",
      "684,0,895,53,159,500,199,0,264,2,342,0,12,5,1,0,329,202,446,78,66,0,419,0,0,0,0,1,726,0,91,256,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4149\n",
      "1041,96,176,378,0,2298,56,670,253,0,1,740,43,89,117,245,12,1,23,39,0,2,171,21,1,0,0,0,72,7,0,827,73,0,0,37,75,0,0,0,0,0,0,0,0,0,0,2436\n",
      "864,711,350,1101,0,2048,80,7,25,1,245,19,228,0,2,0,134,0,50,14,5,0,307,13,0,33,0,360,5,0,5,85,116,182,3,77,0,0,0,0,0,0,0,18,0,0,0,2912\n",
      "974,22,88,247,8,1109,115,13,131,0,17,130,6,40,686,0,95,296,32,9,0,284,81,338,0,0,328,0,109,0,25,78,1,0,0,0,65,0,0,1,0,0,0,0,0,0,0,4672\n",
      "37,0,344,263,0,647,73,0,12,16,424,0,47,0,113,1,402,112,14,0,225,2,47,0,1,107,88,0,1064,0,0,1066,1129,0,25,9,336,0,0,0,0,0,4,0,0,0,0,3392\n",
      "1616,9,104,493,98,676,83,0,101,126,4,0,81,0,101,0,428,0,248,181,70,16,3,7,0,0,52,0,91,3,8,219,495,0,0,0,0,0,0,0,96,0,2,0,13,0,0,4576\n",
      "765,349,441,285,78,2028,418,1,313,0,147,0,153,1,1,183,85,0,274,572,0,202,29,131,0,51,0,53,44,0,0,11,0,389,0,0,18,0,0,0,0,0,0,0,0,0,0,2978\n",
      "2120,0,23,538,0,786,130,1,535,0,67,103,19,2,0,196,14,0,212,119,14,0,242,0,43,1,12,126,191,0,0,38,161,0,0,0,0,0,0,138,0,0,0,0,0,0,0,4169\n",
      "161,206,261,787,5,1441,79,1059,14,92,22,17,17,4,98,96,14,24,131,278,15,0,0,40,3,0,7,0,227,49,52,85,25,0,0,0,4,0,0,0,0,0,0,23,0,11,0,4653\n",
      "369,0,1,240,0,2111,33,0,331,1,5,41,0,151,0,365,559,61,478,257,232,0,78,29,0,0,0,0,457,0,27,0,71,0,0,80,73,0,0,0,0,0,0,0,0,0,0,3950\n",
      "156,310,43,232,81,1570,164,10,212,0,29,6,494,25,5,255,0,89,10,1,21,9,225,0,0,0,0,6,149,0,0,1303,102,0,0,0,72,0,0,4,0,0,0,0,0,8,0,4409\n",
      "650,0,19,576,0,2185,18,89,265,0,50,14,16,61,48,0,76,0,24,751,0,77,81,192,0,0,0,0,362,0,0,167,395,0,0,2,0,0,0,12,0,0,0,1,0,5,0,3864\n",
      "2143,25,33,336,0,2094,40,1,109,0,485,26,54,0,126,251,58,30,115,89,14,0,11,479,0,60,1,75,287,0,0,385,24,0,0,0,487,0,0,0,0,0,64,0,0,0,0,2098\n",
      "773,1,562,611,7,2419,251,101,312,6,476,15,69,0,584,267,7,22,4,30,0,0,8,0,13,82,0,0,25,0,74,12,3,0,0,0,359,0,0,3,14,0,688,0,0,0,0,2202\n",
      "1238,0,8,54,0,1887,58,0,433,83,0,1435,3,104,286,0,7,14,154,4,49,1,50,2,441,0,0,102,58,0,0,98,3,0,0,0,11,0,0,24,0,0,0,407,0,0,557,2429\n",
      "870,1,147,97,27,724,130,15,274,27,199,36,2,0,933,128,24,0,202,40,10,0,23,16,0,0,0,23,905,0,81,0,518,0,0,483,66,0,0,9,0,0,0,0,0,0,0,3990\n",
      "660,225,201,1088,32,2427,395,0,92,0,16,244,61,401,5,1,91,145,122,18,0,16,50,1,0,373,0,2,326,0,34,529,167,0,0,9,2,0,0,0,0,0,3,0,0,0,0,2264\n",
      "268,0,101,450,0,595,59,0,9,2,651,177,31,10,37,72,3,153,26,2,7,68,84,0,8,255,0,0,352,0,0,322,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,6256\n",
      "1318,0,13,235,0,551,208,29,31,0,0,471,68,25,325,2,40,425,167,33,42,0,641,0,1,1,2,75,50,1,0,300,63,0,0,0,1,0,901,75,25,0,0,0,26,0,0,3855\n",
      "1801,0,35,42,1,772,1560,0,324,2,184,10,2,0,380,0,0,1,16,2,0,8,67,0,37,3,0,0,408,0,2,2,15,0,0,0,711,0,0,0,0,0,0,0,0,0,1,3614\n",
      "596,11,297,29,0,1242,102,45,11,572,18,153,0,0,87,20,107,39,7,0,0,0,166,0,0,356,0,0,89,0,162,4,163,0,0,0,184,0,0,5,0,0,19,0,0,0,0,5516\n",
      "409,0,171,481,1,2338,9,363,514,406,30,0,6,1,209,14,230,0,31,5,1,176,55,0,32,190,176,0,216,0,0,304,511,0,0,0,56,0,0,0,0,0,0,0,0,0,0,3065\n",
      "356,0,75,353,178,321,409,751,116,177,583,1,0,0,59,32,95,858,103,64,244,0,71,0,0,0,0,0,244,9,18,74,508,0,0,0,116,0,0,1,0,1,7,0,0,0,0,4176\n",
      "866,50,183,151,255,859,300,26,476,0,167,3,1,43,1,32,6,16,91,70,0,30,15,299,0,0,0,1,793,0,22,64,171,0,0,0,29,0,0,0,0,0,0,0,0,0,0,4980\n",
      "2345,285,104,216,259,1750,718,12,402,108,190,185,129,29,433,243,56,35,61,59,128,20,0,1,0,0,4,0,118,0,0,69,0,0,0,0,291,0,0,0,0,0,0,1,0,0,0,1749\n",
      "1044,0,81,413,0,254,1,474,35,50,154,151,39,60,194,0,107,0,6,1416,0,298,338,0,0,8,0,0,78,0,0,17,0,0,1,0,100,0,0,1,105,0,0,0,0,0,0,4575\n",
      "682,0,129,152,0,708,55,735,164,0,230,0,1735,3,379,11,42,12,0,0,0,15,9,1,41,88,127,2,28,0,8,11,1,0,0,1,1,0,0,3,0,0,0,0,17,0,0,4610\n",
      "1411,0,200,382,129,1289,0,1,7,2,544,135,6,0,35,0,1,47,2,360,0,62,139,9,0,0,570,247,3,0,0,10,14,0,0,0,4,0,0,0,0,0,0,0,0,0,17,4374\n",
      "435,0,510,381,0,2236,1,96,944,0,118,5,4,80,105,0,2,0,177,0,0,49,32,6,0,1,0,0,685,0,0,2,0,0,0,0,0,0,0,4,42,0,24,0,0,0,0,4061\n",
      "868,317,1,602,0,2364,20,0,308,50,366,2,0,1,45,6,9,0,320,465,0,0,95,104,0,0,0,1,120,0,9,104,66,0,0,0,0,0,0,64,0,0,0,0,0,0,0,3693\n",
      "1218,0,126,170,0,1544,94,25,224,19,100,31,0,277,397,4,618,4,102,12,0,0,103,29,0,85,0,78,112,0,1,0,41,0,0,0,0,0,0,0,0,14,0,0,0,0,0,4572\n",
      "1467,0,78,82,5,2945,320,12,805,230,160,53,0,28,41,27,41,44,9,51,2,197,12,0,0,5,0,0,127,0,0,16,116,0,0,0,1,0,2,0,0,0,207,0,0,0,0,2917\n",
      "797,0,1507,113,0,1109,180,0,211,0,121,98,414,0,11,4,13,7,11,73,6,5,385,43,0,0,38,0,0,0,7,114,12,0,0,0,16,0,0,3,0,0,229,0,0,0,0,4473\n",
      "230,230,446,687,72,899,18,18,35,580,493,4,518,0,36,0,0,42,400,737,3,0,0,2,0,0,38,1,46,375,0,81,102,0,0,1,81,0,0,0,38,0,0,0,0,0,0,3787\n",
      "177,52,0,555,0,1451,94,0,116,616,826,63,24,7,46,551,109,178,39,70,0,0,14,0,46,277,188,0,183,7,0,587,2,0,0,0,302,0,50,2,0,0,0,0,0,0,0,3368\n",
      "1749,0,112,202,0,2169,366,5,15,56,119,116,182,20,92,0,460,3,3,24,0,0,488,3,0,290,5,0,459,0,0,255,5,0,0,0,15,0,0,0,0,0,0,0,0,0,0,2787\n",
      "206,0,1130,223,4,1004,4,0,112,0,292,648,163,139,12,0,15,29,307,60,0,2,0,0,1,225,0,0,956,0,0,131,0,0,0,0,501,0,0,0,0,0,0,0,0,0,0,3836\n",
      "639,47,320,453,0,792,16,0,436,2,88,37,1,3,20,38,37,0,3,930,0,0,19,0,0,0,30,57,211,0,0,1213,275,0,0,12,1,0,0,19,0,0,0,0,0,0,0,4301\n",
      "189,35,87,1938,0,1890,98,67,65,0,584,73,3,240,1,58,8,3,249,15,156,5,4,6,0,48,0,0,26,0,0,295,12,0,133,5,33,0,0,0,0,0,0,0,0,0,0,3674\n",
      "571,0,1233,321,75,2339,14,87,227,0,185,274,0,15,2,6,297,0,54,3,28,0,107,0,0,20,0,0,259,0,0,19,29,0,0,7,26,0,0,11,0,0,0,0,0,0,0,3791\n",
      "1707,0,533,1448,0,707,1,0,9,0,11,740,3,2,46,23,22,167,653,12,0,0,68,0,0,0,0,1,375,0,0,23,39,0,0,193,0,0,0,1,0,0,0,0,0,0,0,3216\n",
      "91,55,380,480,0,1016,162,327,1271,497,23,22,239,0,31,0,21,1,22,3,1,1,0,321,0,305,0,0,700,0,0,59,77,0,0,166,9,0,0,1,0,0,0,0,0,0,0,3719\n",
      "418,9,46,911,86,541,1,41,490,0,758,0,321,23,20,1,78,84,65,338,0,1,3,41,2,634,1,7,224,0,0,93,1,0,0,0,140,0,0,19,2,0,0,0,0,0,0,4601\n",
      "609,0,453,1582,8,522,3,8,401,5,3,5,45,6,17,141,25,111,0,512,1,734,773,0,58,6,0,0,809,0,0,140,1,0,0,0,82,0,0,0,0,0,3,0,0,0,0,2937\n",
      "2642,38,69,692,1,917,73,86,223,9,15,83,98,59,532,1,0,29,19,109,2,0,46,0,0,37,0,0,446,0,73,19,1097,0,0,0,28,1,0,0,0,0,0,0,0,0,0,2556\n",
      "722,0,558,1078,112,829,448,48,1421,0,0,0,1,30,211,136,6,6,20,1,0,72,0,0,22,30,0,2,69,0,2,17,29,2,0,0,47,0,0,2,59,0,1,0,0,0,0,4019\n",
      "1312,189,7,579,0,2032,48,78,282,67,214,8,263,356,128,3,479,9,55,283,1,65,7,117,0,183,0,4,41,0,283,44,3,0,2,0,7,0,0,0,0,0,0,0,0,0,0,2851\n",
      "1065,136,0,1121,1,526,2,0,44,517,188,43,21,1,239,38,0,220,100,0,25,5,233,0,104,46,0,0,13,0,23,71,335,0,0,0,2,0,0,2,0,0,0,0,0,0,0,4879\n",
      "1512,15,63,643,22,1321,0,16,293,0,15,4,188,0,287,0,192,0,66,41,0,0,65,10,0,0,200,2,19,0,0,929,393,0,0,0,136,0,24,2,0,0,82,0,0,0,0,3460\n",
      "652,142,374,254,28,1077,145,1,286,0,12,7,0,0,31,0,20,191,35,1,342,81,34,0,0,3,3,0,58,0,18,5,2,0,0,0,67,0,29,0,0,0,1,0,0,0,0,6101\n",
      "1374,53,303,1283,352,1923,127,19,36,0,225,3,226,51,17,0,41,28,9,14,13,2,30,0,0,4,8,0,254,26,26,21,0,0,0,0,180,0,0,0,2,0,0,0,0,0,0,3350\n",
      "578,58,138,875,20,730,38,89,1694,0,170,0,0,483,0,0,280,6,235,119,0,0,0,359,0,2,0,0,324,0,0,98,22,0,0,0,3,0,0,0,0,0,41,0,0,0,0,3638\n",
      "418,0,25,1094,0,2274,14,46,300,0,14,71,15,3,251,63,155,71,557,6,0,0,342,0,0,0,0,219,623,0,0,121,119,0,0,1,421,0,39,0,1,0,0,0,109,0,0,2628\n",
      "561,0,8,419,0,858,188,239,112,22,221,188,646,0,3,205,362,6,232,44,21,9,222,0,0,0,0,2,149,0,0,269,20,0,0,0,277,0,0,0,0,0,0,0,0,0,0,4717\n",
      "533,141,2,24,0,766,20,28,135,9,31,0,17,133,466,378,6,0,93,238,0,192,13,0,19,2,207,634,978,0,0,192,43,0,6,0,102,0,0,0,0,0,0,0,0,0,0,4592\n",
      "266,0,46,293,8,2097,281,5,732,30,20,1572,2,39,12,1,567,4,33,208,0,0,209,0,0,0,0,69,40,0,0,22,1,0,0,0,5,0,0,200,0,0,0,4,0,0,0,3234\n",
      "1281,0,6,921,104,886,460,179,340,3,0,193,27,45,484,0,0,9,118,179,4,0,378,0,0,0,0,0,128,0,183,223,807,0,0,0,181,0,0,0,0,0,0,0,0,0,0,2861\n",
      "337,0,694,341,11,416,257,332,115,9,226,12,3,139,138,32,77,0,2,3,1,72,42,0,0,3,4,0,3,0,216,6,0,0,0,90,928,0,0,8,0,0,0,0,0,0,0,5483\n",
      "1131,0,1027,294,1,741,0,86,633,224,119,76,51,42,78,11,1,0,244,10,0,0,104,1,0,839,0,3,468,0,8,56,296,0,0,285,11,0,0,17,0,0,0,1,0,0,0,3142\n",
      "589,0,2,338,0,797,3,757,112,74,1,165,0,1,0,0,241,4,50,33,0,2,295,4,0,152,9,38,43,0,0,695,1,0,0,0,0,0,0,206,0,0,0,0,0,0,0,5388\n",
      "904,437,11,536,1,545,106,0,425,2,30,6,4,5,34,0,124,0,583,1,0,134,383,202,0,0,0,0,247,0,0,0,4,0,0,343,18,0,0,0,0,0,0,0,0,0,0,4915\n",
      "661,0,25,895,0,1051,57,119,602,0,9,132,448,12,83,0,107,14,259,38,0,0,179,89,12,8,0,12,394,0,40,179,806,0,0,0,16,0,1,0,0,0,0,0,0,0,0,3752\n",
      "1322,14,1216,1191,0,824,0,3,477,0,24,17,304,10,150,284,25,2,203,9,13,0,67,0,0,9,125,38,256,0,0,317,4,0,0,0,79,0,0,138,0,0,0,0,0,0,0,2879\n",
      "1034,0,106,45,0,842,23,4,347,0,37,4,44,1,77,0,72,101,687,131,547,16,282,0,3,3,956,1,71,0,0,181,0,0,0,12,96,0,0,0,0,0,35,0,0,0,0,4242\n",
      "521,0,247,68,1,618,14,1190,2232,437,57,34,6,0,0,0,126,81,1,316,20,3,118,0,61,104,0,0,30,0,0,18,334,0,0,108,6,0,0,1,0,0,0,0,0,0,0,3248\n",
      "798,0,21,242,0,1383,25,0,364,0,44,0,43,172,358,25,475,1,7,106,0,1081,347,1,0,0,2,2,5,42,0,127,1,0,0,18,31,0,0,0,11,0,0,0,0,0,0,4268\n",
      "931,2,151,750,0,843,5,4,782,21,3,143,2,17,17,0,0,0,28,41,43,75,1,0,0,10,49,0,443,0,0,856,2,39,0,11,2,0,0,6,0,0,0,0,0,0,0,4723\n",
      "373,0,128,1089,9,1176,23,139,305,12,13,2,9,0,80,0,14,55,211,8,17,256,44,3,0,0,1,0,1848,0,870,2,0,0,0,5,1,0,0,0,0,0,13,0,0,0,0,3294\n",
      "1378,24,11,877,89,1897,18,468,816,1,75,75,0,3,73,0,270,58,50,155,0,13,542,2,0,17,0,19,228,0,17,196,1,0,0,0,395,0,12,12,0,1,0,89,0,0,0,2118\n",
      "233,0,106,593,0,784,49,22,287,0,547,284,11,16,37,91,64,0,68,114,253,71,961,8,5,3,65,15,263,0,0,1,46,0,0,43,84,0,0,585,14,0,99,0,0,1,0,4177\n",
      "949,0,69,81,8,2254,127,14,14,179,93,0,514,10,441,1,37,379,0,0,0,0,0,0,0,1,0,0,16,605,354,150,281,598,322,0,4,421,0,0,0,0,3,0,0,0,0,2075\n",
      "1778,19,221,431,95,1309,282,0,663,0,0,344,51,35,727,0,24,137,192,0,0,0,85,0,0,3,0,0,139,0,0,6,0,13,0,65,125,0,0,4,0,0,0,0,0,0,0,3252\n",
      "700,88,234,1016,33,2054,40,106,72,0,27,1,40,65,106,0,133,2,0,60,485,389,468,2,0,16,80,0,73,0,0,807,26,0,0,0,61,0,0,0,0,0,0,0,0,0,0,2816\n",
      "505,1,80,3103,0,1203,17,184,160,0,285,0,371,36,8,0,113,1,225,0,0,0,91,0,67,52,11,0,323,0,226,8,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,2878\n",
      "1585,4,766,116,0,1511,8,0,0,0,9,29,107,353,27,0,428,0,121,2,224,0,202,0,2,6,1,0,263,0,0,159,11,0,0,0,3,0,0,102,0,0,0,0,0,0,0,3961\n",
      "620,0,393,239,0,1113,914,0,64,198,429,10,442,373,15,0,0,0,36,912,204,0,10,128,1,0,2,0,240,0,0,69,7,0,0,0,8,0,0,0,0,0,0,0,0,0,0,3573\n",
      "442,491,1591,408,0,1027,77,0,0,0,372,28,2,206,0,0,883,15,99,126,0,0,573,139,3,0,0,0,272,0,103,23,98,0,0,0,3,0,0,7,0,0,0,0,0,0,0,3012\n",
      "1449,8,157,82,0,496,2,6,1153,3,0,450,7,2,184,0,0,49,40,10,5,2,115,8,0,33,0,0,480,0,12,26,250,0,0,0,231,0,0,115,0,0,2,0,0,0,0,4623\n",
      "739,356,688,211,0,766,155,268,870,0,123,12,182,0,3,1,309,0,7,2,0,0,486,14,0,119,11,0,34,0,0,97,68,0,0,0,71,0,0,0,0,0,0,0,0,0,0,4408\n",
      "1214,0,125,344,195,422,44,0,1212,173,36,111,74,63,153,0,145,9,143,8,13,15,139,0,0,245,27,0,726,0,0,0,4,0,0,0,33,0,0,0,3,0,0,1,0,0,0,4323\n",
      "1497,733,24,810,0,1038,61,107,200,30,21,0,105,980,9,214,84,0,0,25,0,19,205,0,0,111,161,0,111,0,0,257,6,0,0,4,3,0,0,0,0,0,11,0,0,0,0,3174\n",
      "2074,1,843,544,0,1354,7,0,27,0,270,248,37,0,0,0,0,0,90,529,0,0,1,0,0,80,0,3,167,0,0,7,187,0,0,0,58,0,0,4,0,0,0,0,0,0,0,3469\n",
      "1332,0,495,615,0,1983,94,5,40,10,275,2,0,211,2,0,84,82,1034,42,0,4,36,0,1,0,2,0,1,270,3,953,125,0,0,0,26,0,63,0,0,0,1,0,0,0,0,2209\n",
      "751,0,727,1252,28,1183,292,713,302,0,456,28,27,0,172,23,8,31,5,23,1,1,596,37,37,2,0,0,229,0,4,142,36,0,0,0,6,0,0,13,0,0,0,0,8,0,362,2505\n",
      "1084,0,1902,687,0,504,186,621,253,2,210,0,127,211,0,1344,102,29,0,126,0,3,3,141,0,2,3,6,43,0,2,0,4,0,0,0,2,0,0,174,0,0,0,0,0,0,0,2229\n",
      "864,0,692,318,0,1083,7,41,329,362,0,73,140,2,160,0,0,0,2,4,2,0,7,0,0,0,4,128,236,0,0,0,4,0,86,495,3,0,0,10,6,0,16,0,0,4,0,4922\n",
      "918,19,0,239,0,1056,7,375,357,0,28,369,780,0,0,288,1,38,7,0,18,0,193,312,20,4,0,0,250,0,3,3,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,4709\n",
      "748,0,296,345,0,1768,36,0,16,0,616,0,759,45,114,146,60,2,466,523,1,22,228,66,3,18,750,0,50,0,0,94,31,0,0,7,24,0,0,2,1,0,9,0,0,0,0,2754\n",
      "1018,1,312,626,0,1478,229,10,205,64,49,71,0,268,195,0,810,39,53,41,131,0,208,128,0,0,0,10,191,0,0,132,66,0,0,0,0,0,0,1,0,0,0,0,1,0,0,3663\n",
      "1166,0,115,549,0,1842,0,148,221,169,433,30,314,4,22,0,42,32,74,194,16,0,21,0,0,0,0,0,256,0,0,203,183,236,0,0,0,0,0,1,0,0,0,0,0,0,0,3729\n",
      "408,0,14,855,0,377,703,286,126,234,0,7,343,151,85,0,19,126,321,697,535,3,0,0,45,1246,1,23,133,0,0,13,13,0,0,188,0,0,66,6,2,0,0,0,0,0,0,2974\n",
      "1507,0,715,90,0,1082,13,73,243,95,590,101,20,1112,237,194,0,27,316,381,0,71,27,0,0,0,0,0,203,0,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2865\n",
      "513,0,399,657,0,1207,241,424,355,0,596,123,7,95,0,60,45,0,158,0,784,0,568,31,0,22,97,1,162,0,2,96,97,0,16,6,0,0,16,0,0,0,0,15,0,0,0,3207\n",
      "2163,88,284,338,66,807,212,2,752,36,648,43,95,5,0,4,2,119,0,3,0,28,0,0,0,16,0,195,8,0,0,84,315,0,0,0,331,0,0,0,0,243,0,0,0,0,0,3113\n",
      "615,40,166,67,51,2187,17,6,242,14,0,61,0,2,14,10,3,2,320,51,61,0,145,0,0,0,62,0,51,0,30,16,6,0,0,0,126,0,0,0,0,84,5,261,0,0,0,5285\n",
      "619,875,82,526,19,698,209,0,314,0,113,0,127,1319,0,17,32,0,57,484,1,1,119,0,0,372,57,0,29,0,4,633,6,0,0,0,0,323,0,11,6,0,0,0,2,0,0,2945\n",
      "480,105,730,809,105,504,47,0,245,132,110,1189,3,1,119,176,262,263,2,66,0,81,48,1,0,0,177,1,343,0,3,264,8,0,0,13,129,0,0,0,1,0,0,0,0,0,0,3583\n",
      "1126,289,172,307,0,1998,134,0,12,1,66,20,119,14,60,0,0,17,48,3,0,508,34,1,0,32,0,26,106,0,25,12,30,0,0,0,114,0,0,6,0,0,0,0,5,0,0,4715\n",
      "1298,0,51,566,323,651,154,0,13,0,25,911,0,0,380,0,0,17,41,1694,0,161,28,2,5,0,205,0,1,0,14,296,160,0,0,0,10,0,0,13,0,0,0,0,0,0,0,2981\n",
      "607,2,7,233,0,2334,174,5,218,0,658,11,17,0,0,103,0,1,129,168,15,0,2,0,0,15,24,0,231,412,0,140,46,0,0,0,66,0,0,0,0,0,0,0,0,0,0,4382\n",
      "928,451,492,15,57,324,7,328,1159,0,3,7,2,0,71,7,4,158,0,70,0,0,133,0,4,1,323,0,85,0,43,73,283,0,0,0,1404,0,0,2,1,0,0,0,0,44,0,3521\n",
      "1360,0,1,118,154,894,36,564,201,24,113,105,2,5,242,32,90,51,121,284,205,74,286,216,218,0,46,54,388,7,17,1030,118,1,0,0,319,0,0,0,0,0,0,0,0,0,0,2624\n",
      "2852,0,36,578,12,376,130,176,55,0,38,1,2,65,28,0,37,0,44,61,0,5,6,4,0,0,13,14,670,0,1,101,36,0,0,525,26,0,0,1,0,0,0,0,0,0,0,4107\n",
      "1422,0,10,473,12,1085,103,21,5,1,435,0,73,9,63,179,1,4,74,149,68,94,109,13,0,20,25,0,91,0,0,118,58,0,56,17,897,0,0,0,0,0,0,0,0,26,0,4289\n",
      "2535,38,585,204,0,537,27,0,178,0,7,13,1,15,408,6,87,296,0,0,0,67,47,224,86,502,0,85,950,0,0,0,97,0,0,0,4,0,0,66,0,155,0,0,0,0,0,2780\n",
      "574,0,93,904,121,627,25,12,414,12,700,48,50,0,1045,1,66,9,14,3,9,6,40,0,186,0,0,66,0,0,0,390,0,0,0,30,112,0,19,0,2,0,0,0,0,0,0,4422\n",
      "200,46,172,135,0,2691,33,84,552,6,217,128,0,7,24,0,0,480,360,40,0,0,575,7,0,0,0,457,454,0,0,557,3,0,0,4,84,0,0,0,1,7,0,0,0,0,0,2676\n",
      "1003,0,440,265,6,225,204,51,320,35,121,3,110,15,1526,9,120,9,527,218,12,13,51,8,0,0,0,0,242,0,62,19,30,0,0,0,147,0,0,126,0,0,0,0,0,0,0,4083\n",
      "920,0,16,749,2,1117,637,53,183,0,20,0,405,1,363,0,1,0,61,61,0,3,2,1328,28,7,0,101,551,0,0,8,48,0,0,1,427,11,0,0,0,3,0,0,0,0,0,2893\n",
      "713,12,90,221,0,401,3,7,254,12,14,2,120,317,12,37,19,27,31,524,0,0,20,0,3,1,54,0,471,0,2,175,15,0,0,1,3,0,0,0,3,0,718,0,1,0,0,5717\n",
      "656,125,21,438,0,1332,72,0,89,1,306,23,26,9,30,2,1,0,2,322,773,6,716,43,0,18,0,2,69,269,71,468,1284,0,0,134,1,115,0,0,0,0,0,0,0,0,0,2576\n",
      "1637,0,91,687,0,2201,3,5,18,0,3,336,0,12,88,1,50,0,93,222,0,0,4,0,24,1,11,3,202,0,7,253,0,9,0,0,1,0,0,0,0,179,0,0,0,0,8,3851\n",
      "1271,5,178,893,0,719,61,72,342,0,61,99,58,0,7,37,3,155,12,46,0,8,86,150,0,3,125,0,13,0,55,101,201,0,0,0,1,0,0,0,531,0,0,0,0,0,0,4707\n",
      "1719,0,803,60,23,842,722,487,69,320,28,4,0,0,3,48,221,6,116,131,0,0,153,344,109,2,231,3,91,0,0,65,107,0,0,1,0,0,1,22,0,41,0,0,0,0,0,3228\n",
      "626,22,1,127,5,808,3,28,62,0,275,238,0,0,5,165,55,0,600,116,221,0,256,0,0,429,35,0,181,0,4,164,30,0,0,15,58,0,0,0,5,0,0,0,0,0,0,5466\n",
      "1289,0,0,818,0,1478,24,0,1219,0,249,0,415,1,9,0,7,0,26,168,0,67,681,143,0,5,3,5,267,0,23,349,4,0,0,0,1,0,0,2,2,0,0,0,0,0,0,2745\n",
      "296,0,473,404,139,2737,145,533,714,1,4,0,1,7,474,1,0,3,109,22,126,2,67,4,0,0,684,0,2,0,0,2,24,8,0,0,1,0,0,0,0,0,1,0,0,0,0,3016\n",
      "1014,68,12,773,129,1979,129,0,338,64,4,0,101,0,102,0,358,24,222,4,0,0,5,0,0,28,2,0,161,4,0,483,390,0,0,211,0,0,0,0,0,0,0,0,0,0,0,3395\n",
      "670,0,485,466,0,470,668,14,166,0,522,917,101,0,112,1,90,72,14,831,0,0,9,0,0,5,25,143,43,0,1,229,7,0,0,1,135,0,0,0,46,0,0,0,5,0,0,3752\n",
      "1558,1,89,253,0,865,220,0,547,1,14,0,28,0,81,5,4,280,2,232,0,32,801,0,0,65,0,0,1633,0,0,141,6,0,0,0,9,0,0,9,0,46,1,0,0,0,0,3077\n",
      "390,0,169,948,0,972,237,405,519,0,74,149,15,0,0,553,1,280,715,137,3,0,69,110,103,1,7,0,39,0,50,0,536,0,0,0,5,0,6,0,21,0,0,0,0,0,0,3486\n",
      "1011,5,1017,145,0,1484,3,19,415,42,87,27,59,195,0,59,45,1,14,0,0,0,112,0,57,94,0,146,122,0,408,77,425,0,0,0,3,0,0,0,0,0,0,0,0,0,0,3928\n",
      "683,0,775,1010,0,920,618,82,413,0,23,200,57,0,155,0,3,66,10,9,0,0,1,0,0,0,0,0,345,0,0,42,191,0,0,0,5,0,0,0,24,0,0,114,0,0,0,4254\n",
      "829,0,142,74,0,1363,21,55,267,76,30,12,374,908,970,0,103,65,3,559,852,2,144,0,0,35,0,0,124,0,272,143,4,0,0,0,13,0,0,0,0,0,105,0,1,0,0,2454\n",
      "1422,63,72,628,7,1572,38,43,42,118,85,478,0,0,5,627,77,6,100,250,0,0,0,29,0,8,0,0,844,0,0,136,155,0,0,0,41,3,0,6,0,0,0,0,0,0,0,3145\n",
      "1755,571,120,16,0,980,20,676,207,0,138,290,45,10,95,1,3,16,571,29,0,9,82,0,0,70,0,9,645,1,7,25,397,0,35,6,4,0,0,21,1,0,0,0,0,0,0,3145\n",
      "1391,0,226,493,14,1631,29,550,56,0,49,409,8,2,10,35,0,12,24,93,0,13,94,0,0,0,0,647,418,0,49,47,18,0,0,0,3,0,0,1,0,0,0,0,0,29,0,3649\n",
      "1321,5,41,1402,0,2246,6,112,370,12,24,73,3,3,525,1,93,89,24,598,0,286,584,11,18,11,1,19,199,0,11,0,298,0,0,10,31,0,0,0,58,0,3,0,0,0,0,1512\n",
      "1179,0,42,480,0,1437,210,0,27,178,5,353,25,0,1,103,7,68,126,32,0,1,313,0,0,43,14,5,246,1,0,181,41,0,0,0,477,0,72,0,0,0,0,0,0,0,0,4333\n",
      "1604,2,19,70,0,473,159,0,649,0,155,5,0,0,15,2,4,3,14,86,0,5,36,0,0,1,0,0,42,0,21,249,30,0,0,0,519,0,0,300,0,0,0,0,0,0,0,5537\n",
      "554,0,205,79,41,1768,107,4,51,0,72,453,0,0,116,0,0,852,1152,35,0,0,10,0,2,1,0,1,11,6,0,141,113,0,0,0,179,0,0,132,16,0,0,0,0,0,0,3899\n",
      "479,0,165,295,0,829,11,58,310,163,60,111,0,66,5,174,101,8,56,10,0,0,591,0,13,6,0,4,223,0,0,76,111,0,48,0,5,0,18,0,0,0,0,0,0,0,0,6004\n",
      "1061,0,165,342,0,1452,17,2,8,0,12,36,0,57,346,0,35,0,83,31,31,0,103,1007,0,0,1,1,45,0,61,608,3,12,0,0,23,0,0,0,0,0,0,0,0,92,0,4366\n",
      "203,0,620,223,0,3086,448,60,268,0,72,48,115,0,3,2,52,75,635,7,30,11,117,62,0,0,0,253,325,0,0,8,691,0,0,88,1,0,0,0,0,0,0,170,0,0,0,2327\n",
      "930,479,78,193,2,896,49,39,46,8,172,86,14,71,61,10,3,7,101,3,4,0,846,21,0,0,0,14,751,0,0,377,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,4707\n",
      "855,286,861,291,127,1157,194,0,61,81,184,0,13,0,62,109,0,0,119,338,0,181,321,0,0,0,77,0,163,0,21,37,21,0,0,0,97,0,1,0,0,67,0,0,0,0,0,4276\n",
      "306,3,315,327,20,1200,1156,0,586,258,325,9,256,56,82,0,2,54,27,101,0,7,123,0,51,2,1,4,746,0,18,3,11,0,0,0,1,0,0,0,3,0,9,0,0,4,0,3934\n",
      "1068,34,22,469,0,1756,135,0,407,32,385,9,8,59,0,2,1,5,10,11,5,0,83,66,0,0,0,0,29,0,831,2,0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,4554\n",
      "336,3,875,836,43,847,384,0,379,0,1,1020,20,0,505,21,111,8,0,149,0,0,37,0,35,75,0,0,286,0,19,571,15,0,0,58,0,0,0,10,0,0,0,0,0,0,0,3356\n",
      "2123,0,1960,30,7,630,89,0,194,0,16,1,2,93,0,4,0,0,442,78,1,0,65,0,0,1,51,0,144,0,7,508,114,2,0,42,0,0,1,0,0,0,0,48,0,0,0,3347\n",
      "1347,88,1320,460,9,561,38,0,314,4,186,8,14,0,70,29,98,855,42,2,0,62,125,5,0,83,0,103,57,0,0,6,0,0,0,0,524,0,26,0,33,0,0,0,0,0,0,3531\n",
      "906,33,7,463,1,1108,19,21,0,332,30,0,10,4,295,0,56,63,103,1,10,0,0,43,0,27,186,157,168,0,132,116,11,0,0,0,228,0,0,0,0,0,1480,0,0,0,0,3990\n",
      "622,0,5,133,0,246,1,50,1678,0,1,33,107,256,22,0,25,1,15,48,4,32,1370,1,0,0,650,0,291,0,5,4,0,0,0,1,3,0,15,0,28,1458,0,112,0,0,0,2783\n",
      "1252,57,239,21,1,1367,27,349,392,88,71,8,10,2,0,10,414,475,43,53,0,0,923,9,53,0,0,25,0,0,0,204,10,0,0,0,3,0,0,2,0,0,0,0,0,0,0,3892\n",
      "1602,0,116,65,1,1050,230,0,1440,0,4,3,159,13,0,0,1,0,0,1149,0,25,373,1,0,169,0,330,74,0,4,8,1,0,0,0,2,0,0,0,0,0,0,20,0,0,0,3160\n",
      "1154,0,11,283,0,2135,275,340,8,50,0,28,265,43,73,0,159,0,130,63,5,62,939,6,345,140,0,0,18,0,1,227,59,0,0,2,52,0,0,0,0,0,0,0,0,294,0,2833\n",
      "2506,0,362,1352,0,950,1,137,239,0,0,29,133,0,9,0,269,1,84,11,2,4,540,0,0,0,0,127,44,0,31,102,33,0,0,0,46,0,0,0,0,0,0,0,0,0,0,2988\n",
      "1006,4,294,110,0,1161,34,87,1060,15,0,0,583,151,50,388,5,1,218,55,0,2,123,0,57,8,110,10,22,0,1,607,0,0,10,49,289,0,79,4,0,0,217,0,0,47,0,3143\n",
      "826,82,4,419,2,763,0,0,37,9,73,10,28,17,0,0,21,16,2,255,0,38,1027,0,12,21,0,0,487,0,3,191,311,0,0,6,651,0,0,3,0,0,2363,21,0,0,0,2302\n",
      "1125,0,278,201,0,1810,167,0,830,139,103,71,1,47,274,69,252,1,170,5,0,211,116,126,0,0,1,1,30,7,19,98,59,0,0,0,1110,0,0,0,0,0,0,0,0,0,0,2679\n",
      "807,0,307,274,1,1080,4,192,123,19,10,0,309,0,115,29,184,6,874,20,0,0,219,0,0,316,19,0,163,0,0,691,0,0,0,0,14,0,74,92,0,0,0,0,0,0,0,4058\n",
      "842,0,604,685,23,673,960,54,18,0,76,134,36,5,0,0,9,35,115,229,8,0,9,0,0,662,0,10,186,0,0,3,0,0,0,103,652,0,129,0,37,0,45,0,0,0,0,3658\n",
      "1216,0,3,1205,0,1130,276,6,569,1,3,6,0,158,260,2,11,67,46,0,0,539,120,373,0,0,0,0,4,0,0,29,152,0,0,2,1036,0,3,0,0,0,33,0,0,0,0,2750\n",
      "374,2,915,570,3,899,144,12,161,272,122,2,0,0,225,0,267,0,424,170,18,25,185,83,0,0,0,0,1639,0,21,46,0,0,0,0,49,0,0,5,0,0,0,0,0,0,0,3367\n",
      "1270,0,155,164,0,994,19,0,253,0,134,0,172,143,0,5,0,329,71,451,0,0,158,12,0,0,0,4,305,0,0,0,0,0,100,0,130,0,0,1,139,0,0,0,0,0,0,4991\n",
      "1744,7,111,494,123,378,40,0,541,6,799,419,0,0,124,42,0,2,58,89,40,7,36,0,0,0,0,2,64,0,56,15,9,0,0,0,487,0,5,0,0,0,0,0,0,0,0,4302\n",
      "563,69,137,420,493,693,14,0,58,396,364,0,35,76,17,0,31,5,154,752,111,19,268,0,0,0,0,5,6,0,454,111,76,0,0,0,1,0,0,0,0,0,17,0,0,0,0,4655\n",
      "1609,78,384,71,0,919,5,22,829,17,639,77,0,123,21,0,38,2,76,22,17,253,159,0,0,0,25,196,307,0,41,175,374,0,0,0,3,0,4,0,0,0,0,0,0,0,0,3514\n",
      "3410,17,85,151,127,633,186,31,109,0,3,13,0,21,3,63,80,1,5,0,815,524,200,0,104,29,0,0,416,167,112,1,0,0,0,44,9,0,0,0,1,0,0,0,33,0,0,2607\n",
      "2025,0,144,728,0,598,203,25,28,0,25,235,158,1,130,1,123,28,628,6,892,2,69,4,0,0,0,0,391,0,8,167,54,0,0,0,9,0,0,13,4,0,1,0,0,0,0,3300\n",
      "665,0,44,232,111,426,1128,40,51,76,51,801,255,63,1056,113,24,103,0,4,26,0,1505,354,0,9,0,55,129,0,2,24,24,0,0,0,121,0,81,0,0,0,0,12,0,0,0,2415\n",
      "614,0,64,228,0,916,144,67,306,18,0,88,19,0,93,6,58,4,137,27,0,0,50,5,54,15,0,331,1344,601,154,223,169,0,0,0,367,0,0,1,2,0,0,163,0,0,0,3732\n",
      "1440,0,158,248,0,1675,16,2,52,0,642,3,5,141,42,8,180,6,673,364,0,40,41,0,0,4,0,395,73,0,34,60,0,106,0,130,110,0,0,0,0,0,0,0,0,0,0,3352\n",
      "1203,22,126,433,94,1666,550,85,141,0,419,46,90,7,103,0,8,120,188,0,271,33,0,1,201,89,1,0,329,0,26,359,0,0,6,1,2,1,0,79,0,0,0,0,0,0,0,3300\n",
      "112,0,295,1016,0,1814,1,114,816,0,93,363,99,113,27,0,158,1,304,20,0,0,0,75,0,0,0,0,29,0,53,256,1064,1,0,3,0,0,0,81,0,0,0,0,1,0,0,3091\n",
      "496,0,7,10,0,1633,57,14,1017,0,529,1300,9,0,369,217,302,17,209,243,0,9,55,11,0,0,0,158,24,0,2,0,1030,0,0,0,8,0,0,0,0,0,0,0,0,0,0,2274\n",
      "1265,0,131,379,16,1632,27,0,307,0,227,11,106,0,254,0,419,4,13,21,0,2,105,17,0,0,0,0,1015,0,0,10,58,0,0,0,1,0,0,2,7,0,0,0,0,0,0,3971\n",
      "790,16,847,419,3,1454,82,26,1017,1,13,33,0,0,13,0,79,186,50,50,11,67,163,0,9,0,2,23,110,0,7,4,310,0,0,0,13,0,0,0,0,0,1,0,0,0,0,4201\n",
      "718,0,3,431,0,971,235,133,1,1,8,286,238,1147,125,12,57,734,150,194,0,0,344,12,0,1,0,0,447,0,0,20,418,30,0,0,141,0,0,0,0,0,0,0,0,0,0,3143\n",
      "1468,0,48,772,90,923,146,297,213,0,32,1,22,60,13,0,161,324,252,0,0,0,46,20,0,14,0,390,0,0,0,18,0,0,0,0,325,0,0,54,0,0,193,0,0,0,0,4118\n",
      "645,0,501,852,59,688,318,163,315,15,263,14,33,0,236,56,86,0,9,1,0,2,158,107,0,655,0,45,38,0,0,19,6,0,0,0,122,0,0,5,0,1,1,0,0,0,0,4587\n",
      "907,1,192,730,0,1783,144,14,900,7,46,323,27,0,171,0,19,49,426,3,1,1,31,0,0,446,221,6,266,0,0,180,4,0,0,378,27,0,0,0,0,0,0,50,0,0,0,2647\n",
      "434,63,90,1013,345,974,546,0,332,32,98,0,2,100,415,20,16,0,35,63,1,1,1231,1,0,0,0,0,13,0,15,97,313,0,0,0,0,0,0,0,0,0,54,0,0,0,0,3696\n",
      "1509,0,224,261,0,1710,639,0,153,201,872,15,0,10,20,0,48,0,1,26,4,0,0,0,0,0,51,0,323,0,0,9,3,0,0,5,1,0,0,0,0,0,0,0,0,0,0,3915\n",
      "790,484,57,60,474,1181,6,0,190,529,971,136,29,0,298,2,6,2,372,496,0,1,267,48,4,6,0,0,95,0,0,155,208,0,0,24,85,0,0,0,0,0,0,0,0,0,0,3024\n",
      "1099,15,14,66,0,2675,200,9,398,3,31,160,43,20,35,72,236,8,240,345,27,221,92,31,0,1,2,39,70,0,55,1,265,0,114,0,76,0,0,0,0,59,0,0,0,0,0,3278\n",
      "612,269,103,621,0,2229,46,239,17,0,0,114,6,136,231,98,10,2,370,17,13,459,80,8,0,127,0,0,2,0,63,6,61,0,0,231,2,12,2,0,0,0,0,0,0,0,0,3814\n",
      "440,0,612,929,6,1449,27,15,59,0,752,535,122,1,2,45,0,194,444,449,222,0,232,460,2,5,0,2,639,1,0,360,60,36,0,1,217,0,0,94,0,27,0,0,0,0,0,1561\n",
      "2452,22,178,909,0,400,88,12,100,11,51,103,0,156,57,672,335,24,33,39,12,147,374,1,26,0,0,414,27,0,0,61,289,0,0,0,46,0,0,0,0,0,0,0,0,0,0,2961\n",
      "1591,0,5,126,3,1245,175,4,472,2,2,4,0,0,491,22,4,26,0,55,0,0,5,0,46,8,0,43,60,0,0,56,227,0,0,60,670,0,0,53,181,0,0,0,0,0,0,4364\n",
      "1074,7,1387,215,5,715,15,37,313,0,131,0,318,0,25,1,7,0,117,5,31,0,551,2,0,112,0,39,369,0,2,410,3,0,0,0,3,0,0,0,25,1,0,0,0,0,0,4080\n",
      "915,2,237,280,0,1429,604,0,988,47,530,2,0,106,10,0,685,0,34,0,0,529,571,0,0,0,3,4,455,2,0,82,0,0,0,0,13,0,0,0,45,0,0,0,0,0,0,2427\n",
      "488,0,113,241,29,1266,47,14,182,0,7,102,61,101,20,6,70,169,364,116,0,1,19,97,0,0,0,5,52,0,38,1108,3,0,0,1,3,0,2,2,68,0,0,0,0,0,0,5205\n",
      "539,45,1105,1636,0,287,8,1,645,0,358,7,34,6,285,22,1,0,22,224,0,1,99,2,0,5,0,0,194,0,0,1,474,0,0,5,44,0,0,0,0,0,0,0,0,1,0,3949\n",
      "662,32,173,1973,223,684,11,13,525,0,231,4,33,1,349,101,1,20,215,27,0,56,668,26,0,0,99,0,25,0,194,201,0,1,7,0,0,0,0,0,0,0,0,0,0,0,0,3445\n",
      "753,0,29,842,44,595,39,0,345,0,24,31,0,15,174,9,499,1,1,3,218,2,35,11,272,0,0,0,176,0,0,9,87,0,0,89,13,0,0,0,0,0,0,0,0,0,0,5684\n",
      "1620,0,71,142,0,1413,828,27,433,0,781,15,0,443,23,0,0,6,128,325,28,0,157,0,2,11,0,0,148,0,5,58,136,0,0,1,12,0,211,0,0,0,0,0,0,0,0,2976\n",
      "199,1,114,971,0,1558,337,0,788,0,53,44,7,237,42,6,23,125,343,417,3,44,27,0,2,15,0,0,31,0,0,1,338,0,0,56,28,0,0,0,0,0,0,73,0,0,9,4108\n",
      "1094,0,118,477,0,1522,106,1,878,83,133,39,4,0,54,0,97,19,3,0,2,406,156,0,0,105,0,0,672,0,0,50,9,0,0,227,22,0,0,0,1,0,0,20,0,4,0,3698\n",
      "1073,0,1083,137,6,1352,81,9,78,0,52,0,0,282,13,0,404,45,58,0,0,0,310,10,0,1,0,37,436,0,0,211,200,0,0,0,0,0,0,9,0,1,0,0,0,0,0,4112\n",
      "831,0,198,97,151,1117,337,0,117,0,90,56,307,1,75,0,1,28,170,0,0,0,554,0,11,2,0,0,201,0,0,101,27,0,165,0,21,0,0,0,0,0,0,0,0,0,0,5342\n",
      "900,110,418,455,5,2035,150,49,73,0,0,178,203,0,0,0,80,4,405,110,0,221,12,22,0,0,0,779,59,0,2,777,15,0,0,0,12,0,1,0,25,0,0,0,0,0,0,2900\n",
      "636,0,608,49,7,1144,160,116,1700,48,585,37,15,0,282,7,141,77,130,2,1,0,388,17,0,9,0,69,37,0,76,133,108,0,0,8,0,0,4,0,0,0,0,0,4,0,0,3402\n",
      "1365,0,33,496,0,349,157,0,1269,2,7,4,165,202,133,0,191,9,221,0,0,0,1259,0,0,2,2,28,71,0,0,4,1460,0,0,0,23,0,0,0,60,0,1,0,0,0,0,2487\n",
      "1149,108,285,926,1,789,16,110,49,8,8,1,5,42,739,0,4,103,0,568,6,0,4,0,0,273,0,4,192,0,15,55,40,0,0,1,13,0,0,0,0,0,0,0,0,0,0,4486\n",
      "1148,15,463,463,3,1166,382,0,425,2,0,0,69,2,47,69,0,10,37,1,0,0,134,0,0,6,2,12,59,0,0,1061,7,0,0,0,33,0,0,0,0,0,0,0,0,0,0,4384\n",
      "1670,46,4,348,0,1462,42,15,110,13,1,22,230,15,16,0,1,116,31,34,521,0,210,258,0,4,144,499,340,0,83,26,0,0,0,0,0,0,4,12,0,0,0,0,0,0,0,3723\n",
      "604,0,112,266,0,917,218,7,315,1,23,922,463,0,36,1,224,0,1,40,0,83,279,42,0,0,29,0,267,0,301,645,102,0,0,1,0,0,8,16,0,0,9,0,0,0,0,4068\n",
      "1923,32,32,343,8,858,96,0,472,0,16,12,64,1,47,1,0,1,3,1398,570,175,0,0,0,0,0,1,17,0,0,44,51,0,0,30,671,0,3,3,0,108,0,1,0,0,0,3019\n",
      "465,0,852,688,0,1633,102,240,375,0,4,72,90,355,34,51,19,0,1,19,0,53,450,0,0,0,17,0,6,4,0,120,34,0,0,0,1059,0,0,0,0,0,0,0,0,14,0,3243\n",
      "886,0,186,79,1,360,0,116,256,0,316,417,87,477,11,156,108,67,93,248,0,0,13,14,0,16,3,70,18,0,0,455,91,0,0,0,183,0,0,0,0,0,0,0,0,0,0,5273\n",
      "963,0,150,776,51,977,266,0,474,0,66,9,13,5,391,0,4,13,0,5,3,244,52,0,1,0,0,0,92,144,0,12,53,0,0,0,8,0,5,0,0,0,0,0,0,0,0,5223\n",
      "2492,106,29,363,0,793,144,18,229,0,156,35,1,0,5,12,2,148,60,369,1,151,41,0,2,137,0,247,801,0,0,200,15,0,0,0,58,0,1,0,2,3,0,0,0,0,0,3379\n",
      "327,11,4,48,3,1783,949,366,38,0,20,490,95,0,25,15,40,52,9,159,0,0,3,160,0,0,32,0,208,1,11,40,16,0,0,2,44,0,13,0,0,0,73,0,0,0,0,4963\n",
      "337,0,1,455,15,1740,12,0,264,1,46,76,0,72,142,0,1,0,369,790,805,132,27,0,0,81,0,12,0,0,1,448,76,0,0,0,323,0,0,0,0,0,0,0,0,0,0,3774\n",
      "785,64,1035,215,7,1787,237,0,145,118,8,100,0,9,35,18,0,34,24,143,5,0,329,109,0,0,0,0,421,0,31,351,1,0,0,366,8,0,15,0,0,0,0,0,0,0,0,3600\n",
      "312,0,83,810,0,300,37,14,152,0,154,46,0,144,24,10,1,40,375,6,0,0,42,29,0,84,0,1,37,0,0,26,343,98,0,0,93,0,0,0,0,0,120,0,0,0,0,6619\n",
      "1111,14,439,97,1,1043,2,53,1658,35,67,56,0,18,0,0,10,29,6,60,0,0,18,1,0,0,0,0,25,0,41,46,297,0,0,0,59,0,376,2,0,0,1,0,0,0,0,4435\n",
      "1682,0,104,7,0,1791,927,0,33,0,11,0,0,57,6,24,2,73,0,242,64,72,396,0,5,0,16,2,767,0,0,1101,63,0,0,0,324,0,1,74,0,0,0,0,0,0,0,2156\n",
      "1599,348,367,93,0,1423,380,251,169,2,9,0,31,0,30,0,1,0,41,27,1,27,398,2,0,46,0,0,310,0,0,296,1,0,0,0,55,0,0,1,0,0,2,51,0,0,0,4039\n",
      "627,0,216,303,0,469,320,180,349,3,0,0,180,1,0,1,156,0,3,533,0,118,26,0,0,0,0,0,1017,0,178,54,64,0,0,0,0,0,0,0,213,0,0,0,0,0,0,4989\n",
      "630,0,440,447,117,300,86,24,237,269,127,49,106,4,372,87,0,23,1672,142,24,0,1043,68,0,4,9,0,15,0,0,319,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3380\n",
      "1299,144,273,341,0,824,560,1,185,2,423,39,1,86,5,0,12,33,10,9,2,48,68,0,0,277,7,0,73,0,413,66,35,0,0,3,1,0,0,0,0,0,0,0,0,0,0,4760\n",
      "410,0,207,198,0,2825,32,8,495,0,75,201,1,195,22,0,315,0,182,32,0,1,561,1,126,2,0,0,180,0,0,1,0,0,0,0,5,23,1,7,0,0,0,0,0,0,0,3894\n",
      "1807,0,42,30,4,1057,420,35,269,5,54,0,201,10,52,0,49,63,360,0,625,9,10,0,0,3,0,5,84,0,0,14,73,30,0,0,0,0,0,0,0,1,0,0,0,0,0,4688\n",
      "935,7,282,174,250,712,442,5,168,2,92,0,6,152,13,327,12,0,292,0,1,406,0,12,0,0,0,0,945,0,0,730,0,0,0,0,38,0,0,0,0,0,6,93,0,0,0,3898\n",
      "869,13,0,815,0,2231,0,18,91,41,0,4,143,0,7,0,4,0,98,353,0,1,0,0,24,0,0,249,335,0,217,13,4,0,0,21,212,0,0,0,0,0,0,0,0,0,0,4237\n",
      "770,110,63,30,2,655,28,0,112,0,8,190,16,96,76,0,16,0,7,191,0,201,308,0,4,18,26,0,369,0,0,262,26,0,0,0,127,0,136,0,0,0,0,0,0,0,0,6153\n",
      "833,0,628,267,41,951,189,0,348,0,43,1,2,0,128,12,0,7,24,0,4,159,17,0,0,0,0,0,41,0,322,10,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,5918\n",
      "293,436,29,1513,30,1895,38,0,41,19,11,264,46,48,96,0,140,0,45,88,0,34,24,159,106,5,0,0,421,0,4,697,61,0,0,0,0,0,0,28,35,0,0,0,0,0,0,3394\n",
      "967,0,5,387,662,2190,347,3,330,0,36,4,0,215,30,0,34,131,85,4,202,0,0,0,0,384,0,0,191,22,0,112,0,0,0,0,100,0,1,1,0,0,0,0,0,0,0,3557\n",
      "161,0,12,645,2,571,163,0,227,0,28,37,16,1,417,39,1,39,685,138,0,6,142,0,1,0,2,57,753,0,20,318,0,0,0,7,17,6,0,17,0,1,0,0,0,0,2,5469\n",
      "406,0,6,796,24,1886,22,8,153,30,885,12,19,2,345,627,274,0,415,72,0,21,172,46,33,0,21,107,17,0,0,345,185,173,0,0,0,0,1,46,0,0,15,0,0,0,0,2836\n",
      "522,1,98,78,29,1206,142,873,569,0,13,1,10,36,45,94,126,1,0,119,0,0,347,0,0,0,0,399,113,0,0,255,0,0,0,0,50,0,0,0,0,0,0,0,0,0,0,4873\n",
      "1126,0,516,125,35,2657,88,0,43,0,95,9,3,2,258,279,0,0,70,2,0,0,0,22,0,172,0,17,335,0,0,283,2,0,0,0,2,0,0,1,0,0,2,0,0,0,0,3856\n",
      "1210,0,116,724,17,827,44,248,818,0,176,375,29,0,8,37,40,2,57,151,62,0,564,16,0,2,0,1036,50,0,140,0,0,0,0,35,222,0,36,0,0,0,0,0,0,0,0,2958\n",
      "1885,7,628,651,50,1447,66,28,174,0,62,30,81,0,14,88,348,75,69,324,0,76,47,60,0,1,0,26,28,0,348,1,184,0,0,0,25,0,0,0,0,0,0,0,0,0,58,3119\n",
      "656,7,72,51,9,2707,481,12,175,6,20,17,21,283,33,563,0,1,33,20,13,0,5,261,0,0,1,4,268,0,0,240,28,4,0,0,103,0,0,4,0,0,0,0,0,0,0,3902\n",
      "1192,8,318,254,193,716,1288,2,32,0,12,3,0,63,61,0,55,7,1,138,0,0,45,7,0,19,528,0,17,0,314,61,3,56,0,0,98,0,0,0,0,0,0,0,0,0,0,4509\n",
      "394,0,95,400,2,2224,92,4,401,4,602,0,2,0,130,0,96,0,29,44,119,3,592,48,3,0,4,0,126,0,38,1,76,0,90,0,3,0,0,0,0,0,0,0,0,0,0,4378\n",
      "818,0,23,498,0,967,294,218,40,15,10,15,0,21,21,1,39,0,0,24,0,0,120,7,0,2,568,0,652,0,249,501,0,0,0,487,23,0,0,0,0,0,0,0,0,0,0,4387\n",
      "756,0,107,548,0,911,10,0,364,249,0,140,145,11,467,0,281,403,993,80,0,51,1,0,0,3,1,0,9,0,0,120,0,0,0,4,119,0,0,36,1,0,0,0,0,0,0,4190\n",
      "1690,0,5,112,0,1214,57,33,42,0,212,7,89,103,27,0,11,0,37,100,1,0,5,149,5,0,0,0,278,0,42,11,5,4,0,0,153,0,0,2,0,282,0,3,0,0,0,5321\n",
      "887,0,115,246,20,1021,12,111,103,72,52,123,0,1,263,0,135,1,556,275,250,150,661,0,0,39,487,4,71,0,1,396,519,0,0,0,681,0,99,1,0,2,0,0,0,0,0,2646\n",
      "704,16,682,532,33,929,0,2,274,12,17,0,113,23,7,9,1,195,46,1,0,0,13,0,85,2,0,0,446,0,1,191,296,0,0,0,1024,0,0,69,81,0,0,0,0,0,0,4196\n",
      "2505,0,86,46,3,1043,119,27,180,251,2,23,340,0,333,0,4,135,42,0,0,335,10,0,443,7,0,0,110,0,4,30,465,0,0,0,32,0,0,0,180,0,0,0,0,0,0,3245\n",
      "327,8,336,587,0,899,0,5,56,0,30,0,44,1,6,0,70,78,224,85,0,0,79,49,0,1,0,0,469,154,72,116,24,2,0,1,581,0,0,0,0,0,0,0,0,0,0,5696\n",
      "517,0,103,869,39,1600,40,46,100,6,119,3,7,253,145,6,36,0,4,212,0,0,17,0,0,69,0,5,7,363,0,21,413,0,0,0,262,0,0,0,0,0,0,0,0,0,0,4738\n",
      "753,0,401,300,0,954,4,237,482,0,824,480,210,0,2,324,2,0,0,6,37,21,93,186,5,0,0,0,117,0,4,503,6,0,0,0,252,0,0,0,12,0,0,0,0,0,0,3785\n",
      "729,26,497,44,10,968,16,281,270,1,315,12,3,460,19,52,59,690,46,297,8,2,154,0,944,384,0,5,147,0,0,71,1,0,0,0,343,0,0,19,0,0,36,0,0,0,1,3090\n",
      "1223,0,204,171,0,1401,437,38,281,91,284,0,55,0,4,71,138,88,2,78,0,10,10,166,0,0,0,0,66,0,0,13,21,0,0,0,132,0,0,0,0,0,5,0,0,0,0,5011\n",
      "1148,30,266,678,0,1222,526,569,1289,0,20,53,0,0,62,39,44,0,642,0,0,0,435,0,0,0,0,1,64,0,0,385,183,0,0,0,74,0,0,2,0,0,0,0,0,0,0,2268\n",
      "1087,0,97,443,0,2190,142,273,148,30,57,0,21,89,502,0,214,3,18,240,134,153,12,0,0,0,0,0,103,0,0,23,0,0,0,0,8,0,7,0,0,0,0,0,0,0,0,4006\n",
      "1384,75,1734,589,0,1332,152,1,211,697,4,3,111,58,3,40,0,0,27,67,16,39,3,0,4,79,0,8,82,0,0,84,17,0,0,0,122,0,0,0,8,0,0,0,0,0,0,3050\n",
      "661,0,981,139,0,871,27,201,66,0,389,87,198,0,286,2,190,3,13,0,0,47,471,7,0,100,676,0,113,0,0,11,5,0,0,0,152,0,0,2,0,0,0,0,0,0,0,4302\n",
      "1501,14,1029,137,29,1546,245,1,92,8,22,134,65,0,70,0,152,24,2,11,0,0,8,0,79,0,0,97,196,0,0,9,571,0,0,0,18,0,0,0,0,0,0,0,0,0,0,3940\n",
      "1423,167,74,206,0,350,244,1,140,41,10,0,19,0,9,1,482,62,82,9,91,773,73,0,0,807,0,49,11,0,14,6,0,0,0,135,353,0,0,0,0,0,733,0,0,0,0,3635\n",
      "183,0,124,272,52,1898,361,2,135,0,1,0,104,0,57,17,2,1180,322,424,0,0,84,2,0,0,0,0,258,3,7,261,112,0,0,0,188,0,0,0,0,0,0,0,0,0,0,3951\n",
      "545,8,64,1109,182,691,763,0,242,102,437,1,0,0,2,1,1222,77,606,12,1,62,123,0,0,0,0,1,496,29,0,71,34,0,0,0,134,0,278,0,0,0,0,0,0,0,0,2707\n",
      "647,0,26,435,16,3785,979,355,80,0,7,363,7,0,4,0,58,2,254,186,0,0,39,0,0,54,0,0,120,0,3,5,2,0,0,0,84,0,0,25,0,0,0,0,0,0,8,2456\n",
      "3960,45,122,388,6,921,153,41,4,11,124,0,3,64,675,1,0,0,57,35,3,0,12,0,0,0,0,14,246,0,4,5,6,0,0,0,172,0,0,0,0,0,0,0,0,0,0,2928\n",
      "1047,0,9,206,37,1013,435,134,360,228,4,0,162,0,95,159,833,35,2,301,0,0,212,0,0,478,0,0,15,0,0,30,2,7,0,0,465,0,0,214,14,0,0,0,6,0,7,3490\n",
      "1907,54,45,29,2,2607,546,1,75,0,152,198,1,92,0,0,13,4,14,2,0,0,40,253,25,5,30,0,99,0,2,6,281,0,0,192,135,0,0,0,0,0,56,0,0,0,0,3134\n",
      "1123,0,158,68,58,1290,95,66,311,734,1,298,0,2,13,1,2,0,514,0,43,0,485,0,0,53,1,0,9,0,32,8,88,0,0,0,11,0,0,0,0,0,0,0,0,0,0,4536\n",
      "1087,0,63,807,1,1786,19,3,282,1,28,268,0,0,39,1,1,190,144,20,0,37,55,0,0,1,0,0,27,0,0,20,956,0,0,0,12,0,0,0,0,0,0,0,0,0,0,4152\n",
      "477,2,196,601,12,411,249,2,540,201,140,537,21,0,906,0,0,6,449,0,0,2,136,209,0,117,0,96,1,0,0,327,1,0,0,3,49,0,0,0,0,0,0,0,0,0,0,4309\n",
      "176,0,7,775,0,2240,1,1,454,0,0,1,0,80,0,115,378,0,397,98,0,34,126,0,0,3,0,0,766,0,0,142,10,0,0,0,3,0,0,0,0,0,0,0,0,0,0,4193\n",
      "713,97,160,215,0,1594,120,3,484,19,12,129,148,2,0,0,351,1,1,0,12,77,52,20,0,0,101,0,246,0,0,71,0,0,0,33,86,0,0,0,0,0,126,14,0,0,0,5113\n",
      "820,2,382,1016,0,1176,167,42,116,76,89,31,760,0,0,106,529,0,62,273,0,0,24,0,0,0,0,20,36,0,0,296,68,0,0,0,81,0,0,1,3,0,4,0,0,0,0,3820\n",
      "1655,0,294,246,285,1009,38,59,75,0,203,29,0,1,18,16,424,294,186,259,12,0,11,44,0,44,0,0,104,0,0,9,0,0,0,25,65,0,0,0,0,0,0,0,0,0,0,4595\n",
      "1236,0,454,681,0,1265,87,0,17,3,3,27,3,112,210,0,13,131,81,1011,0,134,7,13,0,5,0,6,205,0,294,336,56,0,0,16,145,0,0,179,75,0,354,0,0,0,0,2841\n",
      "689,30,204,35,301,915,45,0,161,0,461,1,359,79,122,18,39,0,93,7,803,1,367,4,0,596,0,0,52,0,1,51,183,0,0,0,4,0,0,2,0,0,5,0,0,0,0,4372\n",
      "1305,0,1082,33,15,1163,15,0,923,861,35,23,75,38,79,0,276,40,2,221,187,46,38,0,0,0,2,24,211,0,0,224,30,0,0,75,0,0,0,0,0,21,0,0,0,0,0,2956\n",
      "710,0,764,260,0,2348,0,27,189,9,68,12,58,0,163,18,309,8,130,20,0,0,75,0,209,42,0,0,48,19,0,378,12,0,0,0,8,0,0,0,0,92,0,0,0,0,0,4024\n",
      "2452,0,92,267,321,1345,630,0,558,0,111,81,114,0,17,0,92,252,156,74,0,0,50,0,0,5,0,0,425,0,1,18,322,0,0,8,21,0,0,0,0,0,6,0,0,0,0,2582\n",
      "1650,0,185,219,0,1482,44,106,330,0,1,57,0,1,1,95,243,1,0,52,1,43,21,0,0,0,7,39,931,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,246,4241\n",
      "902,154,2,181,0,1013,1,1,1486,4,47,75,10,6,14,0,12,312,66,599,0,825,6,0,0,134,0,172,7,0,18,4,15,0,0,29,99,0,0,6,0,0,0,0,0,0,0,3800\n",
      "582,70,416,126,146,633,170,0,10,0,165,0,7,24,1162,3,32,15,29,444,147,1,195,0,0,18,0,131,89,0,0,11,12,0,0,140,1,0,3,0,0,0,6,0,0,0,0,5212\n",
      "650,76,352,73,20,1164,56,320,21,0,5,52,0,0,387,0,79,0,4,1677,5,93,185,0,0,215,0,128,194,0,0,111,227,0,0,0,41,0,0,0,0,0,0,0,0,0,0,3865\n",
      "302,0,304,470,6,1895,301,1,226,0,39,3,199,5,38,568,194,63,227,51,628,0,135,0,0,0,123,0,64,0,214,90,414,0,0,0,318,0,0,146,538,0,0,27,0,0,0,2411\n",
      "391,0,18,960,1,537,39,0,44,28,615,0,29,0,0,147,71,0,5,55,186,0,408,31,32,0,0,0,89,0,529,378,6,0,1,23,0,0,0,0,65,0,2,0,0,0,0,5310\n",
      "1105,61,315,230,0,767,102,0,201,132,371,115,65,50,35,0,0,109,177,0,0,297,412,183,0,0,1,0,34,0,1,354,80,0,0,0,539,0,0,5,0,0,0,0,0,0,0,4259\n",
      "365,47,40,394,88,3011,10,257,179,194,0,34,1,688,268,508,0,17,245,17,33,0,47,1,19,0,39,0,35,412,0,14,0,0,0,15,14,1,0,0,0,0,0,0,0,1,0,3006\n",
      "558,25,254,961,36,681,3,144,124,5,141,234,63,8,526,0,152,2,250,15,247,0,116,0,0,1,0,0,187,1134,0,2,25,0,95,0,69,0,0,0,0,60,0,0,0,0,0,3882\n",
      "343,0,573,605,8,1269,0,144,206,50,18,106,728,5,304,32,20,44,31,147,0,0,185,0,0,0,1,0,334,159,140,63,333,0,0,0,39,1,0,0,0,594,0,0,0,0,0,3518\n",
      "2667,0,17,516,221,567,115,0,789,54,206,886,88,0,143,34,130,207,30,19,1,6,27,2,0,15,0,0,496,0,0,65,0,0,0,2,112,0,0,0,0,0,0,0,0,0,0,2585\n",
      "946,0,143,636,0,1350,5,0,167,224,16,41,67,58,0,13,129,8,14,362,15,0,124,1,0,3,1,21,237,0,21,173,0,0,0,0,405,0,0,0,0,1,1,0,0,23,0,4795\n",
      "174,0,519,362,0,1349,130,16,190,13,15,0,25,33,4,12,28,20,130,66,0,169,57,152,0,0,0,292,790,0,0,108,162,0,0,0,130,0,0,0,3,0,0,0,0,0,0,5051\n",
      "1936,0,245,924,0,322,607,11,2,61,68,212,11,2,749,35,203,4,7,59,3,0,15,0,0,0,0,0,212,0,167,15,64,0,0,13,746,0,7,73,0,0,0,0,0,0,0,3227\n",
      "322,1,4,1274,0,746,221,10,805,0,20,26,0,25,113,0,11,24,274,89,89,242,110,5,0,92,0,32,27,0,0,2,17,0,0,0,67,0,16,492,0,0,0,0,0,0,0,4844\n",
      "1967,0,227,381,8,667,234,27,0,0,57,126,60,9,121,0,0,168,69,5,80,1,78,0,0,0,0,106,172,0,0,476,25,0,0,0,10,0,0,0,2,0,0,0,0,0,0,4924\n",
      "418,0,301,729,456,912,55,30,132,274,211,495,0,10,349,28,314,35,12,0,0,99,368,0,0,0,11,0,24,0,30,14,54,0,0,0,6,0,0,456,0,0,1,0,0,0,0,4176\n",
      "859,120,42,57,12,406,119,167,96,0,68,127,12,4,66,0,294,662,41,0,2,2,0,76,15,811,506,15,213,0,16,261,3,0,0,4,46,0,0,0,0,0,0,0,0,0,0,4878\n",
      "547,0,10,29,6,1856,104,0,38,11,143,82,502,122,660,43,55,4,92,43,11,189,228,0,0,0,103,2,519,0,0,38,69,0,0,0,50,0,0,0,0,0,0,0,0,0,0,4444\n",
      "2291,5,190,792,4,663,95,374,430,0,371,20,7,3,169,0,522,0,42,98,0,4,0,34,0,6,0,2,319,7,0,190,774,0,0,0,0,0,0,4,1,209,0,0,954,0,0,1420\n",
      "794,0,647,1016,0,1829,121,11,36,0,142,0,15,5,46,5,4,4,42,150,4,0,93,4,0,1,1,5,32,0,7,237,189,0,0,9,52,0,0,0,0,0,0,0,0,0,0,4499\n",
      "1770,159,10,407,0,1199,9,91,1083,0,82,1,127,1,58,28,1246,122,3,4,9,162,136,0,6,0,40,62,497,0,0,15,2,1,0,0,259,0,0,0,0,0,12,0,0,0,0,2399\n",
      "1523,0,12,664,0,965,24,171,15,593,15,56,0,90,261,13,0,3,96,91,15,3,262,0,0,51,0,15,14,0,0,15,32,0,0,0,101,0,0,383,0,0,0,0,0,0,0,4517\n",
      "652,4,459,887,2,798,77,75,258,4,268,0,0,0,206,1,8,319,18,314,45,0,13,0,0,145,54,0,502,0,14,706,13,3,0,0,99,0,0,0,0,0,0,0,0,0,0,4056\n",
      "1829,0,88,137,0,1534,27,1,145,0,81,40,7,1,843,6,272,0,224,13,12,0,490,5,0,1,0,1,722,0,0,432,47,31,0,0,50,0,0,14,0,78,0,0,0,0,0,2869\n",
      "2285,127,255,755,0,1430,2,91,30,1,122,0,222,127,6,4,133,3,192,50,0,0,83,0,0,91,31,1,6,0,0,4,0,0,0,0,23,0,0,0,0,0,57,0,0,0,0,3869\n",
      "862,0,1019,136,17,1287,36,240,98,88,149,429,148,306,0,0,1,36,443,1,60,0,89,21,4,236,148,3,367,0,0,185,12,0,0,4,91,0,0,3,93,2,0,0,0,0,0,3386\n",
      "990,51,84,230,0,2364,165,11,74,0,64,568,178,3,16,0,7,7,334,141,0,192,277,1,0,60,0,0,554,0,0,134,13,0,0,0,8,0,0,0,0,0,39,0,0,0,0,3435\n",
      "2315,5,480,752,0,1054,1,15,549,0,0,0,379,4,2,121,62,1,138,2,4,0,190,0,0,1,0,0,126,0,0,3,6,0,0,0,47,0,0,164,0,0,0,0,0,0,0,3579\n",
      "158,0,611,788,16,337,1062,18,39,89,4,174,1,0,4,396,30,0,275,225,59,0,260,105,0,0,972,183,109,0,0,140,147,0,0,2,9,0,0,0,0,0,0,0,5,0,0,3782\n",
      "998,14,145,318,82,1385,888,0,56,0,0,302,13,45,188,17,0,2,19,1,0,0,1,0,8,179,37,1,315,0,0,923,81,0,0,0,18,0,0,0,0,0,47,0,0,0,0,3917\n",
      "100,0,28,0,0,1177,42,248,93,23,147,261,14,77,29,0,10,22,120,16,0,3,295,901,5,0,121,0,247,0,32,49,57,0,0,0,475,0,719,0,0,0,0,3,0,0,0,4686\n",
      "2587,2,82,117,16,1381,88,0,166,67,364,64,0,3,3,363,118,1,32,0,0,0,75,0,0,0,0,105,628,0,7,0,2,0,0,0,39,0,0,0,40,1109,134,0,0,0,0,2407\n",
      "1136,0,703,493,0,776,119,3,4,91,0,38,0,246,114,96,115,0,298,39,0,0,157,19,0,1,4,1,864,0,0,3,211,0,0,0,83,0,0,0,2,0,0,0,0,0,0,4384\n",
      "247,28,177,76,19,1907,350,1,714,69,90,78,0,497,225,36,116,2,72,93,11,0,7,0,10,0,0,0,74,0,0,346,22,0,0,0,12,0,0,0,0,0,0,0,0,5,0,4716\n",
      "271,0,171,673,2,918,22,243,17,0,1,318,101,10,172,171,830,1,126,6,0,23,332,0,0,24,0,0,35,0,1217,61,267,0,0,0,35,0,0,15,0,0,0,0,0,0,0,3938\n",
      "1030,28,375,64,0,2046,221,2,433,0,299,120,178,157,555,14,128,326,29,111,0,0,3,0,0,1,4,0,610,0,22,19,13,0,0,0,65,0,0,0,0,0,0,0,0,0,0,3147\n",
      "421,194,32,90,0,1604,252,0,1063,113,13,0,40,295,478,41,26,0,249,4,0,0,148,0,0,2,0,0,392,0,74,4,15,0,0,0,15,0,0,0,0,0,0,0,0,0,0,4435\n",
      "658,1,16,636,0,1035,524,30,229,190,741,53,76,390,7,0,194,1,54,89,0,0,4,180,2,5,13,0,214,315,0,58,4,0,0,6,27,0,54,0,0,0,0,0,0,0,0,4194\n",
      "603,0,362,129,0,2403,91,23,22,0,261,1,108,0,93,0,72,51,3,395,0,7,14,18,0,13,0,0,40,0,0,1172,2,0,0,117,37,0,0,0,0,92,0,0,0,0,0,3871\n",
      "427,81,92,260,61,2507,285,0,38,0,269,33,931,44,0,1,58,37,22,172,1,113,82,6,0,0,0,0,584,0,0,13,216,0,0,0,8,0,0,6,0,0,0,0,0,0,0,3653\n",
      "1222,0,861,678,0,677,140,13,753,0,131,16,3,70,18,7,30,0,106,101,4,42,1,0,0,0,21,49,671,0,0,100,1,0,0,35,624,0,0,184,0,0,0,0,0,0,0,3442\n",
      "1977,10,325,1564,0,493,1292,0,570,0,46,5,141,42,256,0,191,47,196,105,0,0,7,0,0,32,40,0,7,0,315,2,2,0,0,0,28,0,0,0,1,0,0,0,0,0,0,2306\n",
      "351,10,123,9,0,2318,0,0,292,2,1196,0,0,1,1,0,298,0,1,58,0,0,99,1,0,0,1,0,457,0,0,135,164,0,0,0,81,0,0,1,0,0,0,0,0,0,0,4401\n",
      "922,0,382,1982,2,299,358,0,125,246,20,0,9,18,178,5,0,45,593,15,0,0,28,0,0,11,314,0,315,0,830,17,140,0,0,11,0,0,0,0,0,0,0,0,0,0,0,3135\n",
      "1951,0,147,381,111,1403,379,4,190,65,311,18,1,0,5,86,116,91,134,37,10,0,68,0,0,45,0,2,271,0,8,380,1,0,0,0,0,0,0,16,4,0,0,0,0,1,0,3764\n",
      "1059,0,379,348,0,420,7,90,1789,1,119,5,65,227,355,0,50,6,749,89,137,0,55,0,0,1,0,1,28,8,0,3,231,0,0,0,159,0,2,0,0,0,0,0,0,0,0,3617\n",
      "1257,237,27,224,5,406,394,0,203,0,0,0,244,9,1172,36,144,0,31,8,68,244,13,0,0,0,1,0,476,0,1,464,226,1,0,2,53,0,0,0,0,0,0,0,0,0,0,4054\n",
      "481,264,251,55,0,1560,143,356,5,5,6,0,16,12,840,0,315,4,15,193,0,0,131,1,0,45,28,0,124,0,15,401,0,0,0,0,417,0,0,0,19,0,38,0,0,173,0,4087\n",
      "788,2,190,100,0,1660,461,15,187,0,320,2,71,0,11,0,100,5,2,118,0,0,3,1,0,1,0,0,470,0,0,54,0,0,0,0,120,0,110,0,0,0,5,0,0,0,0,5204\n",
      "1266,0,367,63,1,1334,12,72,10,15,323,183,11,61,223,15,208,899,89,1,28,0,52,0,3,57,0,0,717,0,0,8,565,0,0,94,7,0,0,1,0,0,0,0,0,0,0,3315\n",
      "564,799,30,801,0,1179,603,423,26,0,3,27,0,100,8,0,77,0,158,231,3,23,920,53,0,34,0,0,176,0,0,977,9,4,0,306,0,0,0,0,0,0,0,0,0,0,0,2466\n",
      "1252,1,319,34,26,761,1,24,53,190,557,20,200,0,214,7,54,329,891,225,0,0,509,462,56,2,8,0,55,0,0,0,295,0,0,71,28,0,0,0,0,0,0,0,0,0,0,3356\n",
      "1010,0,153,366,197,1196,56,0,294,0,539,186,10,2,403,26,257,132,41,216,43,360,209,165,0,26,10,28,91,0,0,265,235,0,0,0,138,0,0,1,0,0,0,0,0,0,0,3345\n",
      "820,13,1225,34,0,1058,243,200,861,0,257,48,322,2,207,0,1,16,177,4,33,0,43,0,16,0,0,0,281,0,0,193,70,0,0,5,87,0,0,55,0,0,0,0,0,0,0,3729\n",
      "1372,3,355,1289,0,615,761,62,115,0,73,14,263,453,3,56,35,35,279,121,0,0,7,183,8,25,0,5,291,0,157,71,137,0,0,2,254,0,0,5,0,0,0,0,0,0,0,2951\n",
      "1029,0,246,175,190,508,295,34,248,1,131,15,185,1769,0,174,375,40,31,1,2,0,557,0,0,0,1,8,224,0,105,130,314,0,0,0,14,0,0,0,0,0,0,0,0,0,0,3198\n",
      "686,0,120,957,409,1118,35,0,277,1,296,29,0,10,1174,106,65,96,66,17,0,0,11,0,0,7,41,229,459,0,0,424,81,25,0,0,528,0,0,0,4,0,0,0,0,0,0,2729\n",
      "1519,6,519,747,1,469,36,0,431,3,59,163,0,0,31,265,260,7,51,524,0,4,362,0,0,0,0,4,289,0,0,14,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4226\n",
      "1343,0,573,205,46,1060,789,22,564,0,119,154,121,92,53,4,364,12,46,36,4,147,0,1,0,1,0,0,84,0,4,49,639,0,0,70,222,0,0,1,35,0,7,0,0,0,0,3133\n",
      "1458,0,234,128,0,494,182,1,1556,36,16,5,197,6,443,131,37,84,14,43,6,2,130,0,0,0,0,0,2,501,0,0,44,0,0,0,508,0,0,1,0,1,0,0,22,0,0,3718\n",
      "937,8,367,123,7,1930,298,1,652,173,0,10,157,14,95,0,98,157,261,38,4,228,4,49,175,18,1,83,59,0,0,3,168,0,4,0,106,0,0,76,6,0,0,1,0,0,0,3689\n",
      "664,0,155,480,179,1162,740,8,632,0,271,21,8,0,0,3,12,5,150,92,210,0,259,2,0,88,1,0,44,0,445,131,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4216\n",
      "289,78,763,184,264,1229,62,13,259,3,14,14,248,49,1,0,117,48,245,8,0,360,127,203,2,0,1,2,123,40,24,81,25,0,0,0,10,0,0,0,1333,0,0,0,0,0,0,3781\n",
      "861,0,66,78,0,2330,46,160,126,176,132,13,39,31,12,7,0,99,7,0,60,45,110,3,0,13,0,2,3,0,152,515,1391,0,0,267,60,0,0,8,0,0,0,0,0,0,0,3188\n",
      "410,6,477,38,0,2080,101,0,1401,27,359,23,0,26,87,4,25,9,0,0,1,0,257,0,0,0,0,0,306,0,0,251,0,0,0,0,402,0,0,0,0,0,0,0,0,0,0,3710\n",
      "1862,0,323,1605,24,1327,276,69,174,0,25,134,0,12,98,0,6,0,31,114,0,105,2,0,0,0,0,0,43,0,111,532,236,0,0,0,48,0,0,0,0,0,12,0,0,0,1,2830\n",
      "1017,0,228,724,1,1419,639,112,295,0,698,8,130,0,0,0,233,5,875,134,0,12,122,0,0,0,3,0,8,0,0,77,14,0,0,1,0,0,0,32,0,0,0,0,0,0,0,3213\n",
      "483,0,125,590,0,2091,248,279,703,1,95,6,0,16,462,1,74,5,279,112,0,243,231,7,0,3,1,74,165,0,370,16,254,0,0,0,2,14,0,0,0,1,0,1,0,0,0,3048\n",
      "743,12,88,1038,94,2390,73,5,265,73,24,274,1,0,55,303,121,11,80,9,6,0,511,145,0,0,0,14,3,0,34,6,732,0,0,0,10,0,9,0,0,0,0,0,0,0,0,2871\n",
      "865,16,130,241,0,1572,1489,156,174,14,169,12,68,88,8,0,2,0,491,307,44,55,497,7,0,5,0,0,5,0,37,2,1,0,0,34,513,0,0,0,0,0,0,0,0,0,0,2998\n",
      "1014,0,1,335,519,367,11,408,197,22,22,113,0,11,5,13,235,10,122,52,0,0,339,2,0,4,0,3,96,0,115,293,0,0,0,27,1,0,0,0,0,0,4,2,0,0,0,5657\n",
      "194,0,40,220,0,2262,43,226,2,0,10,26,54,213,7,262,0,0,393,44,0,49,142,0,0,0,0,45,43,0,0,362,367,0,0,11,118,0,0,0,0,0,0,0,0,0,0,4867\n",
      "1890,8,131,371,12,802,134,34,750,120,703,13,0,28,82,5,0,45,5,204,0,89,120,0,0,0,11,0,294,0,714,3,0,0,0,0,4,0,1,0,3,0,0,0,0,0,2,3422\n",
      "552,0,89,442,0,1793,653,12,185,18,60,88,1,23,167,0,45,42,11,264,0,11,150,32,0,0,1,13,43,0,0,1,231,0,0,3,16,0,0,3,0,0,0,0,0,0,0,5051\n",
      "447,0,728,119,0,2153,38,48,763,1,6,1,0,155,5,19,33,390,349,44,1,0,30,0,21,0,0,50,313,746,1,113,2,0,0,0,0,0,10,0,1,0,0,0,0,0,0,3413\n",
      "550,0,9,314,0,1472,2,0,463,79,0,67,4,0,10,781,56,2,369,21,0,17,182,0,0,13,0,0,154,0,13,67,612,0,0,1,110,0,0,0,0,0,0,0,10,0,0,4622\n",
      "1007,6,654,606,11,1194,3,499,49,8,14,1,53,88,15,136,16,0,39,0,1,0,10,0,0,24,253,1,254,0,0,831,25,0,0,0,3,0,10,0,0,0,545,0,0,0,0,3644\n",
      "2113,26,113,472,98,1645,204,41,30,15,78,0,843,0,0,29,0,0,140,5,6,6,929,1927,0,0,8,0,8,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1253\n",
      "920,0,200,1708,75,864,41,13,91,0,223,265,39,6,1,6,193,578,340,2,13,7,46,11,0,0,0,3,168,0,0,5,0,0,0,51,227,0,1,5,0,0,0,0,0,0,0,3898\n",
      "1443,0,55,142,0,1063,0,15,745,0,45,16,520,73,220,47,2,0,0,9,37,13,86,0,73,0,8,15,25,0,0,95,0,0,0,0,535,0,0,31,0,0,0,0,0,0,0,4687\n",
      "1886,71,415,110,18,1597,52,5,149,0,17,15,187,90,38,249,22,11,142,813,0,185,203,0,0,431,0,0,875,0,8,36,0,0,0,0,183,0,0,197,0,0,0,0,0,0,0,1995\n",
      "589,176,302,120,0,2187,25,212,295,380,75,0,358,68,64,1,0,3,110,605,0,0,0,0,0,0,0,112,33,0,0,3,75,0,0,83,24,0,0,0,0,0,58,0,0,0,0,4042\n",
      "1467,0,130,140,31,1986,0,141,237,0,245,12,0,86,272,0,104,2,401,17,289,121,3,124,0,19,0,0,637,0,0,22,0,0,0,0,0,0,1,4,0,0,13,0,0,0,0,3496\n",
      "684,3,179,493,0,1245,0,3,710,5,427,2,85,4,0,109,12,0,374,313,5,17,96,0,6,12,230,0,1099,0,65,296,27,0,0,0,441,0,0,0,0,0,0,0,0,0,0,3058\n",
      "224,27,0,940,0,858,55,0,644,161,298,0,1,0,227,1763,32,0,27,3,2,4,165,0,0,0,0,151,760,0,0,13,165,0,0,0,154,0,0,3,6,0,0,0,0,0,0,3317\n",
      "1586,0,0,70,85,1868,191,20,126,192,152,0,1,0,22,11,11,166,423,23,0,0,206,5,0,2,7,0,72,0,123,12,103,0,0,0,16,0,0,2,0,0,0,0,0,0,0,4505\n",
      "1639,0,7,381,5,1999,213,0,259,4,0,15,5,64,15,43,24,22,175,8,0,0,45,3,0,25,4,6,244,0,0,258,270,0,0,1,154,0,0,0,3,0,0,0,0,0,0,4109\n",
      "1121,0,53,111,0,1676,105,0,356,4,55,0,526,53,1322,14,25,139,551,7,250,0,78,3,0,0,61,8,6,0,0,22,147,0,0,0,36,0,0,0,0,0,0,0,0,0,0,3271\n",
      "1002,18,27,261,0,1353,51,253,112,138,368,29,6,11,83,414,5,4,4,138,97,0,190,16,0,31,0,15,17,0,1,192,17,199,0,0,1,0,1,0,0,0,0,0,0,0,0,4946\n",
      "781,0,25,513,0,500,200,29,152,237,525,889,15,0,2,0,93,54,3,639,0,191,199,0,0,47,0,0,10,0,0,2,109,0,0,6,0,0,0,0,0,0,0,0,0,0,0,4779\n",
      "569,0,1222,186,0,1389,43,53,31,0,40,0,1,0,118,0,0,0,14,287,1,0,9,0,0,6,0,0,102,298,0,367,21,0,0,0,245,0,0,12,0,3,0,0,0,0,0,4983\n",
      "1563,1,198,719,0,1408,14,9,5,9,112,686,0,0,602,238,26,0,554,15,3,0,14,7,0,15,0,1,453,124,0,345,0,0,0,34,24,0,0,3,0,0,0,0,0,0,0,2818\n",
      "961,0,162,575,0,1630,2,1175,131,13,34,0,170,184,770,0,14,30,1,59,0,0,120,0,3,142,166,6,28,0,4,0,428,0,0,0,125,0,0,0,0,0,0,0,0,0,0,3067\n",
      "143,0,42,1745,3,1036,63,0,118,108,13,39,49,54,53,21,99,0,32,0,46,0,537,351,22,0,4,0,14,0,4,900,1,0,0,0,3,1,0,0,0,0,0,0,0,0,0,4499\n",
      "2159,3,38,400,0,966,223,22,355,0,2,0,16,211,0,1,88,30,102,330,8,109,645,100,59,0,0,0,115,5,3,12,65,0,0,751,1,0,0,0,1,0,0,0,0,0,0,3180\n",
      "1260,0,7,61,0,1219,436,46,205,23,78,29,265,153,0,195,56,118,204,0,1,3,151,0,1,0,0,0,696,0,1,206,5,0,0,3,331,0,0,0,18,0,0,0,0,0,0,4229\n",
      "1028,0,0,421,5,393,213,0,794,87,106,3,23,22,0,1,427,112,13,361,10,0,204,1,0,1097,0,42,47,0,0,112,0,0,0,0,11,0,0,22,248,93,0,0,0,0,0,4104\n",
      "3366,7,333,266,0,525,259,89,1,0,66,209,319,124,254,0,91,0,134,8,158,6,439,235,0,0,0,0,95,0,0,15,183,0,0,277,84,0,0,6,0,0,0,0,0,0,0,2451\n",
      "2147,0,182,321,296,1817,15,3,188,0,1,355,115,0,287,2,0,187,10,21,35,0,106,0,147,232,0,3,125,0,25,31,0,0,0,0,128,0,132,4,57,0,0,0,0,0,0,3028\n",
      "1064,1,33,232,0,1082,825,63,762,287,145,195,281,10,5,1,54,0,170,192,77,1,6,0,3,0,280,0,57,0,26,251,250,0,0,0,0,0,0,347,0,0,0,0,0,0,0,3300\n",
      "657,536,257,809,0,662,170,376,475,0,7,1,496,474,0,4,8,3,94,121,1,0,96,224,0,19,15,126,15,0,0,227,0,0,0,0,199,0,0,0,1,0,0,0,0,0,0,3927\n",
      "1012,0,34,204,0,1049,370,42,596,7,2,0,257,630,1,8,0,216,112,2,0,9,995,0,0,127,31,83,0,0,0,124,3,0,0,0,488,0,0,0,0,0,0,0,0,0,0,3598\n",
      "1251,135,683,81,0,1248,67,0,83,56,78,0,192,13,65,451,0,86,122,203,0,515,69,0,2,54,3,50,564,0,265,13,1,0,0,0,498,0,0,0,0,0,0,0,0,0,0,3152\n",
      "1464,0,620,187,0,809,88,3,79,18,692,2,2,50,47,117,259,4,39,95,1,3,0,1,0,0,7,274,4,0,168,16,45,0,0,0,917,0,0,188,0,0,0,46,0,0,0,3755\n",
      "586,0,148,498,3,929,113,35,183,98,740,77,0,0,8,0,0,1711,276,2,0,91,9,0,16,0,0,0,895,0,0,2,389,0,0,0,35,0,0,0,99,0,214,0,0,0,0,2843\n",
      "698,15,841,1055,16,1355,2,386,6,1,0,107,55,26,32,80,4,113,60,17,166,10,277,9,0,2,105,0,4,0,0,41,29,0,0,0,138,0,0,2,3,0,0,0,0,0,0,4345\n",
      "1482,19,194,343,34,1140,98,0,566,0,126,0,67,132,2,1,182,31,95,299,0,24,606,0,1,0,0,112,491,0,0,24,1,0,0,0,1521,0,0,0,0,0,0,0,0,0,0,2409\n",
      "786,0,261,206,0,3129,43,30,43,0,22,276,83,6,38,0,32,0,43,95,0,116,15,0,0,0,0,15,51,0,0,142,53,0,0,0,25,0,0,65,146,0,1,0,0,0,0,4278\n",
      "572,0,837,197,0,611,236,42,269,571,147,197,67,258,14,0,4,2,251,931,0,0,3,10,0,0,145,1,141,0,47,0,157,0,0,0,69,0,0,0,0,0,0,161,0,0,0,4060\n",
      "955,0,321,654,1,1307,205,33,166,0,79,0,400,69,174,84,17,105,442,217,10,0,24,0,0,167,0,0,58,0,0,93,32,0,0,0,3,0,22,36,0,0,0,0,0,0,0,4326\n",
      "1452,0,309,489,0,486,113,254,211,207,22,7,691,169,161,920,431,3,173,0,0,42,285,10,0,3,0,0,162,0,61,301,377,0,0,96,0,0,0,13,0,0,0,0,0,0,3,2549\n",
      "491,0,255,555,1,1029,0,0,651,680,330,16,0,91,39,0,357,233,185,922,3,40,23,0,2,0,0,0,1181,0,54,74,37,0,0,0,4,0,0,7,0,0,151,0,0,0,0,2589\n",
      "1153,5,293,780,2,1155,18,0,83,11,209,253,3,2,380,234,32,2,479,732,1,6,787,10,0,176,0,69,140,211,5,4,0,0,0,0,33,0,0,0,0,0,1,0,0,0,0,2731\n",
      "1517,0,869,48,0,558,14,0,127,0,1,2,1,145,710,1,6,305,12,624,0,0,38,2,7,0,13,90,55,0,0,46,2,0,0,0,0,0,0,2,0,0,0,0,0,30,0,4775\n",
      "902,17,204,159,0,2635,464,1,329,0,103,19,89,0,0,0,86,362,33,88,131,0,209,72,0,5,3,483,30,0,0,2,0,0,0,9,25,0,0,0,0,0,0,0,0,0,0,3540\n",
      "2241,0,11,950,0,958,1,3,23,0,259,466,377,0,6,0,82,677,5,260,0,0,361,128,15,73,209,1,164,0,2,64,0,1,0,0,277,0,0,0,0,0,0,0,0,0,67,2319\n",
      "459,0,536,601,16,1470,420,291,518,3,340,0,85,0,0,459,63,98,60,7,0,0,98,8,0,0,460,46,157,0,1,1206,1,0,0,351,0,0,0,0,0,0,0,0,0,0,0,2246\n",
      "527,0,41,635,0,1624,529,26,161,40,51,50,147,76,191,6,17,6,24,665,0,11,828,8,0,0,0,0,182,0,0,103,4,0,0,254,757,3,0,758,0,0,0,7,0,0,0,2269\n",
      "812,96,36,589,0,1609,169,0,190,0,102,0,4,0,16,468,187,1,10,164,0,33,462,25,1,22,86,0,62,0,163,985,1,0,0,0,38,0,0,0,164,0,0,0,0,0,0,3505\n",
      "1436,0,78,230,0,2178,203,105,46,45,53,12,133,63,45,44,15,31,28,89,0,275,60,3,0,49,50,0,121,0,0,221,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4355\n",
      "1586,678,165,142,161,1427,5,0,39,0,205,38,0,183,108,1,36,105,85,75,89,158,110,0,0,164,0,0,21,0,91,333,2,0,0,0,2,4,0,0,0,0,0,0,0,0,0,3987\n",
      "874,0,176,381,83,1015,1520,10,62,0,678,27,37,45,28,72,81,74,311,93,0,0,293,6,0,0,0,0,14,0,111,1234,19,0,0,40,1,0,0,0,0,0,0,0,0,332,0,2383\n",
      "1495,0,83,1219,20,1102,1,0,787,113,35,5,4,20,289,0,22,26,315,639,0,92,121,73,4,0,7,22,302,0,29,6,99,0,0,0,29,0,0,0,0,0,8,0,0,0,0,3033\n",
      "1066,5,324,71,129,600,546,1,356,321,204,68,3,656,37,313,129,273,127,21,1,4,458,0,0,0,1,0,248,0,0,165,23,0,0,18,83,0,9,0,0,0,102,0,0,0,0,3638\n",
      "466,2,378,343,0,1591,346,825,250,0,2,196,478,51,0,27,0,157,140,4,0,0,5,8,20,10,0,0,113,0,0,0,69,0,0,824,1,0,0,51,408,8,0,0,0,0,0,3227\n",
      "537,0,122,370,2,484,340,0,488,6,30,0,39,387,46,187,116,0,207,299,25,97,594,0,0,0,14,2,234,118,5,27,227,0,0,0,94,0,0,279,0,0,0,0,0,0,0,4624\n",
      "2098,12,332,1625,59,2034,831,17,140,0,2,13,15,10,87,0,4,0,0,58,226,6,5,11,0,34,39,0,279,0,125,72,1,0,0,0,1,0,0,0,62,0,0,0,0,0,0,1802\n",
      "1297,0,302,252,0,897,95,0,66,0,119,393,143,328,23,236,172,356,321,83,0,0,1,0,0,10,0,0,792,0,0,91,22,15,0,0,0,0,0,96,0,0,0,0,0,0,0,3890\n",
      "1511,250,498,371,0,1544,184,232,338,0,135,0,60,149,453,0,21,40,87,275,0,0,92,0,0,0,0,0,11,0,0,91,0,9,0,44,2,0,0,13,109,0,27,0,0,0,0,3454\n",
      "667,0,937,126,15,1508,79,6,462,222,26,112,137,0,35,0,0,200,582,2,0,4,545,136,0,0,0,24,24,0,2,209,32,0,0,0,463,0,0,0,0,0,0,8,0,0,0,3437\n",
      "185,4,479,507,0,681,114,134,1176,0,0,0,245,0,134,6,247,0,188,186,0,0,1061,54,0,180,3,0,32,0,75,8,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4264\n",
      "1386,0,313,199,2,1334,84,63,84,47,188,222,152,6,113,0,3,4,137,8,8,0,282,0,0,115,0,142,411,0,4,1082,47,0,0,0,25,91,0,0,0,0,0,0,0,0,0,3448\n",
      "2408,30,81,781,0,967,399,7,372,0,34,0,0,8,179,23,57,371,155,223,0,3,28,0,58,0,0,0,947,22,0,15,0,0,0,13,13,0,0,247,0,0,2,0,0,8,0,2549\n",
      "2304,5,70,46,0,1625,19,1,218,21,403,19,81,106,32,0,0,0,0,0,0,124,475,0,26,162,1,356,508,0,0,168,8,0,0,0,6,0,0,0,0,0,0,0,0,0,0,3216\n",
      "1452,0,172,169,10,2880,306,0,612,0,276,7,132,0,579,78,136,77,157,22,0,11,71,14,9,318,1,27,201,0,0,82,0,0,0,0,286,0,0,2,1,0,0,0,0,0,0,1912\n",
      "523,0,295,1654,0,1613,75,339,399,0,48,0,113,19,202,0,168,364,31,210,0,2,332,0,0,1,49,0,518,0,1,30,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2992\n",
      "2657,0,246,68,0,2889,46,68,3,0,21,5,11,1,0,1,87,0,3,30,0,18,260,2,3,8,0,0,168,0,0,578,30,0,0,0,141,0,0,0,0,0,0,0,0,0,0,2656\n",
      "1948,0,45,175,0,1215,2,30,124,211,33,199,75,28,105,1,36,171,72,259,5,12,163,0,0,13,27,0,29,156,0,1271,160,0,0,0,159,0,0,0,8,0,0,0,0,0,0,3268\n",
      "1567,0,351,589,0,1250,57,3,273,54,10,21,0,33,37,0,409,1,91,90,5,516,124,1,0,11,30,0,24,0,88,78,0,75,0,0,0,0,0,0,0,0,0,0,0,8,0,4204\n",
      "1065,131,346,181,0,829,4,0,32,0,106,194,319,15,69,50,274,291,229,7,1,0,313,3,0,2,0,0,121,0,0,1,1,0,0,862,36,0,0,1,0,0,0,0,0,0,0,4517\n",
      "2441,0,98,672,0,816,8,77,66,8,375,344,18,276,40,7,64,10,4,11,23,0,165,5,85,11,0,53,375,0,326,53,62,0,0,0,337,0,0,0,0,0,21,0,0,0,0,3149\n",
      "1931,0,45,207,15,1140,53,0,35,552,188,175,41,89,37,18,12,46,113,35,137,0,136,9,0,42,3,0,313,0,29,83,552,0,0,0,0,0,0,0,4,0,0,0,0,0,0,3960\n",
      "139,0,323,115,0,1220,755,1,1148,0,27,39,90,1,90,18,0,1,183,150,7,3,854,27,0,22,0,538,13,0,0,26,2,0,0,0,216,0,0,0,0,0,0,0,0,0,0,3992\n",
      "1242,0,537,620,0,1299,52,334,64,124,1,15,58,97,758,4,286,0,29,153,0,277,1,0,4,10,72,226,189,0,0,391,45,0,4,0,26,0,0,0,0,0,244,0,0,0,0,2838\n",
      "1548,0,87,95,0,1142,787,85,288,36,14,56,370,0,41,2,0,123,68,21,0,0,198,0,0,477,0,14,41,0,0,1576,9,0,0,0,48,0,0,1,0,0,0,0,0,0,0,2873\n",
      "38,0,1421,41,321,1357,31,20,1480,0,77,4,559,1,201,0,348,0,89,0,0,1,3,80,14,131,10,50,76,0,0,102,229,0,0,262,35,0,15,1,0,1,0,0,0,0,0,3002\n",
      "1245,58,147,96,0,1985,56,74,35,0,158,33,0,86,850,0,6,1,1244,6,57,0,21,0,118,0,4,12,205,0,90,48,0,0,0,0,21,0,0,0,0,0,6,0,0,0,0,3338\n",
      "924,37,175,80,4,742,103,220,1450,0,122,19,175,20,279,0,0,63,119,0,1,1,2,121,0,0,0,0,233,0,0,6,3,0,0,541,29,0,11,0,9,441,0,0,0,0,0,4070\n",
      "1851,0,46,169,0,1270,10,296,476,1,41,2,25,3,613,271,0,12,3,9,9,0,162,0,0,6,0,59,340,0,4,64,249,0,0,14,4,0,0,6,0,35,0,17,0,0,0,3933\n",
      "460,23,116,494,0,1172,43,186,618,466,3,0,126,0,169,12,147,9,120,499,0,0,155,12,0,6,75,503,26,0,5,539,9,0,0,0,273,0,0,0,0,0,0,0,0,0,0,3734\n",
      "704,0,89,255,4,1494,0,6,10,19,2,234,87,28,2,117,5,86,170,222,675,0,549,0,35,161,9,378,7,0,0,34,41,0,0,49,6,0,0,0,0,0,0,2,0,0,0,4520\n",
      "1258,26,21,262,186,958,20,12,231,0,0,0,38,49,726,538,7,28,15,170,195,0,309,0,0,0,0,0,539,0,0,226,0,0,0,0,0,0,0,0,8,0,0,0,0,0,22,4156\n",
      "1060,114,267,609,7,443,281,7,51,5,31,0,128,207,25,30,35,2,22,19,1,6,297,0,196,1,1,10,635,1,0,131,64,0,0,34,472,0,0,0,0,0,0,0,0,0,0,4808\n",
      "487,4,5,105,18,2828,0,0,754,0,46,15,13,6,10,84,1090,163,550,146,0,65,353,1,0,3,0,0,14,0,0,120,6,0,0,0,7,0,0,1,0,0,0,0,0,0,0,3106\n",
      "647,0,12,241,0,1464,0,5,3,179,0,4,0,0,219,80,0,0,173,2,0,28,250,0,0,0,98,67,353,0,0,167,203,0,0,26,75,0,0,183,0,0,28,0,0,0,0,5493\n",
      "978,1,507,174,0,1414,34,5,193,1004,23,1,99,0,334,31,1,43,1,0,0,230,450,0,73,1,0,0,139,0,0,48,1,0,0,0,65,0,0,0,0,0,0,0,0,0,0,4150\n",
      "762,80,185,661,0,1172,422,98,81,1,3,32,0,1,7,28,26,298,1,1,0,1,212,1731,0,94,0,1,306,0,0,222,8,0,0,0,4,0,12,0,0,426,0,0,0,0,0,3124\n",
      "578,0,70,154,0,1604,123,13,598,0,644,201,204,0,105,0,0,0,0,228,155,0,1675,118,56,0,80,159,300,0,1,150,0,0,0,0,0,0,0,0,39,0,0,0,0,0,0,2745\n",
      "509,0,124,519,0,558,119,84,318,0,151,106,120,124,1,0,3,510,1153,869,14,0,140,1,1,0,0,0,29,3,37,217,11,0,0,0,149,0,0,588,0,0,0,0,0,0,0,3542\n",
      "795,329,122,469,12,1015,282,0,577,0,35,513,52,0,862,85,44,68,3,306,0,46,30,0,194,1,307,7,116,12,0,396,392,0,0,0,46,0,0,1,0,0,0,0,0,0,0,2883\n",
      "1674,0,409,1255,3,788,558,320,533,0,0,5,33,242,39,0,334,0,0,4,0,114,622,0,0,0,0,78,8,0,17,36,317,0,0,27,39,0,1,0,0,0,7,0,0,0,0,2537\n",
      "344,0,29,543,0,574,0,0,544,0,10,1,13,71,22,49,0,7,2,274,0,0,357,27,0,199,0,1,804,0,0,391,4,17,0,0,2425,0,0,0,473,0,144,0,0,0,0,2675\n",
      "2628,0,162,292,22,1374,65,336,158,1,61,1,7,0,80,12,119,93,52,9,31,75,52,48,0,5,3,0,590,0,0,60,28,0,0,0,196,0,0,0,0,0,0,0,0,0,0,3440\n",
      "1236,0,637,524,0,300,3,131,193,0,126,3,41,2,90,14,492,373,386,871,0,678,101,0,0,286,0,303,174,0,12,214,164,0,0,3,10,0,0,27,0,1,0,0,0,0,0,2605\n",
      "712,0,282,194,6,1394,118,205,128,0,94,4,11,330,53,22,88,0,98,12,0,26,865,446,1,103,4,0,351,0,9,0,7,0,0,0,0,0,0,1,0,0,0,0,0,0,0,4436\n",
      "696,0,176,389,209,893,334,352,103,0,55,0,39,12,306,7,52,124,114,27,74,1,2,0,0,0,0,0,32,0,0,377,14,0,0,4,43,0,14,0,0,0,2,0,0,0,0,5549\n",
      "1715,4,598,636,355,1199,0,122,676,0,124,97,1,252,8,30,0,0,531,7,0,0,305,36,0,0,130,0,0,0,0,162,88,0,0,0,80,0,0,0,0,107,19,0,0,0,0,2718\n",
      "412,176,211,200,0,1735,90,37,884,8,34,156,20,0,1434,0,0,121,93,11,6,0,7,1,15,1,73,0,400,0,5,114,0,0,0,6,4,0,0,0,0,0,0,0,0,0,0,3746\n",
      "697,25,32,335,0,2095,14,20,312,192,72,300,128,1,5,111,0,487,46,11,1,0,277,0,0,0,13,14,3,0,1,132,709,0,0,41,55,0,32,0,0,0,0,0,0,0,0,3839\n",
      "584,14,709,456,293,2864,81,0,219,0,25,133,5,0,121,0,59,0,68,153,1,46,226,1,0,17,0,9,9,0,3,0,8,0,0,0,1,0,0,0,0,0,0,0,0,0,0,3895\n",
      "585,0,703,236,16,1151,1,0,277,0,2,546,631,0,119,34,1448,21,115,0,0,0,44,3,0,0,0,30,15,0,0,37,86,0,0,7,136,0,0,0,0,0,0,0,0,0,0,3757\n",
      "751,0,122,276,0,1347,7,1,304,0,1,16,13,0,0,24,232,0,528,167,0,3,32,484,0,2,243,0,136,60,226,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,5015\n",
      "650,0,139,204,0,1737,43,0,168,0,460,0,5,1,244,136,505,2,152,8,0,54,78,0,0,4,32,0,28,0,17,27,82,0,0,0,72,0,0,30,0,0,0,0,0,0,0,5122\n",
      "1388,0,282,1640,0,627,233,110,39,0,27,0,0,9,15,12,0,13,20,43,2,231,304,212,0,0,0,1,0,0,3,0,0,0,0,0,187,0,0,2,0,0,0,0,0,0,0,4600\n",
      "474,31,72,283,775,1763,72,17,111,135,300,1,336,1,258,6,0,0,157,84,0,0,23,0,63,0,0,15,10,0,260,71,204,0,0,19,193,0,0,15,2,0,0,0,0,0,0,4249\n",
      "1416,0,457,521,6,881,0,514,180,0,104,21,81,391,52,125,95,0,2,0,20,0,601,0,0,6,0,0,1084,0,1,15,0,0,0,27,15,0,0,84,0,0,0,0,8,14,2,3277\n",
      "846,1,210,756,0,1352,0,0,653,3,67,7,83,0,9,65,5,0,68,5,0,0,151,0,0,384,1,0,519,0,0,660,157,0,0,75,4,0,0,60,0,0,0,0,0,0,0,3859\n",
      "1939,0,242,255,133,1423,18,1,64,22,509,7,26,82,4,41,282,3,2,196,52,23,22,136,3,62,58,0,607,0,50,22,7,0,0,0,7,0,0,1,6,0,0,0,0,0,0,3695\n",
      "1139,0,135,460,0,661,2,3,1140,0,23,11,74,15,2,65,110,0,800,0,29,2,17,156,0,0,0,0,1,0,0,108,65,0,0,0,4,0,0,0,0,6,25,0,0,0,0,4947\n",
      "1040,143,491,582,0,1348,92,28,8,0,1491,5,10,70,274,0,6,0,317,17,245,108,215,0,0,0,317,47,433,0,4,3,1,0,0,0,0,0,0,56,0,0,0,0,0,0,0,2649\n",
      "1328,0,67,357,24,895,333,0,25,8,28,92,1,0,566,0,1370,0,544,999,7,28,40,0,57,60,299,0,81,0,5,1,3,20,0,0,314,0,2,19,6,0,0,0,0,0,0,2421\n",
      "596,0,121,284,4,1226,48,42,754,0,9,825,0,32,100,124,130,0,8,18,5,84,181,3,0,547,3,0,517,0,169,8,0,0,0,0,7,1,0,0,0,7,0,0,0,0,0,4147\n",
      "1385,14,137,130,0,916,80,35,75,2,420,4,0,17,261,0,49,288,0,161,313,0,7,8,0,188,0,0,454,0,1517,5,153,0,0,0,283,0,0,8,0,0,34,0,0,0,0,3056\n",
      "1981,0,525,546,2,1176,79,26,71,48,43,0,0,45,49,3,0,21,16,117,0,0,315,0,5,0,0,3,55,0,4,372,41,1,0,0,1,0,0,0,0,0,0,0,0,0,0,4455\n",
      "2193,9,490,119,0,1573,95,2,135,0,113,26,331,0,136,10,67,22,88,212,0,0,128,0,0,2,89,34,75,0,0,498,0,0,0,0,93,0,0,0,6,0,0,0,0,0,0,3454\n",
      "830,0,178,278,0,1276,128,3,163,2,390,1120,82,15,1,68,487,133,11,21,4,5,119,3,1,1,1,0,29,0,0,168,284,0,0,0,1,0,0,97,0,0,0,0,0,5,0,4096\n",
      "780,87,26,877,238,1790,29,39,172,0,15,0,53,70,62,2,62,89,92,43,428,21,4,80,0,11,0,0,271,0,0,2386,211,0,0,0,15,0,0,2,0,0,0,0,0,0,0,2045\n",
      "417,2,1241,84,149,1151,345,61,158,0,90,129,63,145,45,6,28,295,9,69,0,16,1,0,0,0,5,0,597,0,5,356,35,0,0,0,13,21,9,0,69,0,109,1,0,0,273,4003\n",
      "264,0,241,284,322,1291,167,1,130,535,36,40,44,51,144,0,0,2,111,86,1,165,49,78,0,0,197,0,885,0,50,3,36,0,0,0,4,0,0,0,0,0,0,0,0,0,0,4783\n",
      "1109,2,138,1077,760,2069,640,168,5,0,16,0,0,0,1,123,451,0,3,1,1,2,144,0,79,1,0,0,28,0,0,14,50,0,0,0,5,0,0,14,0,0,0,0,0,0,0,3099\n",
      "1904,1,168,117,0,974,74,611,87,221,118,136,432,994,171,0,8,19,21,0,0,1,33,15,0,0,0,6,55,0,0,305,258,81,0,0,8,0,3,0,0,0,0,0,0,0,0,3179\n",
      "1068,4,213,243,1,1129,0,4,910,193,0,14,155,11,964,0,1,0,25,14,170,2,394,41,0,231,0,218,23,0,0,443,270,0,0,3,859,0,0,0,0,0,35,0,0,3,0,2359\n",
      "1927,0,8,538,0,1094,165,1218,58,107,7,414,1,108,3,414,7,5,24,45,2,115,0,152,0,1,0,3,12,31,4,303,358,0,0,0,58,0,0,35,0,0,0,0,23,0,0,2760\n",
      "1312,5,243,1086,0,922,5,162,38,30,2,375,17,20,173,7,89,183,274,6,0,31,9,146,0,457,0,0,76,0,0,21,153,68,0,0,1463,0,0,2,1,0,0,0,0,0,0,2624\n",
      "2308,0,141,120,9,1281,37,113,210,0,214,39,0,269,441,206,4,35,12,77,0,143,233,0,38,0,1,8,923,0,0,106,10,0,0,5,3,0,0,0,0,0,0,0,0,0,0,3014\n",
      "870,144,314,1615,0,751,89,0,132,113,9,0,0,0,222,108,0,29,70,4,0,0,24,0,0,75,120,5,620,0,7,374,14,0,0,0,104,0,0,73,0,0,0,0,0,0,0,4114\n",
      "144,117,0,91,0,1494,367,3,84,98,688,547,2,5,0,19,0,330,9,1,0,186,0,0,0,0,139,0,375,0,0,15,61,0,0,21,56,0,5,0,0,0,0,0,0,67,0,5076\n",
      "274,65,97,444,24,1993,45,152,146,947,1119,68,1,118,0,4,86,1,2,245,14,0,101,52,0,0,1,0,77,0,41,407,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3447\n",
      "672,2,134,1181,3,1844,67,0,770,2,527,2,117,92,50,32,81,0,5,153,10,441,122,44,0,0,0,0,49,24,0,0,110,0,0,0,6,0,2,0,0,1,0,0,0,0,0,3457\n",
      "503,109,791,415,0,836,99,463,14,0,11,15,148,43,2,6,144,0,163,0,99,1,58,104,0,0,110,0,539,0,0,15,362,0,28,1,56,0,501,0,0,0,0,0,0,0,0,4364\n",
      "619,0,612,459,72,2116,13,10,285,0,212,0,2,1,0,10,27,44,870,231,2,0,42,0,0,0,0,0,155,0,156,371,15,0,0,0,20,0,0,6,0,0,0,1,569,0,0,3080\n",
      "214,165,3,43,0,559,1180,770,316,0,46,5,1,438,788,0,76,32,189,133,0,52,1,260,0,287,363,0,75,0,6,197,553,0,0,1,1,0,0,1,0,0,0,0,0,0,0,3245\n",
      "516,0,157,359,6,1105,0,4,267,65,0,5,2,0,1135,7,8,124,118,154,0,41,16,0,0,21,0,0,100,0,0,12,32,0,0,0,710,0,0,2,0,0,2,0,0,0,0,5032\n",
      "1742,8,178,149,5,663,154,294,138,0,733,641,572,0,8,0,5,56,1,0,143,60,289,165,1,0,0,0,27,1,875,190,1,0,0,0,188,0,0,0,0,0,0,0,0,0,0,2713\n",
      "403,11,528,66,9,1232,2,18,40,0,486,272,19,725,33,163,212,51,237,819,197,0,23,0,0,1,34,0,1,0,0,7,784,0,0,85,14,0,0,361,0,244,0,0,0,0,0,2923\n",
      "1032,0,79,923,2,1913,41,1,27,0,76,7,0,0,96,0,2,2,270,180,1,0,108,102,0,28,5,0,4,0,21,192,3,0,0,0,134,364,0,5,0,15,0,0,0,0,0,4367\n",
      "686,0,4,514,142,809,71,317,1,822,3,40,6,3,121,0,106,993,7,24,0,126,141,23,144,2,0,38,194,0,10,227,234,0,0,60,71,0,0,295,0,0,0,0,0,0,0,3766\n",
      "790,0,311,722,5,1335,501,0,355,98,0,165,9,0,0,12,680,417,252,36,0,1,99,145,360,0,0,0,127,0,3,339,21,0,0,0,6,0,0,2,112,0,0,0,0,0,0,3097\n",
      "485,0,260,340,0,1539,278,59,1134,20,69,0,8,1,24,0,69,0,413,313,0,40,2,0,0,192,0,44,5,30,15,107,0,0,10,89,0,0,0,2,0,0,0,0,0,0,0,4452\n",
      "958,0,400,47,0,757,142,26,940,27,8,21,7,7,115,0,13,7,18,586,866,188,298,23,1,1,0,0,254,0,2,241,7,0,0,0,0,0,0,25,0,34,0,108,0,0,0,3873\n",
      "918,0,0,201,0,1001,96,438,398,0,53,0,44,1082,46,4,67,4,0,521,69,0,130,69,16,7,12,56,413,4,0,147,51,0,0,1,9,0,0,0,105,9,0,0,0,0,0,4029\n",
      "411,0,167,924,52,1156,262,6,36,0,0,341,0,0,5,0,3,0,22,2,13,1,9,0,0,0,0,3,54,0,97,7,0,0,0,15,0,124,0,1,0,0,0,0,0,0,0,6289\n",
      "339,0,15,411,0,2186,29,0,157,442,1430,0,1,1,79,362,20,5,232,22,0,102,269,761,0,7,0,7,635,0,1,0,43,0,0,0,146,0,0,23,5,0,0,0,0,0,0,2270\n",
      "833,0,5,668,102,1104,242,158,4,0,0,0,94,61,511,45,105,14,15,509,0,0,518,377,0,0,0,189,142,0,0,663,19,0,0,0,168,0,0,0,0,0,0,0,0,0,0,3454\n",
      "495,175,45,225,346,686,4,0,296,216,871,208,6,8,6,1,152,57,2,32,472,75,392,2,5,0,0,0,47,0,0,1,56,0,0,47,36,0,103,0,0,0,0,0,0,0,0,4933\n",
      "1712,401,927,98,602,1047,122,300,75,8,134,2,80,60,107,17,12,243,10,3,1,1,629,21,142,0,0,0,84,0,1,122,0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,3022\n",
      "868,2,301,1600,0,1426,90,0,326,0,33,10,0,0,51,0,2,32,0,278,2,0,251,195,0,5,0,281,464,29,0,0,0,0,0,13,1,0,0,0,0,0,0,102,0,0,0,3638\n",
      "801,46,396,36,25,614,317,2,336,0,135,761,22,153,601,0,1,490,1,6,0,270,1,228,6,0,0,0,47,0,1,13,328,0,0,0,223,0,0,0,0,0,27,0,0,0,0,4113\n",
      "1346,0,2,1381,0,263,8,55,1540,245,8,0,0,0,397,77,95,28,1,72,0,0,194,1,0,11,3,0,160,0,4,3,31,0,17,0,1,1434,0,0,0,0,0,0,0,0,0,2623\n",
      "1284,23,18,841,0,400,3,114,156,0,8,28,128,13,982,14,1165,22,65,2,0,3,0,0,40,0,415,1,242,0,0,79,0,0,0,1098,222,0,71,0,0,0,0,0,0,11,0,2552\n",
      "607,0,576,56,84,2713,226,1,139,414,253,30,73,37,278,297,0,43,96,1,0,0,30,0,0,0,5,4,16,0,12,277,25,0,0,54,6,0,0,0,0,0,0,0,0,0,0,3647\n",
      "1352,294,105,144,5,1227,135,83,564,70,44,0,85,20,0,43,19,172,121,531,18,47,9,3,214,109,0,0,19,0,0,551,3,0,0,0,3,0,49,0,0,0,0,0,412,0,0,3549\n",
      "821,1,16,373,627,1000,0,107,17,0,32,223,20,256,234,3,0,0,201,483,0,0,98,4,0,0,0,0,454,0,79,204,71,0,0,0,71,0,6,0,0,0,0,0,0,0,0,4599\n",
      "1738,0,212,220,0,2270,46,1,115,7,0,132,11,0,2,0,0,6,58,624,65,0,85,1,0,0,41,14,236,0,0,14,0,0,0,4,3,0,0,0,47,779,7,0,0,0,0,3262\n",
      "1392,0,549,401,3,1178,0,29,543,21,14,19,407,43,0,960,519,605,82,9,0,0,173,0,0,0,0,0,9,11,0,63,1,0,0,0,7,0,0,211,10,0,0,0,0,0,0,2741\n",
      "1431,3,135,770,1,1706,83,78,49,0,15,2,132,358,755,38,0,162,241,113,0,10,11,117,0,38,8,149,117,0,0,852,4,60,0,0,0,0,6,18,68,5,0,0,0,0,0,2465\n",
      "737,0,630,579,59,882,176,67,257,8,108,170,53,101,91,0,10,0,3,153,49,568,609,42,0,0,0,0,17,45,1,1,2,7,0,0,157,0,0,1,0,0,0,0,0,0,0,4417\n",
      "856,0,61,112,0,926,31,13,244,719,41,318,13,226,30,1,0,76,2,45,1,0,119,21,0,43,3,55,33,0,2,193,88,0,0,0,284,0,226,104,5,0,0,0,0,0,0,5109\n",
      "1278,0,202,11,0,466,585,34,42,15,3,766,0,0,51,74,8,6,88,213,0,77,412,1,0,0,0,35,1026,254,0,340,0,0,0,22,43,0,0,0,0,2,0,0,0,0,0,3946\n",
      "1416,0,262,206,2,1344,79,0,267,0,0,9,265,0,381,4,1,0,92,66,18,454,37,4,0,36,0,31,64,0,45,47,0,0,0,1,47,278,1,0,0,0,0,0,0,0,0,4543\n",
      "474,257,445,354,1,782,362,883,517,192,0,179,16,11,284,0,502,0,14,112,0,3,171,0,0,262,0,0,152,0,0,27,10,0,0,0,0,0,0,18,0,0,0,0,0,0,0,3972\n",
      "1770,1,457,176,0,1569,22,43,6,76,91,37,41,0,405,3,1,4,121,1,0,0,837,1,1,0,206,2,147,0,0,10,1,0,0,1,232,0,0,0,1,0,0,0,0,6,0,3731\n",
      "985,0,117,12,0,2989,45,101,259,0,143,0,12,91,170,35,316,11,194,73,0,6,220,1,116,145,19,1,26,0,0,284,289,0,0,0,99,0,0,0,0,0,0,0,0,0,0,3241\n",
      "515,0,14,793,0,934,34,148,52,40,257,5,4,1,172,0,25,18,316,232,749,0,20,2,0,151,0,0,238,4,3,443,100,0,0,0,12,0,0,0,0,0,0,23,0,0,0,4695\n",
      "781,2,203,80,303,2262,13,289,211,2,11,0,11,1,12,257,0,0,119,23,7,4,1,1,0,0,0,0,174,0,6,129,8,0,0,63,727,0,0,0,1,0,0,0,0,0,0,4299\n",
      "1298,0,201,1111,0,1798,494,37,246,26,516,117,22,106,103,8,64,109,200,59,0,23,381,8,0,0,0,0,6,0,0,47,9,0,0,0,6,0,0,0,0,0,0,158,0,0,0,2847\n",
      "567,9,3,691,8,2506,363,0,690,0,0,55,47,53,7,58,758,86,35,10,64,6,22,270,7,16,0,0,108,0,1,4,232,40,0,0,142,0,1,0,0,2,0,0,0,0,0,3139\n",
      "739,7,2126,10,1,1043,1,1,299,0,15,5,15,21,13,0,40,315,11,0,73,68,1,0,0,0,1,0,218,0,44,0,1,0,0,0,67,0,0,28,0,0,0,0,0,0,0,4837\n",
      "872,66,22,547,0,1893,6,0,145,0,596,0,73,0,6,106,8,88,16,0,2,6,1,0,5,85,5,0,318,0,0,647,0,0,0,9,7,0,0,17,0,1,0,37,0,0,0,4416\n",
      "713,0,49,735,0,1435,32,116,2,27,10,1,1,0,27,4,201,2,9,278,163,254,0,1,7,211,0,0,776,0,0,366,2,0,0,0,34,0,0,3,0,0,401,0,0,0,0,4140\n",
      "771,0,12,39,28,1187,196,0,134,55,335,625,2,3,410,90,229,0,707,8,1,1,157,24,87,0,5,0,113,0,0,785,21,0,0,4,120,0,0,2,194,174,125,0,0,0,0,3356\n",
      "1481,14,179,39,2,2218,67,5,161,566,172,135,51,0,3,111,12,63,5,2,4,0,262,4,26,2,1,0,0,0,0,59,0,0,0,51,0,0,25,1,0,0,0,0,0,0,0,4279\n",
      "1519,0,16,895,3,1688,8,0,17,0,18,1,18,0,162,33,428,0,755,0,0,0,9,0,0,242,0,0,178,0,109,82,0,0,7,0,24,0,0,150,0,0,0,0,0,0,0,3638\n",
      "433,15,551,1771,0,1665,82,24,39,1,38,0,12,203,1,2,4,15,346,2,0,299,296,127,57,0,0,0,27,0,0,7,26,0,0,0,147,0,0,13,0,0,0,114,0,0,0,3683\n",
      "453,6,855,102,6,401,14,39,165,111,14,0,30,196,873,741,12,2,91,466,11,268,383,38,0,0,0,350,4,0,296,0,3,0,0,56,2,150,155,0,1,0,1,0,0,0,0,3705\n",
      "333,0,74,306,0,1686,314,0,18,0,188,5,93,260,757,7,52,120,331,368,48,105,0,12,311,2,19,0,81,0,27,771,3,0,1,0,856,0,0,0,0,0,6,0,0,4,0,2842\n",
      "556,0,522,390,116,2173,423,5,8,0,10,1,435,0,59,0,0,19,160,250,32,5,125,25,0,0,0,0,4,0,286,84,95,0,0,39,67,0,0,0,0,1,0,0,0,0,0,4110\n",
      "414,49,474,719,0,511,227,2,582,348,0,3,63,36,27,542,109,1,26,374,30,71,0,37,0,42,0,88,79,0,0,1186,90,0,0,0,136,0,0,0,0,0,100,0,0,0,0,3634\n",
      "1373,4,568,563,271,1931,108,0,91,10,87,8,45,52,20,34,4,160,13,49,39,0,6,1,0,13,23,0,4,55,35,393,4,0,0,135,130,0,0,0,0,0,123,0,0,0,0,3648\n",
      "301,899,12,416,0,2128,742,514,4,0,122,300,45,10,24,1,514,322,563,72,0,191,62,0,0,0,0,0,553,0,39,0,0,0,0,6,356,0,0,15,0,0,0,0,0,0,0,1789\n",
      "1567,0,90,89,0,1502,234,3,84,0,97,1,54,31,66,0,262,0,47,260,0,0,2,0,0,0,8,0,261,0,0,372,295,0,0,2,3,0,0,0,0,35,0,0,0,0,0,4635\n",
      "600,0,2,134,66,1859,237,1349,369,15,117,2,16,167,40,88,122,1,170,8,302,0,224,145,2,1,204,0,0,0,13,57,0,0,0,42,69,0,0,65,0,0,0,0,0,0,0,3514\n",
      "1194,5,60,625,2,767,28,6,993,0,2,21,20,78,57,95,36,1,5,0,0,12,649,0,1,0,1,9,214,563,0,76,35,60,0,0,3,0,0,0,1,45,0,90,0,0,0,4246\n",
      "1132,0,55,319,13,1916,347,0,1433,5,0,0,4,0,8,28,4,39,92,0,4,0,304,0,0,4,0,0,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4226\n",
      "1612,0,567,31,15,1688,122,5,914,44,17,10,1,0,0,5,1,40,308,39,4,15,191,3,0,130,0,206,0,0,0,1037,4,0,0,0,16,0,0,0,0,0,0,0,0,0,0,2975\n",
      "590,0,1063,572,0,1369,49,0,464,19,0,10,0,3,7,135,15,8,631,6,2,71,113,0,0,41,0,214,98,36,0,0,254,0,0,0,110,0,0,9,40,0,0,0,0,0,0,4071\n",
      "893,0,808,66,0,1693,68,0,49,3,5,1,0,0,1098,3,0,0,1,1245,0,102,121,0,319,0,0,0,27,0,0,95,0,0,0,0,3,0,0,0,0,13,44,0,0,3,0,3340\n",
      "1506,107,458,203,0,927,291,0,7,27,325,66,182,260,333,12,22,239,41,27,0,4,14,0,0,0,1,1,876,0,0,19,111,2,0,3,4,0,3,8,0,0,0,0,0,0,0,3921\n",
      "1477,337,68,64,0,883,349,1,433,0,97,8,2,0,148,0,6,44,737,89,14,21,343,0,0,34,16,197,188,0,225,10,6,0,0,165,273,0,0,0,0,0,486,0,0,0,0,3279\n",
      "1104,0,400,477,0,2141,778,11,175,1,0,33,13,8,8,334,0,8,375,79,0,19,1,26,0,0,2,34,1,0,0,264,0,0,0,0,242,0,0,0,0,0,7,0,0,0,0,3459\n",
      "558,0,71,135,115,1696,64,5,13,51,0,58,0,409,4,0,362,326,34,18,14,0,362,24,0,0,9,0,39,1,5,130,2838,0,0,0,0,0,0,0,0,0,8,0,0,0,0,2651\n",
      "1975,0,260,521,0,1104,9,33,865,0,152,117,19,102,191,75,259,8,675,0,0,15,116,5,0,0,137,37,242,1,0,559,8,0,26,0,58,0,0,1,0,0,249,0,0,0,0,2181\n",
      "1645,0,69,57,0,1124,171,2,10,9,85,14,48,214,23,0,260,36,41,236,0,101,21,2,0,49,47,25,765,0,6,469,2020,1,0,1,223,0,0,0,0,0,0,0,0,0,0,2226\n",
      "613,1,118,702,61,1103,84,23,903,0,267,36,0,19,128,15,4,35,168,343,0,0,576,38,0,28,0,261,21,1,246,52,21,0,0,6,0,0,0,49,0,1433,0,0,0,0,0,2645\n",
      "1087,0,13,196,4,779,0,22,111,73,182,0,111,0,90,11,28,0,5,0,0,86,37,215,88,4,411,0,158,0,1,986,34,0,0,0,1,0,0,0,51,0,0,0,0,0,0,5216\n",
      "362,0,765,207,0,947,1,31,1,23,483,0,31,1,133,93,371,2,326,142,123,0,821,59,0,14,0,17,1029,0,323,128,0,0,0,373,46,0,32,0,2,0,0,0,0,0,0,3114\n",
      "452,0,884,58,31,2294,4,7,352,0,2,2,113,0,122,40,401,0,0,63,0,6,123,14,0,20,16,31,839,0,5,715,0,0,0,0,17,0,0,1,0,0,3,0,0,0,0,3385\n",
      "492,0,7,314,0,525,108,14,158,0,36,0,32,0,77,90,746,427,275,329,0,0,1349,7,0,791,52,66,124,0,0,2,2,0,0,2,83,0,0,0,0,0,0,0,0,0,0,3892\n",
      "1667,32,88,1600,1,919,3,0,2,190,427,0,0,2,18,0,2,94,64,131,0,0,2,2,0,0,0,0,207,14,417,550,1,0,0,0,95,0,0,6,0,0,0,0,0,0,0,3466\n",
      "416,2,131,438,12,453,33,2,291,7,21,48,346,18,219,4,20,786,189,37,4,3,0,1,0,0,0,1010,827,0,89,633,198,0,0,3,2,0,0,2,0,0,0,73,0,0,0,3682\n",
      "909,0,24,963,62,507,2,274,32,0,0,10,1,9,18,125,172,356,7,0,0,0,96,0,0,397,0,0,6,1,15,33,241,0,0,20,90,0,0,11,0,0,0,0,0,0,0,5619\n",
      "907,0,217,226,0,2147,64,1,88,2,3,0,743,19,3,3,0,18,417,1,0,0,65,0,0,465,35,0,109,0,9,182,8,0,0,0,169,0,0,0,0,0,2,0,0,0,0,4097\n",
      "1136,0,733,122,0,984,3,17,166,31,34,64,3,577,21,0,447,44,401,146,0,0,16,0,0,0,493,35,474,0,0,59,152,0,0,2,54,0,0,144,0,0,0,0,0,0,0,3642\n",
      "406,546,178,890,0,1139,9,7,536,2,82,66,0,13,21,16,3,0,6,11,742,42,4,356,0,42,69,21,14,0,206,176,119,0,0,0,151,0,0,214,0,0,0,0,0,0,0,3913\n",
      "796,2,130,562,2,2172,328,33,249,48,0,49,0,18,299,7,3,48,12,399,0,0,339,0,4,0,0,120,184,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4192\n",
      "1220,0,6,251,3,1346,40,1,82,0,29,5,1,0,274,0,1,271,10,539,94,30,42,4,331,0,0,25,234,74,2,318,0,0,0,3,293,0,0,0,0,0,84,0,0,0,0,4387\n",
      "566,0,311,516,54,2134,9,0,464,0,410,86,0,3,0,1,1,334,358,3,75,112,1029,0,15,0,12,0,61,0,100,55,55,0,0,0,0,75,0,0,0,0,0,0,0,0,0,3161\n",
      "1459,655,158,840,88,755,5,3,85,167,16,11,10,349,0,30,1059,0,59,1,108,248,154,0,0,0,0,24,985,0,3,537,12,0,0,0,9,0,0,37,0,0,0,0,0,2,0,2131\n",
      "3792,189,164,134,18,579,32,30,169,7,289,2,1272,0,1,6,0,0,2,0,0,0,49,2,0,49,234,39,216,0,0,52,16,4,0,0,4,0,0,4,0,1,0,0,0,0,0,2644\n",
      "927,0,69,321,0,2055,67,0,488,64,12,0,124,1,639,1,26,27,1,255,0,1,124,0,0,46,0,0,87,0,1709,424,139,0,0,0,0,0,0,92,186,1,0,0,0,0,0,2114\n",
      "620,50,7,194,0,1378,238,2,729,734,86,0,0,11,9,39,410,184,81,355,222,0,391,0,0,0,0,17,30,0,0,77,149,0,0,104,433,0,146,4,0,0,0,0,150,0,0,3150\n",
      "588,14,542,753,0,496,48,67,392,95,137,330,205,454,161,0,0,10,158,25,12,18,26,22,0,0,1,0,595,0,0,599,7,0,0,0,28,0,0,139,0,0,0,0,0,0,0,4078\n",
      "699,0,493,733,0,1161,0,0,231,32,234,38,12,2,513,3,5,32,1353,1,6,13,0,0,0,0,116,24,44,26,0,633,3,0,0,0,124,0,0,138,0,0,0,0,0,0,0,3331\n",
      "658,228,329,144,130,543,289,41,127,0,552,71,6,6,31,0,123,0,109,10,0,2,780,0,1,36,0,74,572,0,0,131,41,0,0,0,0,0,0,0,0,0,0,0,0,81,0,4885\n",
      "1887,0,84,241,0,1164,450,0,102,0,0,13,2,0,183,45,0,0,266,4,0,0,0,0,89,0,0,0,196,0,1,68,53,0,0,0,207,0,0,0,0,0,0,0,0,0,0,4945\n",
      "986,35,125,227,56,2076,285,5,35,340,94,6,1,2,322,0,255,399,72,80,0,154,36,0,0,0,32,3,390,0,0,0,287,0,0,19,155,6,347,121,7,0,3,0,0,0,0,3039\n",
      "1893,0,93,27,0,1110,556,3,86,37,415,13,137,0,280,0,12,19,625,111,81,77,274,0,47,0,0,5,489,0,0,127,33,0,0,0,75,0,0,22,0,0,0,0,0,0,0,3353\n",
      "3284,0,190,93,0,1281,240,20,788,2,128,94,28,3,93,0,19,26,3,1,0,142,935,2,17,8,0,24,353,0,0,314,1,0,0,0,22,0,0,2,0,0,0,0,0,0,0,1887\n",
      "1466,56,283,271,0,1237,45,23,1231,0,24,1,186,495,47,456,459,4,0,68,0,0,82,53,0,61,1,6,142,0,207,331,1,0,0,0,49,0,0,0,4,31,0,91,1,0,0,2588\n",
      "575,0,527,951,540,1564,512,140,225,30,64,5,0,292,20,31,8,8,41,27,1,70,713,60,0,1,162,0,160,0,0,4,18,0,2,0,209,0,0,0,0,0,56,0,0,0,0,2984\n",
      "348,5,20,383,0,2484,145,36,1552,7,20,34,358,4,63,4,0,1,38,9,1,33,17,16,0,2,16,4,900,0,506,87,0,0,634,0,82,0,0,0,39,0,0,12,0,0,0,2140\n",
      "688,23,34,472,0,1130,199,0,95,55,4,336,519,107,83,910,100,199,443,0,0,1,98,0,7,16,37,9,367,0,0,107,299,0,0,0,39,0,0,114,0,0,0,0,0,0,0,3509\n",
      "1064,34,497,480,0,917,189,0,135,0,72,70,94,177,36,3,288,0,561,65,1,119,38,17,0,0,0,44,14,0,0,983,0,0,0,0,193,0,0,0,550,12,0,159,0,0,0,3188\n",
      "281,7,248,68,0,1303,7,21,1307,0,55,34,407,188,32,0,272,2,188,242,0,3,467,0,0,109,0,0,739,0,0,47,0,0,10,0,5,0,0,0,2,0,0,0,0,0,0,3956\n",
      "698,34,61,443,15,1225,526,21,209,1,53,0,972,9,2,70,78,0,27,13,0,1,21,9,0,42,55,46,36,366,3,1536,6,0,0,308,830,0,0,0,1,0,0,0,0,0,0,2283\n",
      "941,3,92,478,85,1584,118,66,366,0,163,0,4,0,6,8,4,745,3,40,0,0,0,0,0,0,17,0,278,0,0,227,92,0,0,0,0,0,191,808,0,0,0,0,0,0,0,3681\n",
      "1036,0,336,1014,390,1206,8,175,448,11,552,760,110,4,27,26,10,0,1159,61,14,277,7,0,0,0,0,63,20,0,16,89,16,0,0,3,94,0,0,0,5,0,0,0,0,0,0,2063\n",
      "1644,143,417,92,0,1004,0,0,212,0,4,6,52,0,1,16,1508,2,0,71,1,321,144,209,1,33,0,0,7,0,0,31,0,0,0,0,761,0,0,0,0,31,0,0,0,0,0,3289\n",
      "848,0,495,336,0,897,93,14,402,10,41,0,537,32,122,0,55,2,678,95,0,3,124,4,0,0,0,0,58,0,15,1,5,0,0,1,145,0,0,0,0,0,0,0,0,0,0,4987\n",
      "574,0,317,214,274,1495,4,42,136,44,270,248,0,17,54,2,565,226,423,561,0,97,94,0,0,0,0,1,4,0,0,47,128,0,0,0,0,0,0,0,363,0,0,0,0,0,0,3800\n",
      "425,0,70,509,0,630,1010,4,42,0,564,28,464,0,883,47,30,161,16,1,15,43,150,0,0,11,0,0,299,0,38,9,16,0,0,138,0,0,0,0,0,0,0,0,0,0,11,4386\n",
      "224,14,81,992,26,1298,11,3,447,23,3,0,0,10,61,290,5,38,226,612,12,160,2,0,0,103,0,0,6,0,0,60,0,0,0,0,220,0,0,0,9,0,0,0,0,0,0,5064\n",
      "365,41,430,90,13,2312,737,105,81,0,118,287,0,44,80,7,20,0,105,228,0,0,348,507,1,2,573,0,5,0,0,80,88,0,0,1,115,0,0,0,0,0,0,0,0,0,0,3217\n",
      "502,0,575,76,0,2389,9,0,6,18,179,0,3,282,17,0,288,74,212,400,89,2,33,0,0,0,112,229,244,0,36,91,1,0,0,0,214,0,0,574,0,0,0,0,0,19,0,3326\n",
      "1114,0,29,287,0,997,247,0,119,0,10,58,178,1,155,62,21,259,106,16,0,0,10,0,0,89,0,17,2707,0,16,9,486,0,0,0,12,0,0,0,0,0,1,0,0,0,0,2994\n",
      "1347,94,98,386,30,1258,42,3,583,4,114,5,2,407,50,0,5,2,62,0,0,0,721,58,0,0,2,3,54,0,0,29,23,0,0,0,413,0,0,0,5,0,0,0,0,0,0,4200\n",
      "1773,0,1120,908,0,1288,537,0,398,0,59,0,0,0,12,0,374,3,41,553,2,18,82,0,0,0,14,0,43,0,0,49,108,0,0,0,2,0,0,1,0,0,0,0,0,0,0,2615\n",
      "218,7,1069,72,0,2185,50,10,761,28,1,0,76,14,55,35,5,0,199,163,500,8,0,0,0,6,0,0,414,0,0,508,0,0,0,0,43,0,0,4,1,55,17,0,0,0,0,3496\n",
      "374,0,739,61,102,1229,18,157,313,0,33,0,4,3,480,183,25,3,135,7,0,379,185,0,0,156,43,0,143,0,0,33,0,0,0,0,116,0,0,1,0,0,416,0,0,0,0,4662\n",
      "1292,13,139,600,0,942,49,14,160,19,27,802,0,1,0,0,96,0,0,251,0,0,88,0,12,0,1,4,721,0,132,245,278,0,0,5,0,0,0,91,0,1,0,0,0,0,0,4017\n",
      "1139,0,162,109,248,1633,35,174,69,0,43,15,3,252,5,3,82,3,3,0,158,12,268,20,160,0,1,0,761,7,20,1048,38,0,0,47,215,0,0,0,0,0,36,0,0,0,0,3231\n",
      "305,2,831,444,0,829,271,0,100,0,2,16,32,102,32,23,177,0,40,1,37,0,773,0,1,214,7,0,119,40,0,0,0,0,0,0,8,0,0,11,0,1,0,0,0,8,0,5574\n",
      "1332,0,75,457,0,1422,5,6,400,336,92,11,117,24,9,3,32,21,22,72,2,0,19,0,24,61,0,6,421,0,0,38,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,4991\n",
      "1153,62,423,313,130,335,569,51,527,16,59,1,339,0,98,3,590,0,52,129,0,78,308,8,0,131,0,1,74,0,107,124,97,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4220\n",
      "1211,0,696,262,223,667,40,0,20,0,192,11,0,0,41,134,3,82,349,98,0,0,226,0,0,10,0,99,167,0,0,194,44,0,0,0,39,0,626,18,0,7,0,0,0,0,0,4541\n",
      "516,29,4,758,0,257,9,6,229,0,142,129,12,0,331,1,101,3,12,0,29,27,12,2,10,0,0,2299,20,0,0,71,0,0,0,10,1,0,0,0,0,0,0,0,0,0,0,4980\n",
      "1419,1,80,366,0,1020,277,37,61,47,88,9,0,0,215,123,3,102,54,1,2,0,136,8,202,9,0,11,226,36,0,32,1200,543,0,161,0,0,0,0,0,0,0,0,0,0,0,3531\n",
      "1633,0,469,187,458,863,107,549,23,6,85,23,2,123,1,52,662,19,62,231,0,44,689,0,0,4,0,26,865,0,0,18,30,0,0,0,2,10,60,0,82,0,0,0,0,0,0,2615\n",
      "1190,0,1,795,0,2127,0,7,264,0,1,3,22,0,6,4,763,83,253,90,0,16,136,0,0,309,0,0,363,0,0,334,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3233\n",
      "218,1,288,945,1,1264,91,0,7,16,557,584,1,94,11,0,1,0,314,15,84,30,54,112,0,11,0,44,248,0,0,675,27,0,0,0,55,0,0,13,0,0,0,0,0,0,0,4239\n",
      "1554,148,19,489,0,807,155,0,741,1,384,22,0,320,175,29,0,0,75,9,0,372,4,2,0,0,8,0,127,0,136,66,50,0,0,0,104,0,0,0,37,0,51,0,0,0,0,4115\n",
      "1282,217,48,193,5,1234,59,0,575,0,154,711,204,56,0,2,323,2,11,7,0,1,1306,4,0,365,1,1,397,0,64,11,173,0,0,0,60,0,0,0,0,0,0,0,0,0,0,2534\n",
      "422,0,1009,401,0,853,124,4,214,2,830,41,23,1,369,301,5,0,417,9,86,0,460,0,5,336,0,0,52,0,0,746,0,0,0,0,49,0,0,0,0,0,0,0,99,0,0,3142\n",
      "620,0,36,376,0,1487,173,0,30,135,522,7,88,1,13,3,0,147,395,41,137,0,235,15,0,22,0,5,380,0,0,2,42,0,0,54,226,0,0,694,0,0,0,0,0,0,0,4114\n",
      "1481,0,2,129,13,1399,301,6,334,40,133,701,6,19,4,8,615,99,204,52,25,3,109,0,1267,2,0,0,193,4,18,222,1,0,0,0,85,0,0,11,0,0,0,0,0,0,0,2514\n",
      "667,0,104,1446,1,1492,299,20,435,0,39,11,22,1,57,51,329,4,11,32,0,0,6,2,0,0,46,23,27,0,0,35,2,0,0,0,1151,0,0,0,0,2,0,0,0,0,0,3685\n",
      "3059,0,239,96,0,766,524,0,449,0,10,0,28,148,14,6,218,153,766,1,1,0,671,0,0,0,0,0,7,0,10,92,12,0,0,0,180,0,0,0,0,0,0,0,0,0,0,2550\n",
      "308,6,310,704,41,1370,32,0,135,0,29,71,4,0,388,3,91,0,239,291,3,0,34,1,0,21,0,0,630,0,0,0,2,0,1430,0,78,0,0,0,0,0,0,0,0,0,0,3779\n",
      "477,0,1432,677,0,2066,2,0,46,0,17,9,0,24,102,0,314,5,269,944,666,156,23,95,6,4,21,0,17,0,0,5,39,0,0,0,294,0,0,0,0,0,0,0,0,0,222,2068\n",
      "2427,0,392,921,0,657,159,8,182,3,65,0,16,80,9,105,162,0,41,366,0,0,5,1,0,0,0,11,388,46,0,37,5,0,0,0,118,0,0,0,0,0,0,0,0,0,0,3796\n",
      "1718,1,54,496,105,996,0,772,658,0,8,13,21,1,583,660,24,10,114,17,52,0,88,0,0,1,2,3,31,0,0,307,42,0,0,0,133,0,0,1,0,0,5,0,0,0,0,3084\n",
      "767,1,19,9,198,1551,85,0,663,18,10,69,38,18,205,46,73,88,327,12,0,0,242,1,1,7,0,0,47,0,0,1075,2,0,0,0,2,0,0,0,0,37,0,0,0,0,0,4389\n",
      "89,0,886,744,11,1267,426,35,26,0,492,227,120,340,63,1,346,540,14,0,0,31,0,0,0,1,0,0,52,0,0,624,3,0,0,87,115,0,0,0,0,0,0,0,0,0,0,3460\n",
      "1278,4,633,31,0,721,112,3,93,0,188,3,192,0,0,282,1076,1,180,446,0,0,511,10,1,0,0,92,578,0,69,6,104,0,0,0,11,0,225,0,0,0,0,0,0,0,0,3150\n",
      "919,0,57,44,114,1197,0,0,79,4,19,370,30,60,15,0,1,0,90,393,352,1,1831,442,7,0,0,175,25,0,0,25,82,0,0,1,10,0,0,76,0,0,0,7,0,0,0,3574\n",
      "834,3,44,213,12,1528,25,0,301,0,1621,270,17,2,10,230,28,6,74,596,63,119,0,0,0,0,23,0,92,0,447,29,291,0,0,0,17,0,1,8,0,0,0,0,0,0,0,3096\n",
      "771,429,1032,46,0,1951,61,467,168,0,30,0,1,0,625,0,18,49,14,197,190,0,50,13,0,59,0,0,555,0,3,0,141,0,0,0,45,0,0,17,0,0,0,0,0,0,0,3068\n",
      "1653,0,270,134,0,931,60,81,294,2,0,85,0,427,2,4,37,6,221,94,0,11,125,86,37,0,578,0,213,0,6,15,66,0,0,0,256,0,0,2,0,0,10,0,0,0,0,4294\n",
      "1223,0,101,327,361,1377,1270,12,832,0,57,0,498,510,78,17,4,0,36,61,1,1,119,740,3,0,0,0,44,0,0,79,47,0,0,0,184,0,0,0,0,0,0,0,0,23,0,1995\n",
      "1353,274,322,83,0,1332,21,7,94,2,828,60,718,0,142,143,22,17,151,194,0,0,123,0,0,158,4,4,43,0,0,58,56,0,0,1,118,0,0,0,0,0,0,0,0,0,0,3672\n",
      "664,0,300,970,0,2394,949,192,232,0,3,0,0,36,12,5,0,0,4,92,0,1,50,44,0,0,79,8,118,0,9,57,75,0,0,3,455,0,0,0,13,0,0,0,0,340,0,2895\n",
      "350,40,59,876,436,352,47,6,212,0,4,103,1,139,0,2,345,164,67,3,3,0,38,0,0,0,0,3,22,0,0,376,2044,33,0,107,4,0,2,0,0,0,1,0,0,0,0,4161\n",
      "606,1,80,473,0,2120,35,0,77,0,17,0,124,0,621,263,102,125,224,59,0,1,60,0,2,11,0,0,225,0,0,71,49,0,0,45,65,0,0,2,0,0,8,0,0,0,0,4534\n",
      "1649,0,698,211,0,1057,586,696,198,0,0,165,0,6,59,217,34,0,0,236,2,0,803,0,0,1,13,65,358,0,0,19,36,0,0,0,73,0,0,34,0,0,706,0,0,0,0,2078\n",
      "785,15,265,1620,0,1371,9,109,0,11,254,2,0,0,10,0,174,1,591,46,12,1,595,0,0,47,0,0,294,0,0,115,25,0,0,0,39,0,0,0,1,0,0,0,0,0,0,3608\n",
      "2242,163,49,411,268,907,78,1,73,2,51,8,0,161,0,107,3,5,11,381,14,1,30,0,0,0,0,2,22,0,0,384,24,0,0,0,374,0,0,6,0,0,35,0,0,0,0,4187\n",
      "539,0,185,283,0,1077,662,0,89,0,262,177,5,1,294,5,91,644,125,3,2,0,100,5,31,5,2,0,3,0,1,47,134,0,0,0,1,0,0,345,0,0,0,0,0,0,0,4882\n",
      "498,0,15,430,7,2210,14,7,447,0,51,89,23,41,8,72,6,0,1098,64,3,16,28,0,80,130,0,0,106,0,5,229,122,0,0,12,0,0,0,412,0,0,0,0,0,0,0,3777\n",
      "2077,64,122,145,4,234,238,0,62,0,180,0,11,162,69,41,68,4,54,627,0,21,270,23,0,8,5,18,210,0,65,464,31,0,0,0,0,0,0,70,0,0,0,0,0,0,0,4653\n",
      "336,137,300,131,0,1477,0,336,175,43,23,73,97,0,49,12,62,3,1023,248,0,564,42,0,0,43,0,95,13,0,0,281,4,0,0,5,132,0,610,4,0,0,0,0,0,0,0,3682\n",
      "675,17,257,1364,4,1092,192,1,28,100,122,853,1,1,159,110,0,3,12,2,244,25,6,0,0,0,11,0,337,0,0,171,540,0,0,0,75,0,0,6,55,0,0,0,0,0,0,3537\n",
      "370,168,100,509,0,1800,68,88,94,21,0,206,37,1,554,0,68,210,9,123,47,0,300,0,0,10,18,1,269,0,0,0,1,0,0,0,7,3,32,0,0,0,0,0,0,0,0,4886\n",
      "1317,0,70,140,0,1820,91,11,239,0,2,0,4,2,100,0,15,0,435,677,58,0,0,0,0,0,0,92,568,0,0,308,672,0,0,1,21,0,0,0,2,0,5,0,0,0,0,3350\n",
      "579,386,234,538,0,504,276,4,510,23,388,19,3,1091,523,13,128,153,24,109,266,0,45,0,0,1500,39,6,41,14,0,0,3,4,0,0,99,0,2,2,0,49,0,0,0,83,0,2342\n",
      "1682,456,1,282,0,2567,178,1,24,0,149,0,17,2,94,6,1,1,1,34,0,0,119,21,0,219,0,0,161,0,13,43,17,0,0,0,16,0,191,0,0,0,0,0,0,0,0,3704\n",
      "141,0,216,386,3,2963,63,139,531,0,391,25,108,57,57,0,8,35,296,344,0,0,516,550,0,645,4,0,152,0,0,78,18,0,0,356,18,0,0,16,0,1,0,0,0,0,0,1883\n",
      "889,0,114,41,0,1047,86,0,237,33,295,0,1084,0,151,10,1,1,18,197,804,0,12,0,1,0,0,0,306,0,0,488,25,0,0,6,153,0,0,267,37,0,0,0,0,0,0,3697\n",
      "651,19,3,239,21,1139,124,0,237,1,153,13,107,180,89,2,1,0,808,311,0,11,754,107,0,1,0,124,94,0,1,294,519,0,0,0,1,0,0,10,0,0,21,0,0,0,0,3965\n",
      "1772,1,73,124,0,1448,29,5,216,0,75,223,23,2,1,45,2,46,169,172,3,0,324,468,572,36,0,3,120,0,0,17,0,0,0,0,32,0,0,0,0,0,840,0,0,0,0,3159\n",
      "404,69,667,359,18,2233,315,48,346,3,7,0,111,0,22,0,5,85,627,91,8,0,258,0,6,0,386,0,20,0,0,190,0,0,0,3,19,0,0,22,1,0,0,0,0,0,0,3677\n",
      "1213,0,0,691,5,802,146,342,122,3,8,82,27,6,1,0,0,30,86,22,0,3,57,134,426,67,0,36,31,0,194,11,118,0,0,0,189,0,0,0,9,0,0,0,0,0,0,5139\n",
      "512,0,163,736,33,644,504,5,1133,0,2,248,0,119,2,24,948,193,76,185,0,0,152,56,0,0,1,0,95,0,0,11,211,0,0,0,29,0,0,0,0,0,0,0,0,0,0,3918\n",
      "824,0,784,149,0,1054,315,8,274,0,706,0,234,2,2,2,105,59,107,136,0,118,22,19,0,59,140,359,29,0,152,11,0,0,0,0,9,0,0,2,0,0,0,0,0,0,0,4319\n",
      "1266,6,111,19,0,402,8,8,85,0,125,14,699,0,21,70,154,0,873,119,0,133,108,0,17,16,0,7,136,0,4,1,0,0,0,0,30,0,0,0,0,0,0,0,0,0,7,5561\n",
      "1285,9,291,151,2,585,881,144,255,110,140,5,2,0,113,4,1,304,257,11,118,0,304,0,0,0,6,7,149,11,0,53,351,0,0,16,316,0,370,0,0,0,0,0,0,0,0,3749\n",
      "642,47,275,1277,0,1960,56,31,844,36,14,61,648,1,0,0,5,0,282,149,0,13,59,0,0,3,0,0,535,0,0,439,52,0,0,0,55,0,0,0,0,0,0,0,0,0,0,2516\n",
      "837,1,45,474,2,2891,342,0,257,0,26,227,0,20,88,0,1,40,164,521,0,154,66,0,0,0,7,397,21,0,2,17,0,20,0,2,165,0,0,0,16,0,0,0,0,0,0,3197\n",
      "455,37,141,1268,17,1874,5,14,470,2,37,15,0,1,592,120,4,0,161,120,9,1,9,0,0,2,0,0,6,0,1,817,2,0,0,0,311,0,0,11,0,0,0,0,0,0,0,3498\n",
      "340,196,33,399,0,1463,1,1,291,63,32,2,0,0,193,7,12,48,81,151,3,71,0,0,0,1,0,0,8,0,381,574,362,0,0,0,365,0,0,0,0,0,0,0,0,0,0,4922\n",
      "619,0,195,195,0,162,40,45,1162,0,1769,57,254,0,849,0,406,32,7,327,0,90,116,0,0,93,3,0,103,28,0,24,0,0,0,53,48,0,0,0,0,0,0,0,0,0,0,3323\n",
      "1393,242,421,428,0,421,0,2,126,0,12,0,1560,106,3,417,1,3,79,730,0,187,46,0,0,0,0,1033,227,0,0,7,5,0,0,113,2,0,0,0,0,11,1,0,0,0,0,2424\n",
      "309,1,205,1287,36,407,27,11,354,0,44,24,393,123,116,0,0,37,335,3,0,262,403,0,0,73,0,1,41,0,0,104,192,0,0,0,55,0,0,113,0,0,0,3,0,0,0,5041\n",
      "806,1,364,21,14,2121,301,5,242,0,69,9,73,0,38,0,4,59,0,128,27,6,181,0,0,37,0,0,76,0,2,106,0,0,0,3,219,0,0,0,0,0,0,0,0,0,0,5088\n",
      "417,23,35,162,218,1829,15,72,661,1,535,39,71,14,1,54,75,85,83,29,378,271,114,34,0,2,0,15,576,0,105,149,459,0,0,0,194,0,0,0,0,0,30,0,0,0,0,3254\n",
      "476,0,731,456,2,753,64,6,320,169,21,326,90,0,82,1,9,0,190,63,113,2,0,228,0,52,0,0,5,0,1,20,7,0,0,0,135,0,0,0,2,0,0,0,0,0,0,5676\n",
      "654,0,350,359,9,3490,185,128,52,0,0,1,62,18,25,0,270,8,13,31,4,0,14,0,0,22,0,738,193,0,26,282,2,0,0,0,3,0,5,8,0,0,0,0,0,0,0,3048\n",
      "1968,0,158,87,136,1509,400,9,514,0,215,105,9,0,0,5,3,0,3,6,0,0,224,6,0,4,0,0,71,0,1,2,516,0,0,0,358,0,0,12,1,0,0,0,0,0,0,3678\n",
      "916,0,461,93,4,948,198,2,696,36,37,22,1,114,403,0,121,406,262,145,6,7,270,178,0,0,91,12,164,0,0,289,204,6,0,0,16,0,0,0,0,0,0,0,0,0,0,3892\n",
      "582,8,154,648,0,1592,86,0,328,16,72,0,2,0,149,172,0,38,411,1131,0,0,154,0,0,5,0,0,407,0,0,1163,31,0,0,0,1,2,0,0,0,0,8,0,0,0,0,2840\n",
      "2567,0,18,552,0,636,1,22,92,3,104,12,0,0,34,50,71,222,117,61,0,287,130,0,0,0,0,10,334,0,0,705,6,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3963\n",
      "2108,360,303,392,38,675,67,0,242,2,1,19,92,214,171,0,151,55,13,44,11,0,37,37,0,0,0,2,512,0,0,82,61,0,0,0,0,0,0,3,3,0,0,0,0,0,0,4305\n",
      "330,48,33,473,0,1585,3,22,544,0,14,360,303,0,98,5,0,0,158,3,14,68,310,17,0,27,0,427,81,344,2,61,0,0,0,0,248,0,0,23,0,0,5,0,0,0,0,4394\n",
      "1329,0,83,35,0,549,11,12,581,42,110,0,20,0,3,8,645,414,38,164,2,0,216,356,0,3,4,1185,81,0,0,245,2,0,0,1,239,0,0,4,0,1,0,0,0,0,0,3617\n",
      "1427,13,693,601,0,1213,386,6,625,132,239,0,83,0,1,1,1,14,24,102,0,0,2,0,12,139,0,16,737,420,0,91,0,0,0,2,19,0,0,0,0,0,7,0,0,0,0,2994\n",
      "342,0,443,126,0,1407,279,2,23,136,49,29,69,0,155,466,54,0,1524,380,0,0,15,30,0,0,0,0,539,0,0,31,0,0,0,23,87,0,0,3,0,0,0,0,0,0,0,3788\n",
      "1715,45,316,74,0,1104,621,3,3,585,4,11,19,2,164,0,78,0,5,4,0,0,329,0,35,186,3,0,109,144,0,632,21,0,0,0,345,0,0,0,428,1,0,0,0,0,0,3014\n",
      "1954,7,208,411,67,408,74,484,3,0,964,0,13,37,762,5,0,0,252,2,69,0,794,0,14,394,0,0,81,0,29,586,66,0,0,4,2,0,27,0,0,0,0,0,0,0,0,2283\n",
      "1653,6,734,542,0,1336,14,0,168,117,215,15,83,0,2,22,10,0,0,414,43,0,4,27,0,452,345,0,5,0,39,8,146,342,0,0,2,0,0,0,2,0,0,0,0,0,0,3254\n",
      "193,0,165,159,1,1135,17,0,299,8,267,14,404,47,74,4,168,140,0,333,0,3,37,0,0,0,0,0,24,0,34,118,0,0,0,0,1,0,113,21,0,0,0,0,0,0,0,6221\n",
      "634,256,1116,380,0,1302,276,124,625,0,69,2,34,0,0,10,6,84,349,5,34,134,38,0,0,0,0,0,8,0,95,12,41,0,0,1,27,0,0,1,0,0,1,0,0,0,0,4336\n",
      "3030,198,284,1115,0,882,108,1,994,0,148,60,309,0,2,0,1,204,64,0,1,210,170,7,0,0,0,33,400,0,60,11,7,0,0,0,0,0,0,0,20,5,0,0,0,0,0,1676\n",
      "1446,1,4,31,112,2389,128,8,749,1,365,10,0,0,15,0,4,5,87,347,166,165,405,0,45,157,0,26,98,0,31,5,31,0,0,0,2,0,0,0,0,5,0,0,0,0,0,3162\n",
      "286,184,262,1199,47,1230,254,72,153,0,236,1,4,0,149,59,3,0,19,0,124,0,221,3,1,0,0,430,152,0,71,311,234,0,0,4,251,0,0,0,2,0,0,0,0,0,0,4038\n",
      "1747,0,315,71,0,1212,70,811,219,7,153,4,0,0,50,1,83,74,24,639,1,0,10,0,0,1,4,0,2,43,1,333,0,52,0,1,62,0,0,0,0,0,0,0,0,0,0,4010\n",
      "332,2,90,180,118,2442,339,0,346,0,194,556,0,334,6,11,116,59,14,13,7,2,27,0,0,18,0,0,29,0,3,10,1,0,0,0,1,0,0,6,0,0,0,0,0,0,0,4744\n",
      "1975,0,384,214,0,1099,88,1,61,0,1262,2,0,301,115,4,0,38,44,466,0,0,279,22,42,0,3,33,120,1,11,147,0,401,0,0,578,0,1,0,0,0,26,0,0,0,0,2282\n",
      "1491,1,386,48,187,2005,279,50,344,0,20,14,22,84,565,45,11,8,0,257,0,1,759,1,0,139,0,16,44,0,0,98,0,0,0,0,2,10,0,0,0,0,0,41,0,0,0,3072\n",
      "1190,0,8,519,0,1760,28,0,410,0,46,59,255,27,16,0,3,0,405,292,18,0,216,1,0,52,90,12,395,4,13,109,304,0,0,0,12,0,0,6,0,0,52,0,0,0,0,3698\n",
      "262,0,14,280,19,1518,29,5,202,0,29,118,20,60,0,107,0,9,182,344,0,26,473,6,3,0,0,55,161,27,75,138,16,2,0,3,1620,0,0,5,0,0,0,0,0,0,0,4192\n",
      "211,128,564,598,15,406,596,17,220,0,9,323,446,6,100,1,5,39,50,2,0,1,47,17,405,1,17,0,184,0,0,310,0,0,0,18,152,0,0,278,0,0,0,0,0,0,0,4834\n",
      "619,0,143,1248,0,965,76,150,1133,0,437,697,24,0,400,0,0,28,272,317,6,0,832,0,50,144,0,1,64,0,10,296,84,0,0,0,137,0,0,0,0,0,0,0,0,0,0,1867\n",
      "1270,2,372,1320,0,658,18,0,26,1,699,0,199,199,319,38,111,209,34,11,0,0,223,27,0,638,0,100,175,0,0,40,0,0,0,0,93,0,0,25,0,0,0,0,0,0,0,3193\n",
      "2936,0,69,1476,0,500,369,0,254,0,56,17,88,0,353,0,11,0,32,306,16,0,153,1,0,0,1,104,29,0,27,157,1,0,0,0,24,0,0,0,0,0,0,0,0,3,23,2994\n",
      "518,0,113,218,0,2277,276,0,10,16,637,1,35,1,0,12,102,58,0,1,1,1,414,0,0,0,427,9,231,0,0,415,0,0,0,0,86,0,0,11,0,0,0,0,0,0,18,4112\n",
      "413,14,30,1246,0,927,543,151,11,23,437,114,6,12,32,0,0,16,2,3,1,0,240,32,21,0,0,14,1,0,1,7,0,0,0,0,5,0,22,6,0,0,0,0,41,0,256,5373\n",
      "2618,118,32,86,1,574,15,6,24,37,8,3,0,0,311,185,64,310,325,42,0,4,49,0,0,47,9,26,460,0,166,24,11,0,0,0,206,0,0,41,0,0,0,0,0,0,0,4198\n",
      "1221,0,534,223,0,919,60,148,661,2,266,36,12,0,23,0,18,8,1,26,0,75,895,0,1,725,26,268,111,0,0,376,46,0,0,0,47,0,0,0,1,48,0,0,0,0,0,3223\n",
      "534,1,305,520,0,3251,42,8,310,0,504,15,2,0,103,4,340,1,131,36,0,0,15,0,0,0,6,0,510,0,63,45,477,0,0,0,1,0,0,11,0,0,0,0,0,0,0,2765\n",
      "636,0,194,568,13,1510,201,0,38,2,258,127,41,22,117,4,110,244,229,401,97,735,322,0,21,0,0,0,198,16,0,19,60,0,0,0,39,0,0,0,0,168,0,0,0,0,0,3610\n",
      "880,74,793,282,21,1175,4,5,799,9,350,161,1,46,19,3,5,1,21,53,0,14,1249,15,0,193,0,14,231,0,0,78,2,0,0,0,29,0,0,0,0,2,0,0,0,0,0,3471\n",
      "2231,101,457,647,38,937,90,1,58,11,2,197,16,9,468,28,213,56,9,53,15,0,56,11,0,744,1,1,24,0,0,474,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,3048\n",
      "1744,69,18,1661,8,293,48,0,2,28,806,66,0,92,76,114,10,1,283,54,0,315,92,0,0,716,11,0,448,94,0,53,4,0,0,0,191,0,0,0,0,0,10,0,0,0,0,2693\n",
      "714,46,372,888,0,1356,78,24,49,0,27,6,0,10,624,15,556,261,74,60,0,130,281,0,0,96,28,90,228,0,0,903,13,0,0,44,238,0,0,0,0,0,0,0,0,0,0,2789\n",
      "803,0,440,198,0,692,150,0,25,0,208,267,735,1,420,10,4,28,352,68,80,0,2,0,330,104,0,0,125,0,20,124,2,0,0,4,0,0,0,0,0,0,0,0,0,0,1,4807\n",
      "1021,0,799,188,0,1135,2,0,1311,1,67,1,3,2,134,43,3,0,356,50,0,0,150,30,0,9,13,14,55,0,0,221,35,0,0,0,357,0,0,0,0,0,0,0,0,0,0,4000\n",
      "2491,0,576,160,0,990,263,34,121,0,25,49,46,0,0,344,0,0,19,15,0,26,197,1,0,152,0,1,139,0,67,7,7,0,0,0,289,0,0,0,0,0,0,0,0,0,0,3981\n",
      "1664,0,26,341,32,1197,337,0,239,12,6,0,2,93,91,0,1,0,368,52,0,0,118,0,0,26,152,201,916,0,0,24,128,0,0,0,7,0,124,0,0,0,4,0,0,0,0,3839\n",
      "1780,1,72,397,12,348,67,0,1311,0,4,0,3,0,400,118,236,44,0,0,85,1,3,143,0,719,0,0,381,0,5,5,7,0,0,0,32,0,0,1,5,0,0,0,0,0,0,3820\n",
      "1516,14,167,226,0,1873,10,0,62,18,124,0,112,2,43,542,13,20,178,13,0,0,228,178,51,5,0,0,374,0,54,43,36,0,0,4,99,0,0,9,0,0,0,0,0,0,0,3986\n",
      "1419,19,201,160,0,1740,1150,13,32,13,162,49,81,116,2,1,0,10,0,65,0,0,21,0,64,11,0,253,87,0,0,211,0,0,0,0,42,0,0,0,426,0,0,0,0,0,0,3652\n",
      "1643,0,98,170,4,1326,113,150,523,233,42,3,0,16,3,0,27,11,31,108,0,0,306,171,0,28,0,63,94,0,49,285,0,0,0,3,97,0,0,0,0,0,0,0,0,0,0,4403\n",
      "600,0,197,841,0,969,254,249,497,0,146,103,208,0,103,173,7,97,86,2,0,1,917,0,0,11,206,23,565,0,0,213,299,0,0,0,17,0,0,0,0,0,0,0,0,0,0,3216\n",
      "687,0,618,443,0,1188,443,405,909,6,206,414,148,0,0,0,21,207,67,111,0,16,209,129,0,6,0,0,152,0,0,489,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3123\n",
      "856,146,107,2011,2,1399,16,1,63,0,15,0,0,5,27,34,701,0,210,179,0,112,552,1,0,0,0,0,15,0,0,227,204,0,0,0,111,0,258,0,0,0,0,0,0,0,0,2748\n",
      "666,0,178,600,11,689,24,6,10,0,26,15,867,0,93,8,1,215,254,1,0,175,28,365,0,0,2,6,193,0,0,28,5,0,0,6,7,0,0,7,0,0,0,0,0,0,0,5514\n",
      "741,63,499,442,0,3143,496,35,20,0,0,1,180,22,33,37,1,11,124,27,5,2,24,0,0,0,0,0,199,0,0,44,12,0,0,0,467,0,0,222,0,0,0,0,0,0,0,3150\n",
      "1599,6,43,158,9,1533,16,302,139,5,0,137,14,0,543,0,181,0,45,7,0,3,13,12,81,0,0,507,998,0,3,264,14,0,0,0,149,0,262,0,4,0,0,0,0,0,0,2953\n",
      "730,9,0,176,0,3437,234,0,9,1,22,305,0,0,30,0,292,0,0,60,94,0,818,0,2,40,0,0,36,1,221,96,279,0,0,0,149,0,0,0,0,0,0,0,0,7,0,2952\n",
      "971,0,103,120,12,651,3,0,223,86,2,1,120,684,189,12,47,0,116,4,0,0,408,10,960,0,0,0,168,0,39,129,217,0,0,0,147,0,0,0,0,0,0,0,2,0,0,4576\n",
      "596,224,51,134,0,2384,242,292,416,42,17,92,1,6,135,1,76,2,0,151,16,0,5,0,0,312,34,66,425,0,31,8,219,0,0,450,185,0,55,19,0,0,1,0,0,0,0,3312\n",
      "1067,5,238,670,253,796,774,70,456,5,270,757,209,4,2,1,289,125,4,6,15,11,45,2,0,223,0,1,37,0,0,47,3,0,0,1,162,0,106,0,4,0,0,0,0,0,0,3342\n",
      "188,32,1599,1665,0,347,593,23,66,3,590,13,12,24,84,38,10,198,169,289,104,21,138,0,1,14,0,95,524,0,0,41,41,0,0,0,98,0,0,0,0,0,0,0,0,0,0,2980\n",
      "811,66,229,164,0,1616,182,38,159,0,18,63,1,0,63,1,38,176,207,1062,0,0,8,8,0,0,199,79,39,0,219,37,114,0,0,0,6,0,0,0,0,0,0,0,0,0,0,4397\n",
      "657,67,140,52,0,1639,15,148,239,0,891,50,15,83,3,42,24,585,20,17,75,66,422,0,0,109,172,274,13,151,0,10,0,0,0,0,399,0,0,34,0,0,0,0,0,0,0,3588\n",
      "1634,193,459,500,33,1594,90,7,151,0,19,3,642,17,598,0,0,146,29,14,0,38,25,1,0,34,0,2,41,0,54,1,15,0,0,0,131,0,164,1,0,0,0,0,0,0,0,3364\n",
      "1053,0,434,640,0,2345,187,42,270,0,76,43,0,110,52,0,11,5,20,37,68,93,7,0,0,2,0,0,19,0,25,239,416,0,0,1,341,0,7,105,0,0,0,0,0,0,0,3352\n",
      "1566,148,1,381,33,906,86,48,131,0,4,0,21,128,11,0,13,23,12,316,59,255,218,0,0,102,3,0,178,0,262,2,11,0,0,0,50,0,0,0,0,0,0,0,0,0,0,5032\n",
      "238,8,176,74,10,926,338,41,296,0,17,0,143,0,0,8,114,266,121,261,0,56,207,273,3,7,0,11,987,0,0,82,17,0,127,0,154,1,17,0,12,0,283,0,0,0,0,4726\n",
      "271,0,248,1006,10,685,9,218,200,0,3,75,788,0,169,1235,1,88,45,10,5,1,114,0,0,0,5,0,7,0,3,156,349,0,0,0,18,0,0,0,3,0,0,0,94,0,0,4184\n",
      "1090,1,398,267,0,1444,24,0,143,21,455,0,4,0,44,0,1,0,245,1,11,1,19,2,0,64,3,24,42,0,281,51,94,0,0,1,6,0,0,0,0,47,0,0,0,0,0,5216\n",
      "1050,493,1470,105,12,648,6,335,84,0,8,19,0,23,143,181,54,0,35,34,9,0,240,2,0,237,0,27,1,0,0,7,48,0,86,0,262,0,0,0,0,0,0,18,0,0,0,4363\n",
      "641,1,91,186,2,2168,405,93,176,64,16,81,3,5,50,0,23,142,46,39,144,0,5,1,0,149,1,3,6,0,53,0,0,0,0,0,114,0,0,0,23,0,0,0,0,0,0,5269\n",
      "1148,7,30,602,1,1035,368,0,387,18,180,47,85,61,327,105,108,848,1588,139,18,2,329,0,0,273,0,2,14,0,0,37,109,0,0,0,744,0,8,16,0,0,0,0,0,0,0,1364\n",
      "837,0,244,306,2,1325,33,6,654,0,155,81,135,285,24,11,64,2,396,329,152,0,71,382,0,15,0,0,23,0,0,541,39,0,0,0,0,940,0,321,0,0,0,0,0,0,0,2627\n",
      "410,0,1128,136,13,1181,153,44,43,90,313,1,441,283,28,15,255,3,368,244,0,610,72,0,0,9,0,67,129,334,0,48,1,0,0,32,30,0,0,1,11,0,16,0,0,0,0,3491\n",
      "2673,0,145,704,73,1328,246,58,315,44,70,0,0,14,25,4,310,8,11,429,0,4,222,0,0,0,0,0,122,0,0,30,205,0,0,0,851,0,0,0,0,0,0,0,0,0,0,2109\n",
      "471,0,59,25,17,1289,347,4,1155,414,162,0,64,450,341,0,17,2,540,38,347,349,184,0,0,1,85,82,9,0,0,829,3,0,0,3,652,0,0,0,0,0,0,0,0,0,0,2061\n",
      "493,0,300,208,1,1248,8,238,187,0,38,482,135,4,144,0,173,12,130,1296,5,0,480,0,0,0,279,0,38,7,0,160,183,0,0,405,128,18,46,21,0,0,0,0,0,0,0,3133\n",
      "746,25,312,226,0,1392,33,0,469,10,174,212,61,0,47,3,25,0,1,212,0,0,29,110,157,0,103,0,62,0,173,6,0,0,0,0,10,0,0,59,0,0,205,0,0,152,0,4986\n",
      "879,0,47,416,1,1464,335,0,254,0,0,66,29,15,191,0,116,88,35,31,409,40,1,0,0,0,0,0,237,0,165,145,11,0,0,0,121,0,0,1,0,0,0,0,0,0,0,4903\n",
      "1350,0,57,703,29,744,83,3,133,22,55,6,19,24,54,187,8,6,59,38,3,186,23,0,0,25,0,35,55,0,0,0,0,0,0,0,1293,0,0,0,27,0,0,0,0,0,0,4773\n",
      "1826,7,28,372,0,1970,157,0,224,18,14,162,38,0,241,12,5,34,81,70,0,11,1085,5,0,0,58,46,111,0,21,222,10,0,0,0,153,0,0,0,0,0,0,0,0,0,0,3019\n",
      "2550,4,44,45,52,616,289,151,488,179,350,85,305,1,88,30,471,4,241,59,5,0,34,0,155,0,26,1,54,0,11,247,0,0,0,0,0,0,0,0,1,248,2,0,0,0,0,3164\n",
      "297,0,173,326,0,272,165,0,601,77,302,0,2,0,62,435,490,632,9,1132,321,0,123,0,0,83,0,0,12,35,0,16,216,0,0,0,15,0,0,0,0,0,0,0,0,0,0,4204\n",
      "376,13,302,368,140,969,659,2,169,0,0,49,314,58,295,150,70,85,82,1,124,0,199,293,0,0,0,0,1,0,0,1,76,0,0,207,0,0,115,0,0,0,0,0,0,0,0,4882\n",
      "754,5,425,90,1,1455,9,532,84,3,4,41,2,0,990,30,35,579,200,3,0,0,69,0,0,0,0,0,370,0,0,178,23,0,0,1,1,0,0,0,1023,2,0,0,0,0,0,3091\n",
      "1191,18,11,405,0,810,40,461,605,406,217,0,185,10,30,14,250,124,4,513,14,109,10,9,1,0,0,0,441,0,0,102,0,0,0,0,140,0,0,0,0,0,0,0,0,0,0,3880\n",
      "276,150,394,131,0,839,0,0,93,367,0,47,151,221,71,22,289,0,25,1,6,22,217,32,0,14,145,0,394,0,26,8,95,2,0,0,289,0,0,14,0,0,0,0,0,0,0,5659\n",
      "1111,70,412,112,102,656,1063,176,93,0,2,16,0,0,270,0,40,1,130,26,92,0,30,84,0,0,0,0,1065,0,0,0,10,0,0,0,370,0,0,0,216,219,0,10,0,0,0,3624\n",
      "945,0,327,596,14,438,544,0,77,16,12,565,34,4,0,6,0,0,14,18,0,75,80,9,0,0,1,7,1,0,0,35,0,0,0,0,188,0,0,0,0,0,0,0,0,0,0,5994\n",
      "1285,0,870,146,0,1128,65,67,188,5,458,0,17,18,157,217,223,31,94,0,0,3,93,174,0,97,0,2,844,0,0,329,400,0,0,0,2,0,0,0,0,17,12,0,0,0,0,3058\n",
      "1221,0,146,1219,0,1414,407,1,246,6,51,88,1,11,8,29,21,6,3,350,69,0,34,72,0,0,0,0,8,0,0,1,386,0,0,0,1,2,0,0,0,0,0,0,0,0,0,4199\n",
      "1094,0,246,129,0,1689,322,279,218,78,54,5,189,44,64,76,50,8,700,154,3,5,1,0,2,64,172,16,292,0,0,163,11,0,0,0,3,0,11,0,5,0,0,0,0,0,129,3724\n",
      "645,1,308,407,0,3564,138,6,3,246,151,213,13,36,10,212,1,66,5,470,0,0,206,351,0,35,0,42,296,0,30,62,39,0,0,0,23,0,0,1,0,0,0,0,0,0,0,2420\n",
      "344,0,790,465,1,768,15,0,365,202,623,7,145,12,0,0,2,55,9,2,0,7,712,824,0,4,0,44,123,0,0,102,5,0,0,0,487,0,0,0,94,0,68,0,0,0,0,3725\n",
      "822,319,315,90,2,2118,571,0,265,5,952,0,0,275,17,36,163,36,216,245,69,0,736,0,0,26,0,1,344,2,226,44,48,0,0,0,2,0,35,0,8,0,2,0,191,0,0,1819\n",
      "2206,21,363,367,1,1084,466,58,172,105,94,130,5,106,9,0,7,14,8,17,75,0,8,1235,0,0,1,98,252,0,0,155,659,0,0,0,40,0,0,0,0,0,0,0,0,4,0,2240\n",
      "707,0,186,265,0,859,1486,204,216,0,558,0,21,30,17,32,0,21,1,274,12,0,241,13,29,0,10,9,19,0,6,2683,45,0,13,0,13,0,0,0,0,0,0,0,0,0,0,2030\n",
      "527,0,830,327,0,1421,162,25,153,24,85,31,1,12,8,51,17,219,7,16,0,0,944,0,0,1,37,0,12,0,0,199,1,0,0,0,39,0,0,0,0,0,0,0,0,0,0,4851\n",
      "383,60,43,1073,0,1130,1559,0,329,133,1,94,63,0,53,0,0,2,215,463,28,122,204,0,0,0,0,0,178,0,0,25,42,0,1,0,13,0,0,2,0,0,108,0,0,0,0,3676\n",
      "924,0,221,567,0,529,0,185,427,3,584,422,28,971,17,0,0,0,569,8,4,21,138,0,0,4,0,35,56,0,0,29,0,0,0,0,74,0,0,0,0,0,0,0,0,0,0,4184\n",
      "1208,0,35,876,85,1369,307,7,25,1,81,248,49,350,27,313,207,9,6,203,8,209,284,0,9,0,1,715,12,0,32,11,20,0,0,35,211,0,0,0,0,0,0,0,0,0,0,3047\n",
      "1147,36,444,178,0,1143,0,9,264,2,9,159,12,327,13,42,178,1563,2,271,156,224,134,4,0,0,522,0,2,0,0,1,0,0,0,0,139,0,0,0,0,0,0,0,0,16,0,3003\n",
      "920,0,4,677,3,660,261,3,0,5,498,6,7,58,2,194,18,2,47,658,0,0,480,26,0,6,0,101,130,0,0,30,548,0,0,0,12,0,0,0,0,5,0,12,0,0,0,4627\n",
      "1148,3,92,120,129,695,7,48,238,473,16,0,34,0,331,660,107,1,21,0,0,0,95,192,593,0,0,2,414,0,0,0,88,0,0,0,9,0,0,0,112,0,0,12,0,0,0,4360\n",
      "987,0,1022,32,28,398,837,301,298,25,31,0,0,12,27,65,0,12,156,1,467,0,2,0,0,0,0,0,324,0,0,984,259,0,0,0,390,0,0,0,0,0,0,0,0,0,0,3342\n",
      "944,0,77,128,442,1377,103,0,229,0,70,0,113,0,489,56,2,0,175,37,6,0,527,0,0,1,11,87,170,1515,0,0,140,0,0,0,424,0,1,27,24,0,0,35,0,0,0,2790\n",
      "703,0,174,751,316,1933,15,0,0,4,0,46,405,0,35,0,14,53,33,9,10,0,639,0,0,1195,47,0,39,0,0,197,5,0,0,0,529,0,0,0,0,0,0,0,0,0,0,2848\n",
      "1345,11,46,179,280,1583,570,4,7,0,2,0,146,92,15,3,315,58,88,42,48,0,66,0,0,0,600,0,48,0,2,4,203,0,0,2,0,0,3,0,0,0,1,0,0,0,0,4237\n",
      "594,0,557,1297,0,1118,0,380,114,2,22,81,3,1,6,0,282,400,74,52,1,8,29,78,0,142,91,0,299,0,194,4,57,0,0,0,128,0,27,0,0,0,7,0,0,0,0,3952\n",
      "1453,0,103,111,0,1689,541,3,291,2,367,0,362,2,24,11,524,0,11,4,1,53,208,2,0,1,0,0,254,0,42,59,16,0,0,2,175,0,0,49,9,0,0,0,0,0,0,3631\n",
      "2326,91,6,47,13,943,1,0,142,0,450,3,13,0,562,2,983,0,243,0,100,2,8,0,0,1,0,0,370,411,0,42,9,139,0,2,11,0,0,27,0,0,0,0,0,0,0,3053\n",
      "301,1,112,419,0,566,193,0,463,225,27,30,131,63,236,275,512,0,0,108,0,0,373,1,0,22,0,19,426,0,0,350,2,0,0,0,2,0,138,2,0,0,0,0,0,0,0,5003\n",
      "2169,4,63,184,0,760,587,26,709,0,10,29,0,0,82,0,3,0,2007,176,178,0,225,0,4,0,1,0,466,0,0,23,1,0,0,178,178,0,0,21,14,0,0,0,0,0,0,1902\n",
      "1578,0,54,819,2,1143,77,4,158,0,4,335,17,4,38,26,475,34,3,17,4,316,23,0,0,39,11,0,67,0,7,16,110,0,0,29,33,0,0,0,0,0,0,10,0,0,0,4547\n",
      "872,14,60,289,7,1575,28,1070,140,0,465,3,0,2,51,0,141,6,29,19,26,0,31,0,0,5,130,3,315,0,0,464,64,0,0,5,883,0,4,75,6,0,0,0,0,0,0,3218\n",
      "819,0,696,1519,4,1654,59,0,1018,0,139,48,156,0,195,89,397,15,134,285,43,34,0,3,8,0,0,0,274,0,7,10,41,1,0,6,2,0,0,0,0,0,0,0,0,0,0,2344\n",
      "1441,153,526,1565,0,1609,306,253,209,0,1,167,12,0,15,0,0,139,59,13,0,1,75,80,7,43,13,1,341,0,127,6,443,0,0,0,113,0,0,1,0,0,0,0,0,0,0,2281\n",
      "1108,11,119,443,0,827,61,13,161,0,163,26,48,145,108,2,11,7,121,543,706,201,104,14,0,570,0,0,151,0,3,41,54,0,0,1,66,0,0,0,0,0,79,0,0,7,4,4082\n",
      "1188,21,113,182,0,2158,12,63,881,0,0,38,0,14,40,0,21,8,7,94,131,0,209,42,0,4,0,5,527,0,0,27,8,0,0,93,457,0,5,0,0,0,0,0,0,0,0,3652\n",
      "774,108,144,1634,271,329,52,113,206,0,37,14,0,12,23,2,27,36,2,356,19,0,159,9,0,74,0,0,1,0,33,992,412,0,0,0,0,0,0,4,0,0,57,0,0,0,0,4100\n",
      "1366,12,107,1433,15,530,156,14,13,214,9,310,345,1,4,0,563,62,217,0,59,1,114,138,10,0,0,0,1635,12,0,839,37,0,0,0,319,0,0,0,6,0,0,0,0,0,0,1459\n",
      "2022,43,293,123,0,693,342,11,429,3,31,6,16,16,449,0,22,22,314,241,0,0,88,0,0,0,1,0,131,0,0,2,22,0,0,3,0,0,0,5,0,0,208,9,0,0,0,4455\n",
      "1811,0,245,376,0,1257,7,431,450,99,405,0,0,39,843,4,7,0,122,1,326,4,311,0,0,0,4,15,485,0,7,241,107,0,0,7,46,0,10,0,0,0,0,0,0,0,0,2340\n",
      "741,29,311,621,87,1690,0,66,821,4,811,160,85,165,41,207,4,1,3,278,5,188,104,1187,0,0,0,135,0,0,0,23,0,0,0,0,186,0,23,0,2,0,0,0,0,0,0,2022\n",
      "1657,0,574,268,325,1334,27,0,573,0,6,82,11,6,290,7,211,36,41,77,0,2,72,2,409,0,0,257,5,0,0,7,19,10,0,406,64,0,0,92,0,0,0,0,0,0,0,3130\n",
      "762,4,675,508,0,1660,18,21,60,0,0,4,0,592,56,281,2,118,824,4,0,278,317,1,15,0,285,141,518,0,4,311,1,0,0,107,108,0,2,0,0,0,0,0,0,0,0,2323\n",
      "328,0,417,597,4,988,119,0,625,15,38,0,28,0,382,44,358,224,3,0,679,0,0,103,0,0,18,0,82,0,6,39,865,0,0,0,42,0,0,62,0,0,0,0,0,0,0,3934\n",
      "1417,78,70,1352,0,1514,259,201,6,18,10,2,3,294,38,244,269,10,37,16,0,2,243,0,251,512,390,31,31,7,0,1,18,0,0,0,42,0,0,2,53,0,0,0,201,0,0,2378\n",
      "1398,0,335,617,25,1712,8,0,2,9,1,207,1,412,51,44,2,3,45,67,0,5,469,33,0,20,0,0,16,0,6,45,238,0,0,0,2,0,0,31,0,0,0,0,0,0,0,4196\n",
      "1005,136,148,516,0,1840,273,66,445,0,41,45,4,82,15,216,861,103,978,15,0,0,5,11,0,0,0,82,295,0,0,55,0,0,0,12,56,0,0,0,0,0,0,0,0,0,0,2695\n",
      "2703,6,1,732,4,690,186,0,308,194,488,12,81,51,8,0,69,127,462,3,0,384,0,0,0,0,0,0,5,0,0,233,105,0,0,31,258,0,153,198,0,0,0,0,0,0,0,2508\n",
      "463,0,204,373,3,1343,79,77,456,2,96,92,73,468,1,0,5,336,66,180,0,67,115,29,0,0,527,0,369,0,0,21,37,0,0,24,165,0,0,0,0,0,47,0,0,0,1490,2792\n",
      "615,23,102,696,0,910,8,27,156,0,8,0,0,672,10,0,2,4,93,0,0,0,40,277,0,96,0,1,415,0,28,10,23,0,0,0,1245,0,0,330,0,0,0,55,0,0,0,4154\n",
      "1357,112,32,477,11,677,35,16,163,5,33,37,31,0,99,10,126,399,16,0,214,0,96,0,0,4,0,11,201,0,76,7,7,0,0,0,322,0,3,1,0,0,0,0,0,0,0,5422\n",
      "2114,1,580,99,0,863,118,2,151,13,10,3,182,25,1,164,760,19,212,168,0,0,63,0,52,0,0,16,114,0,307,113,31,0,0,0,897,0,0,1,0,0,0,0,0,0,0,2921\n",
      "1018,0,396,485,26,615,118,285,73,13,27,0,394,7,1595,116,157,0,10,4,0,0,71,0,0,512,0,0,42,0,62,284,8,0,0,0,1108,0,0,0,99,0,0,0,0,0,0,2475\n",
      "1516,0,221,81,82,1713,493,636,19,6,3,21,5,0,321,0,61,0,9,24,33,0,12,16,0,0,0,1,145,0,12,370,152,0,0,6,146,0,0,34,0,0,0,0,0,0,0,3862\n",
      "432,2,222,595,369,1777,439,0,209,0,579,87,3,0,44,2,343,0,556,37,0,180,32,286,0,0,14,11,43,0,0,464,143,0,0,0,0,0,0,3,40,0,0,0,0,0,0,3088\n",
      "2786,20,100,37,0,845,453,2,286,16,70,1,0,13,102,26,1,5,0,14,0,0,36,176,0,0,12,0,295,0,252,118,147,0,0,194,27,0,3,0,0,46,0,0,0,0,0,3917\n",
      "586,5,63,63,3,975,146,13,65,178,40,148,546,2,126,0,0,163,124,1,0,9,51,0,0,80,0,1,171,0,0,233,4,0,0,8,4,0,0,0,0,0,7,0,0,0,0,6185\n",
      "816,1,489,140,4,1176,498,117,50,298,140,210,0,12,979,6,0,3,88,2,0,0,45,17,0,7,66,0,709,0,0,10,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,4093\n",
      "933,0,48,84,0,2237,724,18,336,0,47,0,0,563,148,141,49,7,0,347,23,240,115,0,0,0,0,351,49,0,3,64,671,0,0,0,6,0,0,2,0,0,7,0,0,0,0,2787\n",
      "447,150,98,1565,0,986,301,70,118,0,711,193,43,20,17,1,0,0,68,0,0,0,20,0,0,1,0,463,74,0,0,1,114,0,0,6,11,0,0,0,1,0,0,0,0,0,0,4521\n",
      "1398,0,34,110,99,1279,395,1,255,0,213,181,12,377,3,6,266,21,93,150,0,284,73,8,0,37,3,9,9,0,0,263,0,0,0,15,1,0,6,20,5,0,0,0,0,0,0,4374\n",
      "2109,0,129,946,0,1759,1,83,4,2,111,40,0,64,651,31,412,11,147,0,205,2,227,47,0,4,81,59,81,0,20,20,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2752\n",
      "1111,0,528,468,1,981,145,3,1137,42,17,8,129,0,23,0,0,2,59,160,280,5,10,0,0,185,0,0,385,0,0,104,81,0,0,0,370,0,0,0,0,0,0,0,0,0,0,3766\n",
      "2097,97,58,647,0,579,52,112,944,0,19,457,147,47,471,21,257,0,9,209,3,142,180,0,0,0,4,1,255,0,0,21,16,0,0,0,470,0,0,0,0,0,0,0,0,0,0,2685\n",
      "1051,0,84,65,11,1438,180,85,615,0,201,24,57,566,69,0,18,272,73,53,168,106,161,0,0,21,0,0,982,0,0,152,8,0,0,0,240,0,0,0,1,0,0,0,0,0,0,3299\n",
      "597,0,317,2091,158,1529,279,33,507,2,1401,0,0,0,21,0,10,104,30,79,234,1,112,0,0,0,1,0,141,0,0,65,63,0,0,0,0,0,11,0,0,0,0,0,0,0,0,2214\n",
      "490,0,29,60,0,638,118,9,762,0,537,40,96,171,1,6,142,1,526,396,0,0,758,6,27,40,0,188,83,0,0,7,0,0,0,0,156,0,0,0,0,0,0,283,0,0,0,4430\n",
      "2445,0,81,680,415,939,123,375,397,3,0,53,96,0,0,2,285,22,41,132,16,0,5,0,5,0,0,7,258,0,0,25,52,0,0,19,103,0,0,0,0,0,0,0,0,0,0,3421\n",
      "890,114,208,367,475,1095,59,0,66,150,4,8,120,10,615,374,2,0,160,55,2,127,184,15,0,0,0,0,350,0,13,7,5,0,0,0,763,0,0,0,0,0,0,0,0,0,0,3762\n",
      "725,120,7,250,226,1035,552,441,4,51,21,1,52,0,280,0,0,4,11,15,0,9,5,0,0,0,131,0,167,384,50,13,53,0,0,0,180,0,0,254,0,0,1,0,0,0,0,4958\n",
      "545,2,55,210,0,420,348,0,300,10,804,23,0,0,4,1,76,150,77,5,768,0,412,2,76,4,570,0,556,0,0,17,62,0,0,2,59,0,0,0,416,0,0,0,0,0,0,4026\n",
      "1941,0,313,741,0,574,25,3,388,4,565,61,22,12,24,0,20,205,0,24,134,1190,154,1,5,14,106,239,10,0,0,27,59,0,0,453,0,0,104,0,0,0,0,0,0,0,0,2582\n",
      "922,2,18,140,24,2011,71,167,19,0,637,71,325,502,253,185,35,226,51,22,0,310,83,1,0,0,0,0,51,2,4,210,509,0,1,0,7,0,0,0,0,0,0,8,0,0,0,3133\n",
      "229,0,49,806,77,1393,337,41,391,5,3,45,4,0,14,0,49,15,58,94,21,0,92,0,0,0,75,0,251,0,12,208,0,0,0,0,88,0,0,0,0,0,181,0,0,0,0,5462\n",
      "1131,0,344,334,0,1528,45,23,182,37,272,0,0,1,0,1748,1,0,2,175,204,0,60,31,0,0,153,0,648,0,0,42,61,0,0,76,44,0,0,2,0,0,0,0,0,0,0,2856\n",
      "417,626,375,141,0,1513,78,0,174,460,478,37,112,0,69,95,69,0,140,1050,0,0,126,39,0,27,14,0,32,0,0,194,0,0,0,0,329,0,0,6,0,0,0,0,0,0,0,3399\n",
      "1195,81,66,103,23,739,39,0,570,7,1045,151,0,10,140,110,7,24,532,1,0,10,436,190,0,46,0,109,91,0,1,449,329,0,0,0,246,0,0,0,5,0,0,0,0,0,0,3245\n",
      "882,0,231,992,8,848,210,42,645,0,1,150,0,167,99,42,155,252,100,4,0,0,1,561,2,3,45,0,121,0,0,29,63,0,0,0,55,627,0,0,0,0,0,0,0,0,0,3665\n",
      "399,0,5,206,0,2685,133,0,617,105,15,479,90,34,5,0,314,26,5,39,4,558,230,0,0,37,0,0,465,0,2,100,14,0,0,0,85,2,1,370,0,0,9,0,2,0,0,2964\n",
      "1096,0,119,191,2,1807,47,17,365,0,2,2,46,91,11,36,34,1,999,230,0,27,228,0,0,2,0,188,828,0,56,110,5,0,0,0,136,0,0,96,52,0,2,0,0,0,0,3174\n",
      "974,479,1491,7,133,553,55,1,104,9,0,4,0,0,252,6,1,100,242,17,969,0,50,0,0,146,111,2,161,45,145,553,0,0,0,0,151,0,0,0,0,0,0,0,0,0,0,3239\n",
      "1207,77,287,759,215,1312,371,30,222,9,908,71,222,97,2,0,209,0,17,115,0,69,690,0,0,0,1,0,118,0,0,845,43,19,0,0,11,0,0,2,0,0,0,0,0,0,0,2072\n",
      "1453,0,2,323,1,1403,44,10,85,64,10,10,0,407,7,0,3,193,3,1,8,4,129,0,0,205,2,0,534,0,0,376,0,0,0,60,2,0,1,0,2,0,3,0,0,0,0,4655\n",
      "999,6,17,290,256,1555,64,18,542,0,45,1,36,40,1,115,659,635,361,4,1,0,323,405,0,4,0,82,9,0,0,15,4,0,0,0,9,0,0,9,0,3,0,0,0,0,0,3492\n",
      "330,0,88,222,9,1092,517,2,21,69,424,0,60,0,469,42,631,0,126,164,156,262,74,0,0,0,0,0,461,0,68,6,318,0,0,0,1,0,0,0,93,0,0,0,0,0,0,4295\n",
      "481,0,316,431,0,576,197,8,487,129,645,90,8,2,568,20,0,1,29,23,0,152,8,173,0,0,0,0,153,0,2,8,76,0,0,0,120,0,0,0,0,0,0,0,0,0,0,5297\n",
      "1574,329,464,1217,0,1010,91,191,63,0,165,448,0,0,2,4,1,0,12,218,0,0,9,568,0,0,0,0,582,0,120,8,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,2900\n",
      "568,217,460,918,0,794,219,0,273,0,126,786,0,0,1,16,84,7,31,34,137,0,70,1,0,6,0,29,9,0,10,700,54,0,0,0,5,0,0,0,0,0,0,0,0,73,1,4371\n",
      "347,2,363,207,2,2514,488,4,27,42,99,0,0,98,11,7,0,0,472,5,78,23,70,1,1,2,10,0,16,0,13,232,23,0,0,0,2,4,0,0,0,0,0,60,0,0,0,4777\n",
      "591,0,300,351,0,742,31,0,737,2,770,2,1,4,16,0,57,0,21,29,434,0,584,286,17,29,57,98,209,0,126,1,0,0,0,0,576,0,6,0,0,0,0,0,2,0,0,3921\n",
      "642,139,150,1043,77,1074,0,636,56,169,0,1,22,10,30,0,6,0,0,11,89,0,3,36,0,117,265,0,566,0,830,59,2,0,0,3,106,0,0,0,0,0,0,0,0,0,0,3858\n",
      "507,16,816,39,49,900,16,102,1457,67,6,150,23,194,75,0,6,0,3,272,261,41,83,0,0,11,0,35,330,30,0,535,104,0,0,0,317,0,0,0,354,8,0,0,1,0,0,3192\n",
      "857,0,366,581,0,955,29,224,362,0,8,454,33,361,143,4,117,0,1071,312,758,0,23,188,0,0,0,2,176,16,204,68,29,0,0,51,68,0,0,19,0,0,0,0,0,0,2,2519\n",
      "545,1,851,421,0,1743,310,0,42,2,2,559,0,233,0,11,224,349,53,371,1,35,489,0,37,62,0,0,285,0,0,54,2,0,0,13,29,0,0,0,0,0,10,0,0,0,0,3266\n",
      "1846,0,136,121,0,1580,44,77,301,0,46,0,2,12,4,294,135,190,33,242,35,0,33,0,0,0,49,1168,78,0,0,5,0,0,0,39,1,0,0,0,0,0,0,0,0,0,0,3529\n",
      "1027,4,997,1038,17,1472,573,85,85,101,0,150,109,23,246,78,28,0,183,1,1,0,207,103,0,0,98,40,270,0,13,595,185,0,0,0,103,128,0,0,0,0,0,0,0,3,0,2037\n",
      "1711,1,231,1923,0,337,0,22,718,49,3,9,336,0,24,35,11,215,576,0,121,0,108,0,0,0,221,0,48,0,57,23,0,0,0,0,77,0,0,0,0,0,0,0,0,0,0,3144\n",
      "1727,0,30,1315,0,416,252,0,110,9,360,0,0,13,0,81,89,0,833,140,0,1,11,0,0,1,19,234,18,0,0,125,1,0,0,0,15,0,0,0,1,0,0,0,0,0,0,4199\n",
      "1367,0,490,933,0,791,0,0,424,3,81,9,16,45,120,0,3,43,257,1,0,440,1,14,0,1,13,0,176,0,0,152,36,98,0,0,390,0,6,0,39,0,0,0,0,0,0,4051\n",
      "936,5,85,102,85,2309,908,6,385,160,15,0,0,0,5,0,9,0,1,225,652,1,0,195,0,1,107,1,1,0,0,157,115,0,0,0,16,0,0,5,294,0,0,0,0,0,0,3219\n",
      "1959,65,7,258,0,1479,139,6,437,204,20,12,5,0,16,8,124,94,392,12,12,0,10,0,0,29,2,3,230,0,0,214,8,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4252\n",
      "1005,24,439,762,14,1262,302,78,23,8,48,7,26,0,20,162,846,6,146,2,0,91,132,1,0,20,1,4,122,0,0,65,4,0,0,0,142,0,0,1,1,0,360,0,0,0,4,3872\n",
      "316,11,777,128,0,733,125,274,154,0,28,245,19,0,1107,0,126,8,121,289,5,1,8,0,4,233,0,12,309,0,0,250,283,0,0,4,123,0,0,0,0,0,1,0,0,0,0,4306\n",
      "789,4,165,78,0,1833,45,0,843,119,197,16,3,51,52,3,37,374,165,1,2,42,34,0,45,0,23,16,245,0,0,11,59,0,172,41,376,0,0,0,0,11,0,163,0,0,0,3985\n",
      "2325,5,14,195,0,452,7,188,226,47,9,1268,1,333,6,1,0,174,782,59,367,52,1,0,0,197,0,0,65,0,0,0,1,0,0,0,47,0,0,0,7,0,0,0,0,6,4,3161\n",
      "1987,0,501,13,0,807,21,0,272,0,58,1,13,573,2,0,55,594,14,3,278,0,25,5,7,0,1,1,426,0,42,17,167,0,0,0,0,0,0,0,77,0,0,0,0,0,0,4040\n",
      "1832,627,5,826,0,2226,250,0,106,44,461,0,24,194,2,381,346,12,452,136,0,0,10,0,0,55,0,0,138,0,0,188,8,0,0,0,27,0,0,0,0,0,0,0,0,0,0,1650\n",
      "1011,3,73,1329,3,484,1851,2,49,0,189,1,8,30,51,3,28,19,22,0,0,19,21,3,0,0,15,3,166,1,2,11,0,0,0,3,747,0,0,0,0,0,0,0,0,0,0,3853\n",
      "617,0,0,38,141,1434,933,0,352,309,515,7,0,1,4,425,928,2,635,37,154,389,11,1,0,73,182,322,183,0,64,146,111,0,0,0,4,0,0,0,0,0,1,0,0,0,0,1981\n",
      "1823,0,713,364,113,218,2,0,24,4,46,12,1,104,20,3,193,1,50,43,21,0,11,0,1,7,1,0,125,0,0,0,91,0,0,0,234,0,0,21,0,0,0,0,0,0,0,5754\n",
      "1073,0,80,29,0,111,308,35,342,2,76,3,0,17,2,336,0,508,23,256,1,13,6,0,380,0,31,0,334,0,0,667,439,176,0,0,925,0,0,716,0,28,2,0,0,0,0,3081\n",
      "743,10,27,1566,0,1064,407,8,132,0,26,12,79,2,2,177,345,4,251,24,1,0,78,32,0,53,733,21,1,0,0,68,5,0,0,0,21,0,0,0,0,0,8,0,0,0,0,4100\n",
      "1499,49,14,727,0,1488,52,45,204,20,111,1,180,2,51,44,0,0,42,121,180,0,16,30,0,0,432,6,12,0,0,483,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,4188\n",
      "253,0,236,1202,0,1012,543,170,618,0,1148,2,0,1,91,56,0,4,21,1,29,0,159,0,0,95,2,1,22,0,0,0,12,0,0,10,43,0,0,0,2,0,2,0,0,0,0,4265\n",
      "1544,2,130,99,0,1290,343,334,338,137,54,15,16,47,523,45,115,19,11,184,3,15,81,0,0,0,0,0,292,0,5,36,25,0,0,6,106,0,0,78,0,0,0,0,0,0,0,4107\n",
      "955,0,17,345,0,1636,32,5,615,6,19,1,1,5,55,0,1,73,272,38,0,136,343,29,0,119,36,1,373,0,110,37,0,0,0,0,6,0,0,8,141,0,0,0,0,0,0,4585\n",
      "641,0,7,1007,0,1771,235,0,491,57,927,30,5,16,384,0,33,100,125,169,0,0,64,23,0,595,0,0,230,0,0,56,18,0,2,0,7,0,0,0,0,0,0,0,0,0,0,3007\n",
      "947,730,245,910,0,574,679,0,35,0,235,59,8,5,163,583,159,118,138,475,0,72,73,0,0,52,0,0,895,0,0,490,36,46,0,3,336,0,0,39,0,0,0,0,0,0,0,1895\n",
      "284,128,36,468,0,674,1482,40,17,0,45,10,98,2,3,104,66,0,160,205,0,33,1355,22,0,1,40,0,0,0,0,4,1,7,0,3,70,0,67,76,0,0,0,0,0,0,0,4499\n",
      "583,23,980,1188,1,1518,19,93,703,0,145,1,0,0,30,30,8,3,15,117,0,0,53,2,7,0,0,0,37,0,3,119,411,0,0,0,170,0,0,0,0,0,0,0,0,0,0,3741\n",
      "1157,1,121,230,2,351,3,141,26,40,25,58,29,181,70,897,59,621,287,0,0,0,240,231,555,11,3,9,508,0,78,5,79,2,0,0,170,0,10,0,0,0,9,0,0,0,0,3791\n",
      "1056,0,150,340,187,1508,3,2,154,67,1,1,1,3,149,0,25,0,223,362,8,18,37,163,0,1,5,0,46,0,126,770,1,0,0,0,189,0,0,3,0,0,0,0,0,0,0,4401\n",
      "2274,0,851,181,184,1875,9,4,347,0,94,8,0,0,9,43,10,1,0,47,3,1,308,0,0,21,0,3,29,0,0,25,18,0,0,0,9,0,0,0,2,0,3,0,0,0,0,3641\n",
      "623,0,14,386,26,794,495,12,701,360,433,6,7,2,611,4,4,45,61,18,29,0,1459,0,0,1,19,0,73,9,1065,95,6,0,0,89,346,0,0,0,0,0,0,0,7,0,0,2200\n",
      "184,0,28,842,0,836,132,56,597,0,95,31,11,16,195,21,0,75,0,4,252,0,13,28,0,3,10,0,97,0,8,5,98,0,0,0,175,0,0,0,0,13,253,8,0,0,0,5914\n",
      "848,0,477,585,12,655,0,19,1366,3,228,324,345,0,8,11,89,138,6,26,0,11,61,616,217,73,0,0,348,0,0,187,0,0,0,0,10,0,277,0,0,0,0,0,0,0,0,3060\n",
      "965,232,38,50,39,1440,113,303,531,29,26,0,0,75,20,19,0,0,1,6,0,0,7,1,0,0,31,0,209,0,0,75,0,0,0,0,432,0,0,0,0,0,61,0,1,0,0,5296\n",
      "1401,0,406,87,0,300,556,392,6,29,201,10,52,0,265,0,246,9,437,49,26,242,310,0,29,0,1,18,13,0,93,1181,13,0,0,180,92,269,0,0,0,0,0,32,0,0,0,3055\n",
      "695,0,621,257,0,1288,11,0,163,0,945,306,39,41,397,25,34,161,0,11,20,24,0,153,0,1,0,94,0,51,26,0,0,0,0,0,816,0,0,3,0,0,0,0,0,0,0,3818\n",
      "1265,0,696,192,212,722,8,305,12,111,43,291,3,796,29,0,20,12,326,306,0,17,1,0,0,4,2,371,225,0,3,13,11,0,0,0,6,0,0,0,22,0,0,0,0,0,0,3976\n",
      "687,0,631,164,0,830,400,82,1,0,110,19,84,218,68,7,8,131,121,4,11,34,125,31,3,0,1,3,705,0,45,24,5,0,0,0,261,0,0,0,0,0,0,0,0,0,0,5187\n",
      "2983,0,660,140,0,1742,277,36,6,99,49,113,76,45,70,0,1,127,142,1,0,0,1,1,0,74,49,130,154,0,0,13,85,0,0,0,134,0,1,2,1,0,0,0,0,0,0,2788\n",
      "505,16,139,265,5,1501,238,232,124,391,662,0,140,574,14,35,22,999,13,3,126,13,830,0,0,1,12,1,5,0,86,1,108,0,0,0,4,0,0,0,0,0,0,0,0,1,0,2934\n",
      "1204,0,2,989,0,827,362,1,118,241,488,172,76,0,2,0,2,8,197,0,44,8,68,6,0,0,0,6,239,0,20,61,1431,0,0,0,317,0,0,0,0,0,0,0,0,0,0,3111\n",
      "806,16,1439,69,55,436,200,13,117,219,335,1204,52,38,376,0,0,68,15,112,63,0,257,0,0,1,6,0,171,0,1,36,177,0,0,0,108,0,0,133,351,0,0,0,0,0,0,3126\n",
      "419,679,140,383,0,725,21,35,35,14,59,0,93,0,57,0,47,1,10,77,204,7,243,184,101,451,0,84,151,0,0,340,287,0,0,0,10,0,0,0,0,0,0,0,0,0,0,5143\n",
      "596,5,1691,320,1,1011,238,21,247,69,71,178,273,3,1,0,338,200,2,0,110,48,50,1,0,0,0,8,2,0,37,35,0,0,0,0,0,0,0,292,6,0,0,0,0,0,0,4146\n",
      "1341,0,1107,1457,43,876,212,136,133,1,6,21,3,38,26,3,216,0,30,280,0,0,107,12,4,126,8,0,482,0,0,365,2,0,0,0,15,0,0,0,0,0,0,0,0,0,0,2950\n",
      "613,1,284,293,0,1402,295,114,1214,0,23,49,0,13,1689,13,94,0,7,10,0,2,107,4,0,17,61,49,110,0,0,100,65,0,0,0,69,0,3,11,0,0,0,0,0,2,0,3286\n",
      "1818,1,333,394,1,945,465,0,38,100,1,7,36,527,32,0,361,2,2,3,120,139,110,5,8,2,0,0,544,0,493,425,0,0,0,5,101,0,0,5,219,0,0,0,0,0,0,2758\n",
      "1057,0,0,322,217,650,1,969,214,41,1006,0,2,0,7,0,12,1,0,166,0,0,17,7,0,19,5,1,95,2,1,44,0,0,0,30,0,0,0,0,2,0,0,0,0,0,0,5112\n",
      "422,0,250,79,0,1381,225,0,72,0,784,2,1,0,916,0,227,91,307,91,0,10,60,0,0,80,0,0,95,0,0,123,16,0,0,73,1183,0,0,1,0,124,0,0,0,6,0,3381\n",
      "1401,4,30,526,0,923,25,0,127,0,483,11,70,1089,1,3,174,11,4,2,49,0,81,297,0,4,18,0,100,0,35,8,1,0,0,0,46,0,0,0,7,0,0,0,0,0,0,4470\n",
      "2655,6,106,74,0,952,76,13,158,125,736,43,19,6,49,0,2,21,971,138,95,0,548,0,0,5,105,0,223,0,1,4,5,0,0,0,36,0,0,2,0,0,0,0,0,0,0,2826\n",
      "335,0,71,259,67,718,1,4,4,167,6,0,174,12,6,0,2,56,1,104,8,0,124,0,0,0,0,4,861,0,0,0,1,0,0,0,236,0,0,246,0,0,6,0,0,0,0,6527\n",
      "649,69,966,1227,0,508,2,30,550,0,302,159,3,49,195,26,19,180,7,49,2,0,324,32,0,0,0,0,5,0,0,147,87,0,0,0,5,0,0,0,0,0,0,6,0,0,0,4402\n",
      "1258,0,0,1119,0,2348,25,0,137,176,2,12,148,92,35,0,0,10,26,0,336,164,18,0,0,23,0,4,1318,0,102,1,49,0,0,0,10,0,0,2,0,0,0,0,0,0,0,2585\n",
      "\n"
     ]
    }
   ],
   "source": [
    "with open(resource_filename('deepbiome', 'tests/data/onefile_x.csv')) as f:\n",
    "    print(f.read())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example of the Y (regression)\n",
    "\n",
    "This is an example of the output file for regression problem."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4.997270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.004092</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5.485126</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5.489590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.500001</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         x1\n",
       "0  4.997270\n",
       "1  5.004092\n",
       "2  5.485126\n",
       "3  5.489590\n",
       "4  1.500001"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = pd.read_csv(resource_filename('deepbiome', 'tests/data/onefile_regression_y.csv'))\n",
    "y.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>2.609926</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>5.488959</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>3.498418</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>5.486107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>5.319623</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           x1\n",
       "995  2.609926\n",
       "996  5.488959\n",
       "997  3.498418\n",
       "998  5.486107\n",
       "999  5.319623"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example of the Y (classification)\n",
    "\n",
    "This is an example of the output file for classification problem. Below example file has 1000 samples in rows."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>V1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    V1\n",
       "0  1.0\n",
       "1  1.0\n",
       "2  0.0\n",
       "3  0.0\n",
       "4  1.0"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = pd.read_csv(resource_filename('deepbiome', 'tests/data/onefile_classification_y.csv'))\n",
    "y.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>V1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      V1\n",
       "995  1.0\n",
       "996  0.0\n",
       "997  1.0\n",
       "998  0.0\n",
       "999  1.0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exmple of the training index file for `k` fold cross-validation\n",
    "\n",
    "For each fold, we have to set the training and test set. If the index file is given, DeepBiome sets the training set and test set based on the index file for 5 fold cross-validation. Below is the example of the index file. Each column has the training indices for each fold. DeepBiome will only use the samples in this index set for training."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   0  1  2  3  4\n",
       "0  1  1  3  1  1\n",
       "1  2  2  4  2  2\n",
       "2  3  3  5  3  4\n",
       "3  6  4  7  4  5\n",
       "4  7  5  9  5  6"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "idxs = pd.read_csv(resource_filename('deepbiome', 'tests/data/onefile_idx.csv'), dtype=np.int)\n",
    "idxs.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>795</th>\n",
       "      <td>994</td>\n",
       "      <td>996</td>\n",
       "      <td>994</td>\n",
       "      <td>995</td>\n",
       "      <td>996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>796</th>\n",
       "      <td>995</td>\n",
       "      <td>997</td>\n",
       "      <td>995</td>\n",
       "      <td>996</td>\n",
       "      <td>997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>797</th>\n",
       "      <td>997</td>\n",
       "      <td>998</td>\n",
       "      <td>996</td>\n",
       "      <td>997</td>\n",
       "      <td>998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>798</th>\n",
       "      <td>999</td>\n",
       "      <td>999</td>\n",
       "      <td>998</td>\n",
       "      <td>998</td>\n",
       "      <td>999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>799</th>\n",
       "      <td>1000</td>\n",
       "      <td>1000</td>\n",
       "      <td>999</td>\n",
       "      <td>1000</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        0     1    2     3     4\n",
       "795   994   996  994   995   996\n",
       "796   995   997  995   996   997\n",
       "797   997   998  996   997   998\n",
       "798   999   999  998   998   999\n",
       "799  1000  1000  999  1000  1000"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "idxs.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below is the index set for 1st fold. From 1000 samples above, it uses 800 samples for training."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    1\n",
       "1    2\n",
       "2    3\n",
       "3    6\n",
       "4    7\n",
       "Name: 0, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "idxs.iloc[:,0].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "795     994\n",
       "796     995\n",
       "797     997\n",
       "798     999\n",
       "799    1000\n",
       "Name: 0, dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "idxs.iloc[:,0].tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Prepare the configuration\n",
    "\n",
    "For detailed configuration, we can build the configuration information for the network training by:\n",
    "1. the python dictionary format\n",
    "1. the configufation file (.cfg).\n",
    "\n",
    "In this notebook, we show the python dictionary format configuration.\n",
    "\n",
    "Please check the detailed information about each option in the [documantation](https://young-won.github.io/deepbiome/prerequisites.html#configuration)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### For preparing the configuration about the network information (`network_info`)\n",
    "\n",
    "To give the information about the training process, we provide a dictionary of configurations to the `netowrk_info` field.\n",
    "Your configuration for the network training should include the information about:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "network_info = {\n",
    "    'architecture_info': {\n",
    "        'batch_normalization': 'False',\n",
    "        'drop_out': '0',\n",
    "        'weight_initial': 'glorot_uniform',\n",
    "        'weight_l1_penalty':'0.',\n",
    "        'weight_decay': 'phylogenetic_tree',\n",
    "    },\n",
    "    'model_info': {\n",
    "        'lr': '0.01',\n",
    "        'decay': '0.001',\n",
    "        'loss': 'binary_crossentropy',\n",
    "        'metrics': 'binary_accuracy, sensitivity, specificity, gmeasure',\n",
    "        'taxa_selection_metrics': 'sensitivity, specificity, gmeasure, accuracy',\n",
    "        'network_class': 'DeepBiomeNetwork',\n",
    "        'optimizer': 'adam',\n",
    "        'reader_class': 'MicroBiomeClassificationReader',\n",
    "        'normalizer': 'normalize_minmax',\n",
    "    },\n",
    "    'training_info': {\n",
    "        'epochs': '10',\n",
    "        'batch_size': '50', \n",
    "        'callbacks': 'ModelCheckpoint',\n",
    "        'monitor': 'val_loss',\n",
    "        'mode' : 'min',\n",
    "        'min_delta': '1e-7',\n",
    "    },\n",
    "    'validation_info': {\n",
    "        'batch_size': 'None', \n",
    "        'validation_size': '0.2'\n",
    "    },\n",
    "    'test_info': {\n",
    "        'batch_size': 'None'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### For preparing the configuration about the path information (`path_info`)\n",
    "\n",
    "To give the information about the path of dataset, paths for saving the trained weights and the evaluation results, we provide a dictionary of configurations to the `path_info` field.\n",
    "Your configuration for the network training should include the information about:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "path_info = {\n",
    "    'data_info': {\n",
    "        'data_path': resource_filename('deepbiome', 'tests/data'),\n",
    "        'idx_path': resource_filename('deepbiome', 'tests/data/onefile_idx.csv'),\n",
    "        'tree_info_path': resource_filename('deepbiome', 'tests/data/genus48_dic.csv'),\n",
    "        'x_path': 'onefile_x.csv',\n",
    "        'y_path': 'classification_y.csv'\n",
    "    },\n",
    "    'model_info': {\n",
    "        'evaluation': 'eval.npy',\n",
    "        'history': 'hist.json',\n",
    "        'model_dir': './example_result/',\n",
    "        'weight': 'weight.h5'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Deepbiome Training\n",
    "\n",
    "Now we can train the DeepBiome network based on the configurations."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For logging, we used the python logging library."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "logging.basicConfig(format = '[%(name)-8s|%(levelname)s|%(filename)s:%(lineno)s] %(message)s',\n",
    "                    level=logging.DEBUG)\n",
    "log = logging.getLogger()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The deeobiome_train function provide the test evaluation, train evaluation and the deepbiome network instance.\n",
    "\n",
    "If we set `number_of_fold`, then DeepBiome performs cross-validation based on that value. If not, DeepBiome package performs cross-validation based on the index file. If both `number_of_fold` option and the index file are missing, then the library performs leave-one-out-cross-validation (LOOCV)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:109] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------1 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 1 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Family', 'Order', 'Genus', 'Class', 'Number', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/resource_variable_ops.py:432: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Colocations handled automatically by placer.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[tensorflow|WARNING|deprecation.py:328] From /usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/resource_variable_ops.py:432: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Colocations handled automatically by placer.\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 1 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/math_ops.py:2862: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.cast instead.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[tensorflow|WARNING|deprecation.py:328] From /usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/math_ops.py:2862: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.cast instead.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 1ms/step - loss: 0.6666 - binary_accuracy: 0.6859 - sensitivity: 0.9950 - specificity: 0.0121 - gmeasure: 0.0296 - val_loss: 0.6352 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 0.6308 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6164 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6251 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6163 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 143us/step - loss: 0.6247 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6169 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.6240 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6169 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 0.6235 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6162 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 132us/step - loss: 0.6237 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6161 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.6237 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6161 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 0.6236 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6161 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 130us/step - loss: 0.6244 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6158 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 3.9357967376708984!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_0.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_0.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.009746551513671875!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6216817498207092, 0.6862499713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 11us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.009137868881225586!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6186352372169495, 0.6899999976158142, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 6.4213292598724365\n",
      "[root    |INFO|deepbiome.py:193] 1 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------2 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 2 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Family', 'Order', 'Genus', 'Class', 'Number', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 2 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 0s 747us/step - loss: 0.6695 - binary_accuracy: 0.6781 - sensitivity: 0.9231 - specificity: 0.0769 - gmeasure: 0.0000e+00 - val_loss: 0.6293 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.6179 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5843 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 0.5967 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5757 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.5988 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5761 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 142us/step - loss: 0.5973 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5768 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 130us/step - loss: 0.5977 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5778 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.5972 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5764 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 143us/step - loss: 0.5975 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5763 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 140us/step - loss: 0.5975 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5764 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 142us/step - loss: 0.5983 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5787 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 2.826796054840088!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_1.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_1.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 4us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.009832620620727539!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.5936647057533264, 0.7200000286102295, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 10us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.00803232192993164!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.5936648845672607, 0.7200000286102295, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.422860622406006\n",
      "[root    |INFO|deepbiome.py:193] 2 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------3 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 3 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Family', 'Order', 'Genus', 'Class', 'Number', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 3 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 825us/step - loss: 0.6716 - binary_accuracy: 0.6969 - sensitivity: 0.9977 - specificity: 0.0045 - gmeasure: 0.0184 - val_loss: 0.6482 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 0.6291 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6119 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 145us/step - loss: 0.6128 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6117 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 135us/step - loss: 0.6161 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6108 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 135us/step - loss: 0.6135 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6113 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6144 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6114 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 132us/step - loss: 0.6149 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6116 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 142us/step - loss: 0.6142 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6109 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 130us/step - loss: 0.6138 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6111 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 131us/step - loss: 0.6136 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6108 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 3.0501792430877686!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_2.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_2.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008817911148071289!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6128742098808289, 0.6974999904632568, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 8us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.007915973663330078!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6489830017089844, 0.6549999713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.7313947677612305\n",
      "[root    |INFO|deepbiome.py:193] 3 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------4 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 4 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Family', 'Order', 'Genus', 'Class', 'Number', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 4 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 838us/step - loss: 0.6719 - binary_accuracy: 0.6734 - sensitivity: 0.9724 - specificity: 0.0420 - gmeasure: 0.0455 - val_loss: 0.6427 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 143us/step - loss: 0.6328 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 132us/step - loss: 0.6237 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6214 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 146us/step - loss: 0.6231 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.6223 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 0.6224 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 142us/step - loss: 0.6224 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.6225 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.6229 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.6224 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 3.3863611221313477!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_3.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_3.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.009464502334594727!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6219204664230347, 0.6862499713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 11us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008869409561157227!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.619075357913971, 0.6899999976158142, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.8798165321350098\n",
      "[root    |INFO|deepbiome.py:193] 4 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------5 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 5 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Family', 'Order', 'Genus', 'Class', 'Number', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 5 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 830us/step - loss: 0.6782 - binary_accuracy: 0.6500 - sensitivity: 0.9418 - specificity: 0.0533 - gmeasure: 0.0316 - val_loss: 0.6562 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6465 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6235 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.6297 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6163 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.6272 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6161 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 0.6274 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6162 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 0.6274 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6170 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 143us/step - loss: 0.6273 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6167 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 132us/step - loss: 0.6275 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6166 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 155us/step - loss: 0.6271 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6164 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.6270 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6162 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 3.218047618865967!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_4.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_4.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.007145404815673828!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6250700950622559, 0.6825000047683716, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 11us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.007578611373901367!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6071376204490662, 0.7049999833106995, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.792915105819702\n",
      "[root    |INFO|deepbiome.py:193] 5 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:204] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:205] Train Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure']\n",
      "[root    |INFO|deepbiome.py:206]       mean : [0.61504225 0.69449999 1.         0.         0.        ]\n",
      "[root    |INFO|deepbiome.py:207]        std : [0.01143372 0.01370677 0.         0.         0.        ]\n",
      "[root    |INFO|deepbiome.py:208] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:209] Test Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure']\n",
      "[root    |INFO|deepbiome.py:210]       mean : [0.61749922 0.692      1.         0.         0.        ]\n",
      "[root    |INFO|deepbiome.py:211]        std : [0.01827808 0.02158705 0.         0.         0.        ]\n",
      "[root    |INFO|deepbiome.py:212] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:223] Total Computing Ended\n",
      "[root    |INFO|deepbiome.py:224] -----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "test_evaluation, train_evaluation, network = deepbiome.deepbiome_train(log, network_info, path_info, number_of_fold=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `deepbiome_train` saves the trained model weights, evaluation results and history based on the path information from the configuration.\n",
    "\n",
    "From the example above, we can check that `hist_*.json`, `weight_*.h5`, `test_eval.npy`, `train_eval.npy` files were saved."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['hist_0.json',\n",
       " 'weight_2.h5',\n",
       " 'test_eval.npy',\n",
       " 'weight_0.h5',\n",
       " 'train_eval.npy',\n",
       " 'hist_2.json',\n",
       " 'hist_4.json',\n",
       " 'weight_3.h5',\n",
       " 'hist_3.json',\n",
       " 'weight_1.h5',\n",
       " 'weight_4.h5',\n",
       " 'hist_1.json']"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.listdir(path_info['model_info']['model_dir'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lets check the history files."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAYsAAAEKCAYAAADjDHn2AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAIABJREFUeJzt3XmYVPWd7/H3t3qnF/ZFaKgGRKVR\nZGlRu0EkJo4mGY1LVKJjNHGJk8QsY2ZI7jyTxEnmOndyHWOuSdREHROVx9FoyEQli0YCLtAoooAI\nstnsoCzN0uv3/nGqu6ubhmqaqj7V3Z/X89RT55w6dc63S6lP/c7vnN8xd0dERORYImEXICIi6U9h\nISIiCSksREQkIYWFiIgkpLAQEZGEFBYiIpKQwkJERBJSWIiISEIKCxERSSgz7AKSZdCgQV5SUhJ2\nGSIi3crSpUt3ufvgROv1mLAoKSmhsrIy7DJERLoVM9vYkfV0GEpERBJSWIiISEIKCxERSajH9FmI\nSM9RV1dHVVUVhw8fDruUHiM3N5fi4mKysrI69X6FhYiknaqqKgoLCykpKcHMwi6n23N3du/eTVVV\nFaNHj+7UNnQYSkTSzuHDhxk4cKCCIknMjIEDB55QS01hISJpSUGRXCf6eSosDn4If/l32LIs7EpE\nRNKWwiKSAS/fBaufD7sSEUkTs2bNYv78+a2W3XPPPdx2221HfU9BQQEAW7Zs4corr2x3nfPPPz/h\nxcP33HMPBw8ebJ7/5Cc/yZ49ezpaesooLHL7wrAzYOOisCsRkTQxe/Zs5s6d22rZ3LlzmT17dsL3\nDh8+nKeeeqrT+24bFs899xz9+vXr9PaSRWEBEK2AqiVQXxt2JSKSBq688kp+//vfU1sbfCds2LCB\nLVu2MHnyZC644AKmTJnCGWecwW9/+9sj3rthwwZOP/10AA4dOsQ111zD+PHjueyyyzh06FDzerfd\ndhtlZWVMmDCB7373uwDce++9bNmyhVmzZjFr1iwgGMpo165dANx9992cfvrpnH766dxzzz3N+xs/\nfjw333wzEyZM4MILL2y1n2TRqbMA0XJ47aew5U0YdXbY1YhInO//bgUrt+xL6jZLhxfx3b+dcNTX\nBwwYwLRp03j++ee59NJLmTt3LldddRV5eXk888wzFBUVsWvXLs455xwuueSSo3Ye/+xnP6NPnz6s\nWrWK5cuXM2XKlObXfvjDHzJgwAAaGhq44IILWL58Obfffjt33303L730EoMGDWq1raVLl/Lwww/z\n+uuv4+6cffbZzJw5k/79+7NmzRqeeOIJHnzwQa666iqefvpprrvuuuR8WDFqWQCMKg+eNy4Mtw4R\nSRvxh6KaDkG5O9/5zneYOHEiH//4x9m8eTPbt28/6jYWLFjQ/KU9ceJEJk6c2Pzak08+yZQpU5g8\neTIrVqxg5cqVx6xn4cKFXHbZZeTn51NQUMDll1/OX//6VwBGjx7NpEmTAJg6dSobNmw4kT+9XWpZ\nAOQPhMHjYeMrMOMfwq5GROIcqwWQSpdeeinf+MY3eOONNzh48CBTp07lkUceYefOnSxdupSsrCxK\nSko6de3C+vXr+dGPfsSSJUvo378/N9xwwwldA5GTk9M8nZGRkZLDUGpZNImWw6bXoaE+7EpEJA0U\nFBQwa9YsvvCFLzR3bO/du5chQ4aQlZXFSy+9xMaNxx7d+7zzzuPxxx8H4J133mH58uUA7Nu3j/z8\nfPr27cv27dt5/vmWszELCwvZv3//EduaMWMGzz77LAcPHuTAgQM888wzzJgxI1l/bkIKiybRcqjd\nD9vfDrsSEUkTs2fP5q233moOi2uvvZbKykrOOOMMHn30UU477bRjvv+2226jurqa8ePH8y//8i9M\nnToVgDPPPJPJkydz2mmn8bnPfY6Kiorm99xyyy1cdNFFzR3cTaZMmcINN9zAtGnTOPvss7npppuY\nPHlykv/iozN377KdpVJZWZmf0M2P9m2Bu8fD3/wbnPvl5BUmIsdt1apVjB8/Puwyepz2PlczW+ru\nZYneq5ZFk6Lh0H900G8hIiKtKCziRSuCi/MaG8OuREQkrSgs4kXL4dBHsPPdsCsREUkrCot4JbFO\nJg39ISLSisIiXr8oFI1Qv4WISBsKi3hmwaGoja9ADzlLTEQkGRQWbUXLoXobfLgu7EpEJCS7d+9m\n0qRJTJo0iWHDhjFixIjm+abBBRO58cYbWb169THXue+++3jssceSUXLKabiPtqJx/RYDx4Zbi4iE\nYuDAgSxbFtwQ7Xvf+x4FBQXccccdrdZxd9ydSKT939wPP/xwwv18+cvd55outSzaGnQK9BmkfgsR\nOcLatWspLS3l2muvZcKECWzdupVbbrmleajxO++8s3nd6dOns2zZMurr6+nXrx9z5szhzDPP5Nxz\nz2XHjh0A/PM//3PzUOPTp09nzpw5TJs2jVNPPZVXXgm+gw4cOMAVV1xBaWkpV155JWVlZc1B1pXU\nsmirud9CZ0SJpIXn58C2JA/DM+wMuPiuTr313Xff5dFHH6WsLLjo+a677mLAgAHU19cza9Ysrrzy\nSkpLS1u9Z+/evcycOZO77rqLb37zmzz00EPMmTPniG27O4sXL2bevHnceeedvPDCC/zkJz9h2LBh\nPP3007z11luthjnvSmpZtCdaAXs2wZ4Pwq5ERNLM2LFjm4MC4IknnmDKlClMmTKFVatWtTvUeF5e\nHhdffDFw7CHEL7/88iPWWbhwIddccw0QjCk1YUI4o/CqZdGeaOz+FptehX4jw61FpLfrZAsgVfLz\n85un16xZw49//GMWL15Mv379uO6669odajw7O7t5OiMjg/r69ke3bhpq/FjrhEUti/YMnQA5fXUo\nSkSOad++fRQWFlJUVMTWrVuZP39+0vdRUVHBk08+CcDbb7+d8CZJqZLSsDCzi8xstZmtNbMjD9AF\n61xlZivNbIWZPR63fJSZ/cHMVsVeL0llra1EMmDUObBBYSEiRzdlyhRKS0s57bTTuP7661sNNZ4s\nX/3qV9m8eTOlpaV8//vfp7S0lL59+yZ9P4mkbIhyM8sA3gM+AVQBS4DZ7r4ybp1xwJPAx9z9IzMb\n4u47Yq/9Bfihu//RzAqARnc/eLT9nfAQ5W0tvAf+9F24Yw0UDEnedkUkIQ1R3qK+vp76+npyc3NZ\ns2YNF154IWvWrCEz8/h7EU5kiPJU9llMA9a6+7pYQXOBS4H4NtTNwH3u/hFAXFCUApnu/sfY8uoU\n1tm+kunB88ZXYMJnunz3IiIA1dXVXHDBBdTX1+Pu3H///Z0KihOVyj2OAOJPJ6oCzm6zzikAZrYI\nyAC+5+4vxJbvMbPfAKOBPwFz3L0hhfW2dtKZkNVHYSEioerXrx9Lly4Nu4zQO7gzgXHA+cBs4EEz\n6xdbPgO4AzgLGAPc0PbNZnaLmVWaWeXOnTuTW1lGFoycpovzRELSU+7imS5O9PNMZVhsBuLPOy2O\nLYtXBcxz9zp3X0/QxzEutnyZu69z93rgWeCIK1Hc/QF3L3P3ssGDByf/L4hWwPZ3gntciEiXyc3N\nZffu3QqMJHF3du/eTW5ubqe3kcrDUEuAcWY2miAkrgE+12adZwlaFA+b2SCCw0/rgD1APzMb7O47\ngY8BSey97qBoOeCw6XU49aIu371Ib1VcXExVVRVJP2LQi+Xm5lJcXNzp96csLNy93sy+Aswn6I94\nyN1XmNmdQKW7z4u9dqGZrQQagG+5+24AM7sD+LOZGbAUeDBVtR7ViKmQkQ0bFyosRLpQVlYWo0eP\nDrsMiZOyU2e7WtJPnW3y0MXQUAM3v5j8bYuIhKyjp86G3cGd/qLlsGUZ1HT92bsiIulCYZFItBy8\nAaoWh12JiEhoFBaJjJwGlqFTaEWkV1NYJJJTGFygp7AQkV5MYdER0XKoqoS6I4ceFhHpDRQWHVEy\nPTgjanP4l9yLiIRBYdERo84BTIeiRKTXUlh0RF7/4IZIuhmSiPRSCouOipbDB4uhoS7sSkREupzC\noqOi5VB3ALYuD7sSEZEup7DoqFHlwfPGheHWISISAoVFRxUOhYHj1MktIr2SwuJ4RMth46vQ2HU3\n7BMRSQcKi+MRrYCavbBjZeJ1RUR6EIXF8Yg29VvoUJSI9C4Ki+PRbyT0HaXrLUSk11FYHK9oedCy\n6CE3jRIR6QiFxfEqqYADO2HXmrArERHpMgqL4xWtCJ51KEpEehGFxfEaMAYKhqqTW0R6FYXF8TKL\n9VssUr+FiPQaCovOiFbAvs2wZ1PYlYiIdAmFRWc0X2+hfgsR6R0UFp0xeHxwjwuFhYj0EgqLzohE\nglFo1cktIr2EwqKzouXw4TrYtzXsSkREUk5h0VlN/Rab1LoQkZ5PYdFZwyZCdoEORYlIr6Cw6KyM\nTBh5NmxQJ7eI9HwKixNRUgE7V8GB3WFXIiKSUikNCzO7yMxWm9laM5tzlHWuMrOVZrbCzB6PW95g\nZstij3mprLPTmsaJ2vRquHWIiKRYZqo2bGYZwH3AJ4AqYImZzXP3lXHrjAO+DVS4+0dmNiRuE4fc\nfVKq6kuK4ZMhMzfotxj/6bCrERFJmVS2LKYBa919nbvXAnOBS9usczNwn7t/BODuO1JYT/Jl5kDx\nWbo4T0R6vFSGxQjgg7j5qtiyeKcAp5jZIjN7zcwuinst18wqY8s/k8I6T0y0HLYth8P7wq5ERCRl\nUnYY6jj2Pw44HygGFpjZGe6+B4i6+2YzGwO8aGZvu/v78W82s1uAWwBGjRrVtZU3iZaDN8IHi2Hc\nx8OpQUQkxVLZstgMjIybL44ti1cFzHP3OndfD7xHEB64++bY8zrgL8Dktjtw9wfcvczdywYPHpz8\nv6AjiqdBJBM2Lgxn/yIiXSCVYbEEGGdmo80sG7gGaHtW07MErQrMbBDBYal1ZtbfzHLillcAK0lH\n2X1g+BRdnCciPVrKwsLd64GvAPOBVcCT7r7CzO40s0tiq80HdpvZSuAl4FvuvhsYD1Sa2Vux5XfF\nn0WVdqLlsPkNqD0YdiUiIilh3kPu9lZWVuaVlZXh7Py9P8Djn4XP/w5GnxdODSIinWBmS929LNF6\nuoI7GUadDZgORYlIj6WwSIbcvjDsDF1vISI9lsIiWUqmwwdLoL427EpERJJOYZEs0XKoPwRb3gy7\nEhGRpFNYJMuoc4NnHYoSkR5IYZEs+YNg8Gnq5BaRHklhkUzRctj0GjQ2hF2JiEhSKSySKVoBtfth\n29thVyIiklQKi2SKlgfP6rcQkR5GYZFMRcOh/2j1W4hIj6OwSLZoRRAWjY1hVyIikjQKi2SLlsOh\nD2HX6rArERFJGoVFsqnfQkR6IIVFsvUvgcLh6rcQkR5FYZFsZkHrYsMi6CHDv4uIKCxSoaQCqrfB\nh+vCrkREJCkUFqkQrQiedShKRHoIhUUqDDoF+gxUWIhIj6GwSIWmfgudESUiPYTCIlWiFbBnI+yt\nCrsSEZET1qGwMLOxZpYTmz7fzG43s36pLa2ba77eQoeiRKT762jL4mmgwcxOBh4ARgKPp6yqnmDo\n6ZDTV4eiRKRH6GhYNLp7PXAZ8BN3/xZwUurK6gEiGTDqHLUsRKRH6GhY1JnZbODzwP/ElmWlpqQe\nJFoOu96D6p1hVyIickI6GhY3AucCP3T39WY2GvhV6srqIZqut9ik1oWIdG8dCgt3X+nut7v7E2bW\nHyh0939PcW3d30lnQlYfHYoSkW6vo2dD/cXMisxsAPAG8KCZ3Z3a0nqAzGwoPisYJ0pEpBvr6GGo\nvu6+D7gceNTdzwY+nrqyepCS6bD9HTj0UdiViIh0WkfDItPMTgKuoqWDWzoiWg44bHo97EpERDqt\no2FxJzAfeN/dl5jZGGBN6srqQUZMhYxsXW8hIt1aRzu4/9vdJ7r7bbH5de5+RaL3mdlFZrbazNaa\n2ZyjrHOVma00sxVm9nib14rMrMrM/l9H6kxLWXlBYKiTW0S6sY52cBeb2TNmtiP2eNrMihO8JwO4\nD7gYKAVmm1lpm3XGAd8GKtx9AvD1Npv5V2BBB/+W9BUth63LoKY67EpERDqlo4ehHgbmAcNjj9/F\nlh3LNGBtrBVSC8wFLm2zzs3Afe7+EYC772h6wcymAkOBP3SwxvQVLYfGeqhaEnYlIiKd0tGwGOzu\nD7t7fezxCDA4wXtGAB/EzVfFlsU7BTjFzBaZ2WtmdhGAmUWA/wvc0cH60tvIs8Ey1G8hIt1WR8Ni\nt5ldZ2YZscd1wO4k7D8TGAecD8wmuH6jH/D3wHPufszxvc3sFjOrNLPKnTvTeEiNnMLgAj31W4hI\nN9XRsPgCwWmz24CtwJXADQnes5lgdNomxbFl8aqAee5e5+7rgfcIwuNc4CtmtgH4EXC9md3Vdgfu\n/oC7l7l72eDBiRo6IYuWQ1Ul1B0OuxIRkePW0bOhNrr7Je4+2N2HuPtngERnQy0BxpnZaDPLBq4h\n6PeI9yxBqwIzG0RwWGqdu1/r7qPcvYTgUNSj7t7u2VTdRrQCGmpgyxthVyIictxO5E553zzWi7Eh\nzb9CcH3GKuBJd19hZnea2SWx1eYTHOJaCbwEfMvdk3F4K/2MOid4Vr+FiHRD5u6de6PZB+4+MvGa\nXaOsrMwrKyvDLuPYfloOhUPh754JuxIREQDMbKm7lyVa70RaFp1Lmd6spCIY9qOhLuxKRESOyzHD\nwsz2m9m+dh77Ca63kOMRLYe6A7B1ediViIgcl8xjvejuhV1VSK8wqjx43rgIiqeGW4uIyHE4kcNQ\ncrwKh8LAk3W9hYh0OwqLrhYtD26z2tgYdiUiIh2msOhq0Qo4vBd2rAy7EhGRDlNYdLVoRfCs6y1E\npBtRWHS1fiOh7yiFhYh0KwqLMETLg07uTl4QKSLS1RQWYYiWw4GdsHtt2JWIiHSIwiIM6rcQkW5G\nYRGGgWMhf4iutxCRbqPXh8VHB2r5t+dWsXrb/q7bqVkwTtSGReq3EJFuodeHBcCvXt3I/Qve79qd\nRitgXxXs2dS1+xUR6YReHxb987O5+qyRzFu2hS17DnXdjqNN40TpUJSIpL9eHxYAX5w+GgceWri+\n63Y6eDzk9lMnt4h0CwoLYOSAPnx64kk8sXgTew920b0mIpGW6y1ERNKcwiLmlvPGcKC2gV+/vrHr\ndhothw/fh/3bum6fIiKdoLCImTC8LzPGDeLhRRs4XNfQNTvV9RYi0k0oLOJ8aeZYdlXX8Oybm7tm\nh8MmQnaBDkWJSNpTWMQpHzuQ00cU8cCCdTQ2dsH1DxmZMPJshYWIpD2FRRwz49bzxrJu1wH+uGp7\n1+w0Wh7c2+Lgh12zPxGRTlBYtHHx6cMYOSCPn7/8Pt4VV1c39VtsejX1+xIR6SSFRRuZGRFunjGG\nNzftoXLjR6nf4YgpkJmrQ1EiktYUFu347NSR9O+Txf0vd8EQIJk5UHwWbFiY+n2JiHSSwqIdedkZ\nfL68hD+t2sGa7V0wwGC0HLYth8P7Ur8vEZFOUFgcxfXnlpCbFeGBBetSv7NoOXgjfLA49fsSEekE\nhcVRDMjP5uqykTy7bDPb9h5O7c6Kz4JIpi7OE5G0pbA4hptmjKGh0Xl4UYoHGMzOh+GT1cktImlL\nYXEMIwf04VMTh/PY65vYdzjFAwxGy2HzUqjrwmHSRUQ6KKVhYWYXmdlqM1trZnOOss5VZrbSzFaY\n2eOxZVEze8PMlsWWfymVdR7LreeNobqmnsdfT/FNisacD411MPdzuiGSiKSdlIWFmWUA9wEXA6XA\nbDMrbbPOOODbQIW7TwC+HntpK3Cuu08CzgbmmNnwVNV6LKeP6Mv0kwfx0ML11NSncIDBMbPgkz+C\nTa/DT8+FxQ9CY2Pq9icichxS2bKYBqx193XuXgvMBS5ts87NwH3u/hGAu++IPde6e01snZwU15nQ\nrTPHsGN/Db99c0vqdmIG026GL78GI6fBc3fAI5+EXWtTt08RkQ5K5ZfwCOCDuPmq2LJ4pwCnmNki\nM3vNzC5qesHMRprZ8tg2/t3dU/hNfWzTTx5E6UlF3L/g/dQPMNhvFFz3G7j0p8GYUT8rh4X/CQ31\nqd2viMgxhN3BnQmMA84HZgMPmlk/AHf/wN0nAicDnzezoW3fbGa3mFmlmVXu3LkzZUWaGbfOHMP7\nOw/w53d3pGw/cTuEydfCl5fAKRfCn74Hv7gAtr2d+n2LiLQjlWGxGRgZN18cWxavCpjn7nXuvh54\njyA8msVaFO8AM9ruwN0fcPcydy8bPHhwUotv61NnnMSIfnldMwRIk8KhcPWv4bP/Bfs2wwPnw4s/\ngPqahG8VEUmmVIbFEmCcmY02s2zgGmBem3WeJWhVYGaDCA5LrTOzYjPLiy3vD0wHVqew1oSCAQZH\nU7nxIyo3dPFw4hM+A19eDGd8Fhb8B9x/HnywpGtrEJFeLWVh4e71wFeA+cAq4El3X2Fmd5rZJbHV\n5gO7zWwl8BLwLXffDYwHXjezt4CXgR+5e+jHYK46ayT9+mRxf1cMAdJWnwFw2c/h2qegphp++Ql4\n4TtQe6DraxGRXse65J4NXaCsrMwrKytTvp+7//ge9/55DX/65kxOHlKQ8v216/C+oB+j8pfQvwT+\n9l4YMzOcWkSkWzOzpe5elmi9sDu4u53PnxslJzPCg2G0LprkFsGn74YbngOLwKOXwLzb4fDe8GoS\nkR5NYXGcBhbkcFXZSJ55czPb96V4gMFESirgtleg/HZ481dw39mw+vlwaxKRHklh0Qk3zRhNfWMj\nDy/aEHYpkJUHF/4r3PQnyBsAT1wDT30RDuwKuzIR6UEUFp0QHZjPxWecxGOvbWR/qgcY7KgRU+GW\nv8D534GVv4X7psHbT0EP6ZMSkXApLDrp1vPGsL+mnicWp9Ggf5nZcP4/wa0Lgo7vp78IT8yGfaFd\n/C4iPYTCopMmFvejfOxAfrlwPbX1aTbg39BS+OIf4cIfwLq/BH0ZSx9RK0NEOk1hcQJunTmW7ftq\n+O2ythemp4FIBpR/FW5bBCedCb/7WnDW1IcpvpGTiPRICosTcN64QZw2rJAHFqxL/QCDnTVwLFw/\nDz79n7D5zWBgwld/Co0pHG5dRHochcUJMDO+NHMsa3ZU89LqLhhgsLMiESj7QjD8ecl0mP9teOhv\nYMe7YVcmIt2EwuIEfWpi0wCDIV6k11F9i+FzT8LlD8Lu9+H+GfDyf0BDmpzRJSJpS2FxgrIyInxx\n+mgWb/iQpRs/CrucxMxg4lXBwISnfQpe+kEwmu2WN8OuTETSmMIiCa4+ayR987J4YEEXDl9+ogoG\nw2cfgasfCy7ge/AC+ON3oe5Q2JWJSBpSWCRBfk4m158b5Q8rt/P+zuqwyzk+4z8d9GVMmg2L7oGf\nT4f35sPO92DvZji0R3fpExGNOpssu6prKL/rRa6YMoL/ffnE0Oo4Ie+/GJxiu6edCw0zcyE7P/Yo\niD3i5/Mhp73lR1kvKx8yMrv+bxSRVjo66qz+tSbJoIIcPju1mP+urOIbnziFIYW5YZd0/MZ+DP7+\nNdiwCGr2QW11cL+M2gPBdE11y3TT8urtrefrj2NwxUQBlFsEfQZB/sDY8yDoE5vuMyC4lkREuoTC\nIolunjGGxxdv4pFFG/jHi04Lu5zOyc4P7vvdWQ31UHeg/WCprW5nvmnd+ADaAbX7gyHXjzrsukFe\n/1iAtA2UpucBrZdlZnf+7xJJFw31cGAH7N8K+7cHz9kFcObVKd2twiKJSgblc/Hpw/jVaxv5+1kn\nU5DTCz/ejEzI6Au5fZOzvYY6OLg76IQ/uCs2vTuYblp2YDfsWgMHXoVDH4IfZfiVnKKgZdI2YNpb\nlj8oCE6RrtJQF/xQqt4G+7e1DoPq7S3zB3YCbboPTjpTYdHd3HreWJ57extzF2/iphljwi6n+8vI\ngsJhwaMjGhvh0EdBqLQNlPj5vVWwdVkw33iU60wy84LQyOsXBE1OUXBoLKewzXTf1stzCmPzRTpU\nJi0hsH9bLAi2xsJgW9yybbHbCrQJAYtA/uDg//+iETB8ChSeBIVDg+eC2HP+4JT/GQqLJDtzZD/O\nGTOAXy5cz/XnlpCdqRPOulQkErQO8gcCpyRe3x1q9rcfKAdiLZlDe4J19lXBjn3BdM0+aOzAWWJZ\n+S3BER8iOYVB66vd5UVBADVNZ+YG18e01dgYBF1DXctzwuna4DBG/HRDbWz+aNNttuUetN6aHrSZ\nb37dk7tOq9cdMrKDHxMZWXHT2cEjktky3er1NutGslq/76jba295VvD/QPOv/7YtglgQHDUEhgRf\n+kUjglsMFAxr+WFUOCyYzx+cNieCpEcVPcytM8dy48NL+N1bW7hianHY5cixmAVfyLlFMOA4WoLu\nwTUpTcFxeF/w3DzdzvKa/cH83qqW6boDifcVyQqCA4Ivp4bYF713wfhekaYvxsyWL0zLCL7szGKP\nSMuDNvMdWSeSAZZ5fNuBlhBrqA0+l7pDQR9X07L415vmm0IyVZpDYFgwYkLx1NYtgMK4lkA3a3Uq\nLFLg/FMGc+rQQu5f8D6XTxmBtferULo3M8juEzwKh3Z+Ow31sc78NoHSKnhiyyHuV3NWgumsWP9R\nounY44hQyI59iffA/3fdY6Fb27p11Rww8S2q2naCJ255JKN1i6AbhkBHKSxSwMy4deYYvvnkW/xl\n9U5mnTYk7JIkXWVkBmd15fUPu5Lew6wlJNFJDB2lA+op8rdnDuekvrn8/OVuNASIiMhRKCxSpGmA\nwdfXf8ibm7rBAIMiIsegsEiha6aNojA3kwcWdIPhy0VEjkFhkUIFOZn83TlRXlixjfW7OnDWi4hI\nmlJYpNgNFSVkRSI8+Fe1LkSk+1JYpNiQwlyumDqCp5ZWsXN/TdjliIh0isKiC9w0Ywx1DY381ysb\nwi5FRKRTFBZdYOzgAi4sHcqjr27gQI1uJCQi3U9Kw8LMLjKz1Wa21szmHGWdq8xspZmtMLPHY8sm\nmdmrsWXLzSy1wyl2gVtnjmXf4XrmLvkg7FJERI5bysLCzDKA+4CLgVJgtpmVtllnHPBtoMLdJwBf\nj710ELg+tuwi4B4z65eqWrvClFH9mVYygF/+dR11DUcZQltEJE2lsmUxDVjr7uvcvRaYC1zaZp2b\ngfvc/SMAd98Re37P3dfEpreGLaSqAAAKvElEQVQAO4DUj8GbYrfOHMOWvYf5n+Vbwi5FROS4pDIs\nRgDxx1yqYsvinQKcYmaLzOw1M7uo7UbMbBqQDRwxboaZ3WJmlWZWuXPnziSWnhqzTh3CuCEF3P/y\nOnrKvc9FpHcIu4M7ExgHnA/MBh6MP9xkZicBvwJudD/y9mfu/oC7l7l72eDB6d/wiESMW84bw7vb\n9vPye+kfbiIiTVIZFpuBkXHzxbFl8aqAee5e5+7rgfcIwgMzKwJ+D/wvd38thXV2qUsnjWBoUQ73\nv6yL9ESk+0hlWCwBxpnZaDPLBq4B5rVZ51mCVgVmNojgsNS62PrPAI+6+1MprLHLZWcGAwy+um43\nb32wJ+xyREQ6JGVh4e71wFeA+cAq4El3X2Fmd5rZJbHV5gO7zWwl8BLwLXffDVwFnAfcYGbLYo9J\nqaq1q82eNorCHA0wKCLdh/WUjtaysjKvrKwMu4wOu+v5d3lgwfu8+A/nUzJIN2ARkXCY2VJ3L0u0\nXtgd3L3WjRUlZEYi/GKhWhcikv4UFiEZWpTLZZNH8N+VVeyq1gCDIpLeFBYhuvm8MdTUN/LoqxvD\nLkVE5JgUFiE6eUgBn4gNMHiwVgMMikj6UliE7Eszx7DnYB1PaoBBEUljmWEX0NtNjQ6gLNqfB/+6\nnuvOiZKZ0bvzu66hkf2H69l3qI5DdQ00uuNO8CCYbnTHiS2LTTc2trOs6b2xafzIZcHJgE5jbB8t\n2/bmfeZlZTK4MJtBBTkMKsghP0f/bKT30f/1aeDWmWO5+dFKfv/2Vi6d1Hb4rO6lodGpPlzP3kN1\n7Dtcx77m5/rm+eC1+iNe23uojoO1DWH/CQnlZWUwsKAlPOKDpNXyghyK8jIxs7BLFjlhCos0cMFp\nQxg7OJ+fv7yOCcOLYksNMzDAzGLPYLHlTczaf92CTRC8wlG3hbW8Ruz1hkZnf+xLvPWXfusv+PjX\nmloD+xPc3MkMinKzKMrLDJ5zsygZ1Iei3Cz65mVRlJdFUW4mRXlZ5GVlBPUaRGJ1RyItdTcvszaf\nlR1jWayGiLV8LpF2Xm/5nIwDNfXsqq5hV3Vt8Ly/ht0Hgumqjw6y7IM9fHighsZ2LlnKyjAG5ucw\nKC5QgkfcfOy1/n2yyYgoWCQ9KSzSQCRi3HreWP7x6eV8/O4FYZeTUGFO8GXe9MU+ckCfVgHQ9ku/\n+bW8LAqyM4n0wC/EhkZnz8HalkCprmFnU6jsr2kOm9Xb9rO7upbadu5pEjEYkJ99ZKAU5jAwP5vc\nrAwyIkYkFmwRMzIiQdBlRIwMMyy2LGLB/1cZsfUiEZrXb3p/MG1EYsvi359hhkU48v1mLYfpaDl0\nB60PFbY6zNdmuXvssF/wQsvhw+bDgU2HB49++BFagj4SF/6RuL+v6QdR/OcV/MhomTeL306wrlqC\n7VNYpIkrpxbTPz+bQ3UNzcOXN/+DIf64fcs/VNq+zpH/YJs20vZ4fvy2mjS9N2LW6gu+OQBysyjI\nzdSv33ZkRIyBBTkMLMjhVAqPua67s+9wfXMrZVd1LbsPBNM748Jm06aD7Kqu6RaH5nqa+CBqaq23\nCqbYc2bEyMmMkJOV0fo5M0JOZga5WcFzTlawLLf59YzW81lHX5Yb91pOZiS0fk2FRZqIRIxPlA4N\nuwzpAmZG37wggMcOLki4/sHaenZX11JT30CjB62YhsbgB0GDO43uNMaWNcZ+gTd607zT2Bis5+40\ntJqOrd/orbbTtI+W7dCyD/dWhzqbWoltD4E2/Wpv+ntbDn0G77HYm+IPiUasZZo2h02bDj+2/dHv\nzX9v65MYmubjT4BoXoe267S0dpqW02a+uXXTZjt1DY3U1jdyuL6RmroGauobqalvYP/henbVB//N\nauoa454b221VHo+2AZWblcHpI/ryk9mTT2i7Cfeb0q2LyAnrk51JnwH6p9pTNDZ6c6jU1DdSU9fI\n4fhQqW/kcFzw1NTFzwfLDrcJoOL+eSmvW/8Hioh0oUjEyMvOIC87I+xSjkvvPqlfREQ6RGEhIiIJ\nKSxERCQhhYWIiCSksBARkYQUFiIikpDCQkREElJYiIhIQhY/NlB3ZmY7gRO5P+kgYFeSyunu9Fm0\nps+jNX0eLXrCZxF198GJVuoxYXGizKzS3cvCriMd6LNoTZ9Ha/o8WvSmz0KHoUREJCGFhYiIJKSw\naPFA2AWkEX0WrenzaE2fR4te81moz0JERBJSy0JERBLq9WFhZheZ2WozW2tmc8KuJ0xmNtLMXjKz\nlWa2wsy+FnZNYTOzDDN708z+J+xawmZm/czsKTN718xWmdm5YdcUJjP7RuzfyTtm9oSZ5YZdUyr1\n6rAwswzgPuBioBSYbWal4VYVqnrgH9y9FDgH+HIv/zwAvgasCruINPFj4AV3Pw04k178uZjZCOB2\noMzdTwcygGvCrSq1enVYANOAte6+zt1rgbnApSHXFBp33+rub8Sm9xN8GYwIt6rwmFkx8CngF2HX\nEjYz6wucB/wSwN1r3X1PuFWFLhPIM7NMoA+wJeR6Uqq3h8UI4IO4+Sp68ZdjPDMrASYDr4dbSaju\nAf4RaAy7kDQwGtgJPBw7LPcLM8sPu6iwuPtm4EfAJmArsNfd/xBuVanV28NC2mFmBcDTwNfdfV/Y\n9YTBzD4N7HD3pWHXkiYygSnAz9x9MnAA6LV9fGbWn+AoxGhgOJBvZteFW1Vq9faw2AyMjJsvji3r\ntcwsiyAoHnP334RdT4gqgEvMbAPB4cmPmdmvwy0pVFVAlbs3tTSfIgiP3urjwHp33+nudcBvgPKQ\na0qp3h4WS4BxZjbazLIJOqjmhVxTaMzMCI5Jr3L3u8OuJ0zu/m13L3b3EoL/L1509x79y/FY3H0b\n8IGZnRpbdAGwMsSSwrYJOMfM+sT+3VxAD+/wzwy7gDC5e72ZfQWYT3A2w0PuviLkssJUAfwd8LaZ\nLYst+467PxdiTZI+vgo8FvthtQ64MeR6QuPur5vZU8AbBGcRvkkPv5pbV3CLiEhCvf0wlIiIdIDC\nQkREElJYiIhIQgoLERFJSGEhIiIJKSxEEjCzBjNbFvdI2pXLZlZiZu8ka3siqdKrr7MQ6aBD7j4p\n7CJEwqSWhUgnmdkGM/s/Zva2mS02s5Njy0vM7EUzW25mfzazUbHlQ83sGTN7K/ZoGh4iw8wejN0b\n4Q9mlhdb//bYvUWWm9nckP5MEUBhIdIReW0OQ10d99pedz8D+H8Eo9QC/AT4L3efCDwG3Btbfi/w\nsrufSTCuUtNoAeOA+9x9ArAHuCK2fA4wObadL6XqjxPpCF3BLZKAmVW7e0E7yzcAH3P3dbEBGLe5\n+0Az2wWc5O51seVb3X2Qme0Eit29Jm4bJcAf3X1cbP6fgCx3/4GZvQBUA88Cz7p7dYr/VJGjUstC\n5MT4UaaPR03cdAMtfYmfIriT4xRgSewmOyKhUFiInJir455fjU2/QsstNq8F/hqb/jNwGzTf27vv\n0TZqZhFgpLu/BPwT0Bc4onUj0lX0S0Uksby4UXghuA910+mz/c1sOUHrYHZs2VcJ7ij3LYK7yzWN\nzvo14AEz+yJBC+I2grustScD+HUsUAy4V7cxlTCpz0Kkk2J9FmXuvivsWkRSTYehREQkIbUsREQk\nIbUsREQkIYWFiIgkpLAQEZGEFBYiIpKQwkJERBJSWIiISEL/H8bweV6fYlQ3AAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f6adeb63e80>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "with open('./%s/hist_0.json' % path_info['model_info']['model_dir'], 'r') as f:\n",
    "    history = json.load(f)\n",
    "    \n",
    "plt.plot(history['val_loss'], label='Validation')\n",
    "plt.plot(history['loss'], label='Training')\n",
    "plt.legend()\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Test evauation and train evauation is the numpy array of the shape (number of folds, number of evaluation measures)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.61863524, 0.69      , 1.        , 0.        , 0.        ],\n",
       "       [0.59366488, 0.72000003, 1.        , 0.        , 0.        ],\n",
       "       [0.648983  , 0.65499997, 1.        , 0.        , 0.        ],\n",
       "       [0.61907536, 0.69      , 1.        , 0.        , 0.        ],\n",
       "       [0.60713762, 0.70499998, 1.        , 0.        , 0.        ]])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.62168175, 0.68624997, 1.        , 0.        , 0.        ],\n",
       "       [0.59366471, 0.72000003, 1.        , 0.        , 0.        ],\n",
       "       [0.61287421, 0.69749999, 1.        , 0.        , 0.        ],\n",
       "       [0.62192047, 0.68624997, 1.        , 0.        , 0.        ],\n",
       "       [0.6250701 , 0.6825    , 1.        , 0.        , 0.        ]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_evaluation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Load the pre-trained network for training\n",
    "\n",
    "If you have a pre-trianed model, you warm_start next training using the pre-trained weights by setting the `warm_start` option in `training_info` to `True`. The file path of the pre-trained weights passed in the `warm_start_model` option. Below is the example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "warm_start_network_info = {\n",
    "    'architecture_info': {\n",
    "        'batch_normalization': 'False',\n",
    "        'drop_out': '0',\n",
    "        'weight_initial': 'glorot_uniform',\n",
    "        'weight_l1_penalty':'0.',\n",
    "        'weight_decay': 'phylogenetic_tree',\n",
    "    },\n",
    "    'model_info': {\n",
    "        'decay': '0.001',\n",
    "        'loss': 'binary_crossentropy',\n",
    "        'lr': '0.01',\n",
    "        'metrics': 'binary_accuracy, sensitivity, specificity, gmeasure',\n",
    "        'network_class': 'DeepBiomeNetwork',\n",
    "        'normalizer': 'normalize_minmax',\n",
    "        'optimizer': 'adam',\n",
    "        'reader_class': 'MicroBiomeClassificationReader',\n",
    "        'taxa_selection_metrics': 'sensitivity, specificity, gmeasure, accuracy',\n",
    "    },\n",
    "    'training_info': {\n",
    "        'warm_start':'True',\n",
    "        'warm_start_model':'./example_result/weight.h5',\n",
    "        'epochs': '10',\n",
    "        'batch_size': '50',\n",
    "        'callbacks': 'ModelCheckpoint',\n",
    "        'monitor': 'val_loss',\n",
    "        'mode' : 'min',\n",
    "        'min_delta': '1e-7',\n",
    "    },\n",
    "    'validation_info': {\n",
    "        'batch_size': 'None', \n",
    "        'validation_size': '0.2'\n",
    "    },\n",
    "    'test_info': {\n",
    "        'batch_size': 'None'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:109] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------1 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 1 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Family', 'Order', 'Genus', 'Class', 'Number', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 1 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 825us/step - loss: 0.6249 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6162 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 150us/step - loss: 0.6231 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6158 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 153us/step - loss: 0.6234 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6158 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 147us/step - loss: 0.6232 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6153 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6225 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6156 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 135us/step - loss: 0.6223 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6149 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 161us/step - loss: 0.6232 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6156 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 142us/step - loss: 0.6237 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6137 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 143us/step - loss: 0.6195 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6138 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6209 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6115 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 3.003218650817871!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_0.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_0.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.00936579704284668!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6155301332473755, 0.6862499713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 12us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.009117841720581055!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6125151515007019, 0.6899999976158142, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.798203945159912\n",
      "[root    |INFO|deepbiome.py:193] 1 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------2 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 2 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Family', 'Order', 'Genus', 'Class', 'Number', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 2 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 846us/step - loss: 0.5989 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5781 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 146us/step - loss: 0.5977 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5762 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 140us/step - loss: 0.5984 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5777 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 147us/step - loss: 0.5971 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5763 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.5982 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5765 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 135us/step - loss: 0.5973 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5771 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.5972 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5767 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 129us/step - loss: 0.5973 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5764 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.5973 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5772 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 143us/step - loss: 0.5974 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5766 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 2.7732832431793213!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_1.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_1.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008655071258544922!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.5929710268974304, 0.7200000286102295, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 11us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008225679397583008!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.5929712653160095, 0.7200000286102295, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.6397910118103027\n",
      "[root    |INFO|deepbiome.py:193] 2 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------3 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 3 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Family', 'Order', 'Genus', 'Class', 'Number', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 3 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 820us/step - loss: 0.6147 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6108 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6152 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6108 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.6136 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6112 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 0.6141 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6108 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 134us/step - loss: 0.6138 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6109 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.6163 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6113 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 145us/step - loss: 0.6134 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6106 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 143us/step - loss: 0.6135 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6106 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 0.6147 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6106 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 140us/step - loss: 0.6131 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6104 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 3.170593023300171!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_2.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_2.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.0098114013671875!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6124077439308167, 0.6974999904632568, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 10us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008835315704345703!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.648329496383667, 0.6549999713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.806140661239624\n",
      "[root    |INFO|deepbiome.py:193] 3 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------4 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 4 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Family', 'Order', 'Genus', 'Class', 'Number', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 4 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 823us/step - loss: 0.6245 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 148us/step - loss: 0.6247 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6218 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.6222 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 0.6229 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 160us/step - loss: 0.6223 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 149us/step - loss: 0.6223 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 146us/step - loss: 0.6225 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 150us/step - loss: 0.6233 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6214 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 140us/step - loss: 0.6217 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 0.6224 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6216 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 2.8638291358947754!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_3.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_3.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.009594440460205078!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6217331886291504, 0.6862499713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 11us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.00853419303894043!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6190296411514282, 0.6899999976158142, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.620577096939087\n",
      "[root    |INFO|deepbiome.py:193] 4 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------5 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 5 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Family', 'Order', 'Genus', 'Class', 'Number', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 5 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 826us/step - loss: 0.6280 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6162 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 149us/step - loss: 0.6273 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6167 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 0.6272 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6166 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 0.6276 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6169 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.6275 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6167 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 0.6273 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6162 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 140us/step - loss: 0.6270 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6162 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 147us/step - loss: 0.6288 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6157 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 149us/step - loss: 0.6269 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6164 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 0.6269 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6166 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 2.864668369293213!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_4.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_4.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 4us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.010227680206298828!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6246233582496643, 0.6825000047683716, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 14us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.009587526321411133!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6067151427268982, 0.7049999833106995, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.842271089553833\n",
      "[root    |INFO|deepbiome.py:193] 5 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:204] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:205] Train Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure']\n",
      "[root    |INFO|deepbiome.py:206]       mean : [0.61345309 0.69449999 1.         0.         0.        ]\n",
      "[root    |INFO|deepbiome.py:207]        std : [0.01111986 0.01370677 0.         0.         0.        ]\n",
      "[root    |INFO|deepbiome.py:208] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:209] Test Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure']\n",
      "[root    |INFO|deepbiome.py:210]       mean : [0.61591214 0.692      1.         0.         0.        ]\n",
      "[root    |INFO|deepbiome.py:211]        std : [0.01834673 0.02158705 0.         0.         0.        ]\n",
      "[root    |INFO|deepbiome.py:212] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:223] Total Computing Ended\n",
      "[root    |INFO|deepbiome.py:224] -----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "test_evaluation, train_evaluation, network = deepbiome.deepbiome_train(log, warm_start_network_info, path_info, \n",
    "                                                                       number_of_fold=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's check the history plot again."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAZIAAAEKCAYAAAA4t9PUAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAIABJREFUeJzt3Xl8VPW9//HXJxtJCFlIgiwBghCW\nsIWQAgoIiFqwrVZLEVSsC9Bi1Vbb3tLe3mppvT/vr60XtbQVrTtL/WlFrAttLS4gW0BAAdm3sCaB\nBAgEsnx+f5yTMMRsMJmcSfJ5Ph7zyMyZM2c+M0re+S7ne0RVMcYYYy5ViNcFGGOMadosSIwxxvjF\ngsQYY4xfLEiMMcb4xYLEGGOMXyxIjDHG+MWCxBhjjF8sSIwxxvjFgsQYY4xfwrwuoDEkJSVpamqq\n12UYY0yTsnbt2jxVTa5rvxYRJKmpqWRnZ3tdhjHGNCkisrc++1nXljHGGL9YkBhjjPGLBYkxxhi/\nWJAYY4zxiwWJMcYYv1iQGGOM8YsFiTHGGL9YkNRm82LY+P+8rsIYY4KaBUlNVOHTl+FvU+G9n0NZ\nqdcVGWNMULIgqYkITJoPQ78HK+fAy9+EojyvqzLGmKBjQVKb0HAY/z/wzT9Dzhp4ehQc/NTrqowx\nJqhYkNRHxmS4+z2nlfKXr8L6+V5XZIwxQcOCpL46DoLpH0DnIbBoBrzzEygr8boqY4zxnAXJxWid\nBFMWwRX3weq58OINcOqo11UZY4ynLEguVmgYfPVRuPlZZ7zk6VGQY0vUG2NaLguSSzXg23DPP5xg\neX48rHvJ64qMMcYTFiT+6DAApn8IXYfD4vvh7w9C6TmvqzLGmEZlQeKv6LZw++sw/IeQ/Ry8+HU4\nedjrqowxptEENEhEZJyIbBWRHSIys4Z9JorIZhHZJCLz3W0ZIrLC3bZRRG6p5nVPisipQNZfbyGh\ncO2vYMLzcPgzZ9xk3yqvqzLGmEYRsCARkVBgDjAeSAcmi0h6lX3SgJ8Bw1W1L/BD96nTwB3utnHA\nbBGJ93ldFpAQqNovWb+bYeq/IDwKXvia00JR9boqY4wJqEC2SIYAO1R1l6qeAxYCN1bZZxowR1WP\nA6jqUffnNlXd7t4/CBwFkqEyoH4L/EcAa790l/WF6Uvh8tHOmMlbD0DpWa+rMsaYgAlkkHQC9vs8\nznG3+eoJ9BSR5SKyUkTGVT2IiAwBIoCd7qb7gMWqeigANTeMqAS49a8w8sfObK7nr4fCA15XZYwx\nAeH1YHsYkAaMBiYDz1TpwuoAvAzcparlItIR+DbwVF0HFpHpIpItItm5ubkBKb5WIaEw9r9g4suQ\n+wXMHQV7P2n8OowxJsACGSQHgM4+j1Pcbb5ycFoXJaq6G9iGEyyISCzwNvCfqrrS3X8Q0APYISJ7\ngGgR2VHdm6vqXFXNUtWs5OTkhvpMFy/9Bpj6PkTGwYvfgNXP2LiJMaZZCWSQrAHSRKSbiEQAk4DF\nVfZZhNMaQUSScLq6drn7vwG8pKqvVeysqm+rantVTVXVVOC0qvYI4GdoGO16w7R/Q49r4J0fw6J7\noeSM11UZY0yDCFiQqGopznjGEmAL8KqqbhKRWSJyg7vbEiBfRDYDS4GfqGo+MBG4CrhTRNa7t4xA\n1dooIuNg0gIYNRM2zIfnxkHB/rpfZ4wxQU60BXSzZGVlaXZ2EK2H9cU78MZ3neudfPtF6DbS64qM\naZrKy5wxyANrndvhz+GK7ztT8Y3fRGStqmbVuZ8FiUfytsPCWyF/J1z3Gxg2w7neiTGmeqpQsBcO\nrHODYx0cWg8lp53nI+MgtBWgcP86iIz1tNzmoL5BEtYYxZhqJKU5g/CLZsCSnzkrCX/jCYiI9roy\nY4JDUZ4TFgfXnW9xnM53ngtt5ax1l3kHdBoMHTOh7eXOv6Nnr4blTzizJk2jsCDxUmSsMz142e/h\n349C7ha4ZR4kdPW6MmMa17kiOLThfGAcWOe0PgAQSO4NPcdDp0wnONqlQ1jEl4+TMhj6TYAVf4Cs\nuyAupVE/RktlXVvBYts/4PWpzvknE56D7mO8ruhCZaXOX4NhEdAqDkK8PgXJNFllJXB0y4WhkbsF\ntNx5Pq4LdBrkBEanwdBhILRqU//jF+yDp7Kg701w89OB+QwthHVtNTU9r3OWVll4G7xyM1zzK7jy\n/sYZNyk+AScPwYmDVX4egpMHnZ9FR8//Q5cQiIx3zuCv6xbd9vz9yDgnKE3LoQrHdl3YRXVoA5QW\nO89HJThh0ftrbnBkQkw7/94zvosz5rh8Ngz7nnOZbBNQ1iIJNmdPwZv3wuY3oe/NcOMfIKL1pR2r\nrBROHakhJNyfJw/DuWoWUY6Mh9iO0KYDxHaANh2hzWXO9VbOHPe5HbvwcXFh7TVFxtUQOm1rCaR4\nZ4abCX4nj/iMabg/iwuc58KinNZFRWB0yoSEboH5Y6m4EJ4c5HSBfectm8hyiaxF0lS1inGmBC+f\nDe/PgtytMOkVZyCxgqrzD+Xk4fMthsqfPiFx6ihQ5Q+FkPDz4XBZP0i7zn3sGxodnBWML0V5mVPb\nBWHj3k4f+/K243vdACo43+KpTkSb86ES0w66XQW9rncmLRjvqDpL/6yfB7s/gkL33CgJcX6Jp99w\nfjC8XZ/G+4MgMg5G/8w5AXjru9D7+sZ53xbKWiTBbMf78NrdgDq/8E8ePh8SFVMefUUlOC2HijCo\nDAefn1Ftg3N8o7wczp6oPoCq3gr2w9FNzusSe0Cv8dDra9B5iHWdNZaTh2H9fPj0FTi20wn6tGug\nU5Y7rjHg0lvSDaWsBP54BaBw70pr1V4CO4/ER5MNEoBju50pwicO+IRE1bBo718roikqzHH+0tz6\nDuz+GMpLIDoR0r7q/PV5+RindWcaTlkpbP+Hs6L19n+AlkGXKyFzCqTf6H1wVGfru7BgEoz/LQyd\n7nU1TY4FiY8mHSSmbsUnYOf7zooB25c4XWuhreDyUU73V89xTvCaS5O3Az59GTYscMbcWreDjMkw\naErwdy2qOoulHtkEP1jvdHmZerMg8WFB0oKUlcC+lW5r5W04vsfZ3jHTCZXe1zt99zb4WrtzRc6E\nj3Uvw75PQEKd7tXMKc7PptRNdGiDc/nr4Q/AtbO8rqZJsSDxYUHSQqk66zB98bYTLAfc/wfiuzih\n0ms8dB3etH4pBpKqM+Nq3cvw2Wtw7qQzyWPQFBg4uWm36t74Hnz+OtyXbSf8XgQLEh8WJAZwBoi3\nveeEyq4PnHMZWsVB2rVOqPS4xpkV1tKcPgYb/+oEyNFNzjTdvt90AqTrlc2j9VZ4AJ4a7LRIJzzn\ndTVNhgWJDwsS8yXnipww+eIdJ1xO50FIGKSOON9aie/idZWBU14Ouz9wBs6/eBvKzjkn7g2aAv0n\nNM+xhH//Bj76rbPGXUqdvxsNFiQXsCAxtSovg5xsZ0xl67uQt83Zfll/d2rxeOeXbHP4y7xgv3PO\nx6fzoHCfM2V8wC1OgLTv53V1gXX2JDzpLu5493vN479ngFmQ+LAgMRclb4czrXjru7B/pXOiZJsO\nbqhcD6kjITzS6yrrr/Ss0+r49GXYuRRQuHy0s3Jur681rc/ir7UvwFs/gIkvOVOWTa0sSHxYkJhL\nVpTvnDOx9W3Y8W8oKYLw1tDjauh+tXNOT+skZ02x6CRnccFg+Uv3yGZ32u5CZymb2BQYdBtk3NZy\nB5zLSuHPI5zxse+vrn4FYVPJgsSHBYlpECXFsOfj87PATh3+8j6hEc6JkdFJ0Nr9GZ3oho3Pz+gk\n535UQsOejV98wpmd9OnLzjpXIeHOgoiZU5yTNO3Mf9j+L5j3LfjqfztXUzQ1siDxYUFiGlx5ubOu\nVFGes7z+6Tz3vvu4yHfbMThb02KW4oRJ6yQ3dNqev18ZOok+zyd+uStKFfatcGZdbV7kLJ+T3McJ\njwG3OK81F3r5JmdRyQc+db5zUy1btNGYQAoJcbqH6ttFVHrODRzfgHEfVwRQUb5z6eX9q5ztNS1i\nGRFzYevm2G7I3+5s7//t81cNDJYutmB03W+cLq6Pfgfj/tvrapo8CxJjGkNYhHNCX31P6isvd1ZE\n9g2ayvs+P08dcdZaG/Ggc+5HMK53FYwu6+uMFa2eC1+5BxK7e11RkxbQIBGRccATQCjwrKo+Vs0+\nE4FHcNY736Cqt4pIBvAnIBYoAx5V1b+6+88DsoASYDXwXVUtCeTnMKbRhYS4A/htg389q6bq6l/A\n53+Dfz0Ct7zsdTVNWsDWExeRUGAOMB5IByaLSHqVfdKAnwHDVbUv8EP3qdPAHe62ccBsEak45Xge\n0BvoD0QBUwP1GYwxzVib9jD8B7BlsbM+m7lkgbwwxRBgh6ruUtVzwEKg6sTtacAcVT0OoKpH3Z/b\nVHW7e/8gcBRIdh+/oy6cFklKAD+DMaY5u/I+5xyhJf/pTFowlySQQdIJ2O/zOMfd5qsn0FNElovI\nSrcr7AIiMgSIAHZW2R4OTAHeq+7NRWS6iGSLSHZubq4fH8MY02xFtIar/8tZ0PPz172upsny+lJ5\nYUAaMBqYDDzj04WFiHQAXgbuUv3SFJY/Ah+p6sfVHVhV56pqlqpmJScnB6R4Y0wzMHCSsxzOv37l\nnCtkLlogg+QA0NnncYq7zVcOsFhVS1R1N7ANJ1gQkVjgbeA/VfWCDkwReRinq+uhANVujGkpQkLh\nq79x1h5b/bTX1TRJgQySNUCaiHQTkQhgErC4yj6LcFojiEgSTlfXLnf/N4CXVPU13xeIyFTgq8Dk\nalopxhhz8S4f7Vym+aPfO+fzmIsSsCBR1VLgPmAJsAV4VVU3icgsEbnB3W0JkC8im4GlwE9UNR+Y\nCFwF3Cki691bhvuaPwOXASvc7b8M1GcwxrQg1/0azp2CD790loKpgy2RYowxFf7+oHONlntX2vk7\n1H+JFK8H240xJniM/rlzhch/Pux1JU2KBYkxxlSISYaRDzqXDdizzOtqmgwLEmOM8TXsXojrDEt+\n7qx5ZupkQWKMMb7Co2DsL+HQBvjsVa+raRIsSIwxpqp+E6DjIHh/Fpw77XU1Qc+CxBhjqgoJgese\nhRMHYOUfva4m6FmQGGNMdVKHQ++vw7L/hVNHva4mqFmQGGNMTa75FZQWw1K7imJtLEiMMaYmST0g\n6x5Y9yIc3eJ1NUHLgsQYY2oz6qcQ0Qb+2QRXY2qklUssSIwxpjatE+GqH8P2f8DOpV5XUz/l5bBh\nIfxpOJw+FvC3syAxxpi6DP0uxHeFf/wCysu8rqZ2Odnwl2vhje9CWCs4czzgb2lBYowxdQlrBdc8\nAkc+h/Xzva6meicOwRvfg2fHQuF++OafYOr7kNg94G8dFvB3MMaY5qDvTc45Jf/+DfS72blMbzAo\nKYaVc5xrqZSXwIgHYeSPoFWbRivBWiTGGFMfIs5JiqcOwydPeV2NM5C+5S2YM8Q5A7/7GPj+Kqfl\n1IghAtYiMcaY+usyFNK/CcufgMzvQGwHb+o4shnemwm7P4TkPjBlkRMkHrEWiTHGXIxrHoGyElj6\nm8Z/79PH4O0fw5+HO4tKjv8tfG+ZpyEC1iIxxpiL07abM4trxRwYOgPa9wv8e5aVQvZzsPRROHvC\nOUlyzM8hum3g37serEVijDEX66ofQ1S8Mx040Cf97VwKfx4B7/4EOgxwWiBf+13QhAhYkBhjzMWL\nSnDOeN+1FHb8KzDvcWwXLLgVXv4mlJyGW+bBHYvhsr6BeT8/BDRIRGSciGwVkR0iMrOGfSaKyGYR\n2SQi891tGSKywt22UURu8dm/m4isco/5VxGJCORnMMaYamXdA20vd1olZaUNd9yzJ51rxs8ZCrs+\ngLEPw/dXQ5+vOzPHglDAgkREQoE5wHggHZgsIulV9kkDfgYMV9W+wA/dp04Dd7jbxgGzRSTefe5/\ngP9V1R7AceCeQH0GY4ypUVgEXDsLcr+AT1/y/3jl5c7Jjk8NhuWzod+34P61MPIhCI/0//gBFMgW\nyRBgh6ruUtVzwELgxir7TAPmqOpxAFU96v7cpqrb3fsHgaNAsogIcDXwmvv6F4FvBvAzGGNMzXp/\nHbpc6Swzf/bkpR9n/xrnjPRFM5zrxU99H276s3fTiy9SIIOkE7Df53GOu81XT6CniCwXkZUiMq7q\nQURkCBAB7AQSgQJVrWhHVndMY4xpHCLw1d9AUS4sm33xrz9xEP42Hf5yjXP/pqfhnn9CSlbD1xpA\nXk//DQPSgNFACvCRiPRX1QIAEekAvAx8R1XL5SL6B0VkOjAdoEuXLg1ctjHGuDoNhv7fhhV/gKy7\nIC6l7teUFMOKp+Djx51FIEf+CEY8BK1iAl9vAASyRXIA6OzzOMXd5isHWKyqJaq6G9iGEyyISCzw\nNvCfqrrS3T8fiBeRsFqOCYCqzlXVLFXNSk5ObpAPZIwx1Rr7S2ca8Pu/rn0/Vdj8Jsz5irNmV4+x\nzrImY3/ZZEMEAhska4A0d5ZVBDAJWFxln0U4rRFEJAmnq2uXu/8bwEuqWjEegqoqsBSY4G76DvBm\nAD+DMcbULb4LDJsBGxfCwfXV73P4c3jxG/DqHRAR40zlveUV5wTHJi5gQeKOY9wHLAG2AK+q6iYR\nmSUiN7i7LQHyRWQzTkD8RFXzgYnAVcCdIrLevWW4r/kp8JCI7MAZM/lLoD6DMcbU28iHIDrxyycp\nFuXD3x+Cp0c6y9Bf/zv47sdw+Sjvam1goo10KUYvZWVlaXZ2ttdlGGOau9XPwDs/hkkLIO1aWPMX\n+OC/4ewp+MpUGD0zqM5Ir4uIrFXVOkf+LUiMMaahlJXCn66A0rMQFgl5W+HyMTDu/0C7Pl5Xd9Hq\nGyS2RIoxxjSU0DC49tdQsBfKzjktkylvNMkQuRheT/81xpjmpdc4ZwwkuZdzid4WwILEGGMaWocB\nXlfQqKxryxhjjF8sSIwxxvjFgsQYY4xfLEiMMcb4xYLEGGOMXyxIjDHG+MWCxBhjjF8sSIwxxvil\nXkEiIt1FpJV7f7SIPOBzDXVjjDEtWH1bJK8DZSLSA5iLc8Gq+QGryhhjTJNR3yApd68vchPwlKr+\nBGgaV6U3xhgTUPUNkhIRmYxzRcK/u9vCA1OSMcaYpqS+QXIXcAXwqKruFpFuwMuBK8sYY0xTUa/V\nf1V1M/AAgIgkAG1U9X8CWZgxxpimob6ztj4QkVgRaQusA54RkccDW5oxxpimoL5dW3GqegK4GXhJ\nVYcC1wSuLGOMMU1FfYMkTEQ6ABM5P9hujDHG1DtIZgFLgJ2qukZELge21/UiERknIltFZIeIzKxh\nn4kisllENonIfJ/t74lIgYj8vcr+Y0VknYisF5Fl7rktxhhjPCKqGpgDi4QC24BrgRxgDTDZHbiv\n2CcNeBW4WlWPi0g7VT3qPjcWiAa+q6pf93nNNuBGVd0iIvcCQ1T1ztpqycrK0uzs7Ib9gMYY08yJ\nyFpVzaprv/oOtqeIyBsictS9vS4iKXW8bAiwQ1V3qeo5YCFwY5V9pgFzVPU4QEWIuPffB05Wc1wF\nYt37ccDB+nwGY4wxgVHfrq3ngcVAR/f2lrutNp2A/T6Pc9xtvnoCPUVkuYisFJFx9ahlKvCOiOQA\nU4DHqttJRKaLSLaIZOfm5tbjsMYYYy5FfYMkWVWfV9VS9/YCkNwA7x8GpAGjgck404rrWgzyQeB6\nVU3BCbNqpyGr6lxVzVLVrOTkhijVGGNMdeobJPkicruIhLq324H8Ol5zAGdxxwop7jZfOcBiVS1R\n1d04YyppNR1QRJKBgaq6yt30V+DKen4GY4wxAVDfILkbZ+rvYeAQMAG4s47XrAHSRKSbiEQAk3C6\nx3wtwmmNICJJOF1du2o55nEgTkR6uo+vBbbU8zMYY4wJgPoukbIXuMF3m4j8EJhdy2tKReQ+nGnD\nocBzqrpJRGYB2aq62H3uOhHZDJQBP1HVfPf4HwO9gRh3POQeVV0iItOA10WkHCdY7r64j2yMMaYh\nXfL0XxHZp6pdGriegLDpv8YYc/EadPpvTe/hx2uNMcY0E/4ESWDOZDTGGNOk1DpGIiInqT4wBIgK\nSEXGGGOalFqDRFXbNFYhxhhjmiZ/uraMMcYYCxJjjDH+sSAxxhjjFwsSY4wxfrEgMcYY4xcLEmOM\nMX6xIDHGGOMXCxJjjDF+sSAxxhjjFwsSY4wxfrEgMcYY4xcLEmOMMX6xIDHGGOMXCxJjjDF+sSAx\nxhjjl1qvR9LSzXprM7vzTpHROYGBnePI6BxPfHSE12UZY0xQCWiQiMg44AkgFHhWVR+rZp+JwCM4\nV2LcoKq3utvfA4YBy1T16z77C/Ab4NtAGfAnVX0yEPXHtAol5/gZPtiWi7rXieyW1JqMzvFkdI5n\nYOd4+nRoQ6uw0EC8vTHGNAmiGphLr4tIKLANuBbIAdYAk1V1s88+acCrwNWqelxE2qnqUfe5sUA0\n8N0qQXIXMAa4U1XLfV9Tk6ysLM3Ozr7kz3KyuITPcgr5dH8B691b7smzAESEhpDeMbYyXDI6x9M1\nMRon74wxpukSkbWqmlXXfoFskQwBdqjqLreghcCNwGaffaYBc1T1OIBvIKjq+yIyuprjzgBuVdXy\nqq8JlDaR4VzZI4kreyRV1MahwuLKUFm/r4C/rtnPC5/sASAhOpyBPq2WjJR4Elpbl5gxpnkKZJB0\nAvb7PM4BhlbZpyeAiCzH6f56RFXfq+O43YFbROQmIBd4QFW3N0zJ9SMidIyPomN8FNf37wBAaVk5\n246ccsPlOBv2F/Lhtu2VXWKpidHng6VzPOkdY61LzBjTLHg92B4GpAGjgRTgIxHpr6oFtbymFVCs\nqlkicjPwHDCy6k4iMh2YDtClS5eGrvtLwtwurvSOsdw61Hm/U2dL2ZjjtFo27C9gxa58Fq0/CDhd\nYn06xpKREkdGl3gyOieQal1ixpgmKJBBcgDo7PM4xd3mKwdYpaolwG4R2YYTLGtqOW4O8Df3/hvA\n89XtpKpzgbngjJFcdPUNIKZVGFd2T+LK7kmV2w4VnmH9vvNjLf9vbQ4vrtgLQHx0OANTnFbLILf1\n0rYRu8RUlXKF0vJySsuU0nKltKycsnKlpFwpL1c6xEUSFmqzxo0x5wUySNYAaSLSDSdAJgG3Vtln\nETAZeF5EknC6unbVcdxFOIPtu4FROAP6TUaHuCg69I9ivE+X2PajpypbLev3F/CHf2+n3I2+ronR\nDEyJJzEmovKXe5nvL/oL7jvPlZQpZW4IONuUkopAqHiu3H2uTCkpP/9cXaLCQ8noHE9WagKZXRPI\n7JJAXFR4IL8yY0yQC9isLQARuR6YjTP+8ZyqPiois4BsVV3sTuX9PTAOZyrvo6q60H3tx0BvIAbI\nB+5R1SUiEg/MA7oAp4DvqeqG2urwd9ZWYys6W8rGnEI25DgD+RtyCjh1tpSwECEsNMT9KYSFOPdD\nqzyuuB8aIoSHVjzvPlfxmlAhPEQIDQk5v4+73/nXXficKnxx+CTZe4+x5dBJysoVEejZrg2ZXRPI\n6prA4K4JNmvNmGaivrO2AhokwaKpBUlTUHS2lA37C8jee5y1e4+zbt9xThaXApAUE0FmlwSyUp1g\n6dcprllNLCg6W8qe/CKKzpYxICWOyPDm89mM8RUM039NM9a6VdgFU6LLy5XtR0+RvfcYa/ccZ+2+\n4/xj8xEAIsJCGNApjsFui2Vw1wQSY1p5WX6dikvK2Jt/mt15RezOK2JPXhG7852fR91ziAAiw0MY\ndnkio3smM6pXuxY3YeJEcQkrd+azctcxerWPYWJW5xb1+Y3DWiQmYI6eLGbd3gLW7j3G2r3H+fzA\nCc6VlQPOCgEVoZLVNYHuyTGEhDTuL6CzpWXsP3aa3XmnLwiKPXlFHCwsvmDfpJgIUhNbk5rUmm5J\nrUlNbE1EWAjLd+Tx4bZcducVAdClbTSjeiYzqmcyV3RPpHWr5vW3WnFJGev2HWf5jjyW78hnY04B\n5QphIUJpuXJjRkceu3kAURHWSmsOrGvLhwVJcCguKePzA4WV3WFr9x7nWNE5AOKiwsnsEk9Walsy\nuySQ0Tm+QX4ZlZSVs//YafbkF1UGhnO/iIMFZyonNYAzay418XxQpCZFc3lSDF2ToomNrH1Cwd78\nIj7alsuH23JZviOfMyVlRISG8JVuCW6wtKPnZTFN7q/1snJl08FClu/I55OdeazefYyzpeWEhggD\nU+IY4bZKMzrH8+zHu/j9P7fR67I2zJ2SRZfEaK/LN36yIPFhQRKcVJXdeUWVobJ273G2Hz0FOH/h\npneM9Wm1tKV9XGS1xykrVw4cP1PZoqjsjsovIuf4Gcp80qJNZJhPULSmW1J0ZXg01IKcZ0vLyN5z\nnA+35fLh1ly2HjkJQIe4yMrWypU9koJytlvFf5OKFseKXfkUnikBoNdlbbiyRyIjeiQxpFtb2lQT\nrh9sPcoPFq4H4IlJGYzu1a5R6zcNy4LEhwVJ01Fw+hyf7itwxlr2Hmf9/gKKS5zusE7xUQzumkB6\nx1hyT56t7I7af+z0BVOXW0eEkprkBkWVwGjbOqLRWwWHCs/w0bZcPtiay7LteZw8W0poiJDZJZ5R\nPZMZ3asd6R1iG71rr8LRE8Us3+kEx/IdeRxyu/U6xUcxvEciw3skcUX3RNq1qT7Iq9qXf5rpL2ez\n9chJfnRtT+4d3cOzz2b8Y0Hiw4Kk6SopK2fzwROVLZbsvcc4cuIskeEhTqvCJyi6JcWQmhRNckyr\noO1CKikrZ/3+Aj7c6nSDfXagEHDGYK5KS2ZUr2RGpiUH9ETUE8UlrNp1zG115FW2AuOjw7myuxMc\nw7sn+TWN+/S5Un72t894c/1Brk2/jMcnDqy2BWOCmwWJDwuS5kNVOXGmlDaRYc3ir9y8U2f5eLvT\nWvloWy7HT5cgAgM6xTGqVztG9Uwmo3M8oX581rOlZazde5xPduSzfGceG3MKKStXIsNDGNItkeFu\neDR0q0hVeX75Hh59ZwtdE6OZO2UwPdq1abDjm8CzIPFhQWKagrJy5fMDhc7YyrZcPt13nHJ1JiKM\nSEuqHF+5LLb2LqaycmXzwRMs25HHJzvzWLPnGMUlXx4gH9QlvlHO71m5K5/75q/jzLkyfj9xIOP6\ndQj4e5qGYUHiw4LENEWFp0uhAQAHAAAUPUlEQVT4eEduZTdYxfkrfTrEVobK4K4JhIeKM0C+M59P\nduTxyc6LGyBvDIcKzzDjlXWs31/AvaO786PrevnVyjKNw4LEhwWJaepUlS8On6ycCZa99xglZUrr\niFBio8L9HiBvDGdLy3hk8SYWrN7PyLQknpw0yK7TE+QsSHxYkJjm5tTZUlbszOeDrUcpPFPCsMud\nVkdTWOdswep9PPzmJtrFtuLPtw+mX6c4r0syNbAg8WFBYkxwWb+/gBmvrOVY0Tke+1Z/bhqU4nVJ\nphr1DRK7sIQxptFldI7nrftHkNE5ngf/uoFHFm+ixF0+xzQ9FiTGGE8kxbTilalDuWdEN174ZA+3\nPbOKoyeL636hCToWJMYYz4SHhvBfX0/niUkZbDxQwDeeWsbavce9LstcJAsSY4znbszoxBv3DqdV\nWCiT5q7glZV7aQnjt82FBYkxJij06RDLW/eNYHiPJH6x6HN++vpGikvKvC7L1IMFiTEmaMRFh/OX\n73yF+6/uwavZOUx8egUHCs54XZapgwWJMSaohIYIP7quF3OnDGZXbhHfeGoZn+zM87osUwsLEmNM\nULqub3vevG84bVtHcPuzq3jmo102bhKkAhokIjJORLaKyA4RmVnDPhNFZLOIbBKR+T7b3xORAhH5\new2ve1JETgWqdmOM97onx7Do+8P5at/2PPrOFu5f8Cmnz5V6XZapImBBIiKhwBxgPJAOTBaR9Cr7\npAE/A4aral/ghz5P/xaYUsOxs4CEQNRtjAkuMa3C+ONtmfx0XG/e+ewQN835hD15RV6XZXwEskUy\nBNihqrtU9RywELixyj7TgDmqehxAVY9WPKGq7wMnqx7UDajfAv8RqMKNMcFFRJgxujsv3j2EIyeL\n+cYflvHvL454XZZxBTJIOgH7fR7nuNt89QR6ishyEVkpIuPqcdz7gMWqeqiB6jTGNBEj05J5674R\ndGkbzT0vZvPEv7ZTXm7jJl7zerA9DEgDRgOTgWdEJL6mnUWkI/Bt4Km6Diwi00UkW0Syc3NzG6hc\nY4zXOreN5vUZV3JTRif+91/bmPZSduX1V4w3AhkkB4DOPo9T3G2+cnBaFyWquhvYhhMsNRkE9AB2\niMgeIFpEdlS3o6rOVdUsVc1KTk6+1M9gjAlCkeGh/H7iQH51Q18+3JbLN+csZ9uRL/WEm0YSFsBj\nrwHSRKQbToBMAm6tss8inJbI8yKShNPVtaumA6rq20D7iscickpVezR04caY4CcifOfKVNI7xnLv\nvHV8c85yfjthIF8bcOGlfFWVsnKltOJWVk5JmbOtpKzcfe7Cbc5+zvbK+xXbffYt9dm3pLycsjKl\npFwJDxEmD+1CUkwrj76dxhXQ65GIyPXAbCAUeE5VHxWRWUC2qi4W5wo8vwfGAWXAo6q60H3tx0Bv\nIAbIB+5R1SVVjn9KVWPqqsOuR2JM83bkRDEzXlnLun0FxEeHnw+BMic8vJDWLob504aR3Kbphold\n2MqHBYkxzd+50nKeXbaLw4XFhIWEEB4qhIYIYaEhhIUIYaFCeEgIoSHiPhfibHPvh4eI+5yzveJ+\naIjzurBQcY9z/nhhIVXuu/us2n2Mu55fQ6eEKOZPGxpUlzy+GBYkPixIjDGNbeWufO56fg0d4yNZ\nMH1YkwwTu0KiMcZ4aNjlibxw11c4VFjM5LkrOXqi+V60y4LEGGMCZOjlibxw1xAOFRYz6ZnmGyYW\nJMYYE0BDurXlhbuGcLgZh0mLHSMpKSkhJyeH4uLm9x/VK5GRkaSkpBAeHu51KcYEnTV7jnHnc6u5\nLNYZM7ksNvjHTGyw3Ud1QbJ7927atGlDYmIizixk4w9VJT8/n5MnT9KtWzevyzEmKGXvOcZ3mlCY\n2GB7HYqLiy1EGpCIkJiYaC08Y2qRldrWWXjyRDGT5q7kcGHz+PfSYoMEsBBpYPZ9GlO3rNS2vHTP\nEHJPnmXyM80jTFp0kHhpzJgxLFlywYn6zJ49mxkzZtT4mpgY5yT+gwcPMmHChGr3GT16NHWdMzN7\n9mxOnz5d+fj666+noKCgvqUbY/w0uKvTMsk9eZZJc1dwqLBpX5fegsQjkydPZuHChRdsW7hwIZMn\nT67ztR07duS111675PeuGiTvvPMO8fE1LrpsjAmAwV0TePHuIeSdOsekuSubdJhYkHhkwoQJvP32\n25w7dw6APXv2cPDgQQYNGsTYsWPJzMykf//+vPnmm1967Z49e+jXrx8AZ86cYdKkSfTp04ebbrqJ\nM2fO/884Y8YMsrKy6Nu3Lw8//DAATz75JAcPHmTMmDGMGTMGgNTUVPLy8gB4/PHH6devH/369WP2\n7NmV79enTx+mTZtG3759ue666y54H2PMpRncNYGX7hnCMTdMDhY0zX9XgVz9t8n41Vub2HzwRIMe\nM71jLA9/o2+Nz7dt25YhQ4bw7rvvcuONN7Jw4UImTpxIVFQUb7zxBrGxseTl5TFs2DBuuOGGGscf\n/vSnPxEdHc2WLVvYuHEjmZmZlc89+uijtG3blrKyMsaOHcvGjRt54IEHePzxx1m6dClJSUkXHGvt\n2rU8//zzrFq1ClVl6NChjBo1ioSEBLZv386CBQt45plnmDhxIq+//jq33357w3xZxrRgmV2cMLnj\nL6uZNHclC6cPo2N8lNdlXRRrkXjIt3uroltLVfn5z3/OgAEDuOaaazhw4ABHjtR8SdGPPvqo8hf6\ngAEDGDBgQOVzr776KpmZmQwaNIhNmzaxefPmWutZtmwZN910E61btyYmJoabb76Zjz/+GIBu3bqR\nkZEBwODBg9mzZ48/H90Y42OQGybHi5yWyYEm1jKxFgnU2nIIpBtvvJEHH3yQdevWcfr0aQYPHswL\nL7xAbm4ua9euJTw8nNTU1EuaUrt7925+97vfsWbNGhISErjzzjv9mprbqtX5pbBDQ0Ota8uYBjao\nSwIvTx3KlL+sYtLcFSycfgWdmkjLxFokHoqJiWHMmDHcfffdlYPshYWFtGvXjvDwcJYuXcrevXtr\nPcZVV13F/PnzAfj888/ZuHEjACdOnKB169bExcVx5MgR3n333crXtGnThpMnv3w1uZEjR7Jo0SJO\nnz5NUVERb7zxBiNHjmyoj2uMqUNG53heuWcoBadLmDR3BTnHT9f9oiBgQeKxyZMns2HDhsogue22\n28jOzqZ///689NJL9O7du9bXz5gxg1OnTtGnTx9++ctfMnjwYAAGDhzIoEGD6N27N7feeivDhw+v\nfM306dMZN25c5WB7hczMTO68806GDBnC0KFDmTp1KoMGDWrgT2yMqc3AC8JkZZMIkxa7RMqWLVvo\n06ePRxU1X/a9GtMwNuYUcPuzq4iNCmfBtGF0bhvd6DXYEinGGNOEDUiJZ97UYZw447RM9h8L3paJ\nBYkxxgSp/ilxzJs6jFNnS4M6TCxIjDEmiDlhMjSow8SCxBhjgly/TheGyb784AqTgAaJiIwTka0i\nskNEZtawz0QR2Swim0Rkvs/290SkQET+XmX/ee4xPxeR50TErqJkjGn2KsKk6Fwpk+auCKowCViQ\niEgoMAcYD6QDk0Ukvco+acDPgOGq2hf4oc/TvwWmVHPoeUBvoD8QBUxt+OqNMSb4VITJ6ZIyJs1d\nwd78Iq9LAgLbIhkC7FDVXap6DlgI3Fhln2nAHFU9DqCqRyueUNX3gS+dNaeq76gLWA2kBOoDBFJ+\nfj4ZGRlkZGTQvn17OnXqVPm4YiHHutx1111s3bq11n3mzJnDvHnzGqJkY0wQ6NvRN0xWBkWYBHKJ\nlE7Afp/HOcDQKvv0BBCR5UAo8Iiqvlefg7tdWlOAH9Tw/HRgOkCXLl0uqvDGkJiYyPr16wF45JFH\niImJ4cc//vEF+6gqqkpISPV5//zzz9f5Pt///vf9L9YYE1T6doxj/tRh3PbsSibNXcmCacNITWrt\nWT1eD7aHAWnAaGAy8IyI1PfCGH8EPlLVj6t7UlXnqmqWqmYlJyc3SLGNYceOHaSnp3PbbbfRt29f\nDh06xPTp0yuXg581a1blviNGjGD9+vWUlpYSHx/PzJkzGThwIFdccQVHjzqNu1/84heVy8GPGDGC\nmTNnMmTIEHr16sUnn3wCQFFREd/61rdIT09nwoQJZGVlVYacMSY4pXeMZd7UYRS7LZM9ed61TALZ\nIjkAdPZ5nOJu85UDrFLVEmC3iGzDCZY1tR1YRB4GkoHvNkil786Ew581yKEqte8P4x+7pJd+8cUX\nvPTSS2RlOSeUPvbYY7Rt25bS0lLGjBnDhAkTSE+/YLiJwsJCRo0axWOPPcZDDz3Ec889x8yZX57f\noKqsXr2axYsXM2vWLN577z2eeuop2rdvz+uvv86GDRsuWIreGBO80jvGMn/aMG57dpXTMpk+jG4e\ntEwC2SJZA6SJSDcRiQAmAYur7LMIpzWCiCThdHXtqu2gIjIV+CowWVXLG7roYNC9e/fKEAFYsGAB\nmZmZZGZmsmXLlmqXg4+KimL8+PFA7cu833zzzV/aZ9myZUyaNAlw1ujq29eb1ZCNMRevT4dY5k8b\nyrmycibNXcFuD1omAWuRqGqpiNwHLMEZ/3hOVTeJyCwgW1UXu89dJyKbgTLgJ6qaDyAiH+PMzooR\nkRzgHlVdAvwZ2AuscC/29DdVnVX1/S/KJbYcAqV16/N/UWzfvp0nnniC1atXEx8fz+23317tcvAR\nERGV90NDQyktLa322BXLwde2jzGmaend3gmTW59xlqBfMG0YlyfHNNr7B3SMxJ1h1VNVu6vqo+62\nX7ohgjv56iFVTVfV/qq60Oe1I1U1WVWjVDXFDRFUNcw9XoZ78y9EgtyJEydo06YNsbGxHDp0iCVL\nljT4ewwfPpxXX30VgM8++6zOC2AZY4JP7/axLJg2jNIyZdLclezMPdVo7+31YLupQ2ZmJunp6fTu\n3Zs77rjjguXgG8r999/PgQMHSE9P51e/+hXp6enExcU1+PsYYwKrV/s2zJ82jLJyZXIjhoktI28o\nLS2ltLSUyMhItm/fznXXXcf27dsJC7v4nk/7Xo3x3rYjJ7n1mZWICH+dfundXPVdRt4utWs4deoU\nY8eOpbS0FFXl6aefvqQQMcYEh56XtWHBtGH8+u0tJERH1P0CP9lvC0N8fDxr1671ugxjTANKu6wN\nL909pFHey8ZIjDHG+KVFB0lLGB9qTPZ9GtMytdggiYyMJD8/3375NRBVJT8/n8jISK9LMcY0shY7\nRpKSkkJOTg65ublel9JsREZGkpLSJBdjNsb4ocUGSXh4ON26dfO6DGOMafJabNeWMcaYhmFBYowx\nxi8WJMYYY/zSIpZIEZFcnBWDL0USkNeA5TR19n2cZ9/Fhez7uFBz+D66qmqdVwZsEUHiDxHJrs9a\nMy2FfR/n2XdxIfs+LtSSvg/r2jLGGOMXCxJjjDF+sSCp21yvCwgy9n2cZ9/Fhez7uFCL+T5sjMQY\nY4xfrEVijDHGLxYktRCRcSKyVUR2iMhMr+vxioh0FpGlIrJZRDaJyA+8rikYiEioiHwqIn/3uhav\niUi8iLwmIl+IyBYRucLrmrwiIg+6/04+F5EFItLsVzK1IKmBiIQCc4DxQDowWUTSva3KM6XAj1Q1\nHRgGfL8Ffxe+fgBs8bqIIPEE8J6q9gYG0kK/FxHpBDwAZKlqPyAUmORtVYFnQVKzIcAOVd2lqueA\nhcCNHtfkCVU9pKrr3PsncX5JdPK2Km+JSArwNeBZr2vxmojEAVcBfwFQ1XOqWuBtVZ4KA6JEJAyI\nBg56XE/AWZDUrBOw3+dxDi38lyeAiKQCg4BV3lbiudnAfwDlXhcSBLoBucDzblffsyLS2uuivKCq\nB4DfAfuAQ0Chqv7D26oCz4LE1JuIxACvAz9U1RNe1+MVEfk6cFRV7UL3jjAgE/iTqg4CioAWOaYo\nIgk4PRfdgI5AaxG53duqAs+CpGYHgM4+j1PcbS2SiITjhMg8Vf2b1/V4bDhwg4jswenyvFpEXvG2\nJE/lADmqWtFKfQ0nWFqia4DdqpqrqiXA34ArPa4p4CxIarYGSBORbiISgTNgttjjmjwhIoLT/71F\nVR/3uh6vqerPVDVFVVNx/r/4t6o2+786a6Kqh4H9ItLL3TQW2OxhSV7aBwwTkWj3381YWsDEgxZ7\nhcS6qGqpiNwHLMGZefGcqm7yuCyvDAemAJ+JyHp3289V9R0PazLB5X5gnvtH1y7gLo/r8YSqrhKR\n14B1OLMdP6UFnOFuZ7YbY4zxi3VtGWOM8YsFiTHGGL9YkBhjjPGLBYkxxhi/WJAYY4zxiwWJMZdI\nRMpEZL3PrcHO5haRVBH5vKGOZ0wg2Xkkxly6M6qa4XURxnjNWiTGNDAR2SMi/1dEPhOR1SLSw92e\nKiL/FpGNIvK+iHRxt18mIm+IyAb3VrGkRqiIPONe2+IfIhLl7v+Ae22YjSKy0KOPaUwlCxJjLl1U\nla6tW3yeK1TV/sAfcFYKBngKeFFVBwDzgCfd7U8CH6rqQJw1qipWUEgD5qhqX6AA+Ja7fSYwyD3O\n9wL14YypLzuz3ZhLJCKnVDWmmu17gKtVdZe72OVhVU0UkTygg6qWuNsPqWqSiOQCKap61ucYqcA/\nVTXNffxTIFxVfyMi7wGngEXAIlU9FeCPakytrEViTGBoDfcvxlmf+2WcH9P8Gs7VOzOBNe4FlIzx\njAWJMYFxi8/PFe79Tzh/2dXbgI/d++8DM6DyOvBxNR1UREKAzqq6FPgpEAd8qVVkTGOyv2SMuXRR\nPqshg3PN8oopwAkishGnVTHZ3XY/zlUEf4JzRcGKFXJ/AMwVkXtwWh4zcK6uV51Q4BU3bAR4soVf\n1tYEARsjMaaBuWMkWaqa53UtxjQG69oyxhjjF2uRGGOM8Yu1SIwxxvjFgsQYY4xfLEiMMcb4xYLE\nGGOMXyxIjDHG+MWCxBhjjF/+Pz0vB5Fg2CSaAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f6a6c35aa58>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "with open('./%s/hist_0.json' % path_info['model_info']['model_dir'], 'r') as f:\n",
    "    history = json.load(f)\n",
    "    \n",
    "plt.plot(history['val_loss'], label='Validation')\n",
    "plt.plot(history['loss'], label='Training')\n",
    "plt.legend()\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. Load the pre-trained network for testing\n",
    "\n",
    "To test the trained model, we can use the `deepbiome_test` function. \n",
    "\n",
    "If you use the index file (`idx_path`), this function provides the evaluation using the test index (index set not included in the index file) for each fold. If not, this function provides the evaluation using the whole samples. \n",
    "\n",
    "If `number_of_fold` is set to `k`, the function will test the model only with first `k` folds.\n",
    "\n",
    "We can use the testing metrics different with the training. In the example below, we additionally used `AUC` metric."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "test_network_info = {\n",
    "    'architecture_info': {\n",
    "        'batch_normalization': 'False',\n",
    "        'drop_out': '0',\n",
    "        'weight_initial': 'glorot_uniform',\n",
    "        'weight_l1_penalty':'0.',\n",
    "        'weight_decay': 'phylogenetic_tree',\n",
    "    },\n",
    "    'model_info': {\n",
    "        'lr': '0.01',\n",
    "        'decay': '0.001',\n",
    "        'loss': 'binary_crossentropy',\n",
    "        'metrics': 'binary_accuracy, sensitivity, specificity, gmeasure, auc',\n",
    "        'taxa_selection_metrics': 'sensitivity, specificity, gmeasure, accuracy',\n",
    "        'network_class': 'DeepBiomeNetwork',\n",
    "        'optimizer': 'adam',\n",
    "        'reader_class': 'MicroBiomeClassificationReader',\n",
    "        'normalizer': 'normalize_minmax',\n",
    "    },\n",
    "    'test_info': {\n",
    "        'batch_size': 'None'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "test_path_info = {\n",
    "    'data_info': {\n",
    "        'data_path': resource_filename('deepbiome', 'tests/data'),\n",
    "        'idx_path': resource_filename('deepbiome', 'tests/data/onefile_idx.csv'),\n",
    "        'tree_info_path': resource_filename('deepbiome', 'tests/data/genus48_dic.csv'),\n",
    "        'x_path': 'onefile_x.csv',\n",
    "        'y_path': 'classification_y.csv'\n",
    "    },\n",
    "    'model_info': {\n",
    "        'evaluation': 'eval.npy',\n",
    "        'model_dir': './example_result/',\n",
    "        'weight': 'weight.h5'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:282] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:314] Test Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure' 'auc']\n",
      "[root    |INFO|deepbiome.py:316] -------1 fold test start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:327] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:328] Build network for 1 fold testing\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Family', 'Order', 'Genus', 'Class', 'Number', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |INFO|deepbiome.py:338] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:339] 1 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 560us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.29766368865966797!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6125151515007019, 0.6899999976158142, 1.0, 0.0, 0.0, 0.8514492511749268]\n",
      "[root    |INFO|deepbiome.py:344] \n",
      "[root    |INFO|deepbiome.py:345] Compute time : 0.8984127044677734\n",
      "[root    |INFO|deepbiome.py:346] 1 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:316] -------2 fold test start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:327] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:328] Build network for 2 fold testing\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Family', 'Order', 'Genus', 'Class', 'Number', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |INFO|deepbiome.py:338] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:339] 2 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 528us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.2973334789276123!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.5929712653160095, 0.7200000286102295, 1.0, 0.0, 0.0, 0.501054048538208]\n",
      "[root    |INFO|deepbiome.py:344] \n",
      "[root    |INFO|deepbiome.py:345] Compute time : 0.8924229145050049\n",
      "[root    |INFO|deepbiome.py:346] 2 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:316] -------3 fold test start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:327] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:328] Build network for 3 fold testing\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Family', 'Order', 'Genus', 'Class', 'Number', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |INFO|deepbiome.py:338] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:339] 3 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 618us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.319141149520874!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.648329496383667, 0.6549999713897705, 1.0, 0.0, 0.0, 0.42947229743003845]\n",
      "[root    |INFO|deepbiome.py:344] \n",
      "[root    |INFO|deepbiome.py:345] Compute time : 0.9656755924224854\n",
      "[root    |INFO|deepbiome.py:346] 3 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:316] -------4 fold test start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:327] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:328] Build network for 4 fold testing\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Family', 'Order', 'Genus', 'Class', 'Number', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |INFO|deepbiome.py:338] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:339] 4 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 575us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.3146650791168213!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6190296411514282, 0.6899999976158142, 1.0, 0.0, 0.0, 0.5835086703300476]\n",
      "[root    |INFO|deepbiome.py:344] \n",
      "[root    |INFO|deepbiome.py:345] Compute time : 1.1804802417755127\n",
      "[root    |INFO|deepbiome.py:346] 4 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:316] -------5 fold test start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:327] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:328] Build network for 5 fold testing\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Family', 'Order', 'Genus', 'Class', 'Number', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\""
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |INFO|deepbiome.py:338] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:339] 5 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 533us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.30005717277526855!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6067151427268982, 0.7049999833106995, 1.0, 0.0, 0.0, 0.7319990396499634]\n",
      "[root    |INFO|deepbiome.py:344] \n",
      "[root    |INFO|deepbiome.py:345] Compute time : 0.9219372272491455\n",
      "[root    |INFO|deepbiome.py:346] 5 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:355] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:356] Test Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure' 'auc']\n",
      "[root    |INFO|deepbiome.py:357]       mean : [0.61591214 0.692      1.         0.         0.         0.61949666]\n",
      "[root    |INFO|deepbiome.py:358]        std : [0.01834673 0.02158705 0.         0.         0.         0.15355249]\n",
      "[root    |INFO|deepbiome.py:359] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:360] Total Computing Ended\n",
      "[root    |INFO|deepbiome.py:361] -----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "evaluation = deepbiome.deepbiome_test(log, test_network_info, test_path_info, number_of_fold=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This function provides the evaluation result as a numpy array with a shape of (number of folds, number of evaluation measures)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                  loss binary_accuracy     sensitivity     specificity        gmeasure             auc\n",
      "Mean:           0.6159          0.6920          1.0000          0.0000          0.0000          0.6195\n",
      "Std :           0.0183          0.0216          0.0000          0.0000          0.0000          0.1536\n"
     ]
    }
   ],
   "source": [
    "print('      %s' % ''.join(['%16s'%'loss']+ ['%16s'%s.strip() for s in test_network_info['model_info']['metrics'].split(',')]))\n",
    "print('Mean: %s' % ''.join(['%16.4f'%v for v in np.mean(evaluation, axis=0)]))\n",
    "print('Std : %s' % ''.join(['%16.4f'%v for v in np.std(evaluation, axis=0)]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7. Load the pre-trained network for prediction\n",
    "\n",
    "If you want to predict using the pre-trained model, you can use the `deepbiome_prediction` function. If `number_of_fold` is setted as `k`, the function will predict only with first `k` folds sample's outputs. \n",
    "\n",
    "If `change_weight_for_each_fold` is set as `False`, the function will predict the output of every folds by same weight from the given path. If `change_weight_for_each_fold` is set as `True`, the function will predict the output of by each fold weight.\n",
    "\n",
    "If 'get_y=True', the function will provide a list of tuples (prediction, true output) as a output with the shape of `(n_samples, 2, n_classes)`. If 'get_y=False', the function will provide predictions only. The output will have the shape of `(n_samples, n_classes)`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 7.1 Prediction with fixed weight\n",
    "\n",
    "If we want to predict new data from one pre-trained model, we can use the option below. We fixed the weight `weight_0.h5` for predicting the whole samples from `onefile_x.csv` (without using index file)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "prediction_network_info = {\n",
    "    'architecture_info': {\n",
    "        'batch_normalization': 'False',\n",
    "        'drop_out': '0',\n",
    "        'weight_initial': 'glorot_uniform',\n",
    "        'weight_l1_penalty':'0.',\n",
    "        'weight_decay': 'phylogenetic_tree',\n",
    "    },\n",
    "    'model_info': {\n",
    "        'decay': '0.001',\n",
    "        'loss': 'binary_crossentropy',\n",
    "        'lr': '0.01',\n",
    "        'metrics': 'binary_accuracy, sensitivity, specificity, gmeasure, auc',\n",
    "        'network_class': 'DeepBiomeNetwork',\n",
    "        'normalizer': 'normalize_minmax',\n",
    "        'optimizer': 'adam',\n",
    "        'reader_class': 'MicroBiomeClassificationReader',\n",
    "        'taxa_selection_metrics': 'sensitivity, specificity, gmeasure, accuracy',\n",
    "    },\n",
    "    'test_info': {\n",
    "        'batch_size': 'None'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "prediction_path_info = {\n",
    "    'data_info': {\n",
    "        'data_path': resource_filename('deepbiome', 'tests/data'),\n",
    "        'tree_info_path': resource_filename('deepbiome', 'tests/data/genus48_dic.csv'),\n",
    "        'x_path': 'onefile_x.csv',\n",
    "        'y_path': 'classification_y.csv'\n",
    "    },\n",
    "    'model_info': {\n",
    "        'model_dir': './example_result/',\n",
    "        'weight': 'weight_0.h5'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:434] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:464] -------1 th repeatition prediction start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:482] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Family', 'Order', 'Genus', 'Class', 'Number', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |INFO|deepbiome.py:492] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:190] Prediction start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "1000/1000 [==============================] - 0s 50us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:195] Prediction end with time 0.05299854278564453!\n",
      "[root    |INFO|deepbiome.py:496] Compute time : 0.6992819309234619\n",
      "[root    |INFO|deepbiome.py:497] 1 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:502] Total Computing Ended\n",
      "[root    |INFO|deepbiome.py:503] -----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "prediction = deepbiome.deepbiome_prediction(log, prediction_network_info, prediction_path_info,\n",
    "                                            num_classes = 1, number_of_fold=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 1000, 1)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prediction.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.6933426 ],\n",
       "       [0.69620454],\n",
       "       [0.6863649 ],\n",
       "       [0.67821795],\n",
       "       [0.6962944 ],\n",
       "       [0.687388  ],\n",
       "       [0.68849313],\n",
       "       [0.6856685 ],\n",
       "       [0.6932829 ],\n",
       "       [0.69713783]], dtype=float32)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prediction[0,:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 7.2 Prediction with each fold weight\n",
    "\n",
    "If we want to predict the cross-validation outputs, we can use the option belows.\n",
    "\n",
    "The example below shows how to predict the 5-fold cross-validation outputs. (If we use the leave-one-out-cross-validation (LOOCV) for training, we can predict the LOOCV outputs by same way.)\n",
    "We set `idx_path` for using the index file `onefile_idx.csv` to predict only the test set for each fold."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "prediction_network_info = {\n",
    "    'architecture_info': {\n",
    "        'batch_normalization': 'False',\n",
    "        'drop_out': '0',\n",
    "        'weight_initial': 'glorot_uniform',\n",
    "        'weight_l1_penalty':'0.',\n",
    "        'weight_decay': 'phylogenetic_tree',\n",
    "    },\n",
    "    'model_info': {\n",
    "        'decay': '0.001',\n",
    "        'loss': 'binary_crossentropy',\n",
    "        'lr': '0.01',\n",
    "        'metrics': 'binary_accuracy, sensitivity, specificity, gmeasure, auc',\n",
    "        'network_class': 'DeepBiomeNetwork',\n",
    "        'normalizer': 'normalize_minmax',\n",
    "        'optimizer': 'adam',\n",
    "        'reader_class': 'MicroBiomeClassificationReader',\n",
    "        'taxa_selection_metrics': 'sensitivity, specificity, gmeasure, accuracy',\n",
    "    },\n",
    "    'test_info': {\n",
    "        'batch_size': 'None'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "prediction_path_info = {\n",
    "    'data_info': {\n",
    "        'data_path': resource_filename('deepbiome', 'tests/data'),\n",
    "        'idx_path': resource_filename('deepbiome', 'tests/data/onefile_idx.csv'),\n",
    "        'tree_info_path': resource_filename('deepbiome', 'tests/data/genus48_dic.csv'),\n",
    "        'x_path': 'onefile_x.csv',\n",
    "        'y_path': 'classification_y.csv'\n",
    "    },\n",
    "    'model_info': {\n",
    "        'model_dir': './example_result/',\n",
    "        'weight': 'weight.h5'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To predict the CV outputs from each fold, we set `change_weight_for_each_fold = True`. Also, we set `get_y=True` to get the paired output of each prediction too."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:434] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:464] -------1 th repeatition prediction start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:482] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Family', 'Order', 'Genus', 'Class', 'Number', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |INFO|deepbiome.py:492] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:190] Prediction start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 248us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:195] Prediction end with time 0.053841590881347656!\n",
      "[root    |INFO|deepbiome.py:496] Compute time : 0.6538679599761963\n",
      "[root    |INFO|deepbiome.py:497] 1 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:464] -------2 th repeatition prediction start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:482] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Family', 'Order', 'Genus', 'Class', 'Number', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_2\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |INFO|deepbiome.py:492] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:190] Prediction start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 339us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:195] Prediction end with time 0.07075023651123047!\n",
      "[root    |INFO|deepbiome.py:496] Compute time : 0.7085912227630615\n",
      "[root    |INFO|deepbiome.py:497] 2 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:464] -------3 th repeatition prediction start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:482] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Family', 'Order', 'Genus', 'Class', 'Number', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_3\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |INFO|deepbiome.py:492] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:190] Prediction start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 441us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:195] Prediction end with time 0.09256482124328613!\n",
      "[root    |INFO|deepbiome.py:496] Compute time : 0.7723278999328613\n",
      "[root    |INFO|deepbiome.py:497] 3 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:464] -------4 th repeatition prediction start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:482] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Family', 'Order', 'Genus', 'Class', 'Number', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_4\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |INFO|deepbiome.py:492] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:190] Prediction start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 567us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:195] Prediction end with time 0.11684870719909668!\n",
      "[root    |INFO|deepbiome.py:496] Compute time : 1.122920274734497\n",
      "[root    |INFO|deepbiome.py:497] 4 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:464] -------5 th repeatition prediction start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:482] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Family', 'Order', 'Genus', 'Class', 'Number', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_5\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |INFO|deepbiome.py:492] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:190] Prediction start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 539us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:195] Prediction end with time 0.1113278865814209!\n",
      "[root    |INFO|deepbiome.py:496] Compute time : 0.874549150466919\n",
      "[root    |INFO|deepbiome.py:497] 5 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:502] Total Computing Ended\n",
      "[root    |INFO|deepbiome.py:503] -----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "prediction = deepbiome.deepbiome_prediction(log, prediction_network_info, prediction_path_info,\n",
    "                                            num_classes = 1, number_of_fold=None, \n",
    "                                            change_weight_for_each_fold = True, \n",
    "                                            get_y=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We gathered the outputs from each fold. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "prediction = np.vstack(prediction)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since we set the option `get_y=True`, the output has the shape of `(n_samples, 2, n_classes)`. With this options, we can get the CV predictions and the true output of each predictions.\n",
    "\n",
    "Now, we can calculate the CV performance by the CV predictions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|<ipython-input-39-edc88a58497e>:4] Shape of the predict function output: (1000, 2, 1)\n",
      "[root    |INFO|<ipython-input-39-edc88a58497e>:5] Shape of the prediction: (1000, 1)\n",
      "[root    |INFO|<ipython-input-39-edc88a58497e>:6] Shape of the true_output for each prediction: (1000, 1)\n"
     ]
    }
   ],
   "source": [
    "predict_output = prediction[:,0]\n",
    "true_output = prediction[:,1]\n",
    "\n",
    "log.info('Shape of the predict function output: %s' % str(prediction.shape))\n",
    "log.info('Shape of the prediction: %s' % str(predict_output.shape))\n",
    "log.info('Shape of the true_output for each prediction: %s' % str(true_output.shape))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|<ipython-input-40-ecaee2413087>:1] CV accuracy:  0.692\n"
     ]
    }
   ],
   "source": [
    "log.info('CV accuracy: %6.3f' % np.mean((predict_output >= 0.5) ==  true_output))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 8. Load trained weight matrix\n",
    "\n",
    "The `deepbiome_get_trained_weight` function convert the trained weight `*.h5` saved from the `deepbiome_train` to a list of pandas dataframe.\n",
    "In this exampe, the list has numpy array of weights from 6 layers. (`[genus to family, family to order, order to Class, class to phylum, phylum to output]`)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Family', 'Order', 'Genus', 'Class', 'Number', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|<ipython-input-41-9505ee8dcaa8>:3] 5\n"
     ]
    }
   ],
   "source": [
    "weight_path = '%s/%s' % (path_info['model_info']['model_dir'], 'weight_0.h5')\n",
    "trained_weight_list = deepbiome.deepbiome_get_trained_weight(log, network_info, path_info, num_classes=1, weight_path=weight_path)\n",
    "log.info(len(trained_weight_list))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First weight between the `genus` and `family` layers has the shape of `(number of genus = 48, number of family = 40)`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|<ipython-input-42-c71fa46ab178>:1] (48, 40)\n"
     ]
    }
   ],
   "source": [
    "log.info(trained_weight_list[0].shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Streptococcaceae</th>\n",
       "      <th>Cellulomonadaceae</th>\n",
       "      <th>Veillonellaceae</th>\n",
       "      <th>Actinomycetaceae</th>\n",
       "      <th>Flavobacteriaceae</th>\n",
       "      <th>Prevotellaceae</th>\n",
       "      <th>Porphyromonadaceae</th>\n",
       "      <th>Clostridiales_Incertae_Sedis_XI</th>\n",
       "      <th>Fusobacteriaceae</th>\n",
       "      <th>Propionibacteriaceae</th>\n",
       "      <th>...</th>\n",
       "      <th>Methylobacteriaceae</th>\n",
       "      <th>OD1_genera_incertae_sedis</th>\n",
       "      <th>Microbacteriaceae</th>\n",
       "      <th>Sphingomonadaceae</th>\n",
       "      <th>Bacteroidaceae</th>\n",
       "      <th>Bdellovibrionaceae</th>\n",
       "      <th>Chloroplast</th>\n",
       "      <th>Rhodobacteraceae</th>\n",
       "      <th>Ruminococcaceae</th>\n",
       "      <th>Pseudonocardiaceae</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Streptococcus</th>\n",
       "      <td>-0.003667</td>\n",
       "      <td>-0.001768</td>\n",
       "      <td>0.001325</td>\n",
       "      <td>0.001456</td>\n",
       "      <td>0.002184</td>\n",
       "      <td>-0.000491</td>\n",
       "      <td>0.000875</td>\n",
       "      <td>0.000632</td>\n",
       "      <td>0.003054</td>\n",
       "      <td>0.000323</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000533</td>\n",
       "      <td>0.001253</td>\n",
       "      <td>-0.000205</td>\n",
       "      <td>0.007366</td>\n",
       "      <td>-0.000193</td>\n",
       "      <td>0.001418</td>\n",
       "      <td>-0.001948</td>\n",
       "      <td>0.001318</td>\n",
       "      <td>-0.001273</td>\n",
       "      <td>-0.001266</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tropheryma</th>\n",
       "      <td>0.001543</td>\n",
       "      <td>-0.215058</td>\n",
       "      <td>-0.003214</td>\n",
       "      <td>-0.009654</td>\n",
       "      <td>0.000660</td>\n",
       "      <td>0.002151</td>\n",
       "      <td>-0.001632</td>\n",
       "      <td>-0.000849</td>\n",
       "      <td>0.002393</td>\n",
       "      <td>0.001828</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001780</td>\n",
       "      <td>0.002741</td>\n",
       "      <td>-0.006440</td>\n",
       "      <td>0.017065</td>\n",
       "      <td>-0.001962</td>\n",
       "      <td>-0.000885</td>\n",
       "      <td>0.003327</td>\n",
       "      <td>0.013439</td>\n",
       "      <td>-0.001049</td>\n",
       "      <td>0.002226</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Veillonella</th>\n",
       "      <td>-0.000501</td>\n",
       "      <td>0.000705</td>\n",
       "      <td>-0.301859</td>\n",
       "      <td>-0.001341</td>\n",
       "      <td>0.000646</td>\n",
       "      <td>-0.001976</td>\n",
       "      <td>-0.000230</td>\n",
       "      <td>-0.002423</td>\n",
       "      <td>-0.001197</td>\n",
       "      <td>-0.000159</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002527</td>\n",
       "      <td>-0.000441</td>\n",
       "      <td>-0.000903</td>\n",
       "      <td>0.005830</td>\n",
       "      <td>-0.001262</td>\n",
       "      <td>0.000430</td>\n",
       "      <td>0.000859</td>\n",
       "      <td>0.000942</td>\n",
       "      <td>-0.002472</td>\n",
       "      <td>-0.001248</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Actinomyces</th>\n",
       "      <td>-0.002598</td>\n",
       "      <td>0.001388</td>\n",
       "      <td>-0.003404</td>\n",
       "      <td>-0.470030</td>\n",
       "      <td>0.000454</td>\n",
       "      <td>0.000797</td>\n",
       "      <td>0.002433</td>\n",
       "      <td>-0.001490</td>\n",
       "      <td>0.003946</td>\n",
       "      <td>0.001098</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002029</td>\n",
       "      <td>0.001986</td>\n",
       "      <td>-0.001488</td>\n",
       "      <td>0.010501</td>\n",
       "      <td>0.000455</td>\n",
       "      <td>0.002060</td>\n",
       "      <td>-0.001577</td>\n",
       "      <td>0.004037</td>\n",
       "      <td>0.000643</td>\n",
       "      <td>-0.000777</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Flavobacterium</th>\n",
       "      <td>-0.000254</td>\n",
       "      <td>0.000674</td>\n",
       "      <td>-0.001270</td>\n",
       "      <td>-0.000883</td>\n",
       "      <td>0.248872</td>\n",
       "      <td>0.001836</td>\n",
       "      <td>-0.001321</td>\n",
       "      <td>0.001363</td>\n",
       "      <td>0.001952</td>\n",
       "      <td>-0.000821</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001738</td>\n",
       "      <td>-0.000339</td>\n",
       "      <td>-0.000083</td>\n",
       "      <td>-0.002404</td>\n",
       "      <td>0.001133</td>\n",
       "      <td>-0.002247</td>\n",
       "      <td>0.000509</td>\n",
       "      <td>-0.002485</td>\n",
       "      <td>0.000093</td>\n",
       "      <td>0.000566</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Prevotella</th>\n",
       "      <td>-0.002100</td>\n",
       "      <td>-0.001773</td>\n",
       "      <td>-0.000348</td>\n",
       "      <td>0.002523</td>\n",
       "      <td>0.002299</td>\n",
       "      <td>-0.291037</td>\n",
       "      <td>-0.000283</td>\n",
       "      <td>0.001727</td>\n",
       "      <td>0.002205</td>\n",
       "      <td>0.000612</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000755</td>\n",
       "      <td>-0.001764</td>\n",
       "      <td>-0.000812</td>\n",
       "      <td>0.003282</td>\n",
       "      <td>0.001156</td>\n",
       "      <td>-0.001505</td>\n",
       "      <td>0.002591</td>\n",
       "      <td>0.002897</td>\n",
       "      <td>0.000544</td>\n",
       "      <td>-0.001428</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Porphyromonas</th>\n",
       "      <td>0.001183</td>\n",
       "      <td>-0.000552</td>\n",
       "      <td>-0.000101</td>\n",
       "      <td>0.007093</td>\n",
       "      <td>-0.001207</td>\n",
       "      <td>0.000810</td>\n",
       "      <td>-0.182440</td>\n",
       "      <td>-0.001066</td>\n",
       "      <td>-0.002806</td>\n",
       "      <td>0.001143</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000700</td>\n",
       "      <td>0.000202</td>\n",
       "      <td>0.006241</td>\n",
       "      <td>-0.005881</td>\n",
       "      <td>-0.000234</td>\n",
       "      <td>-0.000586</td>\n",
       "      <td>-0.002731</td>\n",
       "      <td>-0.002999</td>\n",
       "      <td>0.001974</td>\n",
       "      <td>-0.002288</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Parvimonas</th>\n",
       "      <td>0.001063</td>\n",
       "      <td>0.000132</td>\n",
       "      <td>0.001461</td>\n",
       "      <td>-0.001005</td>\n",
       "      <td>-0.002596</td>\n",
       "      <td>-0.002349</td>\n",
       "      <td>-0.002332</td>\n",
       "      <td>-0.211951</td>\n",
       "      <td>0.000486</td>\n",
       "      <td>-0.001970</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.002204</td>\n",
       "      <td>-0.002101</td>\n",
       "      <td>0.000605</td>\n",
       "      <td>-0.000478</td>\n",
       "      <td>0.001908</td>\n",
       "      <td>0.002160</td>\n",
       "      <td>0.001100</td>\n",
       "      <td>0.001943</td>\n",
       "      <td>0.001563</td>\n",
       "      <td>-0.000711</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fusobacterium</th>\n",
       "      <td>0.002556</td>\n",
       "      <td>0.001624</td>\n",
       "      <td>-0.002109</td>\n",
       "      <td>-0.001389</td>\n",
       "      <td>0.002455</td>\n",
       "      <td>-0.002054</td>\n",
       "      <td>0.000834</td>\n",
       "      <td>-0.000974</td>\n",
       "      <td>0.403100</td>\n",
       "      <td>-0.002410</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000543</td>\n",
       "      <td>-0.002207</td>\n",
       "      <td>-0.001116</td>\n",
       "      <td>0.000299</td>\n",
       "      <td>0.001517</td>\n",
       "      <td>0.002564</td>\n",
       "      <td>0.001151</td>\n",
       "      <td>-0.000213</td>\n",
       "      <td>0.002357</td>\n",
       "      <td>0.000610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Propionibacterium</th>\n",
       "      <td>0.001062</td>\n",
       "      <td>0.001408</td>\n",
       "      <td>0.006125</td>\n",
       "      <td>0.009174</td>\n",
       "      <td>0.000466</td>\n",
       "      <td>-0.000532</td>\n",
       "      <td>0.001045</td>\n",
       "      <td>0.000174</td>\n",
       "      <td>-0.006831</td>\n",
       "      <td>-0.202478</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.003536</td>\n",
       "      <td>-0.001617</td>\n",
       "      <td>0.004355</td>\n",
       "      <td>-0.012915</td>\n",
       "      <td>0.002098</td>\n",
       "      <td>-0.002340</td>\n",
       "      <td>0.000667</td>\n",
       "      <td>-0.012511</td>\n",
       "      <td>0.001475</td>\n",
       "      <td>0.000798</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gemella</th>\n",
       "      <td>0.000851</td>\n",
       "      <td>0.000349</td>\n",
       "      <td>-0.001837</td>\n",
       "      <td>0.003390</td>\n",
       "      <td>0.001864</td>\n",
       "      <td>-0.000223</td>\n",
       "      <td>-0.000969</td>\n",
       "      <td>-0.001354</td>\n",
       "      <td>0.001830</td>\n",
       "      <td>0.001875</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000320</td>\n",
       "      <td>-0.000295</td>\n",
       "      <td>0.000256</td>\n",
       "      <td>-0.000582</td>\n",
       "      <td>-0.000556</td>\n",
       "      <td>-0.000576</td>\n",
       "      <td>0.002486</td>\n",
       "      <td>-0.002279</td>\n",
       "      <td>0.002339</td>\n",
       "      <td>0.001868</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rothia</th>\n",
       "      <td>-0.000718</td>\n",
       "      <td>-0.001804</td>\n",
       "      <td>0.007131</td>\n",
       "      <td>0.012854</td>\n",
       "      <td>0.001873</td>\n",
       "      <td>-0.001235</td>\n",
       "      <td>-0.002411</td>\n",
       "      <td>0.000001</td>\n",
       "      <td>-0.011564</td>\n",
       "      <td>-0.002441</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.002963</td>\n",
       "      <td>-0.003612</td>\n",
       "      <td>0.010823</td>\n",
       "      <td>-0.020459</td>\n",
       "      <td>0.001731</td>\n",
       "      <td>0.000060</td>\n",
       "      <td>-0.005276</td>\n",
       "      <td>-0.017915</td>\n",
       "      <td>0.000537</td>\n",
       "      <td>0.002532</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Granulicatella</th>\n",
       "      <td>0.001945</td>\n",
       "      <td>-0.001993</td>\n",
       "      <td>0.001048</td>\n",
       "      <td>-0.001621</td>\n",
       "      <td>0.000068</td>\n",
       "      <td>-0.002181</td>\n",
       "      <td>-0.001499</td>\n",
       "      <td>0.001430</td>\n",
       "      <td>-0.001424</td>\n",
       "      <td>0.001160</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000683</td>\n",
       "      <td>-0.002201</td>\n",
       "      <td>0.001459</td>\n",
       "      <td>0.002804</td>\n",
       "      <td>-0.002198</td>\n",
       "      <td>0.002149</td>\n",
       "      <td>0.002590</td>\n",
       "      <td>0.001811</td>\n",
       "      <td>0.001633</td>\n",
       "      <td>0.002068</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Neisseria</th>\n",
       "      <td>0.001420</td>\n",
       "      <td>0.002299</td>\n",
       "      <td>-0.001257</td>\n",
       "      <td>0.000910</td>\n",
       "      <td>0.002267</td>\n",
       "      <td>0.000811</td>\n",
       "      <td>-0.001824</td>\n",
       "      <td>-0.001296</td>\n",
       "      <td>-0.002785</td>\n",
       "      <td>0.002015</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.002191</td>\n",
       "      <td>0.001516</td>\n",
       "      <td>0.000122</td>\n",
       "      <td>-0.006361</td>\n",
       "      <td>0.000842</td>\n",
       "      <td>-0.002256</td>\n",
       "      <td>0.002124</td>\n",
       "      <td>-0.006260</td>\n",
       "      <td>-0.001157</td>\n",
       "      <td>-0.001640</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Lactobacillus</th>\n",
       "      <td>0.002317</td>\n",
       "      <td>0.000506</td>\n",
       "      <td>0.000394</td>\n",
       "      <td>0.001745</td>\n",
       "      <td>-0.000720</td>\n",
       "      <td>-0.000336</td>\n",
       "      <td>0.001486</td>\n",
       "      <td>0.000399</td>\n",
       "      <td>0.000216</td>\n",
       "      <td>0.000103</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000212</td>\n",
       "      <td>-0.000741</td>\n",
       "      <td>0.000487</td>\n",
       "      <td>0.001565</td>\n",
       "      <td>-0.002183</td>\n",
       "      <td>-0.002227</td>\n",
       "      <td>0.000087</td>\n",
       "      <td>0.001855</td>\n",
       "      <td>0.000275</td>\n",
       "      <td>-0.001568</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Megasphaera</th>\n",
       "      <td>-0.001450</td>\n",
       "      <td>0.000579</td>\n",
       "      <td>1.274933</td>\n",
       "      <td>0.004887</td>\n",
       "      <td>0.002332</td>\n",
       "      <td>0.000168</td>\n",
       "      <td>0.002292</td>\n",
       "      <td>-0.000884</td>\n",
       "      <td>-0.001364</td>\n",
       "      <td>0.001167</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.002624</td>\n",
       "      <td>0.000742</td>\n",
       "      <td>0.003404</td>\n",
       "      <td>-0.005208</td>\n",
       "      <td>-0.000405</td>\n",
       "      <td>-0.000070</td>\n",
       "      <td>0.000990</td>\n",
       "      <td>-0.006566</td>\n",
       "      <td>0.001863</td>\n",
       "      <td>0.002413</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Catonella</th>\n",
       "      <td>0.002200</td>\n",
       "      <td>0.001912</td>\n",
       "      <td>-0.002417</td>\n",
       "      <td>-0.000122</td>\n",
       "      <td>-0.002348</td>\n",
       "      <td>0.000125</td>\n",
       "      <td>0.000148</td>\n",
       "      <td>-0.000977</td>\n",
       "      <td>-0.000886</td>\n",
       "      <td>0.000822</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000957</td>\n",
       "      <td>0.000733</td>\n",
       "      <td>-0.002617</td>\n",
       "      <td>0.002023</td>\n",
       "      <td>-0.001188</td>\n",
       "      <td>0.001653</td>\n",
       "      <td>0.001797</td>\n",
       "      <td>0.004287</td>\n",
       "      <td>0.002224</td>\n",
       "      <td>0.002154</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Atopobium</th>\n",
       "      <td>0.001426</td>\n",
       "      <td>-0.000707</td>\n",
       "      <td>0.001261</td>\n",
       "      <td>0.005579</td>\n",
       "      <td>0.000102</td>\n",
       "      <td>0.002607</td>\n",
       "      <td>-0.001018</td>\n",
       "      <td>-0.002461</td>\n",
       "      <td>-0.003837</td>\n",
       "      <td>-0.000338</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000746</td>\n",
       "      <td>0.001287</td>\n",
       "      <td>0.003769</td>\n",
       "      <td>-0.003421</td>\n",
       "      <td>0.000749</td>\n",
       "      <td>0.001569</td>\n",
       "      <td>-0.001938</td>\n",
       "      <td>-0.003487</td>\n",
       "      <td>0.001636</td>\n",
       "      <td>0.002148</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Campylobacter</th>\n",
       "      <td>-0.000369</td>\n",
       "      <td>-0.000073</td>\n",
       "      <td>0.002607</td>\n",
       "      <td>0.003523</td>\n",
       "      <td>0.001730</td>\n",
       "      <td>0.000217</td>\n",
       "      <td>0.001451</td>\n",
       "      <td>-0.001699</td>\n",
       "      <td>-0.002781</td>\n",
       "      <td>-0.000241</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000825</td>\n",
       "      <td>-0.002309</td>\n",
       "      <td>0.004287</td>\n",
       "      <td>-0.003301</td>\n",
       "      <td>0.002607</td>\n",
       "      <td>0.000198</td>\n",
       "      <td>-0.001609</td>\n",
       "      <td>-0.004119</td>\n",
       "      <td>0.001517</td>\n",
       "      <td>-0.002305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Capnocytophaga</th>\n",
       "      <td>0.001024</td>\n",
       "      <td>-0.000470</td>\n",
       "      <td>0.000436</td>\n",
       "      <td>0.000886</td>\n",
       "      <td>-0.311748</td>\n",
       "      <td>0.000092</td>\n",
       "      <td>-0.001074</td>\n",
       "      <td>-0.001408</td>\n",
       "      <td>0.001082</td>\n",
       "      <td>0.000902</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000088</td>\n",
       "      <td>0.001924</td>\n",
       "      <td>-0.002567</td>\n",
       "      <td>0.004491</td>\n",
       "      <td>-0.002558</td>\n",
       "      <td>-0.001511</td>\n",
       "      <td>0.002487</td>\n",
       "      <td>0.000496</td>\n",
       "      <td>-0.000756</td>\n",
       "      <td>0.000273</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Solobacterium</th>\n",
       "      <td>-0.000312</td>\n",
       "      <td>-0.002223</td>\n",
       "      <td>0.000356</td>\n",
       "      <td>-0.000599</td>\n",
       "      <td>-0.001665</td>\n",
       "      <td>0.000560</td>\n",
       "      <td>0.000099</td>\n",
       "      <td>-0.001117</td>\n",
       "      <td>-0.000944</td>\n",
       "      <td>0.000285</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000015</td>\n",
       "      <td>0.001728</td>\n",
       "      <td>0.001280</td>\n",
       "      <td>0.000561</td>\n",
       "      <td>-0.002515</td>\n",
       "      <td>0.002165</td>\n",
       "      <td>0.000163</td>\n",
       "      <td>0.000038</td>\n",
       "      <td>-0.002404</td>\n",
       "      <td>0.001561</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Moryella</th>\n",
       "      <td>0.000905</td>\n",
       "      <td>-0.001616</td>\n",
       "      <td>-0.001648</td>\n",
       "      <td>-0.009333</td>\n",
       "      <td>0.001709</td>\n",
       "      <td>-0.001326</td>\n",
       "      <td>-0.000380</td>\n",
       "      <td>-0.000956</td>\n",
       "      <td>0.002556</td>\n",
       "      <td>-0.001221</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001740</td>\n",
       "      <td>0.003674</td>\n",
       "      <td>-0.006102</td>\n",
       "      <td>0.012356</td>\n",
       "      <td>0.002207</td>\n",
       "      <td>0.000918</td>\n",
       "      <td>0.001252</td>\n",
       "      <td>0.013576</td>\n",
       "      <td>-0.001710</td>\n",
       "      <td>-0.002257</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TM7_genera_incertae_sedis</th>\n",
       "      <td>-0.001873</td>\n",
       "      <td>0.002016</td>\n",
       "      <td>0.004185</td>\n",
       "      <td>0.006610</td>\n",
       "      <td>0.000767</td>\n",
       "      <td>-0.001365</td>\n",
       "      <td>-0.001074</td>\n",
       "      <td>-0.002606</td>\n",
       "      <td>-0.003105</td>\n",
       "      <td>-0.002307</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001919</td>\n",
       "      <td>-0.001922</td>\n",
       "      <td>0.001897</td>\n",
       "      <td>-0.004352</td>\n",
       "      <td>0.000528</td>\n",
       "      <td>-0.000061</td>\n",
       "      <td>0.000032</td>\n",
       "      <td>-0.003326</td>\n",
       "      <td>-0.002285</td>\n",
       "      <td>-0.001550</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Staphylococcus</th>\n",
       "      <td>-0.001005</td>\n",
       "      <td>0.001548</td>\n",
       "      <td>-0.002364</td>\n",
       "      <td>0.002457</td>\n",
       "      <td>-0.001743</td>\n",
       "      <td>0.001082</td>\n",
       "      <td>-0.000404</td>\n",
       "      <td>0.002017</td>\n",
       "      <td>0.001085</td>\n",
       "      <td>-0.000786</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002215</td>\n",
       "      <td>-0.000946</td>\n",
       "      <td>0.001797</td>\n",
       "      <td>0.002703</td>\n",
       "      <td>-0.000816</td>\n",
       "      <td>0.001314</td>\n",
       "      <td>-0.000556</td>\n",
       "      <td>-0.001316</td>\n",
       "      <td>-0.002434</td>\n",
       "      <td>0.000845</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Filifactor</th>\n",
       "      <td>-0.001541</td>\n",
       "      <td>0.000467</td>\n",
       "      <td>-0.002577</td>\n",
       "      <td>-0.003883</td>\n",
       "      <td>-0.000301</td>\n",
       "      <td>-0.000481</td>\n",
       "      <td>0.000992</td>\n",
       "      <td>-0.002289</td>\n",
       "      <td>0.004504</td>\n",
       "      <td>0.002600</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000746</td>\n",
       "      <td>0.000191</td>\n",
       "      <td>-0.002674</td>\n",
       "      <td>0.012975</td>\n",
       "      <td>-0.000882</td>\n",
       "      <td>-0.001935</td>\n",
       "      <td>-0.000473</td>\n",
       "      <td>0.004940</td>\n",
       "      <td>0.001912</td>\n",
       "      <td>0.001359</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Oribacterium</th>\n",
       "      <td>0.001043</td>\n",
       "      <td>0.002489</td>\n",
       "      <td>-0.006826</td>\n",
       "      <td>-0.012656</td>\n",
       "      <td>0.002041</td>\n",
       "      <td>0.002292</td>\n",
       "      <td>-0.000677</td>\n",
       "      <td>-0.000312</td>\n",
       "      <td>0.003692</td>\n",
       "      <td>-0.001648</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000857</td>\n",
       "      <td>0.001140</td>\n",
       "      <td>-0.008903</td>\n",
       "      <td>0.016796</td>\n",
       "      <td>0.000350</td>\n",
       "      <td>0.000421</td>\n",
       "      <td>0.001273</td>\n",
       "      <td>0.014419</td>\n",
       "      <td>0.000049</td>\n",
       "      <td>0.001398</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Burkholderia</th>\n",
       "      <td>-0.000385</td>\n",
       "      <td>0.001751</td>\n",
       "      <td>-0.000910</td>\n",
       "      <td>0.004189</td>\n",
       "      <td>0.000248</td>\n",
       "      <td>0.002326</td>\n",
       "      <td>0.002334</td>\n",
       "      <td>0.001666</td>\n",
       "      <td>-0.002761</td>\n",
       "      <td>-0.000166</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000985</td>\n",
       "      <td>0.001894</td>\n",
       "      <td>0.001101</td>\n",
       "      <td>-0.003753</td>\n",
       "      <td>-0.002010</td>\n",
       "      <td>-0.001267</td>\n",
       "      <td>0.000420</td>\n",
       "      <td>-0.001447</td>\n",
       "      <td>0.000504</td>\n",
       "      <td>-0.001597</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sneathia</th>\n",
       "      <td>0.000705</td>\n",
       "      <td>0.001533</td>\n",
       "      <td>0.002113</td>\n",
       "      <td>0.002512</td>\n",
       "      <td>-0.000877</td>\n",
       "      <td>-0.000761</td>\n",
       "      <td>-0.000184</td>\n",
       "      <td>0.002241</td>\n",
       "      <td>-0.001438</td>\n",
       "      <td>0.001037</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.002540</td>\n",
       "      <td>0.000247</td>\n",
       "      <td>0.000989</td>\n",
       "      <td>-0.004299</td>\n",
       "      <td>0.001530</td>\n",
       "      <td>-0.002413</td>\n",
       "      <td>0.002073</td>\n",
       "      <td>-0.002216</td>\n",
       "      <td>-0.000677</td>\n",
       "      <td>-0.001062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Treponema</th>\n",
       "      <td>-0.002398</td>\n",
       "      <td>-0.002181</td>\n",
       "      <td>-0.001137</td>\n",
       "      <td>-0.000737</td>\n",
       "      <td>-0.002286</td>\n",
       "      <td>0.000526</td>\n",
       "      <td>0.000733</td>\n",
       "      <td>0.001762</td>\n",
       "      <td>0.001565</td>\n",
       "      <td>-0.002374</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001820</td>\n",
       "      <td>0.000009</td>\n",
       "      <td>-0.000681</td>\n",
       "      <td>0.001300</td>\n",
       "      <td>0.001049</td>\n",
       "      <td>0.002251</td>\n",
       "      <td>-0.002069</td>\n",
       "      <td>0.002419</td>\n",
       "      <td>0.001925</td>\n",
       "      <td>-0.001610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Moraxella</th>\n",
       "      <td>0.000693</td>\n",
       "      <td>-0.001416</td>\n",
       "      <td>0.000981</td>\n",
       "      <td>0.003702</td>\n",
       "      <td>-0.001946</td>\n",
       "      <td>0.001380</td>\n",
       "      <td>-0.000326</td>\n",
       "      <td>0.001073</td>\n",
       "      <td>-0.000903</td>\n",
       "      <td>0.000179</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000094</td>\n",
       "      <td>0.000743</td>\n",
       "      <td>0.001261</td>\n",
       "      <td>-0.002102</td>\n",
       "      <td>0.001806</td>\n",
       "      <td>0.000411</td>\n",
       "      <td>0.001095</td>\n",
       "      <td>-0.000056</td>\n",
       "      <td>0.001501</td>\n",
       "      <td>0.000625</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Haemophilus</th>\n",
       "      <td>0.001993</td>\n",
       "      <td>0.000190</td>\n",
       "      <td>-0.001882</td>\n",
       "      <td>-0.002036</td>\n",
       "      <td>-0.000644</td>\n",
       "      <td>0.002075</td>\n",
       "      <td>0.002545</td>\n",
       "      <td>-0.001540</td>\n",
       "      <td>-0.000482</td>\n",
       "      <td>0.001377</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002723</td>\n",
       "      <td>-0.001120</td>\n",
       "      <td>-0.001576</td>\n",
       "      <td>0.003136</td>\n",
       "      <td>-0.000890</td>\n",
       "      <td>0.001529</td>\n",
       "      <td>0.002580</td>\n",
       "      <td>0.001274</td>\n",
       "      <td>-0.001972</td>\n",
       "      <td>0.001275</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Selenomonas</th>\n",
       "      <td>-0.001843</td>\n",
       "      <td>-0.000063</td>\n",
       "      <td>-0.932646</td>\n",
       "      <td>-0.004688</td>\n",
       "      <td>0.001603</td>\n",
       "      <td>-0.000935</td>\n",
       "      <td>0.000750</td>\n",
       "      <td>0.001238</td>\n",
       "      <td>0.000677</td>\n",
       "      <td>0.000368</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001383</td>\n",
       "      <td>0.000940</td>\n",
       "      <td>-0.002164</td>\n",
       "      <td>0.009030</td>\n",
       "      <td>-0.002157</td>\n",
       "      <td>-0.002349</td>\n",
       "      <td>-0.001808</td>\n",
       "      <td>0.008690</td>\n",
       "      <td>-0.001729</td>\n",
       "      <td>0.002505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Corynebacterium</th>\n",
       "      <td>0.002487</td>\n",
       "      <td>0.002087</td>\n",
       "      <td>0.000940</td>\n",
       "      <td>0.004033</td>\n",
       "      <td>0.002521</td>\n",
       "      <td>0.000091</td>\n",
       "      <td>-0.001529</td>\n",
       "      <td>-0.000698</td>\n",
       "      <td>-0.001985</td>\n",
       "      <td>-0.002082</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002194</td>\n",
       "      <td>0.000229</td>\n",
       "      <td>0.001778</td>\n",
       "      <td>-0.005348</td>\n",
       "      <td>0.001697</td>\n",
       "      <td>-0.002415</td>\n",
       "      <td>-0.002523</td>\n",
       "      <td>-0.003339</td>\n",
       "      <td>-0.000417</td>\n",
       "      <td>-0.000505</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rhizobium</th>\n",
       "      <td>-0.002075</td>\n",
       "      <td>0.002216</td>\n",
       "      <td>0.002120</td>\n",
       "      <td>0.001473</td>\n",
       "      <td>-0.001636</td>\n",
       "      <td>-0.002552</td>\n",
       "      <td>-0.001815</td>\n",
       "      <td>0.001884</td>\n",
       "      <td>0.000744</td>\n",
       "      <td>0.001987</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001139</td>\n",
       "      <td>-0.002195</td>\n",
       "      <td>-0.001826</td>\n",
       "      <td>-0.002247</td>\n",
       "      <td>0.002492</td>\n",
       "      <td>-0.000857</td>\n",
       "      <td>0.001400</td>\n",
       "      <td>-0.000779</td>\n",
       "      <td>-0.001020</td>\n",
       "      <td>-0.000759</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bradyrhizobium</th>\n",
       "      <td>-0.001047</td>\n",
       "      <td>-0.001854</td>\n",
       "      <td>0.002135</td>\n",
       "      <td>0.005654</td>\n",
       "      <td>-0.000250</td>\n",
       "      <td>0.002446</td>\n",
       "      <td>0.001483</td>\n",
       "      <td>0.002214</td>\n",
       "      <td>-0.002203</td>\n",
       "      <td>0.000916</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001739</td>\n",
       "      <td>-0.000007</td>\n",
       "      <td>0.002960</td>\n",
       "      <td>-0.004566</td>\n",
       "      <td>0.001036</td>\n",
       "      <td>0.001994</td>\n",
       "      <td>-0.002269</td>\n",
       "      <td>-0.004326</td>\n",
       "      <td>-0.000472</td>\n",
       "      <td>-0.001178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Methylobacterium</th>\n",
       "      <td>-0.001792</td>\n",
       "      <td>0.001270</td>\n",
       "      <td>0.000696</td>\n",
       "      <td>0.002373</td>\n",
       "      <td>-0.002335</td>\n",
       "      <td>0.001607</td>\n",
       "      <td>-0.002408</td>\n",
       "      <td>0.000892</td>\n",
       "      <td>0.000055</td>\n",
       "      <td>-0.002010</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.170789</td>\n",
       "      <td>0.001010</td>\n",
       "      <td>0.001024</td>\n",
       "      <td>-0.005581</td>\n",
       "      <td>0.000243</td>\n",
       "      <td>-0.000250</td>\n",
       "      <td>0.002082</td>\n",
       "      <td>-0.002095</td>\n",
       "      <td>-0.000278</td>\n",
       "      <td>0.002363</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OD1_genera_incertae_sedis</th>\n",
       "      <td>0.000594</td>\n",
       "      <td>0.000270</td>\n",
       "      <td>-0.000681</td>\n",
       "      <td>0.001792</td>\n",
       "      <td>-0.001029</td>\n",
       "      <td>0.000918</td>\n",
       "      <td>0.000271</td>\n",
       "      <td>0.000621</td>\n",
       "      <td>-0.001977</td>\n",
       "      <td>0.002466</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000354</td>\n",
       "      <td>0.615501</td>\n",
       "      <td>-0.001473</td>\n",
       "      <td>0.004945</td>\n",
       "      <td>-0.001660</td>\n",
       "      <td>0.001812</td>\n",
       "      <td>0.001356</td>\n",
       "      <td>0.003495</td>\n",
       "      <td>-0.001749</td>\n",
       "      <td>0.002503</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Finegoldia</th>\n",
       "      <td>-0.001860</td>\n",
       "      <td>-0.001983</td>\n",
       "      <td>0.000693</td>\n",
       "      <td>-0.001184</td>\n",
       "      <td>-0.000154</td>\n",
       "      <td>0.001458</td>\n",
       "      <td>0.001278</td>\n",
       "      <td>-0.186434</td>\n",
       "      <td>-0.000168</td>\n",
       "      <td>-0.002268</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000189</td>\n",
       "      <td>-0.001873</td>\n",
       "      <td>0.001756</td>\n",
       "      <td>0.000669</td>\n",
       "      <td>0.001200</td>\n",
       "      <td>0.000671</td>\n",
       "      <td>0.002021</td>\n",
       "      <td>0.000644</td>\n",
       "      <td>0.002357</td>\n",
       "      <td>-0.001849</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Microbacterium</th>\n",
       "      <td>-0.002103</td>\n",
       "      <td>0.001940</td>\n",
       "      <td>0.003438</td>\n",
       "      <td>0.003818</td>\n",
       "      <td>0.002280</td>\n",
       "      <td>0.002430</td>\n",
       "      <td>-0.000255</td>\n",
       "      <td>-0.001584</td>\n",
       "      <td>0.000877</td>\n",
       "      <td>0.000671</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000253</td>\n",
       "      <td>-0.000251</td>\n",
       "      <td>0.445275</td>\n",
       "      <td>-0.007054</td>\n",
       "      <td>-0.001231</td>\n",
       "      <td>0.001022</td>\n",
       "      <td>0.000124</td>\n",
       "      <td>-0.005342</td>\n",
       "      <td>0.001362</td>\n",
       "      <td>0.000117</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sphingomonas</th>\n",
       "      <td>-0.001260</td>\n",
       "      <td>-0.001982</td>\n",
       "      <td>0.001769</td>\n",
       "      <td>0.002268</td>\n",
       "      <td>-0.001826</td>\n",
       "      <td>-0.001215</td>\n",
       "      <td>-0.002270</td>\n",
       "      <td>-0.000616</td>\n",
       "      <td>-0.002708</td>\n",
       "      <td>0.001615</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.002120</td>\n",
       "      <td>-0.000233</td>\n",
       "      <td>0.003041</td>\n",
       "      <td>-0.370119</td>\n",
       "      <td>0.001631</td>\n",
       "      <td>0.001261</td>\n",
       "      <td>-0.001623</td>\n",
       "      <td>-0.002168</td>\n",
       "      <td>-0.002287</td>\n",
       "      <td>-0.001351</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chryseobacterium</th>\n",
       "      <td>-0.002398</td>\n",
       "      <td>0.001513</td>\n",
       "      <td>0.001135</td>\n",
       "      <td>0.002571</td>\n",
       "      <td>0.345667</td>\n",
       "      <td>0.000835</td>\n",
       "      <td>-0.001855</td>\n",
       "      <td>-0.000550</td>\n",
       "      <td>0.000571</td>\n",
       "      <td>-0.002285</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002118</td>\n",
       "      <td>-0.000504</td>\n",
       "      <td>0.000246</td>\n",
       "      <td>0.001771</td>\n",
       "      <td>0.001134</td>\n",
       "      <td>0.001262</td>\n",
       "      <td>0.000689</td>\n",
       "      <td>0.000188</td>\n",
       "      <td>-0.001358</td>\n",
       "      <td>-0.002281</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bacteroides</th>\n",
       "      <td>-0.002188</td>\n",
       "      <td>0.002363</td>\n",
       "      <td>0.002214</td>\n",
       "      <td>0.004115</td>\n",
       "      <td>-0.000386</td>\n",
       "      <td>0.001654</td>\n",
       "      <td>-0.002494</td>\n",
       "      <td>0.000750</td>\n",
       "      <td>-0.001332</td>\n",
       "      <td>-0.001351</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.002605</td>\n",
       "      <td>-0.002032</td>\n",
       "      <td>0.003017</td>\n",
       "      <td>-0.009813</td>\n",
       "      <td>-0.073958</td>\n",
       "      <td>-0.001550</td>\n",
       "      <td>-0.000895</td>\n",
       "      <td>-0.004161</td>\n",
       "      <td>-0.000977</td>\n",
       "      <td>-0.002536</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bdellovibrio</th>\n",
       "      <td>0.001338</td>\n",
       "      <td>0.001567</td>\n",
       "      <td>-0.000442</td>\n",
       "      <td>0.002029</td>\n",
       "      <td>0.000971</td>\n",
       "      <td>0.001410</td>\n",
       "      <td>-0.000632</td>\n",
       "      <td>-0.001480</td>\n",
       "      <td>0.001477</td>\n",
       "      <td>-0.001158</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001371</td>\n",
       "      <td>-0.000050</td>\n",
       "      <td>-0.000303</td>\n",
       "      <td>0.002685</td>\n",
       "      <td>-0.001888</td>\n",
       "      <td>-0.257399</td>\n",
       "      <td>-0.000281</td>\n",
       "      <td>-0.000507</td>\n",
       "      <td>0.000997</td>\n",
       "      <td>-0.000367</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Streptophyta</th>\n",
       "      <td>-0.002143</td>\n",
       "      <td>0.001931</td>\n",
       "      <td>0.002694</td>\n",
       "      <td>0.001441</td>\n",
       "      <td>-0.001021</td>\n",
       "      <td>-0.000397</td>\n",
       "      <td>0.000479</td>\n",
       "      <td>-0.000462</td>\n",
       "      <td>-0.002560</td>\n",
       "      <td>-0.000720</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001896</td>\n",
       "      <td>0.000079</td>\n",
       "      <td>0.001544</td>\n",
       "      <td>-0.003770</td>\n",
       "      <td>0.001885</td>\n",
       "      <td>0.000038</td>\n",
       "      <td>-0.419246</td>\n",
       "      <td>-0.001309</td>\n",
       "      <td>-0.001869</td>\n",
       "      <td>0.000866</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Lachnospiracea_incertae_sedis</th>\n",
       "      <td>-0.000301</td>\n",
       "      <td>-0.002303</td>\n",
       "      <td>0.000765</td>\n",
       "      <td>-0.002680</td>\n",
       "      <td>-0.001735</td>\n",
       "      <td>-0.002525</td>\n",
       "      <td>-0.001320</td>\n",
       "      <td>-0.000865</td>\n",
       "      <td>-0.001597</td>\n",
       "      <td>0.001868</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002378</td>\n",
       "      <td>0.000892</td>\n",
       "      <td>-0.003565</td>\n",
       "      <td>0.005215</td>\n",
       "      <td>0.001278</td>\n",
       "      <td>-0.001269</td>\n",
       "      <td>-0.001506</td>\n",
       "      <td>0.001421</td>\n",
       "      <td>0.002370</td>\n",
       "      <td>-0.000619</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Paracoccus</th>\n",
       "      <td>-0.000095</td>\n",
       "      <td>0.000565</td>\n",
       "      <td>-0.002160</td>\n",
       "      <td>0.001815</td>\n",
       "      <td>0.002566</td>\n",
       "      <td>-0.000727</td>\n",
       "      <td>0.001824</td>\n",
       "      <td>-0.000475</td>\n",
       "      <td>0.001150</td>\n",
       "      <td>0.000952</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001019</td>\n",
       "      <td>0.002252</td>\n",
       "      <td>0.002376</td>\n",
       "      <td>-0.003091</td>\n",
       "      <td>-0.002375</td>\n",
       "      <td>0.002467</td>\n",
       "      <td>0.000613</td>\n",
       "      <td>-0.083875</td>\n",
       "      <td>0.000126</td>\n",
       "      <td>0.001058</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fastidiosipila</th>\n",
       "      <td>-0.001502</td>\n",
       "      <td>-0.000106</td>\n",
       "      <td>-0.000269</td>\n",
       "      <td>-0.000321</td>\n",
       "      <td>-0.002222</td>\n",
       "      <td>0.001653</td>\n",
       "      <td>0.000867</td>\n",
       "      <td>-0.001387</td>\n",
       "      <td>0.001238</td>\n",
       "      <td>0.001444</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000906</td>\n",
       "      <td>-0.000741</td>\n",
       "      <td>-0.000555</td>\n",
       "      <td>0.003140</td>\n",
       "      <td>0.000091</td>\n",
       "      <td>-0.002147</td>\n",
       "      <td>-0.000098</td>\n",
       "      <td>-0.000604</td>\n",
       "      <td>-0.114026</td>\n",
       "      <td>0.001071</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pseudonocardia</th>\n",
       "      <td>0.000582</td>\n",
       "      <td>-0.001809</td>\n",
       "      <td>0.002779</td>\n",
       "      <td>0.001551</td>\n",
       "      <td>-0.002070</td>\n",
       "      <td>0.000292</td>\n",
       "      <td>-0.002604</td>\n",
       "      <td>-0.002214</td>\n",
       "      <td>-0.001308</td>\n",
       "      <td>-0.002307</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001681</td>\n",
       "      <td>-0.002835</td>\n",
       "      <td>0.004571</td>\n",
       "      <td>-0.002091</td>\n",
       "      <td>0.001091</td>\n",
       "      <td>0.001554</td>\n",
       "      <td>-0.000883</td>\n",
       "      <td>0.001647</td>\n",
       "      <td>-0.000195</td>\n",
       "      <td>-0.081759</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>48 rows × 40 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                               Streptococcaceae  Cellulomonadaceae  \\\n",
       "Streptococcus                         -0.003667          -0.001768   \n",
       "Tropheryma                             0.001543          -0.215058   \n",
       "Veillonella                           -0.000501           0.000705   \n",
       "Actinomyces                           -0.002598           0.001388   \n",
       "Flavobacterium                        -0.000254           0.000674   \n",
       "Prevotella                            -0.002100          -0.001773   \n",
       "Porphyromonas                          0.001183          -0.000552   \n",
       "Parvimonas                             0.001063           0.000132   \n",
       "Fusobacterium                          0.002556           0.001624   \n",
       "Propionibacterium                      0.001062           0.001408   \n",
       "Gemella                                0.000851           0.000349   \n",
       "Rothia                                -0.000718          -0.001804   \n",
       "Granulicatella                         0.001945          -0.001993   \n",
       "Neisseria                              0.001420           0.002299   \n",
       "Lactobacillus                          0.002317           0.000506   \n",
       "Megasphaera                           -0.001450           0.000579   \n",
       "Catonella                              0.002200           0.001912   \n",
       "Atopobium                              0.001426          -0.000707   \n",
       "Campylobacter                         -0.000369          -0.000073   \n",
       "Capnocytophaga                         0.001024          -0.000470   \n",
       "Solobacterium                         -0.000312          -0.002223   \n",
       "Moryella                               0.000905          -0.001616   \n",
       "TM7_genera_incertae_sedis             -0.001873           0.002016   \n",
       "Staphylococcus                        -0.001005           0.001548   \n",
       "Filifactor                            -0.001541           0.000467   \n",
       "Oribacterium                           0.001043           0.002489   \n",
       "Burkholderia                          -0.000385           0.001751   \n",
       "Sneathia                               0.000705           0.001533   \n",
       "Treponema                             -0.002398          -0.002181   \n",
       "Moraxella                              0.000693          -0.001416   \n",
       "Haemophilus                            0.001993           0.000190   \n",
       "Selenomonas                           -0.001843          -0.000063   \n",
       "Corynebacterium                        0.002487           0.002087   \n",
       "Rhizobium                             -0.002075           0.002216   \n",
       "Bradyrhizobium                        -0.001047          -0.001854   \n",
       "Methylobacterium                      -0.001792           0.001270   \n",
       "OD1_genera_incertae_sedis              0.000594           0.000270   \n",
       "Finegoldia                            -0.001860          -0.001983   \n",
       "Microbacterium                        -0.002103           0.001940   \n",
       "Sphingomonas                          -0.001260          -0.001982   \n",
       "Chryseobacterium                      -0.002398           0.001513   \n",
       "Bacteroides                           -0.002188           0.002363   \n",
       "Bdellovibrio                           0.001338           0.001567   \n",
       "Streptophyta                          -0.002143           0.001931   \n",
       "Lachnospiracea_incertae_sedis         -0.000301          -0.002303   \n",
       "Paracoccus                            -0.000095           0.000565   \n",
       "Fastidiosipila                        -0.001502          -0.000106   \n",
       "Pseudonocardia                         0.000582          -0.001809   \n",
       "\n",
       "                               Veillonellaceae  Actinomycetaceae  \\\n",
       "Streptococcus                         0.001325          0.001456   \n",
       "Tropheryma                           -0.003214         -0.009654   \n",
       "Veillonella                          -0.301859         -0.001341   \n",
       "Actinomyces                          -0.003404         -0.470030   \n",
       "Flavobacterium                       -0.001270         -0.000883   \n",
       "Prevotella                           -0.000348          0.002523   \n",
       "Porphyromonas                        -0.000101          0.007093   \n",
       "Parvimonas                            0.001461         -0.001005   \n",
       "Fusobacterium                        -0.002109         -0.001389   \n",
       "Propionibacterium                     0.006125          0.009174   \n",
       "Gemella                              -0.001837          0.003390   \n",
       "Rothia                                0.007131          0.012854   \n",
       "Granulicatella                        0.001048         -0.001621   \n",
       "Neisseria                            -0.001257          0.000910   \n",
       "Lactobacillus                         0.000394          0.001745   \n",
       "Megasphaera                           1.274933          0.004887   \n",
       "Catonella                            -0.002417         -0.000122   \n",
       "Atopobium                             0.001261          0.005579   \n",
       "Campylobacter                         0.002607          0.003523   \n",
       "Capnocytophaga                        0.000436          0.000886   \n",
       "Solobacterium                         0.000356         -0.000599   \n",
       "Moryella                             -0.001648         -0.009333   \n",
       "TM7_genera_incertae_sedis             0.004185          0.006610   \n",
       "Staphylococcus                       -0.002364          0.002457   \n",
       "Filifactor                           -0.002577         -0.003883   \n",
       "Oribacterium                         -0.006826         -0.012656   \n",
       "Burkholderia                         -0.000910          0.004189   \n",
       "Sneathia                              0.002113          0.002512   \n",
       "Treponema                            -0.001137         -0.000737   \n",
       "Moraxella                             0.000981          0.003702   \n",
       "Haemophilus                          -0.001882         -0.002036   \n",
       "Selenomonas                          -0.932646         -0.004688   \n",
       "Corynebacterium                       0.000940          0.004033   \n",
       "Rhizobium                             0.002120          0.001473   \n",
       "Bradyrhizobium                        0.002135          0.005654   \n",
       "Methylobacterium                      0.000696          0.002373   \n",
       "OD1_genera_incertae_sedis            -0.000681          0.001792   \n",
       "Finegoldia                            0.000693         -0.001184   \n",
       "Microbacterium                        0.003438          0.003818   \n",
       "Sphingomonas                          0.001769          0.002268   \n",
       "Chryseobacterium                      0.001135          0.002571   \n",
       "Bacteroides                           0.002214          0.004115   \n",
       "Bdellovibrio                         -0.000442          0.002029   \n",
       "Streptophyta                          0.002694          0.001441   \n",
       "Lachnospiracea_incertae_sedis         0.000765         -0.002680   \n",
       "Paracoccus                           -0.002160          0.001815   \n",
       "Fastidiosipila                       -0.000269         -0.000321   \n",
       "Pseudonocardia                        0.002779          0.001551   \n",
       "\n",
       "                               Flavobacteriaceae  Prevotellaceae  \\\n",
       "Streptococcus                           0.002184       -0.000491   \n",
       "Tropheryma                              0.000660        0.002151   \n",
       "Veillonella                             0.000646       -0.001976   \n",
       "Actinomyces                             0.000454        0.000797   \n",
       "Flavobacterium                          0.248872        0.001836   \n",
       "Prevotella                              0.002299       -0.291037   \n",
       "Porphyromonas                          -0.001207        0.000810   \n",
       "Parvimonas                             -0.002596       -0.002349   \n",
       "Fusobacterium                           0.002455       -0.002054   \n",
       "Propionibacterium                       0.000466       -0.000532   \n",
       "Gemella                                 0.001864       -0.000223   \n",
       "Rothia                                  0.001873       -0.001235   \n",
       "Granulicatella                          0.000068       -0.002181   \n",
       "Neisseria                               0.002267        0.000811   \n",
       "Lactobacillus                          -0.000720       -0.000336   \n",
       "Megasphaera                             0.002332        0.000168   \n",
       "Catonella                              -0.002348        0.000125   \n",
       "Atopobium                               0.000102        0.002607   \n",
       "Campylobacter                           0.001730        0.000217   \n",
       "Capnocytophaga                         -0.311748        0.000092   \n",
       "Solobacterium                          -0.001665        0.000560   \n",
       "Moryella                                0.001709       -0.001326   \n",
       "TM7_genera_incertae_sedis               0.000767       -0.001365   \n",
       "Staphylococcus                         -0.001743        0.001082   \n",
       "Filifactor                             -0.000301       -0.000481   \n",
       "Oribacterium                            0.002041        0.002292   \n",
       "Burkholderia                            0.000248        0.002326   \n",
       "Sneathia                               -0.000877       -0.000761   \n",
       "Treponema                              -0.002286        0.000526   \n",
       "Moraxella                              -0.001946        0.001380   \n",
       "Haemophilus                            -0.000644        0.002075   \n",
       "Selenomonas                             0.001603       -0.000935   \n",
       "Corynebacterium                         0.002521        0.000091   \n",
       "Rhizobium                              -0.001636       -0.002552   \n",
       "Bradyrhizobium                         -0.000250        0.002446   \n",
       "Methylobacterium                       -0.002335        0.001607   \n",
       "OD1_genera_incertae_sedis              -0.001029        0.000918   \n",
       "Finegoldia                             -0.000154        0.001458   \n",
       "Microbacterium                          0.002280        0.002430   \n",
       "Sphingomonas                           -0.001826       -0.001215   \n",
       "Chryseobacterium                        0.345667        0.000835   \n",
       "Bacteroides                            -0.000386        0.001654   \n",
       "Bdellovibrio                            0.000971        0.001410   \n",
       "Streptophyta                           -0.001021       -0.000397   \n",
       "Lachnospiracea_incertae_sedis          -0.001735       -0.002525   \n",
       "Paracoccus                              0.002566       -0.000727   \n",
       "Fastidiosipila                         -0.002222        0.001653   \n",
       "Pseudonocardia                         -0.002070        0.000292   \n",
       "\n",
       "                               Porphyromonadaceae  \\\n",
       "Streptococcus                            0.000875   \n",
       "Tropheryma                              -0.001632   \n",
       "Veillonella                             -0.000230   \n",
       "Actinomyces                              0.002433   \n",
       "Flavobacterium                          -0.001321   \n",
       "Prevotella                              -0.000283   \n",
       "Porphyromonas                           -0.182440   \n",
       "Parvimonas                              -0.002332   \n",
       "Fusobacterium                            0.000834   \n",
       "Propionibacterium                        0.001045   \n",
       "Gemella                                 -0.000969   \n",
       "Rothia                                  -0.002411   \n",
       "Granulicatella                          -0.001499   \n",
       "Neisseria                               -0.001824   \n",
       "Lactobacillus                            0.001486   \n",
       "Megasphaera                              0.002292   \n",
       "Catonella                                0.000148   \n",
       "Atopobium                               -0.001018   \n",
       "Campylobacter                            0.001451   \n",
       "Capnocytophaga                          -0.001074   \n",
       "Solobacterium                            0.000099   \n",
       "Moryella                                -0.000380   \n",
       "TM7_genera_incertae_sedis               -0.001074   \n",
       "Staphylococcus                          -0.000404   \n",
       "Filifactor                               0.000992   \n",
       "Oribacterium                            -0.000677   \n",
       "Burkholderia                             0.002334   \n",
       "Sneathia                                -0.000184   \n",
       "Treponema                                0.000733   \n",
       "Moraxella                               -0.000326   \n",
       "Haemophilus                              0.002545   \n",
       "Selenomonas                              0.000750   \n",
       "Corynebacterium                         -0.001529   \n",
       "Rhizobium                               -0.001815   \n",
       "Bradyrhizobium                           0.001483   \n",
       "Methylobacterium                        -0.002408   \n",
       "OD1_genera_incertae_sedis                0.000271   \n",
       "Finegoldia                               0.001278   \n",
       "Microbacterium                          -0.000255   \n",
       "Sphingomonas                            -0.002270   \n",
       "Chryseobacterium                        -0.001855   \n",
       "Bacteroides                             -0.002494   \n",
       "Bdellovibrio                            -0.000632   \n",
       "Streptophyta                             0.000479   \n",
       "Lachnospiracea_incertae_sedis           -0.001320   \n",
       "Paracoccus                               0.001824   \n",
       "Fastidiosipila                           0.000867   \n",
       "Pseudonocardia                          -0.002604   \n",
       "\n",
       "                               Clostridiales_Incertae_Sedis_XI  \\\n",
       "Streptococcus                                         0.000632   \n",
       "Tropheryma                                           -0.000849   \n",
       "Veillonella                                          -0.002423   \n",
       "Actinomyces                                          -0.001490   \n",
       "Flavobacterium                                        0.001363   \n",
       "Prevotella                                            0.001727   \n",
       "Porphyromonas                                        -0.001066   \n",
       "Parvimonas                                           -0.211951   \n",
       "Fusobacterium                                        -0.000974   \n",
       "Propionibacterium                                     0.000174   \n",
       "Gemella                                              -0.001354   \n",
       "Rothia                                                0.000001   \n",
       "Granulicatella                                        0.001430   \n",
       "Neisseria                                            -0.001296   \n",
       "Lactobacillus                                         0.000399   \n",
       "Megasphaera                                          -0.000884   \n",
       "Catonella                                            -0.000977   \n",
       "Atopobium                                            -0.002461   \n",
       "Campylobacter                                        -0.001699   \n",
       "Capnocytophaga                                       -0.001408   \n",
       "Solobacterium                                        -0.001117   \n",
       "Moryella                                             -0.000956   \n",
       "TM7_genera_incertae_sedis                            -0.002606   \n",
       "Staphylococcus                                        0.002017   \n",
       "Filifactor                                           -0.002289   \n",
       "Oribacterium                                         -0.000312   \n",
       "Burkholderia                                          0.001666   \n",
       "Sneathia                                              0.002241   \n",
       "Treponema                                             0.001762   \n",
       "Moraxella                                             0.001073   \n",
       "Haemophilus                                          -0.001540   \n",
       "Selenomonas                                           0.001238   \n",
       "Corynebacterium                                      -0.000698   \n",
       "Rhizobium                                             0.001884   \n",
       "Bradyrhizobium                                        0.002214   \n",
       "Methylobacterium                                      0.000892   \n",
       "OD1_genera_incertae_sedis                             0.000621   \n",
       "Finegoldia                                           -0.186434   \n",
       "Microbacterium                                       -0.001584   \n",
       "Sphingomonas                                         -0.000616   \n",
       "Chryseobacterium                                     -0.000550   \n",
       "Bacteroides                                           0.000750   \n",
       "Bdellovibrio                                         -0.001480   \n",
       "Streptophyta                                         -0.000462   \n",
       "Lachnospiracea_incertae_sedis                        -0.000865   \n",
       "Paracoccus                                           -0.000475   \n",
       "Fastidiosipila                                       -0.001387   \n",
       "Pseudonocardia                                       -0.002214   \n",
       "\n",
       "                               Fusobacteriaceae  Propionibacteriaceae  ...  \\\n",
       "Streptococcus                          0.003054              0.000323  ...   \n",
       "Tropheryma                             0.002393              0.001828  ...   \n",
       "Veillonella                           -0.001197             -0.000159  ...   \n",
       "Actinomyces                            0.003946              0.001098  ...   \n",
       "Flavobacterium                         0.001952             -0.000821  ...   \n",
       "Prevotella                             0.002205              0.000612  ...   \n",
       "Porphyromonas                         -0.002806              0.001143  ...   \n",
       "Parvimonas                             0.000486             -0.001970  ...   \n",
       "Fusobacterium                          0.403100             -0.002410  ...   \n",
       "Propionibacterium                     -0.006831             -0.202478  ...   \n",
       "Gemella                                0.001830              0.001875  ...   \n",
       "Rothia                                -0.011564             -0.002441  ...   \n",
       "Granulicatella                        -0.001424              0.001160  ...   \n",
       "Neisseria                             -0.002785              0.002015  ...   \n",
       "Lactobacillus                          0.000216              0.000103  ...   \n",
       "Megasphaera                           -0.001364              0.001167  ...   \n",
       "Catonella                             -0.000886              0.000822  ...   \n",
       "Atopobium                             -0.003837             -0.000338  ...   \n",
       "Campylobacter                         -0.002781             -0.000241  ...   \n",
       "Capnocytophaga                         0.001082              0.000902  ...   \n",
       "Solobacterium                         -0.000944              0.000285  ...   \n",
       "Moryella                               0.002556             -0.001221  ...   \n",
       "TM7_genera_incertae_sedis             -0.003105             -0.002307  ...   \n",
       "Staphylococcus                         0.001085             -0.000786  ...   \n",
       "Filifactor                             0.004504              0.002600  ...   \n",
       "Oribacterium                           0.003692             -0.001648  ...   \n",
       "Burkholderia                          -0.002761             -0.000166  ...   \n",
       "Sneathia                              -0.001438              0.001037  ...   \n",
       "Treponema                              0.001565             -0.002374  ...   \n",
       "Moraxella                             -0.000903              0.000179  ...   \n",
       "Haemophilus                           -0.000482              0.001377  ...   \n",
       "Selenomonas                            0.000677              0.000368  ...   \n",
       "Corynebacterium                       -0.001985             -0.002082  ...   \n",
       "Rhizobium                              0.000744              0.001987  ...   \n",
       "Bradyrhizobium                        -0.002203              0.000916  ...   \n",
       "Methylobacterium                       0.000055             -0.002010  ...   \n",
       "OD1_genera_incertae_sedis             -0.001977              0.002466  ...   \n",
       "Finegoldia                            -0.000168             -0.002268  ...   \n",
       "Microbacterium                         0.000877              0.000671  ...   \n",
       "Sphingomonas                          -0.002708              0.001615  ...   \n",
       "Chryseobacterium                       0.000571             -0.002285  ...   \n",
       "Bacteroides                           -0.001332             -0.001351  ...   \n",
       "Bdellovibrio                           0.001477             -0.001158  ...   \n",
       "Streptophyta                          -0.002560             -0.000720  ...   \n",
       "Lachnospiracea_incertae_sedis         -0.001597              0.001868  ...   \n",
       "Paracoccus                             0.001150              0.000952  ...   \n",
       "Fastidiosipila                         0.001238              0.001444  ...   \n",
       "Pseudonocardia                        -0.001308             -0.002307  ...   \n",
       "\n",
       "                               Methylobacteriaceae  OD1_genera_incertae_sedis  \\\n",
       "Streptococcus                            -0.000533                   0.001253   \n",
       "Tropheryma                               -0.001780                   0.002741   \n",
       "Veillonella                               0.002527                  -0.000441   \n",
       "Actinomyces                               0.002029                   0.001986   \n",
       "Flavobacterium                           -0.001738                  -0.000339   \n",
       "Prevotella                                0.000755                  -0.001764   \n",
       "Porphyromonas                            -0.000700                   0.000202   \n",
       "Parvimonas                               -0.002204                  -0.002101   \n",
       "Fusobacterium                             0.000543                  -0.002207   \n",
       "Propionibacterium                        -0.003536                  -0.001617   \n",
       "Gemella                                  -0.000320                  -0.000295   \n",
       "Rothia                                   -0.002963                  -0.003612   \n",
       "Granulicatella                           -0.000683                  -0.002201   \n",
       "Neisseria                                -0.002191                   0.001516   \n",
       "Lactobacillus                            -0.000212                  -0.000741   \n",
       "Megasphaera                              -0.002624                   0.000742   \n",
       "Catonella                                 0.000957                   0.000733   \n",
       "Atopobium                                -0.000746                   0.001287   \n",
       "Campylobacter                             0.000825                  -0.002309   \n",
       "Capnocytophaga                           -0.000088                   0.001924   \n",
       "Solobacterium                            -0.000015                   0.001728   \n",
       "Moryella                                  0.001740                   0.003674   \n",
       "TM7_genera_incertae_sedis                -0.001919                  -0.001922   \n",
       "Staphylococcus                            0.002215                  -0.000946   \n",
       "Filifactor                               -0.000746                   0.000191   \n",
       "Oribacterium                             -0.000857                   0.001140   \n",
       "Burkholderia                              0.000985                   0.001894   \n",
       "Sneathia                                 -0.002540                   0.000247   \n",
       "Treponema                                 0.001820                   0.000009   \n",
       "Moraxella                                 0.000094                   0.000743   \n",
       "Haemophilus                               0.002723                  -0.001120   \n",
       "Selenomonas                               0.001383                   0.000940   \n",
       "Corynebacterium                           0.002194                   0.000229   \n",
       "Rhizobium                                 0.001139                  -0.002195   \n",
       "Bradyrhizobium                           -0.001739                  -0.000007   \n",
       "Methylobacterium                         -0.170789                   0.001010   \n",
       "OD1_genera_incertae_sedis                 0.000354                   0.615501   \n",
       "Finegoldia                               -0.000189                  -0.001873   \n",
       "Microbacterium                            0.000253                  -0.000251   \n",
       "Sphingomonas                             -0.002120                  -0.000233   \n",
       "Chryseobacterium                          0.002118                  -0.000504   \n",
       "Bacteroides                              -0.002605                  -0.002032   \n",
       "Bdellovibrio                              0.001371                  -0.000050   \n",
       "Streptophyta                              0.001896                   0.000079   \n",
       "Lachnospiracea_incertae_sedis             0.002378                   0.000892   \n",
       "Paracoccus                                0.001019                   0.002252   \n",
       "Fastidiosipila                            0.000906                  -0.000741   \n",
       "Pseudonocardia                           -0.001681                  -0.002835   \n",
       "\n",
       "                               Microbacteriaceae  Sphingomonadaceae  \\\n",
       "Streptococcus                          -0.000205           0.007366   \n",
       "Tropheryma                             -0.006440           0.017065   \n",
       "Veillonella                            -0.000903           0.005830   \n",
       "Actinomyces                            -0.001488           0.010501   \n",
       "Flavobacterium                         -0.000083          -0.002404   \n",
       "Prevotella                             -0.000812           0.003282   \n",
       "Porphyromonas                           0.006241          -0.005881   \n",
       "Parvimonas                              0.000605          -0.000478   \n",
       "Fusobacterium                          -0.001116           0.000299   \n",
       "Propionibacterium                       0.004355          -0.012915   \n",
       "Gemella                                 0.000256          -0.000582   \n",
       "Rothia                                  0.010823          -0.020459   \n",
       "Granulicatella                          0.001459           0.002804   \n",
       "Neisseria                               0.000122          -0.006361   \n",
       "Lactobacillus                           0.000487           0.001565   \n",
       "Megasphaera                             0.003404          -0.005208   \n",
       "Catonella                              -0.002617           0.002023   \n",
       "Atopobium                               0.003769          -0.003421   \n",
       "Campylobacter                           0.004287          -0.003301   \n",
       "Capnocytophaga                         -0.002567           0.004491   \n",
       "Solobacterium                           0.001280           0.000561   \n",
       "Moryella                               -0.006102           0.012356   \n",
       "TM7_genera_incertae_sedis               0.001897          -0.004352   \n",
       "Staphylococcus                          0.001797           0.002703   \n",
       "Filifactor                             -0.002674           0.012975   \n",
       "Oribacterium                           -0.008903           0.016796   \n",
       "Burkholderia                            0.001101          -0.003753   \n",
       "Sneathia                                0.000989          -0.004299   \n",
       "Treponema                              -0.000681           0.001300   \n",
       "Moraxella                               0.001261          -0.002102   \n",
       "Haemophilus                            -0.001576           0.003136   \n",
       "Selenomonas                            -0.002164           0.009030   \n",
       "Corynebacterium                         0.001778          -0.005348   \n",
       "Rhizobium                              -0.001826          -0.002247   \n",
       "Bradyrhizobium                          0.002960          -0.004566   \n",
       "Methylobacterium                        0.001024          -0.005581   \n",
       "OD1_genera_incertae_sedis              -0.001473           0.004945   \n",
       "Finegoldia                              0.001756           0.000669   \n",
       "Microbacterium                          0.445275          -0.007054   \n",
       "Sphingomonas                            0.003041          -0.370119   \n",
       "Chryseobacterium                        0.000246           0.001771   \n",
       "Bacteroides                             0.003017          -0.009813   \n",
       "Bdellovibrio                           -0.000303           0.002685   \n",
       "Streptophyta                            0.001544          -0.003770   \n",
       "Lachnospiracea_incertae_sedis          -0.003565           0.005215   \n",
       "Paracoccus                              0.002376          -0.003091   \n",
       "Fastidiosipila                         -0.000555           0.003140   \n",
       "Pseudonocardia                          0.004571          -0.002091   \n",
       "\n",
       "                               Bacteroidaceae  Bdellovibrionaceae  \\\n",
       "Streptococcus                       -0.000193            0.001418   \n",
       "Tropheryma                          -0.001962           -0.000885   \n",
       "Veillonella                         -0.001262            0.000430   \n",
       "Actinomyces                          0.000455            0.002060   \n",
       "Flavobacterium                       0.001133           -0.002247   \n",
       "Prevotella                           0.001156           -0.001505   \n",
       "Porphyromonas                       -0.000234           -0.000586   \n",
       "Parvimonas                           0.001908            0.002160   \n",
       "Fusobacterium                        0.001517            0.002564   \n",
       "Propionibacterium                    0.002098           -0.002340   \n",
       "Gemella                             -0.000556           -0.000576   \n",
       "Rothia                               0.001731            0.000060   \n",
       "Granulicatella                      -0.002198            0.002149   \n",
       "Neisseria                            0.000842           -0.002256   \n",
       "Lactobacillus                       -0.002183           -0.002227   \n",
       "Megasphaera                         -0.000405           -0.000070   \n",
       "Catonella                           -0.001188            0.001653   \n",
       "Atopobium                            0.000749            0.001569   \n",
       "Campylobacter                        0.002607            0.000198   \n",
       "Capnocytophaga                      -0.002558           -0.001511   \n",
       "Solobacterium                       -0.002515            0.002165   \n",
       "Moryella                             0.002207            0.000918   \n",
       "TM7_genera_incertae_sedis            0.000528           -0.000061   \n",
       "Staphylococcus                      -0.000816            0.001314   \n",
       "Filifactor                          -0.000882           -0.001935   \n",
       "Oribacterium                         0.000350            0.000421   \n",
       "Burkholderia                        -0.002010           -0.001267   \n",
       "Sneathia                             0.001530           -0.002413   \n",
       "Treponema                            0.001049            0.002251   \n",
       "Moraxella                            0.001806            0.000411   \n",
       "Haemophilus                         -0.000890            0.001529   \n",
       "Selenomonas                         -0.002157           -0.002349   \n",
       "Corynebacterium                      0.001697           -0.002415   \n",
       "Rhizobium                            0.002492           -0.000857   \n",
       "Bradyrhizobium                       0.001036            0.001994   \n",
       "Methylobacterium                     0.000243           -0.000250   \n",
       "OD1_genera_incertae_sedis           -0.001660            0.001812   \n",
       "Finegoldia                           0.001200            0.000671   \n",
       "Microbacterium                      -0.001231            0.001022   \n",
       "Sphingomonas                         0.001631            0.001261   \n",
       "Chryseobacterium                     0.001134            0.001262   \n",
       "Bacteroides                         -0.073958           -0.001550   \n",
       "Bdellovibrio                        -0.001888           -0.257399   \n",
       "Streptophyta                         0.001885            0.000038   \n",
       "Lachnospiracea_incertae_sedis        0.001278           -0.001269   \n",
       "Paracoccus                          -0.002375            0.002467   \n",
       "Fastidiosipila                       0.000091           -0.002147   \n",
       "Pseudonocardia                       0.001091            0.001554   \n",
       "\n",
       "                               Chloroplast  Rhodobacteraceae  Ruminococcaceae  \\\n",
       "Streptococcus                    -0.001948          0.001318        -0.001273   \n",
       "Tropheryma                        0.003327          0.013439        -0.001049   \n",
       "Veillonella                       0.000859          0.000942        -0.002472   \n",
       "Actinomyces                      -0.001577          0.004037         0.000643   \n",
       "Flavobacterium                    0.000509         -0.002485         0.000093   \n",
       "Prevotella                        0.002591          0.002897         0.000544   \n",
       "Porphyromonas                    -0.002731         -0.002999         0.001974   \n",
       "Parvimonas                        0.001100          0.001943         0.001563   \n",
       "Fusobacterium                     0.001151         -0.000213         0.002357   \n",
       "Propionibacterium                 0.000667         -0.012511         0.001475   \n",
       "Gemella                           0.002486         -0.002279         0.002339   \n",
       "Rothia                           -0.005276         -0.017915         0.000537   \n",
       "Granulicatella                    0.002590          0.001811         0.001633   \n",
       "Neisseria                         0.002124         -0.006260        -0.001157   \n",
       "Lactobacillus                     0.000087          0.001855         0.000275   \n",
       "Megasphaera                       0.000990         -0.006566         0.001863   \n",
       "Catonella                         0.001797          0.004287         0.002224   \n",
       "Atopobium                        -0.001938         -0.003487         0.001636   \n",
       "Campylobacter                    -0.001609         -0.004119         0.001517   \n",
       "Capnocytophaga                    0.002487          0.000496        -0.000756   \n",
       "Solobacterium                     0.000163          0.000038        -0.002404   \n",
       "Moryella                          0.001252          0.013576        -0.001710   \n",
       "TM7_genera_incertae_sedis         0.000032         -0.003326        -0.002285   \n",
       "Staphylococcus                   -0.000556         -0.001316        -0.002434   \n",
       "Filifactor                       -0.000473          0.004940         0.001912   \n",
       "Oribacterium                      0.001273          0.014419         0.000049   \n",
       "Burkholderia                      0.000420         -0.001447         0.000504   \n",
       "Sneathia                          0.002073         -0.002216        -0.000677   \n",
       "Treponema                        -0.002069          0.002419         0.001925   \n",
       "Moraxella                         0.001095         -0.000056         0.001501   \n",
       "Haemophilus                       0.002580          0.001274        -0.001972   \n",
       "Selenomonas                      -0.001808          0.008690        -0.001729   \n",
       "Corynebacterium                  -0.002523         -0.003339        -0.000417   \n",
       "Rhizobium                         0.001400         -0.000779        -0.001020   \n",
       "Bradyrhizobium                   -0.002269         -0.004326        -0.000472   \n",
       "Methylobacterium                  0.002082         -0.002095        -0.000278   \n",
       "OD1_genera_incertae_sedis         0.001356          0.003495        -0.001749   \n",
       "Finegoldia                        0.002021          0.000644         0.002357   \n",
       "Microbacterium                    0.000124         -0.005342         0.001362   \n",
       "Sphingomonas                     -0.001623         -0.002168        -0.002287   \n",
       "Chryseobacterium                  0.000689          0.000188        -0.001358   \n",
       "Bacteroides                      -0.000895         -0.004161        -0.000977   \n",
       "Bdellovibrio                     -0.000281         -0.000507         0.000997   \n",
       "Streptophyta                     -0.419246         -0.001309        -0.001869   \n",
       "Lachnospiracea_incertae_sedis    -0.001506          0.001421         0.002370   \n",
       "Paracoccus                        0.000613         -0.083875         0.000126   \n",
       "Fastidiosipila                   -0.000098         -0.000604        -0.114026   \n",
       "Pseudonocardia                   -0.000883          0.001647        -0.000195   \n",
       "\n",
       "                               Pseudonocardiaceae  \n",
       "Streptococcus                           -0.001266  \n",
       "Tropheryma                               0.002226  \n",
       "Veillonella                             -0.001248  \n",
       "Actinomyces                             -0.000777  \n",
       "Flavobacterium                           0.000566  \n",
       "Prevotella                              -0.001428  \n",
       "Porphyromonas                           -0.002288  \n",
       "Parvimonas                              -0.000711  \n",
       "Fusobacterium                            0.000610  \n",
       "Propionibacterium                        0.000798  \n",
       "Gemella                                  0.001868  \n",
       "Rothia                                   0.002532  \n",
       "Granulicatella                           0.002068  \n",
       "Neisseria                               -0.001640  \n",
       "Lactobacillus                           -0.001568  \n",
       "Megasphaera                              0.002413  \n",
       "Catonella                                0.002154  \n",
       "Atopobium                                0.002148  \n",
       "Campylobacter                           -0.002305  \n",
       "Capnocytophaga                           0.000273  \n",
       "Solobacterium                            0.001561  \n",
       "Moryella                                -0.002257  \n",
       "TM7_genera_incertae_sedis               -0.001550  \n",
       "Staphylococcus                           0.000845  \n",
       "Filifactor                               0.001359  \n",
       "Oribacterium                             0.001398  \n",
       "Burkholderia                            -0.001597  \n",
       "Sneathia                                -0.001062  \n",
       "Treponema                               -0.001610  \n",
       "Moraxella                                0.000625  \n",
       "Haemophilus                              0.001275  \n",
       "Selenomonas                              0.002505  \n",
       "Corynebacterium                         -0.000505  \n",
       "Rhizobium                               -0.000759  \n",
       "Bradyrhizobium                          -0.001178  \n",
       "Methylobacterium                         0.002363  \n",
       "OD1_genera_incertae_sedis                0.002503  \n",
       "Finegoldia                              -0.001849  \n",
       "Microbacterium                           0.000117  \n",
       "Sphingomonas                            -0.001351  \n",
       "Chryseobacterium                        -0.002281  \n",
       "Bacteroides                             -0.002536  \n",
       "Bdellovibrio                            -0.000367  \n",
       "Streptophyta                             0.000866  \n",
       "Lachnospiracea_incertae_sedis           -0.000619  \n",
       "Paracoccus                               0.001058  \n",
       "Fastidiosipila                           0.001071  \n",
       "Pseudonocardia                          -0.081759  \n",
       "\n",
       "[48 rows x 40 columns]"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trained_weight_list[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 9. Taxa selection performance\n",
    "\n",
    "If we know the true disease path, we can calculate the taxa selection performance by `deepbiome_taxa_selection_performance` funciton. First, we prepared the true weight list based on the true disease path. For each fold, we prepared 4 weights from the 5 layers (`[genus to family, family to order, order to Class, class to phylum]`). An example of the list of the true weights from each fold is as follow:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|<ipython-input-44-7f16305fbcb7>:2] (5, 4)\n"
     ]
    }
   ],
   "source": [
    "true_tree_weight_list = np.load(resource_filename('deepbiome', 'tests/data/true_weight_list.npy'), allow_pickle=True)\n",
    "log.info(true_tree_weight_list.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The first weight between the genus and family layers for first epoch has the shape below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|<ipython-input-45-7f1406e7d9a7>:1] (48, 40)\n"
     ]
    }
   ],
   "source": [
    "log.info(true_tree_weight_list[0][0].shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will calculate the taxa selection performance of the trained weight below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['./example_result//weight_0.h5',\n",
       " './example_result//weight_1.h5',\n",
       " './example_result//weight_2.h5',\n",
       " './example_result//weight_3.h5',\n",
       " './example_result//weight_4.h5']"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trained_weight_path_list = ['%s/weight_%d.h5' % (path_info['model_info']['model_dir'], i) for i in range(5)]\n",
    "trained_weight_path_list"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is the summary of the taxa selection accuracy of trained weights from each fold."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result//weight_0.h5 \n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result//weight_1.h5 \n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result//weight_2.h5 \n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result//weight_3.h5 \n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result//weight_4.h5 \n"
     ]
    }
   ],
   "source": [
    "summary = deepbiome.deepbiome_taxa_selection_performance(log, network_info, path_info, num_classes=1, \n",
    "                                                         true_tree_weight_list=true_tree_weight_list, \n",
    "                                                         trained_weight_path_list = trained_weight_path_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>PhyloTree</th>\n",
       "      <th>No. true taxa</th>\n",
       "      <th>No. total taxa</th>\n",
       "      <th>Sensitivity_mean</th>\n",
       "      <th>Sensitivity_std</th>\n",
       "      <th>Specificity_mean</th>\n",
       "      <th>Specificity_std</th>\n",
       "      <th>Gmeasure_mean</th>\n",
       "      <th>Gmeasure_std</th>\n",
       "      <th>Accuracy_mean</th>\n",
       "      <th>Accuracy_std</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>./example_result/</td>\n",
       "      <td>Genus</td>\n",
       "      <td>31</td>\n",
       "      <td>48</td>\n",
       "      <td>0.974194</td>\n",
       "      <td>0.024140</td>\n",
       "      <td>0.984860</td>\n",
       "      <td>0.007856</td>\n",
       "      <td>0.979456</td>\n",
       "      <td>0.014744</td>\n",
       "      <td>0.984688</td>\n",
       "      <td>0.007958</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td></td>\n",
       "      <td>Family</td>\n",
       "      <td>23</td>\n",
       "      <td>40</td>\n",
       "      <td>0.982609</td>\n",
       "      <td>0.034783</td>\n",
       "      <td>0.977480</td>\n",
       "      <td>0.006667</td>\n",
       "      <td>0.979872</td>\n",
       "      <td>0.017581</td>\n",
       "      <td>0.977609</td>\n",
       "      <td>0.006471</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td></td>\n",
       "      <td>Order</td>\n",
       "      <td>9</td>\n",
       "      <td>23</td>\n",
       "      <td>0.955556</td>\n",
       "      <td>0.054433</td>\n",
       "      <td>0.959162</td>\n",
       "      <td>0.011180</td>\n",
       "      <td>0.956898</td>\n",
       "      <td>0.026313</td>\n",
       "      <td>0.959079</td>\n",
       "      <td>0.010607</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td></td>\n",
       "      <td>Class</td>\n",
       "      <td>7</td>\n",
       "      <td>17</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.932877</td>\n",
       "      <td>0.006711</td>\n",
       "      <td>0.965849</td>\n",
       "      <td>0.003469</td>\n",
       "      <td>0.935948</td>\n",
       "      <td>0.006404</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Model PhyloTree No. true taxa No. total taxa  Sensitivity_mean  \\\n",
       "0  ./example_result/     Genus            31             48          0.974194   \n",
       "1                       Family            23             40          0.982609   \n",
       "2                        Order             9             23          0.955556   \n",
       "3                        Class             7             17          1.000000   \n",
       "\n",
       "   Sensitivity_std  Specificity_mean  Specificity_std  Gmeasure_mean  \\\n",
       "0         0.024140          0.984860         0.007856       0.979456   \n",
       "1         0.034783          0.977480         0.006667       0.979872   \n",
       "2         0.054433          0.959162         0.011180       0.956898   \n",
       "3         0.000000          0.932877         0.006711       0.965849   \n",
       "\n",
       "   Gmeasure_std  Accuracy_mean  Accuracy_std  \n",
       "0      0.014744       0.984688      0.007958  \n",
       "1      0.017581       0.977609      0.006471  \n",
       "2      0.026313       0.959079      0.010607  \n",
       "3      0.003469       0.935948      0.006404  "
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "summary"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 10. Draw phylogenetic tree\n",
    "\n",
    "The `deepbiome_get_trained_weight` function draw phylogenetic tree for the `DeepBiome` network. This function implemented `ete3` library (link TBD)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we turn on the `tree_weight_on` option, the function shows the amount and direction of the tree weights for each edge by circle size and color. For this option, we have to feed a list of pandas dataframe of the tree weights obtained from `deepbiome_get_trained_weight` function to `tree_weight` argument.\n",
    "In this example, we used the 5 lists of weights from 5-fold cross validation obtained from `deepbiome_get_trained_weight` function.\n",
    "For each layer, we first averaged 5 weights from 5 fold CV."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "tot_trained_weight_list = []\n",
    "for fold in range(5):\n",
    "    weight_path = '%s/%s' % (path_info['model_info']['model_dir'], 'weight_%d.h5' % fold)\n",
    "    trained_weight_list = deepbiome.deepbiome_get_trained_weight(log, network_info, path_info, num_classes=1,\n",
    "                                                                 weight_path=weight_path, verbose=False)\n",
    "    tot_trained_weight_list.append(trained_weight_list)\n",
    "    \n",
    "trained_weight_list = []\n",
    "for i in range(len(tot_trained_weight_list[0])):\n",
    "    level_weights = tot_trained_weight_list[0][i]\n",
    "    for j in range(1,len(tot_trained_weight_list)):\n",
    "        level_weights +=tot_trained_weight_list[j][i]\n",
    "    level_weights /= len(tot_trained_weight_list)\n",
    "    trained_weight_list.append(level_weights)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, we can draw the phylogenetic tree with trained weights. For using the trained weights, __`tree_weight_classes`, the list of names for each level, should be same as the name of each level in the trained weight list.__\n",
    "We used `file_name='%%inline'` option to show the tree in the jupyter notebook. To specify the background color for each phylum, we turned on the `phylum_background_color_on` option and used `phylum_color` list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAfQAAAJrCAYAAAAWDmGBAAAACXBIWXMAAA3XAAAN1wFCKJt4AAAg\nAElEQVR4nOzdeXxU1fn48c/syWRfCISwrwEKohYIiOxCQaQIRfwZFFCrWGpRlKoVu9gNqyKiiBYt\nqKXW4oLyVVqLlUVZRQ0Q9ixkzySZJDOZfbm/P2JGQhLIApMRnvfrxavNnXvPOTNgnjn3nvM8KkVR\nFIQQQoQmZxnY88FjBTSg8oM2CiK6gyG+vUcnQohKAroQQoSoqsPgLAWfu+FrmjAIT4aYAcEflwhJ\n6vYegBBCiEZUHARbfuPBHMDnhJocqDx0UbtVFAWbzdaqa61W60UdS3O0ZbyXGwnoQggRamqywVne\nvHMdJWAvaPSl119/ndmzZ1+wiU2bNpGfnw9AUVERs2bNavZQzzZs2LBWXVensrKS9evXt+iatoz3\nciMBXQghQonPAfYiwNe88xUv1JwBf8OZ/IsvvkhVVRUHDhyod9xsNpORkYHdbsfj8fDOO+9w+PBh\nTCYTycnJ/POf/wSguroar9dLbm4uJpOpXhvV1dVkZmbidtfv1+fzcfz4cZxOZ+BYTU0NGRkZlJeX\nN3pubm4uAPn5+bz55puUlJRgt9sBsNvtZGZmBn4GKC8vx+/3c+zYMZKSkgLjBTCZTBw6dOiKnLVL\nQBdCiFDisYG3hbeuvTW1XwTO8tVXX9GlSxcefPBB/va3vwWOr1y5ktmzZ/OPf/yDxx9/nIKCAg4f\nPswbb7zBc889R1FREXPmzAFg8eLF/L//9/947rnnuOGGG9i1axcAH330EZMnT+bVV19l1KhRFBTU\n3iHwer0sXLiQV155hZEjR1JSUoLD4WDevHm89dZbzJ07l7///e8AFBcXc91117FmzRr++Mc/snv3\nbrZu3Up2djYrVqzgwIED7Ny5kylTprBhwwYmT55MZmYmACNHjuS2227jpZdeIisrKzDe3bt38/DD\nD7Nx40bGjx8fOP+KoQghhAgd1tOKUvBRy//Y8us1s3jxYuW9995TPB6PkpqaqjgcDsVsNisDBgxQ\nvF5vvXPnz5+v7NmzR1EURcnPz1cmTpyoKIqipKenK2+//baiKIry8ccfK/fff7+iKIoydOhQpbCw\nUFEURVm/fr2ybNkyRVEUJSUlRcnKylIURVHWrVun/OY3v1EURVHcbrdy9OhRZefOncrw4cMVRVGU\nhx56SHn99dfrjSMnJ0eZMmVK4OeRI0cqpaWliqIoyv79+5X58+criqIoXbp0UfLy8hqMV1EUxWKx\nKBkZGcrzzz8fGNeVQtveXyiEEEKcTdXm61wuF2+99RbR0dFkZGSg0+l49913GTx4MP369UOj0TS7\n1V69egEQFxeHxWIBoKqqis6dOwOQmprKxx9/DIBerw+cn5qayhdffEF+fj633nor48ePJzY2NnDb\nPTs7m3nz5p2375ycHJYuXYqiKPj9fgYNGgSA0Wika9euDc7/6KOPWLlyJePHj6e4uLjebforgQR0\nIYQIJdpoUKlB8Tf/GpUGdFGBHz/44AMmT57M5MmTAejXrx+vvfYa77//PsePH8ftdqPX6wPnGwyG\nBs/Cz6dDhw7k5ubSo0cPMjIy6Nu3LwBut5tjx44xYMCAwPFPP/2UmTNnsmzZMg4fPsyLL74IwMCB\nA9m7dy9Dhw5tchy9e/fmN7/5TaD9wNtVNf6lZ9OmTaxYsYJhw4bxwgsvcPDgwWa/p8uBBHQhhAgl\n+kjQRYLb0vxrtFGgMQZ+XL9+Pb/+9a8ZOXJk4Nif//xnzGYzv/zlLxk9ejSDBw8mLCyMNWvWMGPG\nDB599FG6devGM888c8HunnrqKWbPns2gQYM4ffo0mzdvBiA8PJy//OUvgcVuW7duxWKxcNNNN3Hs\n2DE0Gk3gi8TSpUuZNWsWO3bswOv1snTpUtLS0ggPD2f69Oncc889rF69mttvv52BAwdisViYOHEi\n9913X5PjmjFjBvfddx+DBg3C4XBgNBqbPPdyJIllhBAi1NjyoPoYKM1Y6a7WQewPapPMNJPb7aas\nrIzk5GTU6tatjfZ6vVRUVNCxY8cGr5WVlZGYmBiYSbtcLqxWK4mJiQ3ONZlMhIWFER0d3WRfxcXF\nREdHExERccFxWSwW1Go1kZGRLXg3lwcJ6EIIEYoqM77dvnaeX9EqFRi7Q+zAoA1LhC4J6EIIEaqq\nj4GjuDYr3Lk04RDRBaL6NnxNXJEkoAshRAhz1BSSW3KEQksZTr+PcI2WlJgk+qZci0aKs4izSEAX\nQogQdcp0in3Z+yi31c+wplKpiI+IZ0yfMXRP6N5OoxOhRgK6EEKEoG8KvmFv9l6cnkZut38rTBfG\nuH7jSO2UGsSRiVAlqV+FECLE5Jnz2J+z/7zBHMDpcbLr1C5KLaVBGlnrKE1URPN6vTgcjkauEK0h\nAV0IIUKIz+9jT/Ye7O7mZTmzuW3sPLWz3rHq6mpGjRrFuHHjmDhxIsuXL8fr9bZoHK2pfNaUpiqi\nbd++nWXLlp332pUrV16UMVwJJKALIUQIMVlNVNRUtOiaClsFZps58LPH48FsNrN9+3a2bt3KyZMn\nAxXJvF4vmZmZ5OTkNGgnLy+PzMxM/H5/o5XP6hLGnF01ra4i25kzZ6iurgZqA/jp06epe6J7dgU3\nqK2WlpeX16D/cyur2Ww21q5dS0lJCVVVVU2OAeDEiRMcOXIEj8fTos/uciKZ4oQQIoSYLCbcvuan\nYYXaW+8VtgriIxqueq8LqlFRtalhH3zwQQwGQyBZy9q1a/H7/cydOxetVktycjL9+vWjuro6UPns\n5ptvJjU1lTlz5nDttdeSmZnJ/PnzSU9PZ/HixZSXl9OnTx8WLFjAli1bOHDgAMnJyZSWlvLhhx9S\nVFTEggUL2LZtGx9++CF/+MMfGDlyJMeOHaNfv34A7Ny5k8cff5y0tDT27NnDK6+8QlFRERUVFaxY\nsYLBgwczffr0Rscwf/589Ho9MTExJCYm8uijj7bxb+H7SQK6EEKEEJfX1arrHJ76z6Lz8vIYN24c\ndrsdn8/H9ddfD8ALL7xATk4OZrOZ+fPnY7PZ+Oyzz4iKiqpXZjU3N5fPPvuMVatWAfDII4+wZMkS\nZs+ejdvtZsSIEaSnpwOQnp7O7bffTkVFBe+++y6HDx9GpVKxYMEC/v3vfzNkyJBAu7/73e/YunUr\nSUlJPPPMM4Fa6I8++iibN28mKSmJAwcO8PTTT7NhwwaSkpIuOIaDBw+yZcsWevbs2arP7nIhAV0I\nIUJIfGTL95arVWoSjAn1jnXr1o3t27cD8Prrr/PYY4/x0ksvMWPGDPr27UtKSgoul4vy8nKys7Pr\nBd3GnDp1iszMTN577z0URWHAgAGB11JTa1fZFxQU0Ldv30DK19TUVHJzc+u1bbVaSUpKqvc6NF1Z\nrTljWL16Nffffz9lZWU8/PDDgfroVxoJ6EIIEULiI+KJDovG4mx+cZbo8GhiwmPOe47FYiE/Px+A\nVatW4XK5eO6551AUhYEDB/Lqq6/WO//cymcDBgygZ8+e3H333Q3argvg3bp148SJE/h8PjQaDRkZ\nGdx555313198PIWFhaSkpJCRkRE43lRlNY1Gg9/vR61WNzmGCRMmMGHCBEwmE9dff70EdCGEEO0v\n3hhP94TuHC483KzzVSoVfZP6EhlWvxhJ3S13RVHw+XysW7eOLl26YLFYmDdvHk6nM1AsZdKkSfzr\nX/9iypQpdOrUibS0NBYtWlSv8tnDDz/M3Llz2bZtGzqdjsjISNauXVuvz7i4OO666y7GjRtHQkIC\nRqORSZMmUVhYGDjnj3/8I9OnT2fw4MFUV1cH6po3VVltzpw53HDDDUyYMKHJMYwZM4Y+ffpQWlrK\n/Pnz2/Lxf69JYhkhhAgxfsXPm/vepNJWecFzO0R2IH1EevPb9vsxmUx07NixQV1xq9WK3W5vtIJa\nHbO5djV9fHzTjwbsdjsul4u4uLhGX3e5XLhcrkYrrDWnstq5Y/D7/RQVFRETExNY/HclkoAuhBAh\nyO118+5X71JuK8fnb1hGVaPW0DG6I7Ovno1GrWmHEYpQIwFdCCFC2N6cvRSU52JU64lQh1Hjc+BU\nvPTo2Idru13b3sMTIUQCuhBChCqfD6oqweOq/f9QWwNdrQG9HmLjQS35wUQtCehCCBGKPG6orIDz\nZT7TaSGhI2jklruQ1K9CCBF6fD4wXyCYA3i8UFEKfn9wxnUBVqs16H02VfilteoS8ZzL4XA0evxi\nuFjvQQK6EEKEmiozeJuZk9zjrb0tfw6TycRdd93Fddddx+jRo/nd7353kQfZ0LBhw9p0fWsKwjRV\n+OVCmvp87rnnHr7++usG599///3s2bOnxf00R2FhIT/+8Y9bfN25hWskoAshRCjxeGqfmbeEywm+\n76qpeb1eJk2axI033sgXX3zBjh07SElJwev1BoqcQG2hk8rK2i8DNTU1ZGRkNFp4JTc3F5PJVK/L\n6upqMjMz6yWfqWvz+PHjOJ3flX5trO2zz63LFtdYQZhzC7ZAbXEXv9/PsWPHSEpKqlf4xWQycejQ\nofPOeJv6fM7W2HuuoygKp06doqSkJHDM4XBgt9sxm82BBD6NfUbl5eWNfkZna+w9uN1uDh06RFZW\nFtB44RpJLCOEEKHE6wFfC2+h+321XwQ0tb/S//Of/9CjR4/AzFWj0XD33XfjdDoZM2YMX3/9NRqN\nhjfeeIOcnBwee+wx5s2bR2pqKgcOHGDhwoXMmzePxYsX43K56Ny5M9u3b+fFF1/k+uuv56OPPuLJ\nJ59k1KhR7Nq1i82bN9OlSxe8Xi8LFy4kISEhUOktJiam0baLi4u5+eabGTZsGE6nk4ULF7Jr1656\nBWFUKlWDgi2DBg1i5MiRXHvttXTo0IHFixfz85//nG3btrF7925efvllkpOT+eyzz1i/fn2jKWSb\n+nzqPPXUUw3ec+Cvx+tl2rRpdO/enby8PMaOHcuvfvUrNm7cyLp16xg4cCBTpkwhKiqq0c8oLS2N\nUaNG1fuMztbYe+jVqxcTJkxg9OjR1NTUMG3aNMLCwuoVrrnrrrtAEUIIETqqqxSl4EzL/9RYA008\n//zzykMPPdRo8w8++KCyefNmRVEU5brrrlPOnDmjKIqiuN1u5ejRo8rOnTuV4cOHK4qiKOnp6crb\nb7+tKIqifPzxx8r999+vKIqiDB06VCksLFQURVHWr1+vLFu2TFEURUlJSVGysrIURVGUdevWKb/5\nzW+abPuhhx5SXn/99Xpjy8nJUaZMmRL4eeTIkUppaamiKIqyf/9+Zf78+YqiKEqXLl2UvLw8RVEU\nJT8/X5k4cWLgGovFomRkZCjPP/98YFznOt/n09R7vuuuu5Rdu3Yp77//vnLvvfcqiqIoPp9P6dev\nn1JVVaWsW7dOufPOOwPttOQzutB7yM7OVkaNGqVUVVXVG2v//v3r/Sy33IUQIpRoW7li/ayV7p06\ndWrydvGiRYt49dVXOXToEHFxcXTr1o38/HzGjRvHxo0b2bdvX71b47169QJq07paLLX55auqqujc\nuTNQv8CKXq8PnJ+amsqZM2eabLs5BWHqCrakp6ezcuVK+vTpA4DRaAykjD3bRx99xMyZM/nwww85\nceIEZWVljbZ7vs+nqfdc58yZM4GiMGq1mp49ewZS29YVqWnpZ3Sh99CzZ09uv/12ZsyYwcSJEzl8\nuPG0wBLQhRAilOj0Ld9brtGAVhf4cdKkSezcuZPs7OzAsbog0K9fP1wuF0888QT33nsvAJ9++ikz\nZ87kD3/4A1OmTLngau4OHToEAlRGRkagoIrb7ebYsWP1jjfV9sCBA9m7d2+9ds8tCFNXsGXjxo28\n9dZbLF++HKBByto6mzZtYsWKFSxfvpzU1NRALfhzne/zuZA+ffrwzTffALW337OysgJfLs4eV0s+\no+a8h0WLFrFjxw7uu+8+Vq9eDXxXuKaOPEMXQohQotPX/nE1vmCqUXoDaL/7dR4fH88bb7zBnDlz\n6NKlC3a7nbCwMLZs2QLAT3/6Ux566CGmTp0KwNixY7nppps4duwYGo0GvV5/3u6eeuopZs+ezaBB\ngzh9+jSbN28GIDw8nL/85S+BRV9bt27FYrE02vbSpUuZNWsWO3bswOv1snTpUtLS0uoVhGmqYEtT\nZsyYwX333cegQYNwOBwYjcZGz7vQ53M+U6dOZf369cyePZuSkhKWLFnSaP74lnxGDsd3tewbew+H\nDh3igQceoHfv3hw/fpwnnngCoF7hmscff1wSywghRMjxeqHcVG/lepO0WkhsOrlMRUUFYWFh9Yqd\n/PWvf8VkMgVmvFBbMMVqtQYqsF14iF4qKioaLeRSVlZGYmJiYMZ6vrZNJhNhYWGNFmqp05yCLXUs\nFgtqtZrIyMgLnguNfz7NYTabCQ8PJzw8vMlzGvuMUlNTOX78eIPP6ELvweVyYTKZSEpKwmAwNNqf\nBHQhhAhFLldtprjzBXWNFhISa2f0zfTII49w4MAB3n//fWJizl9D/XKwYcOGBtvlHnrooSZv219q\nw4cPZ//+/ZekbQnoQggRqrye2iQzHg9ujw+nT0W4FnRaTW0Qj4sLbFUTjTtx4kS9W9oAQ4cObafR\nXFoS0IUQIoTlFFvJK7Xg9vhAAUWlEK7X0r1zDN06NO+2srgySEAXQogQ5Pcr7D1WSoXFid/f8Ne0\nTqMhMcbAsNSOtNPdYxFiZNuaEEKEoJ2HiyircjQazAE8Ph/FZju7M0safb0xbSme4vF4cLlamJJW\nBJUEdCGECDFHz1RitbkvfCJgtjo5VVhd71h1dTUjR45k9OjRjB49mjvuuAOAkSNHtnpMmzZt4tln\nn23xdecWEBGXjtxyF0KIEFLj8LD3WAk2RzO2rH0rKkLPqEGdCNPVbl0rLy9n9OjRHD9+vN555eXl\nJCYm4nA4UBQFp9OJzWYjMTERRVGw2+1YLBZ69eqF1WolLy+PAQMGoFarcTqd+Hy+wPauuiIkffv2\nxWg0UlVVRVRUFBqNBrfbjcvlQq1WM3ToUHbt2kVYWBixsbFAbbY1v99Pz549A2MrKirCZDLRq1ev\n825hE02T5ZFCCBFCbE4PNmfzgznUfgmwO72BgN6UuiB/biGRmpoaXnvtNYYMGcLhw4cZN24cubm5\naL7d2/7mm2/yzjvvkJuby/Lly1m5ciVbtmxh+PDhuN1unnvuOebNm8eqVavo06cPO3fuZPPmzfz4\nxz+uV0Dkzjvv5LbbbiMsLAy/309UVBQvvvgi69atY/PmzQwZMoTS0lL+9re/tfrzu5JJQBdCiBBS\nbXNDC++bKn4Fq91NfNR3CUfy8vIYPXo0APPmzWPRokX1rvnBD37Aa6+9BsCrr77KNddcw5o1azh+\n/DhTp04lKysLtVpNampqvVSwlZWVvPrqqxw+fDgQ8Jtyww03kJSUxKpVqwDYunUriYmJvPDCCwDc\neOON5Obm8vnnn7Nw4UJ+8pOftOyNi3okoAshRAjRaFq3ZF2rqb8kqlu3bnz++edNnn92IREgcPs7\nNjaW7t27o/42n3xkZGS9fdz5+fn069fvgsG8MadOnWLv3r2kp6ejKArR0dE4nU5++9vf8tvf/pY/\n//nPTJs2jd///vctbltIQBdCiJASG6FHo1Hh8zV/mq7TqIky6i584llamymtR48eHD9+HLfbXS/n\ne1xcHCaTiT59+pCZmRk4XldARK1WM2DAAPr378/f//73Bu2+/vrr+Hw+rrnmGhYtWkRKSkqrxncl\nk4AuhBAhJMpoINqop9La/C1iUUYdUeHNT//aFtHR0fzyl79k9OjRDB48mLCwMNasWcPChQu59957\nufrqq/F6vcTHxwMNC4h8+OGHTJ48ma5du5KXl8eWLVt46KGHMJvNaDQaevXqRXJyclDey+VGVrkL\nIUSIKa6w83VWOR7P+cuYAhj0an7YN4nE2KaLhFwKbrebsrIykpOTA7fnbTZbYLHb+djtdqqrq+nU\nqVPgTkFdffKkpKRLO/DLmAR0IYQIQcfOVHK6yFKv3vW5tFo1qV1j6d358i+yIi5MAroQQoSo3BIr\nWUXV1Dg8AKhQUKid0UaFa+nbJZ6uSS0r+ykuXxLQhRAihNmspVish8BbikrlQ1F0oE0mNuEqwg3x\n7T08EUIkoAshRIhy2b7EbfsGv6+6wWtqTSyGiGvRR1yepUBFy0lAF0KIEOSwfIbHfghFOU/WOJWW\nsIg0DFEjgjImt9uNoigYDIYLn3wRORwO9Hp9q/a+X0mkOIsQQoQYt+MYHnvm+YM5gOLF5TiIx5VT\n73BTxVna6o033ghkeWutTZs2kZ+f36JrHnjgAfbu3dumfq8Esg9dCCFCiN9vx1XzFYrSvH3ois+B\nu2YvOkNX6n6lezweKisrmyzOAlBTU4NOp8NgMOB2uzl+/DgRERH07t27tl1F4fTp00RFRdGpU6d6\n7ZSVlWG32+nevXvgWHZ2Nk6nk379+qHVfhdazi7iotPpeOedd4iIiMBgMAS2qJ1brOXc4jFPP/00\n4eG12/K8Xi8nTpzAaDTWK+4iJKALIURIUbwVKN7yFl3j85bj81Si0XU473lnV2BbsWIFQ4cO5cYb\nb2TChAmMHj2ampoapk2bxtSpU5k2bRrdu3cnLy+PsWPH8qtf/QqAzZs3c/LkSXJycpg0aRKPPPII\na9eu5ciRI2g0Gr755hs++eQTwsLCGhRx+cUvfsHhw4d544032LVrF3/6058aLdZybvGYbdu2sWDB\nAkaPHs2DDz6IwWCguLiY6Oho1q5d27oP+jIkAV0IIUKI12NCoWXV1hS/G5+3vF5Av1BxljolJSWo\n1WqWL19OTEztfvbNmzfTq1cvXn75Zfx+PwMGDGDx4sUA9OrVi7/+9a/4fD4GDhzIkiVLuO+++zCZ\nTBQUFPD888/zv//9j5EjRzZaxGX48OEsWrSItLS0Jou1QP3iMdu2bQtc/8ILL5CTk4PZbGb+/PnY\nbLZASdcrnQR0IYQIJRd6bt7UZYqn3s8XKs5Sp2fPntx+++3MmDEDrVbLqlWrOHPmDAMGDABArVbT\ns2dPCgsLAejfvz9Qm6O9a9eulJaW8tprr3H69OlA+dOysrJmFXFpqlgLNCweA+Dz+ZgxYwZ9+/Yl\nJSUFl8tFeXm5BPRvSUAXQogQotYmAipaVENVpUGrS2zWqXVFVTIzMxk6tHbL26JFi1i0aBHvvPMO\nq1evZubMmbzzzjtA7TPrrKwsunbtCsChQ4eA2uf0+fn5JCcn8+6773LkyBFUKhUHDhxAUZQmi7jU\nPbMHmizW8vnnnzdaPKZuMd2qVatwuVw899xzyEat70hAF0KIEKLRJaLWxuL3Vjb/Gm0cKs2F07/e\ncccdTJw4ka5du1JTUwPUBugHHniA3r17c/z4cZ544gkmTZrE+vXrmT17NiUlJSxZsiSQn72iooJb\nb72V3NxclixZgl6vZ+rUqUydOpWoqCisVivQdBGXGTNm8Oijj9KtWzf++c9/NlqspSldunTBYrEw\nb948nE5nYIGfqCX70IUQIsS4anbjrNkHStN53L+jJTz6evQR1zSr7YqKCqKjo9Hpviu36nK5MJlM\nJCUl1dtjbjabCQ8PD6wwr+N0OnG73URHRweOmUwm4uLi6rULjRdxOVdjxVqa4vf7MZlMdOzYsdUl\nYC9XEtCFECIE1VS8jc9dcMHzdGG9McbNDMKIRKiTgC6EECHJj73y//C6z6D43Q1eVavD0Rh6YIyd\n1g5jE6FIAroQQoQwj/0IltKvcNZY8blAEwZhUTFEdxyBLqxvew9PhBBZFCeEECHKXl1KceZhnNZq\n/N7vZukaHVQXf03KDxIwRErFNVFLZuhCCBGCakzZFBzehsdpbfIcfXg03a6ZTnhschBHJkKVFGcR\nQogQ47SUUXDk0/MGcwC3w0Le1x/hdliCNDIRyiSgCyFEKFEUio7+D08zg7TbXk3xkU8bHC8sLCQ9\nPZ2xY8cyadIk/v3vfwdeS09PZ9y4cUyYMIE777yTXbt2BV77/PPPSU9PZ+TIkVRXN6zDLkKXPEMX\nQogQ4rCYcFpaVpzFUV2Ky1aJISIOqM3iNnnyZJ599ll+9KMfUVpayqRJk4iLi2PEiBFkZGSwbds2\nEhIS+Oqrr7jzzjt58cUXGT9+PAkJCSxbtozbbrsNj8dzgZ5FKJEZuhBChBBHtQmfx9miazwuGy7b\nd5nl/vOf/9CnTx9+9KMfAdCxY0eWL1/Oiy++WO86nU7HiBEjePrpp3n22WeB2nSsQ4cObTIJjAhd\n8jcmhBAhxOuqadV1Z9+iz87Opm/f+lva+vfvT3Z2dqPXDhgwgJycnFb1K0KHBHQhhAgh+ojYVl1n\niPhu+1rHjh0pLS2t93pJSQkdO3Zs9Nri4mI6derUqn5F6JCALoQQISQ8uiPasJaVA9WFRwWenwPc\ncMMN7Ny5kzNnzgC1ZUdXr17NLbfc0uBaq9XKk08+ya233tq2gYt2JwFdCCFCiCEyHmML95VHJnZH\nFx4V+Dk+Pp7169dz8803c8stt5CWlsa1115bL2jPmjWL0aNHM2nSJMaPH8/dd98NwPbt2xk9ejQ5\nOTlMnz6d55577uK8MXHJSWIZIYQIMV6Xnazdb+G2V13wXH1kPH1Hz0Ot0TX6uslkIj4+Hq1WNjVd\n7iSgCyFECHLbKsnZ/z5ue9N10Q2R8fQccQu6Ft6iF5cnCehCCBGifB4nxZmfUVVZRInHS7VGT5zf\nTUeNhrgOPUgeNA6VWmbeopb8SxBCiBCl0YXxScchfG5Iocbnw4OCDhWRGi2T4hO4TYK5OIvM0IUQ\nIgRZfT6WZR2nwOnE18jrWpWKnmHhPNO7P3pJAiOQVe5CCBFynH4/D54+zpkmgjmAV1E45bCz+PTR\noI7tfPx+PzabLej9KorSLv2GGgnoQggRYl4qzKPQ1bz0r0UuN+uKC+odq66uZtSoUYwbN45p06bx\nj3/8o9l9V1ZWsn79+haNt052djZz585t1bV1Dh48yI4dO1p0TVFREbNmzWpTv9PUYmoAACAASURB\nVJcDCehCCBFC8l1Ovq45f9nUs/kVhb3VVZR53IFjHo8Hs9nM9u3bWb9+PU888QQnTpyguroar9fL\nmTNnApXUioqKOH36NHVPX/Pz83nzzTcpKSnBbrcDtYlpjh8/Tnl5/aIx1dXVZGZm4na76x232+2c\nOHECv98fOFZTU0NGRkaDNurazs3NBeCLL77gv//9LyUlJXi93kB7mZmZgfEAlJeX4/f7OXbsGElJ\nSfzzn/8MvJadnc3Ro0cD118pZEWFEEKEkFyHg3KP+8InnqXE46bY5aKDTt/gtY4dO9K3b18KCwv5\n/e9/T3l5OX369GHBggVs2bKFAwcOkJycTGlpKR9++CFbt24lOzubFStWcPPNN5OamsqcOXO49tpr\nyczMZP78+aSnp/PRRx/x5JNPMmrUKHbt2sXmzZsByMrK4q677sJoNFJaWsqWLVtwOp3MmzeP1NRU\nDhw4wMKFC5k3bx7FxcXcfPPNDBs2DKfTycKFC9m6dStWq5WamhqWLVtGVlYWjz/+OGlpaezZs4dX\nXnmFQYMGMXLkSK699lo6dOjA4sWL+fnPf862bdtYu3YtR44cQaPR8M033/DJJ58QFhZ2Uf5uQp0s\nihNCiBDyVmkxb5QWtfi6+1O6My0hEaidvQ4YMIAlS5aQn5/P3r172bNnD/fccw9Tpkzh9ttvp6Ki\ngrFjx3L48GFUKhULFizglltuYeDAgSxatChQP/2RRx5h+PDhzJ49G7fbzYgRI/j666+5+uqr+eij\nj+jcuTMbNmzg6NGj3HPPPUyaNIns7GzUajXz5s3j7rvvZty4cXg8Hk6fPk15eTkPP/ww+/bt4+GH\nH2bIkCHccccdgfexYcMGSkpKePTRRwEYNWoUmzdvJikpiQMHDrBmzRo2bNhA165d2b17N127dqWg\noIAFCxawbds2oDaZTkFBAc8//zxz585l2rRpbf1r+V6QGboQQoSQ6FZmdIs957rw8HDS0tL40Y9+\nxJo1awKZ4lJTUwEoKCigb9++qFSqwPHc3FwGDhxYr51Tp06RmZnJe++9h6IoDBgwAICqqio6d+4c\nuPbjjz8GoG/fvoHSq6mpqZw5c4b8/HxuvfVWxo8fT2xsbOC2e3Z2NvPmzTvv+8rJyWHp0qUoioLf\n72fQoEEAGI1Gunbt2uD8X//615w+fZohQ4ZQWlpKWVlZMz/B7z8J6EIIEUL6hBsxajTYfU2tb28o\nWqul2zm3lY1GI5MmTWpwbl0A79atGydOnMDn86HRaMjIyODOO+/EYDDUeyY+YMAAevbsGcj1XqdD\nhw7k5ubSo0cPMjIyAuVajx07htfrRavVkpGRwYQJE/j000+ZOXMmy5Yt4/Dhw4G67AMHDmTv3r0M\nHTo00O65/ffu3Zvf/OY3DcrB1r2Pc7377rscOXIElUrFgQMHuJJuQktAF0KIENIn3EgPQzhH7c2v\ni94zPJwUQ8ueE8fFxXHXXXcxbtw4EhIS6n0BCA8PZ/r06dxzzz08/PDDzJ07l23btqHT6YiMjGTt\n2rU89dRTzJ49m0GDBnH69Gk2b96MxWIhISGBuXPn4vP5MBqNjBo1iuTkZG666SaOHTuGRqNBr699\n1r906VJmzZrFjh078Hq9LF26lNGjR7N69WoOHDjA6tWrWb16NbfffjsDBw7EYrEwceJE7rvvvibf\n19SpU5k6dSpRUVFYrc1fXHg5kGfoQggRYjJtNfwpLxuzx3PBczvodPyuRx96hhtb1ZfdbsflchEX\nF3fe88xmM1Bbya2O1+uloqKiQZ11v9+P2WwmMTExcMzlcmG1Wusdq2MymQgLCyM6OrrJ/ouLi4mO\njiYi4sJ5600mE3Fxceh0jResuVxJQBdCiBD0X3MFrxYXYPE1vfUqTqvjF126kRYdG8SRiVAlAV0I\nIULUAauF9SUF5Dkd+BSI9quwqBU0ajVd9QYWp3TjBxGR7T1MESIkoAshRAgzV1gpKKjAZ/PUFmdR\nqdAZDfTq0QFjTHh7D0+EEAnoQggRokpPlVJjqsHraXjbXWvQEp0UTYfeHdphZCIUSUAXQogQVJhZ\nSE3ZBVa6qyAmOYZO/Tq1qS+Px4Pf78dgMLS6Db/fj8PhaNaiNXFpSC53IYQIMZUFldjN9gufqIDV\nZMVSamnw0h//+Eeuu+46xowZw80333zeZjZt2sSzzz7b2uECF6cwC8DKlSvb3MaVSvahCyFECPE4\nPVSXVOP3+S98MuD3+qksqCQyIRK1tnaO9tlnn7Fr1y527NiBVqvl5MmTADgcjkCpUbvdTvfu3QGY\nNWsWvm8T2ZSXlxMfH8+JEyfo168farWa06dPExUVRadO390J8Pl8nDp1irCwMHr06BE47nA4yMnJ\noX///mg0GqB2G1lJSQm9e/euN4O32+3k5OTQs2dPjEYjNpuNtWvXcttttxEWFkZsbGygn8TExHpb\n3k6cOIHH46F///5X3Pa0pkhAF0KIEOJ2uHHZXC27xu7G7XATFlWbXMbtdmO32wN7xPv16wfAxo0b\n2bBhAwMHDiQnJ4dJkybxyCOP8M4775Cbm8vy5cvrFT158sknmTt3Lt27dycvL4+xY8fyq1/9qtGi\nKklJSeTk5LBo0SI0Gg2lpaV89NFH7N69m5dffpnk5GQ+++wz1q9fz6BBg9i5c2eDoitFRUVUVFSw\nYsUKBg8ezPTp0xstDDN//nz0ej0xMTEkJiYG8r5f6SSgCyFECHHVuKCFK5v8Pj8umysQ0CdPnsz+\n/fsZPXo0Op2On/70pzz44IMA9OrVi7/+9a/4fD4GDhzIkiVL6rXldDp5+umn6dq1K5s3b6ZXr168\n/PLL+P1+BgwYwOLFi3n22Wf52c9+Vq+oyunTpwF4/fXXARgxYgRms5lRo0YxePBgcnJySElJ4fXX\nX+cvf/kLjz76aL2iK08//TQbNmwgKSmJVatWAbWFYZYsWVKvMEx6ejoHDx5ky5Yt9OzZs1Wf8eVK\nAroQQoSSVi5TVvFdbnOVSsUTTzzBE088QX5+PjNmzGDIkCEA9O/fHwCNRkPXrl0pLS2t187ZRU/O\nnDkTKMaiVqvp2bMnhYWFTRZVOTvAxsXFYbFY2LNnDytXrmT8+PEUFxcHapo3VXTlbE0Vhlm9ejX3\n338/ZWVlPPzww8yZM6d1H9plRgK6EEKEEEOkAZVaheJvfmRXq9XoI76rhV5dXU1UVBRqtZquXbsy\nYMAAKisrATh06BBQu7I9Pz+f5OTkem2dXfSkT58+vPPOO0BtmtesrCy6du3aaFGVpmzatIkVK1Yw\nbNgwXnjhBQ4ePAg0XXRFo9Hg9/tRq9VNFoaZMGECEyZMwGQycf3110tA/5YEdCGECCGGCAN6o772\n1nsz6SP06MO/C+gHDx7koYceon///pjNZjQaDTfeeCMbN26koqKCW2+9ldzcXJYsWRIolNKYqVOn\nsn79embPnk1JSQlLliwhKiqq0aIqHTo0vh9+xowZ3HfffQwaNAiHw4HRWJtzvqmiK3PmzOGGG25g\nwoQJTRaGGTNmDH369KG0tJT58+c3+3O63Mk+dCGECDFVhVWUZZc1a6W7RquhY9+ORHWMqnfc5/NR\nUlJCREQEsbG1ud5fffVVqqqq+PnPf47b7T5vMZSzmc1mwsPDCQ+vn5muOUVVACwWC2q1msjIhmlq\nm1N05dzCMH6/n6KiImJiYoiKimryuiuNzNCFECLExKbEYq+2Yy2znveZukqtIjopukEwh9pb1ykp\nKfWOGQwGwsLCAn+a6+wKa2dLSkpq1vXnC/jn3vJvTv9qtZouXbo0q+8riczQhRAiRJWdLqO6rBqf\ny9fgNZ1BR3SnaBJ7NixHKq5MEtCFECKEVVXYyS+vptLtx6cGraIQp9PQq1OsFGcR9UhAF0KIEFVU\n4+RYRQ0Wl4ezf1OrgCiDlsEdoukY0fr86+LyIgFdCCFCUHaVjczyGjznWRhn0Ki5KimaLtEyUxdS\nnEUIIUKOye7i+AWCOYDL5+dwmYUqpydIIxOhTGboQggRQnwKfJ5fToWj+UG6Q7ie67sl1F7v8zF2\n7FigdnuXSqVCpVKRlpZGcnIyn3zyCVu3bkWtrp3PzZw5k6FDh/Lb3/6WjRs3snbt2kC7nTt35l//\n+tdFfHfiUpJta0IIEUKqXR6q3d6WXeP2YnV7idJr0Wg0fP755wDcfffdTJ8+nZkzZwLw85//nMLC\nQrZt28bkyZPZs2cPWVlZgf3h6enppKenA7BmzRpyc3Mv3hsTl5zcchdCiBBS5XDj9bXsxqnb58fq\nat6XgDvuuIM33ngDgPXr17NgwYJGz/vb3/7GXXfd1aJxiPYlAV0IIUKIx9+8OujncjWzfnqvXr0o\nLy+npKSEkydPctVVVzU4JyMjg7CwMFJTU1s1FtE+JKALIUQIiTLoWnxN3Ta25rrllltIT09n1qxZ\njb7+2muvyez8e0gCuhBChJAovRajTtOia4x6LREtuGbOnDnExMRw2223NXjN5XLxwQcfcMstt7Ro\nDKL9yaI4IYQIIVF6LR2NBnKq7c06X6WClEgD4drmB/SoqCjee++9Rl/bvHkzkyZNarSQightsm1N\nCCFCjF9R+DS3HOsFVrsrQKxBy8QejZcuFVcWCehCCBGCPD6FXQUVWFxe/I38mlarIc6gZ3TXBDSq\ndhigCDkS0IUQIoQdK7eSb3Xi8fvxKyrUgE4DPWIi6BffdA1xceWRgC5ECHL4fdh83/7x+7D7fHgU\nBavPh8Pnw+n34/L7v/1fHy5Fwav48SoKPkUJ/K/H42HvutcASLvnp+i0GrQqFVqVGp1KhUatRo8K\nnVpN2Ld/wtVqwjRqjGoNenXteWEqNREaDZEaLREaDRGali3aEm2jADa3F4fXh1HXsgVw4sohi+KE\nCBKvolDl8WDxebH5fVi9Xso8Hso8bsxeD9UeD9ZvA7iigIKCVwG3349L8eP2+2npt+9vlj1GySf/\nBSAr8yhXPfXHFl2vVoFOpUavVmNAhVatRk3tQqwIjZZItYYYrZZ4rY5OBgMddXqitdpA8I/U1H6B\nEG2jAiL1WiL18itbNE3+dQhxEfkVhUqvlwqPG7PXS3Z1FW+ve5W4ET8krG9f/IqCw+fD7vdj9/su\n6VhcFRU4CvIDP9vz8nCbzejj45vdhl8Bl1J7N8DasIdGrzGqNRg1tV8CtCo19mMnKT/wJbPvvpO+\nsXF00utJ1OlJ0LV8v7UQomkS0IVohUqvB7PHg9nrocjlIs/loNjlwuz14kPB4fNjtlbzxfyfYjl+\nHF10FEOfeYqEEcODNkZDQgJJEyZQk3sGFOg4aWKLgnlr2f2+wJeVij37+OaXj+KxWNn97ruM2LCO\nmIhIwr+99Z+g1ZGsN9ArPJze4RF00OlI0OnRyaxeiBaTgC7EBVh8XopdLvJcTo7aa8h2OPAqfqy+\n2tvmziZSdZYf/AZ7fh4AHouVwg/+L6gBHaD3T+/EWVJCUs4ZOty1IKh9AxR+uAWPpXZub8/Po+rr\nDDSj0qhx1wb8YpeLI7YaqAStSk20VkOYWkOsVksXQxi9w8LpGW6kk15PB50+6OMX4vtEAroQZ3H4\nfRS5XBS4nBy12zhtt2P1ebH5fFT6PLRkCWnidSMJT07GejoLbWQk3ebOuXQDPw9Dh0SqExNpj53K\n3W6Zg2nX53itNYR37kzCqLQmz/UqfsweP+ChyAVHbTVA7S38GJ2WcJWGXuFGhkRG0Cc8gi6GMJnJ\nC3EWCejiipbnclDg/DZ4O+xUejzY/X4qvR58F2EDyIg3/sahX/2a/j4/EVcNvggj/n6Jvfoqus35\nCYY9+0h57ZVWtWH3+7C7amf02U472yrLidJoMWo0dNTrGWCMYGhkFN0M4cTLc3lxBZOALq4opW43\npx02DlotHLXX4FYUyjxuvP5Ls3tTGxFB4qg0zmRlM/CS9BD6PBYL4T+5GW2E8aK1afV5sfq8lLpd\nHKqx8m5ZKfFaHVFaLf2NRq6KiKZ7WBhdw8KlYIW4YkhAF5e1aq+X/3x5gNKYaLJ1Wqq9Hsq9bjyX\nKIA3xtglBdOOXUHrL9TYCwrodMOkS9qHV1EwedyYPG6yHHb+Yy4nQasnXqcnwWanu83BtGHDZGW9\nuKxJQBeXFbffT47TwWFbDV/VWPhy63/Y+8yz+NxurlrxJ2KG/CDoYwpPScFRWBj0fkOFo7CI8JTO\nQe3Tp4DJ4+bklwfJeGw5Gr2OEQ8/xDVTJvPD6GiujYqhd1h4UMckxKUmAV1875k8bo7W1LDbUsUZ\npwOLz0uV14vXZufz3/8BZ0kpAMeeWcnwV19GrQ/uamljlxTsBVduQLcXFGLskhL0fn1OJydWrgp8\nmfriyd+j/uHVHLZZ+ZeplCiNmkERkYyJjWeAMYIojfw6FN9v8i9YfC+Vut1k1FjYVV1JkctFqceD\nT6m/fUyt02JITAwEdH1MdNCDOYBKq8WQEI+z1ERYx6Sg99+eHEVFhCcn16aWCzJNWBjas0qAhiV1\nQKWufaJu83mx+aDEbWZ7VSWJOj1dDQZGRscyJDKKLoawoI9XiLaSgC6+N4rdLjJqrOysrqTE5cLk\ncZ93Jbpar2f4qy/z1QMPoc7K4ZrnVwZxtPXV3Xa/4gJ6O9xuP9s1q1fyxU9uJQkVvdc1fnfGpyiU\nul2Uul18abXQQa8nVqNlTGw810RF00tuzYvvCQnoIqQVulxk1FjYWV2Jye3G5HHha8F6Nk14OMNe\neYldM2Zhyy8gonu3SzfY86i77R53zdXt0n97aa/b7XVsZ84AKvq9/69mX1PmdlOGm1MOOx+WG+ig\n1zE+No4fRsXQSW+4dIMVoo0koIuQU+RyctBq4XNLVW0Qd7tpeVmS+hJGplGxZ2+7BfTwLik4rsDn\n6O0d0Cv27CNh5IhWX1/mcVHmcXHCbqOjrowuBgOT4hO4KjKKaHnmLkKM/IsUIcHl9/Ol1cK/zWUU\nu90Uu51czJ1liWkjKPjgQ7rdesvFa7QFjCkplO/Z2y59tydHYSFJY8e0W//le/bRbe5P2tyOT1Eo\ncjspcjvJsFlJ0ulJNUYwIS6BwRGRaCRjnQgBEtBFu8pxOvisqoL91dWUejw4L1EFsoS04WQ8tvyS\ntN0cV+oM3VFQSHh7ztD37efqlX+5qG26/H7yXU7yXU72WKqJ12oZHhPDmJh4+oZfvOQ5QrSUBHQR\ndDafj33Wav5jLqfI5aLc477kfWrCw4nq15eqjEPEXjXkkvd3LmNKZ+yFRUHvt73ZC4swttOiuMqv\nvibmB4Mu6c6GGp+XGp+XPJOT/5nNJOh03BCXSFpMjBSTEUEnAV0EzbEaK9stlXxttVLqduNWGq9S\ndqkkjBhOxb797RLQDR064Kmuxu92t8vWufbgczjwORxBKdnamIq9+0lIC151O7O3tpzuaUcemysM\n/MAYydT4RFIjIi98sRAXgaQ5FpeU3efjE3M5w+65m8kzbuKtL78k3+UMejAHSBw5gvI9+4Leb50r\nLcFMey+IK9+7j8S01i+Iay0FKHK5eP/gASZNn07avfewu7qqjcs6hbgwmaGLS+aDchOfmMvZ8bcN\nHH1tPYrfj/l0FmlvrkcfFxf08cRdczXVh4/g93hQt0NO7/CUzjgKi4js1TPofbeH9tyD7nM6sZ44\n2S53YwDclZUcvH8p9oICinbu4mcdEhhxxzymxCUyPi6eOK3klBcXn8zQxUXl8PtZX1LIbUczeLko\nn2yng/L9B1D8tTNyd1U1bnNlu40vIW0EFXvbZ5Z+pS2MsxcUYOzSpV36but2tbZyV5hxV1cDoPj9\nlOzZS57TyWslhSzLOsGLhXlkOR3tNj5xeZIZurgoytxuNpYWsdtajdXrrffakD//nr3z78JVUkry\n1ClE9u7VTqOsXe1esXc/Ha4fHfS+jSldsBcWBL3f9uIoKMTYTvv+y/ftI3FE+wX0yD69SZ46hZJP\n/ktYx44M+fMfAPArCoUuF4WuMvZZqukeFsaPE5IYFh3TbmMVlw8J6KJNshx2NpYWk2GzYPc1/lxc\nEx7OD19chWn7TlxvvxPkEdaXODKNb5Y92i59h6d0pvKrr9ql7/ZgLywicVRau/RdsWcf3W+d2y59\n17Hn5fGj68dQs2QxmrCGueHLPW7KPW6O22x00Ou5KSGJiXHxGNRy41S0jgR00Spf11j5h6mIU3Y7\nLv+FF7gZkpLoestP2LHhDVLa8dlqZO9eeKqrcZVXYEhMCGrfV9qiuPbag+4sNeFzOIjo0T3ofdex\n5+XhKCrB88pLXChZrM3vw+Z08FJRHh+UlzItoQNTExLRqySwi5aRfzGi2RTFxf+qzPzs5FF+nX2K\nIzU1zQrmZ+s2dw55b2+6RCNsnvZ6jn6l1UV3FBYSnhL8gF6xZy8JI9vnzkCdvLffaXGGOp+ikOdy\nsq6ogPtPHmNLeRne8xQfEuJcEtDFBSmKG1fNblZlfc4zeTnkOB14W7kJ50oO6NoII2qdHndVVdD7\nDjZXeQXaqEg0huAXMynft5/EEcHbf96YvLc30W3unFZd66M2sP+1uIDFp47ycUUZfgnsohkkoIvz\nctsOYiv/O07rXm43HmJQWNuyumnCwug0eRKFH/7fRRphy7XnfvQrZaV7e6Z8be8V7gXvf0Dn6dPa\nvDXSq/jJczp5uTif+04e5T8V5bKXXZyXBHTRKLf9ENay13BYduDzVgIKOpWfOcYzbW67vWfphsRE\ndNHR1GRnB71vY0oK9ivgtru9sBBjO9xut548haFDYrvkOajTltl5Yzz+2hn7S0X5LDqZySeV5Ret\nbXF5kYAu6vE4T1BTtgFH9af4vVVwzpygv6aQQQZPm/qI+cEgFL8fy9FjbWqnLRJGjqCiHWbp7TFD\n71VWRs+y4AaBdnt+vncfCe2QHa5O1eEjqLVaogekXvS23d/O2NcU5HPvyUw+ray46H2I7zcJ6AIA\nryuPmvKN2Cu34vNWAE0vdpsdkdvm/tp7lp6YNhzzgQwUZ3D/Ewj2SvfozR/y1Af/x9MfbiF6S/Ae\nc7RX2tfyvftJDGL+9nPlv72Jrhdxdt6YusD+QkEePzt5lC+q2i9RkwgtEtCvcD5vGTbze9gqP8Dn\nKQEuXL50gKaQ1DDvBc87ny4zZ1D08b/xuy99pbXGxHcbSwfDT/DtiMS7M4pgpZaP6NqViV99jd/T\ntrsczaF4PFS98ip6jwe9x4P5pVdQvG37e2sOv9uNPacAY7eul7yvc7XnCnefw0HJtv+RctONQenP\npfjJcTpYWXCGx7JOkuWwB6VfEbokoF+h/L5qHFX/xm5+F68rB5TmB1YV8BNjbpvH0G3uT8hrh0Qz\n/jwdvn3RRCT1xWNy4TNp8X586TN1+VwuFj22nOX5BfSYOeeSf5lR6XTsjYpkMXAfsD86GpX20qae\n8Llc7Fv4U2yF+Zxasxa/K3hf2MwHviTu2mtQtVNilov97Ly57H4f39is/DY3i5eK8rD4Lv2XNhGa\nJKBfYRTFw4E9b/LS87/A7cjE77O1qp1BmgL6Gdr2i6PbLXPI+1dwb7srTjXeryNQ6VRoIyPw2myo\n1aA4NPiONMzmdTGV/ncbfyov50ufj38VFJD75sZL2h/AtWtf4OsBqXydmsoPX15zyfvLfWMj1Ucy\ncVeUY/7yK0q2fXrJ+6zT3rfbW7P3/GIq97jZUl7G9D//iZc+39lu4xDtRwL6FcTjPMFbbyxl8tR7\n+cXDbzL7tnV4PBe+xd6Y2ll621a8G7t1JbxzMhV797epnRZxqlB9+3+1ERF4bTUAqNSA9dLOXiN6\n9CAnIoJ0wBoWRszgwZe0PwBDQgIdxo3hmk6d0MfFXvL+YocMDqQ51UZEBDVbW3vebi//YjcRPXsQ\n3rl9MiAC+D0eDty7mF2//i0PTJvO9LUvklFjbbfxiOCTgH4F8Pss2M3vU2P+hPWvb6Oq2oGiKHyT\nUcCprLJWtztYm08fQ+u+ENQJ9uI4VZQChtoH5lqjEb/TheL3o3hAlXBpb1XG/GAQVz+zAmOf3kwc\nM4aE4T+8pP2drSC1X1D6SRgxjN6LfkpSUhJDn32KmEEDg9Kv12bDlnsmaP2dq71n5wA12TlYT5wA\nRcFjtbLvH2/x5zOneSovB1M7rVURwSUB/TLnrNmLreKfeFzZqFVubrvlhxjDa7N3de4cy8DUTq1u\nWwXMNua1aXwdJ4yn6tAhXOVB2oKj8aO9xoHiAxQVmogIvBYXqg5e1P2cl7z7hJFpxF01hMK0YZe8\nr/aijYggbNwYEoO4faxi9952SybjLDVhOX6cpLFj2qX/OtH9+2Ho0AEAjTGcLj+eQbXPz/YqM49l\nn+KfphJJTHOZk4B+mfK686gp24DLuhu/77vbbrN+PJSXV8/lgcXjKS51tbmfodoz9NJ/z2bpSR60\nN1hQJXjQxKgpPf0vLFHBe9Z7uWeLC3aWOMsXX5D+zHNM6tEzaH2erb0WwzXG53AwevRohvzhSTpN\nnhQ4XuR28vfSIu47eZTdlss/9fCVSgL6ZUZRPNirtmIzf/DtfvKG38ln3DiE3z5+I7Nu6s9f13/R\npv5UwOzIts3S22NxnDrWh6fvCQ68OZMTHz3J1w88jGnn50Hp+3KvuhbMPeim7TvZ/8vHeb+khP++\n+x6OoqKg9Hu2UAnouX//B0ljxxC5ZhUdJ45v8LpPUTjjdPBcfi5P5eVQEYStkyK4JKBfRjzOo9SU\nbcDjONqsbWh/+ePN/PLx99vc7zWaM/TQtX6WrouNIWH4cEo++W+bx9IS5oMHcZtrk3J4bbagZa67\n3KuuBTNLXPXRo3hravgCMFVVUfnVN0Hpt07xx/+mw5jRaCMjg9rvuRSfjxMrnyd12dILnlvj87G9\nyswjWSf5xCxpZC8nEtAvA35fNbaKd3FUbcPvs7To2osR1FXArIj8NrXRHpnjUmbcROzgH6A2GAjv\nnEyPO9KD0u/lns89mDP0ngvuwNglBbXBQNyQwXSePi0o/dYJldn50T//E/L1YwAAIABJREFUhYGP\n/bJF1xS6nbxSVMDvck9jltn6ZUEC+vecq+YANvO/8LpzUZSW/0d5z8Lr+GznyTatdgcYpjtDN33r\n063F//Aa3OaqoBdMGfbqy/S6cwG94uLRGo1B6VMXG4Pi8eK1tS4HQCjzVFtQadRBm7FqjUai+vdj\n3HXXMWzdy0Hps4715Cm8djtxQ68Kar/nqsnKpvKrr+k6Z3aLr7X7fey1VPNI9km2SW747z0J6N9T\nfm8FtopNuGp24/e2bFZ+rqf/NItlv3qvTW2oUJgd3tZZevAzx2kMBrrfegsnCwuC2u/l+hzdXlCA\nsUuXoPZZse8A6t//GrVBH7Q+fdkGyjcfD43Z+Z+eYuCvHmlTGwUuJ68UFvCHM9lUemW2/n0lAf17\nyG37Gpv5fbzuPBSl7Xunx13fF6NRz8f/yWxTO8N0OXTRtX6W3l4FW3SxMYR37IjlxMmg9Xm5Pkd3\nFBYRnhK85CrVmUeJ6N4tqM+wvduj8H9p5P+zd97RUZRdHH62Z9M7pNB7lRp6EQFRBEFULAiKiKIg\nCIIf2LBgAQuCBVERUBQLXaVKVwhIT+ik91637873R0QRKdndmdkE85zDySHZee8l7M5v3vveEmjr\nQUT9UbLZvRLZ27ajCQwguFNHt9cqc9j4rbiQGRfOsr2oZrdeHakR9GqEIJgxFK7BWLIbh71Y1LXf\neeMunnVzl65UwAh3ztIVCurcfRepP6xyyw9XCOnWlfx9+2Wzd6OWrsk9ZU3ucalCrhpHlhpLcQGq\nAB8cF3QIxSrZ7F/OyTffpuVM93bnl5NmNvFxeipzki9QLMMwnxrEo0bQqwlW0wXKcr/CakoAxP+Q\nRUYEcO9dHZj/0Q631umiTiRS43r7Ck/t0kO6xsjagvZGDbnLPQc9f/8BQuTs365zoFAJmAsL0QYH\nodAKKHSeaddy4bMlRA+/E11oiOhrl9vt7C0u4tkLZ9hVM5612lAj6NUAU/FWjMW/iL4rv5zZzw9m\n7vtbMRhcbxOpVLiX8e7XpDF3BAZwx0OPUHLqtMvrOEto1y7k7Y+Vzd6NKuhynqELDgcFfxwiJEa+\nrnulqfHkZKxFoVWg8tOijikHL5lm716CrayMxKXLaTLxSUntpJlNfJSRzNyURCwO+f+dNThHjaBX\nYRzW/Ipub4bjCA55ejG/M2c4z7pZxtZNnUSE2rVdS0BqGhOPx9Hv+Ak6j38Sc75MZ3kKBSExncmP\nlWeXro+OxpgmbyKeHMjZJU7ucLs5L4/DU6dzYsmznP7tOZTdclBEeSaB7OQbc2k5y7kyNVcptdnZ\nUVTApHOnOGO48SozbiRqBL2KYik/QlnB9392e5OPB0Z2Jv5kBsdOuL57VCkcDPdx7frTcXF8ZzZz\nGPikpISk5V+77IezyBl2946KxJAuf1czqTGkZ+AtU1Kc3OH2xKVfYcrKAqD47GFyD+6UzfalFMfF\nU56cTORgmWvuzSbmpCSwLj9HVrs1VJ4aQa9iCIINQ+FaTKW7ERwGj/ggRhlbd00CtVyYRlqrXz+W\n1K3DeEBZuzYNxj7slh/OIGfYXaFWowsJxpR949wcjRkZ6CMiQKG4/otFIG9/rKwDYBo+NhZ97Yph\nRt516xB+c1/ZbF+KGGVqrpJrsbA8M523UxJrBr1UQWoEvQphM6dQnrscq+mCKOVorhLTsR716gbz\nw5ojLq+hVjgY5uN8SFmp0xLz1ZdET34KTXk52oAAl31wFv+WLTCmpmEtlWeGtHd0NIYbKOwuZ4a7\npagIc3YOfs3kGQsLoA0IwG61MmDAALqvWCZr3ftF0jf8jG/DBh4bEwtgcFRMcJtw9iRJRqPH/Kjh\n39QIehXhyIFvWfjB/zCZqkZvZTF26b20SYS5kPGuDQyk4dhH0HdoT86u3W754Cwh3bqQv0+eXfqN\nVrom6/n5vljZx6Vmb99B0E1tUb3zJmp/f1ltX+TUm2/TQuQyNVdJLC3h/rfeYPHv7g14qkE8agS9\nCrBt00f0HzSOqc99y6BhH2Eyeb5TU2CAnifH9+aNeZtdXkONjWF61wXLE53jQrrEyJcYFxWJ8QY6\nR5f3/FzehDjwfN/2sws+ouGjj6D2kadF8bWwm0zEjhnH/ldfZ9LgwUxaLX+paQ3/pkbQPYpAecEa\nFn/2BQWFFeflp89ks/9gkmfd+pMZzwzgy6/2kZNbRlahLwaL84fivXVJhLhwlg4Q2qM75UlJsope\naLeu5MnUYOZGK10zpqWhl6lkTe7zc0NKCsaMLHlr3i/BnJtL+vqfaPjoIx6xfzmFR45S/ufcBUtR\nMWuWLGXiuZNkWMwe9uy/TY2gewhBsFKa+yU2cwKj7++Cr48OgNq1/OnTs7GHvfubOa8+yKT5bfjk\n547MX9OF+JRQp67XYGOYixnvIH+jGX1UJAqlEkOq9Gfb3lHRGGTuIS8lcp2hlyclo/Lywqt2Lclt\nXSTlux+pO/Ju2exdjpxlapUhpEsMurAwoGJATtSIYVwwGnkx8Ry7axrReIwaQfcAdms2pTmLcdgq\n3vi9ejRm5bKxvPriEFSaILd7qovJocInMDv8yMl3UFimZ/GmDmQX+Ti1Rh9dIsEu7tLr3ncvKSu/\nd+1iF5Er7C7LGboAepqiVzRByrRkoViFl62uLGfongi3J6/8nnr33SurzYvkHziIrayMWv1u9oj9\nK5H96w58GzWgf//+dPhwPsEdOwCQYTbzUUYySzJvnMhTdaJG0GXGYjhOWf5KBIfpH9/v2b0RT0/o\nw4Gd45k8/Ufy8ss85OHf7DxeD5NFTXR0IGnpFQ8fKgVs/qORU+toBRt3+rgWNlfpdNQeNJD0dRtc\nut4V5Aq760JDsJWWYTdLF6a07/MlkFsIVPTHtk+aASa233ywbvSjXvupKHbVQzBK29tc7nB72uq1\nRA29A4XaxadSNzn15lxaODnrXErMeXmcemse7ee/i/rdt/4S84uU2OyszsvihcRzHvLwv0uNoMuI\nsXgbxuJtcJ2StE3rnmLQnR/J5NXVUakcCIDeS4u3j5b8/DIQBJc2ev20CQS6eJ+XO+wuZ4MZSaeu\nFatxFKhxYMYhmCFfjaNEXLF1JGlxpGpxOMwoVIBNiW2ntJPP5G4o48lkuJTvfyS4U0d8GzbwiP0r\nETvmUbos++Kar7ELcKi0hAnnTlJYM+BFNmoEXRYclOWvxGI4RmXino0bhjFl4s1MnCpvqPlyOjXO\nJMDbgkNQUicqiNT0IhwC3Nb5vNNrabBxp0+mS35crLktjj/p0vXOovb1xadeXVnsSRp2D7CBSkCB\nGgUaBJWA0t8u3voCCFlaUIPDYkWp0YACFDYlglGaW0vRseP4NW2CSq+XZP1/2Tt+AqVWi3/zZrLY\nu0idhET8i4qq3O78xAsv0+iJ8ZXOlUgyGnku4QznjZ5pkvVfo0bQJUZwGCjN+Ry7xbmb9qj7KnYg\nX6+UbwLY5eh1Nmbc/TtRwSXodXaaNgrg4PrxjH/8fYqLnW8ocYsugQBXd+n33k3K9/KVsIV07UK+\nDF3jpM50V/UrpMxwlDLDEZS3FIi7uAIIs4FVgcNqQanVgqBA0NpQ6KUZ5JEfe4CQLjfu7lxnMvHy\nhIlMHDWGWQNv55nHH0OhrBq36dQfV6PU6YgaMti560wm5iQn8FtJkUSe1XCRqvFOuUGxWpIoyfkC\nh921zmMfvncv8z/cwfmEXJE9qzx+ejPPDN/PhNt+5+yvjxJ/JJadu89x1wOfOb2WFitDfLJc8iNq\n2FAyN27CYZZnSE1oty7kydBgJjCyK7rsegiCNBlr8a+9wrHlj3Fs+WOcnPOa6OurGppQ1DcjmO2o\nNL6gcaDuId1uLG9fLKEyNZSxGwxkb99J5B3y9UyfPusl9EeOYSk3YDVbeHjpcpocOSab/atRlpBA\n8oqVtHpxlkvXZ1nMfJyWwurcbJE9q+FSagRdIkxlsRgK1oDgngBVhfN0hQIiQy3k5uT/43tl5c4n\nc/XXJuLv8i79HlK+l+csPbhzJwoPHUaQeGRkwbmdJMUuI+mrb0Rf25ybR9mFBARBQBAEys5fwJwn\n/i49/eynnD0wm4ycxWhuL0bhK2JY/xIcFgvFcfEEdWgvyfqXI3epmnd5OcFZWVz6jtPabDQ7c1Y2\nH65G7JhxdFn2uVtrFNisrMjO5JMM18cr13BtagRdZOwOO4fPLcdcuhcE98UgNMSXD+bdzYNjl7rv\nnJssWzyam9pEUSvcj2cn9/+rdt4ZvBRm7vB2bZcuf3KctGH3pK+/JXX9OopO/cGFRYspOPCHqOvr\nwkIJ7dEdpVaLUqslrGdPdKHBotrIjz3A+U8Xk3tsM+d/+Ijk778Vdf3Lbd3I4XarRkNJaAi60FAU\najUqLy+8Q0NIaurZvhSHJj1D2zmvoBGh3a3BYWdjfh6zk5zPw6nh+tQIuoiYrCa+OfAN5/LzOVPs\nXK32tRg8qDUN6ofw4aJdoq3pCje1ieLbL8fy048TeGKy633eB3ol4Kd0fiKXd51ovOvUIe/3fS7b\ndgapw+52gwH+DLULVisKtfjlXk0mTiBqyGDatW5N4ycfF319hUqNw/pnFrMgYDNIN6yj9GC6bOH2\n3D178W3cqGJ6nExYtVoWT59GUXYWdX188I2OZuddw4iTKSJxJRKWLMOvcUPCevcSbU2r4CC2pJiJ\n505SapcmmvNfRTV79uzZnnbiRqDIUMTqo6spKC+gzKogtdRGLV8f/DTinPn269OM51/ZQItmtYmK\nDBRlTVfw8/MiJNiH3LxiTp/JIqZTfafXUGPHofQizuJ8eZPa15fUH1cTcdutTl/rLCovL5K+WkHd\ne0ZIsn5wh/aUnj2Hw2Kh7sh7iBp6hyR2Sk6dxhwVSXDnjqKvrY+MwGG1Ys7OIrhTJ8m6mTlO6hFO\nhRLQtA2ahhpJbFzK6XnvUnfkvfjUqyu5rUs5vnotW+vVJfPJxznYtzfbZZ55fimFR46S+v2P3PTW\nHGnWt9mILS2ijY8fgWrp/0//C9Ts0EUgqySLtcfWUlD+z/PJbckmiqzi1eRuWvsUg4Z5vj4dYM7L\nQ3jljV+wWF17wr5Vl4SPC+++8L69KTl5GlOO9HPE/Zo1pUd6Bu1XfEtQfv71L3AWhYL277+Dxs+P\nvvbqO106tEc3Ah3Q/v15ktmwGkrBYUepdf6Yx1mMmZmUnU8grFcPyW1dit1k4vyixdR6bjpxHTtw\nst1Nstq/nNiHx9FlqXvn5tcjxWTi1aQLHCkrkdTOf4UaQXeT5Pxkfon7hSLDv0sy7A6BTYlWTA5x\nwu8qlZL13z/O4BGfiLKeu7gzYlWvMHG7t2uiLNcUtjsXf8FbViuPvDufmaMepv45ac79fBrU52Dj\nqtM4xFmMaenQoZ2kNrTtwBQVx75XBvP7faM4v2gxJadOS2LLU41kTr45l5ZVpOa8Ms1jxCLTYuaD\ntBT215S1uU2NoLvB6ezTbDu9jRLj1Z8ujTYbGxMd2PESxWaPbo3o16cpr721UZT13GHMg13443AK\n8adcaxhzuz4Bb5XzZ+l1Rt5DqsTJcfXPnaffkqVYzWaK7XasefmMnPsuGgnatFb3qWuGtDS8JZ6y\nplCriRrdj5u3baT1yy+AAHGvvM7OAbcT//qb5O4Rbya3JwaxlJw6TemZs0QNGyqr3StxZv4Cwvv2\nIUjGCEG2xcxHaSnsKa4Z7OIONYLuIsfSjrHn7B5KTdevMS8yW9iaokZAnHOiaU/fwvG4dLZul2aH\n4gzvvHEXz7q6S8fE7d7O16Vq/PwI7dmdzI2uz2q/HgGFRag0/+zdHW4wYNWJH/KVtP2rDBjTM9DL\nNAcdwL9FcxpPGE/3lV/TdcVS/Js1JeW779ncPoYjzzxL+tr1WIpc2+1l/PQLtfr1ReUt78zxqrI7\nz9m1m/KEJBo8Mlp223k2K4syUtlRJMHx1n+EGkF3gdjEWPYl7KPcUl7pazLLjOzN0iPWr/yHr8fx\nyBNfUVbm2fnD3bo0oFa4P2s3uNb84javRPQuZLxLXcJ2LKYTxsaN8Q4MQKXVEqHXs7//LZLYqv47\ndHnGpl4Jr/Bw6twzgo4ffsDAQ/uJHHIHBUeOsvfOuzn+/EukrV3vVC8BT4TbMzduRh8ZQeBNbWW1\neznWkhJOvDCbDgve85gPBVYrn2eks6WwRtRdoUbQneRY2jH+SPkDk9V0/RdfxvmCcg7lilfOtmXd\nRAbe+aFo67nKvDnDmf78Gpeu9cHIbd7Od8ILat8OW1kZpRKdawO89PECsnr2oDA0hOWdO/KDRLsW\nfVQkxnTXptFVBYzp6eijPCPol6JQKqnVry9tXnmJfru2Ue++eyk6cpQtHbty4oWXKfjj0DWvLzl9\nBofFQmDbNvI4/Ccn33ybljOfk9XmlZDz3PxaFNisLMlM5+d8z3XIrK7UCLoT7Dm/hz3n92C1WV1e\n43iugVNOzhO/Gi1bRPDo6G5Mm7mazEJf0vP9RFnXWcJCfXnkoW7MfX+rS9ff7pWAlwvvRKlnpRv1\neubNeZXnpk/jPQnrZfWRkRgzM/+qSa9OCDYb5vwCvGqFe9qVfxHQpjWtX3mJW48cILhLDOc/Wcyu\nQUM4v2gxpsx/NzdKWfk9dWWeeX7+40+p9+D9aALcb9riDvGvzqHeqAeqzFS3YpuVr7IzWJdX0yrW\nGWoEvZJsPLyRwxcOY7O7Pwpwf4aJNIM45WyPjulOtv1WZn3RngXru7A7Tt662YvMmn4rHy/eTZEL\nQ1t8FQZu9XY+xFbn7rtQJUVjz5R2TnVQty6Sj1OtrmF3T4bbnSFqyGBivviUmC8XgwD7HxnHgXFP\nkPHTLwA4rFYyfvqF6OF3yuaTpbCQlO9/pPHjj8lm80qkb/gZh8VCnRHDPerH5RTbbCxPSWJZQs1c\n9cpSI+iV4N0l7zL6jtG8MuYVkk8li7Lm9hQThS40VrmchGx/olsMITsrH5PJxs8HGlNu9kyThrlz\nhjPDxdD7YK8EdM6epZuURHa4l6I1iZQnJrlktzKo9Hr8mjah6NhxyWxU17B7VQm3VxZ9RASNJ4yn\n76afaPz4OPL27Wdz+xhUd95NRP9+svpy6s15tJg5XVabl2NITePCp5/R5vVXPOrHlSg6fpyNQ4bz\nVO++zFwp/qyDG5EaQb8O209sZ96r88jLzKMwu5AfPvgBu8398KvdIbAxyYLRzRr1IB8LFruKpo3D\nOXs+B53WTlqaZ+o5772rA4nJ+Rw85PxDj7+i3PldupeD0vBtxK97iiPTZkg3VxwI7dqFPAn7untH\nR2NIS5NsfamoLjv0KxHcuRONn3icPhG1+Twjg0f3/s7BxyaQ99vvktsuPHIUU04OEbcOlNzWlag4\n4oHYhx+ly1LPn5tfjmCzcfL1tzBmZFKensGHs57ns8QLnnarylMj6NcgNjGWM4Vn4JKjTZVahUqk\nnttmm51NSQ5sgus16kG+Jkb1PUFwgJ1GDYL59bupjHviU75YJv1N6Uq4kyB3u1cCWkXld+nmvHzO\nffYxhqwMyi4kcORZ6RKLQrrGSBp2r66la9VZ0AGOPvscu9IzmCcIfKL3ou7Ie0hasZK9d91L+vqf\nJLPryTK15JXfc3jyNA488BQdP1iILjTEI35cC4VajUJ1yX1WqWRjeQlLsqrfZ0ROagT9KhxIPMDh\nlMOYrWaenPckTdo1oVmnZliKLJSXVL5c7XoUmSxsS1UjKLQur9GhcRZP3XEQEqcSf2gPJ+IzmDN3\nE+cuyJ8l2q5tNC1bRPDNdwedvjZQUcYAn8qP91T7eKMN/nt6mJRlP0Ed2lMcF4/DIs08du/oSAxp\n1THkLm8NutgE3tQaAZgPmENDCe3ZnU4fL6DdvLcoOPgH2/v0J/HL5aKO0U1bvZaAVi3xa9ZUtDUr\nS1lCIhc++ZTSM2cpOBlLyo/fye5DZbDkFwAKGjVqREhMZzp/tgijw8G6vBzW50vf9rm6Im02UTXl\nYPJBDqcexmyrqPH2D/FnwrwJKP7cPb5w1wvMXDoTH39xstUzy4zsStfTJ8qGwsWRqyF+Jnx9/n6i\n1XlpPJY1/c6c4TRuO5sHRnZ2+to7vBLYUt4RayVcV+n1dFmymBMvvUrJmTM82KARR1zwt7KEdIkh\nP/YAYb16ir52dd2hG9PS0EvcJU5Kmkx8kvJtO9B0aEeb12aj8qqIlvk2akib12ZjKSoicelytnTs\nSr0H76fBww+hCw11y+bJN+fS/7edInjvCsI/+uFr/MSbNSEWlvwC9t5zH/22b/n3zxwOlmVmYHEI\n3B1WywPeVW1qduiXcSj5EIeSD/2rzlxxSSj49dWv8+bDb4q6U08sMnIox70HhDdfGcodt7WhWZNa\nCIKeJo09U0rk7a1l+pT+vPLGL05fG6Qopb935XMAVN7e3DT3DSJvv40fJO4wJeU4Ve+oKAzVUNAN\n6Rl4V+MdetJXKwi+717azXsLlV7/r59rAwNpNuVpbj1yAK9a4fw+chTHZ71I2YUEl+ydee8Dmkyc\ngFLrekTOHXwbNkQT4E94eDi1bulHs2nPeMSPq3EtMb+IwWHnx9ysmuYzV6BG0C/hRMaJSjeNkULU\nT+QaOFnk+hOzQqHg6y/GsG/HsyxeMIyh9y4SzTdneWZiP1b+eIjMrGKnrx2qT0DtRMK7QqmUZWBL\nSNcu5EuUGKcJDECw2rCVi/d+khprcQkKlRK1b9Xb5VWWvzrDVSJ3o/5DD3Lzr5sI7dGdcx99wvFZ\nL2HOrfyxljEzk6wt22gw5iF3XHaLA2PH02LmDNpv/on27831mB9XojJifpFim43lmenEljh/f7mR\nqRH0P7mQe4H9ifsxWipfRy2FqMdmGEkpc+8GqVQq6N2zMT26NuLNd6Trd3493nljOM/Ocj5BLkhR\nQj9v5z6o2uBggjq0I3vbdqftVRbfRg2xFpdgzsuTZP3qVosux1AWKcncvIXQrl2dbuoSOfg22r83\nj9AeXfn9/tGcevsdHObr51acfGOuZPPiK8PZhR8T2r0rwR07oFBWrVu/M2J+kXyblU8yUjhVXiah\nZ9WLqvW/6iEyizPZfW435SbnhVkKUd+eaqRAhBr156YO4OChZLbvOiuCV84zeFBrysrM7NrrfGOI\nO70vOLVLB+n7u4O0Yffqdo5e3RPiUr/7kTpuTFWLHHw7N2/biHedaLb16sv5RYuv+tq83/ch2GyE\n9e7lsj13yN3zG6VnztBw3FiP2L8Wroj5RbItFt5NSyLN7Hwr7huR/7ygFxuK2XJyC8VG10M3You6\nIMCmJAsGu/tJd6u/Hc+DY7/EaHS9Xa07zJ0zjBnPr3X6uhBK6Kt37v8kJKYzppwcypPEaf5zRRsS\nht310VGS1tKLicMCltTialuyVnYhAUtREcEdO7i9Vr0H7mPggd9BgK0xPUj+9t+Z4yffnEdLDzWR\nsZWXc+y5WXT88AOP2L8W7oj5RdLNZl5LukCRzf0untWd/7Sgm21m1p1YR6HB/Rm8Yov63zXq/07U\ncZbN6yZyq4eGuDRrUotePRrx+VLn6+KHeSeicqIuHaTfpUsp6NUl5G5P1uLY5Y+foS8RfuNxnBd/\npKzUSDFVrfGE8fTbsx1Dcgo7B9xOxs8bAUj+ZiVhPbvjXdczbZmrytCVyxFDzC+SYjbxv4Sz2Krh\nPAQx+U8L+o+HfqSgrPJ1z9dDbFEvNlvYmqLE4eYc9batoxh1f4zLbVndZd6c4Sx8fjU4nPuwhSqK\n6ONd4tQ1Ugu6LjQETUCAy1nO16I6hNztJ/Q4Yn0QSlUobBrUal9sx70REquXqEs1JlWl09Hif9Pp\numIpum2/0qb/bRTMe48Wzz0ruq3KEP/6m9QdeQ9+TRp7xP7VEFPML5JsMjL1/BnR1quO/GcFfdWR\nVeSWid94RWxRzyo3sTtDh6Bw779q/CM9yMsvZ/X6o6L4VVkEQWDClO94ZGArjMUGp68fpk9A6cQu\nXaFSET1sKKmrpHt4Ce3Wlbx9+0VfV6oduppQ1LjfDUwoVuFI1P7VvcJhsaLUalEAtjhvhLLqcTtJ\n+f5H6t7r+tl5Zail0fBZWRlPeOn4qXUrQnLkb/KU8fNG7AYDde4ZIbvtayGFmF/knLGc5//Dw1yq\nxydQZDbGbSStULq+2WKLemKRkYNu1qgDLFk0iudnb3CplMwVVnx3kODoGfTt2ZgpXz6CPsj5f0O4\nopDe+lKnrqkz8h5SJQ27S9MGVooBLfZ0DSGKoYQqh+HIcK/2WShRgenv5kUOiwWF5s/okUmBUF49\nbidS7c4vJToxCS+jEbu/PyFGIwGF7h/rOYMxM5NzCz+m7RuvyWr3ekgp5hc5Wl7KmymJkq1flake\nn0AR2XV2F+fzziNIfNYitqjH5xqIK3Q/833L+okMHCrteXpScj63Df+I3/cnUJg+j/vu6eTWesP1\nF3DmJN2/WVOUXl6STUeT6hxdqdEQWK89pgzxyuIcZ3UgCAgC7p91a0BQVHQydFitKDWavxouOZQO\n3AwiyULh4SNo/P3xbdxIUjvxHdoT27sX5b6+bL1zCAkyt3mNHf0oXZZXrXNzOcQcwCEI7Csp4svM\nqn18JQWq2bNnz/a0E3JxLPUYh1MPY7XLk/Hdb2Q/Xr3/Vbrc1gWtzv3OUBllNoL0PgRqXe8nHuCv\nJzTElw8+2sGQ29u47dPlzJm7iZde/5l5rw/n8UfFaZHqqzCRTSgp1sr/DpVaDZkbt1DrlptF8eFS\nFCoV+fsPoI+OQh8ZIdq6QqEafXZ7VMWhaJorRBFIha+A9YwFu9FIufdhyjPOYczKwpSTg6WgAGtR\nMfbycuxGEw6rFYSKB4srruXlQEjSgUOB3WTCYTajDQys+KG/HXVLc5XfIpydv5DIOwbjJ7GgQ4Wo\nH+7elSPdukpu61KOzZhFvVH3ESThbANnkUvML+IQBFIsRvxVahrrvWWxWRVQCFJvVasIqQWpbD65\nmTKz/E0IxOz9rlDAkIbehOicC0NfzrSZq2nZvDaPjunutk8AO/fAV9eNAAAgAElEQVSc48kpK3nk\noW5Mn9JflDUvJVMIYWpeG5x5s27r3pu+Wzeh9hH/A31h8ec4rDaaPPWEaGs64vUYdpSj8FahH65E\nGeT+mF4AW46FswsXYjXnY7eYcZjMOCwW7OY/v5rMOCxmbGXlqLz1WItL8AoPQxcaii4s9B9fvYIj\n8cmKwVYgIFhMeNUKR+HtQNWvFIVevAEmUmAtKWH34GHcske65kOeJuXb7ylLTqLl/zzXwOZy5Bbz\nS6ml1fFc3Qa08BZn7kZV5z8h6GXmMlYdXiVKeZqriCnqWqWKYU00+KjcC+d3v+VdPv/wAVq2cH2X\nabXaeeqZ78jJLeXj+fcRGRHglk/X4sPyGPYaKi/OZ+YvQBsQSINHRovuS9HxE5ye9x5dv/pSvEUF\nyFh4gNKcOBo8OwJtoHS/y8vJ2bWHYzNmYjeZ0IWG0O6dtwEw5+Zhzsv7x1dHqQIfbUvqDx+DvnEI\niiYmFJqqfxtJ+HwJNqOJppOe9LQrklBy+gxxL79K9+9WeNqVv/CkmF+kjs6LeY2bEaC68WeR/ScE\nfUXsCkky2p1FTFH312kZ2gg0VL5V7eWUlppo2el1Us+87tL16346zrOzVhMe5sdH80fSro20bUDT\nHCE8m1/5YwJjZiYHHhlPn00bJPFna9de9Nux5YpDPVwh5YfVnHp7HoLVindUFL02rP7nTGgJOf3O\n+yR9VSEECqWSm+a+Se0Bt8hiWy52DridriuW4hXumaFFUrO1S0/67dr218Q4T1MVxPwiLX18ebdR\nM0+7ITlV/MTLfX6O+7lKiDn8nSh3/nRtjE7sNK9EidnCliQlDlw/m/fz82LJJ6O4Z9TnTl87adr3\nzJm3ifyCcuJPZTJq7FKysp2rGXeWaGU+3fSVL33TR0Tg27ghuXt+k8QfsdvA5u/bh2CtyO+wlpZS\nelq+mtoGYx7Cu040Kp2WgLZtqN2/n2y25SBn5278Wza/YcX84BNP0WH+uzVifhXOGMqZnyZdB8mq\nwg0t6LGJsSTlJXnajX8w4YOlHNpfm8N/tCPxZAGlha6fhecYTOzK0CHg+i5uQL/mtG0dxbsLfq3U\n60+eyqRFh9eI6VSf1i0icfzZLMZstnH+gvQPTnd5O1eOImWjmZAuMVj3/kZggTjNiRqNG4suLBSV\nl47gjh3wb9lClHUrgy4slBb/m05oYBBdvvi0UtPHqhNylKp5ivOffkZQ27aEdOviUT/MeXmUnjyJ\nuqBqiTmAXRDYW1zIuvwcT7siKTfsocL53PMcTzsuW0Z7ZQmrlU39ZtGc/m0tmw98iFKp5LE5jxHV\nyLWe2ElFBmLVerqGu57s9+L/buP2uz6mW0wDundteNXXLfh4JytXHWL7L08TUTuA2we14uiJVAoL\njXTt0pCe3aXPHK6jzKWL3kissXJh7rBePYmf8xamzCy8ImqL4oOlsJCcnbvpsWoNd5aUEFxQQG5E\nBJ9On4rDjSlW/i1b0O3rZey5fSg3vf2G7KLqsFigVUsU6hvrtmBIS8eQkkJo926edkV08g8cpPCP\nw3T+7BOP+lFy6jSHJ09lgMHIFIUCx65tVLUUyXK7nR9zsqmv9eImP+cm7FUXbsgdekF5AXvP7aXc\nUvVmS2u1VqJrrSfl6KeUFpRSnFfMhsUbcDhcf/ufyjNyosC9GvVfVj/JkHsWYbc7sNn/KSQWq50h\n9ywir6CM33+dRkTtimStkCAfDu5+jp2bpnDugoWfN8W55UNlucvbubarde+9h5Tv3dull11IIOGL\nL9n/0CPsHX4vw9as4/miYpqGhBCak0vbg3/w4lT3h2941a6Fvl49DOnSNT66GtaSUjT+frLblZob\ndXfusFg49NRkj4u54HBwZv4CTNk5bC4tZYqXFyVJSR716WrkWS18lJFKnrVqbfTE4oYTdLvDzs8n\nfqbIWORpV65KRP1QlKq/f/UhESEo3ZxP/EeWkcRS90R909qnuPOpcj5cH0NBWcUOeOOWeKIbz2LG\nlP68+sId/7pGpVJSr24we7eMZcz45W7Zryz1lLl01ld+XGLdkfdQsC0OIUmHkFP5vvgFB//g9Lz3\n2D34To5O/x+2cgPNp0/l4SWf8pDNhiUs9K/XWrVaIlJSGbDe/QQ8T01ds5WUoPa/8XYuqd/9QJ0b\nUNBjHx5Hl6XO57+IjUKpRB9ZMUbXApzXafFtePVIn6dJNZuYnXTe025Iwo0VWwPeWfoOyxcvp1W3\nVnS/Q5waa7FRKpVMen8Saz9ZS2BYILE/xXL72Nvdzn7flWbEt4EvYV6uhd9VgV0IqteA2DgbNkd7\nMg5OJzOriJzkt697rVqtZNGC+xn35Ao+//hBl+w7wwjvRA4aK3fGrDT502LAPIy/gibYB02Pcgi/\n8hN60Yk40teuJ2fXbjT+/kTfNYxOn378jzGhAYcOozWbser+2XnNoVIRleh+4o13VCQGkVvAVgZr\naSkavxtrh56+bgO1Bw1Epatew2OuhcLh4NS784m4fRABrVp62h0s+QXk7f2d7t27k+jvR4sZUz3t\n0jVJ/e5HDu3Zi3XiU3x6732edkdUbihBX7NzDa9Pe52yojLOHD6DRquh88DOnnbrivgH+zP6+Yr6\n6KHjh4pS0iYIsDnZxJ2NffBzoUa9fngR9aO1nElQsHH11zx4a23ee2t4pa+/e1h71m44xk8b47jj\nttZO23eG+spsOng15LDp2jdqwQ6O/T5og1WYsrPRBDXAGuuD5rZiUFck9FkKCkhbu4H09RtQ+/oi\nWK2Yc/Ow5Bdgysj618zvouBgygIC0Jn+GSXQWiyk16/n9r/NUzt0a0kpvg3qy25XSlK++4GWz//P\n026IgqWoGO+35zIyMZlXmzWl/qgHPO3Sv7LZb/KwP9cjbc06Ts17F4fVyrK4eFrXr8+kGHk7+UnJ\nDRNyzyjKYNu+bRjLKuqy7VY72SnZHvaq8ojV+91qF9iUaMMiOF8WF+xnYurwWF579CxfvRPC2NHO\nJxEt/2wMox9b5vR1rnC3z/Uz3hWAwwJqb29wCNhNJhQ2JYIAWVu2cuipp9k74j5spSV0eP8dOnzw\nLrbSigiH4HCQ9/u/57inNqjPrlsH4mX4u4ROZzKR3Kgh24YMdvvf5R0djSHNE2foJWhuoJB7cfxJ\ngCqxi3UXu9FIypixTP5lM21Pn2FmlufvbVWtNK0ylCenVLQ4Bqxlpaw6eIDjZe513axK3BCCbnPY\n+PX0rzSJaUKLzi3wC/IjPDqcE9tPYDJU/qzV04gl6mUWG1uSFdhdqFEP8jXRLDrP5Y5vSqWCzz9+\nkLFPfO3S9c7QUJlFO7352i9SgbqDEYcDdEFhWPMKybjwLdt69iBr63bq3n8f/XZsoenkSfg0qI8u\nJISQHt1QqtWofX1pOH7cFZf9aeTdfPXkE+SHhVEa4M/ugf15/d25CG7mQoA0U9cqw410hh6WmYXu\n40WSj0mVi+L4k6QUl7AWSBIEvhCEipCch6iOYm4tKSFnxy5CQkLQBQcR2qsn+l49+CgjFZMbSclV\niRuiU9wvcb9wNvvsX39PPZtKnaZ1yEzMZMHkBYx+YTQtYuSr6XUXsTrK1Qvwpl+UEbCJ45gTjH5s\nOXcPa8fQwdIOiDjnqM2L+c2v+zr7BS3ka0jdshJlExNRdw65ZhOOggMHiZs8jZh1P16zGYnWYkHh\ncGAWsaGH3Whk+80DGbB/j2hrVob9o8fSfNoUAqvQUA9X8DIYmP78S9hOn2FWSAiWiU8S0jXG0265\nTewjj1F07Dhhfr40+mQhAS09E3mojmKeu3sPx59/mS7LPse3YUNKTp76R5+HPoFB/K9u1U3kqyzV\nXtCPpx1n7/m9WOxXn0C2eNZiohpHMXis++FQuRBL1JuHeNOtVhk4NdbEfQRBIDh6BoXp8yS3Nae0\nOydM7k+zu5zT77yPV61w6j8kfZLf5WzvO4Cea75HGxQkm809w+6mw/vv4NOgvmw2paDX5q08tGgx\nVo2GuPAwxlqt2ErLaDjuEWr1E3/6nhykrVlH4ZGj3BIQRPLIEeijXetb4S7VUczPfrCQ0vMJdFz4\n/lVf46NS8VhENLcGh171NdWBah1yzy3N5VDyoWuKOcD4N8aj89Lx4VRp54CLiVjh99P5Bo4VyD9p\nSKFQsOSTUTzyxFeS27rbye5xlSVi0EAyN3nmxuUdHYVB5sS4G+UMfc+tA4jr0I6Uhg354t25dP70\nY1o+/z8yNvzCnmF3k77hZ0+76BTliUkkLvuKNq++TM60p2vE3AlixzyK2s//mmIOFU1nfsjNIsNy\nnSO8Kk61FvTNJzdTbCqu1Gv7P9Cf2x6+jWkDp5F8qnr09BVL1A9nGblQ4l6NuisMH3oTDofAup+O\nS2qnmSqT1l7iN4oIaN0KS0Ehxgz5z7M9keluKylFfYM0lln4/Ezmz34By5/lagGtWtL+/Xl0eP8d\nCmIPsHPA7ZK1BBab/Q8/StelX3jUh+om5oVHj7Hppk40feZpGo4dU6lr0s1m5qUmSeuYxFRbQd92\nahv55flOXdOobSPmbZrHmo/XsPOHndI4JjJiifqedCPZJvlFfdni0bI0nLnLO0mSdSMGDSBz01ZJ\n1r4W+qgojOnyCbrdZEKhUqHUVL7xTlVGUCqvmNfg06A+bV5/ha4rllJ2IYFt3fuQsESeqgxXODx5\nKm1eeRmNjKN0L6e6iXnCkmWcfX8Bg479QVA75wrpLhgMLM2Sv2RULKqloJ/OOs353PO4cvyvVCqZ\nsnAKxQXFLHl5iQTeiY8Yoi4IsCXJRKlN/vC7HKLeQpVOS534u/Tatw4ka7P8NzK5Q+620lLUN1hT\nmWvhFR5Oy1nP0XfrL9hKS9jUrjPnPvwYu6nqVMUkLl2OT/36hPft7TEfqpuYH356KrbSEroscy2i\nYRUcbC3M52iZtJMjpaLaCXqpqZSDSQcxWd374N35+J10HtiZF0a8QG5a1Rivei3EEHWbQ2Bjog2z\nIM787spy5x1tUSoVrFl/TDIbCuAunyTR1/Vv3gybwYghJUX0ta+F3IJ+o/Zxvx5qHx+aTp7EoCMH\nUOq82N6nP2feX4Bgt3vUr6Kjx8nesZNmzzztMR+qk5iXJSTya69+RI8YRtPJk9xaq8Bq5ZOMtGpZ\nylbtBH376e1Oh9qvRpsebZi5ZCafvfAZsZvEm2stFWKIernVxpZkJXbkbYX55aKHGDvha5eiKpWl\nlSqdZjrxS/Q8EXaXuxb9RkmIcxmFgkaPjWVA7F700VFs6dzdo2fsnj43r05inrpqDUenzaD3z2sJ\n7yNONCPFZGR+WpIoa8lJtRL0uPQ40ovF3bX4BPgwa+ksEuMS+fadb0VdWwrEEPU8g4kdaRrk7vy7\nbPFDjBkvXda7ArjbW/yEx4hbB5Ipc9hdHxmJMTNTtuYh/3lBv4S694zg1sOxlF1I4Ld7H6A4Ll5W\n+7EPj6PLl595bCZ9dRLzEy+8TEn8SXqu+UH09+8fpSVsLsgTdU2pqTaCXmoq5XDKYSy2a5eoucp9\nz95Ho9aNeOPhNygrdn22uByIIeqpJUZ+z9ZTIYPyMHRwW9QqJavXH5XMRmt1Kk104oZLfRs3AodA\nWYJzY1vdRc6w+3815H4tWs56jravzebkm3OJm/0aggwh2LMfLCSsdy+C2reT3NaVqJJiblPgyFLj\nyPo7YdOcl8/uO4YR3CWGVi89L4nZcrud1bnZnL+kxXNVp9oI+o4zOygwFEhqI2ZQDI+9/hhvj32b\nE3tPSGrLXcQQ9TP5Bo7my5skt2TRKMY9uQKHQ0AQxH+YUAAjJMh4rz1oAFk3cNj9v5YUV1n8mjWl\n24plBN7Uli0du5L6wyrJbOXu3kPp+YRKl1mJTVUUc8GgwLrJH/teP2x7fbH+4k/Opt/4feQDdPrk\nQ6JEmJ1wLaw2B3E5JZRZ5O+26QrVQtDjM+JJK5JnWEVYdBivrXqNg9sOsu7TdbLYdBUxRP1ItpFz\nxfKK+vLPxvDAM6l8uKEzO47XF339m9SpNNKKu0v3RNhdziEtNSH3axM9/E5uPXKAkjNn+X3kg38N\nfhELa0kJx59/+boNUKSiKoo5gO3XADArQQkKJZiS8lGdasrNm7bgXSdaUtvdvQIZqglFaYWzBe6V\nDctFlRf0MnMZfyT/IVmo/WqMnT2WgOAA5k+aj8NedbMdL4p6yoUQLDbXzsT3ppvINMon6t5Rg7EH\njeToWQ2rfmvOvtPidr5SACN8xD1L96lfD6VOR+mZs9d/sUjIWYteE3KvHK1emEnrV17i5Jy3iH91\njmjrxo4ZR5dln4u2njNUVTF3pOrAqABFxeTDsoREFBoVflFNsWdIl/9TW6XlIX0ErQRvHEJFdVCh\nyUJmWdUpabwaVV7Qd5zeQaGh0CO2+97Tl+FPDmf67dO5cPxCxTerYCnD5E8Ws39PXY4cbO9yGHtb\nspkSq/Si7hDgTGoYdaL8SEnNQ6OyczwhXPTcr/bqFOprxN6lDyBzs3xhd+/oSAxpMoXcb6BJa1Lj\n37wZ3b5Zjn+rlmy6qROpP652a734V+dQb9T9+DaUbziIMTOTnJ27sZWYq6SYA2AHQVBiKy+n5PQZ\n9BG10YWEoAAUdmmO67rrAhiqCcXL8c/1i802zheWY3VU7dEnVVrQT2aeJLUo1aM+1GtRj3c3v8vG\npRsp/WEnDce8wc5nP8JiljdicC1Cw/Op17icM3sWolC49oazOQQ2JtkwO6StUVcqoFOTNKx2BfXq\n1iI1vZRw/WlsNnHFt2KXLu57R+4mMzU79KpNnRHDGXTsD4rj4tl7172Unj3n9BrpG37GYbFQZ8Rw\nCTy8MqVnzrJ/1MMcmTaDuMlz6LdF/k6I18JmNHJ40jOc/uwNbOZCzLl5BLRsgUr/571JJaBsIO79\nt7Zax4P62rTC56qbiyKzlbP5VTthusoKerm5nANJB2QPtV+N/70wmgHLNhKVmc9DR8/zzdSPJK2p\ndoaMCyns+fpxRs/o6tY6BquNTUkKHIg3CvRKdG6axUP9TtC1dQk+RYuZOnE6nXvNJSdP3A9LJ00y\ndbXiRVS8o6PQBASIfn56dXvRKMp9EGTocWItLUVTkxTnNOb8fAoOHcack8uRaTNI+uqbSl9rSE3j\nwqef0eb1VyT08N8kfPEl5rx8BJuN/PN7KTh8UFb710QQ+GPcE+Ts3kPKT99yZufzeNetV/EZsIOA\ngLpPmWjFOQqgmy6AoeoQ9I5ry6HVLpBtMFNgrBqadCWqrKDvvbCXIkORp934izwvLYleWqzAWSC5\noAShCoRf8rPy+XL2lzy7aJoo6xWYzPyaqkZAJcp6VyOmaQYNvX5kz6+rKCw0kJSSzwuvrBfVhgKB\nu73F3qUPIEumsLsyK5wG7aZj/VX6zn4hgQPQ+gZLbudG48w772NIScVaWoqtpITCY8c4NOmZSl0b\n+/CjdPFA85igjh1QaCrOoDVBgQTc1EZ2H66Gw2rFlPd37bfJnILq1kzUrY2o2pjQDChBESpOxnm4\nSscD3rVpfY1d+eUUmazE55WKYl8K5O0sUkmS8pNIzJNmJKareHl7sX/WKJbM+YrD3jpqB4Sz/5f9\ndB/S3WM+GUoNvDfhPeasES85ByCt1MjvWd70qF0OSJcz0LJ5ON56LQWUo1IpadG0tug2OmuSqKOt\nQ6pFnGfXiFsHsn/MWJpNnSzKelfFoURI16D1DULIFxAKNCiCrdjKyjCmZ2DMyMRSWITdaMBuNGI3\nmbAbTX9+Nf75x/TXzwRBQKXVotRpUWr+/Kqt+KMNCCHQZwAF249TfO4kupAQtCHB6EJDZJ3HXh3x\nadQAhVKJ4HCg1OtpNfM5iuPj2dq1FzGfLyKgdasrXndk2gxaznwOXWiIrP5a8gs4/+ln3D1sOAc0\nKhqOewSVTt6ukdcibfVaAlq1wttipVytotnUyaj8vKCFeAlpCqCrLoA2CteiX8VmGwlF5TQMlH8u\nxvVQCFUlbnwJX8V+RX6ZOO1dxaasuAxTuYnQyFB++OAHzAYzo2aOkt0PQRCYNnAa7219TzIb7cK9\naR8q7dPo8bh03pi3mZJSE/UbduXjdzqIbmO/tQHzi+qJt97osTSfNoXAm9qKtuZFbOXlfwm2Nc2I\nNrUpJUWHyU5chTEjE0EQ0EdFoo+MQBcSglKnQ6XXo/LyQqX3+vOr/s8/Xn/9TKFQYLdYcJgtOKx/\nfrVU/BEcDqx55ZgKMrAUFGDOz8eSX4A5Lx9LURGh3bpiNxjwrl8Pn3p18albF+96dfGpVxelViv6\n76A6kbNjF/nvL8BYvy5NJj2JX5MmANiNRg6Me4Jat9xMw7EP/+OapK+/wZSZRfPpU2X1tapms1/k\n2HOz0AQG0nLmDMqTU9AE+KMNDBTVRrhKxwBdEN529x7wQ/RaOkUE4qORNpLpLFVO0A8mH2R/wn7s\nDs8OR6gsh349xC9f/sLT858mIFS+EYczh87k5ZUv4+Ut7Xl390gvmgXKU4MZVu85Ms6/gUbkD4lD\ngOnFfUi3inPwlrziWwzpGbSY4d4xh8NsoTg+nuL4kxSfiKc4Ph5drVrYSkvRR0agj4xEHxGNProW\n+qgo9JER8p9zCwKWwkLKU1IxJCVTnpxCeUoKhuQUypNT0AYHEdK1C17hYQS0bkVg69ZoQ/4boXu7\n2cz2Xv0YcOC3q77m7AcfUnLqNJ0WfYhgB+NmI3ErJxOzfLGMnlZtMTdlZrH/4Udp9sxkIgYNlMSG\nAujqFUAbJ8Lr10KpgDr+ejrWFveBw12qlKCXmEpYfWR1lTo7rwwFWQUsmLKAYROG0a6P9C0bX33g\nVSbNn0RQuDzh0EH19UR4S5/d+cvmeL5eeYBvvnxE9LV/szZiYVEdUdYy5+Xz+8gHuPnXzU5dV3Ly\nVIV4x8VTFBePITWVgFatCGjVkoA2rSpCjdHi1uRLjSkrG0NqGoVHjv7574pDqdUS2LpVhcC3bUNQ\nh/aedlMSDk2cQt2RdxPWq+c1X5e3bz+HnppMj5d/xXwaAnrUQt1TvkYlVVnMMzdu5swHC+m69Au8\nateSxEa4WsMAbYjbu/LL8depaR3qT23fqnNkUaUEfWPcRs5kn/G0Gy6z7LVl+AX5cdfEuySzMfex\nuTw06yEiGkRIZuNyVEoFdzbyIkAjvaiPn/gN/fs15967xA292wUl04t7kmEV50N9YOx4mjw1gaCO\nVxersoREcnfvoejYcbJ37MK/RfMK8W7disDWrSp6xN+AmDKzKIqLpzguHlNWNtnbdxDetzfhfXoT\n1qfXDZFNn77+JwoO/kGb12ZX6vWC3U7sg+Np3GsWIeMbo9DIc9utymJ+8o23sZaUcNNb4uYAXeQf\nZ+US/brDvXV0jQpCrfTMIJ3LqTKCnpKfwoZjG7AKVk+74hZ71u7hwOYDPD3/aTQ6zfUvcIKFzyxk\n8NjBNGwjXwOKi3hpVAxvrMZLIf2ggvB6z5F2/g20Iofe91ga8VGxOLv0tJU/o81uQvhTTf+RWpq3\nbz+5u/aQs3sPKp2OsN69CO/bm6B2N3lsepancVgs5OzcTc6u3eTu2oNvk8aE9+lFeN8++NQXL7dB\nLuwmE9v79GdA7F6nrz3/8acUHDpMzOeLJH8/VFUxtxsM7H94HHVGDKfuyHsksRGu1tBfG4KPyLvy\ny1E77DQND6B5SNV4SK0ygj7l7Sls+HoDzTo1Y+Aoac5R5CLtXBoLpixg3GvjaNqhqShrrv5wNS1i\nWtAipoUo67lCoF7L0AYCKqRtgbhxSzzLvznAt0vFDb3bBSVTi3qT7W7ViwMsm7woj8vGp30oOaU/\nkrtnDzm79hAS05mwPr0I790LfVSkKH7faBQePkLisq/J27cftbc3kXfcTnjfPgR3Ej8hUgoOTZxM\n3ZH3Etarh0vXF/xxiAPjnqDzpx8R0iXGpTWEXA2UKnGUqFD42VH421GE/f3Grqpinvf7Po5Me46u\nSz/Hr5k498ZLUQBddP60VfhKPnn4+w/f4/j+PTw0YRJPPHAvQV7ibuBcoUoI+qodqxg9bDSGEgNK\nlZIhjw2h7919Pe2W23wy4xMatG7AoNGD3Fpn07JNKJQKbn3oVpE8c51Ifz0Do00okHb60OOTvqVf\n36aMHNFR1HV3WRrxiQi7dEepiqKlqcRteIrgHh0J69WT8D69UKiqVtZrVSR3916OzXoRW2kpSo2G\n6LuGUXbhAiWnThPet0/FA1Gf3qi8pE34dIX0dRsoOHSYNq++7PZaB8c/SXifXtR78P5KXyMUqLEd\n8AajEixKUFFReqUWUOrtqLoYsJJTJcX83EefUBx3kk6fLJRk/VC1hoGaYHwc0n8G13+5iK/mzcHh\nsOMXGMT3m39lUIznc0U83lim1FTK3j/2YjVVhNoddgfJp8UdrOEpJsydgAIFn8z4xOU1ju05RlZS\nVpUQc4CMEiN7M/VI/db5dOH9PD3tB8wijy3soUkkTITzS6WfnYCxQfTesobWL79ArX59a8S8ktiM\nRuxlFfkYDqsVfWQkMV8spu/WTYT26E7OrzvZ3qc/cS+/Sv7+Ax729m/sRiMn35wripgDdF78Mea8\nPM68v6BSrxdy1dh2+kG5CgQFaARQCig0AgoFCCY1lq16Tjz1bpUT8wPjnkCp0Uoi5hW78gDuUofJ\nIuYA544dwfFnJZbJaOTAiVOYbZ6f86GaPXv2bE86sPfCXsw+ZoryiijOK6ZWvVqoDCqO/HaEBq0a\noPeVvkuWlDS+qTEBIQG89ehbtIxpiX9I5Qdg5KbnsnLeSibNnyShh85TYLIiKHyI8Ja2BWKbVpHM\nnvMzdw8X78lXqRDwUmo5ZHZ/EIlS6/kQW3XEr3Ejio4ew24wENSuHa1emAlU/D79mjah9oBbaPTY\nWJR6LxK/XEbikmUo1CoCWnruuAngyJRpNJv2DD51xcnDAAjp2oXSM2dI/WEVtW65+aqvE0qU2Hb+\n+Z69ytG7w2ajLCGBOr1Go4y0ofDyvMAUx59k121DaDP7BdaYnAEAACAASURBVKKG3iH6+mFqLUN1\nodQR5Mk0z0lLYf70iWi9dNgNZaj13vQecheDHnoUO1Dbx7MZ7x4NuWeXZLPhxAbKTGUIgkBxXjEB\noQEoFAri98ezauEq2vVpx9DxQz3lomjYLDY+mPwBnQd2pvfw3pW6Zvrt03lz7ZuotVWyoR/dIr1o\nLnGN+hNPf0vf3k25727xQu82VEwp7EWetKcGNVyDI1Nn0FHnhf21l1Cor/3+LktIIHnFStI3/ET9\nB++n3oMPyN5hLX3tegqOHKXNKy9Jsn7GT7+Q/tPPdF700b9/KIBtpz9CgRquMnzJYbNRdiEB/2ZN\nQQBFgB31LSWi9Tx3haSvviFz4ya6Ll9y3f9jZ1EAMboAbpIwg/1ylr79CrFbN/LYi3Po0OcWBIeD\n/OwsQiMqcmW81Ep61w3F14PNZjwq6OuPrSchL+Gar9nx/Q5+WfoLIyaNoOtt7g0fqQqs+WgNJQUl\njHlxzDVf9/5T7zPi6RHUbVZXJs9cY2B9PVES16jXbvA/kk6/jpdOvJvCr5amfFZck7TmKTZ37MrA\n2L1O3egdZgtJK74lecU3BHXoQP0H7yewnfjd+i7HbjCw/ZZBDNi3W1I7+ftiOf3u+/T4ceU/vi+U\nqLDu8EVxlYztf4j5RZSg7lOCIkjGBl0Cfz1AHJk2A31EbZo/K343vDCllv66IHxlCq9v/f5rPnv1\neR6aNoshjzx+zddG+nnRNdJz7ZI9FnJPKUjhaOpRrI5rl6k1aNWAfvf0Y9/P+9i4bCMRDSJka6gi\nBRez1Bc9t4i2vdpe8Ujhu3e/o3WP1rTqeuU+0FWJpBI7dQP06FXSlRu2liD0XkdVzC5LXYyej0r+\n58j77XcsBYVEDRns1HUKtYqg9u1oMOYhQOD84s9J/WEVKi8dfk2bSOMscHjyNFo8OwVvEUPtV8K7\nTjRB7dvx24iR1B89CsXFsrZ8NUKi7oppK1cUc0CwgLK2FYW/9G9wR7oW+z5f7KlaLNY09twznEZj\nH6b+qAdEtXMxg72vOgitIH3o4eTB/bw5YQxKpYo3vl1H847Xr0gw2eyE+2jRqz2zS/fYDv2Hwz+Q\nXujcrOeMCxmsWriKgNAARkwagU9A1WuOX1mK84tZMHkBtz18G536d/rr+7vX7CY/I5/hT8k3H9ld\n9Go1dzZWoVdKV6P+xOSV9O3ZmPvu6XT9F1eSLeamLCmp2aXLzck5b+HbpDF1773b7bWK40+SvGIl\nub/9VhGOf+B+1L7i3RfS1q6n6MhRWksUar8SlsJCdvS7lb5bfkYXFob9gg77YW8Ul2nE1cQcALsS\nVRsDyuZGSX11ZGuw7fJFoVJgKSrCmJ2G/1hvtCK3RA1TabhFF4yfXXqhLM7P4/PXnqcoP5dxL86h\nXlPncjdCvTX0rhMqkXfXxiOCfj7vPNvit2GyuVbPfGTnEVYtXEXPO3u6XRLmaVa8tQKtTxgxdzyO\ntWQrm5ZtYuJ7Ez3tltMEeGkY2hDUEtao1244k/2/vcfZjGhyir3x8zbRoXEOdUKLXVrPolAzuaAn\nhTVn6bKyc8DtdF2xFK/wcNHWtBYVk7TiW9JWryVy8G2iTMOzlRvYOWAQ/X+XNtR+NXb0v42OC9/H\nN6Q1tj2+f+/YuY6YA9gVKHuWoIqQ7s0t2Gw4DgXgSNVhzMoAwYE+LBp1n1IUEeJE7P4+K/dFDqla\nuWAeW777inEvzqH7oCEuraFUQNeoIGr7yF926ZGQ+6a4TRSbXLsJA0TUj6DfyH5cOHaBpa8sJSg8\nSNZWqGLSpmdb0jJuI+lcALu//wYv73JUShWRDavXztFsc5Bn1NEoQEAh0chV34h+fLS+ETmGhmQV\n+pGYHcyx87UQgIYRzvf/V+FArdRx1Fw1ujz9Fyg5fYb82AM0eHi0qOuqvLwIielEgzGjKD17joPj\nJ6ALCcG/RXOX1zw8eSrNp0/Fu460ofar0WD0KA5NmoJ3nbp4CfXBXiHo1xVzQKETUDUxo9BJI4Lp\nG37m9Lvz0fqFosjyReWrwys8HAegam1EoXXfbqhKy1B9KHVFymA3GgBBwZWqS/f8tIaXRt1F8w6d\nmbVoOXUaN3PZjgCUmO00DPR2eQ1XkX2HfjLzJDvO7MBqF+cJrryknFULV1GUU8SIp0cQ1ah6DbcA\nMJp0fPrS76Qd/xa7zY5Or2P8G+M90uLVXRoFe9MrohyFIK6op+YFsGBdJ5JTC/Hz0REc/HdY1eFQ\n8MjAo7Sul+v0uhZBw9OFPSmye7y/0n+C84sWgwCNJ4yX1I7DbOHkW3Mpjoun5cwZTg+ISVuzjqJj\nx2k9+0WJPKw8hyZOoWGXGfh4tUIQri/m2EERYUXdU5pk1YKDf3B48lRs5QaUWg0dJ32Nf1BHBCuo\nYwwoo90rZ1UAnXX+tPs/e2ceFmXZxeH7nWGGfd8FFFwQxQXEDbXUNC3LJW0Ty8osK01bLEuzzazU\nNrWyPi0rE8rEwFzSXHLfwgVXEFxQQPZ1htnf7w+MNFFhVqq5r+u7viuY93mO2cxvzvOc8zsSd0SD\n6e/L/HwDR9NFtFoBQTAQHCQQG1er6tnH01ny9gwCw5oz/vV3cfMwz8RMiSDQNciLUA/rZulW7YfS\nG/QcPH/QbGIO4OrhytgZYzl77CxJc5MIbRPKqGdHmd1H3ZL8+vUPuMlL0OtqK1I1Kg2VZZU2jso4\nskuVuEpdifM37xz1pN/bAxJahPlw5OhFvLxckFweiCCRiPy0sx3tw4qRSBr3ASAXtAx1yWNZ1T/z\nhOefRuHv2+nwxmsW30fiKKfDG69RlXmaE+/NxdHPl/avvozc5+ajXXUKBafmfcTA3dssHmdDiPv0\nE46/9T4RLV6hJr/oxmIOIAVpN8u1k6pLStAra+/mDRotlYZdePdtg8TNYLLflI9Uxu1yHzwMUrOI\neXGxyN5dIhqtiHC55e9EqUhJkZpT214hJ/Mk41+fTWRn8zpSGkSRkyVVVhd0qzrFpeemU1pTapG1\nIzpEMPXLqUR0iGDGyBlsWbHFIvuYm1MHTlF4oZBxb4+jVcdW+AT5ENUtiq3fbLV1aEaTXqTkZJmb\n2dYrqnBBqZFRe5gFES18OXu++KrXaLQS8kqMM4sZ6HgGD7vJm8VRFxWhLi4x6Ri8sbhHtqHH0sUE\n3T6QnaMe5PRnN3dtPPziNGI+nGOF6BpO9BuvkF+xGPd2bRCvdy2uF0AQkd1ZabGjdtFg4PzyH2jZ\nsiXOzZrh0yWW8LEPIfEwTcz/zMrvlQfgYaZ2NJ0OdmzXo9WJV83BUZQXcnBfNs2i72Nu8q9mF/O6\nfbR6zpZbfpjVlVhN0NU6Ncdyj2EwWLaNoscdPZi7di6KcgVvJ7zN8T3HLbqfqXz56pdMeG8CEomE\nSR9PYtyb43jy3ScZ/sJwnh/4PGePnbV1iEaxN7+GCwrziLogEcHw1zvSw8MZBwcppaV/ZSESwfib\ne0dBy1DXSyZGaedmFP6+nYB+DTNVMjdBgwZy29aNSGRyNvfpT97adfW+7uKqFJyCg/CLb3qeF62m\nPIF8WAXSlhqQG2pVUEvt/8sNCM1VyIaWg7Nles9L0w6yMa4nUVOfp82qH+ny8Ty6L12MIDFNRnwl\nDtzvHEgMbmbJyv+kpAh0V5z+KyorOJ9xAoNBT3hkJJ6BPcy2V30YRJGsMgVm/CPdFKvdoR88f5Cd\n2TsxmPlu9UaUFZaRvDAZnVbHqGdH4R/ij7ZGjVanx8Xd+gULf+fLV76k7719iep6/YxlwZQFdOjV\ngdseuM2KkZkHqUTg7pZO+MhNv8ubs7IXReUuV33TPnL0Ih2jmyGRSHBz0jL9wR3IpMb996VCzuSS\n3lRa8933HyNt4mSaj34Q/z69bBqHtqqKk+/NQ5mTQ7tXX8Yzuj0Auupqfh98NwN3/W7T+BqEWoKh\nWgCVBMFZRHAxgAWtXs98tZTiXXvo/vX/zLamAMQ5utNF4mFWIQeoriinrNyZ3Xsk6NQaivIvIpFI\n8AsOxUEmQzSIePtKGDTYskdzEgGi/Txo42OdFmurCLpap2bFHysoUZRYeqt6yfgjg+SFyUyNb0+7\nXw/wjKMDAyeOpPOtnW0SD8C25G2UFZYx4ukRN33tL4t/oSCngPGzxlshMvPi5ODAiNYOOEtMu9PL\nKfRk4epuV1lZVlbWUFRcTUS4P48OSqdji0KT9khRt+OHykCT1rBTP6Jez8ZuvRh8cJ+tQ6mj/Ogx\nTr43F69OHenw0gvsnTiZlo+MxTfespnbP420SVNwj4wkcvJEs63pK5Ex0NHHbMfrV7J7/Wq+ef8t\nfIIiaNv/Y0qLKvALDsHZ7a9uFp0OOnYS6NjJsoIuNYhEKLRExzVHKljeDMcqR+4n809SXtP4tiJz\n0bZrW9767Dni1u2jdbWSUSWVrP16Lfln820ST+GFQnav2d0gMQcY+sRQ4ofEM+OeGRTkFFg4OvOi\n0un49ZwBnWhacUjzgApG9TmFi6MOrU6KTi/BxdUVNzcHVJdS+TnpW3Q6044a75Cfwc3m8wf/nRRu\n205AX9sct18Pr44diE/8jtZt2vB413ja+/rYxfwKqrOy2dSrL80fuN9sYl57V+7OKEfz3ZVfyblT\nx0maP4+SgnxOH9nN+cNfE9oq6ioxFw0i3t4C7aMtJ+YCIoFaPVHlNTgp1ChLLGuP/ScW//jSG/Qc\nyz2G3mBFT+F6ULu58Gmn1qQCCwCVQkVpgWUK9G7GF698wVPvP9WoZ6Ljo5nx3QyWvrmUPev2WCgy\ny1Cu0vDbBSmiIDdpnZ5RF3nizj8YFHeGLq3y6dvpPC2kX/Hj4rf4aMFmhoxchMGEozsnQc0Ql3/W\nF6Z/Cra8P78ZCRWV9GgWzD17D3D2629tHU6T4MJPyRyeNp1+v63D/5beZlnTWyrjPpcAYjBPO1p9\nFFzMoab6rw4hb/di+t4m4OYqIJcJuLgIhDWXcscQab396KYiIBKo0dG+pAa/YgWodYiiSNn5MvNv\nVt/+lj5yP5F3gq2Z5us7NwWDwcA3b3+DolzBkHFDWLNgDZ5htTay7j7WMRf56ZOfCGkdQq+7jb9H\nXPHRCnQ6HQkvm9cr2dKEezrTL1Rpth51vd7Anfd8xv4/zgPQorkPSd+Mo31UkNFr1uDEpJJ4FPa7\ndLOy+dbbuPWXFGSepo+ttQR9ftvE7gG3cWrhZ1SezKDrF5/aOiSbkT79daQuznVjbc1BnNyDOKnl\nhLy04BJL3pmBsqqKuKjW7E0/gZevH1MXLEYQBAwGUCpAkIKrBcqnJCIEaPT4VqtAc23yKggCYbFh\nOHtYdhy4xQV9+b7lFFU33vDDkuh1eqSXzfOP7DhC8sJketzRg7vGNW5YRGM5uusoBzYeYNxb40xe\n68DGA2z8fiOTP5lstS8j5qCDvwvdzNijvmb9USZP/YnKKhX3DO3M4s/GmLzmSlV7VlaZz5b0v07Z\n4SNkfryAHt9+ZetQGkTxnr2kPTOZbou/wKdrF1uHYzVUhYXse2Q8bSY9RbO7hphlTW+pjNvl3nga\nLGd58v1H77ItdSXjX5tNj9vvBECv0yJ1sLwXiRQIUOvwqdaA5sY2uy5eLoTFWNZ10KKCfrroNJtO\nbEKtU1tqC7OxKXETm3/YzKhnR9H1dvMNAPkTURR5O+Ft3kh6w2xrFucVs+C5BYx6dhSdb7FdgV9j\n6RbsRAdv8xlf7DtwjmqFmoTHviMrfSbu7qbd1ysuZ+k19izdLGTOX4iDuwctx914ZHBTQjQYOPDE\nU3h36UKbiY27Hvsncmnjb5ya9zE9vl2CczPz2E7HyT3oInXDQk7Q/J6ygsVvz+Dep6Zwz5PWnX8h\nRSBQrcO7SgXahl0nCxKB8K7hyF1Mu3q84R6WFPQf034kv9w2hWfGoFKqSF6YTOGFQkY9a95Z5Enz\nkmjVqRXdB998BF9j+eatb/AK8Korsquq8qSsxAetVoqbRxWBgU3vXvi2Fs60cDVvociWbZl8+sXv\nrEoy3VZ0RU0HVlXbZmLSv42d99xHzIdzcWsZYetQGk32/5ZQvGsP3RYvQiK33AexLTn5/jzUJaXE\nzHvPLOt5Xc7KvSyUlWceSWPJrNcIa92WJ16fjZOL9aZuSkUI1OjwrlI3WMivxM3PjZAOlrMnt5ig\n55TksP74emq0lh3fZwlyTuWQvDCZgOYBjHp2FE4upmV82enZrP9mvUWnqG1L3kba5jRGz3ifs2fa\nolE7gggSqQFXt0q6dP8DyzdNNBxBgKGtnPE1Q4/6lUye+hNduzRnbIJp1crVODOppAcq+7x0k1Dm\nXOCPiZO59ZefbR2K0ZQdPsKBJ54m9qN5ZisQawro1Wr2jR1HyIhhtBj9gFnWjJO7X74rN8tyV6Go\nrGTJrOlcyjnP+Jnv0KqD9U4lpaJIkEaPd6Ua0YRuGkEi0Cq+FVKZZSrsLSboPx/+mfMl5y2xtNX4\n47c/SF6YzIAHBzAwYaDR67zz8Ds8PfdpfIN9zRjdtWSmq0nb2xm/Zj44uvw1oUhEwMuznM5xBy26\nf2ORO0gY0UqOq9S8vtPNo17j2P7X8DDRRzmppiOp1Zb9O7MUBo0GnVKJXqlEp1CCKCJ1ccHBxRmp\nc+3/rMG5ZYmoCi4RNfUFq+xnSdImTcE1IoKoF5+zdSgmU7JnHwenvECP777GI8r4yWJ/4i1x4HZH\nH4vdla9c9Amrl37B+JnvcuvQkRbZoz6kcMXRunm+pXg18yIw0jJ+FxYR9PyKfNYcXYNCbbkBAdZk\n7ddr2f/rfkY+O7LRd9Ubv9+IXqfnzkfvtFB0f3HkYBfKyz0pvliEo7MjHr5XVBQLENPlIB6exo+t\ntQQecjnDWoFMMN9JztbtmSz4/Hd+/sG0o/cq0ZVJpd1RN5G7dJ1CgeLceRRnz1Fz7jyoVFRnZdeK\ntlKJVqFAo1CgVSgRJBLkrq7IXV1wcnNDQECtVKBWKNEqlWhrapC5uCBzdcHB2RkHFxe8o6LQ6nU4\nhoXhEhaKS4vmuISFIvMwvjJ9/+MTaP30k/h0tYxftrU59933lB1JJ/bDubYOxWiyPv+SsvR0un3x\nmVnWi3N0J05imax896+/sGTWDG6//yFGT3nZ/BtcBwcgUKXDq0oFOvP+waQOUlr3aW3WNf/EIoK+\n6eQmjuUdM/eyNqWytJJVC1ehqFQw6tlRBIXfvDWqvKic+ZPnm7UQ7nqIooR9u+LRaGrv+SpKKtCo\nNPiH+AOg00npGHMU/4Cmd58e4OrInS10SDBt7OKVTHnpJ7rENOeRMaYdvSfWdGS1lbP0mrw8qrPP\nUnP+PLrzOVSfO0/52bPoalQEtWpJy7ZtiWrblvYdO+Hi4oS3uwfe7u54e3ri4+GBr7sHro43nyFd\nXV1NdXU1xZWVFFVWUl6j5MSpDLKzsziTlcW5rGwKzp0FBDxaNMclLAx5qwjcWrXCu0vMTYVep1Dy\n++13MHD3djP9m2kaVGdls//xCdy2bZOtQ2kYIujPOCL11XPg5Sfxjoul9YQnTF7WS+LA7Y6+eFnA\nIOZ85kmWzJqBl68/42fOxtPXOvUschH8VVq8q9WIZhbyK/Fv6Y9P85tP/mssZhf0ipoKfj78M+VK\n2znDWZKsI1kkL0ymZceWjHp2FJIbDCZY9PIiBjw4gMguNxl3aCbS9nejutod4fJUMpVSRXFuMYHN\nA5E5yugQcwQfH9uY6dyM2h71GgTRfAZELaJmkr5/Op4m9H6W48Lkkh5oLJilqwoLKd3/B9UH0ijc\nv5/Ajh2RaTW0iWxL+3ZRdI5qR7foaFqHhFoshhtxoaiIA6dOkp6RSXbOeQ7u3cuZ/ftx9vfHNzYG\nl9jOeMfGXFMdnbd2PcW7dtPp3Vk2iduSaMrL2dp/ELdt34zMvQm3jRpEdGnu6E5Adc5ppP2K8b6l\no8nLdnF0p6vgjrnTQZ1Wy5JZM8g8nMb4mbNp3806Q3LkQKBSh0d1DegtfyInc5LRsmdLs69rdkHf\nf3Y/u8/sNueSTZLdv+wmeWEywyYMo++ovtf8Pm1zGif3n+ShVx+yWkz5F0PJOh3JlX+loihSmFOI\nX5AjWbueQSaX8dCrD+Egs1xfqLG093OhR4D5etR/33GaTz7dQsqPE0xa5/uazqyp9jZTVLViULr/\nAIoDaRTuO4CoVtGzX1/69r+NIQMHEtOyldn2shQag4EdR46wecd2du7YydG9e9FptfjGxeIW1wW/\n3vGc/ngh/gP6ETx4kK3DtQiiwcCWWwcQ/8P3uIRarnLZGEStlsOvzEDUamnbex66XBUuLUKQ9lIi\nCTbe5MvzclbubYGs/JelX/L9R+8yfuZsbr/fOp+bchECa7R4VKtBb90K2ODoYDz8zWu0ZFZBN4gG\nlu9fTnFVMYIVjOibAimLUji+5zijnh1FVLe/pqZNvWMqc9bMqTOwsRZnz0SQc/bP9iARvd4BV1cl\nm/43guLcPACie0bz+KzHm+TfUdcgZzr6mK/y/bmXVxLTKZRHHzL+m36ZwY3JpV3RmvBOqc4+Q/Hm\nrRRu3ERNcTEdb+nDwNsGcO/gwcRGWW8+uCW5mJvLj5s2sWX/PvalpDC6vIKt48fhN2QwzsHBtg7P\nYmy/azid575XN7XN5ogiac8+T9GOnQC4Nm9J/KvrEAI1SFsZf61l7qw8M8NASbGIo3Ybi9+ZTo/b\n7+TRaZa/noTajDyoRotHpRrRwiO960MURVw8XGgeZ77WaDCzoGcXZTNh0gQunrnIkMeGmLWPuylT\nnFdM8sJkJBIJI58dyeakzYRFhhF/V7xt4inyo+BSIAa9DHfPCtwcj/H1m5+Rf6bWEyAoPIhpS6bZ\nJLaG0L+5M+Fu5hP18HYzObx3Ol6exh+9f1sTw/pqr0Y9o62opGDNWi6tWQdaHaPGP87QAQMYEte1\nSbUQWopVWzbzXfIqtqam4Ozri+/tAwi4fSBOwcZb8zZV9iSMpc2kp/HrZZv3/N/Zec99VJ85C4B7\n69bEfTYfpyDjKqs9JQ4MdPTBxwwV7CWX8rmQlYFrwK3s262itPASOsVpHnqiHQGhltcLRy5n5DYS\ncoAjJ44wf+l8olpH8dn/PsPJRCOsKzGroD814ykWv78Yg8GAd4A3z336HB4+TdO72RKc2HeCXz75\nia6d2zDglabls562OY1f/vcLMicZbjI3bh1zK7H9Y20dVr0IAtzd0hk/R/OI+radp/lowRZSVxh/\n9F4muvNsSRy6BrxbLm3YSOHa9ZQfOcqQ0Q8y4dFHGdj9vz3FK3nHdpb9+CNbf/4ZRz8/AoYPJWT4\nUCQyy9tzWos/nn6WkKF3ETzkDpvGkbd2PbmpqyHrDNVSCVEvPk/wHcZde8TK3egq9TCL21vW0cPM\nm/wEisoKug56Er3LMLyDAols60afWy17kukoQnCNFrdqNaKVj9avpKikiAeeeYC8wjykEinvTH+H\nV2a9Yrb1zSboxdXFDL9vOLt/rb0/d3JxIn5IPMOeGmaO5f9RKKuUuLhbYAKAiVSVViGRSHD1cuW7\n2d/h6uHKqGdH2TqsepFLpQxvLcPNTD3qz09LplOHZjz2sPEZ1FJlDBsU9WfpZUfSKUz9hZzVa7jl\n7rt58fHHufsuy84G+Kfy884dJG/cwA/vzyVi1D00G/MgLs3/Had5R159De9OnWg++n6b7H/8nffQ\nK5V0encW6tJSBBHkvo2vpvaQSLnd0dcsWTnU1hvMmTSOA1s2AuDq6cWEOb/h7BZMbJxgses/J1Ek\nSKnDtVoFTaD99L3P3iN5XTLVytpkZeSQkST+mIij2827UhqC2QR9R9YO9p7ey/zJ86koqaDn4J6U\nZ5WTlpZG72G96T2sN0Et/n1Hbf9kdqbuZO+6vUyePxm5U9OztXR3lDGslYAc8/SoR7R/nYO7X8Hb\ny7gvWyV4MqU49qosvXjXbnKWLCW8TRtG9O3Li4+PR/4vtQi1BK989CGLF36Ka3hzgkY/iG9P81sj\nW5sT789F7uVF66dMtyBuKDqFgn2PPE7zB+4j7D7TvqTHyt3oJvUwa1/58f27+WbOW+RknkKn1dIs\nvCUfr96Mg9w8QvZ3nBEIUmhwaQJCnnUui+Upy0lKTSJheAI5JTmcPHaSQP9AfvjsBwIjAglobZ5h\nUGYRdLVOzY9pP1JaXYq6Rk11eXWdK5ooiuxavYtdq3fh6ulKn+F9iOkbY3LgdsxDbnYuC6YsYNyb\n42jb1XTHKHPj7+rIEDP1qG/fmcUHCzaxeoXxwza+UsTym9KTwi1bOb/4a0KDgnj/jTe449ZrOx3s\nNJxFycl8/MnHlBYUEDJmNM3uGW7rkEwia9H/0FZW0m7aVIvvVbRjF0emTafHt1/h3sZ4wxJzZ+UA\n5cWFLH57BlXlZUyc/SEp895A7+7DYzPextnFzWz7/ImzAYJqNLhUq20u5Ou2riMpJYmyyjLGjBjD\n6OGj636Xk5eDv48/zk7OyJxkRHSPQJCYfkphFkE/dekUm05uQme48fi47PRsdqbu5PTh0/QZ1ofe\nw3rj7t2Eezj/Q3zxyhe0iGphFUe7xtLCy5nbmtUApveov/BKMh3aN2PcWOOO3t//6SxfLlhPdLt2\nzH/rbbp0+e+M17QGvx5M450PPuDI778TNmY0LR42fRyurTj7zXfIvLwIHWG5a8fMhZ9TlZFB3Kfz\nTVonRu5GdzNn5YmfzGHzyiSeeH02PQdZ9vrJFQioVuNarcGC88ZuSlFJEYmpiSSmJNK7a29GjxhN\nt07dbvyQBELaheDmb/oXHLMI+oo/VpBXkdfg1ysqFOxcvZNdq3cRER1B7+G9iYy1jvmKneuz8fuN\nnD58mokfTLR1KNfQzteFnoHVgOlv1pbRr/PHzlfw8W740fuypP3M+2QL3Xp2ZdZbH9GuXTuT47Bz\nfTJLS5g8fTo7f06hzdTnCPqH9rJnfDQfURQt4v++f9yT+PXqScvx44xew0MiZaCjL75mzMq3pa5k\n8awZ3DP+GUY9NcVs69aHq0EkqEaLc5XapkK++4/dINkBfAAAIABJREFUJKYmcuTkERKGJ5AwIgFP\nd88GP+/i40JYJ9NnpZss6IVVhaxOX021yriK5PSd6exK3UVZUVld1m7t3m07f5F1OIsvXvmCyfMn\nN7m2w7ggZzqZoUd9x64s5n6yiV9+uvnR+8bNJ1m6LI3AoBBef2MeES3tQm5Njufk8MSUKWRnZ9Hy\nhSl4dWmanRk34sTs93Fr05rm999rlvXK04+y75HH6bbkC3zijD8h6ix3p4cZJ6NlHT3MklkzaBbR\nivEzZ+PiZrnTVzfRQJBCh2O1yhzf8Y1Cq9OSmJJIYmoiIUEhJAxPYGAf44Z4SWVSwruG4+Bo2hcr\nkwV9++ntHMwxfYpX0cWiuqy9+6Du9B7em5BWTct96b+CXqdnwZQFdLmtS70ueLakX6gzER6mi/qL\nr66ifVQQjz/Sq97fl5QqmPJSKlqdhK+/Xkqz0A4m72nHeHbs28e4KZNRu7kS8fwUXMJsY4NrLAee\nmkjLR8biG29a++LZb5dRsGkLPb79CuEGttM3ojYr98HXYJ6WQWV1FUtmzSD3TBbjZ86mTSfLfely\nFyFQocGxSmWxPW7GidMnSExJJHVjKgkjEkgYnkCL0BYmr+sX4YdvC9PmRpgk6HqDnsT9iZQoSkwK\n4u/sWbeHXam7kDnK6D2sN10HdjXr+nYaRsqiFMoLy3n0jUdtHUodggBDWjoTYIYe9VYd3mD/9pfx\n9XG96ueffLaDhV9s4ctFcxl1n/EFdHbMz6crfmTmSy8TNLA/4VOetXU4jWL7XcPp+uXnRtvEHnp+\nKi5hYbR9wfhj7M6O7nSXeJitYCz5ywX8vPgznpg5m77DzXMCUR/uonhZyNUW2+NmpGxMISklCa1O\nS8KIBO4dYt4/r6OrI+Hdwk1awyRBzynJYd2xdah0lvm2dO7EOXat3sXR3Uf/KqLz8aWkKAhf/0s4\nONjOIOC/wpEdR0hekMzkTybjF2KdiUc3QyYVGNHKCTcH00R95+5s3v9oI2tWPg3Ajl3ZPDs1mfvu\nHcLceUtAsF/9NFWeW7iAz6e9QpcP5+Ldu2m4s90UUeTX2O7ccfhAox5TnDvPvkceJ/qN1wi8rZ9R\nW7tLpQyU++Bnpqx872/rWPL2DG4b+QAJz5vPGOXveBggUKFGXm09IS+qlrDikAN+biJ9gs+TlJrI\n8pTlDL51MKNHjKZzu8aN0G4oEqmE0M6hOJswTMokQf/txG8czz9u9OYNRa1Us3P1Tnav/YOofvPw\n8IvGN7CG2G5pSKXmm85lp36qyqpY8NwCBo0ZRLdBN6nYtBJuchnDW0mQC0qT1pk6fRWdfN0Qt2WR\no4KnVq2idRvLvGHtmJfTpaUMHTUSva8PrV+fYetwGoQy5wJ/TJzMrb/83KDXX0xZzdml39Lj26+Q\nezXOevhPOsvd6CH1RDRDVn4hK4PFb8/A3dOL8a/PxtvfODvZm+EpigRUaZArrCPkhSWFrFq/imF3\nPc6qo+7klVVSWlZG8bmN3BGlZsyIMTg7GS+0DcUz2JOgtsb7tRgt6CqtihUHV1Babb1xnGqVE9s3\nt6eyVIteq6Tf4JMEhNhNPKxF4txEpA5SHnjhAVuHAoCfiyNDwnVITehR//3zbYTPWU+4rw+efgFw\nzz3w5ptg5P2kHevzyqcL+Xj6DGI+nINPj6ZvTFO8ew/nliXSddHCG77u6BtvIwAd3nrdqH3cpVIG\nyH3xN0MFu0GvZ8msGZz4Yx9PvD6b6O71156Yiqeh9mhdZsWM/PDxw0x5cwoFxQW0atWFZj3n4OAg\nw8vLh05hLoyOu3E7tjmRO8kJ7x5udE+60Z9aF8ouUKmsNPZxo3B0UhHT9SKhrVw5s+8TPLztR+7W\nJOHlBFpEteC9x95DWWVaZmwOipVqtl6UA8Z9YE2btpqApXvo3KkTnqHNwckJVqyAY8fMG6gdi/L+\npGc5d+4cFcsSyZ79vq3DuSl+veIJ6HsLJ96bW+/vNWVlbB86Ep/YGKPFvJPcjdHyILOI+ZpvF/NA\np3BaRLXnkzVbLSLmXnqIrFQRWlBlVTEHWLluJQXFBQBkZx+ks18ubcNb0DLAlftjrSfmABq1BkWp\n8XbXRgv6qfxTNzWSsQT+gYU4G/5HYHAxTi7mm1Jjp2H0HNKTx99+nNljZ3Nst+2F70JlDXsKnKER\n88sKCqvoduvHRHeJJb5N9NXPSiRw4YLZ47RjWYJ9fDi1fQcP9u7D1lsHUJ5+1NYh3ZDmD96PRObA\nuWWJV/28YMtWdt5zP10/+4QQIwxpXCUOjHD2p4fgYfIR+6EdW5k4qBdFeRf56fgFBj841qT16sPL\nIBJVqSaksBKZwnQ3yMawYs0KRowfwYW8C3h41A4RaxHagkcGRvN4vIZHe2qRWvugToSKvAqjHzfq\nyL1KVcWqQ6soU5YZvbEpLHltCfF3xxPdM9om+9up5avXvyIgNIChTw61dSjEBjoT43vzIrnk1GNM\nf3M1mzZ8RYfOI+Czz+DTT8HNDdRq8PKC7dutELEdS5FfXMyg8eOQduxAsIm+5pbm4OQXCB01goC+\nt3Lqg4+pyc0j9uN5Rq3VUe5GT6mnURXsmoJ8giY+jjy8JaemzeTzmS9h0OsZP3M2Qc3DjYrnRvjo\nRfyr1TgorSviZy+crfVVT0li1JBRJIxIIKpVFGUVZWzYvoFRd4xCZuMJgDJnGWGdw5A5NT4OowT9\nWO4xtmRswWBOn8AGoqhU8N6j7/HOqnesvreda9myYguOaRk806sjR4b1ru0rsxG3hDrT+gY96s+/\nshaFEpYv/wYH+RWmOUuXwrp1tWL+0Ufgbrcj/jcw4LFHuVBdRauZ020dyg3ZOfJBXALD8enVkXAj\nrG5dJQ4MdPQmwMgKdm1ZKQH9uuGrrkEilZLl78+BN+cS1884k5Qb4WMQCahSI7WykG/cvpHElEQK\nigtqfdVHjEYqaaJdLPoLeIeFEBDZeBMroy5YMgozbCLmAPt/3U/3O5p+4ct/hdvuvw3F1+tpX6Hk\n5O1d0djwGmRnbg3ucncCnaqu+nl+QQV3j1rC85Pv5elJ7yKR/s0z+bHHYMwYsE9J+1exeek3TF0w\nn+8fepTY77+xdTjXpc+qH6g8nolHdOPtrzvI3Yg3cV75hZ2/00ajqi0t1esJkTgg6dYTc16o+ulF\n/KpUSGu0Zlz1xpSWl5KYmkhSShJxneJ46uGn6Bnb02r7NwZB0CByCVGXh1ZVTE2lArCCoJcqSqms\nsW4x3JXs37ifR157xGb727ma72Z/R+zUB0nuFW1TMQcQRdh4roYRrd1wv9yj/sfBHD5YsIfUVZ8S\n3Xnk9R+2i/m/kg8mT6F3XByjuvSg94/LcTNhGpklaayYuwpSBjr51GblJoj5iQN7WfzlQnTOztyp\nVCJ3cODMw4+jczXPJDQ/nYi/Qo3Eihn5vkP7SExN5MCRAyQMT2D10tX4epnmwGYJBEELFGDQ56Gp\nKbzqd8ryfETRgCA07hK/0YJ+sewilSrbCHpORg5yRzlB4fa56k2Bg1sOIggCHQfGmWG4qXnQGUTW\nn9UxvLULmzce4uPPtrNrxxpkTk3zg9yO5bmndx9KFAradu5E2NiHCLh7iK1DMokOMjfiHUzLyitK\nilkyawblJUU899HnNG8TxdYP3iGo30Dk3Uw36vHXifhVq5BYKSM3GAwkpSaRmJqIn48fCcMTmP+m\naRPoLIEg0SGKlxD1+WhUhbVZSD3oNEoUxTm4+Yc3bv3G3qEnH0rmQqltqoBXLlhJcHgwvYf1tsn+\ndv5Co9Iw896ZzFkzx9ah1EvGljRyDp7il182IHHwsXU4dpoIPe4dRU1YKCGPmb9i29K4SaTc5uhN\noMG006Sk+XP5bcX3jJ85m153mLeg1V9nwL9ajWAlIc84k0FiSiI/rfmJ0SNGkzA8gVYtWlll7wYj\n0SGhCIMuD63qUoOnwnmFtCcspnHjrBuVoVeqKqlSVd38hRZi/4b9zF4122b72/mLJTOXMH7WeFuH\nUS9bk7birBZZu75xFpt2/v3sW5nMk3PeZ/dH8wkzwRPd2nRwdCVe6gkmGGNu/2UVS2ZNZ9hjT/H1\nrnSzxSaI4K834FelQlBZp5V5zeY1JKYkolAqSBiRwIktJ6yyb0MRBD2CUIxBn4dWcQnR0Pi/OEXp\nxUY/0yhBv1R5yegxqaZyeNthontGI3O0bUuBHdi+ajvBEcG0iW1j61CuIfWzVNqFt+Pzjz63dSh2\nmij/m/YKT787m63vziFi+jRbh3NDXCVSBjj6EGiQGS3m2ceOsGTWawQ1b8GiTftxvdxzbSqWFvKz\nF86iVquJah0FQEFxQe240pRE+vbsy9QJU+nSwfjxseZGEAwIkmL0ujy0ykuIomn/TnSqamoqCnH2\nDGjwM40S9OzCbJuYyQDs+3UffUc2rVGe/0VKL5WybdU2Zn4/09ahXMOyWcsYeudQ3pz2pq1DsdPE\nWTR9BtPmf8yqN96mtZFubJYm2tGVXhJPo+/KVUoFi9+ewYWsDMbPfIfIznFmiUsQIUBnwLfachl5\nXkEeU96cQlV1FW/3G8yKC+dJP32ChBEJbPlxC+6uTaO1VESPVFKKwZCPRpmHaEZ9FEUDZReP4ex5\nW4OfabCga/QaiquLjQrMVKpKq8jNziWqW5RN9rfzF031qD3pvSTGPTKOiY9NtHUodv4hzJnyPHIn\nZxJfnk7k3HdtHU4dLoKUAY7eBIlyo8X85/99ysov5vPE67N59v1PzBKXgEiA1oBvlRpBbdnE7rm3\nniPzTCZSIGfNSu586iUWvrvIons2FAERQVqKQZeHTp2HVm+5eoHq4vONen2DBb2gsgCFxniPWVPY\nv3E/3QfZe89tzbql64jtF0twRLCtQ7mKr2d+zdiEsXYxt9NoZk14CrmzM19NeZF28z+0dThEX+4r\nF4wU8n2/rWfJOzPoO/xelh88baaoRII0enyrNKCxrJAfOXGExNREqqpra7X0wMqQMBJvb7wNrlkR\nRCSS8to7cVUuBr11+no0yko0NVXInRt2ItFgQT9bfBaV1jJzz29G+o50HnixaUz4+q+ScyqHjLQM\nnv/0eVuHchXLZy9n4oSJTHhkgq1DsfMPZebYR5A7OfLD/E8JmjLJJjE4C1IGNiArF0XIzxepUYoE\nBUn4s138YvZplsyagYu7O3NWrMMn0PTWXgkigRoDPlUq0Fh2TPVPa38iKTUJmUxGwvAE5rw6h/c/\nf58LeReYM32OVUaX/h0REam0oi4TN+isr3+iQUdF3in8WzVsbHWDBT2nNMfooEyhrLCMqrIqmrVs\nZpP97dSycfnGJnfUvmbRGu4afJddzO2YzLT7H+TM6dNseHEa7T60bitme7krvaSeDcrKd+/Sk3Ne\nxGAAmcxAjx4CG5fN5Ni+XYyfOZuOPfuYHI8ECFDr8K1WW1TIz188z/KU5SSmJnLP4Ht456V3aN+m\nfd3vX3nmFQwGAxJrjjIWRSQOlRh0eeg1uWhtIOJ/p6rwjHkFvai6CLXOuiPt/uTY7mN06NXBJnvb\nqWXzD5sJahGEu3fTKEQB2JK4hcjmkfYCODtm48sZM3lcb2DPJwto8dxki+/nLEgY4OhNsOjYoLvy\n4+kGzp0VkclAKq01h0laWkB0ZBeeeN30GgApEKDR41OpAq3lhPy3Hb+RlJpEbkEuY0aM4fD6wzg4\n1C9F1hJziUNVrYhrc9EobT8a+kpU1SUY9Fok0pt3eDVI0C+WXrRZ//nxPcfpf39/m+xtB/Q6Peu/\nWc8Hv35g61Dq2L9+P9IaKZ9/ZW9Ns2Nevnr9DQY/9iiFK1cRcO8NrIJNpL3Mld4OjatgP3PWgMwB\naqqrKMrLxcXdnRZtO9CyUyeTYnFAwF+twadKYzEhL68sr205S00kNjqW8aPH0yvO/HPVG4NEWo2o\nz0enyUWjsE07dkPQa2qoLjqPR9DN3S4bJOjZxdlUlVVh0Bvw9PM0OcCGotPoyD6azVNznrLannau\n5ufPf+aeZ+6xdRh1HNt9jPOHz7Nr0y5bh2LnX8qGpd8Qc1t/KkJC8IzvYda1nSQSBjj60MzQsAp2\nvU7HoplTkTrIiOg5m7MXLiAa9ASHRyCTO2LQi8idDNTm141DKooEqvV4V6lBZxkhP3DkAIkpiew5\nuIeEEQmkLE7Bz8fPIns1BIlEgWjIR6fNRaOwnUlaQ7lUXI7MQYpXfoZ5BF2hVrB943a++/A7XD1c\nGffWOHyDrWN0f2zPMTrE24/bbUVxbjEZaRncO/leW4cCwLkT59ixcgcZRzJsHYqdfzmHt2zFr2UE\n0Qs+wqV585s/0ACiZa7EOzTsrhxAr9fxzpMPkb57OwCRWZeI7L8AFw83BAR0evD2gjZtGifmUiBQ\npcWnSoNoASEXRbFuypm3lzcJIxL4+I2Pzb5PQ5FKVOgNuRh0eWjUFTaLo7FcvFTC87O/pbxSwczJ\nCUyMveumz9xU0P84+gerlqyioriCiuIKlsxcwrQl1nFXst+f25aURSmMeHqErcMAoLKkkt+++41T\nh0/ZOhQ7/xHysrJxkssZ9MceBBPuchublf+JaBC5cPqvL686dSF3DJFy9LiATifBw12kV5+Gi7kD\nEKTS4VmlAp2BRg3xaACZZzJJTE3kx19+JGF4Ap+89QmtW9hmKJJEosJgyMegy0WjLrdJDKYy6a2v\nOXOhAIAF36TQ964xdIi78RyTmx+5u9ZOsvkTqYOUaUOm0bZ7W9p2aUtkXCT+If6mRX4dju05xn1T\n7rPI2nZuzOlDp9GoNUT3jLZ1KAB88fIX/JL6C4Ig2DoUO/8R5BIJOzIzeGDMGDp++ZlRa7STu9K7\ngRXsV3Lq4AGWzJpOn7uGs/3nHxFkcu59+jmCQz0ICgGtBuSODVtLJkKASod3tQpRZ/yINllBPsKF\nM0jcPVG1/SvRWrt5bW3vuKKKhOEJnNxy0ug9TEEi1SAa8jHo8lApSmwSgymczy1iz6FM9h4+zZ7D\nmXh5/3USLorg6XjzwvSbCnqhspAJ700g6YMknFycGPvaWLRqLZlpmWQczGBb8jZ0Wh1t42rFPbJL\nJK4erqb9yYCsI1mEtQnD0aWB/9XaMSspi1IY88oYW4cB1PqzT5k8hTgzWVfasdNQerdsxUOPPcbK\n196gzTtvNfg5J4mE2+Q+hDTS7a2qvIwls6ZTnJ/HxHc/IaJdNH3uugdPX1/8m4UCIAgNE3OZKBCo\n0uJVpULUm5aRSyvL8XxzMsozmVQ5OiJ/+V0+OHWUpNQkbulxCy888QJxHa3//hSkajAUXBZx2ziZ\nGkt5peIvAT+UiaOjjPjYSIYN7Mp7UxOQyx14ac73KJUqZj3/INrKgpuuecPxqUqNkp/SfqJMWXbD\nRcoKy8hIyyAzLZPMg5l4BXjVZe+RXSKNyqpSv0jF08+Tfvf2a/Szdkxj/4b9ZKdnM/ql0bYOhfTt\n6Vw4eIHffvnN1qHY+Q/T87570cfG4Hf3zcdZtnN0pbek8Vn5ik8/ZN33XzN+5rv0uWu4kZGCDJGg\nGh0eVSrQm+dgPeCVJ7l4aB9qTW2WKHN2ZeWohxn2wDg83Mwz7KWhCFJNrYjr89DWFFl1b1MwiCJ7\nD59m76FM9h7O5FJxBfGxkfSMaUN8bCRBfl43fF7u4knr3mOQyq9vsnNDQb9QdoE16Wsa3YOem5VL\nxsG/BL5NTJs6cQ+LDGvQGrMfmc2EdyfgF2K7isj/KtNHTGfm9zNxdrO+O9OVVFdUM2/8PCpK/zmF\nLHb+nRhEEfcAf3quSELu61Pva5wFKf0dvQgRG3equHNtKktmTefOh8bxwKQXjY5RDgTVaPGoVCMa\njD9a/zsarQbXhwZTWVKETl9r/ert7ALfrEUXYB0baEGiAwouzxQvrD2D/gdw/PQF9hw+zd7DmfyR\nnk3PmDb0jI2kZ0wkUY00S5NIHYjoPgoXn9DrvuaGR+655blGGcqEtA4hpHUIt91fOyUm81AmmWmZ\n/PTJT5TklxDZJbJO4H2Drq2YL8gpQCqV2sXcBmxYtoFOfTqhqFTYXNC/mPoFv22yZ+Z2bI9EEFi1\nbj1jHn6YbiuWX/P7dnJX+jjUzivXaECpMOAgk+DqWntEXh9nTx5nyazp+AU3Y+GvO3H38jYqNkcg\nUKnFo6pWyM0ldcczj5OYksgvm37hvZ59GZm+H5WyBolUgtvd91Pub7q97I0QBB2CUIRen4e2+hI3\nyD2bDBcvldQdoe89fJrmzfyIj2nDk/cPZMls09qvDXod1cUXbijoN8zQkw8mc6HsgklB/B1llZLM\ng5l12bsgEerEvW1cW5xcnNj8w2ZKLpXg38yf+LvicXJ1MmsMdupHrVSz4LkFqJQqNCoNQ58carOh\nOCmfpdCnax/emf6OTfa3Y6c+Jsx6mx1nz9DiuWeB2qy8n6MXoaIjGg0cTNNTVCCiMwhIBBG5XKBT\nZ4GQ0L+q5LVqNYtnTefM8XTGz3yXqC4Ns/X8O44iBNVocK/WIOrrz8j1ooBUaJwQpmxIITElEb1B\nT8KIBEbdOQoAj40pcGAnhmbNqX7MMk56gqBHkBSh1+Whq7mEKJrvpMFUqqprWLlxH7fHd8TXP4iN\nWe25JTiNtGMn6gQcqDtC7xnTBndX8yZFbr4tiOh5/Tbi6wp6jaaGFWkrbnp/birFecV14p6RlkFg\nWAA9K5WkVSjIUtbgF+LH858+j4u7i0XjsAPrv1nPjpQd1FTXABAUHsSkjyaZpcixMaTvTCdjZwa7\nfrObx9hpekTdegveDyfQo08/bpF5IehBp4V1a3UolXBVh5sIer1ITBcp7dpLSP16EUnz5/LEzHcZ\ncG/ja1REwBmRIIUO12oVGK79+K6oEdibIyWnVIIBEU9HaB9soFPw9XvOL+ZfJDE1kcSURO7odwcJ\nIxLoFGWaA11DkQgioqQQUZePtiYfUbTsIBhjqKhSMubFBeTkFePt6Ua/B5ZRrPKgougUgVWLiY9p\nTc+YNoTWc+JsTuTO7kT2exxBUn+74nUF/WLZRdYcXWP1CWvnTpxDO2UBB0WRvZd/1nVwV/qN7EdI\nqxCrxvJf49VhrxLRMYKT+2rbTvxC/Ggd1pqh04Za7QuVwWDg7dFvU1RQhKwB3sV27FgbURSRSqWs\nPJkLgF4P69boqKm5/jM1VRWc2DaP6E6ujH15plH7OgNBCi0u1xFygAsVAsmH5FRrQCoBATAYBKQC\nRPjrua+z9qorgK27t5KYmsjZC2dJGJ5AwogEnBytcSJqQJCWIOry0KnyMRgsO5bVFE5l5/J96g5W\nb/mj7me33fE4wdGPMiT6Ih0Dcq0Wi0TqQKteCTh51N8qft079LyKPJuMS9VpdKyLak7JpVIoq8Kv\nmR/yKjlJc5MoLyonMq72aL5tXFu8/G9cFWin4ezfsJ9Ot3Ri9EujWfXpKrQaLfc/fz/bV21n9tjZ\nxA2IY/DDg3H1tGy2nvxxMjPemGEXcztNFkEQSPzhRxa+NIln533K2WwDimqoL2nSatQU5+UiCALd\nhr7GvQ+4NXo/F1EgsEaNS5X6ukIOkFchsPwPRxBFHK44JZBIREQgo0BKSrrAwNYlJKUkkZiaSLs2\n7Rg7aiy3dL+l0XE1FkEQEYTS2up0dS6ivmmKeH5Ree0R+qFM9hzOJDjAm/jObfDx8aG0tBQfLzde\nHBWIm/dRvJ2sO8jFoNehKL14XUG/boa+6tAqm4xM3fj9RvQ6PbH9Y8lOzybutri6O3RFpaK2/z0t\ng4y0DGSOsjpxj+wSidxJbvV4/y3MmzCPMS+PoVmr+isvd6TsYMOyDcTcGsPghwfj7mP+yWvnTpxj\n8zebOZp21Oxr27Fjbnre2o87H59IqTKeS5dEhL+ZyRXn56KsqsK/WQjObu44OAj07SfB169hbbyu\nQKBCg0uV+qYFYaII3+yXUVB1fUc7ZY2SkrJiTm1/i7t6tiZheAJBFi5sQxCRSMpqj9PVuRj0Gsvu\nZwRKlbqukG3PoUy0Wl3tHXhsJPExkXhePp2sVtSwbtthundqTXioZczUGoJncCTNuwyt93f1CrpG\nr+HHAz9SYgO3nS9f+ZK+9/YlqmvUTV9bdLGoTtwzD2bSrGWzOoOblh1aWiHafwfZ6dms/2Y9kz6a\ndNPX7vplFxuWbaBDfAcGPzzYrMN65o2fx6+//ErHDh3NtqYdO5YiKyuLvgMHMeyF7ZSWGBAktUJd\nWVpCUd5F/IJD8PT9q1NHFEUGDHTAz//Ggu4qQqCyYUL+J8UKgWUH5KjrSXpLy0spLS9FIpHg7elP\n//au3NFO2/A/aKMRkUjLMejy0KnzMOhtM3r7Rhw8frZWwA9nknXuUl0hW3xsJM2bNe3uKkdXHyL7\nPVbv7+o9cq9QVths/vmZY2d47M36g/07/qH++If602d4H6A2w8tIy2DtkrXkZOTUiXvbuLYENg+0\nZNj/aLat2kbfkX0b9NreQ3vTe2hv9qzdw8eTPiaqaxSDHx6Md6BxLTd/smPVDsJCwvh51c90iO5g\nt3i10+Rp3bo1w0cM59LZQzi4x6BSVFOcl4uTqyutOnSi9gb7L+SOEm50k+QqGghS6HCqVoFIo9rP\nqtQCKo1Y96VCrVFTWl5KSVkJPl4+hAaH4uTohAgUVVtgIAsiUmkloj4PnToXjc7617U3IjungL2H\nM+uy8I5tmxMfG8nL44fRKaqFrcNrFAa9Bo2yHLnLtVfO9WbopwtPs/7YegxWbhnIzc4laW4SU7+c\navJaOq2uzr0uIy0DlUJVJ+6RXSJx9zb/kfE/kfKicuZPns8bSW8Y9fy+X/exYdkGWnduzeCHBxs1\niU+tVPPaqNcQENBqtfTp04cdO3YYFY8dO9YmqFU/ovq9g0Gvw79ZCLJ6ispEA/j6CQwcdO1Fu5sI\ngQo1TlWNT6IOHTvEjgM76B0/kt/zW1FcXkFpeSk6nQ4fLx98va9+P+oMEB2k555OZri/FkWksmr0\n2jx0mosYdDeoCrQyxWVVlwW81tTFw82ZnjFEWAvzAAAgAElEQVSRdVm4zKHx42abCoJEQvMuQ/EI\nvHbwTb2CvuP0DtJy0qwS3FX7puyg6GIRIyeNNPvaFSUVdeKeeTATNy+3uvv31jFRqJUKvnrjK1zd\nXXnk9UdwkDVoVPw/HnNZ7B7YeIANyzYQ3j6cwWMHN2pgz7J3llF+sZwzWWcACAgI4ODBg4SE2Lsa\n7DR9li77nv+lKglrf2e9hXFQay4z+A4HPK64oXIXIahag7zauGy2oLiA+566j8KSQpoFt6RN3zk4\nOAfi4+WDq0v9xat6vcBdHTTEhBifrEkkVRgM+ei1ueg1CqPXMQWNVseL731HZXUNn7z2GIeLO6Ip\n3kl6+gH2HMqkvFJxWcDb0DMmEn8f69rTWhq/8C4ER/e/5uf1CrqtCuK+m/0dHXt1JLZ/rMX3yj+b\nX3v/fjALwfURlJe+4/zJYwBEdonk6blPWzyGpsCLg15k3q/zkJgwHvJK0janseG7DYRGhjL44cE3\nverISMtgb8pepk2exlNPPYVKpaJ///5kZ2ezceNGwsPDzRKXHTuWpGvvW4ga/DFqfQBSQQKXzVz0\nOnB1g57xUgICa4/DPS5n5HIjMvIrefX9V/l5w891//zs5P9R4XY7kuvcVomAj4vIhF6NL0yTShXo\n9XmXRbzayIjNxxMzvmTfkVojl/bR3fGI/RAndQbdPFcTHxtJ6xYWLvazMV6BkYR1vbYw7po0VKfX\noVDb5lvX2WNnGfbkMKvsFRwRTHBEMP3u7YeiSuCDCRfrfleSX8LXb3xNVNcoIrtE/mstaHem7qTX\n0F5mE3OAuAFxxA2I49DWQyx9cylB4UEMHjuY4PD6PZ/3rd3HN0u/oXPbznTs2JGMjAxGjhzJ+vXr\n6d+/P/fffz9z5swxW3x27FiCxG+XMnrcE4yduZysLANKhYDUQSQ4WEJEhAQPT/AwiAQqNMirjRdy\nvV5PYmoiy39eTqvwVvj6+lJSUkJ4aDhP3h3P7vN69py79phAZxBwlRt4pHvDxVyQKBENeRi0eWgU\nlUbHbC5y8orZcyiTXQdPkVtQWvfz0oIMXr31DNHBlTgIt9owQsvh4OCEq2cAzs4+OLv64OTsiajV\nIsiuLsq4RtArVBVoDZasgKyfsoIyBIlgk95yV3eR0S+OJuWLFLQaLY++/igXtlzgwpkLbF25FYPe\nUGdNG9kl8l/jWrd91XaeePcJi6wd2z+W2P6xHNl+hGXvLMMv1I/BDw++yhwobXMavUQ5nbfvhx0H\niO7aleiRtdctd955J2fPnmXu3Ll4eHjw+eef89BDD1kkVjt2TCWydWvCgoM4e3gV/YfVWqWKYu1R\nu6dBJLBKg8wEIT+ZdZKk1CSS1yeTMDyBL977gvDQcPIK8jh84jB9uvVBJpPRt7WOYA+RHeekVClr\nY5BKoLW/nkFRuqv60+tDkNYg6vMx6HLRqW07FKm8Ssnew5mXp5OdxsFBSnxsJMMHdudUsSPrVyfj\nKHdg2oQRdG72z5m6djMcZI64ugfj7OKFi6sPjo4eOEj+Vk0pdYB6BvBcc+R+pugM646vq5uqYy3S\nNqdxcv9JHnrVdh/aRblFePp6XtPPXnqptM6aNvNgJj5BPnXiHtkl0kbRmkbmwUyO7jzKqMmjrLLf\n0Z1H2bBsA96B3gx6aBBhkWFU3v8GL4a2wFWnr/3k8/WFxx6DRx+96tmqqiqeeeYZzpw5w6JFi+jU\nyTqWlHbsNIaMjAwGDrmb+eu2A+Clrz1ad1AYL+Srf1tNYmoiarWa0cNHc//d9zfoOVGEao2ASifi\n7cwNhVyQqkB/qdY/XV16/RdagT9byfYePs2lwjJ6xkRenk7WhmYBV3fSKFVqisuqaB78zz1BvVa8\nPXGQNKB+SxDAywf+VitxjaDvObOHfWf2/b3jwuKsnL+S4JbB9B7a27obG8HF0xfrxD3zYOZV2Xto\nm+tPwmlK/PDBD0R0iKDHHT2suu+x3cfY+P1GHlFreLRMQavIv/kNKJXw7rsw/Np50Lt37+bpp58m\nPj6eRYsW2Vvb7DQ57rprON1uv4v7et+Og8I4E5X8wnwSUxJJTE1kQO8BJAxPICY6xqxxChI1GC6h\n1+ehU1nfb+RPTmRdrDN12XfkdG0VekytgEf9y6y+pTIn3NyDcHbxviLzNqH42s0dPK/+knONoK8+\nspozxWeM38RI5j4xl4enP0xwhHXm65qTK7P30kuldeLeNq6tyf3ZlsKWM8+lOj0d7plBt/AI3Fzr\nscIMD4cffgBp/SXDX375JU8//TQLFy5k4sSJlg3Wjp1GsHfnXsaPH0/yF8mNfnb7vu0kpiaSkZ1B\nwogEEoYnXLda3RgEQYNAAXpdHlqVbY6o8wpK2VM3XjST0CDfOlOXHp3b2CQmSyCVOeHmEYizszcu\nLj44OXkg/fuxuak4OYPv1d1EV309MIgGKmqsf2+iUqpwkDn8I8UcuOroXVmlrBP3jcs3InWQ0rbL\nZYObLm1xdHGkuNgfP78idFodBecLCGlt3W+ipw+dJrRNqM3mnRdsOUQ3J6f6xRxqs/TSUvCvv/Vt\nwoQJTJgwgUmTJtGhQwcWLVrELbdY3ovajp2b0bNPTwIDA9m2bxt9e9zcrKlGVVOXjbdq0YqE4Qn0\ni+9ntngEiRbEQgz6XDQ1hWZb9+/IL5Wg2LgPp1tj0V9RAFutVNXdge85nIneIBIf04ZBfTrx+qR7\n8bDRZ5A5cXBwxtUzsPbY3NkXJyd384t3fdRzLX6VoFfUVKCzwdSbvOw8ZI7/jmEcLu4uxPaLJbZf\nbetdcW4xGQczSNuURuLcRNr1ew2fsO4ENXNjf/JUCi8W4h/mz8QPJlrtCDl9Zzqd+tjuHnrtur08\n2z4a1PUcSYpibWZ+HTG/kk8//ZTjx4/z9NNPExISwqJFi/Dysg/ssWNldu2Co0ehqAiiopj10Fgm\nf7rwhoJ+5OQRklKS2LB9AwkjEvju4+8ICTLPF3tB0IFQiEGXh0ZZUPuesiAOF4swPPcJrhotstU7\nufT4MJYWlbH3UCbncovq7sAfGdmPMCOMp5oSDg7OuHoFXM68fWszb8FGniUGsVbUpX/tf1UkCrUC\ntdb6lq+Xzl8i6F/aN+gX4odfiF9dbcD+HcEUXILTacfJSs8GRCpLK/lt+W8MemiQVWI6suMIL33x\nklX2+jvZ6dnoHJ0JfOJJeP99cPtbli6K0Ihq9ujoaLZv384PP/xAREQEL7/8Mq+++qqZo7Zjpx6q\nquC55yA9vfZUSSYDtZr4kFDuqapg/+H9dI/pftUjyeuTSUxJxEHqwOgRo3n/1ffNE4tEhyAWIerz\n0aguIVrR5bPwoyR8VGrUgKDSoFq+Afe7ezH9mZF0aBNmtTjMjYPcGde/H5v/n73zDo+qzv7wOy2Z\n9EYakIQaeon0XgSVogKiICiK3Yhd114XddcuKljX8sOCu6IURaUoVQgtdBJaeu+TMu3e+/vjJkMC\nCSSQmTsk932ePEkmM3POTfvMOd9TlBLv+hBFeXdvQ4JeXFmMWYEZvDkpOUR0aJmCfiaDR2VTVGjD\nlJ/Pvj8MWM1WjN5G9v62l00/bZKn11Wn6J3RwpdyOIWQiBCnbEtrDOu/Xc9zzzwH02+U0+o//ADl\n5fIvZkAA3HEH3NC4St7azJ49m9mzZ/P0008TFRXFkiVLmDp1qhOuQEUFqKqCG2+ErCw5o+Rd3cpq\nMKApLeFBSxWLP3wFPl1BWmYa3674lm9//parJ1zNy4++TK/YXhftglYjgiZfXkdakYMkNv+M9vrI\nzi9xzEXfvjeZ5z0MTNRoQJLw1GqI7tmB+bMnusSX5sLg4V0t3oF4eVenzd1JvOtDEsFuBw9Px011\niuI2Jm9kb/pel/u15PElXD7ncmLjLs0WsAsl4fcEdq/fzehpo+k1vBcVpRXV0+vkGfQeRo/T7XED\nYvHwvPj1sCs+XkFAcABjrx978RfQRDJPZPL38r/Z8tuW0zfu3g27dsnRzcCB0AwtaRkZGdx7772I\nosjixYuJibm0li+oXAI8/zysWAEe9f9NSqLE7sOHeLtdDFvNVcy5dg5zps3Bw3CRf8MaAa2mCNGe\nic2cgyQ5/4i0ymx1nIH/vTcZq9XmmIs+NC6WQD9vhBc+R3c0BW10GNK/4pEaKGh1BwwGL3wCIvEy\nBspDWi4F8W6IMyrd6wi6UhXuL9zwAo9+9Cj+LWzebmOQJKnBs/O89LzT7XG7k2nXpR2xA+QCvAtd\nD7vwpoXc++a9hES4/ixr5ZKVDO03lFefe9Ul9n799Vfi4+OZPXs2//pXM6U2VVQKCmD2bCg9dwFx\n9qkU/vIL4rIvVl2cPY2AVlMsR+LmLCQX1DntOXTKEYUnp2TLlejVIh7TwJ4GTaUZyctT7pF2Ewwe\nPvj6h2H0CpLF28MfXUMD9y9FjEYICXN8Wudliclscrk/VeVV2Ky2VinmwDkL4cKiwgiLCmPUNLmC\n+9ShUyTvTpbXwyanOZbLxF4WW+/M9KyM9pSUBOLnZyIqJpXM45kYfY2KiDlAwtoEln20zGX2Jk+e\nTEpKCv/+978JCAhg8eLFzJ0712X2VVooGRnyMdF5CA4Px+v48QsyoUFCoyuSh72Ys5AE507vlNeL\nHnOIeO/YKIb2j+WxO66hXyPXi0reZ2+ZcyW1xdvbJwRPD7+WJd71Ya97zOIQ9CprFYLkmjOY2uSk\ntNyCuOamY6+OdOzVkSvnXYndKq+HTdqdxNaVWzFXmusIfEracPKyI9Fq7eTlRFJm8id15xr6jeqn\niO9HdhwhbmAcoW0av4WtuXjiiSe49957iY+PZ9++fdx0003qtDmVC8fDo1FRqKfRE3//ADYnbGbU\n4Ma0VUpodcWIQjY2cxai4LwC5cISk2Ogy997a9aLdmXmVUN566l5eLj5tklZvOWCNS+f4NYh3g0h\nCI6ZHY6fWoW1wuXjXgFy0lRBvxD0Hnp6DetFr2FycU1pQSlJu5M4tP0Q6/6XRsdBQ/D0zsPoY8To\nbSQnM4LkfRZufOQyRfxN3JDInfOcMze+Mfj7+7N06VLuv/9+br75ZnXanMqF07atXMCZmysXJdUM\nbTcY6g5DstkIHDmKFetWNCjoEhJ6XRmCPRPBmoW1mYqSv/zxLzq0D2XskF6sSepNuU1PRNUyduyT\nR6sWlZQ7Bro8eMtkt14vavD0xdevumDNJwRPT190mlYq3mci1bSunSHoldZKSstKOZBwgM59O+Pj\n33wTis5Fbmou4THnXrGpcn4C2gQw+MrBDL5yMEWFwezaHo7NXIap2ER+Rj5G3wCMfhHnXWfqDAS7\nwJ5Ne7hj3R0ut30m77//PiBPm9PpdHzwwQfEx8cr7JXKJYMkwR9/QF4e1KTTawRdo5HPNAMDwc8P\ngoLo++qrrI3ri+UxC5411ciShFZnQhSzECyZ2OxVzeiexIMLv+SvHYfQ67RMufZ2Sv0HY7Za8Sj2\nZXA7f/712By6NrD9UGkMRj98fMPx8g44nTbXNN82yJZCfmEhm3YkcMWY0fgFnO6Gcgh6YVkhb93/\nFpknMgkKC+LBRQ8S0CbA6Y7lpObQY1APp9tpTfj6mfDxtSF4+eEXJLenWSrNjIvvqYg/u9bu4uqZ\nZ+/uVZKaaXP33XefOm1OpXF8/TUsWiSfn/v5gaen3H+u1cqiLklQUSH3p+t08OCD6HvEMnvGDfz0\n2w/MmT4N0Z6FYMvCWtn8K6rTsgv4fVMiR07Iq6DtgkhiwmrGzZqBv18AN/ePwVPvPvPRzxRvo4cf\nWlW8z0tGdjYjrp1BWlYW/Xr2YOemTRi85LZJh6D/74f/kXkiE4DivGK+Xvg1nft1JiQyhJCIEEIi\nQ5wyl7w19aC7Cg8PG3GDdnMgsT9WiydanY0R4xLx9lEmrbZ3/V7e+Pcbitg+Hx9++KFj2lz79u1Z\nvHixOm1OpS6CALNmweHD4OMjizlAx45yH7rJBDZb3Sg9LAx++QXsdu6+7y7uuWMeMy5v3v+fpaZK\nx2ay7XuT0et0DI2LJbxtDAXFB/Hw0HPrjJFMG3MYq6jHU+/6I9UaPIy++PiFY/QKlCesefqiVdPm\njSI1I5OTaWmcTE3jZFoam7ZvJy0rC4B9h4/ww48/Mveuu4Fagt6lXxcCQwMpyS/By8eL2PaxaD20\nnDp4il3rdlGYXUhJXgkhbU8LfO234IjgJu8JN1easVRaXJIJaG14e1cyaOh2BEGPwXBhW5+ag6Kc\nIoryirj6CveK0GtTM23uu+++U6fNqdRFFGHSJCgslMX8TNq2BbMZLBb5PN1olN9qztJXr2ZYXh5R\n7duSmpnfYMtXY/m71lz07Lxix2ayu2ZNqLNedOOOw0gaGDu4JyDhpXVulXxtPDx96w5paeninZQM\nHTs0OJPgfBSXljrE+lRauizetQQ8ul1bOkVH0ykmmk7R0cyYPJldBw5iNptpHxnJ2GHDHM/l6EP/\nNuFbDh09xNaVW7ls/GVEd4s+y7AkSRRmFVKYU0hhdt23opwiJEmqK/S1hb9tyFkFSKcOp7NiyY88\n9P5DF/SNUHF/Nv64kU5tOvHWy28p7Uqjefrpp1m6dCmLFy9Wp821dubOhYMHL/ifNQAWC+sFK2tH\n9mDuNSOb9NAjJzIdleg160VresLdYb2oh9EPH79wvLwC8PaWC9ZatHjXxm6HJ54iL3EfUkU5wa8s\nxHD5+LPuJghCg2J9Ki0djUbjEOuO0VGyeNcS8PoKdxMSE/l+xSruu3UenbvEQphcG6WRJEmy2C38\nd89/KTAVXNT1VZVX1RX62sKfVUhgaKBD4APb9aHS0g9rwVJmPzb7ouyquC8fPvwh7779LlMmTFHa\nlSaRnp5OfHy8Om2uNfP22/DVVxcn5tWU5eTwop+B+W+ce91vzXrRmn7wduHB8o5wN1gv6hBv7wC8\nvdvI4k0rPvN+eSFFP/1ESkEhoiQR5OPD/qef5FBJabVYy6KdmZPboFh3jI4i0P8ij0J1eohoC1QL\nekllCT/t+4nSSueuTi3OKz4t8IU9qbL3Z+xVBwkJv/RX6KmcjWAXePLqJ7FZXZfua27UaXOtlPx8\nmD5dTqU3A5Ldzvp9+whfVbeWpKH1ojWjVZVaL+ph9MfXLwyjd+DpyLsVi3dlVRWn0tM5mZrGqfR0\nUk+lMHvVarxMJszVvyOBBgPLunfHPH5stVjLoh3drq1zndPpICwStFr5DN1ityC4YLB/UFgQQWFB\ndOnXpfqWE4Aq5i2VY3uPMXD4QKXduCjUaXOtlNWr5RGvfs2zxEij1xNr9GD/ii3kdoxwFLK5w3pR\nT2MAPv5hGI3VrWKtVLzTMrPqRNY14n0yLQ1TeQUdo6LoFBMtv+8QQ9DgQQTv2s2p/HwkScLD05Nn\nPvkIotq71nFJkms9tFo5Qk8rSuOXg78osjpVpeWy5vM1DO4xmH8+90+lXWkWysrKiI+PJyUlhSVL\nltCnTx+lXVJxFjfcAMeOgb75JqblpKexuqiIT3t0YGj/rgyNi3X5elFPrwB8/MIci0lakniXlpn4\nx6uvEtO+PU8vOPtoo6b4rHakXVu420WE14msHeIdHU14aJuzDdps8PCjlB84SIUoEP6vV2HECBdc\n6RloNNAmHDw8qiN0mwWrXblKaJWWybHEYzx3/3NKu9Fs1Eyb27p1K3PnzmXEiBEsWbJEabdUmpus\nLDnl3oxiDuAXHEwPUxmfv3QHkgtGq3p6BeDrF46xumDNw8OnRfd5j581mz0HDgJwIDmTduHBpKQe\nP6v4rCbS7tezB9OvutJxm66pG+IMBvhgEb55efh6e4OvrxOuqhFIElRn2PUA5dZyai1dU1G5aCyV\nFnJScxg5rGlVvZcCI0aMYP/+/Xz00UdoNBoWL17Mvffeq7RbKs1Fbq48MKaZ8fHxRbTZqUjPxbtT\n81aoe3oH4uMb5qg2b6ninV9YeFY6/GRqGkknT+JpMDjud+TEKXrEduXGab2ar/isIcLCzn8fZ2OX\nZwxoJEmSNh/fzO7U3Qp7pNKSOLjtIMmbktm0dpPSrjid+Ph47HY7n3zyidKuqDQHO3fC3XfXncve\nTBw5dYI/Z4xi1LWjL/g5Tot3IN4+wXgYfNG64U4CQRAcUW/NdNzzYbZYTrd01U6NV9/m7eV1Vjq8\n5uN5/3iSxL178fby4ou332DSuHFOvkI3wtcfAgLlCL3S0vyvRlVaN6f2n2LM2DFKu+ESFi9eTEpK\nitJuqDQXer2cThXFZn/q4DahnMwpprFDho3egXj7huLlFVQt3pdG5P3dzyv57LvvuPbKK7jr5lv5\naL1E+xAtMwdBelZWHZF29GenplFSVna6pas6NT522FDHbT7eDQ8v2/TdUvYePIS3lxfdOndy4dW6\nAUKtlHuVrfmWA6iogFzh/uJjLyrthsvo0KGD0i6oNBehofJUOJOp2Z/aKyCAP46mcks9XzN6B+Lj\nFyaPR/UJxlPvg+YSEO8z2bh9B3c/+RSm8nK27tzN5oweFNnbYbVZuffBF/GyH3eIdafoaK4cO8YR\naUeEXtwkvbjevZrpKi4xJFXQVZxElamK4PBghg8arrQrKipNJzIS2rS5cEE3m6GqSs4x6/Xym9EI\nVVX4TpnCkbfewsuvDd7ewZekeEuSVG+EXfNer9dTUV2DYLFa8LYeRR/ah2A/LSuf+YIgX/fetX5J\nUp1N0ouSqMgedJWWS256LpYKCzptKxkBqdKy0Ongmmtg4cKm9aEXFspvNpt8aFyDwSBvZvP1RTtt\nGl1//gmbGEXbyC4NP5cTqW5ZPic1xWe1x5XWfJyakVknwu4YHcV1kyc5JqGFBAVxzfzbSTx0mOh2\nbfnk+TnklHoS7CfhZ3TNNbY6agTdYreoFe4qzUpeeh5dY5UdU6miclHceKM8+rWxpKTIlfEazdlq\nKYry16qqoLycPn36cODoUXp0db6gW202ps6bT2pmBu//82WiY8ewPEFi7nALFcVn92LXvPcyGuuM\nKx122QDmTJtGp+hoOjRicMrKLz7nwNGj9OneHYCYUFVjnI4oorfarYhS8xd/qLReirKKiOsRp7Qb\nKioXjk4HCxbAm2/Wv2WtNqdOnU6xn4vISHj8cWZ1i2XPkaPccLVzF/9kZGdz5+NPsnbzZgDuf+lN\nooYGUWUz8P2qEwgn36VjVHvH+XVN8VnHqCh8z3fNjaBGzFVchCSit1jL8ddDm4A2mEU7FruARRAw\nC1asaipe5QLIz8in19RWWpyi0nKYPx/WrIETJxpuYcvJkaPvc+WwBQGCgyEwEIBx+w+wKTXtot0r\nNZnOauuqnSKPCA0lLOT0KFlTSTbj+3iSb41h7qjuDOx0aS1MUgHQIFW/cJQ0IEkaRCSsVhGxyo6+\njdHINe3aouds8RYlsEpglsBiF7GIEmZRwCKKmO12LGL1bULNiwA7FkHAItixCDY1ld9KyU3PpVdP\nVdBVLnE0GvjhB5gyBTIy5HPw2tjtUFx8bjEXRfkcvu3pBR0+wIBDh85rXhTFBs+xT6amIYpincln\nfbp345orJjg2eun1ekrLTFwx5yZsdhvPPnA/MybHkm+C0OYZUa9yIWg0SGiQNICkQQSQJERAQoNd\nkrCLYBfBKoBFEDHbodImYRVEBEnCLmoQkBCq76fV6hgSpEGvRYNWA9SjvVoNGDVgBNDV/NI2rtBJ\nksAKWESN/AJAELEIIhZRqH4BIGKRRMx2+bbTLwjsmO1WRPXFwCVLTmoOfXqqc85VWgAajbyo5c47\nYdeuuqtUS0oarjCTJPktIADa1z1z9vD1pXtVFeXZOVTo9WecY5/elZ2RnXPW2s2Bffs6UuRBAQHn\ndT/A348dq1eQm59PeHVLmCrmzYBWi4SEJMk/exFJFmkJREAQZdG1imAVJSwCmO0iVVYRm1gjyGAX\nJQRRFnFBlB/bOOrqo14jIUoSGsmcL1Gwi6Y8lSuwiWBBwmLXYJbE6hcFdvmFgCDKmQLHewGLXcAs\n2rDY7dhdsDlOpX4Kswv57KnPyE7PVtoVFZXmZfFi+O47eTSsl5f83mSqe3Zes/nKYJDPzBsYN5p1\n4gS3VFRwIMD/jIlnp3dlO33tZmvHESlrkDj9GkxCQpCojn41WCUJqyhhtoPZJlJll7ALOATZLmkQ\nxOpomboNDi67FC0M7xmJHknE3cQcwKAFAxp8PQC01W+N618UkLAIGsyihEUEsyQLvkUUsdjF6s+r\nXwyI1S8GBDsWuw2rqNYNXAx56XnEdIpR2g0VleYnPh7mzYN162DVKvjtN1nMawRdq5Uj+JCQ87a7\nRQYGsmrRuxjHjXW+3y0YCS1oNXK0jHymLEnyx4IkC7JdkrCJ1Zpgl6iyiZgFOa0tiFKd+8kfN90L\npZFEECUJPVLLEzAdGrx14K2reeWsp7EvBsTqowKzCBa7JGcHhLp1A2ax+vhAqDk+sGO227AINmdd\n0iVDXnoenbt2VtoNFRXn4OsL06bJb7fdBgkJp0Vdr2/0/HeNVoMxKMjJzl4aSNUDdWqKvCQkxOpo\nWZDk1LRNlLAJOFLXlXYJi11CEEXsNdF0zZly9edN9KK5L8vl2AURPWpEWgdtdc2AUQfoNMg1A02t\nG6Ba9KmuG7DL2QC7KL9AsNeuJbBjFuSjgpbQPmittDJs0DCl3VBRcT6DBsH27edva6uP8AjwaXgu\n+SVFfUVe1RGzKGmqi7hkUbYKGiyChNkuUWmTqs+ThbOKvOySHFypNB67XUKPet7cbGg04Al46sBf\npwUDNOWoQK4b0MgFhKJUp27AXJ0lcNQN2EW5ZkAQsNhtblM3UJhViFGvjoNSaQVccQV8+mnTHycI\n8srNbt1xm/+/Gq0jQoYGirwkDTZBLvIyV4tylVXC5hDk6iIvSVNd7HXhRV4qTUcQRPTU066mogxy\n3YCEr1YDaGjKiwF7dd2ApZ66AbNdwFKdGaipG5CPDwQstuatG7BUWQgKVFOJKq2Azp3lKH3XrvPP\nUq2N1Qr33N24faJNQaupTllrqsX5dCSkJ2oAACAASURBVJGXWH02bBc12CRJ/j9hhyq7SJVNwi6I\nDRR5aRrZfiw18LGKq7CJohqhtxT0aNDrwOcC6wYsVJ9PVc8WsAhCdSag+r0o1coOCI5jgjPrBsyV\nZkKCQuo3pKLS0li0CMaNk+e3NwazGa67Dunyy5Hy8zjzZYBUfR4vQZOKvCx2EZukQRBx9CnXFHkJ\nYlMlVhXnSxFBBD0a9QfW2tFqwAvw0gNc4LwBAcySxEdmC23UYh+V1oKnJyxfLs9+Lyw8e/hMbex2\nmDABXnoJQRDJMIFWo5X7k+1ysZdc1FXdm9zkIi9ViFstkjyISF+zpUVF5UJw1A3owR8NksVOoL8q\n6CqtiIgI+PlneOEF2Lr19CjYmkUtlZXyfebOhbvvBkCr0XCyQsJU2VBkrwqyShPQyGtt9eovjgsR\nJSgohuAA0LfM1aKm8kr8GhimoaLSYgkIgHfflbeu/fGHvLClslK+fexYGDoUvE9XtWscdTIqKs1D\ndR+6eobuErYfgK9+AbMFbAJcNQxumqS0V82OqbwSPz9V0FVaKR06wF13nfduspyrwVRz4p2VRuTm\ntRhMZZTG9iZ79ESlXXIp8hl6dQVj8slMYju1c6kDVWYLBr0evYujVZdf645D8MIndYdOfLEKCkrg\noRtd54cLKK+owtfXV2k3VFTcHm1TKuNVzolvRgpxCx/DUFGOqNcSsXU9IYnbOfjAcy7zQaieJWIw\neJz/zs1IZvop2kV1RBIltDablRl3LmTmXa8y/5F3XObEru/+4NmhtxE7+i72HDjhdHs2QYMgiMxZ\n8DrX3fUqN8a/jtD0cUJNJ7cIPv7x7AlSnh6wdgfsOOh8H1yEqbwKP98WMixDRcXJaJq7ba2V4lFW\nQs/F/0JrtyF4eiLpDEg6HW12bydm1Q8u8eH40QPEz7mcBXOv4NC+nS45yZYkifdeeZzXn43n9Wfv\nw2a3of/4q//x82/bkSSJw8fSKS2rIDzUuUVNYcVlzFybwN0WK8XA7Hv/xfiR/Zz6C57veR3Y8vlp\n5SZEUeJwcipVFguRYcFOswkQnV/MQ6ey8PKqZ9iK2QoHTsCQ3k71wVWYKqqIiYpU2g0VlUuCFlpG\n43J8MlLxys06q69f0mmpXPENHyUdcKp9SZLYt2sruVnpAHz42lP0GjITnZDpVLulRQXs2LoOURBI\nO5nMT8u+Rh8c4I9er8VmEzDoteSX67hiTEenOuJVXknV+gR0QDpgNBrILNExZYTzlnocN0nYqiQM\nej0Wqw29Tke+SctVY517rSV/m8jILqRrfSl+UQJPg1PtuxKtVkNBYYnSbqioXBKoDUbNg6jXy90E\nZwzAsZmrSCvMo8PUG5zuw96/1zk+1ur1RHWMwgPn7qnNy85Aq5FH7Wq1Onz9g9DPuX4yyUlHWLtp\nL7OuGc0Dt1/jVCdqyBrej5cfexeLnw8bPn+ONkHOvXhB1KDTRtLWay4r/9jB1ROH8OR91zvVJsDm\nyDbkbt1P1/q+GOADcd2d7oOr8PPxwlReobQbKiqXBII6rLxZKOvcjarQCLzy6q5slkSRrSGhXDVt\nrtN9GD5mEq89cw+SKPL4P98nJNQ1mcrAkFC2/bmGuMGjuGrqdDRSYaJEVSYVlWZ8vF07g1uSJEXO\nkcorzfi66Fr/3n2Ut5/5kP96GMBsk/NsQnVnwYLr4erRLvHDVWijpiIIgno+qKJyDiQJNu7PorTc\norQrLQIPUxkDn7sPr/wc0GqxevuxvXd/njp+hJff+0Zp95yKpaoKTy8vokJ90decO7hazEG5ohBX\niTmAl9GD4xLw4RNy21pGLvh6w7WjYVScy/xwFf5+3pSVlREQEKC0KyoqbosgimoXejNi9fNn++uf\n0SYxAY+SIkwxndleVIAh7aTSrjkdTy8vQD7y1KNRWyeciZfRgyqzFaLC4dnb5HNzbcv9U/bz8cZk\nUgVdReVcqOn25kf08CRv8CjH59a/fsPDs/VsftRqQKtOK3IuXkZPqsy10motWMwB/Hy9MZWVKe2G\niopbI6qC7nSsVgseHueYrd/C0Gq1aNUI3bk4IvRWgizoJqXdUFFxawRRauRaUpULxWoxt6oIXafR\noOWsBX4qzYnR0wOzpTUJuhcmU7HSbqiouDWCKCGogu5UWl+EDlq06nQDZ9LqInQfb0xlai+6isq5\nEEUJUVAF3Zm0tghdTrmjV9qPFk3NnHq7vXUswfHzNWIqK1XaDRUVt0YQJbUwzsnYrBYMrShC12lA\ne9aMcZVmp3e3GCzWhvYetyw6RYdjsVQp7YaKilsjShJ2dVScU2ltEbpGLopTI3RnU2qqIK+gdUSt\n4W0C2LN7j9JuqKi4NaZKG4JdjdCdSWs7Q9dpUQXdFUSGBZOdV6S0Gy6hW+f2JCUfV9oNFRW3przK\nqnYMOxlvHz/8Apy7aMyd0Ou1aOVJcWqluzNpGx5CVm6h0m64hG6d25N0rOVPZ1JRuRgqquxKu9Di\nSTl+FC/v1rHOWavRoNPWtK2ple5OJTIsiOy81tHK1S4ihJLSMioq1CUtKir1IYgSdkE9P3c2xYV5\nBIWEKe2GS9DpNOh1jghdzf04k7YRIWTltI4IHaBbl2iSjuxT2g0VFbfEbLWjnp47n6LCPIJbi6Br\nHYKuQ50W51xa0xk6QGyn9iQfOay0GyoqbonZKqgRugtoTRG6VqNBr9OgRWtAPUN3Lq0p5Q7QrVMk\nSUlHlHZDRcUtMVsFzFb1DN2ZlJeVYPTyQW8wKO2KS5AFXYsWjUHNuDuZVpdy79SOpKSjSruhouKW\nmCpt2NUpcU6lqDCf4JBQpd1wGRqHoGv1qIruXFpbyl1uXTuhtBsqKm5JWaXl/HdqYVhdPP26NaXb\nATSa6nN0ADntruIsQoL8MJVXYbXZ8TC0/L7/nl2jCAzwBcECutYz2EFFpTFYrK3n/FySJFat/JPc\nim50jzhK+6hIwttG4+3j61S7rU3Q9Tr52FwVdBcx5fJB5OYXE9W25aeBjEYPKiur2L5tE0NHTVTa\nHRUVt6G8yobF1nrOzzNTT7Bl4zai+3dn21+/kpOeRG5WGlqdnoi2UYS3jSY8MoqIdqc/Dm8bhUZz\ncVnj4oI8gtq0HkE36OsIuoeSvriEA+k+eHkIdA6zoNG4/vzKYrVz4GhKqxB0gPEj+rJhw3pV0FVU\nalFaacVibR2LmgBSTyYR6ptL/M3t0GrectxeXlZCTlY6uVlp5Ganc/zoQbZu+JXc7HRys9IJjWjn\nEHdZ8KMdHwcEhdRrSxAEtm74BR9ff4oK8wmLaOuqy1Qcj7qC3nLToqIEn/0VScIJH2x2iOtYyUNX\nZrncj17dojmUlMbk8YNcblsJxg/vw2tLVvH0C0p7oqLiPhSWmrG3oi1rqSeTiekUi/aMIMrXP5Au\n/oF06d6n3sflZWc4xD03O52ELescH1uqqghvF1Ut+NHVkX4UG9b8yPaNv2MweNIuphOdb1zgikt0\nCzwM8nA4WdD1LVfQtxyoYu0+DxBKsVht/JIDmrJMHry+nUv96BUbw5/bWs+wlfEj+jHxxmeVdkNF\nxa0oNrWugri0k8mMvWpakx8XFtmesMj29Lls2FlfM5sryc1Mrxb8NLIyUtj2129kpiQhiiIWSxUl\nZVp2n+xE6n++oX24pyOl3yYssjkuy+3wrCPoWh8lfbkoSk0VnEzN4WRajuP9qbTqz9Ny6NpnMm3j\nHsfDAJ4eBry9vVj8xUoevP5el/rZq1s0H3yxyqU2leRwli9Dhk1g45/rGTPucqXdUVFRnLJKK1Ir\nis4BUk8eJaZT92Z9TqPRm5jO3Yjp3K3O7S8/Np892zei1xvQUElwgAdGSymH96ewYc2P5GalUVSQ\nJ0f01Sn8iFrn9hFto/H29WtWX12Ft2dtQdd5gEYPkuuLNSqrLLzw5lJ6xkYzf9bZ562SJDnE+lR6\nLidTsx1ifTI1B1GU6BQTQafoCDrFRNCvZ0emXTVM/jw6Ap1Oy79XB3Eo3YhOCzFtLGz4z0Yqq27D\n28t1mYlesTEcSk51mT0lSMvMZ93mvfyx5SinDPdiaHcbG9atUQVdRQUoq7RRaWk95+c2m5WC3Gwi\n28e4xN7zb37BL//7iqCQUN5/7Qnmz44B4uvcRxQF+ew+M43crHRystJIOrTX8bFWq5MFvyad3+50\nWj8ssv5ivXWrfyAj9Tg33v4wnkYvl1xrbfQ67Rkpd60BtHoQXCvokiDywKQH+Op4BpJWS8K+ZKIi\n21RH2bmcTMshNSPPIdYdo8LpFBPJ9X27Om4LCjh/+8MjkzLYm+JDpVXP2B4lrPw0jKQTGcT17uyC\nq5TxMnoQERbEqbRcOkaHu8yuMymvqGLd5kTWbt7Lus2JmC1WJoyKY9rEOLr11JKXk8fC9zbwktKO\nqqi4AfnFVdiE1iPoaSeTie4U61KbU2beQvLhRKI6dK3361qtjrbtO9C2fYd6v+4o1qtO59cU6+Vk\npZOXLRfrOarz20aTn5PBH6uWIYkih/Ym8MYny0Hr2smrBr3mTEHXO3Weu9lidQh07ZS4Yf9x3s4v\nphL4ThT5cc1Obr9hHMMu68GcaWPpFB1Bh6iLFz+DTmJw53LH5927tOfocdcKOkDvbh04mJRySQv6\nph0HWbtJFvCDSalMGNWfiaPiePD2a4ntdEZdQtcuXD3vADZLJQbP1rHGUEWlPkRJorSidZ2fp544\nSkzn5k23N4a0U8eI7li/oJ+PxhTr1VTn52SmcGjfTiRRnitQUVrEE3MuJ7BjN8Lbtj/dkled4jcY\nnNNNptVqzjhD1xguWtAzsgtqpcZrn2fnUlxaTsfocEcavGN0BGOG9qHTYzex5oVPWLHzCCG+Rv7z\nZjxTLx980Rd4Prp3juLoiXSn2zmTXrHRHEpO4+qJQ1xu+0I5mJQqR+Gb9rJ2016GDejOxNFxvPPi\nnQy97Px/rOOG9+fPtb9wxdTrXeCtiop7Yqq0YbO3nugcTle4u5r0U8eIukBBPx81xXoMkIv1uvUe\nwAevPUFlRTm9Bo5g6nXzyMlOJzcrg6y0k+zdsdGR4vf1D6wV3ddqyWsbTUhYxAX7pNVozxR0LWi0\nrNmwiw+/Ws11k0ecdZ5du/jMEW2nZsvn2mk5RIQG1UqNR3Dl2AHV4h1OZFhwg870+v5VYnccpE2Q\nP727u+aspXuX9vz461aX2KpNr24x/P7XbpfbbQpZuUWs27zXEYW3CfZnwqj+3HfrFH7+z7MY9E2b\ndDdj0lA2rP9DFXSVVk1hmaVVnZ+D3IMeN3iUy+2mnzpGv0EjXGJr8MgJvPzuUioqyujZdxAarZaY\nLj3qvW9xYd7p3vusdA7u2c767P+Sk5VGSVGBQ9wdYt82mvDI9vUW661b/QPbN/7OlJm3MGHiFdQc\n7Tv+Ox9IyuKmB96gqKScdVv2sWXnYcpMlY5ou3bxWcfocPp0j+HaK4fK59rREej1ugv6hmi1GsYO\nqz+94SxqUu6upldsNG9/8pNLbeaX6Qn2FdBp5eraN5b8SHmlmZcenQvIxyE1Efi6LYmUlJYzYVQc\nV44dwBvP3U5EaNBF2Z997WhihtzGv95eIhdeqqi0QjLyTUq74HKUOEMHSE851uAZujPo0LV+AT+T\noJAwgkLC6NFnwFlfE+x2crPlwrzcLLn/PungHnKzMxzFejXi7uXjw8Y/VmKzWjh6cA+9uq2GPnI7\n3mlBP5JCqakSAIvFyt/70nn5oWl0jGp88dmlQvcuURw97vqUe1zvzuw7fBJRlNBqnb8QZ8n6cI7l\neGOza3n4qkyWfLqYtz9ZjihK/LFxN3q9nl37jsnn4KPjuPumSfSMjW5WHwL8fBgzrB8rl3/PNdfd\n1KzPraJyKVBcbsFqc5/o3GoHgw4ucrrqOSk3lWK1mAlu49p6IXNVJaayEkLDL60pcTq9nrZRHWkb\n1bHer5eXlTjEffPaVdiscj1GZYWJ9JQkYCRQS9DnzJnF198sI/HwScLaBLLt53/i6+P6EnxX4GHQ\n0y4yRJGK81GDe7M54SBjhjo3K/HN1jASjvtjNIiYLVYe+8qbE9tSEav7YFPSc7n8iilsXv66U/0A\nmHfdGL7++v9UQVdpleQWVVJhVn5++6lMSM3WYqoEiwWMRomocA09O4sYLizB2iCpJ5LO6hN3BWmn\nkonu6PqsgLPx9Q/E1z+Qzt16c9mQMWTfk0JpSQEdu/bmhhtmOe53Ogeq9+W3b19l594jDOrf8r4h\nZ3LlmAGcSM12vaAP6cXmHYecKuh5BSWs3e1NTkkVJlMFWp0WX98Qpk2bRcqpw9jtAvNmXs6/n5nj\nNB9qc93kEcx78G0qK0x4+1yagxtUVC4EQZTILalS1IcqC2xI0FJi0qDRSNQkB00VGg4kw9EUDeMG\nQlhw8w29OXXsMD36Dmy252ss6aeOE9Wxi8vtuhIvbx/e+3oNx47so2efOIwep2X8dGm7zghaQ6sQ\nc4CI0CC27DzkcrujBvdic0Lz2rXbBdb8uYtHX/6MvhPuo8+E+yjKOYS3tw/du0bROzaGduE+3Der\nH1t/fpMfljzFv5+5rVl9OB83z5zA/335qUttqqgoTWGZGatFuejcZoM1W3SUlYNOe1rMATSAXg+S\nqOHPBA2Z+c2Xg9+zYxM9FRD0lhqh10fXHv3Q67R4Gk7LeF1Bx7UN8UoyOC6WhL3JLrc7akhvNu84\neNHPk5CYzCuLljHu+ifx6jKd9/+zinYRIXzzwePkJn7Dilc6MqSbHr1ej7+3wF2X5xMWYKN3txim\nTHD9gph5143l66//z+V2VVSUJDO/gkoFt6ut3aHBbJXOe14uATsPaDBVNo+o79+9lb4DXFNpXpv0\nlONEdWjZEXpttNrTQ2WgdspdowOdHtyndsOpDO7fjYTEN11u18voQc/YaHbvP86Avo3/xTuekuVo\nJVu7eS89ukQxcXQcLzwyt94uAY0GHp+aQUmlHrugIczf1pyX0WSGD+xBbl4+J44fo3MX11Wgqqgo\nhdkqUFJhVsz+3wnHycmLxtvb2Kj7l1dBUgoM7Hlxdo/s3yVHjwbDxT3RBSAINjp2ucgLuITQ1xoq\nA7UFHUDrDZS52CVlCAnyI8DPh5NpOXSKvvCm/guhJu0+oG+XBivei0pMddrJ9DodE0fHMXfGOL58\n5xH8fM9fsKjVQLCP8sU4NcybOZ6v/7OYl159R2lXVFScTl5JFRVVykRIFeVlrFrxNyExRnItFfj4\n+uPj54ePr3+Dj9HrIDNXw8CeF3eWvn/3NvoOGH5Rz3Eh5GVnkJ2RSlCbMJfbVgpPj7oSfsZnLac1\nrTEM6h/LzsRk1wv6kN58s/xPMnMKWPnHDm6+bjzPPji71lz0vaSk5znayZ55YFazjMBVmluuH8/D\nL32htBsqKi4hu6ACoXosqKvZtHYlbTtdRkjbaERRoMJURllJMdkZqfj4ysLu7euP/oxBUYIEpgot\nfj4X7vf+3duYc8cjF3sJTebI/l2KFOIpib933XGydX+aHgGu9EVxBvePJSExmVnXjHap3VGDe3Hb\nI++w8g8LdkHglUXf8+bHyxnUrysTR8Xx6esPclkf186ZdwUx7cLwNhr45svFzL01/vwPUFG5RMkv\nqaLIpFy6ffO6VfSdNAU0oNPp8A8Mwj9QHhJVUW6ioryMwoJcDHoD3n7++Pj64+lpxGYDg15ALplr\nOoIgcPTAbnr1d/4I7zM5cmB3vUNbWiwaDUG+dY816lbB6b1B65wB8u5IjaC7mtCQAIxGTyTk1JbV\nJnDVpKms/e4V/hE/s0WKeQ3P3H89r7z2htJuqKg4leNZpVjtykTnhfk55Gal06lDCPUtd/Px9SMs\noh0du/SgTUQ7ECXystJJOXGU/KwTHN6/7YJtH9i9jT4KpNsBDu/fSc++ri/4VQqjXou38VyCrvOU\ni+NaCYPjupGwN0kR2/NnTWDEwJ50ionk9huv4Pu35inih6vp0TWKHl2jWb7sS6VdUVFxCoUmC6UV\nyhWhblm/mpGXTyU6Qjzvzi2j0Yvg0HCiOnYlsn1XAr1NrPz2Y64f1503nlvAxt9/prKi/NxPUot9\nu7fRTwFBryw3UZCXrcioWaXQ6bV4eZ5RBlf3Mw95lWorwcOgZ/LlgziYlOpy22OG9sHby5OEX97h\nk3/f73L7SvLMgpm88uq/lXZDRcUpnMgowWJVrhh109qVjJ54DeEhEBqgobElbp5GHTOu7ceL73zN\nt3/sZ/j4yexJ2MQdM4bzzILZrPj+M7IyUup9rNUiHy/s37WVvgNd367W6tLtgF5Xt8IdzjxDBznt\nbms9iwRi2oWxfksivbu5ZtNbDVeNHcA1t76MfyOq1Vsal/XpTHibANas+i+Trla3sKm0HErKLRRX\nWBWzn52RSmWFic7degMwaqDAr5t1WG3nlnWtFsZcBt5G+X4Ggwcjxk1mxLjJABxKTCBhyzoWPnYb\nWp2OQSMuZ/DICXTo3J2XH78djQbufPAFsjNSHLZdyZH9O+nRitLtAH5eZx+Pn52QMbSu0ZyXj+zH\n+i37FLF97ZVDWfH7dkVsK80z98/klVdeVdoNFZVm5XhmGWYFJ8NtXreSUROucXxu9IApo0Q8PSRs\ndjlar6ndkSSw2TV4GWHUZQLhbRo+8+/VfzDzFzzN4u838OSrH+EfGMzXH73OI7dfw5H9Ozm8bycL\nn7iTPpcNc/Yl1svh/bsUmUynJAE+jRF0vb9z1/C4GZeP7M/6LYmK2L7miiGs/GOHIraVZsSgnhh0\n8Ne6X5V2RUWlWSirtFKsYGU7wOZ1qxk1YWqd2zw9JKaPlxgVJxIaAB56LUYPCPKXGNhL5PKhApFt\nGv8/v31MZ6bPuYvXFv+ARjydjRAEO90VSnu3tpS7XqvBvx5BPzvlrvMGjSdIyv5iOhurXcMP29vg\nYYC+Pbqwfc9Rhl7W3aU+XHvFUBY8u8SlNt2JZ+6/nlde+SdjJ0xW2hUVlYvmRFYZlQpG56knkvA0\nGhvcBd6hnUSHdnJ0bhM0GHQ1afgLD+AWLlnOv56+B1NpMRXlJsZcce0FP9eFknRwD7E9+6M5XwVg\nC8LDoMPb82z5rifl7tPiC+OqrFqe+r4DG48GsGZfIG0Gvskv63e63A9/P2/ienVm4/YDLrftDkwY\n1Z+2oQEkbNuotCsqKhdFeZWNglJlg6DfV3zL+MkzG3Xf02J+cQSHhPHS219zz+MLierQxeX7zwES\nd26hfdwjbNipRVKmU9Dl6HSasyrcoT5B1+jk9rUWzObDcDLHRkZWDsnHTlBS5cXGA8ocM7Tmc3SA\npxfMYN4ttyjthorKRXHgZCGVZuVa1QS7nd9XfsfkGTe73LaXjy/bNqxh9MRrzn9nJ9C+x2SqxHbs\n2p3Khx98w+Z1qygrLVbEF1dhNOjR1TMyXCNJ0tkv1cqSwXTcFX65BEEQq0eqyrPRy+hEtxEv4Odn\nxN/XG0ljYNmiKyk/8AEaF9cPnEzLYeLsZzix7XOX2nUnHlv4BZExvXj0yReVdkVFpclkFlSw70QB\nNoUGyQD89M3HlJWVcMu9Tyhif86Vffls+Ta8fVw/PlySYEuihtKSKjwrV7F/5xb27dxCcGgE/QeN\npP+gkfQbOAKNtuWk5Lu2D6BnTPBZt9cv6JYCKNgFXLr5i537kh3byTbtOMjEUXGO2eh9e3RkTWIQ\nP+8Jwd/TxqS4Yl775/08EX89E0b1d7mvvcfHs+yjJ+gV69rWOXcisOcsUlNOERDURmlXVFQajV0Q\n2bw/m7JK5VrVAOZfM4S3v1xNUHCoy23v2vYnv/28lGdfVy4okSTprGAs5fgREnduIXHnFvbt2kqf\nuCH0HSgLfJfuZ2+ovFTQajUMjA0lMsTnrK/VL+iCGfK3gmBxhX/NwonU7DrrRbt1as/E0bKIjxve\nt97HlFTqMFXpiQqx8NbHyykzVfLSYze52HN4fcn/0Gl1PHr3dJfbdhf+9+s2lv2yi//+/JvSrqio\nNJqDp4o4mV1KPf9FXcbmdatI2LKOR198TxH777z8MJcNHatIQVxT2L/7b/bvkgU+KyOlTvQe3jZa\nafcajbdRz/CeEfh4nb2etn5BB8jdDHb3HTBTXFpea73oXrQarUPAJ46Kw9/Pu0nPd+BoCnMXvMH+\ndR86yeOGSc3IY8zMJ0jZ3ro3kV1500s8+vgTXDF5htKuqKicl5IKKzuP5Cpa2Q7w+F3TueuhF+na\ns58i9qeP7sLyv5IvqZR2ZbmpTvQO0G/gCFngB40455pZpfHzNjA+rn29X2u4nN3gq6ig73tsETmJ\nR+nx3qNE95KXlazfcno/+MnUHEcK/akFN9Ax+uKqK/t070BllYUTqdl0jolsjktoNDHtw+gcE8mG\nrfsYP0KZP0p34LPX4xkxPZ60DFXQVdyfQ6cKFRfzowf2oNPpFBPzLetXM2Lc5EtKzAG8ff0YPm4S\nw8dNAiA3K419u7ayZcNqPvz3U0S2j6H/oJH0HTiSvgPkYTk5mWn87+vFDBoxniGjr1DM90CfhovW\nG47QK9Kg5KCzfDonKU8vpmrpGgRRpNzDwAu9u7B271HGj+gnR+Ej+zOgb5dmt/v4ws8JbxPEY/e4\nXlCWLv+T3//azf8teszltt2JF97+Dp1XG55f+I7SrqioNEhqbjkHUwqxK1gIB/D6c/cxcvxUhzC5\nmteeupvxk2cyZNRERew7i+NHD5C4cwv7d23hwN4d9Ow7iNzMVAryc/Dy8ubFd76mW+/LXO6XBujX\npQ0x4fVPdG1Y0G0mKPgbRNe9Ak3PymfDX3vo8vpXGAtKkQBv4O3Bg/n0x+edXoG+dedhnnj1C7b8\npMx6T48O11Jx/EcM+pY9B+B8TLjxeb79/n+Ete2gtCsqKmdhs4tsO5hNiYIz2wEK8rJ58p6ZfLZ8\nqyL2LeYq5k0dyLJ1hxSx7yokUeS//7eY7z57hxq5HHzZMIZeNZ1+A0cSEhbhMl+MHjqG9Agn0Lf+\nKL3hPInex+m70SurLKz4fTsLaADfLAAAIABJREFUnl1C9zF3M2La42zcfQTv2VcSaDDgrdGQG+TH\nh//3D5e0k40Y1JPkk5nkF5Y63VZ9zJ81gS+WrVPEtjvx9vPzmXhFy3rFr9Jy2HOsQHExB/jr95+Y\nNV+5TY2b161i1ISrFbPvKjRaLdNuvJPYnv3R6w20bd+ByTfM52BiAv+4ZwYL5k7k03dfImHLOsfW\nOWeh1+vqXcri8LXBCB2gYCdY8pvVoc07DrFuy17WbtrLvsOnmDg6ztFS1q3z6YP+0oRDpK3bSZ+n\nb21W++fj7ifeZ0Dfrtw19yqX2gXYsTeJB5//mO2r3na5bXfjvc9XcSrPxrsffKa0KyoqDo5nlJKU\nUYJdUDbVXlJUwEO3TubLlQmK+fD8g3OZOW+B44y5NZC4czOdY3vjFxDkuC0j9QT7qovrEnduoVNs\nT/oPGkW/gSPo0cwLY8KDvBnas+F6sXMLuum4PGTmIjicnMbazXsdLWWD42KZMDKOiaPjGDbAtbPT\nG8Nvf+3mvc9WsGbpy4rY7znuHn785Bl6dI1SxL47Me2OV5l/5/1cO2OW0q6oqFBYZmZ3cj5VChfC\nAbz7z0fpP3gkY69UptW1MD+Xt158gFc/XKaIfXfm6IE9JO7czL5dWzlx9AD9qlvj+g8aSfsOF1f7\n1TMmmK7tAxr8+rkF3VIEhbtAavwvcE5+8el+8E17CQr0ZeKoOEdLmafH2b1z7oax0zRKj/5XEV/f\nWPIj+UWlvP7MbS637Y4E9LiB9PRM/AMa/iVWUXE2giCxcX8WJoUHyACknUzmzRcfYNHXys1s+HzR\nQsIi2nL1Der/qXNhtVrqRO+V5SZH73u/QSMJDG78IC0PvY5B3cNoE2Bs8D7nFnTRAvnbwV5BfmEp\noSFn/1O12uysq47A125KpLC47HQ/+Og4IsPOHk/n7tz68NtMmTCY66eMdLntwmITI6Y9xtGNH7vc\ntjuy58AJ7nxiMbv3HVHaFZVWTMLRXLILK5V2A4CXH7uNqTPncdnQsYrYlySJGaO78NPmE4rYv5Qp\nKsh19L7v27mFgKCQ0/3vA0eiq6cg2lRajF9AED5eekb2bovRQ9fg859b0AEKd/L3ts08/MIn2OwC\nv3/7T46fynJE4dv3HGVCdQQ+cXT/FjG+9NcNO/nwy1/45esXFbE/Z8HrXD1hCDdOG6OIfXfjrU9W\nkl1s581F6nm6ius5kVXKkbQSBIXPzQEO7t3O9/9ZxML3v1XMhxXff0ZRQR7zFzytmA8thdQTSY7o\nfd+uLXTvPYB+g2SBj2gXzYsP34Jer+eOh15gxPBhDO917or68wq6KTuR/sMmcTI1B4DOHSIJDQ5w\nROGjh/RuvqtzI6IG3cLfK9+ifaTrZ4vvPXiC2x97jz2/LXK5bXdl6q0LuTc+ninTXT+aV6X1UmQy\nsyvJPc7NAR6/cxp3PfIyXXvUP87aFdw2bRhvfvazIqtSWzqHEnewb6cs8KbSYrIzUwEIj4zi9792\n0C/23EPPzjvep8zsSZD/6Sb2duEhXHXNbF5+7KYWK+YAd980iY+XrlHEdlzvzgQF+LJh6z5F7Lsj\nq798lvfeW0Rlaa7Srqi0EgRR4sDJIrcR821/riE0op2iYr5l/Wp69hukirmT6NV/CHPufITXP1le\nZ2e9X0AAHprz71Y5f8pdEjm0+f+YfuvTRIYFs+qrF/D3bdqc9EuR/MJSeo2/l7x9yqS2lK62d0fK\nTJVEDb6V0tIS0LTu4TsqzmfjvixKyt1nQdXd14/h5UVLCY9UrgNG6bnxrYnKchMLn7yDksICFr7z\nGbdMH4e2nh3otTn/AF6Nll69+5K8+VPWLXulVYg5QGhIACMH9eSn3/5WxP5VYweQkV3AwaRURey7\nI/5+3uz69T1iu3RS2hWVFs62QzluJeYbf/+ZMVdeq6iYHzmwG71Or4q5i/D29eOf737D4u/W07dP\nn/OKOTRG0AG8wgFNqxtJetdNk/hEobQ7wGP3XMebH/2omH13pGvHSP7z1oOMGjZAaVdUWii7kvIo\nKKlS2g0HFnMVi994hjl3PKKoHyu//4xrZt+hqA+tDZ1ej1ajITLYq1H3b5ygewSDzrljYN2Rq8YO\n4PCxNNIym3daXmO55frL+XXDLsVG0borIwf14KE7pjLzWtdP81Np2Rw4WUhOUSUKrjc/i7dfephH\nXlB2WVF+TibHkw4ybMyVivrRGvHy1BPo23DveW0aJ+g6I+ga9wqhpaFkcRzA4/dcxxtqlH4W1101\nhHFDYllw9zylXVFpISRllJCWZ0IQ3UfOt/75K3q9niGjlFvXCbBi2edcO+t2RX1orXgadHgbG5cd\nP39RXA1lyfIo2BaOKMH6g0Ecy/XE3yjSLSKHSdPnUHDge0X8kSQJXfTViOmrFbHv7jz/1vcYvNvw\n3EJ1/r3KhZOSXcaRtGKsCq9DPZPrxnTlhw1H0ekaHibibERRYP4NN/LGp/8lLMh9Xuy0FrpHBdIt\nOuj8dwR0L7744ouNuqdWD1U5ILnXL3xzYhM0vLQ8hh0nfMkpMXAqz8iBzCCCjJUYpAJ6do12uU8a\njQYPDz0HjqYwqF+sy+27O+OG9yZhz0F++nkFV0y6Rml3VC5BTmaXciyzFIvNvf63LXrlcaZefyud\nY3sp6ofdbifHOoYdCcfQVOwhuqPr/w+VlWvJypcI8AUXLN50GzwMOmLbB+Ll2bgIvXEpdwBDAGjd\nfw77xfDJnxHklujRayX0WvDQS9hsIuaQ63j/272K+fXUghtY8MwSGptMaW08fvc1+OitvPT0g0q7\nonKJcSq7jOMZpVRZBKVdqUNiwmaKCvMYP+k6pV3BYPDg1hsimTkpkG1//caCuRPZvG6Vy+wf2r+f\npctT2bRbYs0WLXb3GAvgEjz1OgJ86t99Xh+NF3SQi+NaKMUVek7mGdFVf0dMFVWcTMvh4NFUdIYA\nioWOpKQrN9Tk30/P54lXv1DMvrvz0iOzkKylxN8xR2lXVC4RjqYVk5RWTJXVvcQc4O2XHuKRF95V\n2g0HPl7QpWtHHn/5fZ589SMStqzj3tnj+Ov3n5xu+8N3PkbU+JGZksSx4xns3XPY6TbdBX8fD3S6\nxqckGn+GDlCVB8V7QXK/P4CLJafUkzd/acupTBP5hSXodTpC2wQQHOCHVdBiMG0iyPI7rz11q2I+\nhva9kSN/fUybYH/FfHB3lvzfH6zdeojlq9Yq7YqKG7P/ZCFpue5VAFfDZ++9TETbaKZef6vSrpyT\n7IxUln2xiMP7dzJ7/gOMnzyz2W38sfJ7jh89QPTQ1yivBKnqJPvX/oPKChOTpt/EVdPmNrtNd0Gn\nhctiw2gb4tPoxzRN0EUr5P0NQsWF+Oe2HExK5YOvfmFzziQ6dOxLaJtAvDxPt+mJEswZksL0WTMp\nOqTc/t//fP8HW3cd4fM31dTyufjp9x28+fFKtu5Q7phExX3ZlZRHdmEFbqjlJB9K5Ncfv+Kh55Vt\nU2sKedkZfP/FIvbv2sqs+Q8w8epZzfbc8bPH8+yb/yG8bQdKyjSEBMo/tNQTSaz5aSm/r/iWSdNv\nYtKMm4jq0LXZ7LoDfl4GRvSJxNPQ+ILIpgk6QOFOMCvTl93cfL9iE4u/Xk1xSTnxt0xh6pQZvLay\nPbW/I1a7hgGdyomfkMMN97zG9VNHcf1U169VraH7mLtZ8Z/n6Na5vWI+XAps25XEvIff4fjJNKVd\nUXEjth3KoaC0CnctR5k2shM/bzmptBsXREFeNsu+WMSubX8ya/79Fx09J2xZx7rVP/D0vz5p8D6S\nJLHmp6WsWb4U/8BgJs+4iRHjp1yUXXehbRsfBnULa9Jjmi7olZlQsh+3/Ys4D1m5RSz+ajWLv/qF\nK8deRvy8qYwacrqKNK3Ak2+2hlJm1iGKGgZ3Kee6QQUArN+SyGsf/Jd137/icr/zygwYDRJ/btrC\nFz+s5efPn3O5D5caJ1Jz6DfxPrIzU/ELbNofhkrLQhAkNh/IprTCfca5nsnT983iprseo2e/QUq7\nclEUF+ax7Iv3+Xvjb8ya/wCTZ9x8Qc/T1O/HocQd/Lp8Kft3b5Oj9ulzCQq5NP/udVoNA2JDiWxC\nuh0uRNAFMxTsAPullXb/Y+MeFn/9CzsTk4m/ZSrxt0whKMC3wfsXVxrw9bTX2XgD0Hn47az9/hU6\nRZ97L21z8deRANYdDMQuyK+hwgJs/PRlPK//4zqGD+zhEh8uZSoqzUy74zXi4+9j+qxblXZHRQEK\nS80cTClyq9nsZ7L0kzcxGr2ZOS9eaVeajdLiQpZ9sYhN61Yxa/79XH39/EY/9tjhfXzy7ou88UnT\ni+5MpcVy1P7TN8T27M+kGTfRf5ByWdULwdfLwKg+kXg0Id0OFyLoAIV7wJzT5Ie5GrPFyuKvfmHx\nV7/QuUMk8fOmcO2VQy/qOT/55jfyi0p55v7mOydqiLX7g1i5NwS7cPpHJIgabJZykjc/wdbvH3a6\nDy2FGXf9i/ZRHVj00ddKu6LiQo5llHIqp8xtVqDWx54dG1n9w5c8/1bL7GIpLyth2Rfvs/7X/zJr\n/oNcO/v8E+feeG4Bw8dPZsS4yRdle8fmP1izfCm52elMmn4zk2bchMHg/mPM27XxZWC30CY/7sIE\nvSoXiveB5Lo/ElGCRiybAWDX/mMs/uoXvvt5I/G3TCH+lil0jjn3Yvim4Ipq8wPp3rz3eySGehoL\ns/OKKC1I4dMHNXSJUiveG8v7X/7Kp9/+zp9/biQkrK3S7qg4Ebsgsis5n4ISM4LoXgNjamM2V3Lr\n1MF8v+6g0q44ncqKcpZ98R6///wds+bfz/S5d9d7v/ycTJ5eMJtP/7e52WxnZ6Sy5qf/Y83ypYy5\n4lomzbiZzt16N9vzNyc6rYaB3UKJCG5auh2aMimuzqOMYM6Wq96dTEahkWU72rB6TzBbkv0oqdQT\nG1GFRgMJiUm8/M532Gx2enSN5ssf1nHXP95n9boEZk4Zwf8+eZorx1xGcKBfs/oU6O/L0uUbuHri\nkGZ93tr8uCOUvFJDnalIxWXlJJ/MxMvoSXRMF/p3logIsDnNh5bGkP5dGTm4JwPHzKBzTAQ9e/dX\n2iUVJ1BQaibhaC5FZRa3H8b0j7tm8NRrH1+yZ71NweDhQdzg0Uy94Vb27NjEK/+4A61WS89+g/j0\nnRdJ2LyWgcPH8+1nbzNo5ARim3FNq59/IHFDRnPDrQsoKyvhu8/eYd0vP6DXG+jYtSdbN/xC0fuv\n4CuBRxdljzJ9jAZ6RAeja2wEW4sLi9ABSg5ChXMriA+m+/Dx/7N33uFNVm0cvrPTvXdpaaEFyt57\nyN4fKCKyUUQBZangYqgoiggqiICDLagIojJlb5A9yiiztKV7zzTJ+/0RQZAWmjRp0vLe18UFTd73\nnB9tml/Oc57zPLt9KSiQIJMK6JGg1YOvi4ZXWp+lea9xxMan4O7qhFqtpHOb+owZ1qNMSqQGNx3O\n/vWfERRgfFikJEz/NYiEdIOh5xVoiI5NRC6TERTghUIuJ18jZVDLZDrWTrPI/BWdfq98iq9/EAsW\nr7S2FBEzciUmnRvxWeTbcIj9LuXlvLmlKCzU8NPSrzi8Zyux0YbM/toNmnLp3Cl+2X3J4vNHRZ5h\ny4ZVXDx5iA9TU2hZqCFboSBm/hoktRpYfP7iqOTlSINw03zFuEpx92Pnb9GWqjGpSpbs9kGrBZlM\nAAlIJQJKmUBSppIpy5TExqcAkJqeRXBIOEvnTiyzeucfTRnGu58uL/kNccmQlgV5JUvMcbXXohck\n3IpN5PqtO/j7eFAl2O/fnvQSAReHilfgp6xYt2gKNYJdqFWjCrduVPymQxWdAq2eI5EJXLmdXi7M\n/O+DO5FKZU+smYOhpGz/Ya+iVP5b2vTa5Qv07D+8TOYPi6jLuHc/o1ujltQr1JANqAoLcZk3vUzm\nLwqZTEqAp/Gh9ruYvkIHSNwHhdkm3/4oVhzwYt9FlweyzHV6PUkpGSQmp+PipCbpzMecObGbqqF+\nnN/xDVITQhSloUa7l9nw3VSqVy3mTHhqJmw7DH8dgwINZOeBUg6VfOCZp6Bl8SHfdxZeZOfVmlTy\nc8fLw+Wh59VKPR8+G42jSjT10nDhyi1emrKYhi06Mf+Lz6wtR8QEbsRnciM+i6wcy28BmoPL50/y\nw4KP+XTROmtLsQmO7tvGN3OmIpXKAIHFP+1FoSp5/fLSIhQWkvO/xjTJyiJTbc+cJq3Yefk83fsO\nptvTQ1Db2ZeZFkc7BW3r+iOXmbbWLp2hW7Cl6ie/V+JmsgoJAtm5+SSlpJOemYOXhwveHq7oJUpe\nahuHJvUINasF42WFcqgbth5m5bqdrP/uvYefvHgTZi2F6ARQK0F63w9IL4BGAxGh8OXrcN8Pb9ve\nk7z67jf06NCYGm2mcfSaEyr5g0k9UqnAhC53CPPLs9D/7MkhT+/AjttB/LpyIRt/WsqixUt47tmn\nrS1LpASkZRVw/kYqmTkatDac+HY/lkj4qggkxceydulXePn4M+CFsq+EmZ6ajHTnnwTWbkBm9Tok\nxceyecMqtqxfSbM2Xej29GCq1axvcR0hfi7UCTW9Z0rpDL0wE1JOgM78xvLlVn/2ndeSnJKGVCrB\ny8MVj/uS2wp1EiZ0u0OtQOueh2/UfTyLP3mNhnWq/vvgjTgY+ynwmIiBXg+ujrDmI27FJvHqe99Q\nWKhlwUejqVrZkIX9x0l3Dl91Ij1HhlImYKcUGNgyidqVylcdAJtEIuVAfCgpeYYugpnpqXwz+21U\nCilrVy/Hx8fHygJFiqJQq+didCp3UvLI19h+eP0uOp2O/u2r8+veKGtLsTkK8vMY2rMRP+24YG0p\nD7Fn2wa2rF9FYaGGbn0Hm7W07f0o5VIa1/DB01lt8hilM3SApMOgMV9i1qWrMSxc/ie/HJJQv90U\nvDwcsVc/HH5xc9DyRs9Y3B2s+wu9be9J5i3ZwNbVHxoeSMmAFz+Ekr7R6HQc0QsMyMphwczR9OzY\n5KFLUrPlZOXJ0EskhHjmm1H9k831bD/OJbs+9PjxQ7v5+tMpvPzKGGbNfN8KykSKIzoxm6ux6WTl\nlr/THcN6NearFVtxcfOwthSb49t5M/APCqXHM0OtLaVYrl+5wJYNq9i15Ve69x1C176DCAgKNdv4\nLg5K2tULKNUYpifF3cXej8euREvAuk0HaN//bfqO/JCw0ABitr/EUw0ckCse/rRSUCihX5MUq5s5\nQJe2DcjNL2D/0X8+Wf64FTJLtnpOTs3gROQNqqRmcHPR20WaOYC7o5ZgrwLRzM1IruDAhZSHzRyg\nUYunWLrxGLfupOHrH8ifW3eUsTqR/5KZW8ih8/Gcu55SLs184oiezJi7XDTzIkhOvMPR/X/ZtJkD\nhIbXZOyUWfy8IxJv/0A+fmsU08YP4vCeraUeWyKBSt7FVy4t8TilXqHrciH5b5NKwSYmp7NwhaGS\nW9tmtRkzrAdPtahz73lBkPDdHm8uxtmTliNFKQcvJy3PNE6hfmXLJOOZwv6jF3h39nL2ffceTJgL\nSemPvD47J4/ouCTs7VQEB3gj0RRCh8bwTslLI4qYjiCRcjChCim58sdem5QQx4ZVC4m+fon33pvK\nc/36lIFCkbukZxcQFZtBelYBueUge70oZk5+ka59BtOoxVPWlmKTfD5jPE1adaR1x17WlmI0Z08c\nZsuGlUSe+ZtufQfT/ekhOLsavwfuYCenZU0/7FSPf096FKU3dICU45CfWOLLdx08w8Llm9h/7AJj\nhhoquRWVyX2XuDQlSVly7JUC3s4aXOxtL7O72+BpvN2rNW2W/vFgAtx9aHU6omMT0RTqCArwenAr\nIcALvp5iyIIXsSjXs305l+xm1D1XIk/z68qvSU28w9SpUxkyaICF1IkApGQVcDUmnfTsAvI1tvf7\nXlLmTHuNOo1a0Ln389aWYpPciIrkq48nM2/pn9aWUioy0lLYsmEVm9evpFb9pnTrO5jaDZqX+P4A\nTwcaGdlZrSjMY+glKAVbqNWycPkmvlmxmQBfD8YM68Ez3VuWemqzkZYFMYmGP9k5/3RCcQdfDwgP\nfmzd2ZPnrvHpuM/4SSoF1cPn8+MSUkhMySAowAt3lyIq1zmo4edZPFAaTsTs5AqO7IyuZHIv7JvX\nLrF+5dfcvHqRt99+l1dGvWBegU84Sel5XI3NIDNHQ35h+TVynU7Hks+n0bTjEMKqVcfJ9KPFFZoZ\nk4bRZ8BI6jVpbW0pZuPQ7i1s2bCKtJTEe73aDUfyikYhl9G4mhdernalnts8hi7oIPEQaLM4d+km\nCcnpdGxlOGN96vw1Fi7fxPJfdjJmWA9GD+1uW728L92EX3cb/k7NgNwCg5lLpaDXgZMDONpBz9bw\nbAdQKood6o0B7/BOXDJ2Cjk3bydgr1bh6uLAjegEvD1d8fcpJhQjCODlCivEBCxLIkikHEysQkpO\n6aMgcTE3Wb/ya84eP8Qbk9/mzUmvmUHhk0tiWi5XYjLIytOgKSwfR9Aexax3xuNR83Wc3EMAAQ83\n6NBEQCa17VK0ZcnZ44dYt3Ih0+euQqsHVfFvreWSmFvX7vVq79izP92fHkzlf8rKnjl+EHdPHypV\nroqzvYKn6pvHE81j6ABZUaRGn6JZ70ncup1A57YNSE7NpEBTyJhhPRj5fBezTGNW5v0Ie05Cbj4o\nHvMmn5MH9moY2gMGdCpyJX350i2yekxAjaHTG4BSqSQiLBC57BFt8HQ6aF4HZrxUiv+MyOO4lu3L\neSND7Y8jJTGedSsWkJJ0h5o1qvPSyBE0b1q++1mXFclpWaTnwdWYHDKyC1Cryr+Rg2FP2DPiTe4k\nFVKpcmVkMhlarZSQAB0t64uGfpc3Rvah4+DFaCV+SGUSHB0EmkToKeJQU7ln++9r2Lx+FWo7Oxwc\nnTlz/BDevgHMXryeJrVDCAssfsvZGMxn6LpcenTtwOYdRwCwU6vo1LkLGxcW3VHHqmh1MPoTw3nx\nR6y4iyQvHxpHwOxxRT69tvVL1Ll1h9x/YrpuLo6P7/RWoIF5E6FOmHFaREpMaUPtjyM7K4M9Wzew\nb/sGCjUFDBo8mFEjR1Ap0IaiUTZAXHwiy1as5pf1O3AN7U9geDv0Ashlhs/Uvp5Qv5oeeTlNJflo\nyks0bT+QNEkHdHrDHnFQaDVkMhlKBXRvo0ddwVaiprBt449cuFMTn6AG96IWegHUKgk9WxeiLKrN\nZAVg+8a1fPvFdAoLDSc1mrbpyM5tm3Ew04vCfN81mT1jRg7C3s7w8SrI35MVnw422/Bmo6AQnnsH\nbsUbb+YAdmo4dQXGzXnoqU8XrmNqXDLpcgUqpQI7tYrgwMckOuj0UKeqaOYWRJBIOZnkZzEzB3B0\ncqHns8OZ/e1GXn9/AZdvxNOgYWOatmjN14u+Q6crv/vBpSUzM4sv5n9Ds5ZtiahRg4PndAS3nIOg\nDCEzMxu9HjSFhiDYlVvw5z4ZqZnWVm08U8cNonPvAbR56il0/7zWQsIiiL5+GZ1Oh14vEc38Hxz8\nu6HROpKVnnTvMakE8gsEDp4up5/mSkCrDj3w8jV8yFep1Tw/6AWzmTmY2j61GMLDw/FQZRMc4Mmq\n+W/i5lL6c3VmRVMIr8wyJMCZWCsXMNwblwQxSdCmPhu3HaHT8+8SFuLP7+s+YcvteGrFJFGlsh+y\nYjLeAYOZO9rBt++VvNm7iNFcz/HlVkbZ1WN2dnWnTsMW9H7uRVw9fdm+dRMvDB3EtZuxJCan4OPt\nhYtzxe5jn5tXwLc/LOfNKW8xadJEdFI17Xs8T4f+H5GUXxOlSoFEKiErIx1H53/DjVKJIYB2LVqK\nn5dhl6s88OaovgwcOZH6Tdsgk0FuvoQ7yYbIg6u7FzHRcTSuJcXXW3R0gEvRDqgcPMjOyiQxPgaF\nUoVSqUIiAa1OIDRAgvwRu5TlFYVSRauOvSjIz6NTj36MHTUMBzvzvSbMF3K/S/IRKEg165Bm45tf\n4ecdYGeeTZr8nDy+kMs4UtmPBTNHE+jnee+5Ts1G8KezAyqN9uF3Ja0OtFqoXhkWTBbN3ILk6h3Z\ncTsQQbD+9/jg7i2cOLSDM8cP4ejoRNt2T9GpYwd6dOuMm5t59/bLmrS0DLbt2MXuPXs5eGA/Kjt7\n3D18aP5UDxo2bwdARrbAjiMyCu87DHP9SiSVq1ZHWsQHX6Ucnu5o+/vq44Z04bW3ZxN2X/9uQYBz\nUVKuxRjKbkVUEfhwTAMW/rgDJ5fy/bMuLYIAfx2SkpJl+N5oCwtJSohDEPR4+QTg4qKkY1N9ufkw\nZyrO9kqeql+6ynD/xfyGnncH0s4aMt9tiYxsePYtzLU5Fx2XSGZWHv5hlXD/6WP4TzTi+NkoXp88\nn70DOsGBM5CUBgKGFbmnG/RsCZ2bmUWLSNEIEikH4quQmmd7IbzY6OucPXGIyFNHOH38IP4BlWj3\nVHvat29P926dcbQv/REWSxKfkMj2v3axe88eDh08QOztaGo3aEqNOo2pUbcx4REPdxI8cErCrTuS\nB4JjyYnxyOVyXN09H7peq4NmtQWqBtlmIllKYjwzJ7/AxOlfEhRSzJaZwAOFNIf0aCiaOhB5XcLJ\nSMkDb8e5OdkkJyXgKE9kzMim1hNXBkgkEmqHuhPia95InfkNXRAgab/F2qqazOINsGZbqWN4iSnp\nRMcmERTghbeHq6G/+dhnoV/7h659/YPvCPD1YNKI3oZkurwCQ7jes+iSoyLm5Wq2HxeKqNVui9yI\niuTsycNcOHkYnbaQmOjrhFYJIywsnIiI6tSKqEHNiBpUrhxcprqu37xF5MUrXLkSxZUrV4i6epXC\nQi3nz5ygVv2m1KjTiIi6Te4dx3kUG3dLySt48LFCjYa4mJsEh4Y/dL1Ob+g03Kah7a3Sjx/azTdz\n3mXe0k04G2nOoqmDIAjs+ltGQrIE6T9JcTodONqDLHkl3381jVGT3qdbXxvMwzIDpW2TWhzmN3SA\nrGuG1qrYyCfr7FwYMxt5Kw74AAAgAElEQVSSH12S9VFkZucSHZuEs5M9Qf5e/z4hCBDsB4veKvI+\n/wZDOLH1S/y8TW+JJ2I8thRqN4WkhDhio68Td/sG8TE3iLt9g9s3r5GakkhwSFVCQ6vSqGlT5BIJ\nLi5OuLq44OTkhIuLM87Ozrg4O/3ztzOOjoaqJtnZOWRkZZGVmUVGRhaZWYY/2dnZZGZmotXqiLp6\nhagrV7lx/Sq3o2/g4upOQFAIfgGV8QkIxjcgiEqVwwkICjHq/5OVI2XHMSgoePi52OjruHv6YGf/\nYPUVAcMbfK82tmXo61Ys5NL5E7w3+3uTxxBN3cDZK1JiEg3dpP09oUFNPXKZwfCXzJ3OuVNHGDXx\nfeo0LHnVtfJAtUquVA8y/8/eMoauyzfspWtzzT60SVy8AZPnGz7yG4mmUEt0bCJ6QSDI3wt1EVXg\ncLKHrycXufLee+Qc0+esZs+6T0xRLmICAlL2J1QlLa/iZdUUFmoMRh99g7SUJJITYynIzyU/N4fc\n3Bxyc7LIy8khNzebvJxscnNzKMg3tDdWqtTY2TtgZ2+Pvb0jdvYOqO3ssbNzQG3vgJunN3b2TvgF\nBuMfGIJvYDBKpXnyTTQa2LhXSlHJ/lkZ6eTmZOHjX+mBxwUBXJ0FurW0kYUB8Nm01/ALDGbwqDdK\nPZZo6v/wn22J+4m5eZUl86ZjZ+/EqEkz8PDyLVNplsBBLadlrdLXbS8Ky2wuytSg8rAdQ49Pgawc\nMHJfMiY+mdS0LIICvHF1fkTtxrx8SEgt0tDbNqtN9aqBLF61hZcHdzNWuYgJXMv2rZBmDqBQKKlc\npTqVq1Qv8T13P7NLrFhWWKk0nBLNK8LQnVxcSYyPxVsQHtCo14O3jXhdYaGGCcO6M3DkRFq272GW\nMVduOiGaOjyyWWdg5ap88OVqju7fzuRRT9OuSx+GvDK57LRZAE8XO4uYOZjzHPp/cQgyGLstkJ5l\nVI305LRMTp6/ilwmo06NkEebORjOthcWX8d+0SevMvmjH8jMspEPOBWYHL0jkSkV+0iYsUgkEqua\n+V2C/UFbTJDM2dWdjPQHT8fIZeDnbX3dUZFnGNi5Du98ssRsZn6XlZtOMGZgR7Iy0sw6bkWjaevO\nfL/hEPaOzgzoVItdm9dZW5JJ2CllhPhZ7v3JcoaucAG5jXQkUChKtJ2fnZtPZFQ02Tl51KtZBV8v\nIz416x8dzl/z9WSeHzu75OOJGI2AlBOJfuV237yiUy9cX2y9bhdXdzLvM3S9XkKAD/h7Wnf/fMuG\n1Sz5Yga/7L5EQFCoReYQTb3kPDP4FZb9fozzp4/x+ou9uXzhlLUlGYWLowoXhyK2bc2EZevrOYWA\nxAaODDk7FNvSFAxtTa9HxxNzJ4nKlXyoHOiD1JgVjVrJ49opdW/fGHdXR1at313ycUWM4lq2L2n5\nNvB6EymWLi30SKWShz5fK1UqpFIp+Xm56PXg5CDQvI71zDw3J5v3XhtIcuIdPluyweLziaZectR2\n9ox7ZzZjJn/MD1/NZN4HE8nJtv3Sgkq5lFALrs7B0oau8gaFDVSLC/QGF4PhCkDBP3V0AeISUjl/\n6Rauzg5Ur1LpwR7lJcVOXaLNvpVfvcHwiXPRmZCcJ/JoxFB7+cDZAbq10uHiYDhnrtMZkt/0Aji5\nepGZnoa/t0D3VgKP6mdkSfZu+42RT7dgwAvjGPJy6ZPfSopo6sZRpVotPl38Kw2atWNUvzb8vGz+\nvecS7txGr7etWiiOdkqztEh9FJavgO9YBSRWLncY4A0ermh1Oi5GRXPt5h2SUjM4HXkdEKhXMxR3\n1yJ6lJeEQi1U9nuosExxrPl6Cs+P/dS0uUSKRMBQq10MtZcPnOyhe2s9bRroCa8MHq4CHi7QoKYz\nJzZPoG0DHTKZdTLbZ08dy8lj+/hx21lq1S/7wk+iqRtP287/Y/XW02i1Wob1aszW31bzyTujmTzq\nabIzM6wtDwCZVEKov+UXHJY3dDsfkJddHe0iUSmgZR3u3LxDbl4BuXkFxMan4O7ugb+PR+nG1mhg\nUNcSX/5sz1ZotTo2bD1cunlF7nE1y9cmq8GJPJogP2hcU0/n5gJdWuhpXEtPsyZhbP9jbZlrOXV0\nH/2eqkar9j2ZOHVumc9/P6Kpm8bAkRN5f95KViycxY2oSK5eOsdXH79JYiokpxkiQdbCQa0gwNPy\nOWVl06POqSpIrfuGm/dUI+Lvq8qjkMvw8SjlBw2tDsKDoXZVo25bs3AKz48RV+nmIEfvyMVUMdRe\nUej8vwFs31i2hr7o86n8/vMPrN1+nhZP2cbRUtHUTUOltsPD59+WxfmyKuw+DpsPSjl8zjoRPLlM\nSlhg2VSsLBtDt/MBuYkhbTMwe+E6PDuNxfmlPng62qNWKwkN9kOlKOVWgE5vKPtqJCqlgkWfvMqI\nSfNKN/8TjoCME2KovUJRJbwWANeunLf4XMcP7eKjKS9RObQ60z9fhry07wdm5q6p3140G+3zHRA2\nrLK2JJvHLzCY16d/QWBwFZq27UFoo3FcvRhJbmYyt2KlJFihb5iDWk6gV9mc+DJr+9RHz6SGgiQQ\nyi4h7PftR+n0/HtUqezH7l8+wbN5bVxy8vFJSkNhSvLb/Wg0MKovdGxi0u31aoaydfcJ1CoFocF+\npdPyhHI124/bmVbezhExO4Kg5+ThvTRq8XB/BHOQEBfN3BkTuHblAqPf/Mimy4o20xTQYcXXOGak\nUenYPjL8K6ErQd38JxlXd0+6PzOU5m26EZeqxsHZi5ysLJIT43CWXKRScFCZaZHJpNSs7I6zveWO\nqt2PZUq/FkcZtVa9cj2WV9/7Bju1kgUzR1Pp/trrAG8tgL8vUuyh2MeRnQvPd4HRz5Raq1/9wZza\nPt+4M+8iZOsd2RUdiFBEmamcPMNuiLODUfWERGwEvV5Hv3bVWb8vyuxjL13wEUf2/cXLr79Pg6Zt\nzT6+ucl/qS/VL56hEJBJJOS27EjyJ4utLavckJMnsP2wFLlMSqh3EhuWTkan0zJq4vv4BVq+0ZGr\no5K2dc3bIvVRlK2h5ydD2mnQayw2xbipi9i29yQLZo6mU5v6xV84axnsOGZop2pMxxtBgJf6wNNP\nlVorGI7NNe4+ntgTK80y3pOAgIz9CaGk/ScRTquDQ6elpGcZCpMIgo6LRxbToU0oTVt3spJaEVOY\nP2syEXWa0KFHP7OMt2PTLyz5fBqDRr3B/wa8aJYxywLh+EGqvfkCOp0etVzO5Y8Wom1unveeJ4mC\nAlD9E5Q9dXQfS+ZNp1Hz9rw4fqrF5lTIpTQI88LXveyiiGWzh34XtafFzqV/vexPJIE9CAsN4PK+\nJY82c4C3h8OMl8Dd2bDiftTZcL3e4BaervDpa2YzcwB/H3c+mfEuvUd8YLYxKzpXs3wfMnONFv7Y\nK+V2AuTmQ75G4NbNGDyrPMe+gzG8NbofF88et5JiEWPp3GuAWbLdL184xesv9ObS2eOs2nq6XJk5\ngKRRS259/RPJXfsSu/BnBs+aQnpqsrVllTtU9+2w1m/ahm/W7sbbP5Cn24Sx9bfVFpnTyU5ZpmYO\nZb1CB7Ov0nceOM2r731Dh1b1WDBztGmDHDkPv+6EmETILQBNoaFhgFptCMuH+EG3FtCqnlljuIU6\nCZ/8HkBaroJLF47Q1Gsv0yf2N9v4FZFsnRO7bgc8FGrff1JKTMK/P5683BxSkxMICApFIoFQ9/Os\nXzoDRycXho2eQmBl404miJQ944Z04Y0PFhAUEmb0vXG3b7Bz0y+cP3WUUa+/fy/ZriIwvHcTvli2\nGVd3T2tLKffo9TqWzJ1B5JljvDRxBrUbmCefQiGX0ijcC2+3im7oAMlHoSClVEPExqfw6nvfkJWd\nx4KZo6leNfDxNz2OjGxDz/TcAoOhqxTg7wUOlqnus+6oJ1vOuBKfmEChoEKasJbX+rrQo0Nji8xX\n3hGQsS8+lPT/lHfNy5ew46iEnLx/H4u+EYWvfyWUKjU6HdQK01M3HP4+uJPl33xKeEQ9ho99G+cn\nucuVjfPHL0tJjIsxKix68+pFfl6+gJtXLzH45Tdo0c42jqGZG9HUzUv0jSi+nTcDRydnRk16HzcP\n71KN5+GiplWtsk92to6hF6RA2inQmbZKf3vWMlb+uosFM0fTp6vtZqg+jnVHnPh6kwx3ZxnOLu4M\napnIkMG9xCS5YriSFcDFIsq75ubD1oNSNP9U9M1MTyU/Pw9vX0MyilYH1SoLNK7570t91+Z17Nz8\nK36BwfQdOMpijTdETEdTkM/g7g34eWfkY6+9fP4kv6z4muTEePoPe9VmzpNbEtHUzc/hvdtYMnc6\nHXr0M7nnvUoho0G4F94WLvNaFGW7h34XlQcojC8GsvyXnThV64eLswMxx1eUazPfvvckw4d2oU1N\nLaEBTjSvmkXHmhkc3/IljbqNt7Y8myNb78SllKJrGaiVhj93SUqIw8vH/98HJPDfgoDtu/fjowVr\nqF6rAR+/NYqPprzEhdPHLKBcxFSUKjXN2nRm3OCuHNy1uchrzp44zLTxg/hhwcd07TOYL5ZteiLM\nHGDZ78eYMLy7uKduRpq37cLSjUdQq+0Z2KUOe7YZ35jHzUllFTMHa63QATQZkHYCtPmPvfTIyUu8\n+t431KoWzIKZo3G0UAi8rJg2ZxVHT11m2+oPAUjLluPm+G8/9d+3H+X7tdvY+MM0a0m0KQRk7L8T\nSlpB8dUG7yRL2f23lNSkWORyxQOrFid76NZaQCop/qX+98Gd/LbmWzSaAvo+P+qJMQVb5kZUJO+M\nfY683Bzs7B0YPfkj2nTsDcDJw3v4adl8VGo1/Ya+atNnyS2NuFK3DLk52SyZO53Y29cZNfF9wmrU\neew9aqWMJtV9cHMqZZ0TE7GeoQOknYHc2GKfTs/M4dV3v+HarTssmDmahnXKfyJTh+feoV3z2kyd\n8Pwjr5v++SpkUhnTJj76uieBK9kBXEx+fETn2Ok0du69TVDVeugFAblMgpMDdG2pR17Czl1RkWfY\nsGYJVy+dY8CIcbRo3x21WixeYw22b1zDN59PRdAbTqAMH/MOmsJ8dvz5M2HV69B7wItUq/mY0yxP\nCKKpW46oyDMsmTedgKAqjJr0PvYOxZ/UCvZxol5V6/0MrGvounxDgpw2hwJNIcfPRFGrWmVcnO2Z\n+eVaPl+8ngUfjWZQ3/J/7vL42Sha/u8Ntqz6gPYt65bonh5DZzB2eA+6t39yk+Sy9c7sivYvsoDM\nf5k5+UXa9BiFV1AzCgokuDgLVPbTIzHhZELinRj2bNvA+lWLadi8HR16PlsuCpFUNOZMe41Tx/Yh\nlcmRyxV06tmfjj374+1nhiTYCoZo6pZlz7YNLJk7nacHvUK/oWPIzsrk9s0oqlavjUKhxNFOQcta\nfqiVVur7i7UNHSD7OmRcpuOAtzl0/BJ+3m5IJFKe79OGD98cYlVp5uKL7zayev1uDm6cg1JhXJMa\n3/qDOLP9a3y8yqa4vy1RklD7XU4e3cufPy9j2udLza7j4O7N7PzzF25ERdKhRz869OhfJlWmnmRu\nXbvMjk2/sOPPn6hRpxHdnxlKI7GgymMRTd3yrFoyhyN7tqLVaklLSaJ67QZ8+OUqqge7ERbgYlVt\n1jd04LflH9Pvxano/inu0rBhQ45vrBiFVp59eRaBfh7MmzHKpPtj41No2nMiMcdXmFmZ7VNcVntR\nvPJcO2bMXYFvgOXqNKelJrFz0zp2bvoZV3cvuvYZRL3GrXBxK2ULXhEA0lOTOXVsP5t/XY5GU0DH\nHs/Ssedz2NmXTWOLioJo6pZn/qzJ7Ny0DgCpVMoHc7/j3fEjrKzKRgw99voZmrfuxO24JOztVHz3\n2Xie71O+w5vXo+Np+b83mD/zFfr1aFWqsTZuO8LSn//it+8tV6bQ1sjSO7O7hKH2P37+gcT4OF4c\n914ZKDNw8exxThzezV9//oyPXyWatO5E09YdqVTZ+CIoTzLXLp/n74M7OX5oF8mJd+jYsz9NW3cu\nUQKSSPGIpm5Z9m3fyNez36EgPw8vHz+279pPvYgq1pZlG4YOcP7gz8yet4h+PVvTu1NTa8spFSvW\n7eT9uT9ycOMcs50n//TrdahVCsaP/J9ZxrNlBGTsTQglI+/xoXadTkf/9tX5da/5G3mUlCuRpzm2\n/y+O7t9BYWEBTVt3okmrTtSsZ1onvoqMTqfj+KGd/H1wF8cP7cLDy5fGLTvQqEV7qlavbW15FQrR\n1C3L0f1/cXjPVl4aO4GBvdpYWw5gQ4aONgeSj4Eu7/HX2jAvT5lPfkEhy7+YZPaxx767kJrhwYwZ\n1sPsY9sSl7MCuFTCUPuiOVOpXLU6XfsMsrCqkhEfG83R/X9x7MBfKFVqZDIZEXUbE1GnCdVrN7C2\nPKtw8+pFoi6e5dCeLZw9fpBGLTrQuGV7GrVoL5qNhRFN3bLYKWU0ifDF1aFs2qM+DtsxdIDMK5B1\nDbAdSSUlPTOHln3eYPyL/2PUoK4Wm2fkm1/SvEENXny+s8XmsCZZOmd23y5ZqD36RhRzpr3KVyu3\nlYEy48nLzeHC6WNEnvmbyLPHuHz+lMHc6zYmok5jatZvilJpnfOqluJOzC2uXjrLlcgzXL14hisX\nz1CpchgNm7WjVv2m1G9qGyuZJwnR1C1HiK8TdarYzvfVtgxd0EHiQdBmW1uJUfy54xhDxs3h4G9z\niAi3XFLWXYaMm0OXdg0ZbMaub7aAIdRehYy8kh37eO+1gQx4YRy16jezsDLzIAiCwdzP/E3k2b9J\nS05EU5BPpZBwgkLDCAoJp1JIGEEhYUil1jv6UlJSUxK5dukcUZFniLp0lqjIMzi5uFK1eh3CI+pS\ntUZdwmvURSY37mSHiPkRTd38ONkpaFnbD5XCdn5XbcvQAfLiIP086LWPv9YGeHvWMs5fvsUfy6aX\n6bzPvjyL53q3LnXCnS1xOSuw2PKu/+Xwnq3s2/E7U2YutLAqyxIXc5PbN64QfT2K6BtXuH0jiugb\nUfgFBhMUEkb12g1RqtS4eXjh7umDu6cPbh7eyGSWfxNJio8lMT6GhDsx9/6deCeWxH/+XbdhSxRK\nJWERdQmrXoewiLo4Oln32I5I8Yimbj5kUgm1Qjyo7Fuy96uywvYMHSDpCGhSra2iSE4dPUe6TuCp\nFnVo/fRkenRozFtjn7WKlt4jPuClgV3oVc6TCAGydE7sLqItanGM+F8z5v7we6m7ItkqsdHXib4R\nRWpSPDG3rpGWkkRqcgKpyQmkpSTi4ORiMHgPbzx9/BAEAaVShVKlRvHP34avVSiVKgQBCgryKMjL\npaAgn9x8KZq8RDT5+eTn51KQn0d+Xh7aQg2pKYkkxcfi5RuAt28gPn6B9/7t7ReA9z//lkit0wpC\nxHTuN3VBrxd/hibi4aymVe2y76b2OGzT0AvTIeWkoZKcDbH93W9QrNpCvFTCnKqBfPnRGFo1qWlV\nTV0GTeX1UX3p3Lb8JlwJyNgbX5WM/JK9uaxbsZD8/FyTuyFVBDLTUw0Gn5JITlYm+Xm5aDQFaAry\nKfznb8PXBWg0BUgkoFLZoXD0J1vWmqzMbAIC3PF3PIeDnRqV2g61nR0qtT0uru54/dOpTqTiMbx3\nEzr1fI7rURcYPOoNQsIirC2pSCR6HYINbj3ZqeQ0i/DB2d42EuHuxzY3txSuYOcP2TewlQS5tDNX\ncNywG6VOh58OOtxOJiLc+tXCNiz9iO4DJ6NSKWjbrHwe+7mS6VtiM8/NyWb96kX8uO2shVXZNs6u\n7ji7ulO5ao0S35OvgY27ZEjzC8jT3ELmEEaBYxid2tjG75hI2dD96SGs+f4LBEHgRlQkn//wB27u\nXtaW9QDSQg11Pp9GekQ9bvYeYG0595BIJAT7ONmkmYO12qeWBJdqILedClFuVSuh0BsCwjrAO8QH\nd9fii/Rbmq1n3Hh/fSU++zOAHiNW8vb84+w7et5qekwlU+fMpdSSt9JdMnc6oya9b0FFFZfb8RIK\ntAJSKQiCoWFNbr6E5HRrKxMpS+Ju3+BuYLawUEPSnRgrK3oYt/OncLt4Fv2qbyAlydpy7uFsr6Ba\nJdstw227ho4EXGuC1PrHei5fi8Gz2QicvnsXXd0wojo35fXNX1pNz9xNAWw47smdNCXx6Uqi4tXU\naPM+Y2Zf5PSF61bTZSwCMk4mlXwfKiryDLG3r9OuS18Lqqq42KkFBAEkUgmC3vCGrtMb2suKPDkM\nG/M2voHBePr4UaPNZLTKcGtLeoiU+k15096R1V2fYdjw7tyJuWVtSaiVcmqF2naZZ9vcQ7+fjIuQ\nfRNrhd6/X7Odzxb9ysHf5uDhZv2MxnVHPdhy1h2lTH/vsUKtjsgrt6hfqwoHN05kzeze1AirZEWV\nJeNSZgCXS7A6dzyyF83va5h/6zrt3/2MsIiSdasTeZhNByQkpeiJux1FQHA4tUKlNKypf/yNIhUK\nnVbLreuXcfWryaQh7Zm//FecXMxT1dIcrP72c5RKNc8OG0tGWgpvje7Hs0PH0r57P6tpCvF3pk6I\nbRu6Da/Q/8GlBsitE9oeMWkeh09e5NLexTZh5vmFUo7dcCrSzOtGhFKohZfGzKTnsBlcj463otLH\nk6lzLpGZOxz4C/+3XyZo33Y+j7lBrcS4MlBXcenaQqBeNS2Zd47TpiGimT+hyORyQsNr4u4Ey37b\nxZiBHcnKSLO2LAAO7tpE3O2bPDtsLAAubh58s3Y3508fY8Enb1lFk5O9glrB7laZ2xhs39ABXCPK\nNPSemJxOeOuXaNusNt99Nr7M5n0cKdkKhPvef+83cwCZVCA1R87Vg9/Tuu+bxCXY5tE/ARknE0sW\nandeuQhNoYY8oECnQ7HmWyR60YRMRSaFutXkXN43lRB/a6sRsRVWbjphE6Yec+saa77/gjc/mP/Q\nc+PemU31Wg14dVCnMtWplEuJCHZHKi3ZkVprUj4MXeUB9v5QwjPKpWH9lkPU7jiWTSveZ3j/jhaf\nzxhc7QuR/PMt+K+ZA+j0EpzVOiQSiD2xkgZdX+NM5A0rqS2ey5n+ZBSU8KXXqCV2MjkSwEEmQ96u\nK4J4drZUSCQSZHI52sJCa0sRsSFswdTHD+3Klyu2Fvt8x579eevjRYwZ2JGj+/8qE03ebvb4upeP\nRJPy887oUsPiWe+vf/Adq9fvJuH0asJscPnioNJTKzCXPM3DZg4gkwi0DM+693X8qdUMfu0ztu45\nUdZSiyVT68zl1JJvoVzpP4LNnt4oAoNJ6jec9OdN6ysv8iBKlRpNgW3VeRCxPtY09ddf6M3sbzc8\ntgpiYHAVVm46wa7N61i+8BOLanJ2UFI71PZD7XcpP4YO4FoLZOYPvRdqtTTtOZEAXw9+/fZds49v\nTjpWi+L8mQNEVH+w965WL6FDrQwahWY98Pi5nQv58ruNfPn9xrKUWSTGZrUDLPzsXeJfe48ba3eT\n9Jpt/2zKE0qlCo2mwNoyRGwQa5j6Vx9Ppke/oVQJr1Xie96etRhnV3emvNIPwQLbcCqFlBpBbijl\ntlfcpjjKl6Gr3A0FZ8wYet9z+BwOVZ9h/szRTBpl28ehEpLSadBlDH8vrETnWum42utwd9Ti7VzI\nsNaJ9GuaXOR9W1Z9wI3oBMa8Y92650aF2oHzp46QlZFO83aW6173pCKu0EUeRVma+sa13+Pk7GJS\nBnvfgaN44dV3eLpdOJFn/jabJokEAjwdy02o/S62f2ytKBL3Q2HW4697DDO/XMvOA6fZ/Ytlwzbm\nICEpnbqdxxJ/avW9xwRBQmqOFHcH3b299UfxzYpNrNt0kJ0/fWxBpUWTqXNh923jtjHGDe3KGzO+\nIijU9s7JlndeHdSJtz5eRGBwlcdfLPLEMqRHQxb+uMNiR9rOHD/I+lWLeP+LlaUe652xz9GgWTv6\nDRld6rGcHZQ8Va/8lT8uXyv0u7jUApm6VEN0HTSVAk1huTVzAIlEwMOxZGYOMHpoD94d9xyBjYaS\nk1t2qzM9Mo4n+hp1z7aNP1KjdiPRzC2EuEIXKQmWXKlnpKUw9/0JZjFzgI+//on83GxmTn6xVOPY\nqeU0CCufHenKp6Gr3MA+EFNC72cib+BUrR8TR/XlwzeHmF+bmSnOzE2lfcu6HP1zHj71BnHy3DWz\njPk4rmT5kWVEqB3EEq+WRqFUUSjuoYuUAEuZ+vSJQx6Z0W4Kg19+k659BjOwa12ir18x+n6ZVEIV\nP2dcHKxfodQUyqehAziHg9K4mroLl29i2ITPuXNyJV3KQXcyc5v5XQJ8Pci+8isvTf6SNb/tNevY\n/yVD58LlEvY4v8v3X81k+Ni3y6Tn95OKmBQnYgzmNvXXX+jNa+/MxtXN/JXXGrV4iu/WHWDOjHFs\n2/ijUfd6uKip4u9idk1lRfk1dAD3+iWuIjfw1dlcuHKL09sX4OhgZ2FhpcdSZn4/J7Z8xR87jvL+\nXONe9CVFL5FxItHHqHsS4qI5dmAHvfq/YBFNIgaUKhWaAtHQRUqOuUx92vhBDBv7tlEZ7cZi7+jE\nVyu2cv1KJPM+nFSiexztFDQIs62uc8ZSvg1dpjacT5cWv59+Oy6JoCbD6dWxKV9/NKYMxZlOWZj5\nXX5cMBkBgYGvzjb72Jcy/MkqMG6VvXjuDF6eNMPsWkQeRFyhi5hCaU3903dH0+3podRp2NzMyopm\n9JszadCkDaOebUNqckKx1ykVMqoHu6NSlO+oYPk2dAC1FzgEgsTwX8nOyWPDlsMkJKWz5re9tOzz\nJgd/+4zn+7S1stCSUZZmfpcZkwbRq2NTGnYbZ7YxM3QuRBlRQAbgxOE9SCTQoFk7s+kQKRoxKU7E\nVEw19QWzptCwRXuat+1iIWVF07ZLH2Z+9SNvjOzDwV2bSEtJ5Oj+7eTn5967xs/DngCP8nVErSjk\n1hZgFpzDQZOOLjeRdv3e4uT5a/h7u9OwblWijy2ztroSYw0zv8vzfdoSFhqEc43nubh7AQG+pu9t\nmRJqB0Mi3AdfrQFIpZwAACAASURBVDJ5XpGSIybFiZSGlZtOGHWkbemCj6gUEk7HHs+WgbqH8fYL\n5IffDjNz8kh+mP8RqckJhIbXZM53G3FzUlOvSvnMav8v5X+Ffhf3evz210lOXbiGIAjEJqSQmGn7\nxfTvYk0zB9h/yYnNV9syZtp+ur9xkdtxSSaPZUqofePa72nWtjM+frbf9rUioFKpKRBX6CKloKQr\n9Z+XzUeltud/A0p3nMwc+AYEk5IUjyAI3IiK5MyxnTSq7m1tWWaj4hi6VEmrzv0JCjCsDJ0c7fhw\nQi8ri3o0hVotYH0z//GgF9/t8eVOuoKMPBUuwV35cluwSWOla12NDrXrtFpWLPqUEa+KpV3LCnGF\nLmIO7pp6dmY6YPhdvp9N65aTkZ7KwJETrSHvIRo2b4edg+H9ycvHn2d6dsFBVTEC1VBRQu7/4FOp\nOnu3/sy8L+bxbPcWtGgcYW1JxXL01GXGT1uMq4sjpy9cs5qZX01Qc+iqE/ZKQy3kW7GJeLupSSpw\n49ztWGpXyn3MCP+il8g4mWT8p93Fc6fzsnjmvEwR99BFzMXKTScY3rsJIWER5GRlMmriDKrWqMOe\nbRuIuniWCVM/t7bEe9Rv0pqps3/g6P6tjB8/gVrhQdaWZFYqlKEDBEW0Zt4sO8hPtLaUYsnIyqH/\nK7OIjjWEtWvWrGk1LclZCrLzZNgp9aSkZ6LX6/Fyd6FQJ3D6loNRhn4pw8/oUPuta5e5fOEkYyZ/\nZKx0kVKgVKoeSAoSESkNEXWbcGj3ZgA+fW8Mw8e+zcFdm3n302+trOxhIuo24ql2bWgWYXyej61T\ncULu92PE+fSyJiZFxfEoJfr7KugH+9pjrZL6ge4FyGQCBZpC4uJTCan0T4lWQcDPRVPicdJ1LkSl\nGldABmDJvOmMmiiuzssaMeQuYi4EQaAgP+fe1/n5eezYH0vTPt+z+5iUWNPTcSyCk72CJhVo3/x+\nKqahS2TgWhvkpav3bm6OXnVk+voglh+pRq2OcwgPCSA8NIAfPp+ApKQF2c1MoLuGJqHZRN1Ko3rV\nQADytRJ83LS0jcgs0Rh6iZwTCcb/ghzavQUXNw9q1mti9L0ipUNMihMxFxKJhFffmo1/pRDcvXwI\nazOLKg1GkpQB8SkS9h2XczvBNhKU7VRyGoZ7IZXahh5zU+FC7vdQuYFjFci8DHrt46+3MBqthE2n\n3EHQcO3GbWrWaMrUId/Qoob1Cxns/GUCLRqPR+bsgaDTEuJTwAttEpDLShY1uJTuR7bG+JfSknnT\n+WLZZqPvEyk9Op2O1KTiC22IiBiDm4cXw8a8xba/ogir042b1yIJqhyGTC4HBE5GgqsTOFnxqLdS\nLqV6JbdyW6e9JFRcQwdwCDa0Wc2NAUFvVSlKuYBSksOVGwXUqhaCBKgdogR0VtX11Q+/4+ftxqcv\n2pGWE4teL8HDyYhQu9aFqDTjtzd+Xr6Azr0G4OpeMc5/lieir19h/epF5OVksnT+R4x4TTxdIFI6\ndm35laP7ttOu37fcTtQTUrUGN65evGfqufmQk2s9Q5dKJAR4ORLkY5tbseaiYobc78e1FqjM3wDA\nWGLjU1j86f8Y2NGBEJ8C3vtfDE5q65r5ibNXWbFuJ19+8DIAbg6FRpm5XiLnZJLxiSU52ZlsXPMd\nA18qWY1lEfOh1+tYsWg2KUnx5ObmcmjPFq5fuWBtWSLlmD9+Wcr5k0d4e9Zi7FSAYAhnh1StQfTN\nKHRaLTKpFLkVl4+ernbUCbW+D1iair1Cv4tHY0g8AIUl2xM2N7HxKTTtOZGY4yuABARBgkRinSS4\n+2nV903SIn8y+f6L6cZntYPYGtWaSKUyAoJCOH7I8LVMpqBSSJh1RYmUW9b+8CU5WZmMe/czAMIr\n67geJ0XQ/2vqN29cpV6tQDxdlVbR6GSnpGmNipkE91+eDEMH8GwCSUdAm12m0z5o5gZswcw7Pf8u\nfyybjlpl2i9ZWqErV40Mtet0Oq5dPsedmFu07fw/k+YVKT0jXn2XQok3CSkCL7zYG4XCOm+0IuWb\n77+aiYOjEy+On3rvMRdHCV1bCBw4JSEnDyQING1UleUfNqZZzU1lvsXmaKegWU0fpFZKOi5rJIK1\nzktZA00GpJ0Cbdmcvy3KzG2BGXNXI0HC9EkDTbpfL5GzO7YK2ZqS79hEXTzDikWfkZWRxuSZX+Mf\nWNmkuUVKz50kCZv3aUhPTSQktBK92+mRWz83U6Qc8dXHkwmpWr3YNscaLWRlS5ArBFwcDI8N792E\nL5ZtLjNTt1PJaRTuhbuzbZ12siQVfw/9fpQuj223ai5s1cx37D/Nwb8jTTZzgIvp/kaZeVpqEp9N\nHce5E4e4efUiy+e9bfLcIqXn4k2QyQT0ugJy8iXE2MiRIpHyway3X6FWvSbFmjmAUg4erv+aOcCy\n348xYXh30lOTLa5RqZAREez2RJk5PGmGDqD2AadQkFput8FWzTy/QEOv4e/z1xrTq7IZQu0Oj7/w\nPhJib6O//+ig0tnk+UVKT7CvgE4nA0GGnUKCr+eTE6QTKR3vvTaQ9t2fpn33fibdXxamLpdJqerv\nTKBXxc5oL4onz9ABHCuD/b891M2JrZo5QMs+b3Dwtzkm369HzkkT2qL6hjSgWY/3cHHzICg0nInT\n5pmsQaT0VKkETWqkkxazg+6tdajFLXSREjBxRE8GvDCOpq07l2ocS5q6RCIh0MuBsEBXs49dHngy\nDR3AJQJUXmYd0pbNfPy0xQx7tiMNalcxeYzIDD+yC417yeRrYNt+LWna2oyavovPv/8dtZ0Vq0uI\nABDkB7FnF2FvJ67ORR5NanICI59pxbh3ZlOrfjOzjGkpU/d2VVO3gvQ2N4Un19ABPBoa9tXNgC2b\n+S9/HuBOYirjXuht8hhpha5cM6GAjEoBsVH78fZyICLMScyothHEWu4iJeHk0b28MbIP8374g5Aw\n83avNLepuzgoaRbha5axyitPtqEDeDYFhXF7wv/Fls08LiGVCdMX8/Mi0xPR9Mg5YUKoHeDcycOk\nX/uBPp3dcDPPZycRMyDWchd5HBtWL+bPn5fxw2+HcXJxs8gc5jJ1V0cVLWv5mUlV+UU0dIkc3BuD\nzLQECls2c4BWfd/gwAbT983BEGrPMTLUfhdDN7XpuDx5+Sk2jUwuR6/XI+itWxK5vCEryKf+rMn4\n795ibSkmYR8fS9CWX6m0dQMSXfGVKud9MJHMzHSmfb7U4ppKa+qOdgqaVPdBIRftTPwOAMjtwaOB\n4W8jsHUzHzr+c95/fTAhQab3/U3TupkUagfYumE1teo3JbByVZPnF7EcKqWaAo24Si8pEr2e2l+8\nj+uVC1Rd8y32d25bW5JRuFy5QKNp46j64xLCVi+i7Ut9cL566aHrxg/rRoNm7Rg2ekqZaTPV1B3V\nCprU8MZOJRZSANHQ/0XhCO4NQFYyU7dlM49LSGXxqi3Y26kY8kx7k8fRo+BEouklExfPm87LYq9z\nm0WhUlFYIO6jlxRBKuVqs3Zcy0jjskRCno+/tSWVGIleR71P30Gi16JTqdGp1AhSKfU+exe7xHgA\nbl69SJ9WoUya9oVVKjkaa+oOagWNqnnhZCfm5dzlySn9WhIUzuBeH9JOgjav2Mts1cwzs/Jo2ed1\nMjJzqBEexLbVH5ZqvMgMP3KMKCBzP999+QEvvvYeEqn4mdFWUSpVaMTEuBJxJ+YW61cv4vCerbzW\n7RmW7d7EzOQkPLzLRxKW395tyAry0KntHnhcnp2JW+QptpzK57c13/HbgetWUmhg2e/HSlRRzk6t\noEGYJy6OFbcVqimIhv5flC7gVg/STj9g6hqNFqVSTkJSus2YeWKmEolEQCHV4+qg47WpCzl/+RYA\naVn5HDl5iWYNqps0dqrWjWtGFpC5S1zMTU4e3sPCtbtMul+kbFCqVGjEFfojuXzhFBtWL+HW9Us8\nPegVxk6ZBUBG5ar8tOwrxkz+2MoKS4Ygk1FkPUCplB3bN3LazoEvlm0qa1lFctfU56/chpOLGzqd\nFpnsX6uyU8mpV8X9iasCVxJEQy8KpRu41IH0M6DL5+DfkYyY9CV6vQ5HB7XVzXzvJWcOXnEhM1eK\nRitFKdfj4aTD3qM2YDBRRzsFQQGmhcv1KDhVilC72E2tfCAeXSue44d2sX71YnRaLX0HjaJZmy4P\nPN+59wDWfDePtJFJuLmbt56FJUip24QCV3dkeblwt1GJIHA1OYEr3fsx4fmXrCvwP9wNv+fn5YJE\nyoT35lC9VgNUSjl1QtzxdhVrWRSFaOjFofYA19roUs4wYtIXRN2IBcDPzw9BEJBYqXvP/O1+nL9t\nDwLcjWbnaaSkZitIcxhO225a9Kl7+PDNIfj7uJs0R2SGn1G12u/n+KFdyOUK6jVpbdL9ImWHeHTt\nYQ7s/JO1S7/C1z+IwaPeIKJu42KvfW7EOH5a+hWvvF66ra2yQOPixsl3PqPBx2+izEgHQU9cYQFL\nu/ejj42ZOXDvPTY+NhqAL2e+zve/7KFmZTd8PUp3zLgiIxr6o1B7IfOojXCfdwd4O1rNzJfs8uH0\nTQeUcoH/xs9y83JJSUmhapNx9GvyPG3rZpg0R2qhq8mhdoDFc6fz8YK1Jt9vLOnpWaz+fj5devSi\navXaZTZvRUBcoRu4eukcf/3xE9v/WMszg17hrZkLS3Qyo2vfQQzt2YiBL07E2dW0D89lSa5/JQ4s\nWIvP0X0IUinJ1Wrx15SRBJw7SfXaDawt7wEkEglS6b+Z61KpjIjKHlR6AuuzG8OT1T7VRK6cPcDA\nIS8gkcDvP0zDz8SVb2k4G+3AF1v9UMmL/nEdPxtFozphADja6ZnULQY/10Kj5tCjYGdcFXI1pn1g\n+W3Nt6SnJjN8bNl1U/t8xnjsHVy5dvk0ebk5tO3Sh3ad++DtF1hmGsorMyYNo8+AkU9kNEVbWMj2\nP9by1x8/IZPJ6NTrOTr3GmB0EuemX1cQF32dlybOsIxQCyMIAk+3qcqG/desLeUhUpIT+OStlxHQ\nsWLVjzRvWMfakmwe0dBLiJBzG0nmFdBbZ0Xz+WZ/ou7YI5E8/OO6dPU2gf5eONobkkQKtDIGt0qk\nfUS6UXOcywjiuomrc42mgMFd6/Hzrosm3W8K2VkZvNK/Hau2nAIgNvo6e7f9xp7tv+Hh6WMw9y59\nxdrxxfDxW6Po2LM/TVp1tLaUMiPyzN9s/30tB3b9SedeA+jU67lSlzQd3K0+i37eg6NT+SyFGHnm\nb1YtmcPHX/9kbSkPoVLKqR7oQmU/sUNjSZDNmDFjhrVFlAckSheQqUCTAkLZVtfS6SX8ftIdjfbh\n1UPMnWTs7dW4uzrde0yKgAA0q5pd4jlSCt04k2h65GHRnKl07j2AKtVqmTyGsWxc+z2h4RHUadgC\nAGcXN2o3bE6v/iMICK7Cmb8P8MXM14m6eAaZTE6lkLAy01YeOLr/L/wCgwkKDbe2FIuSEBfNwZ2b\nmPv+BK5EnqZl++5M/vBrGjZ/CjeP0ie0KZRKjh3YSYOmbcygtuzx8g0gPS2FE4d2UbdRS2vLuYed\nUk7Nyu4E+Tg9/mIRQCwsYxz2AYbiM9KyPfuo0UrQCw+HwdMzs8kv0ODr9WCdZQEJFHF9cehQcDLJ\n9Kz2m1cvEnXxLJ16PWfyGKawZcMquvUdXORzNWo35JU3PmTtX+dp370fB3b9Sb+nqrFg1hTOnTxc\npjptlYp8Dj3u9g3WrVjIpBd6MW3CUHJysnhv9nd8/PVPtOvS16xz9er/Ajv+/Im83ByzjluWPDP4\nFW5dv8zxQ7utLQUwHE2rU8WTQC8xAc4YxKQ4Y1F5glstyIh8ZPEZc2Kn1GOn0JOdK7uXDKfV6bh5\nO5F6NUMful4AnNTF12n+L5Hp/uSamNUOhkS4l8v4mNrR/X8RVqMO7p6PL2vbtHUnmrbuhLawkD3b\nf+PnZQuY98Gke/vtwVWqlYFi20OpUqOpQFnuMTevcmjPFg7t3oJGU0CLp7rx6lufEBpe0+JzD3hh\nPGt/+JIRr75j8bksxXuzv2dg17p8t+4A9o7WWxXbq+TUDfPE28Xu8ReLPIBo6Kag9gGpEtLOgDa3\nTKZsEprNr3+7o1YY9tAvXY2hetWiE790egmNq2SVaNyUQjeup5u+x3xg5594ePlSo04jk8cwhS0b\nVtFnwEij7pErFHTs8SwdezxLanICe7f9xtwPJiBBQpc+A6lWs36ZvPnbChUhyz3m1lX27/iTQ7u3\nICDQol03JkybS+UqphVUMpX/DRjJcx1rMnDkRFTq8mtEn3yzjrdG9+OrldusMr+9Wk6jcG/cnMQK\ncKYgJsWVhsJsSDsBhZYPtaXkKJj9RyCZuVJuxiTgaG+Hp/vDiSKCIMHbWcMHz0Y/dkwdCnbFhZZq\ndT60R0MW/LgDZwu1VyyK+NhoZkwayqKf/t/emcdHVZ57/HvOnNm3zGSb7AlLQjAkLAFkFXErbhet\nem21bnW5Wm8Xa61tbcXaVmt71Vp322oFrStYF3BBqwgugEDCFghLSMi+77Oec/8YdgIkmS2B8/3A\nJ9uc93knk5nfvO/7PL/n07CMV7GzjHVffcbKj9+lqaGWCVNnM3HKbCZMnT0sypEGy8KnH8JksfHt\nq/8n1lPpN63NDWxYs5KSNasoWbOS0yZMJSN7FNPPnEdGdmxzJBa/9DRdHR1cc+tdMZ1HqHzw75fZ\ntX0Lt/7sd1GNazZKTM5Lxm5WvdkHiyrooSJ7oPFr8Pc/AW2wlNUY+c0rVjq6eshJP3qrWZFBq5V5\n5Ko9SNKJE/dK27LYHcLq/NXnH0OWZb7z/R8PeozB8Pzjv8eZ4OK/rvx+2MfuaGth/dcrWLd6BSVr\nV5My6lxGZQlMnXUOBRNOD3u8WBKrx28geL0eSteuOiDiXZ3tjJ88k6LJMyiaPHPIubRddmYer3y4\nCUmrjfVUQuKR++9g4pTZnHHe/KjEMxslTs93YTEO799brFEFPRwoMjR+Ab6OiIYp313D/Fue4oLr\nFtHSrUFWBESCSXAGnZ/MBC93zKtGqznxQ9rsc7CyeuCNJeK2bsRSXUFjnIPLf/NDFi1dN4h7EhpX\nzM1n0fsb0Okity3n9Qt8+KXAptKdJNjaqVj9ED1dHRhMZvLHTWLMuEmMKZiINYo7E+FmyUvP0NHR\nFtU2mSfC3dvDzu2b2PjNl5SsXcXOso0UFs84IOKxXoWfiNf/+QRer5urbvpprKcSMrdcfga/fWwR\nySkZEY1jN+uYmu9SW6CGAVXQw0nj1+BtIZiWFn6Sx1/FxuVPkJQQx4Y9FnY16OjxSFgNPsZn9ZCV\n2L/z0ABaPqkeQY9vYFvtuS8+iWvFh0i9PTQ2N1A6+xyEX/5pMHdl0Cx/73XKStdy+y/+GNE4/gC8\nvqyT6rouiovSmDNZRg4EKNu0jq0bv6Fs4zeUbVqH1RZHfuEkxhRMYsy4iUNecA7lvTf+Sc3eCm76\n8b0xiR/w+9lRVkr51lLKy0rZsbWU5sY6Csafzqj8cRQVz4h6bkY4uHT2aN74tOwwp7PhSEtTPXfe\nOJ9/vBW5qpA4i47pBSloNWrBVThQBT3ctKwDd0PYa9UvvfF3fO+ys7jkW9NCHqu0LZPdbQMrB0lZ\n8QH5z/6ZbgX8fj9tLY1kJ7rYdPsvqZ8++J7rA+Wn37+Y2+76Q1Tq3V9+/mm8Yg7XXXveMW9TU7Wb\nraXfULbpG8o2rsNqjyMQCJA1Io+skXlkj8wjMyd3SK7kH3/g59RW7+GXDzyDOcKmKF6vh5rKXWzf\nsiEo4FtLqaooZ9SYQkbnFzJ6TCGj8gtJyzy6amO4MRyOMvrLqv8s5YtPlvKz+x8P67iCAMkOE1Pz\nT1ylotJ/VEGPBK0bobcGlP6Xjh2Ph59dQnVdM//3m4FldfdFk8/JquqBP4km/P5nCCWraW6sR5ED\n2Gw2EhJTaR85hvW/fOhgB6cIUr6lhGcfXcCfnl0S8VgAv7j1cq657W7yx03q9zW9Pd1U7trGnl3b\n2LNzGxU7t1G5ezuSpCVrZB5ZI/LIHVtEnDOBJFc6ia60CN6DY7Pw6YdY/NIzKIpCetZIHn/po5DH\nVGSZmr0V1FTtpqYq+LF2b/DzjrYWJkydjd2REBTw/EKyR+WH4Z4MTebPHBFSb3FdeyuOzRuon35m\nGGc1OP72l9/iSs3kwsuvC8t4kkYgI9FK4cj4sIynchC1bC0SOMYFXeW694A8MD/1I1m9YTuvvr2C\nr999JORpBdCxvn5wSUR+nY7Oxnr8Pi8APb1uZNmPbDRGRczh+EYy4cbr9bBz26YBiTmA0WQmr2Ai\neQWHN7tobW5gz86g0O8q30LZxnU01O2lsa6apJR0klzp+z6mkZSSjistE5vdic3uwGqLG7DH+PFQ\nZJnyraXsfy/v8bipqig/7nGB1+OmvbWZtpYm2tuaadv3ecDvY9um9dTs3U197V5S07NJzcghNSOb\nEbljmTH3AlIzsklISgnb/IcDV1z3v7z2wl+54rr/HfC1hsY6Jv7+Zxhamkhc9wWbbv9VBGbYf278\n0W/46Q0Xk19UzMjc0HbG9FoNo1LtjEofnja5Qx11hR5JuiuhcwcEBm/eoc2+mN4dS5Ck0M/jStqy\nqBhkVrupajfZN1xEe2+w7t5ktpLuSuPrB5+hJ8JJMwAedy/XXFjMq8s3RzwWwJpVH/Ph26/wqz8+\nF/FYDbV7aajbu+9jNQ21e+nq6qCmchcd7a10drRhMlmw2uOw2h1YbQ6s9jhsNgdJqRl4PW60Wh2S\nVotWq0Or0yFJWrQ6XfD7UrAMyOv14PN58Xk9VO7ezntvvkjA72fE6LGMnzILv8+L1+tB0Cexd28z\nnp4W2psraareQiAQwO6IJ86ZgD0unrh9n7vSsnAmJpOanoMrLTPiv6vhQiAQ4Iq5Y3jzs/IBXxu3\ntZSJf7iLgF5PT0oGG37+B3yW2HqZh6NXg0kftHJNTVDd3yKFukKPJOZMkMzQtgn8A69VP/Pyu/no\nX78Pi5g3+ZyDFnOAnowcXv3OTZz/2vPodHric09jww0/ioqYQ3RX5wAla1dFzdc6KSW4OmfCsW/T\n3dVBZ3sbne2tdHa00tneRkdHK4os09PVgc/nxe/z7RNsL36/D5/Xu+/7wV0VnV6/T/D1aHU6ps48\nG5/XS3JqUIhlUyF+WxGKaELjayLblYFRL+CME5laIOKMi8Zv4+RAo9FwyVW38MaLT3LZNbcN6Nq2\n/EI+yhlNwooP+HTOPIpiLOYQtAn+1UN/494ff4/7Hl044OstRi0TRyeqhjERRl2hR4OAB1rWgrf/\nPcp//aeF6HVa7vnRlaGHR8cne3Po6aO5S3+pr63iNz+8mr8tXIaxqYHexBQC+ug9OaNVQrOf268+\nt999sU8Gvi4V2V1z8Otd2zeTPSofURRRFBBEKM5XGJWpvlz0F5/Py3fPLeT1/5T1+5ovP/uAF596\nkIIJp3PtbXfz42vP58Gn3xgyRxav/OMvQNDqtr9YTTqmnebCqBveWf/DAbVWIBpo9JA4A4ypwVfG\nE/D+p9+wtqQ8LGIOsLktJSQxB3j24Xu5+Y77CBhMdKVnR1XM1339GWmZI6Im5i1N9fR0dZ4yYr56\nk0j5EcaCoqhBDgSTOgUBUGDtFoE9tepLRn/RanVceMX1LHnpmRPedtP6r/jZzZew4sO3+M2fX+AH\nP38Ai9XOzXfcx7MPx6assC+uvOFHbC1dS8naVSe8rSgIuJwmzhyfpop5lFC33KOJczx07YTOij77\nqiuKQnePm8tveYDObW+EJWSjzxGSGxzAuq8+RVFg0rQ5YZnTQFm2eBHzLo3edvuGNSsZP3lm1OLF\nkqY2gYpaAUk6fOUtajTIcgA43LlrwzZw2sGqtpjvF1de/0O+f8l0fH4f5110JXZnwmE/r9hZxotP\n/hGv18PNP17A6LFFh/18ysyzWfrmi0Pqb/K+RxceMHfSanUIfSTF6rQiGYkWCnLUTPZoogp6tLGM\nBMkK7VsPO1d/7B9vs2ZDOSVbdrHqrfCYtQQEHevqQ6/zfObhBfz20RfDMKOB09xQx67yzUyecVbU\nYpasWcnE0+dELV4sKd0uIgeO3kbXaDQEAkeXXXZ0QlWdwNgR6tZ7f6jYWYak1fLycw/z0Tuv8cjz\n72Cx2mluqOOfTz1I5a7tXHPbz5k49YxjjnHzHffxu7tu5Ml/fRzFmR+fB55+nZ/fcilZI8YwemwR\nF3z7mgM/M+klxmQ5yEi0xHCGpyaqoMcCQxJoLdD0Dfg7efH1T7jz/r/j8/mx2WykuRJOPEY/2NSa\ngtsfWknZO6/9gykzzz6QOBVtli1ZyLxLvhfVmCVrV3F9jEuFooGsCLR09C3Morh/hX44Go1AbSOq\noPeTrz//iLaWJgAa6/ay9otPKN9Swleff8i1t97NHfc+esIxUjNymDBlFu+9+eJhwhlLEpNS6Whv\n49MPlrDy43exWG2cce58rCYdxXmJ2Exqg5VYoB6IxQqNCZJngSGZ5as24PP5AZADPsp2VIU8fKM3\ntKx2CJbevPDEA3z/h/eEPJ/BsnTJIs6PYnb7np3bDpRnney4PQrHersnHmOFLooKbi+oubT94+LL\nbyAhKRUAqz2Opx66h9TMEfx98RfMPufifo9z008W8NwjCyI0y4FTtWcH3Z3BJF+/30fpmlX7zstT\nVTGPIaqgx5r4Sdz7q7sZkZWC3WbmnFnjOX1iaL2cA4KO9Y1JIU9tfyJcrFjx0dsUTzsTk8UatZjR\nLFeLNRrx2IKu0RxMijsURRGQRPo8N1U5Go+3l9OKJiNJWi757i28+vHmQa+yh1KC3JiCSRQVz8Bs\nseJKy+Tue37N1Pxk9e8ixqhb7kOAkePPZvWq5az/4n3Onh6amANsakml1xfaE6ty13a2blwb9Z7I\nh7Js8UKuue3uqMbcsGYlF142NLY1I41eJ2A0KLg7BcQj/lyOteUuywpO1eTrhGzbvJ63/vUcu7Zt\nZv53b+Ink+nHSAAAGgFJREFU94bu9Hj+pd/j9qvOYe+enaRnjQzDLAePRqPhFw88Q/nGr7n4vDPI\nzRkaZXWnOmod+lDC3wMtG8DfMejmLo1eJ1/UhJ4I96vbv8N3b/wxp42fGvJYA2Xb5nW889oLNDXU\n8uBTr0c19rfn5PLa8i1opFPjve62PbBus3hUNWV7azNer4fE5NTDvq/RwDnTZOLUfKc++frzD3nr\n5eeQZZn537mJaXO+FdbxS9d+wRsLn+S3f1kU1nEHiiBAnFXP5NwkjPpT47kyHFAfiaGEZIKk6dCx\nHbqr+ixtOx4BQcf6hsF5tR/Kl5++jy3OERMxb21u5I+/+gEtTfUYDAYqd28nMyc3KrE3b/iaMQWT\nThkxB8jLgr11UN+sIB6yTA/WoR/+ptLrVyjIElQx74MP/v0yb/3rOTJz8gbc0GcgFBZP5703/8nX\nn3/E1FnnRCTGidBpRVITLBSNUEvShhrqGfpQxJYbrFmXBvbKubElld4QDWQgtmfnm9Z/RUtTPQBu\nt5vPPngrarGHUq1vNJkzWcZmFjj0yDxYh+4/8LWswOgMgYn54W0LPJzxuHt55R9/4cpzCti1fQu/\n+fML/OKBpyMm5vu5+Sf38ewjsTlLt5i0TBiVqIr5EEUV9KGKPh6S9rvLnXjF2OB1sqfdGHLY1//5\nBGdfdAUOZ+gr/cEw6+yLGFUwHUmSSM8aydU33xm12CVrVlE0+dRIiDsUjQjfmimTm62g04HXBwha\nZEXE6wedJFCUB9OKVDEHkHp7+eqJ33PNhcUAvPD2am792e9ISc+KSvz4JBdnnDOfxS89HZV4ABox\n6Po2a1wqLqfqKjRUUc/QhwM9VdC5M3jG3gcBdCzfm4M7xNV5T1cnN142k5ffLwlpnFAorxL499JK\nRqfUMXfOaKy26HQE6e3p5ob5p/OvDzdGJd5Qpa1ToKkN9lQ28dkH/+am227EaQtgNqnZy/up31zC\nwnv+hzuXfBnTeVx5dgEvvLsagyGyAmvSS4xMtTEiVc2GHOqoK/ThgCkD4qeANq7P3uOlrWkhiznA\ns48s4OafLAh5nFBo3FuCKLuZNnNy1MQcoGTtSoqKT73t9iOJsyqMylCYOCZAVcmzZLhkVcyPIPm0\nIlpSM9lSsiam84h0bbogCMSZdUzNd6liPkxQBX24sD9hzjISxIONURo88VS2G0IevnxLCdVVu5hz\n3iUhjxUKK5c+w+ljdpDkjG7cU/X8/FiYLTa6uzpiPY0hy7xLrmbZkthmmp91wWVUlJexc/umsI+t\n12oYkWLljPFp2MzaE1+gMiRQBX24cUjCXAAt6xvD42j27CP3cvNPYmciA9DR3sqmdV8x/cx5UY9d\numYVhafg+fmx0OkNKLKMb18vdZXDmXX2Raz76rOYv+m5+Y4FPPvwgrCOaTfrmDg6UW2sMgxRBX04\noo9HTphOm5JEgNDfPf/n/cWkZ41idH5hGCY3eJYtXsi8S6Pr2w7QWFeNz+8jNT076rGHMharna59\n9p4qRzPv0qtZtji2q/S8gokkp6Sz4qO3Qx5Lr9WQmWRhxrgUkhyhJ9iqRB9V0IcpokYiPr2IiaMT\nsBhDE/VYW7zuZ9mSRcyLom87QE9zA18+dj+Fk6ZHNe5wwGyz092hCvqxGArb7hC6JawggNWkY2Ju\nIhNGJ6LVqLIwXFEfuWGOy2li7sR0RqXa0Ws1A75+0bN/5ttX34rRZI7A7PrPl599QP64SVFtitLT\n1Yn1yrncuuJDfvzBEhprQm+KczJhsdro6lTP0Y9FfKKLkXkFrF65PKbzsFjtXHTF9fzr7yfu3HYk\nBp2GkSlxnDk+jaQ4dVU+3FEF/SRAAE7LcTJtbDIOqx7xmC03Dqe1uYGP33uDy665LbIT7AfLFke/\nTarwxAPk9AZLAXP9fnqe+ENU4w911MS4EzNUVun/ff0PWbZkER1tLf26vSgIxFl0TBmTxGk5jr6K\nZ1SGIaqgn0TYLXpmF6YyNsfRr9X6UNlqr6naTVNDLYXF0d32tp77X+gkCQnwShLpM86KavyhznA6\nQ29vbcbtge7e6CrThKmzqamqoL6mMqpx++KWO+7jmX5svZv0EnmZcZxRlIbDGnqFjMrQQbNgwYIF\nsZ6ESnhxWg1kJFnp7vXR6/VzpHXQay/8lVeffxyT2coV190em0keNp/HGT9lJnmnTYhqXDklnc3N\nDWjaWuj84T3I8y6LavyhzqZ1X6E3msgdWxTrqRxFdeUuVn/+Ee+9+U9e/vtzrC2Po7o1ibp2M7WN\nkOQU0EbJkl8O+Cn95ksmTJkVnYDHIDMnly/+s4wP336Fxvq9R/Vi0EgC8VYjxXlJpMTH9ohNJTKc\nOl0oTjH0WpEp+cnUt/awaXcLXb0+ABYveopXnn8MORAgMTGRnu5OTObo9Rvvi6VLFvLa8i0xif14\n5W4u+/mDaslaH5itdrqHyAp92+b1bC1de+C/1e4gv7CYkQXn4hw3B7fHR2tLI0ZLAl1d8P5KkYvm\nBKIi6vMuuZqrz5/I9bf/MvLBjkNXRxuVu7ZRVbGDjeu+RKczMP87NwFgMWrJTYsjI1ntrHMyowr6\nSU6yw0Syw0RZZSsVdZ2UbVyHvK8Lh9vjo6WpIaaC/tE7rzJ33rdj0uFMURQ2rvsy5q0ohypmi42W\nprqox+3t7WbLhjVs3RgU7y2la8nNLyK/sJi551/GD+5+EJvdQUCGD77QoOlSMEs6aqt2ASCKAm6v\nwop1AmdNibyztU5vYOZZF/LJ0jeYe37sdnlamhtpa2kGQA4E2LxhNd+97lZSnGbyMuPQSuoJ68mO\nKuinCGMyHaQnWfjhnfdwx65tuHu6mX3ufNIyR8R0Xu8veYnb7o5NMlrJ2lUUFasr82Ph7u2mctd2\n3L09GIzh9wt3u3uo2r2Dqt3bqarYQVVFOVW7d2C22nDEJ5I/rpjv3ngHYwuLEcSjxaitQ6THfVCw\njSYLvT3dGE1mRBE6ugS6esBiiryoz5t/Fc8+uiCmgp6RPYrZ517M5x+9jdFk5id3/ZrTxyZjNeli\nNieV6KIK+imExaDlqvlzOG3MCj77/Buyx0a2zeOJ2L5lAxpJYmRuQUzil6xZSZFq99ona1Z9zJKX\nn8Pd280vb7uCh59/d9Bj9XR3BcW6Yp947w6Kd2d7Gxk5o8jIySUjexTfmn81GTmjSE7J6OfICrIs\nAkHBNpkt9HR3HijBVBSFQJR6T40eW4QcCLBz2yZG5sXm71kQBG65417OOu8Czpk9mYLc7JjMQyV2\nqIJ+CjJ+TA7jcrPZUd1OVWMX3fvO16PNssWLmHdpdI1kDqVk7Spuv/vBqMQKyNDcJuD1+vnsgzeR\nlGac8U4c8Uk4EhJxxifhiE+Kylz6w8fvvYG7txuAxoY6tmxYzdjxU/q8bWtzAy1NDfs+1tPS1EZt\noxev18Oe8rW01ZeRkT2ajOygeBdNnklG9mgSk1NDmqPZBHqdQq87+LXRbKGprhoSgxKvlUTs5sBx\nxwgn8y79HssWL+T2X/wxajEPxWLUkuOycdG0y2MSXyX2qO1TT3E8vgDl1e3UNHXT6/FHLa7b3cN1\nF07hleXhbyzRHzrbW7ntu2ez8L1vIh5rd7VAyTaBHg90dfbS3lqH2aQj0LGW9j1v0drUSEtzUBAd\nzkQcCUk44hNxxCcFhX7f1wlJqUiShFanR6fTo9MbDnwuaUNzCwz4/Xi9HnxeDx6Pm5I1K/nbX+7H\n3dtNWuYILrriBtpaGvcJdgOtTQ0H5xyfhDMh+IbEkVKIlHgh7R0yFnsC8fEW8kdoKcyNzMtMVa3A\n5+tFRDE4/q7tW8geNQaNJDJjvEJ6UnRf3i4/cwwvf1iKVhu9bW6jXoPLaSYvI25Q5lIqJw+qoKsA\n0OvxU1bZRl1LN16/HPF4S15+lo62Fq697e6Ix+qLz5e/w+qVy/npgr9ENM76MoFNOw6WULW3tuD1\nuklMTkUB0pMUZk08+BRsbWmktamB1ubG4Iq3ueHA1yazhV3lW/B5PXi9Hrwe94HPA37/YQKv0+sx\nmBzorWnoDC4QwNdTi7urBndPKz6vF88h14uiiE6nR6vTo983jqIoWGx27HHxxCe6cMQn4kxIDop3\nQtJRuwrdvQrLVmrwB6ChrhqDwYgtzklAVsjLFigeG5m/q7LdAlt3Cbg9CnW11cTZjVx4lpNER/Rf\n2v7x19+RkJTKxf99Q8Rj6XUanDYDeelx2M3qObmKuuWusg+jXmLC6AS6em1srmilqc2NX46csC9b\nsojfPfZyxMY/EdFIiNuyU2B7BYeVTvl8ngOrNwHYXQMOq0jB6ODv2uFMxOFMHHAsRVEOE/g9tSLl\ne810u7V0tHcgCAJWmxWzwU9eejfpLv8B4dbp9H0mnQ2UNZtFfP6gN7hWqzvQqU0jCuypgdxMsEWg\nampMjkJOmkJzu8CaFaVU7/6aRMfgvc1DYd4l3+O3d14XUUHXSxpsVh156XHE21RjGJWDqHUMKodh\nMeqYmp/MjHEuEu1GpAg0alj31aekZ40iKSU97GP3l0gnxAUCsHW3gHKEDa/f50U6ZDtWJwmUV4Lb\nE5rDmSAI6A1GLLY4ttekUFadjCxYMBr1aDUykiRjNOqRBTNb9yazoz4Viy0OvcEYFjEPBKC9Uzhg\nIarV6fB5D7Ze7fUItHeFHOaY6HWQmqhw+rSxlKz+T+QCnYCU9CySUzLYsGZl2MfWSRoS7EaKxyQy\nfaxLFXOVo1AFXaVP4ix6phe4mDY2mQS7IazCvnTxIs6PYTJczd4KtFpdyElZx6OxBTx9tBL3+XxH\nna929Qo0tIbHsnT9NpEdlRzfzV9QKN8jUro9fI+pgoBOezDqoSt0AEFQ0EiRt2VNTs0ERaG+NnaN\ndsLdVlUricTb9BTnJTKjwEWCXW2iotI3qqCrHBenzcCMghSmjknCaQtd2JsaaqnYsZXi6XPDNMOB\nE41yNV8AfH3kGPq8HrS6wwVdQTmsnnqwNLUJ7KgU6I9Hj6SR2bZHoKUjPC8BkkYhOUFGloOiLR0h\n6Hq9ErUz7aLJMymJwAq5v0yddS7bt2ygtbkhpHG0GhGH1cCk3ERmjkslUe2GpnICVEFX6RcJcUZm\njUuhOC8Rh1U/aGF/f8kivhXlnudHUrJmFUURtnrVSQIa8fAVaSAQAEFAPGKLW0BAqwld7Mp2g9fb\n/3G8XoWyXSGHPcDEMQoOu0IgIKDRaEBR8PsDiKLC3Mky0UrALpo8g5I1q6IT7BjMu+Qqli15aVDX\nSpKAw6pnwuhEZhemkOwIv6mPysmJKugqAyLZYWJ2YSqT8hJJsBnRDfBVeumSRZwfY0HfsOZzxk+O\nbCMNu03Baj5cXP0+b5/lTDqtgisMbeCb2wQ0A3g4RA00toUe91DmTZfJz5GxmECQuzDrOjhjkoLT\nFr0uaOMnz4zIGfZAGExbVb1WDJ6R5yYxuzCVlHhVyFUGhiroKoPC5TAxY5yLqfnJpCWYMeiOryTl\nW0v551MPUjztTEyW2HnHb9u8nqwReRGxMj0Ugw5GpIM/cFDIfH0IuqxAhgvMIe6m9roVEAa2yhcA\njQDuPs76B40AE8cqfGuGgqblVVz6r0iOD+P4/cBssZGSnsWOso3RDXwIVruDwknTWfj0Q+zcdvx5\nmPQSaQlmpuS7mFHgUlfkKoNGLVtTCQmnVY8zL4kej59dtfsNag5352qqr+VPv/4BTY115OXmoigK\nghDdvtX7iaZ/+7jRMq0dInsbBERBwef1HnZ+7g9AfJzC9KLQt9uNBgFFFlGOyqs/PgE5+OYj3Ega\nhcQkJw0xSk4rKp5BydpVjBozLibxFSX4eC9+6Rk+X/4ODzz5OvFJrgM/FwQwG7Qkx5nITrFiMYZm\nDKSiAuoKXSVMmPQSBdnxnDUxg3Ej4rEYtYj7RPvJP/2Shrpq5ECAisoqdpVvjtk8o+3fPnuSTG6m\ngigGk+REyYTXBxpJYWQ6zJsRvkSx+DiFgVgHBALgtEcuUc2VlklddWXExj8eRZNnUbLm85jEBti5\nbRMb13+Joig01FXz5J9+BQRr8q0mLWOznMwcl0LBCKcq5iphQxV0lbCiEQVGpNg4a2I6k/OTSIgz\nMnXGXPSG4J5ykiudlPTsmMwt4PdTtmkdpx3DkzxSFJ8mc+Fsmc7dC8lJqmPGBIXzpsG0ovAa94zO\nCibj9RetFvKyIrdTkpySTn3t3oiNfzwKJ01j47qviJURZmp69gGfBb3ByNSZc3Fa9BSNSmBOURqj\n0uyqTatK2FG33FUihsthwuUwUXT/L5g4vpB333mL62//NYTByGQwbFizkvEx6q5mMkDV1rf4/k2X\n4kqLjMi44mWyUgW2V4pI4vFj+P0CedkySfGRE7zk1Ezqa2KzQoeD5Wvjp0Q2AbIvTBYrj/79XZ5/\n4n4uuHA+l1z8LRLtqhGMSmRRBV0l4liMWm68ej7Xfudiquo7qazvotvjxx+IvGf8oZSsXUlRceza\npdbXVJGc2t/WoINjSoFCr1uhuuHY75sCMqS7ZCYXRHb16krNpC6Wgr7vHD3agq7TajDpNWQmW3l1\n4d9PmDCqohIu1C13laih1YiMSLUzZ0Iak/MSSUuwYDJIUUuQi+UKvbGumoTk1Kjc1zOKZSblKxj1\n4PUpKGhR0OLxgUGnMOk0mTnFkd+K1kgScY4EmhvrIh6rL6JZviYIAhajliyXlan5yZxRlEaOy6aK\nuUpUUVfoKjEhyWEiyWHC7Q1Q39pDVWMXXb1ePN7IrNpbWxrpbGslc0RuRMY/EXU1lbhSM6MWLy9H\nIT1FoaNTYNm7axAlDedNm4vVAuYo7vwmp2ZQX1NFfKLrxDcOMzmjx9LcUEtHeys2uyMiMfQ6DWa9\nRFayDZdz4L4MKirhRBV0lZhi0GnISraSlWylx+1nb3MXNY3ddLl9BALhW0WWrllFYYTd4Y5HNLbb\nj8RsALNBweDfiCTqcCVE3253/7b72KLJUY8NB8/RZ519UdjG1Ekiep2Ey2kkNd5MnEUftrFVVEJB\nFXSVIYPJIJGbFkduWhwdPV721HdR39KN2xsgIIcm7rHcbgeor60iOSW6gj4USEpJpyFGme4QPkGX\nJAGjVktCnIG0BDNOq4EYWSmoqBwT9QxdZUhiM+kYl+Pk7EkZzBiXQk6KDbNBQhIH9yoaTIiL3Qq9\nrroSV1r0ttyHCrGsRYd9iXGDPEeXNCIWo5Zsl5UpY1zMmZBK4Yh44m2qmKsMTdQVusqQx2HR47Do\ngXiaO9zsbeiiqd2N2xc4YaZ8ddUufn/XTYjI6PSxKxtqqN0b0/7vsSI5JSOmrUz1BiM6g5Eb50/h\nt399ldSMnOPeXqsR0esl4i160hLNxNsMiIN8E6miEm1UQVcZVsTbDMTbDMiKQnO7h7rWbhpbe/H5\nZdy+wy1n29taeOS+O6ip2g3A/T+7gT8+/WYsph31pLihwv6kuFjx+7u+T3VlsKXcw/f9hHsffgGr\nLe6w2xh1GiRJJN5mIDXehNNqRKNRRVxl+KEKusqwRBQEEuMMJMYZIAc6erw0tffS0NpLR48Pj0/G\nZLbQ3dVx4BpJ0qLIMkKUjW3c7h48vb3YHVHuUjIEcCYk09ne2mdjmkgjywEk7cGEte7OdkwmC5Io\nYNBLGPUSKU4TTpsBuzm6c1NRiQSqoKucFNhMOmwmHSNS7AQCCq3dHuqae7jv/57m/+7/BR63mzvv\neyzqYg7QULOXpNRTb7t9P/tX6elZI6MaVxQ1/PTeR/ntndejNxj46a//yKgMJ8kOE3EWnWq9qnLS\noQq6ykmHRiOQYDOQYDNQkHMeF8yaAFozda29tHa68fllPEdsz0eSU3W7fT+xEHSDVoNWEknNz+GT\nz79GlHvJSkuOWnwVlVigCrrKSU9qSlLwY4IZgO5eH82dHhpae2jv9uIPyLi9kRP4+ppKkk9hQY+0\nBawogEEnoREFbBY9iTYDdosOi1GLpNm/I2OLWHwVlaGCKugqpxxmoxazUUtmkgVFUejo9tHe46Gl\nw0N7txefP4DXp+ALhC7yTQ21fLXiQ3JGjQ3DzIcnCvDlp+9z+uxzw+IYJ2nEfStwDXE2HYk2A1aT\nTm1DqnLKowq6yimNIAjYLTrsFh2ZSVYAfH6ZHo+f9i4PLZ1u2rt99Hr9+P3ygAxuujrbufvWy2mq\nr2HbpnXkFxYzY+75kborQ5LPl7/DR++8is/r4ee3XMZjLy7DZLH2+3qdVoNOEhEFAbNBwmE14LDq\nsBh1qk+6isoRqIKuonIEWknELumwm3VkJgfFJyArB0S+tdNDR4+PXo+PgAxeXwC5j77bFTvK6O5s\nB8Dv9/PNF59EXdBlOUBD7V5EjRiTDP9vvvwPPq8HgO6udip2lh1tA6sEndh0kgaNKKLXabCaJOLM\neixGLcZ9GekqKirHR32WqKj0A40oYDVqsRq1pCdaDny/x+2nx+OjrctLe7cXt9ePxxsgoCgUTZxM\nfmExmzasxm53ctm1P4j6vJ966B5WLH8bRVGQtDpuu+sPUY1/+bW3s7lkDR1tLZxWNJmiicXotBKi\nKKDViBj1Wuzm4A6JUS9h0klqDbiKyiBRBV1FJQRMBgmTQSLBbjzwvYCs4PUF8Pplli1dxtKlSxkx\nZhxGs50ebwDfPsGXZYXAvv+RoKW5gd07tiLLQTe9nds209bSRJwzIbyBFEAARAG9RkTSCAiiiCSC\na3wBr729nIryrcybdx56rQadVoNeq0GjOrCpqIQVVdBVVMKMRhT2bRMDZrjuqm8fdRt/QMbrl/H6\nAnh8Abp7fbi9AXo8fjy+AD6/QkCRIfgPRVaQAVmWkRUFWQalj23+Q3HGJ1EwYSoVO7YCUFQ8vV9i\nLogCIgKiABpRRBSDRj6CIICgoNWISFLwbFsvadDpNBi0Ika9hKQR0e8X7AMr7WSYPGZgv0QVFZUB\n8/+eKTX9pldrBQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "phylum_color = ['lightsteelblue', \n",
    "                 'moccasin',\n",
    "                 'darkseagreen',\n",
    "                 'khaki',\n",
    "                 'mediumturquoise',\n",
    "                 'lightblue',\n",
    "                 'thistle',\n",
    "                 'tan',\n",
    "                 'mistyrose',\n",
    "                ]\n",
    "\n",
    "img = deepbiome.deepbiome_draw_phylogenetic_tree(log, network_info, path_info, num_classes=1,\n",
    "                                                 file_name='%%inline', img_w=500, branch_vertical_margin=20, \n",
    "                                                 arc_start=0, arc_span=360, \n",
    "                                                 node_name_on=False, name_fsize=10, \n",
    "                                                 tree_weight_on=True, tree_weight=trained_weight_list, \n",
    "                                                 tree_weight_classes = ['Genus', 'Family', 'Order', 'Class', 'Phylum', 'Disease'],\n",
    "                                                 weight_opacity=0.8, weight_max_radios=10, \n",
    "                                                 phylum_background_color_on=True, phylum_color=phylum_color, phylum_color_legend=True,\n",
    "                                                 verbose=False)\n",
    "img"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can show the name of each leaf node in the phylogenetic tree by turn on the `node_name_on` option."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "img = deepbiome.deepbiome_draw_phylogenetic_tree(log, network_info, path_info, num_classes=1,\n",
    "                                                 file_name='%%inline', img_w=500,\n",
    "                                                 branch_vertical_margin=20, arc_start=0, arc_span=360,\n",
    "                                                 node_name_on=True, name_fsize=20, \n",
    "                                                 tree_weight_on=True, tree_weight=trained_weight_list,\n",
    "                                                 tree_weight_classes = ['Genus', 'Family', 'Order', 'Class', 'Phylum', 'Disease'],\n",
    "                                                 weight_opacity=0.8, weight_max_radios=20, \n",
    "                                                 phylum_background_color_on=True, phylum_color=phylum_color, phylum_color_legend=True, \n",
    "                                                 verbose=False)\n",
    "img"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we want to save the figure as `png` or `jpg`, we can change `file_name` option."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [],
   "source": [
    "img = deepbiome.deepbiome_draw_phylogenetic_tree(log, network_info, path_info, num_classes=1,\n",
    "                                                 file_name='tree.png', img_w=500,\n",
    "                                                 branch_vertical_margin=20, arc_start=0, arc_span=360,\n",
    "                                                 node_name_on=True, name_fsize=20, \n",
    "                                                 tree_weight_on=True, tree_weight=trained_weight_list,\n",
    "                                                 tree_weight_classes = ['Genus', 'Family', 'Order', 'Class', 'Phylum', 'Disease'],\n",
    "                                                 weight_opacity=0.8, weight_max_radios=20, \n",
    "                                                 phylum_background_color_on=True, phylum_color=phylum_color, phylum_color_legend=True, \n",
    "                                                 verbose=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can check that the tree image saved in `tree.png`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAOcAAAD8CAYAAACM5bN4AAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAALEgAACxIB0t1+/AAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDIuMS4yLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvNQv5yAAAIABJREFUeJzsnXd4U1UbwH+3e+9SOil7y7BskCnb\nAQgfioCIIAgyFRAFEUGWAwFR2RsE2bL3XmWvsgpt6aAt3TNNcr8/0klu0rRNB5Df8/A0Oefcc88l\neXPOec87BFEUMWDAQNnDqLQHYMCAAWkMwmnAQBnFIJwGDJRRDMJpwEAZxSCcBgyUUQzCacBAGaVY\nhFMQhM6CINwTBOGhIAiTiuMeBgy86gj6PucUBMEYuA+8DTwFLgEfiqJ4R683MmDgFac4Zs7GwENR\nFANFUZQBm4D3iuE+Bgy80pgUQ5+eQEiu90+BJtoucHFxEX19fYthKAZePUTISFC9NDIHY4vSHY4W\nLl++HC2Komthry8O4dQJQRCGAkMBfHx88Pf3L62hGHiZCN2b971nVwD69etHXFwcc+fO5fHjx3Tv\n3p2//vqLs2fP4uHhwbp16/jpp5+wtbWlR48e7N27lx07dhAXF0dGRgaOjo688cYbVK9enYYNG+Lm\n5lbkoQqCEFSU64tjWRsKeOd675VZlgdRFJeIougniqKfq2uhf1wMGODzzz9HFEVGjBhBzZo16d69\nOwDDhg3j6dOnTJ06lQoVKrBr1y569OhBXFwcXbt2pWbNmvTp04e1a9cybtw4ALp06cK5c+dK83Gy\nKQ6FkAkqhVB7VEJ5CfhIFMXbmq7x8/MTDTOnAZ1Ifw7RF1SvTe2gXMvSHY8WBEG4LIqiX2Gv1/uy\nVhRFuSAII4EDgDGwQptgGjBQEOQm9iwKuA9As0rNtCszXnKK5ZxTFMW9oihWE0WxsiiKM4vjHgZe\nTxYdX5T9+lygavk5e/ZsPvroI9auXQvAiBEj+OOPPwgICKBHjx5MmjSJa9eu0b59e65du0bfvn05\nffo027Zto2/fvly/fp1t27bRsWPHUnkmTRgshAy8EnzwwQe4ubkRFxfHrFmzqFWrFrt3784W2P37\n99OsWTNAtUcF6NixI9WrV6devXp07NiRgwcP8uzZs1J7hhfR+56zMBj2nAZ05XH0Y3Ze3wmAo5Uj\nA5sNLOURaabM7TkNGChOKrpUZEzNXiCKYO9Q2sMpVgzCaeDlIjQ453V8HNjY8e6777Jr1y4mT57M\nm2++iYmJCe+9916RzzkjIiIoX748FStWZP78+XTs2JGPP/6YIUOGULduXUaNGkVYWBhubm60adMm\n+7ime/fuhIWFFflRDXtOAy89b7zxBgDVqlWjV69etGvXDij6Oee5c+dISUnhzTff5NKlS1y/fp3h\nw4cDEBISwvDhw2nXrh0DBgwAoEePHqxcuZLDhw/TsqUejnhEUSz1f2+++aZowIBOpCSL4tMg1b+I\np3mqxo0bp5dbpKamihMnTtSp7dGjRzXWAf5iEeTCoBAy8NLx3/kgFAoljaqXw8PFurSHo5GiKoQM\ny1oDLxU7zzxGoVACcOleJKA65wTVKvD+/fsEBQVx7do14uPjSUlJ4ezZswDExcURGRnJyZMnAXj4\n8GEpPIHuGBRCBl4JAgIC8PX1pVq1agBUqFCB48ePc/r0ab777jsAHBwckMvlHD16FF9fX2xtbUtz\nyPliWNYaeKl4EpHA9UfPATAzNaJL4wr5XpOWloZMJsPOzg4AmUyGmZlZsY4TDOecBl4zfMvb4SSs\nQVSmY+38gU7XWFhYYGGR4/dZEoKpDwx7TgMvFfHhvyAq0wFIfv4vkLPnBNW+c/fu3cTFxQFw+PBh\nAI4dO4YoiqSkpLBq1Spu31b5Ypw/f57k5GT27NlTko+hEwbhNPBKEBAQAMCuXbuIj49n8eLFfPvt\nt3To0IF58+axf/9+unbtipWVFfXr1+eff/4hMjKSpk2b8uDBA06cOFHKT6COYc9p4KUiPfkSaQkq\nbatgZIqd26jsuoSEBOzs7EhJScHKygqA5ORkrK3Vj1tEUUQQhOz3crkcExP97vIMRykGXivMrRsR\ndseO4CtgatY7T12WwidLMAFJwQTyCCagd8HUBwbhNPBScXPPL8jTVAG+Hp7dAMDGjRuJiopi9uzZ\n7Nu3D4VCQYcOHUpzmHrBIJwGXnqWLFlCVhyqLl26cPHixVIekX4w7DkNvFRE3DtN1ENVDCEjYxNq\ndx4NFM+esagYzjkNvFaUr96SqTgSkp7G39VqZZeXNcHUB4ZlrYGXii43LhOSngbA5/dVGT5mz55N\ns2bNCA4Ozj7XPH36NPv27QNgz5497N+/n8DAQPbv348oipw6dYqBA1VRFPbt28edO3cIDg7m9OnT\nJCUllcKTqWMQTgOvBMOHD8fb25sOHTrQqVMnWrZsyYULFzh69CjdunUD4NGjRxw5coT27dvTqlUr\nvL29ad++PRcuXGDUqFGsWLGCQ4cO0bhx41J+GhWGPaeBl4o/nwazKyYKABMEdr/RME997nPNpKQk\nbGxsiI+Px97eHqVSSUJCAg4ODqSlpWWb9EVHR+Pi4pLnGn1g2HMaeK0Y7uVDt0hITUilUtNKavW5\nzzWzhMze3h4AIyMjHBxUcYdy29pmCWbua8oChmWtgZeKe8fvkZqQCkDg+UAABgwYQFhYWJ64Pfv3\n78+2l921axe///47oLKxBTh58iRvvfUWoihy8uTJbFvbsoRBOA289KxevZr333+foKAgLl26BEDn\nzp3p1q0bnTt35t1330Uul3P8+HH279+f7dPp5OREtWrVOHr0KCNGjCjlp1DHsOc08FIRERBBfER8\n9vvqbapnv7516xZ16tTJfp+113z+/DnOzs55+omJicHJySn7tbm5uUZTv8Ji2HMaeK0oX6M8963N\niE5Jp1uVcnnqcgsm5Ow1XxRMIFswX3xdljAsaw28VGy7F050isqfc8/DyDx1H3zwAfXq1QPIDmH5\nMpOvcAqCsEIQhEhBEG7lKnMSBOGQIAgPMv86ZpYLgiAsEAThoSAINwRBaKi5ZwMG9MvChQuZOVOV\nNysrltDLjC4z5yqg8wtlk4AjoihWBY5kvgfoAlTN/DcU+FM/wzRgQIWnneY08+7u7tmJc8eOHVtS\nQyo28t1ziqJ4UhAE3xeK3wPaZL5eDRwHJmaWr8kMqHteEAQHQRDcRVEM19eADWgmWaEgUpbOrZRk\nQtPTiJJlECuXkSCXk4GITKlS/pkbGWEiCNgaG+Noako5UzPczcyoZ2OHm5kZlkbGpfwkmmni7gju\nIFeKmBgJ+V/wElNYhZBbLoGLANwyX3sCIbnaPc0sUxNOQRCGoppd8fHxKeQwXi+SFQqOxD7neFwM\nASnJlKSe3dPcgvedXWnr6Iy1cekL76sumKAHba0oiqIgCAX+noiiuARYAqqjlKKO41XlbkoyK8Kf\nciu5dI2xQ9PT+CMshD/CVL+9FS0sGerhRX0bu1Id16tMYYXzWdZyVRAEdyBLbRYKeOdq55VZZkAH\n5KLImogwtkRFlPZQ8uVxWirfBD7IU9bZyYWRnj4YC6/+rFYSFFY4dwEDgdmZf3fmKh8pCMImoAkQ\nb9hvaud4XAxzgh+X9jD0wv6YaPbHRGe/H+lZgW7OLlquMKCNfIVTEISNqJQ/LoIgPAW+RyWUmwVB\nGAwEAX0ym+8FugIPgRRgUDGM+aXnxyePOJsQV9rDKHYWhQaxKDQIgLednBnn5Vu6A3rJMJjvlSDb\nop6xNPxpaQ+jVBlU3os+5dzyb/gKYDDfK+Ocj4/lh6DA0h5GmWFlxFNWRqh+oOZXqUn1XGEsDeTF\nIJzFQLJCwcZn4WyNflbaQynTjHl4F4BuTq4M9/Q2KJJewCCcekQUZXS7ebNEzx9fBfbERLEnJgoT\nAXbUaWgQ0kwMhu96Qp7+hISIhQbBLAJyEbrfvMLdlLIRYKu0McycRSQ1/gCylGyfAGY5P+Cb51VL\ncUQvP+Me3gOgvZMTX3lVLOXRlB4G4SwkSc83oZCp21dUNApFZfdvoKgciYnhSEwMC6vWpIrl66c4\nMixrC4hcFkx8+C+SgpnFDy5PSm5ArwFfPrhLlxuXuZmcWNpDKVEMwlkAZKm3SX6+Jd921YUnxT+Y\n15AJj+5zIJcF0quOQTh1QJERQXz4L6TG7df5mo2ux4tvQK8x858G0eXGZSLS00t7KMWOYc+ZD4mR\nf6FUJBf4OsNhQPEy6N4typubsbJ63dIeSrFhmDk1kJZwgvjwXwolmFlsdC17qcxfJSLSZXS5cZmV\n4a+m45NBOCXISLtLenLRbX0Fw6lnibA5KoJLCfH5N3zJMAjnCyRELiUldq/e+hvtFJl/IwNFZuqT\nhwx7cKe0h6FXDMKZiTw9iPjwXxAVCXrtt5nxq/WFKcsEpabS5cZl7qemlPZQ9IJBOAFRmUpyzL/F\n1r+baenH3HmdGP3gbmkPQS+89sIpT39CwrPFxXqP3x2OFGv/BtTpcuMy0TJZaQ+jSLzWwnn96XWu\nPjlVIvdaU+5Msd/j3EcDiv0eLxP9A26y/3lUaQ+j0Ly2wjn/yHyO3TvGmafPSReLP1eGmZhRrP2H\n/LuNZhvW8PzchWK9z8vG76HBdLlxubSHUSheS+HcfnV7nvcb7paMGn6Ag36VTbnx/qAnAM7NmhTb\nPV5mpj95VNpDKDCvnXBuuLSBoJggtfKVd4pfadPV9Eqx9S0qldz79fdi6/9l51xCHN88fpB/wzLE\nayWc//j/Q2SC5nPHkhDQPvaFtzjShmBkhOf77xa5n9vTZxa5j9TwcMIPHCxyP/rmWmICYx/dK+1h\n6MxrI5zzj8wnPD7/ELrFLaA9zS4V+lpRqSQpUHOMW5tKFZEnF+2Mz6VFsyJdD3DrhxkodBhH3LUb\nRb5XQQlITnpp9qCvhXDuvL4z/0a5uBPvWkwjUWFRiDwfac8iiTx+gsDlKzW2ufbVREysC++UHHfz\nFjH+RV96V+zfD6+e7+fbLuLIUZICSycy4c8hT0rlvgXhlRdO/yB/HkcXLKL6hdAYUkX1bMj6YpXz\nsQJfY+FWDvuaNanz/XeS9alhYZi5OPN49dpCj8uhbh0qfNS30NdnoZTLEeXyfNv5fvwRNpUqFfl+\nheFI7HP+K+PHLK+0cIbHh3P64elCXbvpbhyHQu31PKIc/nS5WqjrQv7dJllu6eFB1S+G4f1BL43X\n3vp+OunRzzXWP1m7nuQn6soyXUkNDSN013+Ua/0Wgolmb8SMOJV2PGjDpkLfSx/8ERrM3ZTi0QHo\ng1dWOHdd38U//v8UqY+n8UkEp5TT04jy4igU/Pgm/vYdjcIJcGX0eGSxsRrr7WrU4NkhaWultGeR\nPN2xC7R40jw7fFTr+ExsbQjdsUtrG4BrE78BUaT62FH5ti1uxj0M4MegsnnM8soKZ2C0fvYyR55o\nnmmKSgfbghkmuHVoR4t/N/FoyTLJ+hpfjeXh4r9IeljwL5uFWzlsK1fGtVVLrfd/dvS4xvorX46l\n0RLtppCiQkGjvxeTkVB24gGdjS+beWvyFU5BELwFQTgmCMIdQRBuC4IwOrPcSRCEQ4IgPMj865hZ\nLgiCsEAQhIeCINwQBKFhcT/Ei8w/Ml+v/RWXBvczi4Kb9IlyOZWHfiZZJ5iYUHf699hUqSxZn5GY\nSLl2bTT2nRwSQujO3RrrA37+FTct1zdZvRx5aqrGeoAna9ajlMkwtS9beT3LogZXl5lTDowXRbEW\n0BQYIQhCLWAScEQUxarAkcz3AF1QxYasiipz9Z96H7UWFh8vHiP24hLQ1tYKyXKFhi+5KIrc/32h\nZJ1d9WpgpPkjrdCvL4n3NJ/zNd+4Fs/33pGsi7t+g5RgzUmYshRRpra2GttcnziZuJu3MDIz09im\nNOl963ppDyEP+QqnKIrhoiheyXydCNxFlUr+PWB1ZrPVQJbu/D1gjajiPOCQmWC32Dn36BwyRfF5\nIhSHgA63ymt4H3/rNpdHjsHY0lKyvZGpKb79+2nsT9AinNFnzxPy73aN9Zp+EAAc6r1B9XGjJetS\nQ8Pw7d+P6xMma7weoN6cn2jw61ytbUqTJKWcZWUoC1yB9pyCIPgCDYALgFuuxLgRQFZeN08gJNdl\nTzPLXuxrqCAI/oIg+EdFFV2lHZ8Wz4UnxW/0fSBY83LsvT5/F7l/+zq1kSclZWs0X+TRX0sxc9Js\nqB9/67bGuvJvt6fe7BmSdc8vXtL4gxB34yYA5q7S57+Wnh6E7fqPenOKbl0kTy5d7enWqGdEZRSv\nk4Ku6CycgiDYAFuBMaIo5rHgFlVJPgsUMEcUxSWiKPqJoujnquFDLwgrz2g+nNcnYUnJBCara3AT\nE9OYM+N9EhPTCtznphfCaJra2RF/RzqCQpUvPsd/2EiCNkproq0r+qJMl1493P7xJ55fko6NFH/z\nlmQ5gMMbqgh3UgYOKU9DeX7homovqyEBUUpwCFGnThO4YpXGe2RxeeQYbn73fb7tipMBd0veckkK\nnYRTEARTVIK5XhTFLF3+s6zlaubfLKPVUMA71+VemWXFxu9HS9bg+0TQc2Q45CmztbVgxpx9fPTp\nKp37+XtFzhnsDJcc7bJN1SqYuziT+OCh5HWiQqHRNezJug0aj1PMnJxIj5RepTjUe4O08AjJupTg\nYMlyAItyrjg2bKBV+5r48BGurVpS6dNPNLYBUGZk4NigPnVn/KC1XUnw3q3CnUPrE120tQKwHLgr\niuKvuap2AQMzXw8EduYqH5CptW0KxOda/uqduxF3KY3s3OvvJHI6Iu/yct3yT9i+cSj7DmpeWgLc\nvB0GwOef5hxbVBFyBKDal1+gzJATvl/aeDw5KAj7WjUl61yaNyMhIECyztzJicgTJyXrQjZvJeBX\naS23LDaOp9ulTSCjz5zDyNQUKy+1nQugMjiwrVaVW9N+lKzPIuDn3wjasIlqo0ZobVdSyJRKtj6T\n/rEqKXSZOVsA/YF2giBcy/zXFZgNvC0IwgOgQ+Z7gL1AIPAQWAp8of9h53Dg9oHi7F4rD2LU94VX\nr4ew6O+TTJ6m+TC+bm0Pdv53A7lcmae8jmXOx/F063aqfSn9X+fcuBGyOOmzubA9e4nxlz4WSAl9\nin3t2pJ1lp7ulH+7vWSdYGKCUiLCuqhQkHA3gMtfjpW8DuDBH39i5eVJnWlTNLaJu3aD6uNGa1V0\nlTTmgoAQV7qhTYXSmHVexM/PT/T3L3ic2H239nHvWem7AA2qlfc4ZNRXWxjUvykX/IMYNljzob4U\nfaPaZL++On4CDX7RrN1Mj4pSU9LcnjELz+7dcKj/hlr7i4OHAtB4+ZICjUmUyyXN8YI3bcapsZ9G\n+9jn5y8SvHkLDX6dp7X/lJCnBG/+lxrjxxRoXMXFMGtPFHKVXFSws+JN98KZcQqCcFkURb/CjuOl\ntRA6+eBkmRBMyDxiEXK+vAt+7s2uPTc5fvK+1usuXw0mXZbXQLyKec5HYmxurlU5kvz4iVpZja/G\nSgomgGPDBjRc8JtknZShelpkJAE//6rRTtanbx9sKmrOn2lbo1q+gikqlQQuW1EmBPMDm3IMMffI\nFkyAoIQUrj8rvggW2nhphfNKcPFFFSgMK2/nXYF8P7krvhWcmTf/sMZr3mzgQ3h4PIOHr8sum2GX\nY7/q+e47ePaQdr1KC4/ATmLfaWxhQXpkpKTix65GDZ5fUPcnFeVy0iWOs+7MnI1jw4YaPUzuzJqr\nUUMbd+MmZg4O3J2tWThDd+5GMDKizg9TNbYpKYaYe+CYIf0j9CiudI53XkrhLKynSXGzLsA0z/uv\nx3Rg/Kh2arNjbn7+/YjGeuemjXF6swHypCQUKS84LxsbcXX8BMnrzv7vY+7MVl8Ou7VvK2l+d/Xr\nSZz7aKBauSw2jnJvtZScOZ9fuEitb6Tvf2PyVBzq1uH6xMnUnPS1ZJu46zcI27tPqya4JKhubs0Q\nc498292IKvnZ86UUTv+goucx0QcLRi9g+dTl2e8zlEqOh+ccsTg7WfPtD7sxNzOhQg1phciiX/tQ\ntXI5EhPTiI1TCeAGl+M5fcbFkxwUjLFV3jNGi3LlcKhXj9Dde9T6bHvsID7/663zc/j07kXbY+qa\nYe/ePXm0ZLlaedy1GzxYuJiUp9InZLKYGBAE6s35SbI+/tZt7OvWwczBASsfH53HqW8+t/DgLXTb\nTz6MKfnZ86UTzlXnVpX2EACIDotm0LRBDJ4+OE/549hEQtNylDSzfniPLduvcuGE9AwC0LC+Nzdv\nhxEUHAOAkQAjnVTLTMHUlBuTpyAq1G1wq37xORZu0i5tT7ft0PlZNLU1d3Ghyhefq5Xb16mFpZen\n5PHJrWk/4vfXIq33izp9hqSHjzQKbxYP/1yS6camX6qaWTHE3ANlAXWhBwJLNu/NSyeccSnF796j\niwbbxcMFW0dbDm9Q31MeDIzhn4fm2e9792gAwJHj0gqsd7rW5dzFx/zwU04CpZbGqrNSE2sr3lzw\nO0datpG89to46aVl5Andg2VHazBouDFJOurCkVZtqfbFMLXy8AMHsa1WVeN9UkPDCNqwidSnoVrb\ngWrZG3XqNF56CFqWhTECQ8w9aCM4SNanJCUS/CCAWcMG8ui2upVQcoa0k0Jx8VIJ56G7h0rkPou/\nXszCMdKeHy/S4aMOLJm8BFm6jPSUnLPAFJkcyNmDWlma8cuCIzyLlLakGTmsNUMGtSAlJcf0rpyJ\n6uOxquBFg99+kbyu2pgvJQ0nnZs00mn8qraNpfvW4AzdcOF8LH281cqtfX1xaa45QJhFeTfKd3o7\nXwug5CdB2Fariu/Aj7W2KwjGCHxqrt3/Ii46CktrG775azVHt0pHafAPLznfz5dGOENiQrgdpt3y\nRl+M+HkE3QZ3I/ShblaH3QZ3IyNd3Vh65Z0cIwM7Owu+HtMBBwdp43JzMxPmLzpKxLMc4V3gmKO5\ndW4qLUDljQaTsU3dEH6IhMBGrF5L+Np1auV21aVnMU2zlpPfm5LlxhYWGg3X/b8YhWBsjJmjo2R9\nFslPgrg79xeeHT2Ge6eOWtvqyjAbz3wFc8m0STi7lefiEZVRy5Cp0kvu4IRUolNLJuX9SyOcW69u\nLdH7VapbCY/KKi1eSqL2MI+elT2xtrMm8GZgHgUR5HUza/tWNcLD49m4WVqhdXD3lxw8kjdDlqNx\nzvXnP/5E7RrTHnFc2d1TrfzSz7PVysoP7I97f/XZqKKEzevVAYPVygAuDJQuB4g+exb72rXUyp9u\n24FbuzYkBwVrdWl7tHQFd+f+gt/iBXh066qxna68a+2qOrfM0LxNiXsehf/xQ5iam2NuaUW3/pqf\nD6CyXMHzC0+KPDZdeCmEMyYlplTuKwgCf379J0lxSfw5IX+f8ZpNatK4k/oMpxJQ1X+1bwVn3ula\nl03/SpvYDfusJXUa5bh1/emUE/On6bpVEoMUib+uvj8qiEOzkampWlnUXfU0evIrVvj1k06VeLLb\ne1T4UD1y39NtO/Dq+T4P/vgL6wrSmtnoc+cRFQpiLl/Gb/GCfMd777cFBK3fqLXNEHMP3OTqz5XF\nkmmq2AChgQ+p5deUQd9oX2pXlSmoHZ6ARZRqZZCaoD3igz54KYRz2xXNQa2Km+HzhuPq5crwucNZ\n/ePqfNvXbVGXOxfucHzLcSJDcrR7K+/kHNb/uvAIPd6th0KhlOqCW5e+45gG66LObzZVK6s65st8\nx1VQqo0eqVZ2bHhDjDuq2xNHnT7LW3ukDeNlMTHEXrlKO4mjmixSQ8MQjI1p9Ncf+Y5LnpxMclAQ\naRq8ayqYWmg9t3weofLB+PRblSF++JPHWNlojt5gKUKdyCTMnuddrofeLFZHK+AlEc6k9KRSvb8g\nCFzYf4GBU9QP6jVRsU5FynnnPebYdF+lwZ36TVcuXnqCs/cE5HJpDeCeeyMZ+7dqz7XSJUeb+udI\ndWP4igP7S3qw6BLmMmWvugFE2J69+H78kVp51ZHDJftwbdlcslyZkcH9hYtxqCdtTpiFLFY3Jcuj\nJcsxsbbGtUVzych9n1t40tFI2hE9OSEBeUYGJ3b9y9h32mGSuVro0Fv9OQFsBIHa4QlUikhAlPgR\nVZSA5rbMC+d/N/8r7SEA4Orlyt/f/J29/4x9pjkEZa0mtahQswIA105cyy5Plcs5H6UKVt2qRRXi\nwn6mYm1p29nRPc5x76hq/2MppNLbTnXfioOkc3A++OMvtbKnW/OeX4rpRijT85rbyZ8oEWV5vwaB\ny6Qd16W8Rr5q1U6yLcCx9p3ofN0fwVg6vIsyM7lt5SGfauwDVLPljclTiL1ylfToaLx7543NmzVb\nKiWOwCKfBnN4ywYWTR6DQp5Bz6Ff8ttuzSE+a6bKqR2eQIWw/EOXhmW6/hUXZV44H0ZKOxyXNJXq\nVOLzWZ9jZWvF5l83c3DdwTzLVk3UalqLHX/mCMndqDiiM3KMFELuzeCfrer7T2+XRBbPezv7fS/z\ni9mvD0gsbVv8sw7hhS/n4zV5o78rlcmIyrzKrbN/N0cwyzszNJ2jrnw71LiFWpmxQoF3OWkjiNCd\nu2l/UloI7i9QLV91iQoPYGJtjWOD+vj9tQhzF5c8dUPMPTTOljuXL8bVw4vHd28xcdEKzC01p6qo\nlZpB7fAEjOJ0zzWTGFW84T3LtHDKlbp9eCVNn3F96DOuDymJKfy3TPvMfvP0TZp3b86aGWuyy3Y/\niCEjl9nYWy2qEPhM/WDc18eJL8bmhCMxy8yx0nLbZrW2EwZ+xpxO3fOUvag5Nba0VIsT5O2tfl5p\nVDGdyyPH5Im20ELinlen/MBoDeeBri3VhTmLLN9QZYb2z/f5+Ytcn/QtyowMtdkSkNxb7lyhUtwd\n+XcjRsYm7NuwSuOxCIAzquWrEFc4BY9YUDOjAlCm/TmXn1lOYlrZCT78IqlJqaQkppCalIpnFU8E\nDR4a62ato/3/2rNgzAJm7ZqVXT6oNiCq9i6/bG1CNctlvNO1rtZ7Zvl73p0wn5pz87pZRZ08hetb\nrbLfZ2lKtRG6c7fGcJhZfNykJQsWzcepUf6uic8OH8Gtg7TTNsCRFq1pfWAPJjY2GtskBwXzeNUa\nak76GmNzc7X6oTaeiFqOR+ZaqjSwAAAgAElEQVR+OZhOHw6kXvO3NLZxFQXKRRQ9abKpuSmVmkn7\ns76y/pwxyTFlWjABLG0scXZ3xquqF0smLyE1SfrX9+NvPsa9kjuzds0i/HFOxJaVuWwqxve6gP8V\naQ+NKnWnZb82yfwBqPiV+v7v1vS8M0R+gqkIMsO9yv+0tgFY/t92nBr5EXftBlGnVIGwj7XvLNnW\ndqe6IX4WCQH3aH/mhEbBVGZkcH3iZEzt7bCvVVNNMLvYuDDE3ENSMEMe3uO38Spl2YSFyzUKZp2E\ndGqHJ+hFMAEy0jOQJRdPONYyK5zrLqhbspQ0W+ZvYdE47UbcWXhW9iTAP4Cjm7XnE3Gv6E5YYI4i\nIbeRwg/fdaN1J3Vn6A/erw/pqiXgOhdVhjKLcq5qbmEt/lmv9d5ishFics7srrxsjeKe+syUm9sz\nZmVHW3Co/waurVqw4P0PaHdor1rbM70/xGrhr2rlAAl3A7CrUV3rvUK2bMWuZg1SQ8PyLGM9TM0Y\nYu6BV4b62e3OFX9yfMcWvKtUZ+wvizm+Q335DVA3Po3a4QmIyfq37nl8qWBZ7HSlzAqnUpQ+Aywp\nRFGkTe82dOzfkdvn8zcb7P5Zd6o2qEpkcP5KIo9KHjx9mNPudESOSduJA3nj8YybuJXZP74P5uo+\nleILezYz57yKEaUMxFyROgVrJUc7teHCwMHcnPoDSXE3wVb7vk9K07p0ymRECUufFlukDQMS7tzF\nrmYNjfdICLjH84uX8O7VE0tPzzx7ZXdTM7oZuWi8ts17vUlPy1mxtHm/T556L1GkdngCypTiCzZe\nXJRJ4UyRFS0784sE3yu4Q68gCLh6upKRnsHBdQdZNX0Vj29r/4W0sbfBr4Mfe1fuJT46nujQaI1t\ny3k5MKGbyqPkQUxCnhl04Zrn7DpflT/+PsH+w+rxa39zVf1Y1J4ymYwjOUGuH/zxFzM/HZrzDCZK\n7i/OGza0/eljeLzTjapfjsDxUy9M39a+dZByqL75pnr6m/B90oHWDjVugZVvBY39JweFcGfGLOxq\n1sDI3CxPkLFhFh50f0EwFQo5hzav549vx3H+0F7snV3o1Ff9eMlHqRJK+4ji3RqZmqWglB9HlqKf\nZXJuNCdRLEW2+G/Ra38+1X2Qy+SYmBX8cWs3rY2btxsuni7cPncbpVKJkRb70Cr1q1ClfhUAQu6F\naGxnZmHG3D1zCXsUlm3Du/WRJb0qp/LlAGfgATRtzYjPWzP7l4NMGp9jBO5OFC1tlJxOMiL8+B4c\nvdw40+cjvlq5FNszZ7FMSSHVygrByAhzF/UkwOmRUVi4ap6Nsu/T/X3C/9PuF6rMyOCNxi3g6kW1\nuoQ7d3n7ovZkTTX/24f1C2aJn9l6IMhA8cLWMuzxIx7cuMqtC6cZ+4u0OWXd58koZcVrIGBskk5q\nvMpDSpZpOPTk0jaqtR6k1/uUyZkzNlXzAX9h2LZoGwfWHSA6LJpZg2Zx6ZB6HB1tuHiqvsi1m9Vm\n64KtLP56MZt/ld7b5Ma7uuqYIuS+ZiH1qOyRrSRKSJdx9bm60Ewa35Gf5uWdmUZaquLP+vzYCtvq\n1eh83Z9bDRswasMaUnNFTQiRcKSOvysd1/ZFonao7GgPa9F6+g8bwS0pwQy4JxnjCEB+xpq4G6oI\n88Ejcs30qI5HhFwr0I2/5+yrPSpW5uKRA5KCWSc6SbV8LSbBNDUPQ5b8H7Lk/7IFMzfpSfq3/y6T\nwqlveo7sSbdPu3H34l1GLxhNxOMIokKjuH9Fe3Q8KVr3as2A7wbQZ1wfNv6s3fg6C+9q3qyavkpj\nvXtFd8KfqAT0mgbLo949GxIYrt3dKkuTmht5kroLV2qobnah8szYQR3OnkQWF0faM/X9tFSYzYR7\n9zUqf5RPTUm+9AybkLwhQwXgsxfOLUd3a82Ho3OW1Ye3bODrBUvztKmSoVQpejKKR0chGF1Blvwf\nyTElH1CuzAlnQIRuv+qFodX7rbC0saT5u82Rpck4uvmoVqGRopx3OWzsbQh/HM6HX33I8qnLObXj\nVL7REz6Z+gltO2gOvpw7osLKO8YohLzG2FUruzJyzIo8ZS/mWAnZqu4gULWXugF7WugzrWOVwszB\nAQu3cpzo9p5kvZhpFnigQWNsKmkOl3mwWz1smrlh0i3HnnaIuUcewbx+5gSTP3wXVw8vIp/m6Aty\n28FWy1B5iZhH69nuWlBgbHwze5ZMT9TdRC8m5KZ+h1LWjBD0nfg2Pw6uP4h7BXccyjng7ute4H2p\nUqlk+ZTlVKpbiUp1KlGxjuYvpib+/uZvPp+lHqtnUC0lucMcxMal4viCs3buINS5Cd9/kIB5v1Jj\nwjhJp2VRqSRszz7u/fY7Ffr+j8pDtfsxZpERH4+pvT3BU4/hM72tqmybakZXpKZh0ScNTHX7TrW1\ncqSKIu/z3Lvqj4W1NRWqSS+J6zxLzNcqJzA4kEo+0oYB0ojI0w+jlBf9mKVut/HZr4tqhPDaC2cW\nCrmCZVOWoZArqNagGh0+6oBCrsDYRLecnKIoEhsRy9ZZWxmyYEi+7ed/OZ8xC8cwpdcUftyqOY/I\ni9HkA59EE5LYgLq+UTjZqs5JNAloQbj/+0KsK1UkYN6vGm1iU8PCsPTImeHO/q8fTWduRXHDEkVq\nKsaWlghOckza5GhIFSft8F/emyarc5zQnU1M6WmsOjtVKkSMjFWz7q/jhtH/q+9w9fDKc18bQcA3\nPEHj6uSnRT9x4MQBqvhWwdTElPYt29O7m/bogyZmKaTEaj+TliL0WQzxiSls3nuWaaP6qNUbhLOY\nWf3jajyreNLhww4s+XYJQ2cOzf+iXJzbcw5ZmozWvVprbbdmkRN9BoVhYW2hsY2tmRkfVMk5x7vy\nyJ0V+6piaWnGvMGqpbA+hDP+9p3s88W46ze4MvYr2h09KFmfmydLN1PeakC2za5R9TSMa6vGK09M\nJGFROo5fuiHYqH5kcgsmwOZNclLj7uLpfFPSfatWmhwhVvpobfLcyUwbO401W9fQrnk7zEzN8HL3\nkmybhYnZY1JiCxfuJjg8mvmr9pKaJsPGypx5E/urtdGncOqSZcxCEISLgiBcFwThtiAIP2SWVxQE\n4YIgCA8FQfhHEASzzHLzzPcPM+t9dR3Ms8SC74WKg4FTBtK6Z2tkaTKGzhzK9VPXkcvkiKKITEPu\ny9w069aM1r1ac/fCXWK+1hxBoUOXWwTf134GmyiT4R+do8G9H+qIpaUZKak545jsXPRszLkDVDvU\neyNbMK9PmKyKMyshmAC+Q/pgVtcIUQm4yrMFE8BjyUqcvnHJFszhlp55BPPv7yeTkpSIlX1NNcGs\nnaLyEnlRMEPCQ4iNjyU8MpyMjAyOnT3GZ30/o5JPJY2CaWoemr2HLKhgbjugMv6fv2oP9wPDEIDv\nv/xAUjABUuL0l5ks35kzMwWgtSiKSZl5Ok8Do4FxwDZRFDcJgvAXcF0UxT8FQfgCeEMUxWGCIPQF\neoiiqNWAM2vmXHd+HdHJmg/uS4sL+y8QHRpN2z5t2bpwK027NKVqA+2hHbOIjYxl/ez1DPxuILZO\nOUqeeUPn8fWSnFi2S6ZdoMZb3/BWO81LrawlblKqOZOnrKV/vyY0aqA64J+c0I7A9MJpLJXpMozM\nNYc1cdyzj/t2dri20uxpkptz/QbSbH1O1IhBth6Y5PpNi4l8xu9fj2TU7N9xds+roa0drh5ZPSEp\ngW37tlGvVj0a1G7AT4t+okvbLjSo3UDjGIyMrpBWAGXOsfO3ad24JlPm/0P9mr5U9C6HX53KrN5+\nAs9yjnRood1hPAsLW1eqvqUyiijRZa0gCFaohHM4sAcoL4qiXBCEZsA0URQ7CYJwIPP1OUEQTFCl\npHcVtdwoSziLa0kriqJGj5GCsmLaCgZ9PwhBENizYg/dPu2m87Xr56yn38R+zP1sLhOW5bW8OXW8\nDXGRCTRudQ83d+kIds5WFrzrm1PXtsvvHNs3Ovu9puVt3LUbxF67RkZwCIJSxLRyRRzq1s1OeHS4\neWs6nD2R7/gvjxzNm4s0JyrOiEsmYuNJvId3yS7L7dYll8Of343hy9l5P2c3EVwi1IVSoVRgbGRM\nSmoKKzav4EnIE1JSU1g8c7FaW0FQIks5iFhAN8Mp8//hxzGqueNRcAQJSWlU9S2PjZUFC9bsY9SA\nLvn0oE7W0rZEhFMQBGPgMlAF+AOYB5wXRbFKZr03sE8UxTqCINwCOoui+DSz7hHQRBTF6Bf6HAoM\nBfDx8Xnz3sN7/HVS3ZtfX6z4fgVterfB2d0Ze+fCpXTLIv55PFePXqVN7zac3HYSx/KO1G2u3dUr\nC/9D/vi9rf55iaLAxfNN2DSlGb8dls4EBjColghIz5C5hTP67HnuTZnG9h3bad9COg3h2atXad+q\nFd4D+lF5mG776hfd0nKzv54fna/nuP7lFsyJvbtSo/0KBg0rn+eauonpKJPUtaSHTh8iPCKcBnUa\ncO3ONfr3lF5GmlrEkRp3EaVCN9vZGwFBrNt1CmtLc77/sjdrdpxgwPvadQMFpWaHYZiYW5f4zOkA\nbAemAKuKIpy58fPzExduXsiFx9KRx4vKrbO3UMgVbFu0DfdK7nT6uBO+tX3Zs3wP3T/rnn8HOjK9\n33Smri96xqzn4c8JuR9C/db1Jetza3AX/nmcL4e3AVTmbn1HneXgv4ULI1q3SRO8lqrPSi8Sd/U6\nDg3qZb8P338Qh3p1sXRXxYbNLZRKhYI7/udx962Es5uqXhChTnwqylT1WL9t/9eWY/8c03p/E7NE\nUmLzn+mzmLZgs6Rm9eqdJzSo5atzP2oIAhWrt8Pawhkhd2RvGzuwdyh5ba0gCFOBVGAielzWDvp5\nEBkK9Q+ruFj67VL6TerHhjkb+GzGZyjkChJjE3FwlQ7VXxDW/2FCvxFFj+LwddevmbdXOoXeJ7XN\nEUSVsmTqtF3s2naDx1H6MXvs8MlATMdJR3vP4kirdrQ/dZRDTVvx9nlV6ofmlvbUVlpnt5kxpB/f\nLc1xYxNEqCWxfK3Rtgad+m1k/uAGmjIKYmr2hOTYW/mOfc/xK5zyv8uoAV2xsjTHwdaKx08jcXWy\n4+Cp6/Ts1CTfPqSwcXDHu0JTTAQdzsEFATy8i184BUFwBTJEUYwTBMESOAjMAQYCW3MphG6IorhY\nEIQRQN1cCqGeoiiq/2zlws/PT/x4jv5C7xcGpVLJnfN3OLHtBLYOtpTzLkez7s04veM03Qbrvq8E\nuH3+NrWbSqd3LygHf1pLx8nSS7pBtRT8MOsIv54IBTMzuFQwm+H8qPPxR3hPGK+xPmz3Pjze6YKt\nkSl9TXO0sD41PAi58zTbrcxXAdaR6kLZ7P1mnNtxTvMAxPPIUqQXXPGJKdjbqmyIs2bGHYcvcfD0\ndRZN/ZTz1x7QvKF2/1EpBEHAzftNXJ0KbkySB0+fEhHON4DVQFZk5M2iKE4XBKESsAlwAq4CH4ui\nmC4IggWwFmgAxAB9RVEM1HaPsiCcAEnxSSTFJpEhy8CziifLpyynw4cdqFinIjERMTiVlw4kVVoo\n0mSMz3Q7QyZTCaieefvUMUzs7TTW2wom9DXLCfJ1dt8umrV9G8FCde75opfIolWLWLxmMbtX7qZy\nhcpq/RmZZJAWL+1+dvbKPR4ERdCkXlVm/bWd1XNHAJCQlEpQaBSXbj7i0w/aFvgZ7Ry88PRtjAm6\nGZzoREkIZ0lQVoRTE4vGLcLFw4XkhGTCAsOo2bgmH4z6QLLtgbUH6NS/k17uu+y7ZXw24zPJuvBH\n4cwZOkcv98mPzpfPI0hEhR9u5YVcoeSfDTJCnwQxbrLqeMlEgJqRyShzxeQ9dfEUdx/cpWaVmrRq\nklehZGoRTUrMRUQNDvYjf1jOou9zzAs//moh34/8gErebhgbG/EoOAJLczM83LT/eBoJRlSs0QEr\nC3vJ5E96xSCcJcujG48QlSKV61Vm28JtxDyLQUTMY0G05fct9B6te+LawrBlzhbOHNTuJ6lvHL29\naJoZ1b1DrBsVy6tmmV41PBi/PIS69YxwtoGq4SrTPSFDRtysSQwJf8rmP9Xd60zMY0mJ0f4MX0xb\nRmSCksHvNcLW2pKWfpqjKbyInZMPnj5++p0NC4KHN4KR0csvnPUb1hc/mfdJaQ+jyJzcdpJdi7fz\ns5ajEF2Z0X8GoxeMxtYxr3dKdFg0M/rP0HBV8dL58nkc/lMlzA1+EMBXU+oAUD1dQeSTFNZcVC2r\n9/zVmHkTfqLFxdMoRn6Tfb2x6X1S4zS76b3R/Ss+Hf4bY7rp7pNpZGRCeZ83cXasAGXgu5xNeU8E\nE5MiCWeZiIQgVxRffNqrx69iamZKneZ1iu0eWbzV8y18qvsgS5Oxe+luMtIz6PuVenKf/Ljnf4+x\ni8dy6q9TvDXsLaxsc5ynoy5EgbR+qNixnTsfas0jOTEBn6qqWSzLS+RMoCkxcTEYGxmza80ZHK2U\nKBqrlq9K+Qnk6dLhQqbO/wdLCzPGDurOup+/5I0a+QumvUtFPL0aYpzb+rQsCSZAelr+bfKhTMyc\n1epUE7/4XT0HiL5Y+u1SGnduTMClAP43LseSUN9L0CObjtC+r3rM1iMbj3Bu7zm8qnrxydRP8u3n\nzK4ztHg3x1Tu7O6zhDwIofvg7iR/MIWflKUX/Kz/tDMo8KaWvZzeDTJ4HvucroO6MuR/Q4h2VSlo\nJneJR5l+BVmqenSAcbPWcPlOCAPfb86nvbQrb4yNzfCt0R4rU80xbnXFr2t3/pw1k+qVKmNnW/T+\n8sXSCsHZ9eVf1laqWUkctUj7uVpRSI5P5s7FO3hV8WLtzLXYOtpiZWdFelo6olKkebfm1G5Wm02/\nbCLobhDfrFQtxURR5NiWY7TrozkfSG6m9pnK9M3TdWp7YFMw+5f9ptUa6EUGDV2IvZMTbN/OsQcP\naNu24JrJQiOK4OfHEwsL0meuYMrPUxjcdzC+Xr4AGJvISY3fr3ZZevevWDewK4N7a/8/dHCthIdX\nA4zFgvn/n7pwkXXbtnP55k2qV6pEfGIiF65eo0Orlmz8YyFKpZKYuDjWbt3G5Rs3OXXxIkEXtBzf\n6AtTUwQ3j5dfOL2re4vjF2s+Tyturp24hr2zPU7lnVg3ax3O7s54VPKgRqManN55mp4je6JUKNm/\nZj8WVhY06thIbS8IcGb3GVq8o5txuNq1u84QFjMEY/kten6m/gVNSUxh8vuTYexY+C1HoJs0acKF\nC8VjWQXAtGmwZw/cuaM6XDcz49421ZfbxDyKlJicez9NdGTitB94r70ffbpKZx4zNrWgUvV2WJhY\nS9ZLIZfLiYmPp5yzM8MmTebPWTNRKpVMmDmLci7OTPxiOL8tXUafd7pzP/AxW/7bw4APetG0ocow\nvsvHA9m3Lv/0jfpG8Krw8gtnjdqVxdlrZhCfnkJsaulHeU+IUR2Y2znZEeAfgL2LPbHPYqnVROU2\nNfn9yQhKAQd3B5p1bUazbs0wNjEmKT4JG/vCL5nOnXyLBo3OYWGpbim1YOQCAu9KHxePHz+ezp07\n8/bbb0vWF4lGjVR/Hz1SnaUC7b3dmf/zsOwmk3/ZSHJaOv/r8hbNG6pHIPCq1Bx7Ow+MyN/5IHLI\n55Rb+jeyjAyWrt/I0g0bSExLJyY6mhNbN6NQKGlQR2XgMfybb/m0bx8a1auXp49b9+5Rp3rBDRD0\ngdLYhAxRICVDiVMFr5dfOP3qVRX992r2dtCEUoQouRGRMjmRaenEy9KJTIknLUP/Ub1LG+8Eb3r1\nUE/mk5vp06czdWrRbXuzefttiMuVOzMpCWxseBYRQScbY9b+nDdpr4m5BRWrdcDC2JL8mDhzFlbW\n9ixY9jdtmjWlQ6uWDPmwL+GNmuJ9TTrrd3EjCsZkCAIZIiTIBKKSFTxLykAhQoZS9X0rCO+3rPT6\nCqc+SFZCZAZEpmWQIMvgWWoi0cUQILgonN19ls3z8w/FqXfq14cs44OYGHiW6Qxvbs72WRN4r3tf\njMSc2fDeo0f4eFfG0gzOXPJnyfoNXL11iyrVm1Kz8QBmDqxSrMNVGBuTrhRIU0BsmpLwBCVJGQqU\nStCS96jYKKpwlomjlNLE2ggqmkNFc1PAFLAC3ArUR7TciHi5ksh0GZGpqUSmJJAsK1xKOSn2r9oP\npRG9pWNHOHZMtZx9litKRXo6oaO+p9O6/3j45AlDPvqQDq1aMnPBIjb8uQyAFo38aKFDVrIsVLOW\nESkKiEsViZMpiEySI1eCXNT1pKT4s02XJK+9cOoDFxMlLiZQ2cIM7M0Azf6isQqBSJmS+Aw5kWmp\nRKYkkpAm7VydReuO+vU31Jm5c1V7TtkLvpKVKzOyWjVGzv8lT/HOFcvyvFcaGSPDiBS5SEqGyLMU\nJc+TFMiVIgrxRa/UV0uw9MFrK5xd+3/P5r8mkZom48HjMFyd7YmMjqNh3SpYWphx6fp9GtWrJnmt\nUiliZFS4yAqOxiKOlgLsOQHLdsL+hflec8fuWr5tio1Ll6BePZWmVqmEatXAxITYv5ZzMuB5Phdr\nFriG08dya8wUZHa6OROISiV7t62lffferPv7Z3p8OBRrOzssLKyIjgzH2bU84aFBhAU/xq95Wy6e\nPoxv5RqUc/ci5MkDvH2r8jToEV4VKvM8MoLAB7dp1EJzHtGywGspnM+i4vByd8HSwhwba0tcne1p\n23sSx7bM5qsfl2NuZsrMiQOYu/hf3qhVkYePw3geq9Ii+994wL5j/vz792S1fsdNXMSvc/IGcV61\n5TAWDhXo+3bemEOdFm7B0jp/xQlAOQ2p3UuM69dVf48dg6Ag+OQTjIuQk9LlyjlsgwOpNKAbq8f/\nkKduwYzxjPruF7Vr5nw7gm0nH7Bz0zLKlffi/KmDhD99wsAvJrF/x3ocncvRrdcAPLx8uXvDn8Yt\nO3D1wkmeR0VQoXINtq//mx79VLGBjx/cgZ299uj5ZYHXXiGUxa9LtjNuaA/JurR0GWampqTLMkhK\nTsW1iGFOAJZtPMBnH+rmvfLByMX8u117evuSJjQ6Gf97+ac71MZvP45j7BTpfJ4F4eaVc9Rt2KzI\n/egbg0JIT2gSTACLzMh0lhZmWFrox2cyMEj3EIpPngTp5Z76JFkixEiB+0jUj1a8LAqmPihzuVJe\nF/xvPNC5bTkn3a1pSoqn0dqVWLpw62oxWja9AhhmzmLkfrg16XKRut7qEcuPnb2hcz9LMz3+yxKJ\nBcgU3btdHb764TcO7d7Eo3u36fhuX+wcHKlcTbeIha8rBuHUEblcgUlm3pQX4+Bu2HGcI6evE7rp\nIBX7d2Vov840qFMZN4dU9h3xp663eibopXPzN/QfP30ZEZGxrF/0NR/37cm6TepZxEqDsBjts+aL\n2uyPPhtFk1Zv06RVXvNCD6+cOD2P7t/i0K5/2L9jPR269aZeo5a06vBOnvY7Ni6lVr1GVKslHZXw\nVcOgENKB4+duYmxkRM2q3lhZmuNUuy/ePj6M+LgdQz7qhLWVKtdJYlIqtja6aWClGLfOl/Tg1ezf\n/y8r533OW01yfFD7fjGPTTu1h4wsKQ5eDiE1TdoHd9N+1U7JzRnaNlKdZD6PjMC5XHnJ9i+SmpKM\npZVqGZ+WlsKhXZs4uH01ERHP2HIsgNSUZOZN/RJ3rwoMGfN9nmvv3b5KdS1R4EuaV8R8r5rov7dk\nTWBi4hJxcrDlu7lr6NLWj8q+7gz/5g8+/7gLHVrW58ffN+J//SHd2jfi/JUAbG0ssbW2JC4hmb9m\nq+e8LAzDv/mDit5uHD59jTmTB2Hm8Aa1vbTMSp5d9XLforLzzGPJ8jl/PMLNwwuLzKRGfTvr1+90\n56ZlvNf3M5RKBf9tWc27//sUAIVCgbGxMXO++4KPPhvLur9/5ptZfwNw5cIJGjZRGXE8j4rA2VW3\nH4miYmFmTOfGr4BXil/9mqL/HvWzraLS4v2vqFzBnaXzRtF/1M+0bf4Gjva2VPRxo0kDldeCKIr0\nHDKTjAw53do3on+vdoya+jcrfhmjt3EEBoVTqYK7Wrm24xsprKv2IjlFf2aBheFOUCwPnsZJ1m0+\naIwy0zo8OSmRO/s+xMnFjW/nLFVre+HUIbVlblG4d+sK5dy9cHQux65/ViCTpXPu+D5+Wb6LMQO7\n4uFTkQk//sHlc8c5/N8/TJypOcGUPnCxt6Bl3aL5c5aNPadQPEGYfL3cWPP7eL6YvJgenZtz9Mx1\nls7Lu9cTBIHty77LU6ZPwew+05HLx1YQfvhTtbqHmanmdSX5QeEiuesTTYI5qn8nFqw9wKb9xiiV\n8HYLGwZ/sIufJkmneQiPt2f5gpkMHvWtXsZVvU7Ovj5rRv2g/3AAfl62k7AQ1Wy/bf1fODi6qHeg\nZ+ytzYvcR9mYOd+sJ/rvmlXaw9ALh7qN4X7vDkz8aSX71k6nao167PrvP4b266yX/tv0/ZHjp0rA\nk1+CkMhErjyQDvKcnpaKuUXB99u3r13kx68/ZeAXk3ga9EhtH/my0riWGx5O1sWbn7NE0CXEfRlm\n9h9bMPLuzrXbgZRv68eIT7qTdH8rrZrUpry9nKH9OjP7jy2S1wYGFyyf4/FNU/Qx5EKhSTD//mWq\npGAmJuSfHqJ2/cZsOnSLLj0+pnHLtwm8f5v3W1Zi2/riS2pVEjjbak6IrCtlQzh18JAvTbL2UWnp\nMhav3sPhU9fo+8Uc3uo5EYBJI3qjDPmP+rUrUfcr6fi7RhqSgPy1dm/BBxS6l7mzfyr4dYUkKSVD\noxLo8YM7fD5eOm7ShqUFCxFaz685larVZsfpQHr2U0VaGN2vLav/nA2ofgSyKAsrPm2YmRRdtMqI\ncJZdjpy+xpAJC5j400pOX7zDrXtBBDwMYcmcLzm5TbeI68OWVybQfKJk3dxv1feiujChf322bS1+\nB+w0mZwjVzVnzvb0UQ9LkkU5T2nn6qcFWCz8vv4Ybu7ezJv6JZ+NnsrZY/sA+H5MfwJuXkFUKpn+\nVeH+D8s6ZWPP6ecn+h1QQWYAACAASURBVO/ULWpdSTBzwT+MHvwuVpYWrNp8iA6tGvA0PBqlUknL\nxgVPUPTOTHsy5AreMFnM3G8H5KlTKAVc6vQm9k4hBa2Yj1c0zZgAD+5ep2rNehrrAXq3rcGWYwHZ\n71cu+okE83dxkO9h4HDpH6z8WDRrIvaOzriW9yT8aRDJifF8NGQcTi4Fc5IvTt5rUbHI6Rh03uxl\nJtD1B0JFUewuCEJFVImMnFEl1u0viqJMEARzYA3wJvAc+J8oik8KO8CS4MMRcxj16XucvHCL8q6O\nfDvqf4SERfHH6j1M/EKVE8XH0zWfXlRM2VyBH/sE8eGIOew7epm4u5v5aaCcmPAMqly0gnQZfDYD\nniegUAqctG5M3Xe3kZSuxMa8EOeCoXvZfPI5fT7Ub6TppFQZR66Eam2Tn2AC2YK5acXvnD2+nwVr\n9mXWqAwsPuxYl2k+Vai+bLvOYxv5Tc6KRRRF1i/9BXMLSxb8NIFnYcF8Pm461rZ2WNuq/D1fVgqy\nrB0N3M31fg7wW2YC3VggK9PMYCA2s/y3zHb5Y1b0vJjamDxbFRoxMSmV2/dVXh5rtx5l+m8bmTP5\nU9xcHTA2MmJgb5UDrreHa7Zg6srYdRU5cz2CocurMnXsR8Td3QyxidQdOoTW33+B557TRLf+HC7e\nASA2PoFKT69Ru1oFzE0Kv4Ix92nJzjOPeT+fAGC6EJuYzs4zj7UK5qP7+efJfJG+n46mYRP1jNgb\nD97E59NRiEolU0b1K3C/giDw8dCvsLax48tv5tCq/TuEhjxGEATmfPsFcTHRzJ0ygt+mjy1w34XF\n1b7oyiDQPe28F6o0gDOBccA7QBR6TJ7rf/o/eH5FD4+kTq8hM6noU57uHRqTLssgMjqO3t1bZruC\nFYX09Ax2HrzA3+v2cmDDLEasqszcDx9jb5UZBaBr3jNTpSiSevMhpsbGmNXO3K8VwTrqbHQ1opLy\nnhOPH9SZUydO4O6umzXMrl27GDF2Ks0+3EmT2iJVfDR/J548vMvJ21WwtTWnR7uCzfT+t42oW0WJ\neT5HgN99+RHdeg3Ar0U7bl+9QP3G0mnudWHpb9No2b47xiYmJWaT27y2O64OFkVe1uo6c84HJpAT\n9sUZiBNFMcvA8ingmfnaEwgByKyPz2yvHbPiOxh2d3Pix6/7c/HqPTq1bkj/Xu2KLJhxCcnM/mML\nl248oGGdShz55ydMjEX+HvwwRzAz1O1PHwSGYmpijJlZZlQ7TamcdeRFwQT4ZeV+Lgam0rRVewYM\n+oyAgHtqbe4G3GPCpG/p+eGnpNvXpeVHOxHlGfjf0T4e3yo1MTM3JyGp4OFHT5x5zPZj+X/lZizc\ngG/l6pw+vJv6jVuhVBY+vtCQsdOo+YZfiRrLO9jox+c33z2nIAjdgUhRFC8LgtBGL3dV9TsUGArg\n4+MDRsV31rlohspSZEIBl6kvcvDEFaytLPhx/kbWL5rAqQu3MTM10WyCl5KTzCYrE3P1yl459f/O\nBqvCL4F2B9XUWv/NbFXArXvP4Z6aYseMFu98Rgvg8AWVQEY9C8PdqwI3HwjUrZp39lTI5RibqD4j\nlc2sKU8eBeBbWfe0fOU9K+JVTuTaxVP5zobu3hWxd3JFJkvnq8HvMnHmnzx+cIeW7bvrfL/SwlQP\nxyig28zZAnhXEIQnqBRA7YDfAYfMZSuAF5C1SQkFvAEy6+1RKYbyIIriElEU/URR9HN1zVS2WHsX\n+kGKk7R0GcMmLaJj64Y096tJ9cpeODvasmfNNO22sfY22U7V9rZ5FRNKhbxIgikTbAsc5FgTrd9U\ndeTuVQFATTBvXT2fLZi58a1cg5RVi3S+T79uSlo2FLMF8/2WlZBpCahgZW2DmZk5C9YeIDQ4EL8W\n7UhLTWHGhME8eahSf8hkZSuAeCV3zVnAC0q+wimK4jeiKHqJougL9AWOiqLYDzgGZE1FA4Gdma93\nZb4ns/6otv1mHuy1zwQlybnLASxevQelUmTWos3M+24wgcERCILA79M/16mPLf+dxm+DRC5NhRKj\nA4uo0LJwSgqZYMuELd4s+Seenq2lIwQWBFMT1WzYuYWSe4c+yS6fOEylYKrToKnGa62MhGxBKSg7\nTgeyebducYgat+yAhYUVFpZWfDd3Oenpafz6wxiSEuI4dXh3oe5fHNSooL/AYUWZfycC4wRBeIhq\nT7k8s3w54JxZPg6YpHOPZcSMb9C43/j5r618MbAb7w76gR6dm2NrY0klH90ULM3fG09sfBK9u7eE\ntxpA0zo5ac7/396Zh8d0tQH8d7JLZCUhEpEFIUiDWGPfq7V0o7rQli70o6uWqlaLtpYutKXtZ291\n1VLLRy1BbSVBqF1CEiIRRGLNfr8/ZkYSc+9kksxyMb/nyTN3zrl37ju5895z7nvepaAI/pqNJEFk\n3wWVkm/t6UAyLgqKigr5dGkiy5bM4ftvplfqs0rj5Q77d29h8tjnWLNsMdO+McLRfujLBNdvXGkF\nfephP67mXGb8yIqVYryUmUGPBweTdTGTk0cPVOrc5sDR3nR+PepxQoiP17xJq4Q7mwmQJImIri/R\nuW0zusXcR0yrCAJql2/H0nH+QjbhXV5kzJjX+PBF5ZEG4JnXPmPR569XSs4zeXXZl16duF3/kJHf\nnn6dy1pMP530Cp17DSS6vfHlAfNyb/LT/C84m5LIu9Pnl3+AAsmJRwmuX/nZT0FBPs/0b02bDj15\n8vk3jA7Qzkw/i59/YPk7WoABMSXZHapqrVWfcl7cBXnlO0ybgtgdB6gfXIfzF7NpEFIHLw83rt/I\nvZXZwFiu38hlyqyf6d2lJV3aKefF2Ru7h6k/rueP20LUjpxIJaJhkFHn+jO5McXFRdjZGRdmF78z\nloS47WSkpZJ0/BAuNdrgImmSK3d/4DGiWnUw6nOMJen4YcLCK+5FpeNA/A7W/vEDr7w7kxvXr1os\nONoU+HpVo32TEnnvPuUsLoD0DWY7V35BIQ07Ps/ksU+zYt0u2kc35o0XH67w5zw9ZibdYu6jY5sm\n5OYV0DS8XrnH7B7+IW3m61cBG7kgjJu5eSwapezDChrFJCON0Me7cmrLiQrLDLBoeS69Ylyp42ee\n6tgH9+7Ey8ePoBB5v9q/HutI79+2lfs50yaMJCy8GY0jW9Ikqo2pxTQL97epV8bh3VLrnJbDztEs\nH1tQqFlzdHJ04ItJL/D0I93Iyy+olGKO+2ghjz3YkWcH96R+cJ1yFfPAkdP8tXWfrGLuTnTnxs08\nqrk4czJZPiQLKAlIrx3Auc+XVFhmHT2anzWbYgJEtmxPUEh9kpOOyfb3/m0be3dtIfWU4ZvL21Pn\nUqduCBH3teZKtn75ejViikiU0qhPOc2Eo4MD/x5LZsW6XQzso0lCvHrxpAp9xqTPlrJ+6z72HUqi\nfy/j7uZBrZ/hvogQenfWz8AH4JSbgEd1R+p459MgWMERQ9jz52mNVXbrXyvINWA9LQ/vmpYp7RAc\n1oiUJH3nB4CW7boQFNqQFx7rZPAz2ne9n3/37uKfv9cz8/0xlXLvu5NR37QWIOcYXJOv4nynkJV9\njQYdR3Dp358V99m4PYEeHfQ9V976KYSsEwuY977GqPNnssbIsnndH3TtU/GR3poc2vcPTVu05dyZ\n09SpG6LXP6RnE2b/sAHfWnWM+rzlS7/lwUHP4uhoGi8cU9EoyJvwumX9w+++aS2Ap/FeJ2pk/MeL\nyLyYraiYhcV2PP1lIAUF+ivwN/IFh5MuIeo8D8C28yXl002hmJPHDicj7UyVP8dY8vLzWLSigC2H\n5J9Bf9pwmM8+eJWNq8sPmbuac5mHnnyRff9sNbWYVeZ2xTQF6lTOO5g5i9fw0tN9Ca2nbGU8cOgE\nTYLh/q6t9PpcnSReHWjHdyMSAci6qblEIx6JMYl8I8YtwK+OcZZhU+Di4oKLizMFBooJe9fwpceD\ng4jbscngZ7lrK4O16diTXxbOZv7sKcSutX7SM3OhXuV0NW6aoxb+3n2IJcs28cMfsTg42OPkKO9Q\nsfdgIi0j6zOun7JltmfTbISAlcmaGUTSGcHIyYZ/uMZS20fCTlTuUcbx6pVy94n8fFKZ902i2vB4\nn2KGDXBSdFR4a/LXAHh612DahJEc2v8P094dZfA8g58dw9MvjaWwQFMW4vy5VI4ciDPiW5gePx/z\nxIyqVzm975yU+0+NnkmnNk1pGh7Mzj8/VXReOJWaQctI/eld9nUHiool3BuVOObfFJ5I2txKOWmb\naRlhohjBSgbBnE1JYuF3Mw3u43DzBt6H97NueD/Z/uD6jTmfrnxTahgRRWBwfZKOH+b+gfK5mErj\n5ORMr/5DAJg/ewpXr2STnHiUS5kVS5pWVdo1Nk8GBvUqJ4BH1f1GzcnkL37ir637mDdzDKs27KZF\nszDZ/U6nnufk6XMcOZ6q1zdyQRjjf6lH5/EOHNu1EoCbeLL+tGbmsPKXBbRo20XvuB++m8mQXuYv\nBDSom8YYFVgvjKfe+JDJY5Xz9RRWc+Xvb/9gdW6u4j6pScd45+XBZF08L9v/5PNv0LnXACKj2/Pn\nz/NY+l/jko2/88l3tOnYk+D6jfGq4atoKTY1kaHGe5FVFHUrp7u8EUENLPxlA706t+Dw8RS27zlC\nv57KSyspaZls3LafB3u2lu2/mJVDs/Bglu3WLKWsT9YoptfxQ7dKG5Rmz/aNPPXCm/y0/l8KCwr4\n4I1nWLdiqQm+lYZfF3/F0AejKSos5NfYslPR3gOeMHisZG/PV0s3EPu/ZbL9kdExRLZsz88LZpN6\nWr4MopeP5v/Qq/8QXKq5ceJIQoXkj9uxkXph4Rza/0+FjqsMISaMQrkddSunSrlwKYdHH+hAwuFT\nvP7CQ/ToqDwFf/2D/+Jbw4Pnn1BOKl3TR1Mp++FWlzh1s8RY4za8PxN3xertn342+da2g6Mj73+6\niIJiTXqBrIvnmfHeaAZ1j+DbT98jLfUURYUlQd8H4rYzb9YHXMnO4uDeXSz8aipDH2jJvFkfkper\nMdoMGvYflqyOlw0Ta92hRxkHgqjp8hnbu/WVj511dqnG4GfH0Kv/4/z+/RylfwkA1VzdCAtvyo7Y\nNdy8YXw90LadeiMVFxuMprkTUOc6Z2kKb8J561fXSjmbSb1AvzKlAMvj4RFT9PxoS3M2/SKB/jU5\nm+WEr3shzo7Ft9Y0K8rbLz7CtG+Ns1z+vM6OpOOHCAtvWqliQ8uXfkvamdMU5Ofx2nvKuWmLiorI\nzrqg6B9bUJDPB68/w5QvfzR4vsKCAhwcHbmScxmXaq44OVW91IEp6NY8EHdXZY+2u3OdszQOlS+p\nZ0o8PdzwjRzC9LnL2JNgnF/r97Pf5LVJ3yn2148ZAUCgTz7OjsVsyShZ0zx5RD4Mauak0bLtQ41M\nMxl3SGMR0i3iX7lm1GFlcK3uTtyOTbcUUynhl729PS8N6sLubfK+0o6OTkz58kcunD9n8HwOjo6k\nnj7JnGnv8PkHpqtjU1UMKaYpUL9yAjiab15vDC9PmIOnuyuTXn+Sd0YPpnWUYUPVq+9rFPKhEVP4\nfJJ8IZ/hb85i2oRnb72XcCAnt+RyBNSTNy5duazvZ7rgyyk0iZJ/nr2d61pbja58wo1c4823+fl5\n7N62nt4DnmDxqpJli1q1lcO1ftt8jNYdepCbq1/dGyD35g2+/2Y6v/9guPxCUEgDxn001+zVwYzF\nx8P8o/edoZx+pg1rMoa/d2tGgy8XrqJuHV+EELz8TPn5a3bGH+Xqdc2z23q5LAho0nSeOXeBZwdp\nSuBJwoGVyQ1u9e/asg5Xt+p6x13KzODDWfqGn+eXLS7/C2npEi0hSRrldHYU1K5p/GONk5MzDWWK\n01b38GL7ptWKx73+XD/id+g/OwO4VHOlbafe9Bn4BBlp+tZstdKxmfnX4e8M5QRw0P+xmpunRs9k\nbWw84142Pko/L7+A+TNfUez/etFqXhk+gLdHPYqHNq/QytMlijmwQyhtO/eWPVZXM+R2ijdXbNlg\nyP3F+Is/eKi7fla7RV9/zIT/PM73yy/z41r9Z+t5X8hn5o/p9oAmJ5BMTp+mUW2IatWBxXPk5W/f\n9X7cqnuQcS6Vi5np5U5zrY2ri2UydqjfIKSjOB/SN1pEnjmL1zBq2APkXL2Op7ubUcfMXrCSvQcT\nWfT5awgDK/1rNsWRnpnFiCEaBbyODxuTSxaxU0+fJCikgdLhRnHtumD3vgv8b+FztGzflcbNWuLm\n7oG3jy+SJJF1MZO5M9+ldYfuxO2Ixdm3G03Dihn83BicnJy5ngurtmju2xUxGK36bSH1w5vROFLf\nBvL+q08j7Ox4/9NFiv+fxGP/svCrqQTXb6zqUoC9Wwfh4li+UfDuC7Y2xLUUyDlsVlkGDp+MEAKP\n6q4s/sK4VCLnL1wm5+oNcvPyiWysH3mhI7+gkPgDJ2kfXWKRLW2d/fLjtxg+5j3ZKe2a35fwwCND\n9dp/XjCLx58rGakLCgW/bxSkpZ4mICjklnKlX4St8RqF6xJdTG1tdNqKWHtOJZ3Cv24wQ/qU/Bbi\njwj27Uvihaf0CxWtW7GUPgPlw7fy83Jxcpb3Zlq2ZA7unl7lrpW+O/qJci241qJpiA9hdTyN2vfu\nt9aWpnr52QYqw7HEs1y/kUtW9lVWzJ/I8nnvGqWYefkFDHv1My5dvkrD0ACDirlmUxxPjZ6hqJiX\nMjPo1HOArGKeTjzCgi/ln19PnSh7syoo1CiYzudUh04xATaX2h7QtZD8vJv0iSl7k46OkDh/QP6c\n//3iA8Vg6jMpibLtAI8OHUWPBwYp9usY9bamvKEag6yNVUxTcGcpJ0BN0y8sN6ofSLdB4/Hxcjdq\nf129zj5PTqRZo+By8/+cv5DNb6u38cygHrfarks+Zfb5etp4DsTtkD3e1c2dFm06y/a980nZpRpX\nF2hSH7y9nBjUs0ThnBxKppIujmVSaRBafQPeMl994gz57ICLV8VxMH4nq39bpNd3Ufu8mH42RfZY\nnWPD1Lefl+0HqBMYDMDJoweZNmGk4n6WpkMzf4ue785TTmef8vepBLtXG1/o9dz5Szw0YgrzP32V\nN18yHGPZ58mJeLi70qtzC/p2KwkR25hS8pwZvzOW/o8PZ+jIt/SOj9+5mTOnT1JUpG+8+XnhbLZt\n0M/Z2qx+MV2bZ2NnX6KcD/coQpJAkuCh7mXLRES2lA9H27p+Bb8s+lKvvbq7J936PkKrmG56fW06\n9iL35g0cnZSDoWe8N5oJ0/6r2K+jdoDmprdpjbwroKWp4WGa4ANjufOUE6CGfhykJQn0r8n3s94w\nKo+tfy0fDp9I4YmBXW613e4FlJGWqpgFb/3Kn4hu3433ZuqPYhlnU+jYUz8CZHD3Jixbou8a16/D\nZfp3yNZrX/7jdwzurp8xL+vCeQY/M5rLWRf0+hbMnsKurX/Jynw4YQ81fGtzMH6nbP/YDzUKP2+W\n4ZqsAUGhvD11Lgfit5e7DmpuosMtk96lNHemcroYVyvTnFR3K99z6XLONQ4fTyU6ssT6euJGcJl9\nUpKOGxxlbp+2lubVifIRG5169SdCxikh62Km7LNiTLe+TJw5v4wPLsDAIZqpp7eP/v/75bc/pq+M\ngQo0OYKEEOVGlJxNTpS9idxO2069eeSpl8rdz5wE1DTOam9K7kzlBAhQdiRXA2fOXcDbszp71pSd\nLh/NLFHqXxd9SVBIA0Xr5Q/fzgA0Tgm3c+7Maa5dzZE9buTYKQx4fLhee93g+rKeRJ169qeaa3UW\nfv1RmXZhZ8eRA3FIxfrLKfYODhQXFRkshRAQFKpoOAKY9PkSmkS1NhiGBpp1UGtSOlG0JblzlRM7\n8Kx88mJzUVhYxNeLVlO3jv5oE5teNjdSz36DEXbKl2DQM6O5dCGDdl30b0RxO2KZPXWsXrskSdjZ\n2XMlRz8x94G47Wxd/6deO0BYeFNGvKKfujPivlZ88+l75Ofpx2gmxG3jQNx2Rfmf/c87t4ojKXHj\n+jUmzljAql8rV5rC3ESFWW+WdgcrJ2ZbWqkKDg72+Nbw5Pb1Y0k4cjWvxGJaUJDPLBnlKk1a6inF\niI6Q+o2p7q5v1tct8F+VUc6o1h1JPaXvTTRn+juKMqxd/gO9BwyRXbuMuK+1wVAud09vnJ0NT/9b\ntusCQGbGOVmZrU292pb3TNNxZysnQEBfa0ugx6B+Hct4wUjCkZWnSwLHJUki9n/L6K4Q8wgweexz\n5ObKJ8U6n36Gvf9sZsyEGbL9i+d8wqpfF+q1x++MlfXeeWzYfxRd65q37kRRYSGFMpkCPTy9uZx1\ngZnvj1H8Hru3rQc0RiJDnDyawOZ1yw3uY2msNZ3VYZRyCiGShRD/CiEShBDx2jYfIcQGIcRJ7au3\ntl0IIWYLIRKFEAeFEPLZlE2Jt/nTdVSF0oo55a3hCCFITjxGxx7yuXZAM8o1btZSr/1KzmWuX7vC\nmeQkxWNbtuvCS29O1ms/n36WG9f1Y8S8fXwZNmocZ5P1HQhqBwTxy6LZfDROPrrm9fe/oE3Hnnz3\nmby7XZuOvcjPzyNC5qZQmk/mLiMzw3A5CkvSsqH1jY4VGTm7SpIUVcodaRywSZKkBsAmSkr93Q80\n0P69AJg/xsdVnUV3Aa5IZXPMjB4/nXmzPjRYoXnKWyMUyxV4eHpz8sgB7O3lfTuPH95PRloq587c\nXskarl+7QnOZitLbY1czccyT+NWR/z++O30+tRT6avr54x8YjHM15Qx0n016tdwpPCD7zGstAn2t\nN53VUZVp7QBAF6u0GBhYqn2JpOEfNBWwze9aEWBdi54Sm1NK1sckSeJA/A5c3dwV4y+Tk47hU9OP\nSxfkE2CBJo/PC69/INsX3qQ5PR4chIODfiDw9o2ruJiZrtfepfdDuLq5K+b9mT11rMHlnl1b1nLi\n8H7F/nEfzeXFNz/kj6XWXas0ln7tgq0tAmC8ckrAeiHEXiGEbn5TS5Ik3ZXOAHQuLwFA6ZTiZ7Vt\nZRBCvCCEiBdCxF+4oL/IXXGE6p4/b3c2SEtJYtOa33hihHJF63XLlzLqrY9knQ4ADifsBjQjliHW\nLv9Br63/4OFknJPP9v7ae5/RZ+CTeoYsgDETZvDc6Hf58+d5ssc+OvRl3D0MV3R2cnK5tW6qZgbE\nhGBnV8n8oSbGWOXsIElSCzRT1peFEGUq0GjLylcovEWSpO8kSYqWJCna19eE83s/02RGryo5kn5R\nIi+fmoz/5FuDx3V/wHDs6LFDmhFKKezq6MF45s54l2Gj9AuK16pTV3GEu3Y1h5nvj1EMmv5x3ue4\nKExdq7m6Ub9xpMHlEHt7e6NrilqLzlHqSmRulHJKkpSmfc0ElgOtgfO66ar2NVO7expQ+gElUNtm\nGRwtFzVgiC0pJTecae+O4tqVbNLTUnFxMZwd3K+23iSjDEVFhSQdl8/ZA9CwSXNGjpWPJmnWop3i\n0kxNP3+GjRqnaKSKuK+VbP5cHU2j2tBvkGFnArXj5aaOxGE6ylVOIYSbEMJdtw30Ag4BK4Fh2t2G\nAbrV7ZXAUK3Vti2QU2r6axmsPL29fTr79pQ5VPfwKlfxjh6M560XHzG4z6Bh/yEsvKli/5K5n5Cd\npVzn01DG9W9mKmcKbBLVmqwLypnUGzUzv1HenFh72USOcoOthRChaEZLAAfgR0mSpgohagC/AkFA\nCjBIkqQsoZlvfQX0AW4Az0qSZDCS2uhg64qS9j/Tf2Y5HL4aSuKlit+Bf5r/BUOGVy2zXGb6Wfz8\nlZNtxe+MpU7dENlSfPcy5lLMeysTQmWwsIJWNu8swJsjBjBznrx7nTEYykIAcCB+B87O1e74Uc6U\nmHPEvLcyIVQGMwRnK7E+rWp1RauimKCJOjGUwa6oqFA208K9iqWDpyvK3a+czj4W8SAqFs7cLLCu\nCT5hzzZFTx3QlKy/ekU/nvNepHkDX4sHT1eUu185QeNB5Fn56WZ5FAtnVp3WT4RlaTy9a8j6zupo\nHBnNzRuVSPF+lxEe5EWQn/pnEJZJwKkGqodo/szwDKoGxQRNkSG58DIdTZu35doV+RjQewU1WmWV\nuDdGztK4mTbM7HKx5dNXKJGddZG01FOK/d9/Mx1nF3VP5cxJ/QB1rIEby70zcurwagKO7pCtvJBf\nEf5ONV/x1IpwNiWJQIX6KjrGf2zYO+luplloDULNWEvTHNx7IyeAWxD4tqvyx1Rl2cTU6BRzydzp\nVpZEfbRuXOuOU0y4V5UTwMm7Sp5EalJMAKm4mMRj/9L1/oesLYqqGBATgr+PYZdJtXLvKqcOlYaa\nVZS5MycS2jCCusFVq7NyN3EnGX/ksClnJULN1DZqAoQ2jOD8OfVkErA2d7pigk05SwjoCzXLT1ad\nkG3Y6GIt4nZsYvO6P6wthtVp1cjvrlBMuBettYZw9tUoqYG10JRs5YwA1iIz/SwTZyzgxJEEa4ti\nVe4WpdRhGznlqN1dtnntmar5zpoLP/9AkhOP0jAiytqiWI2e0erNI1VZbMoph72zZgR1L8mat/ZM\nI/KL1JG+4nbmTJ9AjgrL5VmCUH8PBsSE4Op8900C775vZEo8GoJHQ4rSN6tWMQGatWjLfdHqSM9i\nSfq3D8FAEfE7HtvIaQT2/l1Vu1Z2+uQRtq5fwcKvplpbFIsRUNONATF3t2KCbeQ0mtaNa5FXUMS6\nPcrxktYgpEEExUXF9HxwsLVFsQi9W9XFxene+NnaRs4K4Oxoz4CYEAJqqivcSEKSLXJ7N6EbLe8V\nxQTbyFkposN9iQ73JSHpEikZV6wtDjVq1qJhk7vTUhsW4EHTYHUEF1gam3JWgaiwGkSF1WBLQho5\n1/OtIkNRURGR0TF06tnfKuc3Fz7uLnSMVHcaEXNjm9aagC5RAVZL4T93+jt3nWI+0LbePa+YYFNO\nk2FnJxgQE8L9bSxbM9S/bgjxO2Mtek5z0bdNEANiQnCwt/0swTatNTlODna33MgOJl3itJmfSXdt\nWUvd4Prl76hSxLFLVAAABSFJREFUQvw9iAy9N58py8OmnGYkMqwGkWE1uHojn93HMrl+U78AbVVI\nSTpe5XSa1sDD1ZHo8Fq4u+pXQrNRgk05LYC7qxM9WgRy5UY+m/ebrmxMvbBwk32WpejRIhC3ajal\nNAabcloQD1enW1PevIIiNu1Po6CgyMpSmZdqTvZ0vi8AZyd1VxhTIzbltBLOjvb0bR0EaBQ1MS2b\nxLSKPZ+eOJLA9k2reW60cgEia9Ag0JOwOp44O9oUsirYlFMFODva0yS4Bk20i+35hcWcOneF42cu\nGzyuYUQUWReVK2BbAgGE1/Oinp8HLrbR0aTYlFOFODnY0SjIi0ZBXhQWFXMyLYdzF69x7Wah3r43\nrl21uHzu1Zzw83YhPMgbR9uyh9mwKafKcbC3o3GQN42DypZ1LygsIvtaPvnZ7XCwFxQWmbZanIuT\nPb5e1Qjyc8ezupNNCa2AKkoACiGuAsetLcdt1ASUq9BaHps8hlGbPADhkiS5V/ZgtYycx6tSx9Ac\nCCHi1SSTTR7DqE0e0MhUleNtcxUbNlSKTTlt2FApalHO76wtgAxqk8kmj2HUJg9UUSZVGIRs2LCh\nj1pGThs2bNyG1ZVTCNFHCHFcCJEohBhnoXMuEEJkCiEOlWrzEUJsEEKc1L56a9uFEGK2Vr6DQogW\nZpCnrhBisxDiiBDisBDiFRXI5CKE2COEOKCV6QNte4gQYrf23L8IIZy07c7a94na/mBTy6Q9j70Q\nYr8QYrW15RFCJAsh/hVCJOgssya9ZpIkWe0PsAeSgFDACTgARFjgvJ2AFsChUm3TgXHa7XHANO12\nX2AtGk+1tsBuM8jjD7TQbrsDJ4AIK8skgOrabUdgt/ZcvwKPa9u/AUZqt0cB32i3Hwd+MdO1ex34\nEVitfW81eYBkoOZtbSa7ZmZVAiO+XDvgr1LvxwPjLXTu4NuU8zjgr932R7P2CvAtMERuPzPK9ifQ\nUy0yAa7APqANmoV+h9uvH/AX0E677aDdT5hYjkBgE9ANWK39oVtTHjnlNNk1s/a0NgA4U+r9WW2b\nNaglSVK6djsDqKXdtqiM2ulXczQjlVVl0k4hE4BMYAOaWU62JEk6J9/S570lk7Y/BzB1ioMvgLeA\nYu37GlaWRwLWCyH2CiFe0LaZ7JqpxUNIVUiSJAkhLG7GFkJUB34HXpUk6YooldLcGjJJklQERAkh\nvIDlgNUqOQkhHgQyJUnaK4ToYi05bqODJElpQgg/YIMQ4ljpzqpeM2uPnGlA6fJQgdo2a3BeCOEP\noH3N1LZbREYhhCMaxVwqSZKu0KZVZdIhSVI2sBnNtNFLCKG7qZc+7y2ZtP2ewCUTihED9BdCJAM/\no5nazrKiPEiSlKZ9zURz82qNCa+ZtZUzDmigtbg5oXlwX2klWVYCw7Tbw9A89+nah2qtbW2BnFLT\nFpMgNEPkfOCoJEmfqUQmX+2IiRCiGppn4KNolPRRBZl0sj4KxErahytTIEnSeEmSAiVJCkbzO4mV\nJOlJa8kjhHATQrjrtoFewCFMec3MZUSowEN1XzTWySRggoXO+ROQDhSgmfsPR/M8sgk4CWwEfLT7\nCuBrrXz/AtFmkKcDmueXg0CC9q+vlWWKBPZrZToEvKdtDwX2AInAb4Cztt1F+z5R2x9qxuvXhRJr\nrVXk0Z73gPbvsO63a8prZvMQsmFDpVh7WmvDhg0FbMppw4ZKsSmnDRsqxaacNmyoFJty2rChUmzK\nacOGSrEppw0bKsWmnDZsqJT/A0mijSVRjI1pAAAAAElFTkSuQmCC\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f6ac44728d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "img = plt.imread('tree.png')\n",
    "plt.imshow(img)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 11. Using covariates\n",
    "\n",
    "We can use covariates for training the DeepBiome network."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below is an example of the input files for the continuous covariates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ages</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>59.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>45.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>42.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>50.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>69.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>37.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>66.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>75.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>32.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>72.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>65.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>58.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>41.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>49.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>49.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>70.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>64.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>33.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>74.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>56.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>37.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>51.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>34.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>46.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>44.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>60.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>46.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>37.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>58.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>970</th>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>971</th>\n",
       "      <td>78.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>972</th>\n",
       "      <td>32.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>973</th>\n",
       "      <td>62.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>974</th>\n",
       "      <td>47.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>975</th>\n",
       "      <td>47.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>976</th>\n",
       "      <td>65.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>977</th>\n",
       "      <td>68.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>978</th>\n",
       "      <td>45.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>979</th>\n",
       "      <td>43.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>980</th>\n",
       "      <td>31.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>981</th>\n",
       "      <td>45.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>982</th>\n",
       "      <td>64.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>983</th>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>984</th>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>985</th>\n",
       "      <td>59.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>986</th>\n",
       "      <td>78.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>987</th>\n",
       "      <td>49.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>988</th>\n",
       "      <td>33.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>989</th>\n",
       "      <td>60.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>990</th>\n",
       "      <td>48.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991</th>\n",
       "      <td>75.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>992</th>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>993</th>\n",
       "      <td>39.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>994</th>\n",
       "      <td>49.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>71.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>34.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>48.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>52.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     ages\n",
       "0    59.0\n",
       "1    45.0\n",
       "2    42.0\n",
       "3    50.0\n",
       "4    69.0\n",
       "5    37.0\n",
       "6    66.0\n",
       "7    75.0\n",
       "8    32.0\n",
       "9    72.0\n",
       "10   65.0\n",
       "11   58.0\n",
       "12   41.0\n",
       "13   49.0\n",
       "14   49.0\n",
       "15   70.0\n",
       "16   64.0\n",
       "17   33.0\n",
       "18   74.0\n",
       "19   56.0\n",
       "20   37.0\n",
       "21   38.0\n",
       "22   51.0\n",
       "23   34.0\n",
       "24   46.0\n",
       "25   44.0\n",
       "26   60.0\n",
       "27   46.0\n",
       "28   37.0\n",
       "29   58.0\n",
       "..    ...\n",
       "970  38.0\n",
       "971  78.0\n",
       "972  32.0\n",
       "973  62.0\n",
       "974  47.0\n",
       "975  47.0\n",
       "976  65.0\n",
       "977  68.0\n",
       "978  45.0\n",
       "979  43.0\n",
       "980  31.0\n",
       "981  45.0\n",
       "982  64.0\n",
       "983  36.0\n",
       "984  36.0\n",
       "985  59.0\n",
       "986  78.0\n",
       "987  49.0\n",
       "988  33.0\n",
       "989  60.0\n",
       "990  48.0\n",
       "991  75.0\n",
       "992  38.0\n",
       "993  39.0\n",
       "994  49.0\n",
       "995  71.0\n",
       "996  34.0\n",
       "997  48.0\n",
       "998  38.0\n",
       "999  52.0\n",
       "\n",
       "[1000 rows x 1 columns]"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_csv(resource_filename('deepbiome', 'tests/data/ages.csv'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below is an example of the input files for the categorical covariates. We assume that the file contains all of the catetogories for one-hot encoding."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>970</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>971</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>972</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>973</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>974</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>975</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>976</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>977</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>978</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>979</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>980</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>981</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>982</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>983</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>984</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>985</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>986</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>987</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>988</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>989</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>990</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>992</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>993</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>994</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     gender\n",
       "0         1\n",
       "1         0\n",
       "2         1\n",
       "3         1\n",
       "4         1\n",
       "5         0\n",
       "6         1\n",
       "7         1\n",
       "8         0\n",
       "9         0\n",
       "10        0\n",
       "11        1\n",
       "12        0\n",
       "13        1\n",
       "14        1\n",
       "15        1\n",
       "16        0\n",
       "17        0\n",
       "18        1\n",
       "19        1\n",
       "20        0\n",
       "21        0\n",
       "22        1\n",
       "23        0\n",
       "24        1\n",
       "25        0\n",
       "26        0\n",
       "27        0\n",
       "28        1\n",
       "29        1\n",
       "..      ...\n",
       "970       1\n",
       "971       1\n",
       "972       0\n",
       "973       1\n",
       "974       0\n",
       "975       1\n",
       "976       0\n",
       "977       1\n",
       "978       1\n",
       "979       1\n",
       "980       1\n",
       "981       1\n",
       "982       0\n",
       "983       0\n",
       "984       0\n",
       "985       1\n",
       "986       0\n",
       "987       0\n",
       "988       1\n",
       "989       0\n",
       "990       0\n",
       "991       1\n",
       "992       1\n",
       "993       1\n",
       "994       0\n",
       "995       0\n",
       "996       0\n",
       "997       1\n",
       "998       0\n",
       "999       1\n",
       "\n",
       "[1000 rows x 1 columns]"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_csv(resource_filename('deepbiome', 'tests/data/gender.csv'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ethnicity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>970</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>971</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>972</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>973</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>974</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>975</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>976</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>977</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>978</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>979</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>980</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>981</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>982</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>983</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>984</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>985</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>986</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>987</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>988</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>989</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>990</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>992</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>993</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>994</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     ethnicity\n",
       "0            4\n",
       "1            0\n",
       "2            0\n",
       "3            4\n",
       "4            4\n",
       "5            2\n",
       "6            3\n",
       "7            0\n",
       "8            2\n",
       "9            5\n",
       "10           2\n",
       "11           3\n",
       "12           5\n",
       "13           3\n",
       "14           0\n",
       "15           0\n",
       "16           4\n",
       "17           5\n",
       "18           1\n",
       "19           1\n",
       "20           4\n",
       "21           4\n",
       "22           1\n",
       "23           0\n",
       "24           1\n",
       "25           3\n",
       "26           1\n",
       "27           4\n",
       "28           4\n",
       "29           3\n",
       "..         ...\n",
       "970          1\n",
       "971          0\n",
       "972          0\n",
       "973          5\n",
       "974          3\n",
       "975          2\n",
       "976          1\n",
       "977          5\n",
       "978          4\n",
       "979          1\n",
       "980          0\n",
       "981          3\n",
       "982          3\n",
       "983          5\n",
       "984          5\n",
       "985          5\n",
       "986          3\n",
       "987          1\n",
       "988          2\n",
       "989          2\n",
       "990          0\n",
       "991          5\n",
       "992          3\n",
       "993          5\n",
       "994          5\n",
       "995          2\n",
       "996          2\n",
       "997          1\n",
       "998          0\n",
       "999          0\n",
       "\n",
       "[1000 rows x 1 columns]"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_csv(resource_filename('deepbiome', 'tests/data/ethnicity.csv'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For using the covariates, we have to set the `covariates_info` field in the configuration for the path informations. If we don't specify the `covariates_info`, than the DeepBiome will train the model without any covariates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "network_info_with_covariates = {\n",
    "    'architecture_info': {\n",
    "        'batch_normalization': 'False',\n",
    "        'drop_out': '0',\n",
    "        'weight_initial': 'glorot_uniform',\n",
    "        'weight_l1_penalty':'0.',\n",
    "        'weight_decay': 'phylogenetic_tree',\n",
    "    },\n",
    "    'model_info': {\n",
    "        'lr': '0.01',\n",
    "        'decay': '0.001',\n",
    "        'loss': 'binary_crossentropy',\n",
    "        'metrics': 'binary_accuracy, sensitivity, specificity, gmeasure',\n",
    "        'taxa_selection_metrics': 'sensitivity, specificity, gmeasure, accuracy',\n",
    "        'network_class': 'DeepBiomeNetwork',\n",
    "        'optimizer': 'adam',\n",
    "        'reader_class': 'MicroBiomeClassificationReader',\n",
    "        'normalizer': 'normalize_minmax',\n",
    "    },\n",
    "    'training_info': {\n",
    "        'epochs': '10',\n",
    "        'batch_size': '50', \n",
    "        'callbacks': 'ModelCheckpoint',\n",
    "        'monitor': 'val_loss',\n",
    "        'mode' : 'min',\n",
    "        'min_delta': '1e-7',\n",
    "    },\n",
    "    'validation_info': {\n",
    "        'batch_size': 'None', \n",
    "        'validation_size': '0.2'\n",
    "    },\n",
    "    'test_info': {\n",
    "        'batch_size': 'None'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "path_info_with_covariates = {\n",
    "    'data_info': {\n",
    "        'data_path': resource_filename('deepbiome', 'tests/data'),\n",
    "        'idx_path': resource_filename('deepbiome', 'tests/data/onefile_idx.csv'),\n",
    "        'tree_info_path': resource_filename('deepbiome', 'tests/data/genus48_dic.csv'),\n",
    "        'x_path': 'onefile_x.csv',\n",
    "        'y_path': 'classification_y.csv'\n",
    "    },\n",
    "    'model_info': {\n",
    "        'evaluation': 'eval.npy',\n",
    "        'history': 'hist.json',\n",
    "        'model_dir': './example_result/',\n",
    "        'weight': 'weight.h5'\n",
    "    },\n",
    "    'covariates_info':{\n",
    "        'continuous_variables':','.join([resource_filename('deepbiome', 'tests/data/ages.csv'),\n",
    "                                         resource_filename('deepbiome', 'tests/data/weights.csv')]),\n",
    "        'categorical_variables':','.join([resource_filename('deepbiome', 'tests/data/gender.csv'),\n",
    "                                         resource_filename('deepbiome', 'tests/data/ethnicity.csv')]),\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can use the same `deepbiome_train` function when we train the network with covariates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:109] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------1 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 1 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:529]     Phylum_with_covariates: 17\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Family', 'Phylum_with_covariates', 'Order', 'Genus', 'Class', 'Number', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_4\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input (InputLayer)              (None, 48)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "l1_dense (Dense_with_tree)      (None, 40)           1960        input[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "l1_activation (Activation)      (None, 40)           0           l1_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l2_dense (Dense_with_tree)      (None, 23)           943         l1_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l2_activation (Activation)      (None, 23)           0           l2_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l3_dense (Dense_with_tree)      (None, 17)           408         l2_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l3_activation (Activation)      (None, 17)           0           l3_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l4_dense (Dense_with_tree)      (None, 9)            162         l3_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l4_activation (Activation)      (None, 9)            0           l4_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "covariates_input (InputLayer)   (None, 8)            0                                            \n",
      "__________________________________________________________________________________________________\n",
      "biome_covariates_concat (Concat (None, 17)           0           l4_activation[0][0]              \n",
      "                                                                 covariates_input[0][0]           \n",
      "__________________________________________________________________________________________________\n",
      "last_dense_h (Dense)            (None, 1)            18          biome_covariates_concat[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "p_hat (Activation)              (None, 1)            0           last_dense_h[0][0]               \n",
      "==================================================================================================\n",
      "Total params: 3,491\n",
      "Trainable params: 3,491\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 1 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 860us/step - loss: 3.9321 - binary_accuracy: 0.4984 - sensitivity: 0.5425 - specificity: 0.4402 - gmeasure: 0.4605 - val_loss: 2.9473 - val_binary_accuracy: 0.6062 - val_sensitivity: 0.7418 - val_specificity: 0.1624 - val_gmeasure: 0.2985\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 147us/step - loss: 3.2058 - binary_accuracy: 0.6187 - sensitivity: 0.8282 - specificity: 0.1584 - gmeasure: 0.3257 - val_loss: 2.7824 - val_binary_accuracy: 0.6313 - val_sensitivity: 0.7774 - val_specificity: 0.1477 - val_gmeasure: 0.2972\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 2.9010 - binary_accuracy: 0.5844 - sensitivity: 0.7488 - specificity: 0.2156 - gmeasure: 0.3924 - val_loss: 2.5319 - val_binary_accuracy: 0.5188 - val_sensitivity: 0.5805 - val_specificity: 0.2816 - val_gmeasure: 0.3891\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 2.5460 - binary_accuracy: 0.5609 - sensitivity: 0.6715 - specificity: 0.3167 - gmeasure: 0.4512 - val_loss: 2.0768 - val_binary_accuracy: 0.5437 - val_sensitivity: 0.6155 - val_specificity: 0.2316 - val_gmeasure: 0.3697\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 147us/step - loss: 2.0199 - binary_accuracy: 0.5797 - sensitivity: 0.7366 - specificity: 0.2412 - gmeasure: 0.3984 - val_loss: 1.5948 - val_binary_accuracy: 0.5375 - val_sensitivity: 0.6086 - val_specificity: 0.2316 - val_gmeasure: 0.3682\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 1.5290 - binary_accuracy: 0.5422 - sensitivity: 0.6514 - specificity: 0.3034 - gmeasure: 0.4186 - val_loss: 1.1354 - val_binary_accuracy: 0.6313 - val_sensitivity: 0.8266 - val_specificity: 0.1330 - val_gmeasure: 0.2843\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 142us/step - loss: 1.0185 - binary_accuracy: 0.5938 - sensitivity: 0.7475 - specificity: 0.2352 - gmeasure: 0.4029 - val_loss: 0.8776 - val_binary_accuracy: 0.4875 - val_sensitivity: 0.4456 - val_specificity: 0.4531 - val_gmeasure: 0.4310\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 150us/step - loss: 0.7537 - binary_accuracy: 0.6141 - sensitivity: 0.8487 - specificity: 0.1085 - gmeasure: 0.2297 - val_loss: 0.6346 - val_binary_accuracy: 0.7000 - val_sensitivity: 0.9924 - val_specificity: 0.0326 - val_gmeasure: 0.1265\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 145us/step - loss: 0.6461 - binary_accuracy: 0.6766 - sensitivity: 0.9746 - specificity: 0.0281 - gmeasure: 0.1011 - val_loss: 0.6201 - val_binary_accuracy: 0.6812 - val_sensitivity: 0.9779 - val_specificity: 0.0179 - val_gmeasure: 0.0659\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 142us/step - loss: 0.6332 - binary_accuracy: 0.6719 - sensitivity: 0.9759 - specificity: 0.0140 - gmeasure: 0.0454 - val_loss: 0.6172 - val_binary_accuracy: 0.6875 - val_sensitivity: 0.9924 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 3.7779526710510254!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_0.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_0.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 4us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.01014399528503418!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6250655055046082, 0.6825000047683716, 0.9927140474319458, 0.0039840638637542725, 0.06288907676935196]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 12us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008768558502197266!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6461045742034912, 0.6850000023841858, 0.9927536249160767, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 4.2871880531311035\n",
      "[root    |INFO|deepbiome.py:193] 1 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------2 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 2 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:529]     Phylum_with_covariates: 17\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Family', 'Phylum_with_covariates', 'Order', 'Genus', 'Class', 'Number', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input (InputLayer)              (None, 48)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "l1_dense (Dense_with_tree)      (None, 40)           1960        input[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "l1_activation (Activation)      (None, 40)           0           l1_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l2_dense (Dense_with_tree)      (None, 23)           943         l1_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l2_activation (Activation)      (None, 23)           0           l2_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l3_dense (Dense_with_tree)      (None, 17)           408         l2_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l3_activation (Activation)      (None, 17)           0           l3_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l4_dense (Dense_with_tree)      (None, 9)            162         l3_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l4_activation (Activation)      (None, 9)            0           l4_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "covariates_input (InputLayer)   (None, 8)            0                                            \n",
      "__________________________________________________________________________________________________\n",
      "biome_covariates_concat (Concat (None, 17)           0           l4_activation[0][0]              \n",
      "                                                                 covariates_input[0][0]           \n",
      "__________________________________________________________________________________________________\n",
      "last_dense_h (Dense)            (None, 1)            18          biome_covariates_concat[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "p_hat (Activation)              (None, 1)            0           last_dense_h[0][0]               \n",
      "==================================================================================================\n",
      "Total params: 3,491\n",
      "Trainable params: 3,491\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 2 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 838us/step - loss: 3.6259 - binary_accuracy: 0.6969 - sensitivity: 0.9424 - specificity: 0.0910 - gmeasure: 0.1923 - val_loss: 3.2920 - val_binary_accuracy: 0.6187 - val_sensitivity: 0.7830 - val_specificity: 0.0814 - val_gmeasure: 0.2176\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 3.0394 - binary_accuracy: 0.6016 - sensitivity: 0.7299 - specificity: 0.2760 - gmeasure: 0.4412 - val_loss: 3.1496 - val_binary_accuracy: 0.5750 - val_sensitivity: 0.7164 - val_specificity: 0.1425 - val_gmeasure: 0.2718\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 2.7264 - binary_accuracy: 0.6313 - sensitivity: 0.7870 - specificity: 0.2323 - gmeasure: 0.4075 - val_loss: 2.7493 - val_binary_accuracy: 0.6062 - val_sensitivity: 0.7624 - val_specificity: 0.1006 - val_gmeasure: 0.2409\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 2.3219 - binary_accuracy: 0.6141 - sensitivity: 0.7447 - specificity: 0.2808 - gmeasure: 0.4431 - val_loss: 2.2977 - val_binary_accuracy: 0.5562 - val_sensitivity: 0.6540 - val_specificity: 0.1845 - val_gmeasure: 0.2987\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 143us/step - loss: 1.7781 - binary_accuracy: 0.6031 - sensitivity: 0.7360 - specificity: 0.2661 - gmeasure: 0.4280 - val_loss: 1.6655 - val_binary_accuracy: 0.5875 - val_sensitivity: 0.7360 - val_specificity: 0.1198 - val_gmeasure: 0.2560\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 1.2913 - binary_accuracy: 0.5953 - sensitivity: 0.7205 - specificity: 0.2888 - gmeasure: 0.4316 - val_loss: 1.1251 - val_binary_accuracy: 0.6125 - val_sensitivity: 0.7830 - val_specificity: 0.0621 - val_gmeasure: 0.1522\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 142us/step - loss: 0.8740 - binary_accuracy: 0.6297 - sensitivity: 0.7765 - specificity: 0.2563 - gmeasure: 0.4330 - val_loss: 0.7479 - val_binary_accuracy: 0.6375 - val_sensitivity: 0.8748 - val_specificity: 0.0394 - val_gmeasure: 0.1247\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.6667 - binary_accuracy: 0.6922 - sensitivity: 0.9284 - specificity: 0.1078 - gmeasure: 0.2590 - val_loss: 0.6085 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.6258 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5880 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 146us/step - loss: 0.6193 - binary_accuracy: 0.7141 - sensitivity: 0.9869 - specificity: 0.0258 - gmeasure: 0.0725 - val_loss: 0.5836 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 3.2922184467315674!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_1.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_1.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 4us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.009334087371826172!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6025831699371338, 0.7200000286102295, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 10us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.007701873779296875!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6123847365379333, 0.7200000286102295, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.793949604034424\n",
      "[root    |INFO|deepbiome.py:193] 2 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------3 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 3 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:529]     Phylum_with_covariates: 17\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Family', 'Phylum_with_covariates', 'Order', 'Genus', 'Class', 'Number', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input (InputLayer)              (None, 48)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "l1_dense (Dense_with_tree)      (None, 40)           1960        input[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "l1_activation (Activation)      (None, 40)           0           l1_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l2_dense (Dense_with_tree)      (None, 23)           943         l1_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l2_activation (Activation)      (None, 23)           0           l2_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l3_dense (Dense_with_tree)      (None, 17)           408         l2_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l3_activation (Activation)      (None, 17)           0           l3_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l4_dense (Dense_with_tree)      (None, 9)            162         l3_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l4_activation (Activation)      (None, 9)            0           l4_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "covariates_input (InputLayer)   (None, 8)            0                                            \n",
      "__________________________________________________________________________________________________\n",
      "biome_covariates_concat (Concat (None, 17)           0           l4_activation[0][0]              \n",
      "                                                                 covariates_input[0][0]           \n",
      "__________________________________________________________________________________________________\n",
      "last_dense_h (Dense)            (None, 1)            18          biome_covariates_concat[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "p_hat (Activation)              (None, 1)            0           last_dense_h[0][0]               \n",
      "==================================================================================================\n",
      "Total params: 3,491\n",
      "Trainable params: 3,491\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 3 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 839us/step - loss: 4.0546 - binary_accuracy: 0.7000 - sensitivity: 1.0000 - specificity: 0.0103 - gmeasure: 0.0397 - val_loss: 2.6657 - val_binary_accuracy: 0.6812 - val_sensitivity: 0.9517 - val_specificity: 0.0833 - val_gmeasure: 0.1345\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 2.3091 - binary_accuracy: 0.5922 - sensitivity: 0.6765 - specificity: 0.3752 - gmeasure: 0.4519 - val_loss: 2.2779 - val_binary_accuracy: 0.5500 - val_sensitivity: 0.4948 - val_specificity: 0.5559 - val_gmeasure: 0.5178\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 135us/step - loss: 2.0602 - binary_accuracy: 0.6016 - sensitivity: 0.7146 - specificity: 0.3438 - gmeasure: 0.4797 - val_loss: 1.7713 - val_binary_accuracy: 0.6562 - val_sensitivity: 0.8386 - val_specificity: 0.1680 - val_gmeasure: 0.2982\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 150us/step - loss: 1.6226 - binary_accuracy: 0.6078 - sensitivity: 0.7458 - specificity: 0.2785 - gmeasure: 0.4482 - val_loss: 1.3724 - val_binary_accuracy: 0.5688 - val_sensitivity: 0.5972 - val_specificity: 0.4119 - val_gmeasure: 0.4837\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 147us/step - loss: 1.3241 - binary_accuracy: 0.6062 - sensitivity: 0.7294 - specificity: 0.3438 - gmeasure: 0.4771 - val_loss: 0.9984 - val_binary_accuracy: 0.6187 - val_sensitivity: 0.7273 - val_specificity: 0.2200 - val_gmeasure: 0.3413\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.9306 - binary_accuracy: 0.6062 - sensitivity: 0.7227 - specificity: 0.3504 - gmeasure: 0.4693 - val_loss: 0.7641 - val_binary_accuracy: 0.6812 - val_sensitivity: 0.8918 - val_specificity: 0.1680 - val_gmeasure: 0.3031\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 142us/step - loss: 0.7143 - binary_accuracy: 0.6438 - sensitivity: 0.8254 - specificity: 0.2282 - gmeasure: 0.4166 - val_loss: 0.6203 - val_binary_accuracy: 0.6562 - val_sensitivity: 0.9011 - val_specificity: 0.1280 - val_gmeasure: 0.2188\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 147us/step - loss: 0.6287 - binary_accuracy: 0.6875 - sensitivity: 0.9721 - specificity: 0.0281 - gmeasure: 0.0750 - val_loss: 0.6283 - val_binary_accuracy: 0.7000 - val_sensitivity: 0.9037 - val_specificity: 0.2376 - val_gmeasure: 0.3836\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 147us/step - loss: 0.6532 - binary_accuracy: 0.6766 - sensitivity: 0.9366 - specificity: 0.0897 - gmeasure: 0.1450 - val_loss: 0.6253 - val_binary_accuracy: 0.6938 - val_sensitivity: 0.9105 - val_specificity: 0.1797 - val_gmeasure: 0.3443\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 146us/step - loss: 0.6236 - binary_accuracy: 0.6828 - sensitivity: 0.9433 - specificity: 0.0745 - gmeasure: 0.1491 - val_loss: 0.5963 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 3.499255657196045!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_2.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_2.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 4us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.01061248779296875!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6105048060417175, 0.6974999904632568, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 12us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.009314298629760742!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6601793169975281, 0.6549999713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 4.048933506011963\n",
      "[root    |INFO|deepbiome.py:193] 3 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------4 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 4 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:529]     Phylum_with_covariates: 17\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Family', 'Phylum_with_covariates', 'Order', 'Genus', 'Class', 'Number', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input (InputLayer)              (None, 48)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "l1_dense (Dense_with_tree)      (None, 40)           1960        input[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "l1_activation (Activation)      (None, 40)           0           l1_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l2_dense (Dense_with_tree)      (None, 23)           943         l1_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l2_activation (Activation)      (None, 23)           0           l2_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l3_dense (Dense_with_tree)      (None, 17)           408         l2_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l3_activation (Activation)      (None, 17)           0           l3_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l4_dense (Dense_with_tree)      (None, 9)            162         l3_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l4_activation (Activation)      (None, 9)            0           l4_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "covariates_input (InputLayer)   (None, 8)            0                                            \n",
      "__________________________________________________________________________________________________\n",
      "biome_covariates_concat (Concat (None, 17)           0           l4_activation[0][0]              \n",
      "                                                                 covariates_input[0][0]           \n",
      "__________________________________________________________________________________________________\n",
      "last_dense_h (Dense)            (None, 1)            18          biome_covariates_concat[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "p_hat (Activation)              (None, 1)            0           last_dense_h[0][0]               \n",
      "==================================================================================================\n",
      "Total params: 3,491\n",
      "Trainable params: 3,491\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 4 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 849us/step - loss: 11.0560 - binary_accuracy: 0.3141 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.0812 - val_binary_accuracy: 0.3125 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 142us/step - loss: 11.0560 - binary_accuracy: 0.3141 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.0812 - val_binary_accuracy: 0.3125 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 143us/step - loss: 11.0560 - binary_accuracy: 0.3141 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.0812 - val_binary_accuracy: 0.3125 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 11.0560 - binary_accuracy: 0.3141 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.0812 - val_binary_accuracy: 0.3125 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 140us/step - loss: 11.0560 - binary_accuracy: 0.3141 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.0812 - val_binary_accuracy: 0.3125 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 146us/step - loss: 11.0560 - binary_accuracy: 0.3141 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.0812 - val_binary_accuracy: 0.3125 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 11.0560 - binary_accuracy: 0.3141 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.0812 - val_binary_accuracy: 0.3125 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 146us/step - loss: 11.0560 - binary_accuracy: 0.3141 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.0812 - val_binary_accuracy: 0.3125 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 161us/step - loss: 11.0560 - binary_accuracy: 0.3141 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.0812 - val_binary_accuracy: 0.3125 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 11.0560 - binary_accuracy: 0.3141 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.0812 - val_binary_accuracy: 0.3125 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 3.130079507827759!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_3.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_3.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 4us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.009539604187011719!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [11.061042785644531, 0.3137499988079071, 0.0, 1.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 12us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.009051322937011719!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [11.121485710144043, 0.3100000023841858, 0.0, 1.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.6402535438537598\n",
      "[root    |INFO|deepbiome.py:193] 4 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------5 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 5 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:529]     Phylum_with_covariates: 17\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Family', 'Phylum_with_covariates', 'Order', 'Genus', 'Class', 'Number', 'Phylum']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input (InputLayer)              (None, 48)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "l1_dense (Dense_with_tree)      (None, 40)           1960        input[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "l1_activation (Activation)      (None, 40)           0           l1_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l2_dense (Dense_with_tree)      (None, 23)           943         l1_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l2_activation (Activation)      (None, 23)           0           l2_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l3_dense (Dense_with_tree)      (None, 17)           408         l2_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l3_activation (Activation)      (None, 17)           0           l3_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l4_dense (Dense_with_tree)      (None, 9)            162         l3_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l4_activation (Activation)      (None, 9)            0           l4_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "covariates_input (InputLayer)   (None, 8)            0                                            \n",
      "__________________________________________________________________________________________________\n",
      "biome_covariates_concat (Concat (None, 17)           0           l4_activation[0][0]              \n",
      "                                                                 covariates_input[0][0]           "
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "__________________________________________________________________________________________________\n",
      "last_dense_h (Dense)            (None, 1)            18          biome_covariates_concat[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "p_hat (Activation)              (None, 1)            0           last_dense_h[0][0]               \n",
      "==================================================================================================\n",
      "Total params: 3,491\n",
      "Trainable params: 3,491\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 5 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 835us/step - loss: 8.0130 - binary_accuracy: 0.3406 - sensitivity: 0.0824 - specificity: 0.8918 - gmeasure: 0.2164 - val_loss: 4.8462 - val_binary_accuracy: 0.4062 - val_sensitivity: 0.2349 - val_specificity: 0.7736 - val_gmeasure: 0.4235\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 149us/step - loss: 3.6986 - binary_accuracy: 0.5078 - sensitivity: 0.5656 - specificity: 0.3830 - gmeasure: 0.4023 - val_loss: 2.7905 - val_binary_accuracy: 0.6625 - val_sensitivity: 0.8730 - val_specificity: 0.1161 - val_gmeasure: 0.2737\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 142us/step - loss: 3.3206 - binary_accuracy: 0.6406 - sensitivity: 0.8850 - specificity: 0.1235 - gmeasure: 0.2566 - val_loss: 2.7070 - val_binary_accuracy: 0.6625 - val_sensitivity: 0.8801 - val_specificity: 0.1005 - val_gmeasure: 0.2556\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 2.9420 - binary_accuracy: 0.5969 - sensitivity: 0.7743 - specificity: 0.2194 - gmeasure: 0.3608 - val_loss: 2.1986 - val_binary_accuracy: 0.5250 - val_sensitivity: 0.6249 - val_specificity: 0.3343 - val_gmeasure: 0.4429\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 149us/step - loss: 2.5967 - binary_accuracy: 0.5391 - sensitivity: 0.6443 - specificity: 0.3206 - gmeasure: 0.4388 - val_loss: 1.8767 - val_binary_accuracy: 0.5500 - val_sensitivity: 0.6603 - val_specificity: 0.3151 - val_gmeasure: 0.4300\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 2.1674 - binary_accuracy: 0.5625 - sensitivity: 0.7120 - specificity: 0.2540 - gmeasure: 0.4158 - val_loss: 1.5662 - val_binary_accuracy: 0.5875 - val_sensitivity: 0.7248 - val_specificity: 0.1994 - val_gmeasure: 0.3684\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 1.7477 - binary_accuracy: 0.5578 - sensitivity: 0.6962 - specificity: 0.2557 - gmeasure: 0.4131 - val_loss: 1.2552 - val_binary_accuracy: 0.5188 - val_sensitivity: 0.6249 - val_specificity: 0.3151 - val_gmeasure: 0.4207\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 150us/step - loss: 1.3291 - binary_accuracy: 0.5656 - sensitivity: 0.7084 - specificity: 0.2555 - gmeasure: 0.4140 - val_loss: 0.9460 - val_binary_accuracy: 0.5750 - val_sensitivity: 0.7036 - val_specificity: 0.2151 - val_gmeasure: 0.3786\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.9648 - binary_accuracy: 0.5953 - sensitivity: 0.7739 - specificity: 0.2183 - gmeasure: 0.3688 - val_loss: 0.7374 - val_binary_accuracy: 0.5938 - val_sensitivity: 0.7107 - val_specificity: 0.2843 - val_gmeasure: 0.4405\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.7369 - binary_accuracy: 0.5984 - sensitivity: 0.7924 - specificity: 0.1981 - gmeasure: 0.3813 - val_loss: 0.6309 - val_binary_accuracy: 0.6500 - val_sensitivity: 0.9226 - val_specificity: 0.0708 - val_gmeasure: 0.2130\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 3.3745570182800293!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_4.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_4.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 4us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.009692192077636719!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6532379388809204, 0.6549999713897705, 0.9267399311065674, 0.07086614519357681, 0.25627031922340393]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 12us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.00775909423828125!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6430562734603882, 0.6850000023841858, 0.936170220375061, 0.08474576473236084, 0.2816672921180725]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.9293768405914307\n",
      "[root    |INFO|deepbiome.py:193] 5 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:204] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:205] Train Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure']\n",
      "[root    |INFO|deepbiome.py:206]       mean : [2.71048684 0.61375    0.7838908  0.21497004 0.06383188]\n",
      "[root    |INFO|deepbiome.py:207]        std : [4.17531369 0.1514802  0.39291327 0.39344054 0.09925419]\n",
      "[root    |INFO|deepbiome.py:208] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:209] Test Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure']\n",
      "[root    |INFO|deepbiome.py:210]       mean : [2.73664212 0.611      0.78578477 0.21694915 0.05633346]\n",
      "[root    |INFO|deepbiome.py:211]        std : [4.19245079 0.15190129 0.39362061 0.39289876 0.11266692]\n",
      "[root    |INFO|deepbiome.py:212] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:223] Total Computing Ended\n",
      "[root    |INFO|deepbiome.py:224] -----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "test_evaluation_with_cov, train_evaluation_with_cov, network_with_cov = deepbiome.deepbiome_train(log, network_info_with_covariates, \n",
    "                                                                                                  path_info_with_covariates,\n",
    "                                                                                                  number_of_fold=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The DeepBiome used the covariates at the latest hidden layer just before the last prediction layer (`biome_covariates_concat` layer in the above example)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input (InputLayer)              (None, 48)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "l1_dense (Dense_with_tree)      (None, 40)           1960        input[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "l1_activation (Activation)      (None, 40)           0           l1_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l2_dense (Dense_with_tree)      (None, 23)           943         l1_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l2_activation (Activation)      (None, 23)           0           l2_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l3_dense (Dense_with_tree)      (None, 17)           408         l2_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l3_activation (Activation)      (None, 17)           0           l3_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l4_dense (Dense_with_tree)      (None, 9)            162         l3_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l4_activation (Activation)      (None, 9)            0           l4_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "covariates_input (InputLayer)   (None, 8)            0                                            \n",
      "__________________________________________________________________________________________________\n",
      "biome_covariates_concat (Concat (None, 17)           0           l4_activation[0][0]              \n",
      "                                                                 covariates_input[0][0]           \n",
      "__________________________________________________________________________________________________\n",
      "last_dense_h (Dense)            (None, 1)            18          biome_covariates_concat[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "p_hat (Activation)              (None, 1)            0           last_dense_h[0][0]               \n",
      "==================================================================================================\n",
      "Total params: 3,491\n",
      "Trainable params: 3,491\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "network_with_cov.model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can analysis the effects of covariates by checking the trained weights of the last hidden layer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|<ipython-input-61-b8f281eeb9fd>:4] 5\n"
     ]
    }
   ],
   "source": [
    "weight_path = '%s/%s' % (prediction_path_info['model_info']['model_dir'], 'weight_0.h5')\n",
    "trained_weight_list = deepbiome.deepbiome_get_trained_weight(log, network_info_with_covariates, path_info_with_covariates,\n",
    "                                                             num_classes=1, weight_path=weight_path, verbose=False)\n",
    "log.info(len(trained_weight_list))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Firmicutes</th>\n",
       "      <td>0.010485</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Actinobacteria</th>\n",
       "      <td>-0.077889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bacteroidetes</th>\n",
       "      <td>0.138430</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fusobacteria</th>\n",
       "      <td>-0.522183</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Proteobacteria</th>\n",
       "      <td>-0.380649</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TM7</th>\n",
       "      <td>-0.317337</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Spirochaetes</th>\n",
       "      <td>0.060873</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OD1</th>\n",
       "      <td>0.413655</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cyanobacteria_Chloroplast</th>\n",
       "      <td>0.028915</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ages</th>\n",
       "      <td>-0.005320</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>weights</th>\n",
       "      <td>0.012656</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gender_1</th>\n",
       "      <td>0.160804</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ethnicity_1</th>\n",
       "      <td>-0.312460</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ethnicity_2</th>\n",
       "      <td>-0.142475</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ethnicity_3</th>\n",
       "      <td>-0.007657</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ethnicity_4</th>\n",
       "      <td>0.421593</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ethnicity_5</th>\n",
       "      <td>0.308804</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  0\n",
       "Firmicutes                 0.010485\n",
       "Actinobacteria            -0.077889\n",
       "Bacteroidetes              0.138430\n",
       "Fusobacteria              -0.522183\n",
       "Proteobacteria            -0.380649\n",
       "TM7                       -0.317337\n",
       "Spirochaetes               0.060873\n",
       "OD1                        0.413655\n",
       "Cyanobacteria_Chloroplast  0.028915\n",
       "ages                      -0.005320\n",
       "weights                    0.012656\n",
       "gender_1                   0.160804\n",
       "ethnicity_1               -0.312460\n",
       "ethnicity_2               -0.142475\n",
       "ethnicity_3               -0.007657\n",
       "ethnicity_4                0.421593\n",
       "ethnicity_5                0.308804"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trained_weight_list[4]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below is the phylogenetic tree plot for the network using covariates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAfQAAAK3CAYAAABz8r3VAAAACXBIWXMAAA3XAAAN1wFCKJt4AAAg\nAElEQVR4nOzdeXgUZbr38W/vnaSTdDYSCGEJEmAgSBBFOWyCjgquiAgEQZD1AOo4OoeXUUFcLjJn\nPDoyHMZxxVFx3BAIcchBXJARJBgQIhDWsGaBbJ2k1+p+/4hpEtIhCQYJlfszl5fdVU9VPdXj1Xee\n6np+pfH5fD6EEEKom+KEikPgPAtowOcFQyhYuoLRerl7J1qARgq6EEKonLsMSn4Et63+Op0ZQrtB\nSOdfv1+iRWkvdweEEEJcQm4bnP0hcDEHUBxQthcqj/3iQzmdTkpLS5u1TUFBwS8+bmMupl9XIino\nQgihWj4o+wkUeyPNvFB5FDyVdRbn5+fTrVs3jh1ruNivXr2a/fv3A7Bv3z4+/PDDZvVwypQpzWpf\nY+nSpU1uezH9uhLpFi9evPhyd0IIIcQl4K4A2yHA23hbrwv0IXV+T//f//1f4uPj2b9/P8OGDQOq\ni/xrr71GVlYWv/nNb3j66afJy8vD5XKRlJRESEgIHTp0ICMjg5ycHDZs2EDfvn0xGAwcPnyY119/\nnYKCAnr16gXAu+++S1BQEJs2baJv377o9Xo+++wzPvnkEyoqKujevXu940ZERLBw4UJ0Oh1arZb2\n7duTnp7O6tWriYqKIiYmhqysLE6fPs37779P//79CQ8Pp0OHDgH3rRYyQhdCCLXyVIDP3fT27rI6\nbzMyMkhLS2PTpk34fD4qKysZN24cQ4YMYdCgQbhcLrp27UpKSgpXX301Bw8eJD09HYCpU6cSHh6O\n1Wrlueeew2azMXnyZG677TZ27tzJihUrANi2bRuRkZHEx8czd+5cAEJDQ0lNTWXDhg1s2rSp3nGD\ng4OJjIxk+PDhdO7cmWXLlrFnzx7GjBnD448/TnFxMenp6Sxbtozf/va3HD161N+v8/etJvrL3QEh\nhBCXSnPveT7X/rvvviM2Npbc3Fy6du3Kl19+iV6vZ+jQoQwYMMDfLjo6mk6dOpGQkEBeXp5/eXJy\nMjfeeCM2m40pU6awY8cORowYQZ8+fUhISGDSpEnMmTPH3w5g2bJlAGzfvp3Vq1eTn59PdnZ2wOOG\nhITQs2dPoPqyf+/evVm+fDmVlZXs3LkTqP6jom/fvnz77bf+7c7f94gRI5r5GbVeMkIXQgi10ltA\na2h6e0OY/+Vbb71F586d+eyzz4iPj+ett94iIiKC/Pz8OpvodDq83vqX9PX66vGiRqPB6/VitVop\nKioCoLCwEKu1+tJ+zTKPx4PX6yU7O5szZ87w17/+lTvvvBO32x3wuFrtufIVERHBggULePnll/nq\nq6/8RdpkMtXZJtC+1URG6EIIoVaG0Op/nMWNt9WHgLkdAHa7nV27drFt2zb/6mHDhtGpUyeCgoKY\nOXMmRqORJ554gsGDB5OWlkZWVhbXXXddg7vv168fdrud+fPnc+DAAdLS0gBQFIV58+Zx4sQJZs2a\nRZcuXdi6dSu///3vycvLY8CAASQnJ9c77siRI0lNTWXixIk8/fTTzJo1iz59+lBYWOjf9/kC7VtN\nZB66EEKomasUin+onp7WEA0Q1qs6ZKYJKioq0Gg0hISENLs75eXlWCyWOiNsRVFwOp0EBwcD1aN1\nh8OBxWJp1nHPnDmD1Wr1Xx0IpKF9q4EUdCGEUDtHMZTtrjctDQCtsTpUJkxdd3y3RVLQhRCiLVCq\nKC7cyVlbESVOB0EGPbGWSNrFJIMp+nL3TrQA+Q1dCCHagG3Hd7Pv1AFK7CX+ZWZjEZ3LHIzoMQKT\n3nSBrcWVQEboQgihcut3r+dw0WEUnxJwfbvQdtzb/95WU9SdTid2u91/JzyA1+uluLiY6Gi5mtAQ\nmbYmhBAqlnUsi8NnGi7mAIW2Qv615191lr355pvcfPPNjB8/nvvvv5/CwsImH7N2HOzFCBTVWlxc\nzKOPPtrgNs2JglUriX4VQgiVKrOX8e9D/6bSGeBmuPNUOCuICY0hIjgCgK+//pqhQ4eyePFiSkpK\n+PHHH7nuuusajWUNFAd7oVjWlJQUvv/+e1atWoXRaCQ+Ph7AHyG7b98+3n77bQwGAz/88ANjxozh\n9OnTvPbaa+Tm5pKcnMyOHTtYsmQJOp2Ojh07YjAYePvtt/n666/p2bMnQUFBZGdn8+abb7Jnzx76\n9euHTqe7dB/8ZSIjdCGEUCmbw0ZxZRPmoAMer4fjxcfrLEtPTyctLY3MzExuvvlmoPFY1vPjYBuL\nZc3KyuIvf/kL99xzD88++yy7d+/2R8jabDamT5/ObbfdxhdffAFAVVUVkydPZuTIkRgMBhYtWkTX\nrl39UbDh4eFMmzaN+Ph4Bg8ezNSpUwF45JFHmDBhAv379w8YhKMGclOcEEKoVJmjDK+v6cWr0lV3\nJP+b3/yGG2+8kZKSEjZt2kSPHj2aFMtaOw62sVjWxYsXM3v2bJKSkpg+fTqZmZkMHDgQwB8X27t3\nb6ZPn87ChQvJysqitLSUt956C4CffvqJ6OhofxSsoihs3ryZmJgYoPryvcvlIiEhgeeff5677767\nXoKcWkhBF0IIlQo1hqJBg6+Jme5mg7nO+8TERK677joMBgMvvPAC119/vT869Z133uHUqVONxsHW\nxLLWXEoH+Oabb/xFtaFIWIDw8HD/upp/W61WUlJSePnll+scU6PR+I/dsWNHXnrpJf8ygPfee4/C\nwkLmz59PVFQUgwYNatJnciWRgi6EECoVFhRGRHAExVWNX3bXaXV0jOhYZ9krr7zCZ599RlFREYsW\nLWpyLGvtONjGYlkfeOABUlNT+f7779m7dy8ffvihfxSfkpJCSUkJ8+fPx+VyAdC3b18sFgszZswg\nNDSU7t27M2fOHKKjo5k+fToLFixg7ty5jBs3jm7duuFwOFi6dClTpkwhMTGRiooKEhMTW+gTbl1k\n2poQQqjYd4e/4/uj39PYV31Ha0fGXjO20f1dqljW0tLSOqPz2mw2G6GhoXWW2e12XC4X4eHhAbdR\nFIWSkhL/NDePx0NJSQlRUVF1YmfVRAq6EEKo3Ors1eQV5zW4PiI4gnv734vFpL5887ZECroQQqic\n1+dl84HNHCg8QIWzAos+iErFgU6rI94az809b8ZilmJ+pZOCLoQQbYHXS9XZ02hcTjw+BR1aMBgJ\njmgHRnXe9d3WSEEXQgi1c7uh5Ez1v8+n00FoOITICP1Kp847A4QQQlTzuKG4MHAxB1AUKCuBqsbT\n5C6FgoKCS34Mp9NJaWnpL9pHaWkpTqezxfd7vl/yeUhBF0IINSstBU/DOe4A+HxgKwePx7/I6/Wy\naNEixowZw3333cecOXMuSfemTJlyUds1J7s9UDb8hezevZt77rmH+++/n7vvvpvNmzfz8ssvk52d\nXafd9u3b682H/6VSU1Ob3Pb8zHyZhy6EEGrldoPb2Xg7qB7JO+xgqZ4e9vrrr+PxePj0008BOHz4\nMGVlZfz4448MGTIEgM8++4y7776bzz77jJycHFJSUhg1ahQAGRkZuFwu8vLymDFjBsHBwRw+fJhP\nPvmEbt26MWbMGP+hP/nkE06fPs306dMxm80B95efn8+qVavQ6/Xccsst/OMf/8BqtXLdddfRv39/\n0tPTycnJ4c4776RXr15kZWWh0Wj48ssvGTt2LP379/f3+fx91+ZyuZg2bRrr1q0jLi4ORVE4ceIE\nACdPnuTFF19k4MCBDB48uM5255/bqVOnOHbsGNnZ2QwfPpyEhARWrlyJTqfjwQcfxGw2k5GRgd1u\nr3PuNU6cOMFHH32Ez+dj0qRJtGvXjuzsbDIyMoiIiGD69Om8/fbbJCUlMWzYMG6//XYZoQshhGp5\n3NCc3HK3y/8yPT2dhx56yP8+MTGRsLAwlixZgs/n48SJE7z33ntA/Xx3qI52DQ8Px2q18txzz2Gz\n2Zg8eTK33XYbO3fuZMWKFQBs27aNyMhI4uPjmTt3bsD9nZ8XHxwc7M9u79y5c6N58UePHiU9Pb3B\nvta2Z88eevXqRVxcHFCdPNe5c2cANm7cyOjRo1m4cCFlZWX+bQKdW25uLvPmzWPAgAHExcWRmppK\nUlIS8fHx/nz51NTUeudee5+33HILQ4YMYfbs2UDdPHqfz1cnMx9khC6EEKJGrXuk3W53vRAYjUbD\nb3/7WzIzM9m6dSvTp08HqJfvPmLECJKTk7nxxhux2WxMmTLFn8vep08fEhISmDRpEnPmzPG3A1i2\nbFnA/QXKi6/JbgcazYv/9ttv/dsF6mttgc67RmpqKj179uTaa68lL+/cvP5A59arVy/uuOMOrr32\nWhRFoby83P+Am//+7/8GCHjuNRRFYfny5RiNRn766SeAenn0tTPzQQq6EEKol14PWg14mziZyWj0\nvxw+fDhr165l3rx5AJSVlREeHs7UqVOZN28ep0+f5umnnyY7O7tevnv1oavLi0ajwev1NpjZXrPM\n4/Hg9XoD7i9QXnzttLfG8uJrNNTX2vr06cOuXbuoqqoiODjYf+6BzqlGQ+dWc3ydTofD4QCq703w\n/HyvwvnnXttTTz3FO++8g8ViITk5GaifR187Mx+koAshhHrpDWAwgdPReFudDkznfsN95JFHmDVr\nFhMmTCAkJAS73c57771HdHQ0er2e2267DY1GEzDfPZB+/fpht9uZP38+Bw4c8Ge6K4rCvHnzOHHi\nBLNmzWpyXvzIkSNJTU1l4sSJjebF12hKX0NCQkhLS+OOO+4gKSmJwsJCpk2bdsGPLtC5lZSU1Gkz\nadIkJk6ciNvt9l9CP//caxs0aBAzZ84kIqL6+fQOh6NeHr2iKP7M/Mcee0zmoQshhKq5nFB8pnp6\nWkM0QKgVQsPqrXI6nbjdbn92u8/nY8yYMbz66qu0a9cOaDjfPZDy8nIsFkudEbaiKDidTv+I+FLl\nxTe3ryUlJYSHhzc5+z3QudVmt9vRaDT+m99uvfVW1q9fX+fcaysrKyMsLMz/1LjG8uiloAshhNo5\nHFBaDIqn/jqttjpUJizwg1HO98c//pF+/fpx3333tXAnL4+XXnqJkydP+t+PHz++wasMLe3555/n\nj3/8Y4vtTwq6EEK0BR4PFUXF2OxuKtwKJq2WsGAD1qgwMAdd7t6JFiC/oQshRBuQm1/BiSI3tqqa\nqWkKJoOXmAobfa8yYdDJLOYrnYzQhRBC5bJyCzl1ppKGvu2twUYG9W3faFEvKCggNja2WccuKyvD\nZDLVCU0Rl4b8SSaEECp28GQZp89UNVjMAUqrXPyQW1Rn2ZtvvsnIkSMZO3as/y7vJUuWNPv4n3zy\nCTk5OU1u35xIV1GXbvHixYsvdyeEEEK0vCqHm73HS3C4GslyB+xOD2EhJixBBgC+/vprhg0bxpIl\nS7jrrruA6jvck5KSyMrK4vTp07z//vvExcWxf/9+1q5dy4kTJ4iMjOSNN97A6XTSpUsXfD4f7du3\nJzQ0lOzsbFauXMmxY8dITk4mIyOD7t27A9VRscHBwTzxxBPodDq0Wi3t27cnPT2d1atXExUVRUxM\nDPn5+fztb39jy5YtdOnShbCw+nfmt1UyQhdCCJWqdHoor2zgKWvnUbw+zpRV1Vm2du1ali5dymef\nfQbgfxBJ7VjVw4cP89hjjzF06FA++ugjnn32WW655RYWLVpEWVkZGRkZ5Obmkp2dzaJFi7j33nvp\n2LEjAK+88or/WK+88goRERGNRrrOnz+fESNGcPvtt9cLY2nrpKALIYRK2Z0KzblNyumuWyD79OnD\nTTfdRN++feu1rYlV1ev1jBo1ij59+nDjjTcyePBgevbsyTXXXFMnHnXdunU8/PDDdO/enaFDhwY8\nfnBwsD/SNSoqitWrV3Py5Mk6ka433HADzz77LN98841/HryoJne5CyGESpkNuma1N+jrjvESExMb\nnJNdO1a1diRqQ/GogeJbNRoNPp8Pn8/H2bNngcYjXUeMGMHs2bNZvnw5L774IgsXLmzWOaqZFHQh\nhFCpkCADIUEGKu2NX3bXaiHaeunmo0+ZMoXU1FR27tyJy+XilVdeYfTo0UyYMIHY2Fh/Glpjka5p\naWnodDoOHz5cLy61rZNpa0IIoWI/5ZVw4GQpNPJNHxlmZkhy+0ven+LiYkJDQzEYqm++s9lsWCwW\nf0EPpHakq8/n48yZM4SHh2Os9TAZIQVdCCFU7985pykqbfgBLZYgA4N6tyfI1LxL9KJ1kYIuhBAq\n5/X5yDlSzKkzVTjcHkx6By7FhFajJTLMREr3dgQZpZhf6aSgCyFEG+Dz2ikr+Q7FeRyfz4dG40Wr\njyYsYiA6Q/PS30TrJAVdCCFUTnGfxV6WgeIurLdOqwvDZLkBY3Cfy9Az0ZJkHroQQqiY13OWqtJP\nAxZzAK9SjqN8E66qPZesD6WlpTidzku2/xoFBQWX/BitmRR0IYRQLR/28q/xesov3MrnxlWRheIp\n9S8LlOV+sV5++WWys7Obvd3+/ftZvXp1k9tfTNa8msg8dCGEUCnFcxbFfbppbZWzKM7D6PT9ASgv\nL2fGjBmMHz/e3yYjI4NRo0bVeZ2dnU1GRgYRERHMmDEDvV7Phx9+yPHjxxk/frw/5vX48eNs2bKF\nwYMHM3DgQE6cOMFHH32Ez+dj0qRJ/tS39evXs2vXLoYMGcL333/PN998Q1FRETNnzuT06dOsWrWK\nqKgoJk2ahE6nIyMjA6fTidls5rbbbgNocN9qJyN0IYRQKa+nGJ+34elq5/N46l6yPj/L/fzsdYBH\nHnmECRMm0L9/f7xeL2lpaRw9epSbbrqJCRMm4HBUHz8jI4M77riDZ555hkOHDmGz2bjlllsYMmQI\ns2fPBmDZsmVs3bqV8ePHExQURGJiIl27dmXYsGFUVVUxefJkRo4cicFgYNGiRQA88MADmEwm+vbt\n68+aD7TvtkBG6EIIoVa+xp+yVpvGGzjLPTIyssFtEhISeP7557n77rsxmUxkZmaSmZmJXq9nwIAB\n/kenPvDAAyQlJTFp0iS+/PJLrr/+epYvX47RaOSnn34C4LPPPuPzzz/HaDSSmJiIw+EgOjqaHj16\n8M0331BaWspbb70F4N+mb9++/qsGNRRFqbfvtkAKuhBCqJRWHwUaI/hcTWtvqHtp+vws90DZ6++9\n9x6FhYXMnz+fqKgowsLCOHv2LLGxsRQWFmK1WgEoKiry/zs+Pp6nnnqKd955B4vFQnJyMgBWq5XC\nwkL/ZXqdTufPg7daraSkpPhH4TVqZ8rXCLTvtkAKuhBCqJTOEIXeEIvHdbzRtlq9Fb2p6wXbnJ+9\n7nA4mDJlComJiVRUVJCYmMh//dd/MXXqVLp06YLVaqVbt24AfPrpp3z//ffs2bOHNWvWcOTIEWbO\nnElERIR//08++SQzZsygb9++dOjQgSlTprB48WJmzZrFq6++isViYcaMGYSGhtK9e3fmzJkTsJ+D\nBg2qt++2QOahCyGEiimu01SVrMHrrWy4kUZHkOU/MFqubXR/52evezweSkpKiIqK8j8pTVEUqqqq\nCA0Nrbdt7WVlZWWEhYXVyXGvGf1HRUUFzHe32+24XC7Cw8Mv2M9A+1Y7KehCCKFybscRnOWbUJTS\neus02iCMQX0xhw2+DD0TLUkKuhBCtAFeTzEVZ77BUV6Iy+FBb9RgsoRhiRmEoZFL7eLKIL+hCyFE\nG1Ccd4jikyU4bTb/Mp1RQ+iZfcT3iUerl0eRXulkhC6EECp3fGcGZaf24/N5A64PCm9H4vX3S1G/\nwklBF0IIFSs6soOC/ZvxKReekx4W243OA+72v1cUhYULF3Lo0CHcbjfDhw/nd7/7HQADBw4kMTER\ngKuuuooFCxYQEhLCvHnz2L59O08++SR33HHHpTspEZAkxQkhhEq5q8ooPZHTaDEHqDhznPLCI/73\nf//73zGbzXz88cesWbOGHTt2sGHDBqB6PvqqVatYtWoViYmJ/kK/dOlSJkyYQGXlBe6oF5eMFHQh\nhFApl6Mcp+1Mk9p6FRdVZ/L87zMyMpgyZYr//dSpU1m/fn297aZOncrWrVsBsFgsv7DH4peQgi6E\nECrlqiynOb+qupxV/tdutxu9/tx903q9Hrfb3aL9Ey1LCroQQqiUwRzaeKNa9Eaz//XQoUNJT0/3\nv1+3bh033nhjvW02btxIz549L76TosXItDUhhFApQ3AYxpAIXJUljbbVaDVYIhP87x999FEeeugh\nsrKysNvttGvXjnHjxgFw6tQpJkyYAIDRaGTZsmVA9fPIP/30U8xmM4WFhTz88MOX4KxEQ+QudyGE\nULH8fd9SdPh7aOSrPiSyA4k3TKi3vKqqCr1ej9EoU9paO7nkLoQQKhbXczCWqE4XbGMKCSch5faA\n64KDg6WYXyFkhC6EECrn83k5lbOJsvwDKM4qyrVGQr0utFo9IRHtib/6NoxBzfu9XbQ+UtCFEKIN\nKFc8/PP4YXZW2lAUBa9WS6LRzLiERBKDgi9390QLkIIuhBAql+ew8+fjRzlor6q3Ls5oYmJse26O\niLoMPRMtSX5DF0IIFTvmdLD46KGAxRwg3+Vk+cnjZJac/ZV7Vs3hcFBWVnbJj1NWVobD4bjkx7mc\npKALIYRK+YDXTp0g3+W8YDunV+GzonwKnOfavfnmm9x8882MGzeO+fPn4/UGfrBLbfv372f16tXN\n6uPWrVtZsWJFs7apsXTp0ia3/eSTT8jJybmo41wpdIsXL158uTshhBCi5R112PmwKB9nE4pxqcdD\ne5OJHsEhAHz99dcMHTqUZ555hjVr1hAUFERJSQmnT5/m/fffJyUlhe+//55Vq1ZhNBqJj49n5cqV\nrFmzBpvNxjXXXEN2djbvvPMODofD/zCXLVu21Nnm6NGjHDhwgL1793L06FF69+5NVVUVK1euZMOG\nDYSHhxMbGwtAdnY2K1eu5NixY0RGRvLEE0+g0+nQarVERkby9ttv8/XXX9OzZ0+CgoLIyMigrKyM\n9evX079/f9q3b49Opwu4bzWQEboQQqjUCaeDMo+nye1zz7ss7/V6sdlsnDhxAqvVSnp6OsuWLeO3\nv/0tWVlZ/OUvf+Gee+7h2WefZffu3SQmJtK1a1eGDRtGdnY2aWlpjB07lnXr1rFx40a+++67ettA\ndQrdsGHD2LFjB++88w52u53evXszduxYFixYQFlZGdnZ2SxatIh7772Xjh07EhERQWRkJMOHD6dz\n585MmzaN+Ph4Bg8ezNSpUwF48cUX2bJlC8OHDycjI4Pc3NyA+1YLSYoTQgiVUhp4/nlDvNS9R3rF\nihV88cUXpKamcu2117J+/XqmTp1K3759Wbx4MbNnzyYpKYnp06eTmZnJwIEDiY6OpkePHixZsgSn\n08myZcsoKiri22+/Bai3zTXXXMPtt99O7969efjhh/nDH/7AXXfdxT//+U98Ph/FxcUcPHiQ9evX\n8/DDD9O9e3e6d+8OQEhICD179kRRFDZv3kxMTAwA+/btw+VyodFomDdvHjqdzn9Oer2+3r6vueaa\nX/IxtxpS0IUQQqUSTEEE63RUNeHxqQBdTUF13s+dO5fx48fXWWYymQCwWq0UFRUBUFhYiNVqRafT\n+X9rt1qt3HfffUycONG/7csvv1xvG8C/rKioCKvVyptvvslNN93E7bffzrRp03C73URERJCfn1+n\nL1pt9UVmnU5Hx44deemll9BoNP71er2+TjEHAu5bLaSgCyGESnU0mekeFMyuClujbeOMRgaEhjd5\n3w888ACpqal8//337N27lw8//BCPx8PixYuZNWsWf/7zn5k8eTI7duzAbrczbty4gNtkZWWRk5PD\nY489xq5du1i2bBlnz55l0aJFbNy4kdzcXACmTJlCamoqO3fuxOVy8corrzBy5EhSU1OZOHEic+fO\nZdy4cXTr1g2Hw8HLL78csN8DBgyot2+1kHnoQgihYjmVNp7PO0KJp+GRqA54IK4D97dr3+z9l5aW\n+kfagZSVlWEymTCbzRfcxm63YzAY/I9sbShDvri4mNDQUAwGQ71jKYpCSUkJ0dHRF+yzWvPppaAL\nIYTKbbOV8eqp45x21p++FqrXcWtkNNPiOl6GnomWJAVdCCHagGNOB2uOn6S80km44qNKp8Fn1DM8\nPpaBYU2/1C5aL/kNXQgh2gBLYRV3lOhwVumouZldb9IRorHjDQlFq5NZzFc6GaELIYTK5e/Lp7yw\nHJ838Ne9OcxMQt8EtPrmF3Wn04ndbr/g7+gNcTgcOJ1OwsPlCkFLkD/JhBBCxUpOlFBe0HAxB3CU\nOzi973SdZT/88AOjR4/m/vvvZ/To0dhsge+U37dvHx9++OFF9e2XxL5eTMys2skldyGEUCm3w01Z\nfhlNuRBbWVJJZXElIZHV0a9//vOfWbp0KcnJyf7tT506RV5eHtnZ2cTExHDfffcRGxtL//79AcjI\nyMDpdGI2mxkyZAgrV65Ep9Px4IMPYjabcTqdvPfeexQWFjJu3DigeoS/YsUKwsPDmThxIlVVVbz/\n/vsUFRUxevRo+vbtC1THvtYE0dx0002kp6fzzTffUFRUxMyZM+utd7lcrFy5koKCAm699VYGDBhw\nKT7iVkVG6EIIoVJuhxtXpatJbX2Kj8qSSv/7G264gd///ve89tprnD59Go1GQ25uLnPnzq0T03rw\n4EHS09OB6rnpJpOJvn37kpqaSlJSEvHx8f4o1smTJxMREcGYMWP8gS4bNmxg8ODBbN68mczMzAZj\nX8+PkW0sZnbFihUoikJqamqdKXNqJgVdCCFUym13N2l0XkNxnkuUmz9/Pn/961/xeDzceuut7Nmz\nB6BOTGtmZmad7fv27cuoUaOIi4ujvLycm2++mTvuuIOTJ0+iKAqFhYXcc889JCUl0aNHDwBGjRpF\ncnIyo0aNYt++ff5o1r/+9a/+aNZ169bVi5GNiYnxx8wGWp+SksJHH33E+++/3+i8dLWQS+5CCKFS\nelPzvuK1hnNjPJ/PR1JSEklJSdjtdrZt20a3bt3qxbTWVhMLq9Pp/M8e93q9eNeq7uMAACAASURB\nVDwe/zKfz1cvnhVAo9Hg9XoDRrMGipH97rvvLhgzC5CZmcnmzZuZNm0aGRkZzfosrkRS0IUQQqUM\nZgPGICMue+OX3TUaDcHWYP/7xYsXc/jwYaxWK3v27OGDDz5g79699WJai4uLA+5v0qRJTJw4Ebfb\nzezZswGYM2cOY8eOpWvXrowcOZKgoKB62wWKZp06dWq9GNl+/fpdMGb20KFD7Nq1C7fbzZAhQy7m\n47viyLQ1IYRQsaLDRRQfC1x0awsKC6JT/051ltntdux2O5GRkQB89dVXbN26lUceeaROTGtD7HY7\nGo2mzm/YbrebiooKIiIiGtyuoWjWQDGyF1pfWlqKXq/HYrFcsJ9qIQVdCCHUzAfHdh3DXmpvsInB\nbCChXwIGc/189NpycnI4cOAAd999d0v3UrQAKehCCKFyPp+PwgOFlBeV43V7UTQadD9/9QeHBxPX\nK67RYi5aP/kNXQghVE6j0RDZLYb8YCNnqpwoPh9ejYZIo464uAgMZikFaiAjdCGEUDmby8P2U6WU\nOus/QjXYoOM3UaF0Cq9/g5q4skhBF0IIFbO5PPz7ZAmVLk+DbbRa6B9rpVOYFPUrmVxnEUIIlfIB\nuwvLL1jMAbxe2F9cQVSQkRCDjt27d/PMM8/gcDjIz8+nS5cuDBgwgHbt2vHqq6+ydetWNBoN//jH\nP3jxxRfZuXMnb7/9tj8xbu/evWRkZNC5c+df4SxFDUmKE0IIlbI5PZQ46l9mb6htfkV1GExycjIf\nf/wxS5cupU+fPnz88ccsWLCA8vJyzGYzX375JQDr1q3DYKi+me7BBx/k448/5o033iAiIkKK+WUg\nBV0IIVSq3O3BqXib3L7UeeGRPMDEiRNZtWoVubm5dOvWDZ1OV2f9+++/Xy+xTfw6pKALIYRKXeiR\nqYF4m9A+KioKl8vFsmXLmDJlSr31UtAvHynoQgihUqEmPQatpvGGPwtv4vS1CRMmkJeXR8+ePess\n37VrF507d66X8S5+HVLQhRBCpUINBsJNxsYbAiEGHXHBpia1vfXWW1m7dm295W+88QYPPfRQs/oo\nWo5MWxNCCBU7a3ex9WQpTkVpsI1WA72iQ+kR2TYyz9VKRuhCCKFiUUFGrmkfRrAh8OV0g07DVREh\nUsxVQEboQgjRBpS7PBwqs+FSFIL0OpxeLyhaOoYG097StEvtonWTgi6EEG2A6+f/KZy79K5BgwED\nZsxoaPrNc6J1koIuhBAqV0UVHjz4CPx1r0NHCCFS1K9w8hu6EEKomAvXBYs5gIKCnYafly6uDJLl\nLoQQKuXFixv3BYt5DQ8e3LgxUB3leuLECT766CN8Ph+TJk2iXbt2eL1eVq5cidfr5aqrriIlJYWw\nsDDS09PJycnhzjvvpFevXuTn5/Puu+/i8/mYOHEi8fHxl/pUBTJCF0II1fLhw0Pjca41bWv/vm6z\n2bjlllsYMmQIs2fPBuD555/HZrPRv39/pk2bRmFhIcuWLWPPnj2MGTOGxx9/nOLiYubPn8+IESO4\n/fbb8XqbHj0rfhkZoQshhEp5aV4xrd1eURSWL1+O0Wjkp59+AmDTpk1s3LgRnU7H8OHDAVi9ejW9\ne/dm+fLlVFZWsnPnTm644QaeffZZbr31Vh588MGWOh3RCCnoQgihUs29ya12+6eeeop33nkHi8VC\ncnIyUJ3jXlBQQIcOHTh58iQAERERLFiwoM5l9REjRjB79myWL1/Oiy++yMKFC1vgbERjpKALIYRK\nadCgQ1fnUvqF6Dj35LRBgwYxc+ZMIiIi/MuefPJJHnroIbp27Up5eTkGg4Gnn36aWbNm0adPHwoL\nC0lLSyMtLQ2dTsfhw4eZNWtWi5+XCEymrQkhhIo5cODE2Wg7PXpCCKmzrKysjLCwMDSa6pG7zWbD\naDTicrm46667yMzMRK+vHheeOXMGq9WKXq/H5/Nx5swZwsPDMRqbliUvfjkp6EIIoXJVVOHG3eB6\nLVpCCEHbyH3SeXl5LF26FIAHH3yQgQMHtmg/xS8jBV0IIdoAO3Y8ePDixVlWiim8+hGnevQEEdRo\nMRetn/yGLoQQbYCuysOOj5aRl/0NXsWDV/EQ2z2Za8fMJaRzz8Z3IFo9GaELIYTKlZw8xLrnZ1B4\n8Md668LjOjP4wYX0GnHvZeiZaElS0IUQQsVKTh7m4/93H2X5eQ22MZqDufnR/6HXiLFN3q/D4cDp\ndBIeHn7Bdk6nE7vdjtVqrbeurKwMk8mE2Wxu8nFFw+RHEyGEUCufjy//9uQFizmAy1HFtg9eobzg\n5AXbrV69mv379wOwdetWVqxY0WgX9u3bx4cffhhw3SeffEJOTg779+9n9erVje6rRmlpKXfddRfJ\nyckUFRU1eTu10y1evHjx5e6EEEKIlnfm6F62rnoJj7PxB69UlRZh7dCF9j37+5elp6ezevVqoqKi\niI6OZsGCBeTl5eFyuTAajRw6dIi9e/dy4MABkpOTOXXqFDk5Oaxbt86/DCAkJIQOHTqQn5/Pa6+9\nRlZWFr1798ZgMNC+fXs+/fRT1qxZg81mIzg4mPLyciIjI3G5XGzYsIHu3bvX6avBYGDMmDFs2rSJ\n0aNHY7FYWvaDu0LJCF0IIVSq+MQh7GVnm9w+Pzfb//r8jPaSkhK6du1KSkoKV199NQAbNmxg8ODB\nbN68mczMTHJzc3nsscfqLDt48CDp6elUVlYybtw4hgwZwqBBg3A6nWRkZJCbm0tiYiJdu3Zl2LBh\nBAUF8fzzzwPVI/iDBw/W66dOp5PL9AFIQRdCCJVSXI0HytTmq/UgldWrV3Py5Mk6Ge3R0dF06tSJ\nhIQEAEaNGkVycjKjRo1i3759DS4D2LFjB0OHDmXAgAFcc801REVF+dfFxMQQHR1Njx496NKlCzab\njdLSUv7xj38wefLkX/IRtCkybU0IIVQqqlMSxiALLntF09p37uF/HSijfdu2bXWenlaTEqfRaPzL\nAy2r2V9+fn7A4+p0ujptJ0+ezFNPPUVsbGzAm+lEYDJCF0IIlYpI6Ea7pKub1DYsLoHEa0f639dk\ntC9YsIBp06ZRVFTE4MGD+dOf/sT//M//NLsvycnJBAUFMXPmTObNm0de3rkb9Xr16sWWLVv8ue+j\nR49m7dq1F8yBv//++9m+fTszZszgiy++aHZ/1EimrQkhhIqd2P0da599iKrSwgbbaLU6Bk3+L66f\n+Fi9dbUz2ltCRUUFGo2GkJCQBtvYbDbuvfdeMjMzW+SYbYUUdCGEULkD36bz5atPUV5wvN46U0gY\nvW+dyIhZz12GntVXXl7O448/zpw5c0hJScHhcPDkk0/WafPHP/6xzlPgRDUp6EII0QYUHf6JHSv/\nRuWpcszeaNyUQ5ib34wZQ9KQOy5390QLkJvihBCiDTCcbE+v0Edxh7qoGccZrAaCTlvwubxojHJL\n1ZVORuhCCKFyBR+cpuKHcrxub8D15k5m4ud0RmtuelGX6NfWR/4kE0IIFSvbXILtAsUcwHHMQcEH\npxrdV2uJft2yZQujRo3innvuYdq0aSiK0uRt1UyiX4UQQqXcpW6K0gtRSt2NtvWUezDHB2GINvqX\ntdbo18jISB588EHGjx/Pv/71L6xWK507d27ZD+8KJCN0IYRQKfdZN65TTUuL89q9VOWeC6BpzdGv\nFovFH1yTm5tbr+C3VVLQhRBCpTxn3eBt+m1SnjKP//WVEP06b948pk+fTlxcXJPPUc3kLnchhFAp\nfbgeNEATa7o2SOd/3dqjXx999FEGDBjAhAkTmnZybYCM0IUQQqUMUQaMtX4TvyAtBHc7l97WmqNf\nP/zwQz744AMyMjIYO3YsW7dubXZ/1EimrQkhhIqdWVtIyVdnGx2lmzsHkfBol/rbS/TrFUMuuQsh\nhIpF3R6D47gd+8FKqq+/12eINBA3qUPAddHR0S3aH4vFcsH1NdGvaWlpABL92gwyQhdCCJXzeXwU\nfpRPZU45SqWXUnsp1iAr6MCcEETcpA4Yopp4aV60WjJCF0IIldPoNQSNDmHZd3/l/77YiMflwe11\nc01Kfx6f+gQJUsxVQUboQgihcgcOHGDixIlkZWXVW9etWzeee+45xo8ffxl6JlqSFHQhhFCxgwcP\ncuutt3Lo0KEG21gsFv7+9783awqYZLm3PjJtTQghVMrn8/HYY49dsJhD9Z3nS5cu5dixYxds11qy\n3I8cOcLdd9/Nvffey5gxY6ioqGh8ozZAstyFEEKl9uzZwwsvvEBVVVWjbQsKCrjqqqu47rrr/Mta\na5Z7REQE48eP5/777ycnJweHw0HPnj1b9sO7AskIXQghVCo3N5eioqImt9++fbv/dWvOcgfYu3cv\nL7zwAkeOHGHo0KG/4FNSDynoQgihUg6Ho1nt3e5zT2Vr7VnucXFxjBgxgsrKSn766admnadaybQ1\nIYRQqV69emGxWJr8G3Pv3r39r1t7lntERATXX389d999Nz/88AP/8R//0aRzVDMZoQshhEr16NGD\nAQMGNKltly5duO222/zvW3OWe2ZmJpMmTWLmzJmsXLmS++67r9n9USOZtiaEECr21VdfMX78eAoK\nChpso9frefrpp3nqqafqrWutWe6VlZU4nU4iIyNbpF9qIAVdCCFU7pNPPuHxxx/n6NGj9dZZrVYe\neOABXnnllV+/YwHUZLnPmTOHlJQUyXJvBinoQgjRBuzatYsnFy8m98gRFK0Wn8dDTHg4v3/4Yblk\nrRJyU5wQQrQBe0+eJLhrVyxaLYqiABARE0Pu2bM4XS5MRslzv9LJCF0IIVTuuRUrWPfVVzidzoDr\nk5OS+PuSJQQ1I4JVol9bH7nLXQghVOzDzz9n3ZdfNljMAXbn5vL0smWN7qu1RL/WePPNNxkxYkSz\nt1MrueQuhBAqlX/mDJ/83//hdLkabfvdDz/w3c6d3NCvn39Zeno6OTk53HnnnfTs2ZO3336bpKQk\nhg0bhsViwel0smLFCsLDw5k4cSKnTp3i2LFjZGdn+5fFxsbSv3//6v7k57Nq1Sr0ej1Tp06lX79+\nxMXFsWrVKr755huKiooYMmQIRqORbt264XK52LhxI6NGjarX3xMnTpCdnU15eXnLfWBXOBmhCyGE\nSp0uLORQrfneF1Jht7N1507/+9Ye/frUU08hjyKpSwq6EEKo1PHTp/H8fANcUxQWF/tft+bo1/ff\nf59BgwZhMpnwer3NjrhVK7nkLoQQKhVTq2g2RWitsJfWHP3q9XrZtm0b27Zt4/jx47zxxhvMnTu3\nWeeqRjJCF0IIlYqPjaVjXFyT2mp1Ogb06eN/35qjXydNmsTrr7/O66+/TufOnaWY/0ymrQkhhIq9\n+NZbvLt2LY191ScnJfGPP/2p3vLWGv0q6pNL7kIIoWKPTp5MzsGD/JCT02Cb9jExvPC73wVcFx0d\n3aL9sVgsF1xfE/2alpYGINGvzSAjdCGEUDmny8VzK1bw9fbtlFdUEGqxYKuoQKfV0rt7d57/3e9I\naOKledF6SUEXQog2wAccKShA0WhwKwomgwGfopAYGys3U6mEFHQhhFA5L1AFBJrApgOMP/8jrmzy\nh5kQQqjYhYo5Py93AO5m7tfhcFBWVtZoO6fTSWlpacB1ZWVlMoe8BUlBF0IIFbPTcDGv4QOcP//7\nQlpLlnt+fj7XXnstY8eOZezYsU3eTu10iyU7TwghVEmhulA3hY/qEZ6u1rL09HRWr15NVFQU0dHR\nLFiwgLy8PFwuF0ajkUOHDrF3714OHDhAcnIyp06dIicnh3Xr1vmXAYSEhNChQwfy8/N57bXXyMrK\nonfv3hgMBtq3b8+nn37KmjVrsNlsBAcHU15eTmRkJC6Xiw0bNtC9e/c6fS0tLWXfvn28++67jBs3\nrgU+KXWQEboQQqiUl8ZH3bV5ar1u7Vnu27dvZ/To0TzxxBONzrFvK6SgCyGESjW3zGlqvW7NWe7x\n8fHs2rWL9evX43A4WLduXTPPVJ0kWEYIIVRK13iTOmqP8FpzlrtGc+5Pj4SEhCbdnNcWSEEXQgiV\n0lH9Je9prCHVo/PaBaEmy71Pnz4UFhaSlpbG4MGDSUtLIysry/+M86aqneVuNBp54okn/Ot69erF\n4sWLmTVrFq+++iqjR49m3rx5/POf/wy4r8zMTN566y3MZjMnT57k008/bVZf1ErmoQshhIp5qJ62\n1tgXvQkwB1jeWrPcKysrcbvdAUfwbZWM0IUQQsX0QBDVc829AdZrAAOBizlIlvuVREboQgjRBihA\nZXkRjrJ8XMXHMViiMER0JDQyHsPl7pxoETJCF0KINqDkh7Wc2ZmOvfAwPm/1r+qm8PZUXnU98SPn\noNVL+OuVTkboQgihcsc2vETxrn/h9QSOmbF07MNVE/6M1tDQhXdxJZB56EIIoWJnstdS/OOGBos5\nQMWJPeSt/9MlOX5VVRUVFRWXZN+iLinoQgihUq7yQs5kp+N1N/4AFNuhbdiOZLV4HzIyMvjggw8u\natt58+YxcOBACY5pIvkNXQghVMpVVoC98HCT2nqclZQfySK06wAAvF4vK1euxOv1ctVVV5GSkkJY\nWBjZ2dlkZmZyzTXXcNNNN3Hq1CmOHTtGdnY24eHhTJw4EYAvvviC3bt3Yzab/VPeLrTt8OHD6dWr\nV50+LV26lNdff53KysoW/FTUS0boQgihUs6SE/4b4JrCbTvjf/38889js9no378/06ZNo7CwkOzs\nbNLS0hg7dizr1q1j48aNAfPbt2zZwuuvv86oUaNYu3YtQIPbzps3jwEDBhAXF1evP41NcRN1yQhd\nCCFUymBp3hxynelc2MumTZvYuHEjOp2O4cOHA7Bu3TqcTifLli2jqKiIb7/9luHDh9fLby8uLmbG\njBkkJSUxfvx4XC5Xg9vecccdXHvttS152m2WFHQhhFApo7U9JmsHnKWnGm2r0WqwdO7nfx8VFUVB\nQQEdOnTg5MmTAFitVu677z7/ZXWAr776ql5+e3h4OEVFRQAUFRURHh7e4LYmk6lFzlVIQRdCCNUy\nR3YkvPsgCrd/3Gjb4LgeRPS60f/+ySef5KGHHqJr166Ul5djMBiYOnUqkydPZseOHdjt9gafRT5p\n0iTuv/9+tm/fzt69e7nnnnuavG1tS5Ys4dNPP8VsNlNYWMjDDz/c9JNvg2QeuhBCqJhPcXPgvceo\nOLG7wTbG0Fi6p76IKbKjf5nNZsNoNOJyubjrrrvIzMz0j8TLysowmUyYzQ3PW/f5fFRWVtb7Hbwp\n24qLIwVdCCFUzutxcizjz5Qd/A7FUYHeaMbjcoBGS3BcEl3v/COmqIQ62+Tl5bF06VIAHnzwQQYO\nHHhJ+/jSSy/5L+0DjB8/ngEDBlzSY6qNFHQhhGgLfArOw9+hsRfj87rRaPV4DRbMideDoeEnn4kr\nhxR0IYRQO3cVnP4RnOX11xmCIao7hMb++v0SLUrmoQshhJp57HDyh8DFHKqLfeEeqCj4RYcpKGh4\n+9LSUpzOhqNnRcuQgi6EEGpWuL+6aF+IV4GzR+ACee+NWbJkSYPrXn75ZbKzs+ssW716Nfv377/o\n44n6dIsXL158uTshhBDiEnBVQPFh8CmNt1WcYAwGczhQncHevXt3cnJyOHLkCB07dvQvczqdvP32\n23z99df07NmToKAgfD4fSUlJlJSUsGLFCmw2G/v376d79+589dVXBAUF8fnnn+P1eklISGDBggXk\n5eXhcrno0qULb775Jp9//jnBwcF06NDhEn8w6iQjdCGEUCt3JSiuprd3nLss/+6771JcXMyKFStY\ntmwZXq+X5cuXAzBt2jTi4+MZPHgwU6dOBapH4QAPPPAAAwYMoLKykkceecS/v40bNzJ69GgWLlxI\neXk5Xbt2JSUlhauvvpoVK1agKAqpqakyne0XkGAZIYRQK6+3mRucG8kPHz6cTZs2YbPZCA4O5rvv\nvqN///4oisLmzZuJiYkBYN++fbhc1X80eDweqqqqGDp0KHCuyAOkpqbSs2dPrr32WvLy8oiOjqZT\np04kJCSQkpLCM888w9mzZ3nooYd+2Tm3YVLQhRBCrYzBoNVV/0beFIZzITAjRoxg/vz5DBw4kE6d\nOvHss8+yYMECdDodHTt25KWXXkKj0dTZXK/X43BUP6rV4XBw9uzZOuvgXDysTqfD+/MfHEOHDiUz\nM5PNmzczbdo0MjIyfslZt1lS0IUQQq0MIWAOg6qSxtvqTRAS5X971VVX8dNPP7Fw4UI6d+7MvHnz\nWLNmDQBz585l3LhxdOvWDYfDUWckPmvWLO655x46deqE1Wpt8HCDBw8mLS2NrKwswsPD2bVrF263\nmyFDhlz8+bZxMg9dCCHUrLIYCn8Ez4V+S9dAVFeIvKrJu1UUhZKSEqKj6z7R7cyZM0RHR7N//36e\nfvpp/vnPfzZpf6Wlpej1enlk6i8gBV0IIdTOlg9nc8HtqL9OpwNLHLTr3SKH2rRpEx988AEWi4XH\nH39c7lj/FUlBF0LlFJ8PH6DTaNA02lqolqMcig9VT2XzKqDRVl9mt3aC0PaXu3eiBUhBF6IV8QGV\nikKF4qFKUXD4fDi8CnavlypFwa4oVHkVHIoXu1fB4fPi8Prw+LwoXh8enw9F40PxVRdyRVHYvPRP\noNEwdMEf0Gg1aNGg02jQoUGvAZ1WixbQocGi06HVVP87VKcnTK8jVKsnSKfDpNVi1GoxaTSYtFqC\ntDqCdTr5I+FKo7jA4wCdsbqgy/+DqiE3xQnxK6kpyqV2O3sPH8bQuSNFLhfFbjeliodyT3UR9+DD\n7fPiVLzYvV6cXi8X+1f33j+9SN57qwAodrvp+fjvLmo/Rq0Gk0aHSavBoNVi0GgxarRoNT5CdXqs\nej3RBiMxBhOOI0fo0b074WYzIVodIT//MSBaCZ2x+h+hOlLQhWhBpR4PxW4XBW4XJ51OTjodnPW4\nKXW7cfq8lJWW8n8z5uAoKSFx6hQ63nvPpe1Q7cGX5uJHYi6vDxcebI3Mfjr+0ScceecfmK0R3PL6\n3wgLDydEp8eo0RJnNNLJFEQnk4kIg4FwvYFwvR79L+iXEOIcKehCXIQKRaHY7ea4y86hqiqOOR0U\nuFw4vAo2j0KZ4gm43bE16RT/uBuAU+kZxAwbiik6KmDbltDr97/DcTqfyFP5dH7skcY3+AWcRWc4\n9fm/qDp2gqpjJ/hx7XoS7htTr50ODeEGPaE/j9wj9AbiTCYStWaSLWGE6HUEGbQYZFQvRLNIQRfi\nAhxeL8UeN2dcLg7YqzjkqOSEw0nZz5fIHc1M4oodMYzjH3+Mo+gsEddec0mLOQBaLZZuiXh69vxF\nI/SmMMVEE5GSQuWhI5hiYmg3fGjAdgo+it1uit3uOstTDCHYyxVCDLrq3+r1WsJNBqwmA0EGLUF6\nHUadFHkhGiIFXYha8l1Ojjsc7KuqJNdeSbHHjc2jUOxxobTA7aOmmBj6L/sLW0bfRff/nP3Ld9jK\nJM3/T468tZL5Dz1ETkx04xvUYtUZUbw+yp3nrm6ctDnQazUE/1zkDTotEWYD4SY9QQYdwVLkhfCT\ngi7atFMuJwerqvjriuVoe/YguFcvilwuPBd9G1rjguJi0VhCcJeWYbCGX7LjXA6us8UYrOHkTJ7Q\n7G0jtYbaUeJ+nvOK/OkKB3qdhmCdjkM5P3Jkzy5mzZlNhNmAxaBHr5Xf5EXbJAVdtBk+4KTTQU5V\nBdk2G4cdVZR7FP69+BlOfLoGXXAwyc88TezIGy95X4JiY7EXFKiuoNvz8wmKi7uobcM0uia39Sg+\nMv+1lv9d+BgOu51dP/7Iw8+mYTbosBj1xAWZCDcbsBirp+EJ0RZIQReqpfh8nHI5ya2q5IeKcg7Z\n7T9fQj832vM6nThOF+BTFDw2G5XHT/wqfTPHxeHIzyesR9Kvcrxfi6OgAHNsbLO30wAGRdOs6yKn\njhyi0lb9uM+Ck8ex2R3YPUZK7G6Ol9kJ0uswG7SEGw20CzESbjIQapSvPKFe8l+3UJVit5v99ip2\nlJex315JicfN2fNuvqpNazLxm//3B3Y8/DtMkZEkTpn0q/TTHBeLI7/gVznWr8mRX4A5rvkFvZ3O\nRHMjru6ePpddW76mrPgsM55+Ab2h7txqu0fB7lEosbvJK68iWK/HpNMQYTYSY9ITFxaEVi7PCxWR\ngi6ueAUuF7sqy/l3aSknXU7yXU48zagOQR3j6f+X/2HP5GmX/E7wGubYdjgKCn+VY/2aHAWFmGPb\nNXu7DvrmB51otVoKjh8jddxYYjt2umBbnw8q3R4q3VDscHPa66Vybz6W8CBC24USbA1Gq5eb68SV\nTQq6uCIddzr4rqyU721l5LucFxyFN0VwQkcqAFdxMcbIyJbp5AWY42I5s2XrJT/Or82Rn09Yr57N\n3i5CY6C59yEWFxageNwMmf2HZh8vxKfB63RTXuimvLAcg8mA2WLG0s5CSGQIOkPTf88XorWQgi6u\nGEccdjaXlvC9rZTTLhdVSiOxZc0U0a8vJTt/JHbE8BbdbyDm2DgcBfmX/Di/tou95B6l0Te7oO/P\n3k6PlGubfSyAUGfd4B+3043b6cZ21obeqMdoMRIWFUZIdAh6k3xNiiuD/JcqWi2Pz8dhh50tpSVk\nVZRT4HJS2cJFvDZrv6sp3bnr1ynoKv0N3V5QQNBF3BQXpmn+V9G+H7bTs//FFfRgu7vBvx88Lg+e\nYg9VxVXojuowBhsJjQ7FEm1Bb9ajkbvmRSslPxqJVueAvYp38k/R/4FURtxxB6uOH+WwveqSFnOA\niKuvpmTXrkt6jBpBcbHYVVjQL2aErtVo0F3E/7X7s7PokTKg2dtZfOBzBY7mPZ/iVrCX2Tm65yij\nbh3F1AlTOXPkDM5KZ7OPK8SlJiN00SqUeNxsKy9jY8lZTrmcZL+1kn3vfwA+H56FPvr9OQ3NJc72\ntvbrS+nOHy/pMWpo9HoM4WG4zhZjjLr0v9n/GhyFhZhjYpp9Y2F7nbHZjLwr2wAAIABJREFUMT6K\n4uFwzm66901p5pZgdTXvrwfFq/DEC0/wxbdfoNVo6diuI9MmTMMQbCA8LpzgiGD0Mh1OtALyX6G4\nrHIqbHxecpa9VZWcdjr8X+wavQ6dyYTicKC3WC55Ma9RU9St/fpe8mOZY2NxFBSop6Bf5B3u7S/i\nUZ77f8iiR//mj875/+ydd3hUZfbHP/fe6TPpPRBK6L2o2BEVFetasXfFVVfXXtaGK2uvv3V1BXvH\nugp2QERFmvSSkEJCSO+ZZPq99/dHiIKQzL2TmUnA+ezj87DJ2wKZe+457znfA8Rp9M47kESJOFsc\nAEajEVEQf7tzdze5MdqM2OJtxGfEY02wxtqLx+gxYgY9RtSp8/tZ2FjP4qYGKnxefHtpcNL/vHMx\n2h1se+sdzh6QS36UzpY0fjyNa9dGxaB3hN3jR46I+F7RINSEuMQQMtzz1qxkeAgJcQYVRJdP97zr\nLr2OZeuXccsVt3Dacaf99nVVVfG1+fC1+XDWOjHajMSntSfTmayxnuMxokvMoMeIGutancyvr2WL\nq1VTmVn2qSfjqalhXmsL0dJTSxw3lop586OyV4eHvr8Qcoa7ZAR9TjP5q1dx3Hn6RYCSFQUU/Tr9\nc+fN5eK/XLybMf8jckBGbpHxtHgwVhox280kZCQgGdqwJur/e4kRQy+xpLgYEaXG7+OT2mquL9jC\nAyWF/NTcqKtmPOukaVR++XUET7g7SRPG0bgmOolx+1umu6e6CkuGfh13h6r/MZS3egXDJ07SNUcF\n4jyhJVbOXzCfU6aeonm83+WntbaVys2VlG9YQcXGhbTVR0dWOMafl5iHHiMibG5r5YuGWra0tVHp\nCz0j2JqVhTk9jaZ160kcF/kwuCkpCUOcA9f2Mmz9ciK6lyUzk5YteRHdI5p4qqpJHDdO1xyDICAp\nIqqOmHt5cSEJqWk44vU1thEAq6fzcrXOWLV+FTnZOWSk6veyFSVAwFOKu8WLq6kSky2exD6jcKT0\nQzQYda8XI0ZXxAx6jLCysqWZT+urKXa5aZZ1xlE7IfvEaVR89XVUDDpA0rixNK5bH3mDvp/Jv4aS\nFNfXYEbVKeIearlavI5ytV2Zv3A+pxyr3TvfFVGqQZHbX2jdzdU7/6vFEpdCfOYQHKn9MVocIa0d\nI8YfiYXcY3QbRVVZ1NjA3wvyeHh7MWuczrAZc4h+2L1DYCbS7Hch9xDu0DNCyHDfsnoFI3SG2wES\nQjDmoD/cviuKv2SPr/lcTbRUF1GVt4Ty9d9RW7QCb2t9SOvHiLErMQ89Rsh4FIVvGuv4sq6Ocp8b\nWX+ukSaMCfEkjBxJ3S/LSD30kMhssgtJ48dR+t7ciO9jcWRjNQxGrpIQE1UEy57Z/vsMqoqnthZL\nuj4PPSGER1D+mlWcfuV1uuc5vPoN+g/Lf+CAMQfgsOn3okVDK57muk6/H/C6cNYW01q/HWdtKdaE\ndBIyh2BLyta9V4wYEDPoMUKg3u3i5RXLyc9I69b9uB46vPRoGHTH4EF4KqsItLVhsNsjsodSbELJ\ntzHkyJkEFtkR4wWkg12Iad1rMrM3RMGKGOGPeqgZ7qmiEXTkqbU2N9FcX0ef3MG69jGqKpJL//15\nd7xzVd6ubZwSoK1+O20NZbQ17KCkooWDp55BXJL+BMMYf25iIfcYmqn3+3m9qoKDzjmbf150MYsf\neQx1LzXkkSDrxBOo/OqbqOwFkQ27q9VGAqsdqG4BJBVF8YFPJPCLHbUmvIlS8iYracJ0UtWzkDdZ\nwrr2roSq4W5HX1ezUOvPU2R039UDfLHwC04+5mTd8wQhgK9Nm0HvQFEU/vnkbC678T4unH4GlZsX\n43O36N47xp+XmEGPEZQKn5eXKsq4vTif/377NTt+/gXXjnKqvv0O1/ayqJxBNBpJO+pIqhcsisp+\nSePH0RgBg64oCkqeFUFsNy6i0YgaaPfKBb+IUmQO315VBtRNVgTBiIARZZMVpToymdWe6mosOg26\nEUGXdw6hN2RxePVHPr78/kumTZmGGIJKoSBUoqr6QvwlO2r47qcNlFfV89OKDSz48hNKln9MVd6P\n+D2tus8Q489HzKDH6JRyr4fny7dzb3EB/6urodLrJWHECOKHDsEYH0/C2DHYB/SP2nmyT5pGRZSS\n4yKl6y4ERBT379qgotGA0lGXL6jQJoXkSe4NtcbEriXeqqiiVkXIoIcQcs8x6o8YhJrhbnbrN+gh\nh9tVlYBvm+5puTkZjB7al3iHlWG52YwY1AdvWwO1RSsoWf4RNVt/IeBz6z9PjD8NMYMeYw9aAgFe\nqyrngeJCvqiv3e2eXDSbOGj2C4z+5/14VqyK6rkyjj2G2iU//m4AI0ikOq8JJsD4+zWFYDSi+n/3\n5FSrErb2nGKWH3UXVTRBERH76Jc91UIoBj1djI6Ge4Kqgl9fKMDj9bD016Ucc9gxuuYBSKZmAt7Q\nQuXr87dz8qmnM3vWNZh3afjiaa2numAp25Z9QF3RSmR/rNtbjD2JGfQYv6GoKv+rq+G2onw+qKmi\nvLOHhiCQcfQUbIcfRsUXX0b1jNEqYRPNJhy5uRERfhEHe39r4CEajL+9oCiKgjTSFbZ9hDQ/0qQ2\nZMWFrLqRJrUhpIavnHBXQjHoSaK+RL2C9WvIHTUGSdI3L0FndzWAeQvmcerUU3XPA5D3Uqqmhc8W\nrOTQCUO5+8IDOh3jcdZRmfcjxcvmUr9tDYoc+ZfbGPsOMYMeA4DFTQ1cV7CF2RVllHk9muYMuvoK\niua8GuGT7U40k+MiFXaX+vswjHOBQUGUzCALYFMwHeZCSApvz/f6su9Z/dE5/Pr+WTSULw7r2h1k\n7djBgOJiUuLjdc1LFvSF/0MNt9s9+l9ivlj4BScfqz8ZTpR8+FzluucBzJm7kKvPPVbDSBVPSy2V\nW76naOn7NJZtQPVHJvISY98iZtD/5Kxra+WWwjyeKiul1OPWVdZjHzgAR24u1Qujk6gGkHroITRv\n2YK/qTnie3V0XosEQq4Xw9GtNAoLKSuYTXnZywjZ4fe2qr78Gl99A77GBiq++CqsawuqyuX/9zyX\nXXsDT9XWcufjTzF21a+a59t0ariHkhBnBES3PmNX31hPQUkBh0zQWSKpAkoZhJAD8c2P6xgxuA/9\nslK1b6eqeFpqKN+wkMbCVajNjSCH94Uwxr5FzKD/Sdnh9fBQaTEPbitgi6uNgBpa+dmgGVdSNPuV\nMJ+uazqkYCNNhwRspGirKWDruw+zY+nblHzwKo0RiAbkXn0FjoEDsPfvx6AZV4ZtXUFVufqJpxn/\n3UIcFZWY21wkF2/jiocfo19RcdD5FlEEnb9y+WtWMkxnyVpKQNHdmjXkcLug4PeU6J8HzJ67gBnn\nTg1pLgLEOzIR2tqguRHc4bu2ibFvETPofzJaZZlXKndwZ/FWljY34u5mHXn88GGYU1Oo/WlpmE4Y\nnGiF3S1ZmaAoEdNbt/bJxpSYBLQ3hXEMHBD2PRy5A0mbfAQH9B8Q1oqE/kXFDNu4GdVqRTC032kL\nBgnBZOL0d98POj9H0pfhXlNehsFoIjld3z19nFe/x/rFotBqz0WpDjmgPwv9hxWbyU5PYsiALN1z\nAdKzRmMQDaAq7ca8pRka6iBKok8xeg8xg/4nQQXm19dya1EeH9VW0xDGTPHcq6+keE70vPTEcWPx\n1tbhrqiIwl7jUH6OzMuKZLFw4Iv/JnH0aM489DCMCfruoLUims1UjhkV1jXtTif2VieiwYAlIx2T\nyYS9f38EUcTudGIM8vuVplPDfd2yzQw7uPNe5HtDUMGsM9y+vXw7zc5mxgwfo2segOIv1T0Huued\nSwYLqalDdv9iwN9u2J3N7f+Fsa9CjN5NzKD/CVjT2sJNhXm8VLGd7R5tCW96SBo/DsEg0bBqddjX\n7oxoZLvbW1uZXVzMw48/xb2XXEFSffgbaBgTE7BkZ7J21PCwrx1JWhITaUlMBECVZVSrBUGSEGWZ\nhtRU/MauE96SBO0KcRtX/MyCD14hM1ufFGoCKqrOcrV5C+dx6rH6w+2i5MLn1t9oZ/m6AmwWM2OG\n9dM9FyCr7zjEzsocPR5odUJzE7jaQlo/xr5FzKDvxzQHAjxdVsJjpSVsdbURiFDzFIBBV19F0ZyX\nI7fBH8g+8QQqIhh2FxWFv910O32Lt2F2u7FtLeDWm29HCJPoy65YMjLwVO9bXdfKBg5g2ZTJCLKM\n4vcjGo2ggttm5YvpZwWdn6Qxw71iWxFvPfEvCtf9xBevP07RRu3aAPGhhNtDzG5XlRC98/cXMOO8\n0LxzszWBxMQgLwKK8ru33lAHGitYYuybxAz6fsrCxnpuL87nu8Z6mqNQq5pyyCQCrW00b9wU8b2g\nvYGKIAg4Cwojsn5iQwPpTQ2o0k5PUhBIcrnIKdavABaMfbWN6ieXXMQ3Z5zODqOR5vgESnNzefTx\nR9gxYEDQuVaNGe4pmVlIO+/o7QmJiDpq0B06ytWa3QLfrdmOLT6L3H65mucBiIKCz63foK/dUoI/\nIHPQmEG65wJk5UxEswRRIPD7/XosG36/JWbQ9zOqfV6OvuVmrrzmGkpbotvYYdDVV1IUxbv0SCbH\nua1WWjOzsPXLQbJaSbLZ8FktNKZqLyvSijUzE3dVVdjXjQbzzzuH6wcO5IErL+Pph+6nPi0t6By7\nYNCc4W622rjolnvo06cPd/7nVQaO0JYLYEZA0Hh/XlAr8tJSE/PyUxl05BO0enUq9YmVqCHcU2uv\nO98TR3wWcTb9v4seZwvXXH89Dz/wAERBcTFGdIkZ9P2Ij2urOemeu1ny7+cp/fBjNtz7QFT3T58y\nGXd5RcS85j8SyXt0t93OGzdchxwfT5LRSIPJyMu33IwzAolr+6qH3kFdXR2eQbmoGpuY5Bj1NaDZ\nvOoXDj3tHAYO157Yl6Tx7tzlE/ihwICigrO5Bnt8Gh+u1Sd4I4eg255XVE5tYwtHHjhC91yArJwJ\nIc27+MabmP3Oe8x87DGe+tcscMa6ue1PxAz6fsA2t5ubCvN4pXIHXrPlt5amgmQISeSiO+RefQXF\nUVKPs2ZlYc5Ii4iaG0DxsKE8+NzT3H3tDC7r359NE8ZFZB9LRnrESuOigae6BktGuubxqWLkFeLi\nfNo8ZrMRWr0ibe42TEYTRoMBSVSRNUYQREMzfk+TrrMBzP5gITOmh+adJ6UNwmK0656nKArGncmK\niqoSZ7O2363XVse89f2EmEHfx3mnuoJ/bNtKvqsNFciZfhaDZlxJysEHMTogQ5gafWgl64Tjad68\nGVfZjqjslz1tGqkvv8L4H34ipbY27Os7E+KpPfkk8jZvDvvaHZjT0vDV10ett3w4Ufx+Ak4npuRk\nzXP0Sr5u0akQJ6hgdmkLt0uCytShThqbGnHEpSIgcPQQGUnjk1GRtd+dd7xbl+yopbC0kqmHj9U8\ntwNBEMjM0l9SByCKImNGjCA3N5d7/34jMy68oP1QPi/U18a89f0AfV0OYvQaClxtPF+xnQKXaw8h\nrMHXXgPA0ukXMDp/K/HDhkb1bIOuuoKil19lzIP3R3yv+9etY/DKX3GsWo0yaBAfXH0Fy6ZMDuse\nxoR4TElJtJWURqxdbEemuzUrNHGRniKkpiyC9sdOWWE+qZnZ2Bxx2tdXQQ1oezlye9w8/cz1tKrp\nXHDe3zl2rIU4s7a5guTD5wz+4lrUkMKm2ixaPRYcZh9Ll3zM1dNDy2xPyxqNQWeEo4NV69fzyRdf\nUrTk+z2/KQfaE+Y8bkhMhiBlhzF6JzGDvo+hAm9WV/BNfR2Nga7DZGNmPcj6e+7n8A/fi87hdtLn\n9NPY+vyLeGtrMWtIkgqVi16czehFi3F7vTgBS3U1lzz/Io0pSeSPCc2L6YzE8eNoWrsucgZ95z36\nPmfQq6uxZOgz6GZV0KzGmrd6FcN1tkt1aAy3A7zy/iss/bVdOEhuLeD0lz7WvpFajhpEMvmrghFs\nqc0ioEhIAngbZBrtZ+DJMCGrq5F0BNAkyURaeugv55fedAsf/vfFLkbs4q3bHRAXGaGjGJEjFnLf\nh8h3tfL3gi3Mra4MaswB4oYOIeXgSZS89U4UTrc7ke7Ell5VxYh161Hi4xEEAdFkxJAQj2KQOO7z\nL8K+X9L4cTSuDX9/9A721cQ4vR56gmhAT9uAUBqyODza74OnTZlGdmY2ZrOZow87WscuKgFP18lw\nS0oGs76qL6oqIgkqoFLf1ERakoNtDSl8uklfYltm33GIIT6yH3/hv5wy9VhGDh0SfHCHt14Xu1vf\n14gZ9H2Ej2ur+VfJNgrce4bYu2L4bTdT9PKrUelOtiv9zj2Hyi+/xu90RmR9FQFBUbCkp2Eb0B/V\nH0Aym1EFAaMv/K0kE8eNpSmCjVr2RXEZ0O+h9zXq03DX25DFrILg1m6EBg8YTHVNNZdccgl/u/Rv\nmudJhnpkf+dNUOpcdjbWZmMQf/+0yrJMS6ubpAQHkqiyvSWFogZtESyzxUFS0gDN59uV6to6np4z\nh8f+cbeOWSp4Y3fr+xoxg97LaZNlZpYU8kZlObWB0AzV2Idmsv6+meE9mAYi2YmtLiOdiv79EGUZ\ng82GIc6Bv6UFk9fLj8eH2LWqCxy5A/HW1eOPUG3/n8VDT9WRENfSUE+bs4Ws/gM1z0kO6BNM+Wrx\nVxw/+XhuveBWXfPkILrttW0OWty23b/W0EJa8u9hbL8sUdGiLaytS0TmD1x28628/sxToU2WA6ht\nLXj80XUIYoRGzKD3Yta2OrmpII/lLc349faA3IW0yUcimU1UfbcwjKcLzoBLLmL7+x+gRMBjVgWB\nF++6nbqMDCxuNzaHA7mpme9OO4VVhx8W9v0gsl56RDx0VUBtlLAKQ7Gog1EbJd2tRIPhrqrGqsOg\n60mIy1uziuF6y9W8+gReQpF6FSU3Pldll2N8AWN7uv1OFEWhsaWNlMTfk/tEQcUTCB6xsMWlE2fX\nl6fQwfuffU5iQjzTpkwJaT6A327Ga4RWWlHD/QsUI6zEkuJ6KW9UVTC/vobWMEk0jpn1IIuOmkrm\ncaHVvoZKx136kOv/Gva1ZUniweee4vCFi0iurWPuE09jueiCkD2ZYCRNGEfjmnWkHXlEeBdWRGxx\nA7Eow1FKzGCXEdO61yFLbZJQVttRGiUSxWMREQgsikdIDiBNcCMkhqcDl96Qe6Ieg663XA0Vo8Zy\nNQCP18NPK3/i+Yee1zwHQFXKgo5JtLQh7WL8ahtaSE3a3RsPKAKZcY1B18ruG5qIDLQnwjm3bgl5\nvmIy4IkzAyoyMk6cWLFiJJYF3xuJeei9jMaAn9uK8plbUxk2Yw7trTqH3XoTm//1aNjW1ELuVVdQ\n/HLkkuNUQeCnqcfy+fnnUnjyiVREsANb4rhxNK0Lb2KcUivhX2jHXDSGjD7TkVfYCSxx4P8uDqVZ\ne0ey3dZslgj8EIfSJIEAKn4U/O1/bjQg/+Bo/14Y8FRVYcnU1gVNAEwaNdxB//15sgLI2j3I+Qvn\nc8qxp2geD4Ao43eXBB3WP6mRVHvrzv+nUtfo3C3cDpBibaNfQtcGPTF1AFZzaNnmM+64i+f/9RCm\nUEvQBAFXsn03r1xFxYULN/r7vseIPDGD3otY3tLMTQV5bGprjUhgq9/0s2nZkkfTho0RWH3vCKLI\nwMsvpfiV10ipqcHa1nkiUXeJpLY7QNL4sTSGU5Wuzoi8zAFOA4JJQvG5UCUFQRBQnRKBhXEoVfoe\nxqpHQF7qALnzOIUqC8jL7Ki+7sUyZI8HxevT3Mc9WTShKtp/s/UqxOntrhZSuF2oRpG1RQHOGrUG\nkyGwx905gKIKHDdoMwmWLgyjIJCZrV98BuDnlavYXFDA1RecH9J8AE+iDbmT9z4fvlgIvhcSM+i9\nhNcry3mibBs1/vDfN+/KmIdmsiHKCXJDrrmKu9+byyWXXMEN/5zFoLy8iOyTetihNG/ahL85Molr\ngsFA/LChNG/qvmqc2iLi/9kO/t8/gqLRiLqzTEjY+T/5Vxtqs/YwtZxvRW3T4H23GVC2WnWfe1f0\nSr72MZo0j81f+ytDx01E0KF0aNVRrlbfVM/W4q0cOvFQzXMAZG+J5rEW0Unt6pm01G6hb7oNWVEx\niDIp1lYuHLeSgckNXc5PyxyJUdSne99BtxLhgIDNjNfW9e9dRwjeT6y0rbcQu0PvYRoDAR7fXsy6\nVmdU3nXtAweQcfQUil99ndwrLovCjnDLZVeRVt+ArCgYnK38fXsZ/3zuKerStRsDrWSdOI3Kr76m\n33nTw742/C4wkzBqZLfWkfMt7cZ8l7Im0Who7y1u2sXwuSWUrSakgzTeeddKCELw3yQVBaVKQhqt\n9+S/oyfcDjslXzX+kusNt1tVEHQY9JC8c6MTT1vXRnhXbpr1Oj/9mofVupAjcy7l0EkHYTcESLa3\n7na/vte9RIn09OG6ztfBrOf+zXl/OZXBGtrY7g3VIOJOtKLlH6sjBG/GjAV9JYkxwk/MQ+9BVjtb\nuLM4n7VRMuYdDP373yh95328dXUR32v06rXkNjYi79IkRpBlznr97Yjsl33iNCq+itw9ejgEZlRZ\nQK0z7GbMAQSDEcX/B8Mtqii1xi5D6L8REFFVAS1ZgYIgICgiSjcCQnpL1vRouOtNiEv269PBn79g\nPqdM1Xd/rga067b7fAHEnTJwAb+PzHgvAxIaSbM7gxpzgIyccYiC/sdzWUUFs995l4duv0333A7c\nSQ4UDS+Fu+LFixNnLATfw8QMeg/xxKIFnH/ttWwt1t96MRyMnfUg66PRXlVVkOIcmFNTkaxW4k0m\nBEFAkQSECHSCSxw/Fk91DZ7KyPQXTxw/ttvd3QS/APKeH71dQ+67oYCqxfk06DBqKiApiNqj4Hvg\nq27UleGeoCPDPX/1KobpkHzVI/daVllGY3MjY4drv58WpAA+V/Ds9g5MJgNnHXcI2dnZzDh3Kkcf\nrL31q9FsJyVpkObxu3LpTbfwxrNPhzQXwBdnxW8KLbdCQcGJEx+RvTaM0Tkxg94D3PnD98y85DK2\nvvMuq2+4KWJiJV2RcujBmJOTqfjiq4jukzd2DNVZ2VjTUrHl9KVpp3Lct6f/BTVCneAi6aVb0tMR\nJAl3Zdd1yF2hAkh7vsyIRgPKXiR9BQEEo7aXHzEzoK1jriogZoRYRaEIBH6xk+CeRrr9XE139gLa\n3zeqtpdgsdtJTNGmoiaqYGzTbkRC8c5Ry1EVfX9fs178mLcevYprzj9O17ysvhNCKr1848OP6Nen\nD0cfpi8voAPFaMQTH9qdfQcqKh48uIhc8muMzokZ9CjiUmRuLczn57oaZK8HAFVV8TUGr0WNBGNm\nPciGCHvpAaORh598lOKhQ2hNSaE5MZE7jzuW0kG5Edsz0tnu3fXSBYuCGC+DsvtjWzDuJeSuAkkB\n0FhlJg33INiCW07BISMMDa30SF7qQC03ISpWTEImgYW7J/ftjXSjScf9ub7s9iRV1dV6Vu/9uYqq\nKxkO4H8LVnL4xGF7ZLcHw+ZIJSE+tAY93U2Ec6VYwxIyV1Hx46eNtlgIPsrEDHqUKPG4uakgj82u\nVuKGDGbUPXeTNvkI4lxuzCkpPXImQRQZdf89bJz5UET38ZtMPPvAvTw78z4e+c9zfD0v/M1TdiVu\n6BBUWaa1qDgi64fjHl0Y7AHT7h7fXkPuIkgjvdoXNioYDm9F3UsEoANVUpEObUUw6X/YKk1Sew27\n2N4LXTCKqG4JuabrR0m2jmxtvffn8TrU4fKK8jAYDAzuP1jzHIOhiYBPX0+COXMXcPW5+iWIs/pO\nDEnNr7vG3JtoR9bT+k0DAQK00YaCvvyGGKETM+hR4JeWJu7dVkjZTq8cIP2YKUx89imGvjabn88O\nvVa0u/Q94y+0lW6ncfWaiO6jiiJ1mRlIw4YSN2RwxGVos0+aFjGRmY5M9+4gZgSQRnh3E0IRDUaU\nXQy6qqiI49p0q7oJ8TLGY1oQUtrniYIZQTWhqipiqozpGCdCQmjhdiFOQd15ZtXvRzS2S5yKxq6N\nQZKOhDi9HrrNo/3vJ5Rwuxwo0TX+6yVrGTUkh5wsfS/qCck52CwJmsfXOlW21cKXS1ayvbycS885\nW9d+HchWMx57ZAqeZGRcuGKlbVEiZtAjzIe1VTxZto36vdSXC5KENSuL4bfdzJpb7+iB07UzdtaD\nFD3xJoFlDuT1tuATuknu1VdSPCcyTVs66ChfiwTxw4fRum0bird7yT/iEA/SoS5UiwyygCAYEJFQ\nfSqqScFwoAspN7Q9hDgFaXIL6kHlbNvwDNs2Po14aCXikc0QF7oCoSCpGEd6wKeCICLIBoTsAEJ6\n1w/sFFGbwfC42qjesZ3+Q0doGm9TAD3laou+4ORjtIfbRcmLr61c83iA2XMXMCME7zwze7zmseu2\nw8OfCcz8GB76n4FHHnxO934AqiDiSoxsuZmMjBt3LFkuCsQMegT5d/l23qyqwCV3HXLKmHoM9n79\nKH719egc7A9YLf0YftSTeNY6UbZakH+MC3sTj12JHzYUc3oatT/+HLE9rH2yMaek0LR+Q0TWTxo/\nnsa1a7u9jtjXh/EYJ9KBLtS+LTS71lDb9D+MR7cgDujeA1AAtr76NDt+fIsdP75N/stPhUXnXhji\npbLxDZzu1Qjj6zAe3hZ0TpxGyQu94fYkHfLIv274leyMbLLStd9Rq6r2zHaAxcs30TczhcH9tdfn\nA6RmDMNk0GZYm1wqcxaCxweNjVVkpPfh03Xp6OxLA4AnxY4SBSugouLGjQdP8MExQiZm0COACty3\nrZAv62sJaCzNGvr3v1G/fAX1y1ZE9nB/RAV5mwVzahq+pnqUgBe5XgJvZH81Bl19JUUR99IjlxyX\nNu44lLWOPRLbQkGwqIgDPax74xry5t3FppfvYsdXH3f/kIJA/LChiAYDosFA/IgR7Snz3WT7hx+R\n9/Ij5H1+D2uf+/tuXcU6w6DR7urtsBbn1m7F9CbDCaJCQINu+66oL7mTAAAgAElEQVTMfn8BM87T\n552LooH0TO1lbY1tIm4/eH1eGpqayUpPp8Uj4NH5/ud3WPGZo2sCvHhpI/gLYIzQiBn0MNMc8HND\nwWZWOfX3Dz7opRdYe9ud+J36EnC6hQAk+iHQ7tW6yysQzCqRbqaUOG4soslEw8pVEdsj66RpVEbi\nHt0jkp5wJmbPQAKruief2oEqy0gWy84/Kxjj44LM0Ea/86bT5/RTOWDCBHLOOSssaxrj43/LKhfN\nJtQgXnJfo1lzwCdv9QqGT5ykaawIGHSE2/U2YxGFOuSAdo/ylzVbiXNYGT0kR/McgPQ+Y5AE7c1y\n+iQpJNhgW1kZA3P6oqqQaleJ1/GrqJgk3PHdECHoBgECtNIaS5aLADGDHkaK3S7uKNpKkTv0TkSH\nvvcWv5x/cRhPFRxpsBdxiBdDkgUpwcK6965g6/P/F/F9O1qrRgpTYiJxw4eGPeqhGgMoBieehgrE\nzPC0IRUkiXEPP0TqYYcyccIEMo/XV7vcFabkZJom6esr3hVZJxxP9mmnMGjQIMY9MgtB6toYZUja\nDIeyYS05K5drTohLVlTUINdZPhm2VEt8uGQj40aNJ96hvYws4Ncn+jRn7kKuPldfe2KD0Upqij4R\nmfsee5QfPrycjCQ7CXF2spPgjlMFXcEXd5IDNVJ9hjUgI+PxNyITns9PjHZiBj1MrGxuYlZpMdu9\n3bsjsuX0ZeiN17P29rvDdDJtSAe0wUFVbP31durW/ci219+kdsmPEd0z5eBJyG53xO65IXwiM41r\n1lL40hxWXDmDbw88hLzF92A5SUDsF75EH8lmI/O4Y6nur8/D6xFUFdulFyFZg7uFSRrCPer8Txl2\n8Zk8JkkkPDFL0xHigmS3t3hgzi8mPl5nZHFZDhkHP0mzW5sVk4wu/O5aTWMB1mzehqwoHDhan3HO\nypmAoCOz4fNvv+PJl2az+tdFNKy+k9tOcHL/meDQkdfmTbAR6AVdPER3C1LJUlBiRj1cxAx6GFjY\n2MCzFWVU+nTUC3dB5vHHYc3OYtvrb4ZlPa0YM2y/CUEY4uMQQtCS1kukvfRQs92bN21m22tvsura\nG/jmgEPY+tzzICsMvvavnLBmBQf+9zniDw6/OI4lMwNPVXXY1w03enTcU8TgBr3h7dfA48Hj9RBY\n8BWqO7jSmK2LcLuqwpsrTDg9AgZRpaW5FrsjlbdXmfBr0MVXdOi2A8yeu5AZOr1zqy2JxPg+uuaI\nokhifHuUwSCJDMjUdzUjW414HBG+T9OAyd2KpaYI/B4o/Qk0tqSN0TUxg95NvqqvZU5lGQ1hbns6\n7OYbqf1paUTvmPfGxGefIvfqK4gbMoQxv3Y/izsYaZOPxFNVhXNrQUTWF80m0g4/nOpF33c5TpVl\nqr79jnV3/INFU45j878exdfcxICLL+D45T9x8OsvM/i6a0g+cGJEztnBvmPQtXdac2iQuWu9/X4K\nHXG0mEwUXHcLgrXr8kkH0FVad0mjQNNOb7zZ2Uy8Ix5BEGh2CWxv7NqgC6KM37U96Jk72FJUTkOT\nk8MP0NcdLavfAbrGA9isVhKTk7nnxhv436tzdM1VRXAlRr4sNRgGrxtrRT6oO69LAj4o/Rl05CvE\n2Du9IPCy7/K/+hreqaqgVUfpjB4mvfxfFhw2mSnffY3BHp0Pomg2MfRv1+Gtq+Pdcy/i6Juuj/ie\nHV76+Cceicj6HclxGcccvdvXA21tVC9YRPXC76n96Wcyjj2GjKlHM3rmvUi2nnnwWTIy8FTvAwZd\nYy90EQFJEYJKgPY/4ECus1o57fS/cMK5FwZdNyFIMxYBkHa6K80tzSQmJAKgoBJcEK0CRdGebBeK\nKlxcYh/sliRdcwDOu+5vbFr0HWkhqEt6khxRKVHrCkMggK0ib88wu+yH0qWQMwlMjp453H5AzEMP\nkbk1VbxZWR4xY97Boe+9zS/nXxTRPfaGOTWV/hecy9b/+0/E98o8/jha8vJxbdfuFela/7hjqV60\nGFWW8dbVs33uh6yccR2LjzuJhl9X0/es0zlh9XLGP/EIWScc32PGHMBgtwPtLxu9FX9zC6LZ9FtW\nflf0NZpRNZRuNlRX4RNFTrj3cU1niPN0/bnrlwTpcQqyouJscxLviEdRIT1OZUBK14l0sk97Mlxx\nWTXFZTVMPWyM5jnQ3oBFL3f862Fu/+s1IRlzv8OCz6I9kz4SCHIAW/kWhEAn0UwlAGXLwaO/QihG\nOzGDHgJvVFXwXk0lbh0NIULF3r8fg/86g3V33xvxvf5I7pWXU71wEW0l+u4TQyGSd+mBtjaGjhlN\n+tHH8/P0C2gtKib3ysuYuvQHxvzzAdKPmhyRfUOlt4fd9YTbMyRtGu55a1YyfII2QRlJBcnd9RWX\nKKicN86Jsz6PlIRkUFUy4hWuOKTreZLUTMCrvfthKJntyRlDMRv0lTtu2rqVLxd+z+3XXqNrHoAq\nGXB3s4tadxFUFUdFAYIvSG6EIsOOVeCqi87B9jNiBl0nL1WU8WFtFd4oGPMOsk6ahjklmZK33o3a\nnh1EoyMbQJ/TTqF+2Qo8NTVhW7P2x59Zc+sdLD3uJB4uKOQup5O/2+2MuONWUg7WVuvcE1gyM/FU\nRaafezjwVFdr7oOeqLEHuh6FuBRFBaVrr9/n93HtP2bw7VtnEyidzQUTPVw+KYAhyBNPlks0nQGg\noqaRNZu3cfIU7XkVgiiRkaFdRKaD7vQ5d6XaerREDVTsVUWIHo0vSqoMFWvB2Xs/A72VmEHXwX8q\nyvi8rgZZo/pbOBl+2y1UL/o+4k1U/kjimNHEjxjO9g8+ivheg2ZcSdHs7qnHtZVuZ+tzz7Po6OPZ\nPvcDsk+cxoQ3Xma+ycQmReG9piZa8reG6cSRwZqZgbsXe+juqmqsWjPcNRp0PQ1ZHN7g99tbCreQ\nX5yPy+0ib8MCPC2FiEEU7UTJh9+1Q9MZIDTN9vSs0Rg06tp38O/XXuewAw7ggLH6wvoAvngbAUOP\nWnNsNduRWuv1TVIVqNoALdr/PWLEkuI0c9/iRaxJikcJg3RmqBz82hy+m3Q4x/y4CMkcvRDayHvu\n4rtJh9PnL6dGdN+cc85i4eRjGHrD9RgTdPSRVlV2fDaP8k8/w9fYSJ/TT+OIj9/HlJz825AlZ5/B\n15/NRzhwIgkjtTX+6Cl6f8hde8maQw1+bysH/GzbsonBY7Q1J7FqUIcbO3wsRxx4BKs3rea0405j\n6MChQeeoyg5N9/0ADU2tLF6+iZk3nKNpPIBktJCaOkTzeABnaxv3PPY4LXmbdc0DkM1G3HE9W6Jm\nbajE2Byqp61CzRaQA5A0IJzH2m+JeegaOHvWQzx39QyWXXMdsit4fWwkOfT9t/jlvOgqyUH0Qu96\nNN5d27eT98TTfD1hEk1r1jL05hs58vNPyL3ist2MOcCQ668l845bkTZsCoueeSSxpKeH9eoh3GgN\nuZsQEDTcTOnRb49TAW/wRFRBECirKOOoo4/ihstvCL6woOL3ak+Gm/PBAq6ers87z+ozHlHn796l\nN93MG88+o2sOAIKIO7lnS9QsLfWY6ruZ6KqqUFcAtb07qtZbiBn0IDy4cjkLP/oIZ2ER9StWUb1w\nUY+ex5Gby8ArLo2Kcd2VzOOnIrs91P74U0T3GXDxhWz/4MMuW5M2rFrN6htvYdX1NxE3ZDDT1q5k\n9IP3kzR+XOcLCwIZxx1LXSCAu7IyAicPH73+Dl2jh55j1CZfpifcnuDXVlWyvWI7TS1NzLxmJoIG\nIypKdSh+bZLNLo+XT79dyYWnHaFpPIDJmkhioj4FwM+++RZFVTlj2gm65gF4kmzIPfh0N7W1YK4u\nCtNqKjSVtofgY3RJzKB3wdNlJaywGIkfPgyj3Y61TzaOIYN7+lj0OfVkDA4Hpe/Njeq+Y2c9yPqo\neOlXUTTn5T2+XvnVNyw9/2IKX/wvfc86ncnzPqHP6afpWjtiDVvCSK8PuWv00FNFbRruehLiHBqb\nscxfMJ9TpmpvxCL7SzSPDaWjWp+cibpb14aaCBewWfBae65EzehxYa3cSnh7MKvtSXI1eWFcc/8j\nZtA74eWKHSxqbEBRVUbefQfjnn6cQ998jY1XX9crwqEj7rqdyq++oWndelBVMssrIr6nMTGBQVde\nTt5Tz0Z0nz+WsJW89Q7fTz2Rmh+WMPq+fzDpldkhl5pFsqVquOj1Bl2jh56sMfkrf/VKhmkw6EZA\ncmsz6F8s+oKTj9HWKlUyuPG7tP19K4rC65/8wBVnHx188E4cCVk4bPpqx2964EEevO0WEuL0Sbuq\nkoQrsedK1CS/F1tFfnumethRobmsPQQfY6/EkuL2wosVZXxZX8Nvv5KCQOohBwNw2I+LWHzcSRzy\nzutY0oMrZUWSQ958Fc9Jp3GPrGC1WJAy0nj3r1ezYWLk5EkHXHIRP599Hs6CQuIiGK3IveoqNtz+\nOOXffsCAiy/ksPfexJyW1u1144YMRlVVWguLcAzW10gjWkgGK3EZo/CXeTAkORAcvad5ha+hAUNc\nHKIxeLJVkhB8zI6iAhLT0nHEJwQdmywrQcvVoD3D3WQ0Mai/tn9fRQ5+zxu/bDOtm4qZX9eoW7Nd\nr4jMmo2bWLJ8Oc8+qD8a5k6x91iJmigHsJfnRViXXYWm7SBJkBT+Xgr7OjEP/Q+8XV3BNw11BLp4\nbkz57kuWXXhZj3vqSdU1PNvUjLWqCrW0FHN1Ddc+/Dj9ivW1fdRLNBLkht7wV5IOGsG0dasYftvN\nYTHmHWSfeAIVvdRLlzdYCXwbz9DDZyEvSSGwyIH8QxxKfc+qfHWgVfIVwKYGf7xovT9XgTgNyXAA\nXyz8gpOP1eadC4KMz13S5ZisV+aR9MZ8DF8u5ZylG7lhh/bPfVLaYCxGu+bxEHqo3RdvxW/sGWsu\nKir28nwEfxT02FUZGkra79Vj7EbMoO/CZ3U1fFJbrUk0pjcY9eO+/ApJln+7qVL8AQTgiO8WRnTf\n+OHDSDpgIqXvvBfRffpOPzUi6/bKe3QVAj84kLdaUD0iosmCEvBCQECpMxD4Ph55R893ydIabrcI\norYM99UrGD4xuMiPAJhd2jy/+Qvnc8qx2u7PRbEaVe48jJ/w83ocv+ZT3dSK0+ujSZYx/5pP4qJf\ng59ZEMjMGq3pHB089dIcjj/qSMYM19foRTEZ8MT1UKhdVbFXFiB6W6O3pxKAhmJoLo/envsAMYO+\nk0VNDbxdXaFLzrWnjbrPaMSRmYExPh6D3YbF5UI2GLC6Iq8DPuKOWyl44SUCrVH8EIcJa3Y25rTU\n9vyDXoK8zIFSZ/itok40GlH9O0PtAggiKL/akat79pYs3BnuWkvW4lUVNGS4r1q/ir5ZfclM0yZN\nGwhSqmbbWIxqNpKc6MBokDAZDSQlxWErKAu6dlr2aAwaWsd2UN/YyCPP/4cn79Mp8ywIuJLtQRvg\nRAp7TQmiqzH6G8t+aCiMKcrtQsygA6ucLcyuKAup0UpPGvUVk49EsZix5fTF3r8/LR4Pamsbi07R\nFm7sLtHKeo8EvSk5TqkzoFQZdiuvEo1GFP8fPEdZQF2nL3wbbtzVVVgzghvLNCm4IXM2NeJsbCB7\nYPC77gSt4XZdyXBO/N6uDVEgJQFkGY/Hj9Fkpm9WCjaTEX9y18JHkmQiLS24mM2uhBpq9yTakHvo\nRsZWX46hpQevHgNeqMuHttqeO0Mv4k9v0Le6XDxdto3mQOiJRz1l1Cv65fDC3XfitlpRRBHzsKHc\nVl5O8aDoJIukH30UgiAG7TXeG8k+cRoVX/WOsLtSauKPRcPC3gw6oLYJ4Oy5+3TNGe4a8m31yb1q\n+3zqKVdTAiVBx9SeNQXFYaO+oYWcjESsRgOyw0rtWVO6nJfRdzyihsfrT1sFftgMb/7vO2xWKycf\ne4yms3cQsJrw2nomamNpqsHY0AukWQNeqN0CPREl6GX8qbPca/xe/rW9mMZuGPMOpnz3ZY9kv28a\nP467Xv4vfUtKKe/fj6aCQjaedxGHfRCdRi5jZj3I4uOmkbFUexlPb8CYmED8iOHU/7KclEMP7tnD\ntEnwB51x0WhADexp0BWfgOISEPVVM4UNrQY9UUOGu9YOayZVRXL7gwaUlyxfwoTRE4izB//LEQQ/\nvrbgYXMEgacnj2dcSyv9+mfiSUmg6rKTulQbNFviSE7q1+WyzR6Bhz5RaXSqCKLAuo3JvHmPvnJQ\nVRJxJ9kIb723NsytTZhrI5t8qwfF46T2h5dIm/JXRGtiTx+nx/jTeuheReHe4kJqfN6wrdlTnroq\nCJQNHIAiisQPG0q/86az8cFZUdnbYLcx5Ibr2fLoE1HZL5z0Gi9dVPmj6kh7yH0vL5qCCoaeuSsF\n7VnuNg2PFq2CMkmyqkljXU8yHJSjqtryZV76cBGm+65gx83nUnX5yUGlg7NyJiJ0ISMTUOCZL1Ta\n3GAyQkXVDvr3HcBLi00EFO1Z6u5kB0qQhjORwOhuxVLVu2rBZVmmvngNW9+9rb2xy5+UP61Bv71o\nK2Xe8JdY9HSiHEDfM09HEEXKPvokKvv1P/9cGtetp2XzlqjsFy56S7a7mCbDH2y3YDDsNeQuxalg\n7kGDrqEXukOUNOmKaA25x/l0hNs1GHQVlYBPm3f51Q9rGDu8P30yklGl4Fcdtvh04uxdv/CUNag0\nuwEB2twuXG43aSkptLTBulJtxsgfZ8Nvin6JmsHn2Skc03uMpqethfxFb+BprsZVXUjxJ/tmXk84\n+FMa9PtLCilwRy4TvDcY9VH3/YOyjz+NmpHdFxPkRKORtMlH9rg+v5jtB8fuD0hBFBFEEWXX6yBF\nQMjyIzp65mHqravDlJyMIHb92OhrsAZdq2DdagaNHoeowUha2oKrw321+CtOOOoExCBnA5AMDcg+\nbZ9/vS1Ss/sGF3WyGAQMO3/sbdvLGJjTrvFuMApYNBhpxWjAHa9NVjecSAE/tvK89pKxXkJrUw35\nC1/D5/y9PWtT/o9ULN5TOvrPwJ/OoD9TVsKqluaI79MbjPph773F0vOj05nNMSiXtCOPoPLlVzFW\n9O7mJ7uSfdI0KnraS48LII5x71F21F661mHMBIR4GXGMtgYikUDr/XmaFDw1Z8ua1ZrK1RJVUAPB\n3X09yXCqX5sgyaJlG+mfncagftpaxSamDsRqCn5/n5UIo7M97KhpICkhAYvZjF+GAakKw7OC7+NK\nsUW9RE1UlHbhmED4rii7S1N1KQWL3kD27vlyVvXLuzRs+q4HTtWz/KmS4t6uruD75saofRR6KlFu\nVw59901+ueASDn33zYjvNfbaGVx42pmob7/H8/fehX2qPonMniBj6jGsu+seFL9fk5xppJByfAiC\nQGCtFcErAiqC0YTilxENICS24cpcj/eXOgJtbchuD4rbQ8DtRt7tP89vfx7S2MjkhkbOaWkhaeJ4\nqt99j7UHH0xpiFUQWg16UhePFVWFlcsVtpWPZPCwA4KuFachu93j9fDzqp/5z6z/BB0rSh48Ldr6\nHsyZu5B7rztT01gEgczssZqGfv7td8x+4UXiB17AxMPORlZgUBpcdbQQtLOvN9GOLEU51K4q2Cu2\nImiMakSD2tKNlK2YR6cJgarC9i+fxJzcH3uWvvLBfZk/jUFf1FjPZ3W1+HUIx4SDnjbqCaNG0veM\nv7Bp1iOMuvfuiO7l+/4HMuvrEQIyriefQRo7psf17rXQUZPe5zTt3bnCTaC1FXfbVtzmBqiNR3Q6\nCDjbaK5cQV3xAppqlmPNzsIxoD+qrCBZLYhWCwarFclqxRifjmS1IlktSFYrp63bwKnLV5BosSDH\nOxAbm5jwyWcctmgx35zxFxadfJKmc9mdTg77/geGr12HunotdWYzpd8vZs3Bk/DY9t5vu6sM96U/\nKZRuV/D642hoHUJxsUJubueBQi0GXU8ynKpoyGwHlq7OJyHOxqgh2lqepmWNxKihu1xZRQW3/XMW\nBSUlpBQWMeOUHA4/6GDSuy5rB0C2mPHYo/3IVnFUbUN0Rz6qqQ2VirzlVG0Ifk2m+L0Uvncro697\nD8niiMLZep4/hUEvcLXxRnUFrXLP3P30tFHPOecsNs58iB2ffkbfM/4SsX08B07kjowMqssraEhN\n5ZAUfR2meoqsk6ZR8sbbUTHonqpqmjZsxFlYSNOatfibW3BXVKIqCtY+2dj6ZGPNzsbaJxvrmGyS\n++bQJ/seDPa9G8+9MfXz+Zzz4894LWaUOAcC7X6M32TC6nIz/ZXXEVRYeErXRj03fyuX/9/zJNfU\n4qlvwF1fTx9RZPJjTzJlzBjm3HYTdXtpo2pRhb36TQG/SkODArIPQQSjSWLHjs4NulkFQYPc6/wF\n8/nrxX8NOg5k/EF02zuYPXcBN16i7aVHEI2kp2mTak1PTSU5KRFKIC01lUPGDNRkzFVRwJWkTX0v\nnNhqy5Ba66K+795QVYXtaxdRX7hC8xzZ4yTvtRmMvOZNBI3d//Zl9vuf0KXIPL2jhBpfJDsABaen\njfromffx8/QLSBg5grhhkQlBmdPSkF96AcuPP9L21HMIGhKeegOphx7Cujv/gb+5BWOChqerRhSv\nj6YNG2hav5HmDRtp2rARQRKJHz6Mlrx8Am0u+p5+KoNmXIUxPjz79t22janzvsBr6VzX22excNxn\n88gfPYodA/rvdcyQzVuY8cTTmL1eAgYDPo8HFQgoCq0Bmazycm67ZyYPP/UoLQm/d0qLE6VOE6AN\nRoH4BIGaSg9Wm4OADFmZnXvnSXLwaFp9Uz0F2wo4ZMIhQceKUg2KHPwOePWm9gz4iaMGBh0LkJkz\nFlHQlo5kNplYtX4DJ554Is/f9w+yND4LPMkOlChnPFkbqzE29Y58GCUQoHjlPFp26E/y9TZWUPDe\nbQy98Bn2qA/dz9jvk+IeKi2ixBOFDkAa2FuiXFxz9EJZ0UiSs+X0pf8F5zPs7jvY9NDDEd0rnLSX\nsH3brTVai4rZ8b/P2fTPf/HzOeez4MgpFL44m4CzhexTT+Kw995kyjdfkHrkEXiqqgk4nTStXY8a\nBmGjDsavXEVCY3DFrMTGRsauXLX37zU0cO7Lr2H2ths/QRCwZGUiWSwYHA7Mqe2RF3urk8uffX63\nuf2MXWe4TxjfSlvdLyQmGTjgQIkhQzt/BGlRh9OTDCf7SjSN05PZbjTbSUnWnpNw5W23M/uxR/ly\nzn/J7de1+EwHfocVnzm6j2qzsx5TXUlU9+wMv8/L1h/nhmTMO2gtXUvpV0+F8VS9k/3aQ3/g+4Us\nzM8j+ZBJQUttokWHpz796cc57aXZpJitNPTJ5sPLLqEpOSmiewuSxMGvv8yyiy/nkLdei+heOWef\nybJLr6Bp7XoSx2tLFupJ+hx9Jm3ftBJYGI90aCuCLbh36CrbQc3iJbQWF1P51TdYs7NIHDOahLFj\n6HfedOKGDtnrvKwTjqPi8/l4a2rJOG4qpuTksP0c/QuLkQ3BP9YBg4EBRcV7/d6wDRvJ2bYNr/V3\n4yyZzaiBAKkJCXh2fpZUUWRgQQFDNm+hYOQIAFIFY6d5Sq3NTcy66nyKNq4nd+QoTj/7A2Dvql6C\nGry7mqKqzF/0JfffGLyZiWRoxd1WH3TcpoIymp0uDps4LOhYgOyciX8U+euUJcuXU7itlFee1C7C\npJikqJeomVxOLNVFUd2zM7yeVgqXvI+3ufvVQvVr5mNNGUD6pLPDcLLeyX5r0F9ZvpQnzr8QX1MT\n/S+6kKE3XtfTR/qN6S+9wI3nXYjR70exWumfncWQjZt58P+eos0R2eSNxLFjyD7pRDY/+jgj77oj\nonuNfehBVl1/I5PnfRrRfbqL6hawVR6EbC5ErlNhYQLiMc2I9j2NetO69dQsXkLN4iUofh/pUybT\n59STGXHHrUjW4PXXAMa4OA588d/8fOw0+pyq7Z5W888iagwpqipKJynVI9atx2cy7zk+EMCTunte\nhNXlImdbyW8GPVGQOjXozfV1NNfXAirOxibKtxUybPzeS9eSoF1SrROqnAJvLZMx5/6VUcPGdDqu\nAyWgrVRtztyFXH2utuoMmz2V+LhMzcqrl950C99/MFfb4J24k+yoUYwSG7wurJX57eUIPYyrpYHC\nJe8ScLeEbc2KxbORrA5SxkwL25q9id7htoaZQpeLf3/0Ee7qamSvl/plvyD3krA7wNRXXsUsy/gU\nBcXnxRMIkNDUyJQodf/qd/505DYX5Z/Pj+g+tn45ZE07nqLZr0R0n+6iNhjBK2CMj8ff1ITSJkBz\n+/2/qihUL1rMxgf+yaKjppL31LMY4hyMf+pRJs//H8Nvu4WkiRM0G/MODHY71tGjaO3ESw6VbUOG\nYNAQwjcEAmzrJIJgcXsQ//BAVwKBvZb1KaKIfZcWul1luPfJHcypl82gz8DBnHTJFZ0acwCHp/Of\nodEDn28wUdnQSlrfA/h4bdflhqIQwOcKnt1etL2a0opajjlEWw/zrH4TNRvzmU8/w2XnnMOAnL7a\nJgDeBBsBQ/SsueT3YS/PB0V/18lw01K7g62LXgurMQdQAj4qFr9Ma9mGsK7bW9jvDLpPVXmsrJj0\ns88kZdIkEkaNIt0XoHbJTz19NAAkWSZbEFDiHEgWM4JkIM7twW8ykV2mraQmHIx5aCbbXn8z7Abl\njwy5/lrKPv4ET1V1RPfpFnYZrAqGhDj8Lc2oop+Knz/n17/dxLcHHELFvPkkThjPEZ99xCFvvkru\nFZfhyO1+R7u4wYNwFoY3tLlm0kE0pAQP4TemJLPm4El7/V5DehrCHzLbFL8fwbhnQE+SZaqz2tVQ\nBMCsdv1IcTmdDOyTyWmXd52V7vB1rg5nMwh4/dDc0kxCfHzwPCehAlUN/pKj5+48IaUfNnNC8IG0\nq8G9+dHHPHDLTZrGA8hWIx5H9HQRBNmPvTwP5J5NHgao37GVoh/eRvFHRsTG76yj7JtnkT3OiKzf\nk+x3Bv1fpUXs8HqRrFYOmvMCE555nEEfvUfVdwvIf/b/ehn9BycAACAASURBVPp4yJLEpvHjSExO\nxtq3L45BudTU12NsbWP1wdHt+nXY+2+z9LyLIr5Pb5eFFRNlDEe2Yog3ERCaWffBFTTnraHfuWdz\nwpoVTHjmSfqefhqmxPB2cXIMHkRrmA16VU5f5p87HZO384ehyePh8/PPoyZ777Jkaw6ehNeye4mU\n6vcjGvY0MC0J8b+F25NFI6rStcuat2YVx1x+fZdjzAgIrs4Nutmg4t72Khahmdw0A2eO7UIaVlUJ\neEu63A+gvLqB9XmlnHjUhKBjATKzxmsaB3DpzbfwxjPa+5yrIrgStZcpdhdRUXFUFCD4e06FsB2V\nqoJVlP7ykebGOaHirimiZN6jEd2jJ9ivDPqb1eV7yLpadtbJjn/iUUwJiayc0fN36QtOO4VtQwZj\nD8hIAZm0nD7Mb2jgp9wBUT2HaDJx0JwXWX7plRHdJ/mgA7FmZUY8xN8dhKQAxlNaSLwylUkfPceo\n+/5B2pFHRHTPSBh0gKXHTOHN6/5Ka3wcJq8XSZaRZBmT10trXByv33A9vxx9VKfzC0aOoGj4MMRd\nRJgU/54hd0FV+WnqsTTuvFfPNnZeKteBlg5ryV1IvfoDfm64/wZefeMhNnx7E0dlFyF18RSTjM0E\nfMHDtnPmLuBqjd55SuZwTIbgPyvAK+/NZWjuQI7sJBqyNzxJUSxRU1VsVYWIPeytqqpK2YYlVKzt\nXqWJHlqKV1C19J2o7RcN9pukuOUtzcyrq6Wr97qBl19C/MjhLDh8Coe99xa2ftpUoMKN32Ti0cce\nZtzKVQzduIn1B04kf8wYVkw7lUmvzcaapUHQOUwkjR9H5vFT2fL4U4y449aI7TPmoZl8Pe7AHlVj\n04IxKXqNxh2DciN25bH02KMpHDGcMb+uJndre6vL4mFD2XjAhN9C5F3xwl23c9dd95K9fTuKJLVL\n45p+z7Y2eTwsP+pI/nfRBb99LaWLDHeA0vwtZPbrj9natfcZ18X9uSzLVFa310bXN1Sxbss6+vfZ\ney09gOIv6XIvgPomJz+s2MLMG6cHHSuKBjIyRgYd13HWa+66m0Cp9n9jv8OCzxI9/QZ7TSlSW0PU\n9tsbiiJTsuprmkrXRXVfVfZTu+pj7H1GEtdfW2SmtyOoWhoN93KqvF7u3VZIuU9b4lugtZWl51/M\nkOuvJWva8RE+nT5+6AGjDlD4/AvIDY3gcDDkhusiomte/vl8GlauYsxDM8O+9r5KT2v9B+PiF15i\n3MqVGPILMDnsSHYHVX2zWXrMMXxzxmm7jT3Tmk6K0rmP8M37b1Kat5kZMzsPdQoqjKptRe1CVGbZ\nmmU89NxDTJ40mTuvu7PztSQPXufCoBnbj/z3Uwb0Tef8Uw7vchxAVs4EUlMGBx0HcNENf+fEY47m\nwjNO1zRelQw4M6KX1W6tr8DUEL28nb0R8Pso/uVTWnuwTM6alsuQi57BYNWWE9Gb2S889GfLSzUb\ncwCDw8HkeZ+y7s5/0LJ5C8Nu+XsET6ePo76ex+Jpp3DIay9jyeq673Q4MSYmUfzK6yiKgrehgbGz\nHgz7Hn1OO+U3o558UPBOW38GOrz03mrQ37ruGj5vnI7r0qsYfs6Z+MeNpbxfP5yJez78EoSuHyd5\nq1cy4YgpXY5JQu3SmAN8+8O3DB4+uEtjjgqCUh7UmLe6PMxb9CtLP5jV5TgAg8lGSsqgoOMAvlvy\nIzX19ZqNOezsohYlY25prutxY+7zuin8cS6eRm3NciKFu7aY0nmPMmj6Iz16jnCwz9+hz6nYwfrW\n0O5/xj32MKaUZFZceU2YT9U9pnw9///ZO+/wqKr1bd97+kx676H3XkUERYoI9nrsqMdyLEdULMcD\nIigWFHvvKCiIXRHpIh1CD4H03nsyve39/RERQmYmAaaE8/2e6+IS2GuvtUYy61lve1523nEXlopK\nv60pOh2If8VMJYcDyUdNbDp7gpy/4as4ujfRFBHBWqOBPdMuJnPwIJdkLgCKdn5ksvbvoU87LVND\nLB1olbphJc89+JznQTIRu6Wg3blOpe48IXkYQgelQ2c8/ChfvNHxRDhbqA6H0j9srjY2oa72bXVL\nezAbGsjasDjgZH4MzflpVG5bEuhtnDHOakLfp29mQ0PdGbVD7TbjVnredw/rzj0fY2HHxCf8AX+T\nercZt9L1tpuJPncMMWUVPlPW08THkXLN1eS8+75P5j/bcDYQuuR0Ymto/Fvy1RViFJ7j54211VjN\nZuJS3Me7AYKtHjLWgS27tzCk/xBCgz1r38vkNTgd7r12ygY9UkMzS37ezB3XXOhxLgBtUCThoYnt\njgN46sWFPPTPOzqs0+5UKTGH+KdETWkxoqnIpsMF9D6Avr6K7A1fYDe2L1HsL0iig5o9P6IvdC2H\nfLbgrCV0k+jkw4pSmrzQQS1y5AgmbljNvpmPUrFqtRd25x34m9T7znqEkR+8g23qZDJf6bh1caro\ncc8/qVi9FlNxYF1+nQG+qEX3NjrSBz1R7rkTWOb+PfRtxzrXChKYPRN6R1ulOm3uL+cx329CNudD\nrPcv4psOZrYnpAzv0LjM3Dx+WrOG/zzQwWoamQxzlH9K1OQ2C7ryLNx2z/EDGioKyN30JU6bKWB7\ncAe7sZ6Sde/iMHWei8ap4qwl9LdKiym2eK9uUq7TMf7n76nespXMRb4js1NFINzvXW+5CVtDA+W/\n/e6zNQY/N59DT/+f692Xme7egrmyEm2853yOyA7Ez9srV4uwtU80HSF0mcKI3exa+zvy951oV+3A\nUFKNoDcx9IdNKHce9jhfaEQyQZqO9Vk4VVe7JVyH0w+nsMxhb1GBc3q+MPkS1YWHKNi6HCmAe2gP\nlTlH2PTGg4HexmnjrCT0dQ117Ghq9MncQ15cgCYunl133O2T+U8HE1avZOft//Sr2trgF54j76NP\nfBaGCB86mJCePSn57gefzH+2QK7VooqIwFzeOWKJrmCtqkYd59l9HCnz7DLO2reHPsM9W+jB7cTP\nV29azZTxU5C305ZXcha7/HuZyUrI/izMAhxzOVuB6N2eu3jFJ3VMROa9L75k5JDBjB7asfEOnQar\n1vclajJRJLg8G8FDCMKnkCTKMrZRmraSQLr624MdDYXVVtK3bqT04PZAb+e0cNYReo3dxpeV5dh8\n6DbqeutN9P73/awbfR6G/PYTa/yBCWt+Y+eMO/1K6r5utzrg6f9ydOEixAD3qg80OruVbq6sQtuO\nyz0U98QkSRI5h/bRe8gIt2MEJJRmz1KfHbHOBZkTm8n1JVRSynFq1ISF6FCrlGg0GlJiIyDIvUhM\nZFxv1Ir2dfqNJhNPPP8i7z7fTrLesb0o5JjCOyZOc0aQRIIqchCshvbH+mJ5SaRw/zqqjvwZkPU7\nBAlqjUp27DhMfXkpToed31653+dqdb7AWUfoi4oLqbX7ngAihg9j4paNHJj1BOUrVx1/4M/WRyfB\n36Qu1+kY8fbrPq0CGLRgHhlzX0IqVyKW+bdNZGdBSK8e6HM6bxzdUlX1t+KiOyhE99+Ljrjbo5yA\n0731ZrVZ2bJ7C5PHeY55C1Qgia7zaiSlgtprJ1DXZCBYpaRHQiRCsJaqGa473gkyOfHxHWvUcqqu\ndnOkP+rNJYKrCpGZfOPNbA9Op4PcHT9Rn9d5E82cgpKsEguH0vbjsB73YOirS1n7+iMB3Nnp4awi\n9B9qq0g3+u+mKVerGffjt9Tu2MnRhYtwHtJi+1OHWOyHm7Ub+JvUI0eOIOb8cWS99qZP5o+fdDEJ\nUXdiWaPEuSMIx46gzuyV8wlCuw5BKlMjlimgwX8qYR2FpbISjYcYeqJS5bHcuyPlasE2z8mtHU2G\nc9g8e9QsqfFMtdqRJo+kacJwCp7/F6Kb/vGxiYOQC57/PbIrBVas2ozNbuea6dPa3R+ALVSL3Q8l\narraMuT6Gp+v4wp2q4XszcvRl2UGZP2OQO/Qkra3kLL8XJfPj6xfQfGBztHUq6M4awi91Grhh+oq\npACc9oOff5bY2CswbmxAqFPh3KVDqvRfJ6STMWHNb+y87Q4sVa4Tf7yNbjNuxVJZRcUa7+ssi3t1\nBKf2w1RRCDIQi9SIpf+fWOoSOLcHEWaeRJTuchxbQ7BvDsH+RzB4sHj9jfay3BNk7WS479tN3+Ge\ntcyDPMi9Avy24TcumXSJxzFyZRMOa5PHMT+s3U3fc/qjv/Myaq6ZgKRwTdhypZqYaPeKcKIk8eUW\neGO1yKJ1Icyf07ELr6hWYgnxvUGgaaxC2VDm83VcwWLUk/XHEsy1rnMZAg0JGUXVImlb0zA1u89o\ndzrs/P7KA2eV6/2sIfTXS4qocwQoO9IJ4anDUUaH0XT0KE6bDbFSib3R8+HhS0xYu4qdt97uN1If\n8vIL5Lz9HqaSUq/OK9kE5Aol6uhoLJVVCHLAcNb8WJ4+RLCvD0WsVCNXBuEwNyMoAacADUrsa0MR\nfdM98pTRHqFHtJPh3p6FrpMEsLj/btc31pOZl8nYEWM9ruPsgG57R5uwtCciU9kosD1boLi0gqSE\nZNZnBtGuFpMgYIrQ+dwoUesbUNcU+nQNdzA21ZK98XNsAfIMtAcrWvYfrSHvyJEOjdfXlLHm1Yd8\nvCvv4aw4OZdXV5JpNgZuA3IQUmzIFUGE9O6DpaKCg+/OZOftd1G/Z2/AtuVvUj932RJ2eDlJTt7D\nCk5QR0fhMJpx2PUI3QOUjetHOA5ooUkBSAiCgEypRLSdwOAmGdLe4ICHH0SbDYfJ5LF1rLsMd7NF\noiC7iODwCEIj3Pdoj/DQXQ06WKoms2M3ebZIf/9zP4P7diEpznO/eLU2nIgwz42bjMZ6JGcTepOF\nqPAY4kJltKfFZAnX4fRxREVlMqCpyvHtIm7QVF1KzsYvcFgCk4DnERJU6eXs2naQxr+a+3QURzZ+\nR9H+zT7amHfR6Qk912zit7pqxAD3kJH1tqIcZ0De3UFzxGaqd6/DWFBA/ief4zAFTiTBn6SuDAlh\n6KKFpN3rvRa0QqINxRgDQpgTm7OcptBNCIFLUfALJJOAUKsG2fGfablajdPSOtlTrJMjGQP7Fe2I\nqEzISRnuDgfs2S2yeaOTzZvk9JnwKp5+PIM9WOfQMXe7REm7rtGPvtnAPR2QeU1sR0Qmt7CQex+9\nn12/PMCEoXFM6A+3jfd8Pjl0Kqw637bOUFjNaCuy2tWv9wVqSzLJ27wU0dFJ3EonwCGoOFpkImPv\nQRynkVAtOhz8vujBs8L13qkJXQLeKSum1t45hAiEZBuKkUbCz+uFJi4WhVaL3aBHofOP0pM7HCP1\nsQsXMeKxJ3FafGfhRo0ZTdQ5o8l+8x2vzVlftoWNTw5CGFNDfAc6Xp3tEOwyRHPrQ1emUSNaT/p3\ns8iRTAEm9HYy3OUIyE6I90sirFvtJDfXSVMzGPR2NKFd2bjeQXZW2wNRJoHS5P77XVJRQn1jPUP6\nDXG/SUHCYSn0+Dk27jxMl8RoeqR6FsgJDkskWOde4hbg33Pm8sf2HRw8sJnq/S9wyziPw5HkMszh\nvj0jFA47QeVZ4CbD33eQqMhKo3jnDwFVoHOHZpuWtLRcKgrPrCzUUFPO74s6v+BMpyb0FdUV5Jg7\nn0RgaN8+jP7kQ4a8/CK3TZjI6qGjaD4a2GzO/1x/Pf/45ltuXbeB7rfc7tO1ut95O8biYqrWbzzj\nuTJfeY38L75kyq7NxE443wu76/yQJEBoHZ+Vq9U4rSdZNzIp4N/Q9mrQE5XqVhbh3jQnTc0SMlnL\n57OYTGh1OuQyOJIh0VDf+iITKUkeGwF1xDqXyetw2j2fEx1twpKQ3L4ozPSJE1GpVERFRnDJpInt\njjdHBiEKvrOaBacDXVkm+Nk6liSJ4oObqDi0zq/rdgSiIKeg0sGe7WmYDc1emTPzjx8p3PuHV+by\nFTotoZdaLbw0fz7p859H6iQW+onQpaYQc/44cu6awcX7d3N4/gJKvv8xYPspEB3YRREHkGe14mg+\nvQ50HcWwV18mc9HrmCtOLR51DKaSUrZcfjWahHhGffAuQjvqX/9LEEKdCJrWJCZTq3FaTjqQNSKy\n4MBaPe253ONlxysSTGaJmnr+jiWLTicOhx2luiUL3mIWqShvTWwh1nbK1dav5NLJnuPnoq3Q4/Pt\n+7MJC9YyoJfnuHhEbC80yiCPYwDWbt7MhAkT+Pqdt7l0sudLgj1Ei13lu2NWkCSCy3MQ/KyNLjqd\n5O9eSW32Dr+u2xFYJC37D1dRkOldI0t02Fnz6kNIYvsdAQOFTtsP/V8vL+TgBx8jiSIOi5khL3RM\ngSkgEATGLl9KxrPPk3HkKAOe/q/ft1B5153MKShEX1BIkd1BssWMIjTEp2ueu3wJW6+4lol/rj+l\n93I//ITyX1cy4t23COqS6qPddWLIQNbVhjNdy7FEarlajXiChS6JEvJuVtB4JnR7UzO2+jocJjOi\n1YpoteG0WRFtdkRby59Fa0vcUFApkalUyFRKZErV379X6HQoQ0NQRkSgDGn9M2OpqiK0T2+364fL\nlHDCFh2244RtMRnR6E4kSAGbozWh6zw0Y8nMy0ShUNCzi/vyMZncjMXouc/BR8vX8dBtrsVj/t6Z\nIBAfP8DjGIDvfluFRq3m1w/b7xYoKhWYQ9X4LrNRIqgiD5nFOxZoR+Fw2Mjb/gPGqs6lbigBlY0y\nsg7vR3T4JvSgr63gp3kzuOrZpT6Z/0zRKQl9a1MjhY31f7sljZ1EfrU9DJg7m5LvfmD7DbcwdtmS\nNm5VX0KQybC8uAC5xUpPjZpNU6Yz5qvFaDrYwvF0oAoPZ/ALz7Ln/ocY+d5bHXpny5XXYm9oJG7S\nheiSk3y2t84OWW8LkkWGI1OFTCGAILRY6VYrcpUGebIde1QxjbsKsVRWYSwuwVZXh7W2Dlt9Pdba\nWqy1dSiCg4gYNhRrTS0ytRqZWoVcpW4hbVXLn2XqFitastkRbbYWsrfb/v69JiGehv0HsTc04DCb\nUUVE0D00hImCwMimZpoTEyg2m7Fo20qgRp1QsqbVwIkaLRaTCc2J+SWCQFjY8e9EEIAHC70j7nZR\n9FzrvC+j5ewYPqCbx3ExiYNQtKNHDy2KcDWH9rc7DsAU5dsStaDqEuTGOp/N7wo2s5GcrSuwNp6e\nZ85XcKLhaH4d1cW+54riA1vI/ONH+l54lc/XOlV0OkK3SSJLqspImXEbNqsNa3UNE7RBfDlkJIMW\nzCfpMs9f8EAj5dqrCRvQn9XDRnPuV18QNqC/X9eXaVpSxCesW+UXUo8+byxNGUfJefd9ej1wn9tx\nNVu2sffBmWiTkrA1NlKxajUJ06YSOcqzgtj/MuSDTQiRDmxpTpx6K6JopLkwnYaqLRTv/BRlaAhB\nXbsSMXwoCq0G3ZDBqKOjUEVGoo6ORh0d5fVQheRw0CVtD/e99Q4hTc041WpUv62mMDuH1+c9jU3T\nWkQmWDq+viAI9O0nZ2+aA1ESsJiMRMYed9eHh0qkph4fH25rv1zt67e/dj9AcGI3F3qc46Nv1nNP\nO3XncrmKmJheHscAPDD7aV6Z8190Li42J8MaHoRT7rsLvba+AkWTf0nVpG8gb/My7AGSknWHRqua\njAOZWM3+KZezW4zs/vZtuo+Zgkob7Jc1OwpBkgJcD3YSPqso49sa1y609DnPYKmqZtCC+Wja6f7U\nGbDjpttIvuoKUq67JmB78AepA+x/5DESL7uUuIkT2jw78uLLmMvKGP7ma+x7eBa123YQ1KUL5yz+\nBGVYqE/31dlga2igKf0wjYfSaTzU8t+Y8eNQKsLQpaSi6RJFUPcuBHXtgrwDxOFtdMvO4e5FrxNs\naHs4VsfH8fyrLyP95XlSCnC7OrGNRzkvT2T/XpG8I0dI6dUXGTKiogQunCRHcYIR3EdvRWFwnci1\nN30vr338Gl+99ZXbvcrk5Via97l9fiS3lGff+Y7lbzzs4RNDUpdRREZ09Thm94ED/HvOM+xa+bPH\ncQBOjRpDlGf1vDOBprkOdZVruVJfQV9XQf7W5Tht3mtZfaYQBQWF5RYKswKQkCzAmBtnMe72p/y/\ntgd0KkIvspp5Mi+bJg/xj7rdaaTPeYaU666lx913+nF3p4eMBS8iORwMnPd0wPbgL1LfdNF0xixZ\n/Pdly1hQyJ4HHqLbbbeQesP1AEiiSNWGjbB0OfbLppNy7dU+3VOgYa6ooG5XGnW7dtN0KB2H0UTY\noIGEDx5E+OCW/waCuN3hxo8+Zfz6DThc6JvLnCIfPjGL9BHDAOim1DJZ1rZPuNPp4N25L2ETk5h4\nzW1ERUFSihKF4niwXYFAn6pmEF0fP8++8Sw9u/XkpitucrtX0bkdh6Xe7fOHFyzm8skjmTjGfYMV\ntSaEXn2nelSFA+g3YSI/fvIxfXv28DhOkgkY4kIRfZQHpzI2oS3Pwp+KQ/VluRTt/L5TJYOZRA0Z\nGUXo6wKnSBca34VrFnxNVGqfgO3hZHQql/uH5SUeyRwgavQoJqxdRc4777H5sqsZvGAe4UMG+2eD\np4EBc56i9Mef2Xb9TYxdtiQg2dz+cr+PXbaUrdfdwMSNa6n/5DMyVq5i9McfoE1K/HuMIJMRP2Uy\nTJnMpoumEzN+3FnhbTkV1O3cTc3WbdRu247TbCF+6hRix4+j1wP3deq8AUGSiKuswOnmZ1ThsBNR\ndzxmG6donRB3DB8/+1/+/L4laSguupxbZ83m5IHhouiWzKHF3b5+mftkS7lCj83onszziqsoKq/x\nSOYACSnD2yXzl959jyunTm2XzAEskcE+I3OlxYS2Igf/kblEVd5Byvatan+ovyBBeaNEVvr+gF8w\nmiuL2PLZ81w578uA7uNEdBpC39rYwGFDx+Vdez14P0mXX8qhOfMI6dUzIJnlHUXyVVcQ1r8fa0eN\n5ZwvPiV8UMdaMnoT/iB1VVQkwxctZNK0yxktSUhDBvFOSDDuIlsj3n2LvQ88xHnfLffJfvwFW0MD\nNX9uoWrjJmq2biNy1Ahixp3H0FdfJri752SszgRJEKiPjKaneBTJBamLMhl1MdF//zlccp1Epvqr\nTE2QyVAoXTfaCfXQjGXL7i0M6T+E0GD34RjR4brn+TF8vGI9d1/vOXYeFBpHSJDn70JFdTVvffo5\n5fvSPI4DsAdrsal9w+ZyuxVdeSZIfiIxSaI0YyvVR7f4Z70OwC5oyMypoabM87+9P1FycCt5O1bT\n49yLA70VoJPUoTskiaXVFdhPUWlIl5rKmC8/I7RfX9aOHkvl2s4ncHAMIX16M3XfLjIXLqJ4+YqA\n7GHCulXsvPl2LNW+k4m9trSM62QCCZERpBQW8fD8BW7HhvTqScL0i72qOucvOK1WSn/6hbR772fr\nVddjLCoh+ZoruShtO6M+fI+ut958VpH5Mfw57SK3FnpRj+4U9DqePBblJiv8jqfm02PAYMaPG8eN\nDz3ucoyrcjWZ1YKqpIDtv33nUbtdkDuwmUvcPi+rqufg0SKmTxjmdgxAYrLn59DxPueiUo451Ddd\nAmVOB0FlmeD0jx6HJIkU7F3Tqci8waJi544jnYrMAazGZrYvXYTzNCRlfYFOQejLqysospx+skXK\ntVczecsmKtdtZO8DD2FrcN8SL9AYs3QxhoJC0ufOD8j6viR1QZJIzS/AGdSS+emUyxGcIpE1tW7f\n6X7n7TQcOEjDvo6VAgUalWvXse/hWWwcP5HG/QfofsftTNy0jt4zHyD2gvPPeoGcoh7d+eTRmZh1\nOhR2OwqHA6XNRmNkJB88+Rim4ON15Tpcf9a6ynKa6uuY+ZFrz0sIIJ3U/1xRXU7CgsewPHYntx7Y\nzY1h7pvBCJR5dLd2pKNaeFQ3NCrPOg1f//QzMZGRTDl/vMdx0KIGJ/kgqV0migSVZSHY/dOwyGm3\nk7v9BxoK3Ccb+hMiSnLKrOzfuQ+7pfOphgJU5aWT9t17gd4G0AmS4ipsVv6Tn021zTs3nJqt20mf\n8wzd7riNbjO82xnMmyj7+VcKvlzK2GVLkKn83//bV+73HlnZzJo9F6dCgdZoYs3VV/DtHTM8vuMw\nmtg05WImb++cHY2MBYWU/PATRUu/Jm7yJBKnX0zshRcEels+RZfcfIak7Sa8vpHy1BS2TboQ8wk1\n5SpBxgyVa130rb/9RNrGtTzyqutDLtnqJKz+eHhN1txE8lP3UFlRSl1DS4w+PiIKx8ufYO3Zr9W7\nEhKi/U+cNteBnLpGPdc++Bp/LH3G/YcTBPoOvByl3PP3Ttm1B+bcLBQuEgRPhDVMhyW4/Rr2U4Yk\nElKei8zkHwPFbrOQu3UF5jrvtkg+XRidWjLS8zE0+rfW/nQQkdSda19YQVhC14DuI+CE/nxRPlub\nvP8Dm/Xam9Rs287gBfMJ7dfX6/N7A4bcPLbfeCujP/6A8KH+T+zzFan3ST/MuPUbye/Tmz+mdyy2\nVLFmLdUbNjHk5Re8upczQf2evRQsXoKptJSe995F/NSLENrrkfn/CXqpdEwQXFvRnzw3m6TuPZl2\n8x0un/fVW5GfUK4WufwTQtevpKKhltr6Fm9OdEQUUUPPofzpV1sJNMkV9Zibtrvd10sf/kRqYjQ3\nXea+Y0pMwgDi4zzrQ9z1+BOcO3wE/7zxHx7HOTVKDFG+abwSVFmAQu+f1sgWYxO5W5Zj03cC8pSg\nuE4kLyPzrOhwdgz9Jl7DJf/5MKB7COjplNZcwwEvCeefjD6PzmTowhc4PH8BRxcu8skaZ4rgnj24\nKG07ma+/QdHXbd2TOoOB4OZmlD7SsveV+z1r0EA+feShDpM5QMLUixCUCspXBj6jtmL1WrbfeCu5\n739E6j+uZfxP35Ew7eL/I/MTEONBVS1r/x76DHMtGCQH5KbW3jjBakGSCcRFx6FWqwkODiY+NqGl\ne9dJaotOe6HbdQ0mC79s2OORzAWZktjY1hd8vQVqmqHiL72ULbt2k51f0C6ZSzIBU4RvyFxXW+Y3\nMjc0VpO14YtOQeZ2NBzMaST38JGziswBivfuIHvNn48hwQAAIABJREFU6oDuIWBZ7hKQ33SQQWot\nO0y+EWEI7tmDscuXUvT1ctafN4HBC+Z3SlfpmC8+4+jCRRyaPZfBzz9LkMHAlUu/pltuHkqrFX1Y\nGFsnT2KnD7qR+aukrSMY/PyzbLhgEjHjzkMZHub39YuWfk32O++jS01l0Lw5hPbv1/5L/58iQlC6\nrJ6yW62U5GXTvf8gl+9FOduWqzVPuYKQretp0Dei0+hIik9CZrViOK91HFwmt2BpLm/1d4IoIv11\n0epIR7WElMHIhOMXs5/3ShwoEjBYQS5AuA6WfLKMle+0nwhniQjySYmaprEaZYN/3N6NlUUU7vgW\n0RHgpC4Jak1KjhxMx2HrfD3V24OAjC4xU1FkJmAfYUMZ7f8wKgTQ5W63ZGJuXIMkOcgRE1lq6E6W\n1Xf3C4fBwKE5zyAIMgYtmI8iKLA9zF2hfOUqGpZ/wxdGI7F19SgTE/+2CtUWC2uvuIzvfZQX0FlI\nvTH9MJkLFzFm6WK/rGdvbKLgiyUUfLEEbWICppJS5BoNQ19+kZgL2k+G+v8Vt2jj0bpgs/SdW/n+\ng7eYt9h1JUcPox1Nc9sE2OAdm6h88Ul66ILQhobTOO1qGq+6pdUYQcjBashCsDsI33IQXWYhikYD\nSBLl0eHcuGo7X/78sts9q9TB9O4/jWOdTF9ZCZnloDrh2CmrrEIhc/DUdcmM6uH+aHQEazCGqd0+\nP12oDY1oKrK8Pq8r1BRmUJL2C/4UqXEFp6Akt1hPWZ5/1e+8hW5dptMv9j6UpnBkaoGIydFETo5u\n/0UfIEA+RBGrYS+S1JLp2ktWzrzQrcyKKCbeR5yuCA5m+BuvknjZdDZNuZjiZS0HTur2nSSlZ/hm\n0VNE4qXT+cBmJzS/EHNTM6bSMo7dt6waDResWcf5a3xTmuePkraOIHzQQKLHnkvuhx/7dB1Dfj7p\nc+ez+YqrUYQEc1HadnQpLe01JacTU1mZT9c/26EVXB8dmfvS6Dt8lNv3NBbX4aPifoO5RxDQP/US\n5U+/2obMQcRuLkRZ3UDqS0uI+vFPtFklKGsaqD1SCL/vYEVYMFGr3MfXE1KG/U3mn2+G3MrWZG6z\n26hrbCAuNolP/5QoduOBluRyTKHeJ3Ol2YCmMsfr87aFRHnmLkrSfibQZK53aEnbW3hWknls7Aim\njFzK4OCnUJpa8klEq4Qlz4StOjAej4AQus2cgehoLdknAKMU+SyK2MLtYdWEyHzT2CBu4oVM3r4Z\nQ1Eh3e69j3/NeoLH77ybKZ9+7pP1TgU9MzNJNhj+1sqW7HaEk2KIYzf+4bP1Owup97z/Xqo3bab5\nyFGvz92w/wB7H3iIA7P+Q+SI4Uz6cwPd77wdQS5n6GsvkzB1CgmxsXS56Qavr/2/Ap1MDm6qxjzF\nz0MBbK4FZVZuWMnAKZdjGjIaW0rb+n2ZvAZ5ZRWpr3yFsr4ZFHKQCVisdpoNJgwOJ6ZmI0E//kn4\nprYlV7rgGEKDW7Ly641wtPx43/ZjKCguoVtKMtASFfjtgOvPaIryfoma3GZGV57VkjfgQ0iSSNGB\nDVSmb/DpOu3uAzlF1SJpW9MwNXfeMmNXCA1NZfzQNzk39g105i5tnpvyTej3NgVgZwEgdEmyYzMe\nRHKjeKTAycWqI7wVuYMrghtQ+Khh0eBZj/CPzBycJhN6m41hy1YQWeu+XtofCK1vJEKtRhMXiyoi\ngmC1GlNp61iaxmwmzId19p2F1Ee++yZ7HpjptfmcFgsHn5pD2S+/kXrjDYz7cQVJV1zWaoxCq2Xw\nS88jHzeW4m++9dra/2tIVbrPefFkoYeeQatUpy2f+CWrERytzw21SolapUQmE1CrlSiDtESu2Y2q\nsrV5nZAy/O/fVzZBTVNry7S2oR61Wk3IXxoKcgHKGwQcJ/GrLUyHQ+ndQ0nusBNUlgWib3p4H4Po\ncJK361fqcnb7dJ32YEXDgaM15B05EtB9nCpU6lBG9HuKid2WEmkf7ta5IdkkLIVmrOX+zwXwO6Hb\nzRk4He0L6msFCzdqD/JG1AHG67wvKOBUKCgb0B+dXI5SoaDRYCA72x/uLvdwqJTYlUrUUVFoExMg\nOQllSAj6nFwkZ8tB5lAosWp818kJjpO6taaGkKZmLlu+gn8veJEHXlzI5F9+QxB9n32qioykz8wH\nSX/m2TOeq+irZWy8YDKx48cx8JnZxIwb63asIJPR9bZbKPxy6Rmv+7+KaMF1XKw4J5OYxGS0Qa5b\nSoa4IfSSihLqG+sZ0m+Iy+dyhRFZ7lE0hW3bhQqCgNlqJyIiki6JMQiCgMxoInzTcaGisKgu6NTH\nZWTlwsnWuURhSSldk5Nbza2USZx4f3CqlJi9XG8uE50twjEO3x7+DpuF7K3f0FwSwPCiBFV6Obu2\nHaKhqrz98Z0EgqBgYO97uHjgTyTLpiM52r/QmfNN6Pf5v82sX7PcJcmKzZR+Sm6laKGRB4J2c4k2\ngSXGnmRYvKPEJQkCX73zBo2vv4lCr+eHBx+k8OlnKPtlJYMXzEdoR0zCFyjp2pWa+PhWngJlWBhy\nrQZ9dg5hiQnkTLoQix+6c01Yt4q8aZfxrFxOlN6AIj4OmSDQf98Bztu4kRcWvoBd7f044olIuvJy\narZuo3LdBuKneM5edoXGQ+kcnvccUWPOYcqurR1+T5ecRHCvnlT/8WenrIoINMJxTWqerHMlEnKT\n3aVR0551LjqL0eaVIjicSPLWNkh9o4HwEB3xkSckucpkqMuOe5gSEltfFCKCISIIjH+JrxWUlNIt\nNaXVGKcIcWGgOfZRZTLM3q43l0SCynMQbB3vYXE6sJqN5G5ZhrUpcF43J2qyixuoKMgP2B5OBz26\nXEm/mHuQm0PgFMT6JIeEpciKpcSCJsW3BtiJ8KuFbjem47SfXru7rrIK5oRs4cmIIpKV3knkEGUy\nfp31CD/Om4sQHcnI998m9oLzWXvOOEq+/9Era5wKGqKjWH31lQgnFR7IVGpC+/Ul32DkTad/ajN1\nRiMfabRoSkoxNjZiKq9AlMlwKpVEV1Xz0IIX/bKPoYsWkj57Lk5rxy0YSRQ5/MyzZL7yGkNfeYl+\nT8w65XW73XYLBf9npbtEpNw1oXuKn0c6wV1Bzcr1K7l0smvtdkHmwG4qQrA5/s4tORE19c3ERJ7U\nxEUQwCkhs9iIju+HUt764hkbAv2TWki72WDAbrcTFd66DaxaAeP7H1/PEq7D6dXTUiK4sgCZ2bex\nVpO+nqwNnweUzJvtGnbvyTmryDw+bgwXjVzOwOBZLWR+GrDkm9Dv8W8s3W+ELolmbJYjnElWpQAM\nUxSwMGwLd4dVEOYD2eyEaVOZuncnzRlH2DXjn5hK/CuDuHPC+Xw28yEaIyNRWa2orVZEQUZRj+58\ntPJHmkxGDjz+lM/3cc6fm0nUHxf9OfEwlgSBrtm59Ek/7PN9AIx47y323v9Qh8aWfPcDa0eMIXzY\nUMYs+ZzgHt1Pa82I4cMQrVaaMs6uOJ8/oHZTfO3JQg92k92emZeJQqGgZ5eeLp8LQgWi6MAWH9XG\ns9fQbCQkSINCcdJBIIpISjnotMTGudYSuH28RHyolaKyCrqeZJ2LElw9WqB/QsvPvEOnwar17mGj\nqylBbvBtzk5zbRnZGz7HYfaNeFd7kAQ5BZVO9mzbg9lHAmLeRlhYdy4Y+i7nxLyC1nxmrY4lUcJa\nasFSePp9Sk4VfvMrW82HTts6PxlyQWSSKotxkYX8YunNr8ZobB56K58OBsydTcOBg+y570ESpl1M\nrwf+5dX5PWH/mFHk9O9DckEhoU3NVCUlUtytK5JMRp+HH6Jy7To2X3IF5y5bgjLUfYvJM0GXvALk\n0dFoBBmiw4Gk1yPa7ciULdaZ0ukgpaCQLD+0go0cOYKwAf0p+GKJW33+5swsDs9fQFj/fkzd752k\nn2Ox9CELO48cbaARKpO77GPeVFeL2WggPrWry/c0LrqrQTvudknCYS0AwB4XiSMmAnnzcfd0bX0z\nXZJi2rwmOEWMg3oQlzQEudCWiG12O1fceRfZeXlcfdvbqMKVWKwgk0OoDm48F3rGtXxGSSHHHK7B\nm+Vd2oZKlI1t8wG8ibqybIp3/hiwnuEWSUtGRglNNZUBWf9UodZEMLjHv0mUTwa795IezQUmmnc3\noenq+zAp+InQJdGIw5Tp9XnVWLlOk85kTSjfGnvzhynYq1WVEUOHcP7Kn8j76BM2Tb2EwQvmEznK\ntUvR2zCEhpI5xLW+e/xFUwjt35/Nl1zJ0JdfJOrcc7y+vilIh8zpRB0TDZIECfHos7IJ6t4NmVKJ\nIIro/ajm1ufRmWy96npixp9HcPfWVveRFxbSePAQA5/xrrpbwsUXkfnKa1hra1FHB0YoorMh2U2G\nu8dyNVECu2tiWblhJV+//bXLZ3JVE7bGFsvOFhtB8zkDiFi1HZQKmvQmtBoVKmXbI8weEYLhovNI\ninLtnfnm15Ws/mMTANtWL+Crdz5EExyNTGiJm58Ic0QQouC9U0Wtr0NV68sWoBKVOfsoP7DGh2t4\nWh0qG2VkHd6P6PBt1r43IMiUDOp1N1111yPY3JdjnjYksFZYMeeZ0PbwvZiZX1zuVuN+Vv6+mYZG\n37S/i6CZe4L2sDD6KEO13tc973HPXYz54jNyP/yE9KfneX3+04EuOYlJWzaS/8WX5H+22OvzZw4c\niP0va/yYnnZIn94Y8wsQ7Xbqo6Mp7dK2BtOXGPHuG+x94OG//1yxeg1rRowhuEd3xn7zlU+kWrvN\nuIWCL/4vln4M0biWtPTkbg93Q+b7Du8jITaBhNgEl89P1m2vmzYGc7+uCDaH69i5KCEqFZTffw3x\nXUch4NrSGjtiON1SUtCo1Qzr349uydEkhLclc1uoFrvKe9aayqRHU5XntflOhiRJlKRvDhiZOwQ1\nR/INHD1w6Cwgc4Fe3a7j0uG/0k1xYwuZ+wiWQhPNu/yT8S6fN2/ePF8uYLXWc8ftd7LgpZWs3nCE\nyRf2ITzMNzeVMMHIOFUJfTQSxc5wmpze+zIqgoNJuvxSHAYD26+/CW1SIqF9ev/9XGqU4zyqQcrT\nQIUKSSYhhPg+gS3p0kuo2byV4m+/I2HqFK/NW5WUSGJpGan5+ThPyPhXR0ch5uSy8sZ/kD7efRMM\nX0AZEoJMqaDxh58oXbcBh8nE6I/fJ3ywa91wbyB8yGD23PcgPe+7x2drnE0Yqg4hSGp7+H3zzqtM\nvvYmohMS2zxLNNoQXJD6x19/zJgRYxjUt+2/n0xmw2o8SdlFENCP7k9+TgnK6gYSlAoQBGR2B6JS\ngaVXMuUPXIO8W3eSElyXwAF8u/I3EAT6DBzEZ27CKaJKiSnCe25ShdWErjzTZ8IxotNB4Z411Oel\n+WT+9tBoVbN/TxZNdYHVr+gIkhLGM7bvIhKESQgOP2muywTUqVoUob51ivtcyz0z4wduuHEmB9NL\nEQSBuU9N45EHJ/pySaAlzLfV0ZvlhkTqfXBZTH96HuaKSgYvmI/KmYxjVzAneuYEZJBgRTHWdd9m\nb6Nq/UYyF73OucuXoAp33dbyVCFIEtd/tphhO3YTXleLJJNRGx/HH9MuZu6b7wRE+93e1MzVF1/K\n9isvo+7Jx/2yZuai19DExdP11pv8sl5nxgxdAioXF+Vr+ibyfWbb2mKVBL2qml2GoEdfNpr1y9YT\nGtw2D0QQ8rAaXCsF3vjIm7xw00UMkstQVTdgjwrDHh2OpVuLpd+97xSCNK6/A1abjbC+A7Dke9Cc\nEAQMcaE4vWS0ye02gksywOkbOVCH3Ub+zp8wVPpfPlUUFBSWWyjM8n5I1duIjOzLkK6PEmoNTNOl\nqEtifK7x7tPrgiRaSY4zMGvmJBa89DtDBiXx1Ypsfvr1II8/PIVLp/kuoUomwPnKbM6JKGSVpTe/\nGKMxe/FyPOi5edSn7eHI4x/R87zH0MYGc6KHT0KEChXOvTrkI3wTajgRcZMnEjqgH1uvuJbBLz5H\n9Nhzz3hOSRD45p93sHXKJCJqanGoVNTFxlATF8eES6f7vaFLzZatHJo9F+XijxF69fLLmtCSHLfz\n5tv/j9ABlQvNU8/laqJLMt+yewtD+g9xTeZIOKyFLufbvj+bsGAt3Ub1w9VVOTQ8xS2ZA8x4+FG+\neMNzJzVLuNZrZC447QSVZfqMzG1WM7lbvsHS4H+hFpOoISOjCH2dd5KdfQWtNprBPR4mXnY+WH0k\nPdoBGA7oCT8vApmXKyZOhE8J3W7Nwemo4/LpgzhvTHfCw7TI5TIOppfxyhvreO6l35k1cxLXXz28\n/clOE2psXKU5zIXqIH609GOdMQTRS06JyFEjCbvjQkzZ9ehzctEmJaLQnRBOECSkUjVSDytCuO+z\nTbUJCUz8cz177vs3TRlH6XH3nV6Ztyw1lbLU1DZ/78/WqznvvEdzZjaTNm8E/NtSQhMbS/jQIVSu\nXUf8Rd4La5xtiFQowcWlOHPfbvoOH+3yHXfqcCs3rOTSSW5qz+U1OO2uS30+/mY9D95ysds9JiS7\nd7X//scmmvV6/nH5ZW7HOLQqrDrvqMHJRKlFOMbNZzlTmA2N5G5Zht3gZy10SaKsAbIP7w9YFn1H\nIJerGdjzXrrqrgZfJLydImyVVgyH9ISe4x0Pqiv4NCnObjz4d8woKjII+V8qT0MGJbH009v58pPb\nWL8xk0Gjn+fLr3f5ciuEC0bu0O7h1eh0Rmq9I7MoGeQ4rQKa2FiCuqRiqarGXN66HEW0gqT3r8Lu\nyPffRrRa2P/IY8f/0kc3U39ov6fdfR8ytYYR77zhszXaw/8lx0Gy3LUyYOb+PfR1YaELEqjdlKt5\nEpM5ORnuGPZlFCBJEiMGus5ej4zrjUrhPu7dnnUuyWWYvRU3lyR0lTnILHrvzHcS9PVVZG9Y7Hcy\ntwsa0vMMZB3K6MRkLtCn+01MH/orXRXXtZB5J4DklGja4dvkOJ8xjd2Sj8NR73FMn15xfPTOTaz6\n4X727Cum1+B5fPBpxyU6TwcJ1PJY8A7mRebSQ3WGPniZhPCXC1KmUhHcrStyrYamI0exN7UoBAkI\neL01UwfQ68H7SbzsUjZNvxzrWhWOjWE49wf5ZC1fkbo+O4d154yj+913es3bcLoIGzgAmUJBw4GD\nAd1HIBEpnJpCXKgkIblIhlu9aTVTzp+CXNb2oJUpTNjN1dicCvIbokkr7cK2oh4UNkbxyffbuecf\nk13uQRDkxMe7D+E9vuB5nrjvX8RERbkdY44MQnTzVV3+5XKef/p57PaOVdEEVRchN/qGbBsqCsjd\n9CVOm+9Dea3WtajYueMINaW+LLs7M6QkTWLaqB/oq70PmcU/td+nAnuVFeNR3+VV+czlbjMdAKlj\ncaOU5AjeWnQdNbXTePXN9ST3ns1jMyfz8AMX+mp79JWXsiCsjB2OnizTJ1FzGolzgk5EUImIFuHv\nEhlVRATK8HDMZWXYGpvQdUui5tAmdJYYQnr7L+4LEDdxAmHyCzDuqkMTJyFvDkIWrUJI8X48z9vu\n95LvfqD4m2+Z+Od65D5uRtNRdJ1xC4VfLCViqHu3rj9gKi7BWFSEtaYWS1U1gskMZhMOowmHyYjD\naMJuNP79y2ZsEWNR6nQtv4KCUOh0KHQ65DotiqAgZFot8qgoFGGh6FJS0KUmo01snbEeKVO2cVtW\nFheiDQomLKptsk+YzX3t+ZVTr3T5THIUk18fzR/5fagzByEiACJWqxMx5SGSekhAW0MhNmmQSxEZ\ngIzsbH7fuInDG9e5fA5gD9FiV7m2b9b9vo6H7nkIm9VGdmY2i1csbtPW+ERo68pQNFe5fX4mqC5M\npzRtJf4MOokoyS0zUJrjH2XI00FU9ECGpM4ixNoT/HvPOSU4LSJNWxsI6ue6gdGZwieE7rRXIjpO\n3VqLiQ7mpeeuZM6T01j05nqiUp7gsZmTeGzmZJTK419Wm13BH+mp5FdEICDRO7meCYOKkMlO7Ydc\nQGKsIoeREQWstfbmR2McRuepzSEfZkb6I6SVr0MQBHTJyTgMJioP/ErW6jkICgWDF8wndsL5pzT/\nmUKhCiGkZyTGomJUQRKSQ+6mOvfM4S1ST396HjKVivO+Xea9zXkBcRMvJPOV1zGXl7chO2/Drtdj\nLCjEWFiEragYS1ER+oJCGgoKiUxJJqlnT4aOGYM6IpKoLqFEhYURGhJCSEgoYSEhhIe2/DciNJSw\n0FAkoEmvp0mvp0HfTJNeT7PBQLNeT3OzHqPBgEl0cjgjg8I/t5BTUEhTRQVhqamEdEklODWFnd36\nkZTSjZSevYmKb/n8nuVe296SrTYrW3Zv4Z3n3mnzTBCc7C2wseroMORyCblM5Ni3vqKhnrjEvnyb\nruUfg/aREnac1OVKNTHRrqVjoX1Xu6hUYA5V444kC3ILcP7Vdq26stojmWuaalHV+0AuWpIoO7qD\nqoxN3p/bA4xOLRnp+Rga69ofHADoghIZ2n0mMYwF/3crPS1YSy1Yiy2oU71vqPiE0K3G/YjO0+8g\nFBysZt7sS3j6P9NY9OYGEnv+l/vuHs9jD01GoQrhjZ9HU9MUhFwmARLZFdHszkrg0at3oVKcuhtd\nhYNL1UeYoC7iB3Nv1hjDcXYwcU6IciAfbsZxWN0iTiCTWnTPRQFlbzk1u77HaW5JiqnasNH/hD7E\nhK0uBF2XFBqyd+G0ygnB/eF3pjgTUrc3NbHz1jvoftedJF3uOr4aaBxr2tL/P094dV5jQSH1aXsw\n7NmHaDRScyidhJ496dm7NwP69WXwRRczsn9/+vfti1x+ejHB0KAgUuLjOzze6XRyKCuL9OwsjmZl\nU5Kbz/o/N2J32InMyeaC1K7I6+sZMq5tRzo1IJjbeoI8JcNVGepYl9sTubz1d89qs2OzOwgNbnGh\n/pY1kFuH7SJI2XKCJyQPdysi8/bnixk7YgQjPGgVmKJ0SB4s3rCIMFJTUxk0fBCL3l3kdpza0IS6\n2vsNSCRJpGj/eurz9nh9bveLChTXO8k7vBfJR7XzZwKlKoiB3f5FqvZysPu9C/gZwdHsoHFbA3Gp\nrgWVzgRer0MXHQ2YGn7E6fBu/Oit9zbx6tt/cMENHxIZ16+VxQ4gitA7qZ57p+8747WqxCiWm3uz\nw9Tx9qBSvRxnoQr0ClCJyFJsyJLsmMpKOTDrPyjDw4isq8c6Yhj9n/IuGbQLh0D5NxtoLNnjdSJy\nh1MldUN+PvsffYLhb75GUJe2GfWdCWtHnsvkHZv/1rU/HZjLyqnfnYZhz16qd6URFBrKmAsuYNrk\nSVw6aRLJsXFe3LEXYbMh3ncflt1pmOvrMRoNVFptrFDI2T1uAr1HnEP/Eecwpld/omrbxgrvmHUn\n99x8N+cOb1tW+ePBKjIqIpDLWhNIaWUdIUFawkJaKkgcosC5qQWc3yUXtTaM3n0ucrnVZr2BlNHn\n0HTUfQ9wa3gQliD3ds2WP7bw8nMv8+vGXxFFEZnMNXkoLUZ0pUe8LhzjFO3k7/wVfZn/6rxtaDia\nXUlduX8bU3UEAjL69byNHmG3ILP4tn2zL6GMVpJ0byrKaO8K23id0C36LVgN3mmOcTLyK8N57ss+\nVFbqCQ3VEBcXilp1/MuoVIjcf0kaydHeySzNkZJYou9OtvXMsiRFqw1kAjKlkuLlK8h68x0GL5hH\n3CTfC+wAmErL2HPv/Zz/289+We8YOkrq+uwcDj45m3E/rvDPxs4Q2W++gyIkmO533n5K71Wu30jj\n1m3U7U5DLZcz5oILuGjSZK6aMoVkH7vwvQKbDe68E7KyXDyycXDgIN4NCWXntq1Eh4STFJ3Axedf\nzNiRYwHYnmti0dIf+GHeLW3eF+R63t7gRG9r7Ya02x0UlNXQu+txa0aSBJLD6rlh0F669Z5IsM51\nottVd93DjGuv4cqLp7p87tSoMUS5d3sa9Ab6JvWltNkzscltFoJLj4DTu7LTdpuVvG3fYqot9uq8\nbiFBrUnJkYNHcNg6n/+6a+rFDIi9H4U5ov3BZwEip0QTNb1tc6EzgXc7/Iqmv7sj+QI1TcGEh4cz\ncEAiQUFq8vJqKCyqw/JXa0aDWYHB7L1bWy+hjPmhW5gVUUzcGQQnZGrV39Zc6g3XM3HDasp/W82+\nmY9i1/umrOVE7H3gIUa8+5bP1zkZHcl+bz6ayaHZc88aMofjyXEdQd3uNLKfeZY1w0YTm1fAHRdN\nJW3LVmqKivn1yyX8e8aMs4PMAX77DdLTXT5SqVSMKitl8X+eIDP9EL/88jPjLxzP4h8Xc84V5/Ds\nW8+yYkcdyb0vo9nS1j1utJQik7W1bmvqm4mJaC0+IwgSVqcCTUiSWzL/aXWLnrk7MpdkAqYIzzHM\nCSMnsGnPJo9jZI5jwjHeJXOrSU/Wxi/9RuZOQUVWiYVDafs7HZnHxA5n8sglDAmZ/T9D5gDGDANO\no3dL/7xqoduM+zA3b8JXGZhZZVG8v3I4SsXx+RsaTVRWNaNWKUhJDiGFzzA15fH0k+7FJ04HDhSs\nt/Xme30cei+1aq3etJn0Oc/Q87576HLzjV6Z82RkLnodTVwsXW+92SfzdwTuLPWmwxlkLHiRscvP\nvvruQ7PnEn3uGBIvnd7mmSG/gPrffqdk5W8k9ujBP269lZl33Emkyk+60b7Cww/Dli3gxu2M2QzP\nPQdXXdXqr6vKq1i2dBlfLPue6nojk0YNZOr5Uxk5uKXUTZDbsOnX89ne0dSbj2f/OhxO8oqr6NO9\n9YVHkmQkhdbzzI2xqJWuSzHD+w2kaPcOwkJCXG81OgSb2r09c/fNd3PRJRdx3U3XuR0jE0WCS48i\nWL1bhmRsriPvz69wWPwjG613aMk4lIup2c8CNe0gJDSZId0eJUocidt6wrMYTkFEPVFDt0t7eG1O\nL1roIjZLDr4sp+gW10hceOuahIhwHf36xBMVGURRbjqvvb6UV99czz0Pum7JeLpQ4OBi1RHeitrB\nFcENKLzw8xU74Xwmbf0DU1k52/9xM/oc72pD5Y45AAAgAElEQVQx1+3ajT47J6BkDq4t9cYDh8h5\nYeFZSeZwPDnuGOzNeoqXfcO+m2eQ9fhTjE9KYvOOnWRu3cb8e/919pO5JEF7NdiS1PLrJMQlxvHw\nEw+zf/8Wdv/5K4OGDeLtL97m3tn3suT7xSCVIUkiXcLrcErHj6SahmaiI9sSskMUGNRVcEvmM+fO\n49nHZ7klc3uwxiOZv/f6e8TExXgkcySxRQXOy2TeVFNKzobFfiFzSZJRVC2StjWtU5G5ShnM8L5P\nMrHbV0Q5Rv1PkrmExL6mfTz5xlMUFhR6bV6vWegOWzGm+l+RJIs3pnOLyoZg3vl1JCabEvlf3VCc\nEoRobGjrX+eVV77B6RTp0zuOBXMvY8rEvj7ZR60UwTemXmwxeadzXHNmFulzniHq3DH0nfVw+y90\nAGtGjGHCmlWooyO9Mt+ZYtOU6Yxd8RUDf17JkCVL6XLuGOqio1l31eV+b8XqDaTdfR9jzzuXqF27\nURSXEDxyFFMe+jfTL/RPboTf8dFH8Pbb4E4XQKGA99+HoUPbnUqSJAqyCnjppef5dMnn3H7NZK6e\ndiErCyZjdqhwiiLZBRX065HU5l2d0sYbd0aiUrRNStyXfpi7n3iSvb//5nJdUSnHEBPsVutpx5Yd\nPDv7WX7f/Lun3RNcWYBc717DXJIkj+VtrlBbkknxrp981pHtRFjRcORoOQ1V/teAdwdBUNC/5x30\nCLkBwXqWX4DdQC8Z+LVoJV/tXUZOSQ5RUVG89dZb3HSTd/pEeI3QzY1rsJn9IzxQ0xjEqr09qG4I\nQpQEkqObuXxMNiFaG3OfW0lhST3JqePIydxIdY2ex2ZO5rLpvmmxWSjGs8TYiwyLd+QFC79cSv6n\nixm0YD4x48877Xm2XXsD1rp6NHGxjHz3TVQeFLL8if6XXMGtDQ2EpKYiymTIRBGbSsVbT8+msJf3\nXE++hjkzi6ueeIrh5RX0i44mOioKlEro3h1mz4ZhwwK9Re+jpAQefBDKXZCAKMKoUfDBB6c8rdXU\nzMIX5vPuh4sZOXoCIX0ep8lgRS6XEX1C/FyUZGiVZh6+2EC/Lq5LLwdNuohl773NwD59XD43xoXi\ncONes5gtdI3qSqWp0uN+dbUlKN00QzGZrfzj4ecxW6wse+O/xESEuRzXGhIV2XuoOOhe+MZrkKBa\nLycz/SgOu28axpwOunW5nP4x96Iwt23W87+AHHMOy458ww9pP2GytPYyX3755fz8s3cSlr1C6KLT\ngKn+e5yOWm/sqcMwWpWoFE6U8tY32hNvxwfTy1j05nqysqt47OHJPmkEIwH7HV35ytCVMi/kxtga\nG0mf8wxyrY7BC+YjU5/abbXoq2Xkf7oYa12LGETfJx6l682B7xSW+uVS7vnwE0JdlKXVR0fx+vy5\nNEV07qSXpsMZVH/yOQv37uP88HBiXGXwiyK89x6cc47/N+hrFBXBPfdARUWLRS6TgdUKw4fD4sVw\nilbpiXDYTHz5yXu8+9mviNFX0aPPaFTqEBRyEa3SRpfwBi7qVcDw4VORuYgWLvrgI6pqa3hlzmyX\n81vDdFiC3ZcajhkwhsXfLqZvf/dePU1DFeraQrfPZ730Ea999j0AN112IUteeRKZzP3/E0mSKDm0\nidrsHW7HeAtO1GQXNVBR4P1a+dNFXNxoBic/gs6SHOiteB12yc766g0s3b+MtEz3fepHjhzJe++9\nx6hRrgWaTgVeIXSbOQNz4xr82wPr1JCdW82iN9azY3cBj82czIybvX/YOiQZf9p7scKQQJMXkhcr\n167j0Jxn6Pf4LFKuu6ZD71hrath+4230vO8ecj/4CGVICKFmC/2WLUEZ3hFrwTeo2bKNm156mSuD\ngnAq2pYMqM1m3v3vkxwa5boNZ6BRv2cfFZ9+jmAysWzwYMYeOAie4uKxsfDZZxDXSevJzwT19fD9\n95CR0ULqF14I06a5T5Y7RTjtFtav+oEvl68mq7CJWy4dwbA+sURqjSR1GUVkRNc279TU1TFg4hSq\nD7rWoXBqVBii3Gt7/2vGv5gwaQI33HaD2zFqfQOaymyPe3/10+/576uf4hAlnnnwZuY+2LZE7xhE\np5OCPatoKnZdOeBNNNs1ZBzMxmxo9vlaHUFoWHeGdn+ECPvQzkwbpwGJSns1y7NWsGLPt9Q2tm/k\nyuVynnvuOZ566qkzXt0rhG6sW4HDVnLGm/EHSkobWPTmelatyWDWzMn865/jvL6GFRW/WPryqzEK\nmxcy4jMWvIg+K5tBC+a3K7qy7fqbGPzcPEL69MaQn48mNhZDQSF7H5xJv8dnuczK9jWqN22m5Lvv\n+TglmQEHDiG5sOJUVitL7r+XbX6qze8omo9mUvHZFwjNzTw1ezZ3jRx13EL1BLMZ5s6F66/3z0b/\nByE67Py5/leeeGoO0eHBPPfovYwYPsWlJtwlt93OA7fPYPrEtv0fJJmAIS4U0c1944O3PqAwr5CX\n3nzJ7V5UJgPa8iMuk/6OoaismgtumcWoc89nytAk7r5umts4usNhJW/7jxirfGstS4KcwkorBUf9\nJ0zjCWp1OIN7PEii8iJw/O8ku4mSyM6m3Xx9aBnr9q/nVGl16tSpfP3110RGnlm+0xkTutNejan+\nR0TRPyUW3kJNrYFX31zPkuVpPDZzEo886H0iaSCUb419+MMUdMaX0MZD6aTPeYa4KZPp/e/7XY7J\nfvs9FFoN3e9y3Zns0Oy5SHYHQ15+4Qx303HUbt9B8TffMvzN15j2/Y9ctnwFDhcKa06ZjLeffop8\nN7HPQCD3hYUYM47w8ttvc8uEv4ji6FH45z/bz/h2OmHKFFi40Pcb/R+HJDpZ8tn7/PfpBdxw5RUs\nOsmlvuLXlXy/6ne+ef9dl++bo4KxaVznuOzavou5j89lzbY1btdXWM0ElR4B0X0Hp2NkXvjHknY/\nj81sJHfbN1gaPMfqzxQWSUtGRjFNtb5pFHMqEGRK/h975x0fVZn+7WtqJjOT3ntvhA4ighR7Wwti\nVxQBC9Z11V1XBRX7T9d9dRVF0UUEQlFAsCO2FVRqKKEFSEIC6X36zDnn/SMhEEmZlJlJYK7PZ0gy\nc8557gEy33Pfz12yU2eQrL8BmdVlM8HcToPYwKqCNSzespjC0u5PoUtISOCdd97hiiuu6JE9PY6R\n2S37+52Yw4lBMAdyZ9PQYCEk7u+8/Pq32NoY99hdgmjgbt1mXg3Zw1BNzzbXAwcPYtyalSh9Nfx0\n0eVU/9G6G19t7g5qt2xtV8wBBr84h/ALJvL9mPHUbtveI3ucwVh0hMLFOQx/s2kwxo+XX0p12KlT\nudRWKzvPGtlnxLx87Zd8N/xsJo8+h2O7dp8Qc2gSamf2iXu3AeMZjUyu4PYZD1BSWkZUShqK+CTe\n+mhBy+sdDV9x6DTtirnNZuPK867sWMztdnTH9veamJsb69j/w8cuFXMJKK2T8fuG7X1AzGWkJF3H\nFSPWkqK65bQR8z2mPTy16RnGvjeBF9e+1CMxBygqKmLVqlU9tqtHHrok2TBWL0Ow9+4cbE8gCCKv\nv7mef735Pfc2D4Lx9+/daTi7hAQWGRIpsvUs1GSpqGDX08/iExbK4BeeA5mMDWMmcPa6r1DqOp95\n7jCa2PrAwwQNHUL6ww/0yJb2MBWXsGXmA4z/YnWr53UGAw+88ApRxSX4mM00BAWSN3woC++f6RI7\nuoLhcAGHnn+ZYZmZfP7xxyjb2OunpgbuuAPKOvlAtljg0Udh6lSX2HomI4oijzz0ELtyd6JKuo8L\nMqr5+51XnnKcpFDQGNF+idqYwWOYv3g+AwYNaPN1meDAr2Qvsg7mjndFzBuryzj8aw6Czdzpsd3F\nLtOw/1AVFUcKXbaGs8REncvAmIfRmJ0fCNSXMYtWviv7jsXbc8jNz+31648bN47333+fzMzul1r3\nSNDtloOY675EkroxTLwP89bcn3j9re+5cfIIHn3oAiIjeq+UQpTgV3saS40x1PTwr+3YF1+x8+ln\nuD57ADMUcjZOn8YfE8Y5ff7hjxZQ+tU3jHjnLTQRPZ9hfjLfj53IxG+/QKk/de6vTJJIOHQYbWMj\nDUFBlCR6vga94I03qd3wGx9/OJ9Lx586PawVr74KS5c2JYS1R3AwfPJJU3KcF5ewd+9ebp36MBeO\nTOf/njx16JAx3A+Hqu0g5P3T7mfMuDHcemfbTZdkkoi+ZD9yS/tJZF0R85rSgxRtXInUgaffU+qs\nPuTl7sdq9mzENCgonSGJfyPAlu1RO3qLEnsJOXtXsGLLCuoa6ly2jk6n44033uDuu+/u9jV6JOim\n2jXYLfndXryv88F/N/Cvt9Zz4XmZPPbwBSQm9F4ttxU1X1nS+dwYhqUHiXPBJSU89uAj6H19qQsK\n4r1/PMax+Dinz2/MP8jW+x8i5e4ZxF13bbftOJnNd80k+a5phIzqeRmGq6n8dQO7/v4k0//5BHOf\netq5kwQBbr4Z8vPbFnVBgLffhjFjetdYL23y2quv8P6891n5wXsMavZubP5azH5tl6jNnzuffXn7\n2h+FKknoSw+iMNa0/TpdE/Pyw7kc3fpV52+km4goKCi1UrTfs4lvWt8QBiY/RJTiPBD6d8KbgMCv\n1RtYvCOHn3b+7LZ1L7/8clavXo2qm5Mcuy3oolCHqXolgtB3Wga6ikVLN/H6m+sZMTSOx/96IZkZ\nvRdCqpP0rLRkss6g71binNzh4PGnZpN48BCHMzP4f888jb0bbUbznn8Ja1VVy353d9n/xpuoQ4JJ\numNKj67jDor+/RZ6q5VP3nqbjNBT9/Y7xGptymLfsAFqa0GhaNpbT0tr6nl+bu9XT3hpn4MHD3Lt\nNdcw+bJLmfX3R2kMa7uD49ZNW/n7g39n/R/r272WrqIIZX37WypOi7kkUbJnAxV7fnHqPXQHk+hL\nXl4hjdXtd61zNXK5moFp95CknQy23mmw5SlqhFpWHlrFkq1LKSl3//jYgQMHMnfuXMaNcz7SejLd\nFnSbcStPP/0EBoONl+dc1a3F+xuffZ7La2+uJ3HQ9fx7VhJRob2XQHdUCiPHlMYWU9fF2MdiYcCO\nnewaPqzNDHJnqfjpF7Y/8hgj5r5F6Dmju3x+6TffUfHjTwx51X1Z9N3BYTSyc8a9XH3zTbz/9Oye\nXSwvDwoLoaICBg6ElJSmcLsXjzB71tN8vnYti1YvIj6xdYmnKIqEqkKpEdr3vH1rSlFXtz/hzFkx\nlySRwm3rqD28td1jGi0O/DTdSxKTJBnHakUO7N6HJPbuxC7nkZGechPpQXeiMLdf49/XkZDYadjJ\n4t3L+HLLl9gdvTs5r6s88cQTvPzyy906t9uC/shDV/PWO2sRRYn77hrPS8+dGaIOMOOfBUToj/Li\nU73vhe0VYvnEkMxhW69OtnUaSRTZet9D6JISyfrHY06fZzpyhC33/5Xxa1e6zrheoPrnn9n55DMs\nX/cdV40+x9PmeHEBW3O3MnnSZB5/+nFum36iscv44eN5+8O3GTxscJvnaRqq8Slvf0CSs2IuCA4O\n/76axmPtN6HZdKiWf399mDA/Na/fmo1a6fzvux0f9h2sorKkZ5nVPSE25jwGRT2I2ty787zdiVmy\n8EXJlyzeuoQ9hXs9bU4LF110EatXr0ar7fqckG6phmCvRC6zITbv/S5ftYf7HlnGj7903EXpdOHb\nlR/yxEOu6WiWpSjhxYD/8VDQUcI8UOEhk8sZ+d7baONi+eXKSRiLnJvHvPGm2/r85LTCf/0/hK++\nw9DQ4BXz05gRQ0dwqOAQFaUVPHzXwwA8fPfDTJ85vV0xVxvr8Sk/1O41nRVzu83CgZ+XdCjmdSYH\nC34p5kCpgQ0Havh8m/MlbLUWNb//vtdjYh4SMpDzhn/IiMA5/VbMC6wFvJT7KmPnj+epz2b1KTGH\npmTPw4e713BI8eyzzz7b1ZMclr2MPUtBfb2Z4cPiWZUzjcZGC//95HeefOZzjpXWExDgS0x0YLeM\n6sssXPIHAf6+XHPlEJetIQPi5DVcqC1Bp9Bw0KHH7uay5sBBAwk7dyzbHvwrkiAQOLj94Tabpt9D\n9uyn0PWBbPW2sDc2sv32adxw0cV8+u57yHvQb9xL/0COnInjJ1JWUcY/Jt/KwLNH8sDfH27zWJXF\nhPbYPtrrQeqsmFuMDeT/tBhrB/vvABqVnCUbS6g3OQjSqZg2MYEQfcdbbSIq8o+aObAzD9EDIWGt\nLpKRmU+R5XcfPo6+MeipKzgkB+urfuKFjS/y0levklu4A1sfGk5zMg0NDaSmpnLOOV13OroVcu+o\n1WtNrYkVq7bx2artlFU0cv2kYVx3zTCyMk+PWsSzJ7zGwvm3k5Hmvh7dBrSsNGfwrTEQwQMNS/a9\n9gaNBw8y8p23kP0pq3vf6/9GExHu8Znr7VG7ZRu5jzzGTz/9xOjTcQKal075bcNPnH/hZWzctZHk\n1ORWrylsVvQleSC0LZLOirmhrpJDv+QgdDIf/VCFkdve2UbOgyNZciSOW+OLSQjteP/ZKPqSt/Mw\nhrrqDo9zBQqlhkGp95GguRrsntkG7AlVQiUrDqwkZ8tSyqo93WTHeSZOnMiPP/7Y5fO6LOiiowZj\n7UpER32nxx4prmHFqu18uno7MpmM664ZxvWThhEX27cnarXHuh/28f5Hv7Ji0QyPrF8uBrPUnMFv\nJh+3r139+ya23P8QQ197hYjzJwJQ+tU3VPzvV4a8/ILb7XGGqm/XYfr+B/K+/c7TpnjxMAaLgaGD\nhvLsq89y5bVNTWjkgh198R5kdkub5zgr5nXlRyjcuBzR0bHH98W2chb+r5hF9w93bs9cknGkRuDg\n7r0e6DwoIzN1CumBU5CZe7fBlquRkNjSuJUlO5fxzbZvEARPJQ12n+TkZL7++mvS09O7dF6XBd1m\n2om5vutze/fsLeXT1dtZsWo7URH+XHftcK6fNIygwK5v/HuKq2+Yx98eOp8J56Z51I58MZpPDCkc\nsLq/RGT7I4+hDgoiacqtbP3ro4z7/DO32+AM5UuWody3n02re2fOsJf+j4DA5MmTGTAoi3/O/ju6\nkr3I2/GonRXzyqI8ijevBUns8Lj/W3sQo83Bc5Od6wJmQ8PeA2VUH3N/6VR8/MUMDH8Albl/OV6N\nkoG1RV+weGsO+cX9vz/KvHnzutxkpsuCbqxZicNa0KVF/symrUV8unIbK1ZtZ9iQWK6fNJzJk4ah\nVvXdGsa8vaXc/cASNqx/1NOmAE27fZsdySxujKfczY36Kpat4NF581m9bBGNYX0vMab07XeJlcn5\nYt77njbFSx9DQmL27H/SUH6UNx9ru1eCc2IucWzfJsp2tV/Pfpyp723nsqHh3Dg6xhkDqTIq2bNz\nLw6btfPje5HQ0CEMTfgbOkty5wf3IQ5Y8lmat4yVm1djsrTfpre/cdlll/HVV11rSNQlQReFeow1\nnyE6eq+ZzA8/H2jZc7/04myuu2YoV13RdiYqgPLXfBT7yhAjA3CMTUUKco+Hf+/DS5l4bio3Xd+3\n5nU7UPC9LZ3PGiNp7IVRrc4SXFBITVKi29ZzlsLnXmDsoMHMf/Y5T5vipQ/zxdIP+HDBYlb958lW\nzzsj5pIkciT3R6oP/tHhGgdKDdw2dxsf3j2UQXGdt48WZGoOFjVw9HD7pXOuwE8fy+DkvxImnt1v\nZgrZJTvfV6xn0fYcNu/b7GlzXEJGRgbffPMNiYmJTp/TJUG3mfdirvsaV02kX/PlTj5dncs33+Ux\nedIwrp80nPMnNO8h2ATU9yxEXVgNCjkIElKYHvP/TUZM7GKXry5SXWPkrHGvsnrZPQwe6MRdtgcw\n4ctqczpfGYNw9JNfyt5mz4N/5babbubFmW2Pl/Xi5WRWf/IuHy7MYe3cppa/zoi5KAgc3vwFDcV5\nHV97SxnLfj/KovuGo5B3XlVhsGvYtesgZhf2Cv8zKpWegSn3Ee9zBTj6R8JbqaOcZfuWs3zrCqpq\nqzxtjktRKBQsXLiQW265xelzuiToxtrPcVhcf/doswt8tmo7K1ZtI3dnCdddM4ynjlRj3HgIlVpF\nUuKJsgkxVIf5jRuRwvxcZs8rb3zHipXbEQWBB2eex7Tb+24Nc5UUyDJTBv8z9d/OTd1hy81TePaF\nF7h/Uu/0o/dyZvBFzge888ECPnjhUc69YWaHYu6wWTm4cSWmyo63HF/+PB+HKDJrUufjgCVJzpFK\nB4f27Omy7d1FhpzM1DtJ878FmbXrnSndjSiJ/F6/icU7lvB97np6MH6k3zF58mQ+/fRTp493WtBF\nwYCp5jMEh3vvimpqTXzz5npGLfoNydSURRodFUBEeFMIS2a2Y3n0IuwurAuPTn0SU/PaMdGBrP10\nJsmJfbsWs0CMZJExjTxL381L6C0Oz36OZx54kFsuvMjTpnjph3yz/CMefeNndnw8BaW87eQ2q9nI\nwf8txVrfcenTlLnbuHpkJNeNiu50XSsa9uw9Rm35sW7Z3R2SEq5gQNhMlOYAt63ZXRrEBlYd/pzF\nW5f0eN54fyU7O5t169YRFRXl1PFO9yIT7KUeGcQSHKRlylVDqF2xhXKTDbVKQWWViZpaE8FBWoJ1\nPshLOy+h6y5ffrObiePSqK4xUlhUw9V/Gcy5F77JJRemcdfUsYwZ3TcTSJLkZTztV8Z230QWGxI5\n6tn2xC5j26138N5//sOkied52hQv/ZRLb5iGQqHg4mlP8sOCU0swTY01HPwlB4ep/c+ZvUcbuW3u\nNj65bzgDYjqJFkpQ3iBn/+6dODpobuIQJWrNImG6nt+UR0SMZHDsI2gt8eC6cey9wh7THhbvXsaa\nLWuwujkxsK+Rn5/Ppk2buPrqq5063mkP3VT3JXazZ8bzyUtq8f3bcmqPVKPX+aBWK7FY7NTUGjHW\nmpmXEEzU1DFcP2k4wb2cJHfTHR8x9bbRjBwWT9GRGkYMbxr4sGrNDj5YsIGaWhMz7hjDjKl9d1Sm\nQ5Lzsz2N5YZo6oXTJ1y156G/Meuvf2XGNZM8bYqX04AfP1/ES//6D+s+fL7luYaqYxz+NQfR3r6w\nfLaplFVbSll03/BO1xBkPuwvqKOssP02swB2UeK/uY2YbBLnJfoyJLJ7oXF//0SGJj9CkGO4q1Kf\negWLaOXbsu9YvD2H3PxcT5vTp5gyZQoLFy506linBF0QjFRX5OCD6zzhzvD5z3pUK7eD5qRpYhKI\nsYH8dO9EPlvdtOc+ZFBsU3e6a4d3WgZ3rMaPw2UBVNbpCfY3kxpdTUzwibrU6hojo8b/H4d2t58x\nvW9/GfM/3sj8BRuZfscYZtwxps92xbOIPqy1ZbDWGILNjRnxruDwcy9y60UXMvtebwKcl97j/Tde\nYPfunbz1zxnUlByg6I9VHU4ze37VARRyePLqzhuANNg15O04gNnQ0OmxG4strNpnBCDaX8n9I/1R\nK5xvWaz28Wdw8oPEqi9BcvTdVscl9hJy9q1gxeYV1LkxIbC/IJfLGXnhhaxbsQJ//84rJZwS9KM1\nh/k67yu0KiVJ/kqi9SIBKhMy3NuBRz3vZ1Q/HUBe0YCo80HMiMD8wiTwObFz8OMvB5q6063cxiUX\nDeD6ScPaLIP7bW8c67YnUd3gi0IuIUpy/HwtXDisgAmDmvZr3pz7IzU1Jp57+gqn7Pvw443M/3gj\ngQG+zJg6lslXD+2dN97L1BLAcmM6P5l0ffmmvV1K3n6X0dHRfPDsHE+b4uU05NXH7iD/UCH3nXWq\nEEqSHJlMRBQlbpu7jRtGR3PNyI73NyWZgsIyKwV7nYtwlhkEFu82YFP501hXy4QEDZekOhd5lMmU\nZKdNJ0V/I1i7P0rZlQgI/Fq9gcU7c/hpx8+eNqfPERgSQnxGBv7h4diVSuQKBYtee43kuLhOz3VK\n0H87/Bt/FLSuuVQr5KQEaYnVSURobahkbbdP7G3kBZXIa82I/hrE5DDooCRk7Ve7WLFqO19/l8d1\nzT3lL5iYwdaDkSxaPwSl8tQbEodDxtXn7Gfi4COcNe5VliyYRlpK15qn/PZHAfMXbGD9T/u5686x\nTL9jDJERnd9duZsjYgRLjKnkWvrmL35blC9ZRlRtHV96m8Z4cSFTrxxLjMbE5GFNyWMHzNn8YTof\npdxConExD837hkX3DScjSt/hdSyilrw9RdRXOddH/IsDJvZX27gpW4+PSkajVSIp0JlUJxkpideQ\nGXoXSrPrKn56Qo1Qy8pDq1iydSkl5e7vgNdnkclIycwkICoKfVgYDVbrKZn8/7znHm687LLOL+WM\noH+67VNKajv+B4jUa0jwVxCrl/BTGpD1Id/Pbhf4tLmn/M59Js6++v/hHxSLTtd2T/RAnZWRMZ/z\nxmtL+HbNA91et67ezAf/3cCHH29kxLB4Zkwdw3nju9ab1x3sEhJYZEikyNZ3Q3MA1d+sQ/rtdzav\nWu1pU7yc5jjMDZx/7lncMsKf2Jgsltbci1zmoNZop67RwEvZ76NTGNs9XwLK6mTs370X0dF5K8d9\nVXaW5hk4L1HDhISulZxGRY5hcOzDaMydZ9a7GwmJnYZdLN61lC+3fondA5Pi+iJ6f3+Ss7PxCw9H\nUKsx2zqeA3D+6NG88cQTnV63U0E32ows37KcerPz++dqlZzUAF9i/SQifG0o6TuZilv3+/LmqmHU\n1xuw2x0EBWoJCtLiqzmRdGJzyDEdfovxQxuYcvOoXln3y292M3/BRoqO1DBj6himTx2Dj7qTO2+T\nFcWhSuSHKiHAFyE2GDEtvFfs+TOiBL860sgxxFLbBzvT1G7eguXLb9m+ciV9+7bDy+mCufwgaYNH\ncdctj3NQGk9ZrQGZDEICApgUuJBUn7Zrx+0yDfsPVVFxpLDTNRyixNI8A1aHxE3ZenRq5xu8BAYk\nMzT5MQLsg/pcwptZMvNF8Vcs3rakz80b9xSJ6ekEx8Sc8MK7cG58VBSf/ec/qJQda0ansZxqQzWN\nlsYuLA02u8ieKiN7mkvWo/30JPjLiYP1SFQAACAASURBVNWJ6JRGj3rvkjyQ4EA/IsK02GwOautM\nFBXVIAFBgdqmLHmZD7/8Xs77r4zvtXWvuHQgV1w6kMOFVcxfsJH49Ke5/trhzJg6hqGDY085XpFb\njM+8n5EXVIHNgUyQEIO1CINisT52MZJ/7zaOkctgvCqf0UFFfGlJ53NjGJY+kjgnmExsf+hvlNXX\necXci9vwjUhl2w8rGXj502ROGEOQRkGgVoWIlQhl2xHLeqsPu3P3YTV3PEYV4PcSC5/vN3FTtr5L\nWew+viEMSX6QKPn50MeiagXWApbuXc6KzZ9hMHb+d3A6o9PrSRowAP+ICCRfX0xWKwJQb+26g1tZ\nU0NBSQnpnbSB7dRD/yX/F7Yd2dZlA9pDq1KSHKQhTi8R5mNFIXOv915UHsA7X551Ss/ipjI4E7V1\nJuQKFRl+Ofzr6SyX2rJo6SbmL9iIQiHnrqljWvrEK7YXo3niU2TyNu7WBREpMgDT2zf3uqifTJ2k\nZ6Ulg3UGP4/f/G+7dSofzHuPq8aM9bAlXs5Efl76bx58cycTzrkGKz5c5Pc5KT6tvU4RBQWlVor2\nd574VmUSWLrbQJSfkslZOqftkCnUDEq9iyTtdWBzuoWIy3FIDn6s+pkluTlsyNvoaXM8SlxyMqHx\n8fiFh9NotyOKHU/h6wqP3HEHd0zquES3U0FfunkpZQ1lvWbUn4nz1xLvJyNaL6JXGHF17MghKHh7\nzUiO1rSfOKIQq3n2jm1o1O65+926/QgfLNjImi938siNZzFjw0FMJbWEBusICWkj6UYQcYxKwvLC\nNS637agUSo4pnS0mz7SIPPLm25yfmMR/Zs32yPpevAC88+Sd/Lp1H49PODXvxiT6kpdXSGN1ZafX\n+eagiR3lNm4aqCchwFlRlpGWfD2ZwdOQm52/AXA1VUIlyw98xtItyyirdi7p73RD4+tLysCB+EdE\nINPpMFpclxx+7ogRvD1rVofHdCjoRpuRJZuWYLS2n/zRm+jVKlICfYjRS4RqzChwTQJFRZ2Wt9aM\nwmJTIvuTZivkIn+btInwQPeHi0wmG79O/5hBGw5icAioVArSUsLx8Tn1F19SKzC/dj1ieoRbbNsr\nxPKJIZnDNvcNcajf8BuWz1ax7fvOR1R68eJKHKZ6rr50AuclSJyf1TQnXJJkHKsVObB7X4e16gD5\nNXaW5Rk4J1bDBUnOR9ZiYyYwMOohfMyuyZ3pKhISWxq3krNzGV9v+wZBcG/pcl8gOj6eiKQk/MLD\nMTgcCL3ohXdEbGQkn775JhqftpO5oRNBL6wuZHWuZzKKZUB8QLP3rhPQdpBR2h1qGn1Z8tMgSmt0\nWOxKfNUOwgIMXHfuPmJCupYz0JvIH1/B0ZXbMZht+GpU2OwiEeF6QkP0KBQnxFRmtmF5+grsFw5w\nm20SMjbaU1lqiKHSxTPYRauNH8adh92Fd7xevHQFU3k+IfHZ/PDkaOQqX/YdrKKypOMe4xKwbLeB\nBqvIjdl6AjTO3RCHBA9gSOIj+Fkze8HyntMoGlh75AsWb80hvzjf0+a4FR+NhpTsbPwjIlD4+WHw\n0GeSWqViwSuvMCAlpd1jOoz5FFV7riG+BBTVmyhqTq73U2tIDdIQoxcJ8TEj76H3Huxn5oErN1Fe\np8NoUaPzsRHqb0ahcM/dVptIEj6CSGJSCHX1ZoICtUiSRGWVgby9pQT4awgN0aPT+SDJ5MiMHZc6\n9DYyJMaq8hkVVMC31nRWGiMwuaiV7I67Z7Jq3TqXXNuLl+6gjUjjw3/NYuYb/+HOgRrsFlOHx285\nZmV5noEbB+oZEdW+V9VqDW04Q5IfJlw2nr5QHHTAnE/OnmWs2rwaUyfv93QiIiaG6JQU/CIiMAoC\nDkFoaoHvQQfDZrfz69atHQp6hx76si3LKK0vdYlxPUEhlxHv70ucH0TrRHzl7tkScAc+b65HtXYH\ntNG2tqbWSFW1EVEUCQ/W4fvRVIRBp2bIuwsDOj4zZ/CdMQChF0caFr79LudERvLRnFMHZXjx4mlu\nvXwC5mP7GBPedri5ziKydLeBIF85N2Z33HjmOAqFD4NS7yVeey0yJ7a16i317K7IY2x878+QsGPn\n+7L1LMrNYfO+zb1+/b6IUqUitXkvXB0QQGMfjQyePXgw8+a03yGzXUE32ows27yM4pJiAkL79qi9\nQI2a5EA1sXqJYLUJGS6OB7sQxbYjaJ5bg8zW/t6U2Wxjj9XBxSW13HRHU017eqrn9tjKxWByzOn8\nbtL0+FrVm7Yg/fgTmxfn9IJlXrz0MgYDxvoqBgwfzo2pEuF/moS27rCZTUct3DRQT0qQMx0YZWSm\n3EJa4B3ILc7trZc2ljJzzQOUNBzlhoHX8fi4R5H1QkFnqaOc5fuXs2zLCqpq3Tsm2xOERkYSl5aG\nPjwcC2BzogGQp4kOC2P5m2+i17bdCrhdQS+uKeb6W6+nsqSS8286n+zR2S41tLdQyGUkBmibvHet\nAx95/wsT+cz9EdXyLeDbTma5KGJ56VqsQ+OY//FGPlywkchIf2bcMabNvvXuIl+M5hNDCges3R/3\n+L8LL+WnzZsZmZDYe4Z58dJTGhvh/fdh+3YwGDhmrueW3/7gL6ObPlgL6hws221geJSai1Oc67se\nF3sRAyPvR20O6ZIpc/94j//321sAZIZlsODaDwn2De7a+2lGlER+r9/M4h2L+T53/SktR08n5HI5\nqQMHEhAZiW9wMPXmPj5Htg0UCgXzn3+eYQPazp1qV9BffvdlZj08C8EuEBIVwpV3XUnWqCzUGs+U\nL3WXYI0PSUFKYvUSQR4YKNNdfP7zA6p1e8BkA6UCJAkcAlKYH5bHL0EYkdDq+F9+Pcj8jzfy2x+H\nm6a+TR1DaFslby5GAjY7klncGE95F294S957n6GBQXzy0isusc2Ll25hs8HNN8PBg6Bu/vyTJI4V\nHuS/OlgrWKgwCtw4UE+Ib+c3s6GhgxgS/zf01tQumfG/ol+Z+8d7yGVyajS12Kqs/PWch7gy8y9d\nfkv1YgOrCz5n8ZYlFJZ6LlfK1QSHhRGXno5fRAQ2uRyrvf+3np02eTIPTZnS5mvtCvoH337Ak9Oe\npOpYFWnD0hAbRIqPFhMaHUpidiJJ2UkkZScREtW1u0tPopLJSQz0Jc5fIkoroJb1be9dua0Ixf8O\nIi+oBLUSISsK+xWDkMLbH/RSWWVomvq2YCNjz0lmxh1jGDe2ax8cvYEdBett6XzaGIHBiTxDS2kZ\n26fdTe3Ro95ucF76FlOnwu7d/LnG1WGzsGXPXj6OUpGS2Xl9uF4fw5DkvxImjj6lsVVHrDv4Pe9u\nmkeQbxD3nX0vI6KHYxfs1JhriNB3rWx1j2kvS3Yv5fMta7Da+kDWXS8jl8tJzsoiIDISXWgo9X10\nL7wnnDVwIB+80HZ+UZuCbrQZ+WzrZxw4eIDi/cUMGT8EeXPJ1LHDxyjMK6Qgr4CCvAJsVhtJA5JI\nGtgk8AlZCacs0lcJ1fmQ5K8kptl7p69675J0yoeJM3z+xU7mf7yR8vIGpk9tmtWuUMiRJKhu9CVI\nb0Uhd21WvwlfVpvT+coYREct4vPuf5hn/v53pl95lUvt8eKlS+zeDfffD6a2b/5rjpWw2NCA9ez2\n979VKh0DU2YSr7kS7M73cVi77wve3TSPpOAkZo66h4Hh3dv2tIhWvi37jsXbc8jNz+3WNfoyAUFB\nJGZl4RcRgV2pxNLJoJP+TlpCAvNfeIEAv1Obo7Up6GX1ZazMXYnN0flfTGNNIwV7CijY3STwR/Yd\nISk7qZUXrwvoO92N2kPVPA42Ri8R5WtHJet/+yvtceBgBR8uaJrVfvstZxM7/B9UmOKICzXywJWb\n3GJDpRTIclMG/zOd+sFXsW49qp9/5fc1a9xiixcvTrN5M0ybBpp2Ej5FkS+KDrEiXs6g0NZiLUNO\nZtrtpPrfhtziXNkawIrdnzJ30zyGRw9j5qh7SA1uv0ypI4ptJSzdt4IVW1ZQ11DXrWv0SWQykjIy\nCI6JQRca2ua40dOZ0MBA3nnmGTKSkk55rU1B31Gygx/3/Uh3Yp+SJFGQV9DKi9f6aVvEPTE7kciE\nyG69EXcSqfMlIUBBjF7EX2lEhgfr03uRNz8q5vv8a5BjJzg4mBmX7+ezhW8zfFg8t910lsvXLxAj\n+cSYyh7LiRYIP557HkVFRUQEBbl8fS9eusSuXXD33dBeBrQoUpWdTspnq5g19kTOSlLC5WSFzURl\nDnR6qU9yF/Pupvc4L/k87ht1DzH+MV02V5AEfq3ZyOKdS/hpx89dPr+vovf3J2nAAPwiIpB8fDB1\nY8DJ6YJMJuOVxx7jkrGnzrZoU9DX7VlHXmlerxlQWVLZIu6FeYXUV9c3efAnheoVSgUyUaTmlx0U\nKxQMHue5bO0/o1bISQ3WEqMTifS1o5T1332ZBpMPLy8fS02dQHVNI8YDT/HbL78RFKjj8xV3Mzi7\n6x8iXUUCch2JLDIk8uv/vcVlqen8+6mnXL6uFy9dxm6HKVPg0KH2X3/nHe5+8yUq9u3i2kEZDEn4\nG1pzotNLfLDlQ+Zueo9rB1zDzFH3Eqrtel5SjVDLykOrWLJ1KSXlbU+C628kpKUREhuLX3g49WeY\nF94ZU666ikenTTvl+TYF3dUNZcwGc5MHf1KoPjY5mlkKObH7i3lIo+KsB69j5EUjXWZDT4jy820e\nByuhVxo8Og62OxwuC2Tj3lgSgkt47cVX+eXXfHx91YwcHs9DMydy0fnuaTe5+UA9t0//mGMHT98s\nWy+nAQcOwD33QEMDnDwBUZJg+nSYORPRYSc0MJRvpnxFkKbzEjJBFJi76T3mbnqPacOnct+oe9Gp\nu7Y1KSGx07CTxbuX8eWWL7E7+ncGt1avJ7nZC5dptS4ddNLfOXvIEOY999wpz58i6Ba7haVbllJn\ncu+eS8n+I4ye9SEpNQ08DuQlRhKZENkSpo/PiHerPc6iUSlIDfQlRi8R4WtF0Rf6NXaB6loj9z20\nlJEjEig6Fkr5sS3sz69gRnPpm1brujLFqffkcM/Mx7n0shtdtoYXL71CVRU88QQcPdpUxubvD1de\n2bS/3szST5ay6NVP+PdFr7d7GYPNwLub5vHRtgXcN+pe7ht1Lwp51/o2mEQTXx39mkVbl7CncG/n\nJ/Rh4pKTCUtIQB8WhsFud9ugk/5OemIi8194AX9969LkUwS92lDN8q3LsTrcL0yWmgZ+fPa/HFTI\nueqCq6j1q20J0x89dJTEAc2JdgOTSByQiNbPuQYO7iTG35cEPzmxegmdwoCrx8G6giPFNcxvLn27\n6orBzLhjDCOH9+4N1c7dR3nwsTXk7jjYq9f14sWlHDkCggBRUW0myt1y4c1cHXIlw6OHtXq+ylTN\n3D/eY/Xez5k56h7uGjm9y0sXWAtYunc5KzZ/hsHo/mmQvYHG15fk44NO9HqPDTrp74QGBTH3mWdI\nT0xs9fwpgr6/fD9f7/7anba1wma2odKokP2pTEtwCBTuaU60211A4Z5C/IL8WiXbhcf1jRGDx9Gq\nlKQEaYjTS4T6WFDI+l85xdIVW5j/8UbsdoEZU8cy5eZRvXLd2+9awsTzruH+B/+BWt2/mhV58dIe\n365YwytPvsb7f3kfgJKGEt79Yx4/FvzEfWffy21Dbu3S9RySgx+rfmZJbg4b8ja6wmSXc/K40eOD\nTrz0DJlMxuuPP84FY1r38j9F0H/O/5ntR7a71bjuUn6kvFWynbHe2KpcLjE7EbncffO7O0Imgzj/\n5nGwehGdvH/dYe/YdZT5Czaw7NOtTTXtU8eSkhTarWsdyC/n8mvfJzgkgsGDB7NixYpettaLFw/w\n9tuwahUrNm+n8fyXWb3/C7Yfy2Xm2fdwffbkLl2q0lHFivxPWbplGWXV5S4y2DWo1OqWFqtKf38a\n+2GL1f7A7ddcw9+mTm313CmCvnL7So7UHHGnXb2GscHYqlyuMK+QuIy4plB9cza9f3DrLmsyUSRy\nfzFyh8DRQclus9VPrWoaKOMHoT4W5PQP791mF5pq2hdsIC42iBlTx/KXywZ26Rq3TV/M5q0llFdU\n4uvry/effMKYiy5q2pf04qU/kpMDr74KKhXVFZWsKa+m9rzZXWrLKiGxpWEbObuW8vW2bxD6kScb\nERNDVEoK/uHhmCQJez8YdNLfGT10KO89+2yr51oJuiRJfPz7x25PiHMlRXuLmkL1zdn0KrWqlRd/\n83d/kLBpH4KPigMTh7H5xvO71ZWtJ8hkkBigI1YPMXqh34yD/el/+cxfsIHNW4ua+8ePJTio47yG\n4pJarpj8AbefdS7BX33FaB8fGurrSU1KInnECGQTJjRlDvs6N3nKi5c+wb/+BQsWNO2rSxKf795D\n8C1riAzovAy0UTSw9sgXLN6aQ35xvutt7QWUKhUpAwYQEBmJT1AQDV4v3O2kJyby4Ysv4qc7UR3R\nStANVgM5m3Iw2vqHoHSH6rLqFi9evzGP9+TgG9jUQk8mSayZMx1DmPPNIFxBgEZNcoAPMX4CIWoz\n8j4+Dra8orG5f/wGJoxLY8YdYxh7TtvdrR5+fDX3WgIYfaQCU309Gr0euVxOaWkpZceOERkaSkRW\nFvKXXoI2Gid48dInMRrhiiugogJ8fFgz8hxW5DYw+9z2+yscsBwkJ28pqzavxmTp23MlAELCw4nL\nyMAvPByrTHZaDDrpz5w9fDj/mDaN5NjYludaCXppfSkrtq5AlM6M0oGfn/mItw4Uow5qEnSbVsO6\nx2+iIaJ7owhdgbzZe4/zg2idgKaPe++r1uxg/scbqa42tEx9O57gWFllYPXol3ksKbVdD7ysrIxj\nx44RERpKwKJF6C+6yJ3me/HSferr4YcfYMQIiI9H76tnw/Sf0apORK1sko315T+wKDeHzfs2e9DY\nzpHL5aRkZxMYFYUmKIgGb0a6R5DJZMRGRzMoI4OkhASS4+OJj40lJDiYAIWCk4seWwn6rqO7WL9v\nvQdM9gyvTHuFty4ZxejtB1AbLfw6/QpKhqZ52qwOCdSoSQlUN42DVZuQ9VHvfd+B8papb3dOGc2M\nO8aw4+VvuH53JSGxnZfAlZeXU1hayud33snfXnqJ0NDuJeB58eIpnnviWSp/qeDhsx+k1FHG8n0r\nWLplOdV11Z42rV2CQkOJPz5uVKHweuFuJiIsjMGZmaQkJpIUH09CXByhISGoVKo2j/cFTq4RaiXo\nP+z7gZ1Hd7rY5L6Bw+bgn9f8k9e+eo2A0mosel+sfbCuvSOUchlJgTpi9RLRWgdqed8M23208DdW\nfPQrTxys4KrhI5w/0eFgc3g4l2/bxnXXXcfs2bOJiopynaFevPQi5eXlREdHc8GQ8/k+d32fbF0q\nl8tJyswkMCoKbWio1wt3E0EBAQwZMIDUk4Q7PCwMHx/nh/gA+AAnd0NQnvxinfn0SYbrjOIDxcSl\nxQFQ349mup+MQ5TIrzGQX9P0c4hWS3KAihi9SJDKDH3Ee592+zkkVjQw7IMu1tEqlZwlCFQWFfHe\nwoWMGDGCyy+/nNmzZxMf3zc7B3rxcpyIiAgGDxrc58Q8ICiI+MxMAiIisKtUWGw2HOAVcxeg1+kY\nkpVFanIySXFxJMXHExkejqaXkn7/vDneIuh2wY7ZduZkKhbnFxOXHudpM3qVapOVapOVzYBKLiM5\nMIBYP4lIrR21h8fBFn6Rx0XB3chNqK+H8nLuvfde7r33Xj788EPGjRvHxIkTmTVrFqmpqb1vrBcv\nvcSU26dw8JmDGAwe7Dshk5HYPOhEFxZGg8WCBDRKUlMbWy89xketZlBWFpnJycTHxZGSmEhURAQ6\nnWtHh7cr6AarAZtw5vzjluSXkNbH98t7gl2U2F9jYH+z9x6m05LsryJaLxKgMiHDfTWu5RWNmI7W\nok9N7/rJDgfUnYgcTZ8+nenTp7Nw4UIuu+wyzjrrLGbNmkVWVlYvWuzFS+8wffp0nn76abevq/f3\nJykrC//ISMTmcaMOoN7rhfcIlVLJgLQ0MtLSSIqNJSkxkZjISPz8/E7pbuoOpObH8ZVbBN1sM2Oy\n9c09WFdQcqCE8244z9NmuI1Ko5VKY1N/frVCTkqQnhi9RJSvHaWLvfeln20nfdwoOFIJ7SR3tItK\nBZGRpzx9++23c/vtt5OTk8PkyZMZMGAAs2fPZvDgvjN214uXgIAARo8ezW+//YbFxWIan5pKaFxc\nq3GjBoAzeHZ4d5HLZKSnpDAgLY3E+HhSEhKIiY4mICAAuQeEuyPaFPQGSwN24czIaBQcAhUlFUQl\nnpkJVjZBZG+Vgb1VTT9H6nQkBCiI1Uv4uWAc7LJPt7PqhVfg+de6fnJYGEREtPvyzTffzM0338xn\nn33GlClTSExMZPbs2YwY0YXkOy9eXMjUqVM5vGkTxZwaIu0JvjodKSePG7VaEYA6rxfuNDKZjMT4\neAalpZGYkEBKQgJxMTEEBQX1mbbhHSHSevxXi6DXW+rdb42HKMkvITYttvMDzxDKjBbKjPAHoFYp\nSQ3QEusnEuFrQ9nDcbA7dx9FpfIhfdLNkLMKCgudP9ligauvbj2Duh0mT57M5MmTWbNmDffccw/h\n4eHMmjWLc845p/vGe/HSC9xwww28dv/9vSLmMYmJRCQmNo0bdTgQRBETeL1wJ4iJjGRQVhYpCQkk\nxseT0FzLrVQqOz+5DyNASy16yztptDR6xhoPUFZYRsbwDE+b0Sex2UX2VBnY0+y9R/npSfSXE6uT\n0HXDe1/26Q6m3HZjU3/bJ5+Eu+927kRJgvh4549v5qqrruKqq67i66+/5tFHH+WCCy7g4osvZty4\ncV26jhcvvYVGoyHtoos4/O23mExd29bU+PqSPGAA/pGRLeNGBaDem8zWLqFBQQzOziYtMZHE+HgS\nY2MJCwtrt5a7v3PyjWJLHfrq3NUUVhd6xiI3s/LtlYTFhjHuGu+HfFfQqpQkB2qI1UuEaSwonRgH\nmzzwWfbv20NoWHNFwddfw1NPgULR/kkOBwQHw7Jl0MOGMtu2bePaa69tCcWff/75PbqeFy/d4euv\nv2bSpElYnfCkI+PiiEpOxi88HJMoegedtEOgvz+DsrJIS0oiKT6exPh4IrpRy93fUQHHO6i0CHrO\n5hzKG/rXmL7uMu+f85hw7QQyz8r0tCn9mjg/LfH+TeNg9Qoj/Ml7/+XXg3zxbQnz5q9tfeLGjfD8\n81Bc3BROV6maPHK7HXx8YORIeOUVCOy9nvo///wzc+bMwWKxMHv2bC655JJeu7YXL50hSRLx8fGU\nlJSc8ppKrSZz5EXoQyNQ6v1oMBWD1PMqFFEQKM7NRaFUEjt4sNuHTvUWWq2WwZmZpKekkBgbS1JC\nAlHh4fhq+1cjMFehAPTN3yuhqQa9rq6Orxd+TdZZWSRmJ3rMOHdQdbSK0BhvK9GeUtxoorh5p0av\n9iE50IdYvUioxoICO+t/zicp+axTTxwzBtauhXXrYMMGOHYMlEpIT4fx42HUqF63dcKECaxfv56N\nGzcyZ84cZs+ezaxZs/jLX5wfb+nFS3eRyWSMHj2aNWvWYLPZCI+KIjo1lYCYc5C0E5BkWmRyDYgW\n/NSN2Kw7sJq2dHs9SRQp2ryZhvImJ03p40NkZt92YHzUarLT08lMTSUhLo6UhASiIiPR6/Wdn3wG\nc3LpmkySJMlgMTB4xGAK9hSgD9Rzy+O3kDQwCY1O08ml+iePXPgI//7+354247RFBsT7a3lm+kt8\n8MEizj77XE+bdAqbNm3i+eef5+jRo8yaNYtJkyZ52iQvpzmLly5l5v33M/Tii2kwm/HRjsJHd35z\nT4jW0S2ZXI7VvBtzw1dOXdtmNmOqrsZYU4OxpgZLYyO64GAMVVXI5HJiBg0iJDGx999UN1DI5WQ1\nC3dSXBzJCQnERkXh5+/vkVru/o4c0DV/lUmSJBWWFjJmzBhKC0vx0fgQGBBIvaEeSZIICgsiMCyQ\nwPBAAsMCm35u/j4wPBC1j7rj1foYVUermPfkPJ76uP2xhl56jtVs5dkbn8Vs7NvdB7dv387zzz9P\nfn4+s2bN4oYbbvC0SV5OU0RRRKPVknnhhWj8RuGrGw+y9jOsJZkCq+kPrIafTnnNVFeHqVm8jdXV\nyGQytCEh6IKD0QUH4xsQAEDZ/v0olErCUtoeZ+xK5DIZqYmJDMjIICk+vkm4o6MJDAjoFyVh/QUZ\nTXvoyuYHCo2CW5+4lS8/+pLEAYlcfNvFAFhNVmora6mrrKOuoo66yjoO7T7U8n1dRR1KtZLA8MBT\nhT+8+eewQBTK9hOgig8Uo9FpCIsJc8Nbh8qjlW5b60wmf3s+Z48929NmdMqwYcNYuXIlu3fv5vnn\nn28Jxd96662eNs3LaYZcLicrO5vGmgb8w4d3KOYAMklAox2JpWELjZWHMNbUtIi4r78/2uBgAqKi\niB44EJWm7WhqZIbrq3lkMhnxMTEMysxsGe8ZFxNDSFAQ8o6SX730CqfUoTdaGolJjWHas9NQqk/8\nJ/PR+hCZEElkwqmduo5jajRRV1HXSvj3b9lPbUXzz5V1aP20LWJ/XPg1AediM+WxbtGn+Gh8uOvF\nu4hMbH+d3qLqWBWh0d79c1dTsLOACy+40NNmOM3AgQNZtmwZ+/fvbxH22bNnc8cdd3jaNC+nEeeO\nH8/3v5egUATx5zD7cURRRHQ4mh6SjOrDEo1VBeiCg4nIyEAXHIzMQx5uVEQEgzIySE1KaqnlDg0J\n6fe13P2d46VrLYIOtBJzZ9H6adH6aYlOiW73mMbaxhaxPy78VQ0BVB6swFhvxFhvZOELC1FpVK1D\n+n969AaVJZWExXo9dFeTn5vPq0++6mkzukxGRgaLFi3i8OHDzJkzh1mzZjF79mxmzJjhadO8nAZc\nfNFFfP3LYmQyFZLUVPYpOByIgtAi4shkKJRK5EolSqUPscPGYWk0utXO0ODgprncSUkkxcW1jPdU\nq/vXFuuZwvFbQyWAwebaSUB+/vXJ5QAAIABJREFUQX74Bfm1mm4mCFb2bY7BUB2FQqHgmkuvQZWp\nahL85pB+0d6iFi+/rrKuJZQfEBpwwts/Sfz9g/07taXqWBVZo7IwNZrQ9rP55/0FY4ORuqo6Rg4b\n6WlTuk1ycjILFiyguLi4lbDPnDnT06Z56cecP2ECZsPb2K1WHFYDoiAgPy7eajVyrbZVYpgMBXaZ\n6wYp6XU6hg4YQFpyMonN4z0jwsPRtBPC99I3aSXoZqv7E5cUCoHs0dmExYQREBKAj7apGUB8Zvtz\nrusq66itqKW+qp66ijqqy6o5tPNQi+Ab6gytBP64+Lfs54cHUlFSwTcLvkGhUnD9w9cTlXxm9nN3\nJfnb8xk9drSnzegV4uLi+OCDDygrK2POnDmEhoYye/ZsHnroIU+b5qUf4qfTEeIvIdiNqLXaTveY\nJcBhOdzjdbUaDQMzM8lISWkpCYuMiEDrreU+LWgVcrfYPdfMPzwu3OljOwu9i6J4ImGvWfwrSyo5\nsO0AdZV11FfUkWizs+tYNQBLXl9C1sgsgiKCWoX2ffW9M3zeHQiCAlFUACIqVd/oKFW4s5DLL7jc\n02b0KpGRkcydO5fnn3+eOXPmEBAQwOzZs3n00Uc9bZqXfsbEcVn8XlCCRj8ASeq4w7vgqEBwHHX6\n2iqlkkEZGaSnppIQG0tKYiLRzeM9vZy+HPfQZYIoSDmbc6hsrPSoQe7A1Gji+VvmIFcpsJlsjJs0\nDlm1DLOvuVVoXxTEExn7oW2U7IUGtkQUPIXdrqK4MIGa2hAEuwKZQsDf30BUbBEB/q7dQumMhc8t\nZN6b8zhrWBtNZU4TGhoamDNnDv7+/syePdvT5njpR3yyfDmPPvoEGRe/i1yua/c4SbJialiFw3Zq\ndzmFQkFmSgpZaWkknlTL7R8Q4K3lPgM53i1OaXPYEMXeHOrXdzHWG/EL8eeGR27AbrWTNSqrzeOs\nZuuJUr2qpq9Fe4rIrcxteU4mk51Sk39c/I9n8tuEQAryU0hOO0D+5j/I+z2Py+68jKDwoB69D4vF\nhx1bh2M2a5HLT/zbmY066mqCyMrOIyCotkdr9IRdv+9i8IDTey65v78/r7/+Og5vn20vXWTs6NHU\nlpdgrF2MNuAalKpoJMlBU0WxhEymRpSMGOpykIRq0o7XcjeHymNjYggKDPRYpruXvokEKK0OK0Iv\n9A3uDzTWNeIX6EfqkNQOj/Px9SEiPoKI+PbncFuMllYJfHUVdU37+c2Z/I11NtLHvYg+ROBAbjC5\nX62hsbqG4vxirpl5DaHRoZ3W6LeF1a5kZ+4wrFZNKzEHkMkkbDYVO3OHMmLUH2h1XZvs1BvUlNUQ\nEhZyxgxI8JbreOkqyfHxaLRarMZyJGkFSp8k1JpsdLpQgv19SYqzMXZYEBmpLxMSHIzCW8vtxUmU\nDsGBXbB72g63YKwzogtsP8TVFTQ6DVG6KKIS20+qy98XxtEjvmDbhaM58VAuk/Pl219icpjarNEP\nCAs4pUnPySG0spJYjI06FIr2oyqiCAcPpDN4WG6vvNeuUFFSQVJqktvX9eKlPzFgwADOmzCB8y6+\nuKWW+3Qd7+nFPUiAUpCEMybkbqg3oA9wX6P/tMxjxMbX4auVE+R/Izs37OTSKZe2qoP/c41+fWU9\nJfklrZL7/IP9m8U9iKCUJ1Bq6lGqlCiUipbHychkYDLpsFk1qH3cm/BYUVxBVmbbWxlevHhpYtSo\nUQTpdIwe2VTaebjYyoHCpn4gcRFqstN7N8JVevQov2/YwGVXXonGt/8k/XpxDpHjgi4KZ4yHfjzk\n7k58tU1h7yHjhzB43OBTElbaqtH/M/XVTWV6NRUGyqp02B0CNosNh92B4BAQHAIKpeKEyKsUKJUC\nDkGOu9tA1B6r5Zzx57h5VS9e+hcDsrLYsn07AEvW1rNjrwWrQ0QSJVRKOfHRau67NZgu7si1SXlZ\nGdddfjn78vK44JJLWP7llz2/qJc+hwQoRUk8Y/bQjXVGQqJDPLZ+d7NPA0ICCAgJICELtvwejMl0\n6raB4BBaCXxjTQW5P25hzBUDemp2l6gsrmTQgEFuXdOLl/5GVlYWi5csYeW3jWzeZUKpkKFSyEDR\n9BlRfNTG3JwqHrg1BHknnxvVVVUcLS7maHExJc1fj5WUtHxfW12N2WxGEAQKCwo4UlREfEKCO96m\nFzcgAyRJwmB1oLQLdiSp7Z7CpxuGegMJWf37P3JoWDWFh/2Q/2kPvXXoXYa1fh8qtXvbRQIcKzrG\nwOyBbl/Xi5f+RFZWFoUlZnL3NIn5Kcih4IiNrTuq0MpLKWkW6ZNF+/hD7+dHTFwcMXFxxDZ/HTBo\nUMv3sfHxPDBtGgcPHODWO+/0inkfQQYggdT0B5IkIUnN880lCUmUEEQJURBxCCIOQcLuELHbBWx2\nAYvNgd0uIooSoiCRERvQlOV+pmCoNaAPct8euiuIjT9CWVkkNmv7wXSlykHdsc/JGth+f31XYDVb\nMRvNxMbEunVdL176G+FhYSg0wRyrMKCQC9htNmw2W6uvdofIA2u/Rmn6gdi4OKJjY4mJi2PiBRe0\nCHhMXJxTFSXvfvwxRQUFJCR5E1Z7BanlD6QmBUZsFmVRAkkUEQQJQZCaxNghYLM3ibHFJmC3ORCk\nJiEWThLvk7+KXXS0BUFEaRNsvf5e+yruTopzBUqVnaHDt7Jj23AsFl9kshOeuiTJkMklsrJ383vO\nDvSB6W61raK4grjE9nMBvHjx0oQMuHry9eQWlqBSyVCp1ajVanR6PUFqNSq1GplcxWUzz+Gy8f/u\nlTW9Yt6M1LYQS81C7BAlRFHC4RBxOETsDgG7XcRqc2CzCdiFZq/45EezOItS08+ewCFIKG32M0fQ\nLSYLGm3/Hzqg8bUw9KwtHDmcRG1NEKKoQCaX0OmMJKcdRKs1YqgzoA90781LXWUdI8/pvwNZvHhx\nJ/94dCqvf1yN0dx2lZEkg6RY73QzOBGehibhFaXjYerjXnGTkArN4WnBIWJziDjsIla7gPV4eFo6\nLsInRFk4SZj7Mw5RbNpDP1Ow2+yo1KdHraeP2kZa5n4cghzBoUIhF1Ce1MvdE9EIQ70Bh9nbOc2L\nF2cICVAwepgv3/5qRPmnpm+CIDEky5fM5P7foEl28j4xIIlS631iSUJ0SDhEscUrtjXvE1vtAjab\ncKpH3OwVC2JTZcAZkgbWIaIoobSLZ46gC3YBher06rqkVIgoFa3zIKxmK3K5HJWPe29erCYrIQGe\nqyLw4qU/IQcuHeeHj0rOT38YqKkXUChk6HzlDMjScOtV7Q+icgtO7hOLgoS92Su2OgTsdgGrTcBm\nc7TyfkWx5/vEXtpHEESUZ0pTGQCHzYFSffq36jQ2GEkf7t79cwCH1UFghIc/hLx46SfImh/njdYx\nMN2H0ko7ZotEQrSayLDuf04dL2OCk4SYJs+Y5nC1IDR5tw7H8fC0gN0hYrM6sNpF7A6xSbD/vE98\nmoSnT0ccYnNjmTOF0ynk3hEOm4PyI+VuX9dmtqHX9e+kQy9e3IUgiEhyGchkhAUrCQ9WntgnPu69\nHt8n5oRn27JPLEgtCVs220llTNKfvWHxRAmUV4hPW0RROnMEXRREZHLZGTFa0GF3oFS5PxJhNVvx\n8/fOXfbixRnsNoHCcgMWe9vh6T97xWdKvxAv3UOSpKZe7p5GLgiIvThRyG5TYzRqERxqfHzN6PWN\nHhM5T+Cp92oz2/DTewXdixdnkAOV1UaMljMnj8mL6xAlqan1q6dI2LyPtP/tQGF3UB8ZQu6kcVj8\nezYNrbHRj/x9WRga/RAFUPnYCA2pJjZu8xkRbgfPCbrFZMHfz9/t63rx0h9pihae/hFDdyO3WVFY\nLNj9A9y6rsJqQfDxXFm0JMlOhNxFUUQul3dySu+R/nMuI3K+RyaTIclkhBwuI2pvId88OQVzN0Xd\n0OBP7rbhSKIMEJErQHAoKS2NwmQa5vXQXYzVbMXPz+uhe/HiDDIZyGTeMHpvkrBmKTHrvwC5nJrs\nYeyb8YjL15SJIkmffkzQnlxMgSEcmvoAtsBgl697HFEUkP9/9s47vMbzjeOfs0fWycmekogRIUGM\nUlStVltVbdWo0r2LX3dLNx26dbdotbSUqlGjpajahCCxSUhk73lOzvr9EYJKSOKc92S8n+vKJWe8\nz32fBN/3uZ97SGXYsCI1mUws/Gghc16fQ0lBiSAO6E9n02reWnIz8ikrrZoTbpNJUBeXc80Pqxu0\nps0GJ0+2xma99KZEKrWSn+eLu0/MVfndVLBUWpAphS/PM5QbREEXEakjEomEFpDSIxjBfy2jzS/f\noSgrQVFSRND6lbSbM9PhdqO++5CwpfPh4D5YvZi2E8ciFahhW0F+Du++/ChfzXgZs9mMfMn3S9i+\najsAswtm4xvi6/DEsWvP5NIjNYtSswWT0UR5SXl1dKCkoITVJeUU1jM8LpG7o/QKQiqvpeuSTYZ7\ngLCTx5yF1Wp1SotbhVKB3lO4O1MRkaaMRCq54iQ1kbohsVrw37oek/Z8dNesdUG+ZR2zTp2gvA79\n7huC3mjgpYSdmI0GjEYDZlMl7qeT2fC/CewLdGwbbJvNxplTJzh6MAGAiIhw5N6B3kilUqxWKzof\nHUHaIDRtNA51xEurRnLkVNUDKShlSmSaqh2li4ua4JjWeNVT0G02FUVGVyy2mn9xNpuC/rf1BIqu\nxvUmgc1mo+Js5ENIykvKMVa2nGE/IiJXg9jhzH7YpDKsCiUSqxXbBQnWGcnH8B5wC+4O2mgoTSbc\njh9CIZdhNJQDIAd8O3alY6jje+dnphwEQCqT4R8Yivz6m68nrzSPguwCBtw1AKnM8efoLt2LISUd\nt5QsXHWu1ee9UouVrD4xdBp2bYPWPZQoJzvLtcZzKYXCTECrltFER66QYzYJ34JVrVVTVNz8b5hE\nROyBRawJtyvJt42l83svVz2QSJAZypmr1tB38K14+fo7zG6JSk2beV/iGhyOMT+His49iHr0OaIc\nZvE8190wgiXzv8E/MIQbbhmBXCaRETcwTgDT5ynTu7Pr8dvp//lvqIrKsZmtSCQ2ciIC2TV2UIPX\njWx3lOJiHYYK5UVnU1arjNCw47i4CpMj4GycKejFxcWC2xURaYpYbTZESbcfBdFdSHjhHVqtWIDU\nbCaj32AWvfcy1zko3H6O1BtHUB4QjO+OTRRHtCWj/1CH2rsQmUzGyPGPAyCVSJBLJcJltl9IbngA\na58fS+iuw2iKSslvFcDxPp2uak2FwkTXHjs5khhNaZkLNosUubKSoJBUAoPS7eR540emkGExCdNf\nwGKRkZ3pi5tbKSqNiuISUdBFROqC1WpDlHT7UhDdmYLozlWhd6kU07RnUSgcP7EuL7Y7ebHdHW7n\nckilIBeyVO2/FPnpOXBLb7uuqZCb6Ng5gUqjGpNZhkplQC53fvMcIRFqh242y4nf2Y3ychckgMZr\nt7hDFxGpI9azvdVF7I/trK5VVhpRKpv+xLq6IJVIkculzbM2W6ky0EJ+j5dwTtB3rd2FVCIlblDd\nj1QsZguGMgOG8rNfZYZaH1tknVF4dMZiycRmtWE0xVFUkuvATyYi0nywiNPGHIrNZsNqsSCTN0+N\n+y9VO3QnhdxFHIdcIaekoISFHy3EZrFx6sgpPLw8MJQbMJYbMZQZqCirqPGxzWpD7aJGrT375aKu\n8bGHtwdytYZCoxqZTIlNqqBClkq5GHIXEakT56aeiTgGk6lSkHB7Y0EqkSCXSZvXfHARUKgUKFVK\nSgtLAUjdm4ryGiVqrRp3vTtqFzUaFw1qrRqVVnXR4/qOl81ITybtdBBabRkZBSsoLg12xEcSEWl2\nWK02TOaWUXnjDEyVRhQtKEwrkTj5DF3EMbh6uFJcUEzbuLZIpVLuefketG5ah9gKCDyDr18GMpmV\nvONSSkpaRiWBiMjVYrZaxZC7AzFVVqJQtqAdulRaVbYm0ryQK+XI5DLuf+1+lBqlwzv/yWRVuwyV\nVkVxqhhyFxGpC0aBKlFaKi0u5C4FaXNNimvpuHq4UlpUKuj8dzedG0p1y/kHJCJyNViFbxXRojCb\nTYSEt3G2G4Ihk0iRimfozRNXnWv1GbpQ6AP0bN+8XVCbIiJNleJysU2yIykpKqC0BXWulElBqpK3\nnKSBloQzBN03xJe05DRBbYqINFUqjGLI3ZEUFeTh4enlbDcEQy6TIVXKxRBpc8RN50ZJobAJalKp\nFN8gXxIPJwpqV0SkqWE0WbCKXWUcSlFhPh4CziV3NnK5BKlaoUZMjGt+ePp5UlkhzEzeC/EP9Scx\nSRR0EZHLYTRZxOEsDqa4MA93XcvYocukEhQyKVKFTIFCXr9RpSKNHw9vD9JPCt+/3ifYh0OHDwlu\nV0SkKWGstFBpEmvQHUlLCrnLpBLkMilSuUyOQioKenPDv5U/macyBberD9Jz6JAo6CIil8NQacbo\nhImIQiM1VeK7YxPOGPxeVJCPh4PmoDc2ZFIpMpkEuUKmQC4TS9eaGwHhAWQkZwhu1yfYh83/bhbc\nrohIU6K43OQMjRMUicVCx8+m4bVnBynhkWzscg3evgHVX+4OPt8uLsx3uI3GgkwqQS6VIldIFeIZ\nejNEqVbi4uFCQVYBnn6egtn1DfEl5WSKYPZERJoiJRUmZ7vgcGwyGSUR7bEm7GJ58jGKPb1J2Pkv\nudkZ5GZnUFFWirdfAN6+gVUi7xeAl49/1WO/KtF3dfNosP2iwjzcPbzJyoO8ImgVYMNFI1xfDiGR\nSiVnd+hyBY5q/1pR4UJxoTslxa4olCZcXcvw8slxiC2RS/EP8yczJVNQQXfzdKOyspL8gnz0LSTc\nJSJSHywWG5UtpEtc8m1j2XjmFGaFgocffvai10ymSnKzMsjNTq8S+awMUo4fZvfW9Wefz8BsMuHl\n618t+OfEv+q5qu+1Lq7Va1otFuZ+9R6eXj4UFeRxNKs1eSekSIGEIzZ6doLWwc0vNCI5e4YuV0gV\nOGLi2pnUEFJTQ6go0yKRWAEpEqkFrUsFnWL3oFYLn4Hd0ggICyAjJYOonlGC2u3SpwuJhxPp16uf\noHZFRJoCRpMFUwuasra/MJ+OXa+55HmFQklAcCsCglvVeq3BUE5edma14Odmp3P0YAJ5GzOrbwSA\ns2H8QKw2Cwk7N1eV0EYOIzNPjkZjO9sxU8KuRBtBPjbUKvvs1D2OH0JZkIdR70Nx63Z2WbMhSDkb\ndpdIJHY/Q09NaUVKcgQ2G8hk5+5Eq/6sKNOQsLsnsV3j0WjL7WpX5GL8w/w5tueY4HZddC6sXL1S\nFHQRkRooqTBRYWj+IfdznElN5obhYxp0rVqtJSg0gqDQiFrfU15WejaMn85Pn78JVOXg6UOuISfz\nNGaTEalUglyhRK505ftvV+DracLbx786tO/tG1jvuentZn+M766tKEqLMGtdyIvpTtKTLzfoc14t\ncnnVplwOYM9ucSVFHiQnh3O5ngmVlXIOJ3UgNi4BqbT5Z3o6i4CwADYt2SS43YjOEWxYsUFwuyIi\nTYG8YkOLqkFPT00mMCTcYetrXVwJDW9DaHgbOnRazrcfv47NZiPfkENgaCQKOVgsFswmEyazCX+d\njoLsE+xJPlod2s/NTsfNXXfJGX5VqD+wSvx9A5CcPZ6O/OU7Ajb/jU0mw6LWYDJU4PbPGiI9vTl+\n98MO+6y1oZBdKOgK+wn66dOhYJNyWUUHSkrcKC11wd295fTaFZpzZ+hC06ZLG7596VvB7YqINAUK\nSgzOdkEwSosLsdlsuHkIk8ej1rrw1Msz2LphFVv/+RsvnYS8QpBK5EjlMq6NUREVcUeN1xbm55KX\nczaUf1boTx5NIjcrndycqrC/p96H1l6+zMjPQWUxI5crkEil5OdmYbPaYM0SVDffgVHghjZKeVVi\nuxxAq7DPrGwbUF6m5ZyYW8yW6i+zyXzR91arlKK0NIaNd7OL7ZaMyaSkIM8LQ4UKqcyKzrMAF7cS\n5Ao5Ol8duWdy8Q7yFswfqVRK25i2rFm3hhsH3SiYXRGRxk5ZhQlzCzo/P5OaTJADd+c1IZFIyEg7\nRUBQIDf1sXAyTUJRGQR62/C7jM7q9N7o9N60btex1vfk52ZRlnwU/69mIC/Mx2w2YTQYsJirIs3F\nOem8MOFmjAHBl4T0zyX2eXr52vsjo1ResEN3UbkAkJWahV+IX50WKCkooTCn8PxXdiEFuQaUXt4g\n98JisiCTy5DJZcgV8urvlWolcoUcUHDg70NAD7t/uJbE6ZRWpJ5uRWWlEokNwIZCZcbVtZiojknV\nDWaEFHSAyC6R/Ln2T1HQRUQuoNRgotzYco4ZHR1ur42MMyl0iKnSlgg7ZrXrvf3Qe/uh2vQXnkkJ\n2KRSLBYL6anJYLXi26UXkye/Rk5OZtWuPiuD7Mx0Du7fXZ3YV1iQe1E9fnVI/4Is/rp2uDtz6gRB\nrVqjUVY1h5MD6DQ6/l32Lzv/3ImHlwejnx1NUW4RhdmFF4l2QXZB9fdaNy06H935L18dwW2CKbO6\nU2n2R664fOa8xSrDbMynrKgMFw+Xq/wxt0yOHmpHenoQUokNmfR8GYzFLKWo0JM9u+MIiAgnIzmD\njr1rv+t0BGGdwti4YKOgNkVEGjt5xYYWU7IGcOb0ycsmtDmK9NQUBt18l8PWT3rsRbq/+iSanEwk\nMjmhwWFUuOtIeP5t9J5e6P0CqS3n3Wa1VtfiV4l8OulpKeyP31aduV9WWlxVnudTtav3ObfLP1ur\n7+UbwGdvP09+bhaDb7mLa6Y8A5wV9PysfHat2UXasTQyZBm8f9/7uPm4ofM9L9jturXD09ez+rFM\nXnMzmszMCg4lyrjSGbrWpQyV/DS56bmioDeA1NOhZGYEIpXU9nO2UWlQo/B6iswDLwnqG0DrmNZ8\n+eyXWCwWZDKxcZGIiM1mI7+4Zc1AT09Nps+AWwS3m5l2Cv/LlMNdLRatC3te+ZDgtStwTU2mLCCY\nU7eMwux65SNkiVSKj38QPv5Btb7HbDKRm51BXk7Vrj4nO4OUk4fZvW0DeTmZlBYXkp+bhcViAZuN\nJx8ag59nZJWgR0ZEEtI6pDo0+9iMx3DzbNjZtr9/BlkZfhTkeyKttdRPQpu2xzju70LOmRxaRTnu\nB98csVqlZJ4JrNt7Jd4UFPo72KOaiYqLYsWaFdx2821OsS8i0pgoNZgxmoXZnUusVqRmMxalc8dj\np59OJjBU2JC7oaKciooyPPU+DrVT6aHn5J0THLK2XKHAPygU/6DQGl8vyM/h9cnjyUhLIaJtFOGt\nwqquA1Ar1Dw05SE69utISNsQXHWuNS5SV2I6J7B/bxcKCzwBG0hsSJBgtUpRKisJjzyO3qsqUSv3\nTO5V2WqJlJS4YzScTz68ELPJjLHCSGVFJUaDEavZRkTnWwDhM2vDY8L5a91foqCLiADFZZWUlTu+\n/lx3JJGIX79HarWS0XcQZwbc7HCbtaHWuhDSqrWgNjPSUggIDhPUptB46n1445OfOHEkkb79B6BU\n/KcOXa1WE9XDPh3FJBKI7bqXnBwfMs8EYTAqkUmteOiK8PHPxN2tBACfIB+StifZxWZLwmaVUFkp\nQ644K96GSowVRowVRqQyKSq1CpVGhaunKzK5Ap1eA+wV3M923duxe+luwe2KiDRGcosqrnAQefV4\nHtpH7Iwp2M4ec7Wb8ymKokJSRtztYMuXcuJoIiajEZnA47nT01IIbOaCDlVZ+XG9+qNWKpBfWIcO\n4KK0/zm2j08OPmd7t1ttkkvOe70DvclNb147dItFRm6uDwU53pgtUlRqI/4BWbi5F1712iUFJSQn\nJZN8xIJJHoixwohKo0KpqRrEovfTI5VdnIxos4FS6Zw2u8GRwSw4soDde3fTrUs3p/ggItIYMFRa\nHH5+LjWbCPt9frWYA1jUGoI2rib7musoDwh2qP3/ciRxL+06dhHUJlBVsubA8/PGhlp5vsNd9Xdu\nKsfWg9eUvNXcQu6VRjUJu7tSUaHBhrW6f3BmeiBePrl06HigXutlJGeQnJhM8sFkkhOTqTRUEh4d\nTnh0O2zuamSKK9cz2mwyfP2cNxCn68CufDPnG7p9Jgq6SMslr9hAmcGxN9ZSkwmp6dKQfmF+Dn8u\n/B7/G4bTJirGoT5cyJGkvXTtIXz759Mnj9Ct9wDB7ToLjer8DVy1oHtoGz6mrqFo3aoa2pSXlFd/\n31QpL9dyYG8XjEYlEqmVqnxAG2DDZoPcbB8SEzoT3TkBQ2kFGSkZhHUIq550ZzKaqnbfScmkJKWQ\nnJSM3l9PeMdw2nVtx43jb8Qr4HxtYuqpXI4f9bygV37NuLoVofPMd9jnvhLdhnTjk8c/4bvPvnOa\nDyIizuZMbhkWq2NtmDVa8jr3QHcsCbNaU/WkqZLNp0+S3Hsgyz96ldSU48TE9aZTXC9iuvamlQMH\nihxN2svo+yY5bP3aOHk0ibvufUpwu87CVXM+8bFa0HUaHUi4UrWZ3Tm3Sw9tX3M2X1PABhw+1B6j\nUUXtP0AbubnepJ70ZvEHL5OTlkPH3h1Ru6hJTkwmOy377O47nOvuvI57X7sXlab2lrwhrU5RUuJG\nTrYPNRUT2AClopLomCTkcuc1snDXuxMQFsCyVcsYftNwp/khIuIsSitMlAs0jCVl+BgUJUX47N6C\n1FTJaYWKuf1uYPJjzwNVGeD747dyIH4bH/0xmYLcbDrF9SYmrhcxcdfaLVRdXFRAWUmx4KFvo6GC\nnKx0ggVOxHMWEokErbqGkLtWqUUj11BhqhDUoXPn6E1Z0EuL3SgvceNyd0PnEtd2bJCQfiIDi8VM\n8sFkYtvHMub5MQS1rr0msTY6dEzk+NF25Gb7YDCosdlsSKhKStRoK+jaPR65wvl1r50HdmbWnFmi\noIu0SHILDRSXC5fHcmzco2RcdwMSi4W3fviMrtcOrH5NrdHSo88gevQZBFQJ74H4reyP38bSX77D\nVFl50Q7ey7dhJa9Hk/YAaye8AAAgAElEQVTSNlr48/MTRxIv27q1uaFSSFHJawi5qxVqVAqV4ILu\nE+xDbkbTPkc3VGgxmuQoZFUxNavVer507Gz2uVKtRKVR4R0UTPueXclLP02PIT24/q7rr8p2ZNsj\nBIWcpiDPi4pyDVKZGb1XIR66Ant8NLvQbVA3npnxjLPdEBFxCmdyS7EJHPksPdtudcfW9Tzy/Nu1\nvs/dw5NrB9zMtWdL23KzM9gfv5X9u7cy79sPUCnV1Tv4TnG9ca/jkJUjSXtp5wxBP5pI67YtR9Dl\nMimKC7qyVgu6RqGx6xjVuuLfyp99m/YJbteeFOblYSw1UmIowVhhxGqxolJXZZ97eHtcFDpXqAyM\neWEcxdlpBIQH2MW+RlOBJjjNLms5AolEQo/BPfhq1lc89uBjznZHREQwCkqMlDmpd3tSwg4i2nZE\no617BZO3bwADht7BgKFVE8nS01I4EL+VrRvX8M2Hr+Lp7UtM17M7+LjeqDUX5z4ZKspQa1w4kriH\nO8c/adfP818UJUUoC/OxKpRUnO26duJwIp179HGo3caEQi5Fpahhh66UK1HKhO8qFNwmmJWzVzrc\njtGgobJSic0Grm4lSKUNy1CxWqyXJK95h3YmrEd71C5a3D3dkV9QRvBfFHILLi4WXOwk5k2FLgO6\n8MPc70VBF2lRZOSVUeEkQd+5+W969Bl45TdehsDgMAKDw7hh+FgATp04wv49W1n3x6989MZkQsIi\n6dS1agdfXFTI0l++oWffIRxJSqBddGd7fIwaCVn9G0EbVqMoLabSzY38mB4cu/sRThxJ5I57HnWY\n3caGXCZBdkFL1ouUx8vFi9SCVEEd8g70prSoFEOZAbWL2iE2TiW3Jivdr6rBjcyGUmkkLPwkPv7Z\nQFWI/Fy2+X8pyisiOTGZlIMpJCcmk3Y8rTp5rdctvRj7wli0blr27lJTXOyCpNZ2t2C1yggMznDE\nR2zUuKk03H/LIBKWbiU7Ox1f37q1rRURacqYrTZyi5w3+3zXlr+ZOmOWXdds1bodrVq3Y9jI+wA4\ndmg/B/Zs5ZfvPyU3/RR5eXlkpJ7C08sX1blMezvjt20j4Ut+5FwltDrPSPC65UiLCsk8c4qQsDYO\nsdsYcdNcvAm/SNB93Bzb+7Y2QtqGkHo0lTZd7P+LOHwwmox0X871W7FYJFRUaDh8KAqpwoS14igr\nZ68kulc03Yd058yJM1W132d34VazlfCO4YR1CKPrxK6Etqs5ea9jTCK7dnbHbKpld26T4qnPJzBI\n2BsmZxLm7kWMXke4SoZEAncO6cGM6W/wwaffONs1ERGHk55TSmGZc5o6pacmAzh8dGmbqBjaRMVw\n8x0TmPb8g+TlbUOtdSGud3+H2FOUFNPqj4X8t62JVSbHbcdGBoW3HDEHcHe9jKDrXfSo5CqMZmEz\no0PahJB6zP6CXpDnTVbmeTG/EJtNyuEDbdmx6G1Sjxzl+P7j/P7l7+j9qmq/o6+J5pYHbsHTr25J\nIAqVgZguezmcGE1piSsSmQVs0qrMc6kVvXcunWLr11imKaKSKeio96GTzhXdf4asPfPwCNQRtzH9\nvY9RqZt23wERkcthtdlIySrBJnQ23Fl2bl5XnckuBCq1hlfen836VYvZ9s+fdOnumIYyitIiFCXF\nNb4mzc8lumOcQ+w2RhQyyeV36C4qFzRKjeCCHtwmmANb7S92WVk+YJNw7nbObDJXDy0xVhixWqVo\n9W2Ao9isNiaMm0C7OxveaMHVtZTYrgnk5+nJzfHGapOiUlbiF5CBh+7qW782ZvxcPIj11NPWVYn8\nMuV7UyaNYfqbU3nz7Y8E9E5ERFjSc8spdtLuHKrC7WMffFpQm0qVmhtHjOPrD1/ljU9+cogNi0aL\nycUVeXnpJa9ZXd35Z8c/LJ5wE+1j4ojqGEf7mDj8AkIc4ouzUSnkqJUX75ouFnSlCyqZ8JnuwW2D\nWf3DaruvW5BdTklhKZUVFVRWVCKRSqp7n7t6uCKRqel13a14uOcQ2y+Wdj2vvmuSQmnELyADv4Dm\nf1Yul8pop/MhRueOX/WN4uV3JFMn3oUsdBhvTv+QyyYciIg0YU6mF2GxOmd3XlpSjFQqI7pzD8Ft\n79663qFtV406L3K6XUvoqsWX/P9h6tyDKS+8Q8qJwxzeH8+enZv4edbHVBoNtI+Jo33HOKJi4mjb\nwXHJekIil0vRXE7QZVIZrmpXskqyBHXMJ8iH4oJijOVGVNqG3VCUFZVdkn3eceBEfCJG4uJe8+AS\nmcSMp5+UMc+NscfHaDF4qLTE6L2IdteirqFH/+WQSCS8+NQY3pk2lZdeme4gD0VEnEd6fjnFFc7b\nnf+57Gfadoh1iu1dW9bT/VrH9lFPvmM8SCQEblyDqjAPk4srxa3bs++ZtwAIa92esNbtufHshLmC\n/BwO74/ncGI8sz55k2OH99O+Y1eiOnWjfaeuRHWKw62O9fWNCY1KfnZeyHkktv8c8mw5sYVdKbsE\nc8pmq7rR+uKZL7hh/A1ExkbW6brMU5nnxTsxmfLS8urs87DoMMKjwzFVati1owcWs6zGNdx1hXTu\nKvxY0aaIRCIh3N2LWJ2OULX0qjbXZeUG/DqPo7Ss3H4Oiog0EjYfyCCv2HnZ7Y/c1Z83P/kRv0Dh\nu28+MKI3M75dgpdPwzrM1QdtRirKwgIsGi0lYXXTDQCb1crhxD0cOrCbwwf2cOhAPG7uOqLO7eI7\nxRFcj/WcRbsQHe1DL74RuSQl28/NTxBnrFYZx4+0obxCi7tbCcFtQkg7lobWVYuLhwse3ueHxVjM\nlvOZ52cnj+m8dYRHh9M6pjWDxg7CJ+jSDH2lykBM570kHYjFYFAhkViQIMVqleLmVkyn2ARBPmtT\nRqNQ0cnTi44eLrjL7BMid9GqeejuoXzy/jQmPzfVLmuKiDQGsgvKBW3z+l/2796KX0CwU8Q8+dhB\n3HV6QcQcoDwghPIGnI9LpFKiYroRFXN+AmR6ajKHzu7ily2cTUFu9tnde7fqP2Xy83KZl51JaWkR\nrSIcN9zmskjA0/XSaPYlO/TskmyWJiylvNJxuyezWcWOLb0wmSVIJGC1SLEYUjn27/8ozivGYrEw\n5O4hpB5NJTkpmfST6YR3rNp9h3cIJ7xjeL1q1ktKXchIDaak2B25woKXdy5BIWeQSC4/qawlE+im\nI9bTk0iNAjvp+EXk5hcT1f8xcvIaT4taEZGrZWtiJjlFwrbPvpAPXpvINf2G0GfgLYLb/nXu55gr\nKxn7kLDJeI6grLT47O59d/Wf4ZFRRHXqRkS7jiya+zkymYzHX3ibNh26Ia85COww1EoZvTr44+5y\nmSx3OJvprtA4VNAT90VjNks41+DGYjJQZtBRXhlH5qlfAPhn/j90u7Ub3QZ3I6Tt1WUpurmW4RZ1\npLqfspiLVTMKmZz2Om9idG74KBz7Q/LWu/PwuJuY/8PX3H1vy+nsJNJ8yS02UFjuvGFI5WWl7Nm+\nkWffmOkU+7u3rOfBya86xba9cXF1J65Xf+J69a9+7vjhAxzcv4tVS348W+cv4Zf5SwnrrKNf5woi\n23cSzD+lXHZJhjvUJOhKF7RKLXlleQ5xpLSwkvxsI2UlRVWDSwxGlColSo0aXWAs5Xl/olQpGfnc\nyFqbuDQUUchrRq9xJdbTi/auKlQ1N8xzCG8+MwZVxHBR0EWaBQeT8zGZHDz0/DKsXbGAwcNGO8V2\ncVEBmWdONZsM8pqIbN+JyPadaBfdhS/efZFKo5EefYdzKtvMNx9P4+SRvdWZ9Of+dHF1d4gvCrkU\npeJSQb8k5A6w4cgG9qXZZ2BKdmp2dfLaycSTlBaW0WnoB7jqO6LSKKsHl1itErKOLCEk9CARMRH4\ntxLmHKalIpVIae3hRaynB8FCqvh/+GbeGvYey+frWfOc5oOIyNVy4kwRB08VYHVSIxmAx8cMZOqM\nWQ7vDlcT61ctJjFhJxNfniG4bWdwKvkoWq0rPn7n21hbzGYOJ8ZXn8Uf2h+Pp7cvUZ3OC7y9fjcR\nAR50itBf8nyNfUqDPIPYf2Z/vbscWa3W833Pk6qS11x1rtWZ59ffdT2+Ib5UlEvZtd0Vm01y9jop\nSmUlwSFHSU9Op/ew3g34iCJ1wUWpppOnF508XHGROu8/n3M8Mu5Gut38NPG7thHXvZez3RERqTfl\nRjMpWSVOFfOkhJ14evk4RcwBEvdup8/AYU6x7Qxahbe95DmZXE50555Ed+5Z/VxaynEOHYjn4P6d\n/DbvK0qKC6tK5i7IqJfUMkfkcujday7vrnGHnleax9KEpZQYSy67aHF+8UV9z9OOplX3PQ+Prkpe\n07rV3OKz3KDm+KEojEYVHroi2rQ7TE5aFrNfnc1L379U7w8ocnlC3PTE6jyJcJHhvP14zSQkneS+\nZ79g7/5DznZFRKTexB/NJi2nzKk+fPzm/+h6TX+uGzJccNslRQU8PnYQP62MF9x2U6OkqKCqZO7c\nLv5APG3ax1QLfPuYODz1l5+polbK6R3th5v20umoNe7Q3TXuaJQatvy9haTtSQy7fxiuelfOnDhT\n3bQlOSkZc6W5Ovu86/VdCW1f9zNvrbqq97nNJkFytjmJb4gvhjIDxfnFuOsdc/bQklDKFXTQeRGj\nc0Mvb7wJBJ2jI+gd144vZ87g8YnPO9sdEZE6k1VQTnaB87LaASqNBgrzc50i5gDrV/9WPT9d5PK4\neXjS/dqBdL/2/FjbowcTOLQ/nk3rlvPtR6+hVKkvKpkLi4wiPy+bn7/9kO59BjFk6M1o1Yoa169x\nhw7wxZIveP7e5ykvKSeoTRA5p3PwCfapbtoSHh2O3v/SGP7VMu+deUT1iCJuYMtpsm9vfDTuxOr1\ntHNV4uBkdbuiiriNkuJClCpxcItI48dqs7H5QAYFJc7LbAeY++W7uOv0jBj7sFPsTxx/I8++PpPQ\niEvD0CL1Jysj9aKSucy0UwS1iuDEkURc3T2Y9fMKRt3ct8Zra5n1CbZSG7azfbmtZiuTJ00mYEiA\nYz7BBbTp0oZje4+Jgl5PZFIZbXRVndwCLo3ENAm+e38SD913N3N//t3ZroiIXJETZ4ooLHWumFdW\nGlm5eC6/rnfOcdWJI4koFEpRzO2IX0AIfgEh1RGXwoJcXnjwbH6CTUJFUU6t19Yq6HcMv4MdiTvY\nv30/wx8Z7pDdeE207dKWP3/6UxBbzQF3lZZOnnqi3bVoG9vheD0Zf8f1zPr5L/5dv5q+A4Y62x0R\nkVopqzBxKrsUJ+bBAbBwzqeMun+S0+yvX7WYATfd6TT7LQGdpzdvfLaQuV++S88+Axk+7OZa31tr\nyL3MWMaSvUvILc29pAG8o5l2zzQem/EYXgFegtptSoS5exGr1xGmkjWr+vr0rHyGjn+DfYnHnO2K\niEitbD+YRVaBc2cRmE0mRg/pyOINR5zmw+jBHflh+U7UGvGYzNHYrFY8XNT07uSPqoYadKD2hOdz\ns9GFFnM4H3YXuRi1XEmcbwD3RbbjtkAvwtXNS8wBAv30vPj4HYwd6ZwEHxGRK3EktYBsJ7Z3PcfC\nH2Yy6t6JTrO/beMauvTsJ4q5QEikUlQqWa1iDpcRdBBuUMt/adO5DccSREE/h7+LjiHBYTwYGU5f\nvRsecufXjzuSMcP74aqy8t1XnznbFRGRi8guLCc5owSbk2adn8NqtfDbT18zcsITgtuWWC3IDBX8\nvWoxA8Vwu6B4ul1+vHitZ+hQ1WBmb9perFZh2xm26dKGpV8tFdRmY0MuldHO05sYD3f8lOe24c1b\nyC/k2/ceo22/R+k/YDBt2rV3tjsiIhhNFpJSCjCanD/UaeH3nzHqvqcEtyuxWmg790s0xw5SlBhP\ntxmzBPehpSKTSvC6gqBfdoeu1+pxVwtfD+7m6YbeX0/a8TTBbTsbncqFfgEhPBgZyWAfjwvEvOWx\n4dfpXH/9dVUPDh92rjMiLZ69x3IpLnPeaNQLWfj9TEbdJ3y4XVFagj4xHvWxRAa66UjYtVlwHwAs\nVrA4/75KUNRKGa6ay5cw1ZoUd45f438lvTDdro7VhbXz12KqNHHTfTcJbltoJBIJER5exOg8CG1m\nSW5Xy/zf/yV18SZeNEugZ0/48ENnuyTSAjmSWsjRtEKsTg61Q5WYW61Wxjww2Sn2PQ/tR5WfzTKr\nldVL5pGVkcrQEfcw9PZxKBSOr5ktzC9k0apMQltFMPhaFdJG0MJaCLzc1fTpdPnS8SsK+rYT29iR\nssOujtWFrNNZfP/697w450XBbQuFVqGio6cXnTzccJO1jL+UDeHba+5npEWC57V9YPZscBe7CIoI\nR05hOfHH8jBWmp3tCpWVRh67qz+zl25ztivVZKSdYvXvP7F6yTz6DbmVoSPucego0Teen4xH20mU\nFedhyPyZvn2603fQrWi0Lg6z2RhoE6SjQ5jnZd9zxcrlUH0oSrnwnUr8Qv2w2Wxkp2YLbtvRBLl6\nMjQ0nAciWtFb7yqK+WW4938fcfTGa3jHaiLlucmimIsISvW5eSMQc4Av3nuJ8Y+94Gw3LiIguBX3\nPzWVRRsO0yGmB19/MJXnHrqN9asW291WbnYGqcd3MfLWcCY+0p3RY0dx/HAi9992DdOef4BNa5fX\ne6hYU0AuleDrqbni+664Q68wVbBkzxJySmvvTuMoVs5eiUqrYtCYQRe/YLMhN1swKy6b09eoUMjk\nRJ1NcvOuuQ2vyAUYjJV0GzqZ5x67gwkjB2IwVuLZYRQV5WUgbTq/d5Gmzb8H0skvdm43uHMkJezk\n51kfMf3zBc525YocO7Sf1b/PY/PffzB0xDhuun0cfoF1n/VRGwvmfArA6Bqa6ezeuoFNa5fx77oV\n9Bl4C30HDaNHn0GXvK8p4u6i5NqOASjll9+DX1HQAVYeWMmxbOHLyFKPprLok0U8/eXT1c+Fbz9I\n5JYDKEsrsMllpHWK4MCw3tga6cGzXuNKrKeeKBc1ytrLB0UuYPPOJAaPmcru1Z8Q3bZV9fOn0rK5\nbuTLpJwWPqdDpOWx41AWmfnObR5zIU+MHcTL735LUGiEs12pM5VGA6t/n8eqJfMIDAlj6IhxVyWy\nD93Rh7e//PWiOeQ18e+6Ffy7bgX7dm+h3+Bb6TvoVmLimu545kAvF7q3973i++ok6Inpiaw7tM4u\njtWXN8a8waSZk9D56Oj39TKCE46DhGoBl5ktFAXoWTV1PBZF49j6SiVSInVexOh0BKsa541GY+WT\nWcv4bdUW/l0yo8bXd+w9xqQ3vmf7rgSBPRNpSew9lktqdkmjKRRdtmAW+bnZ3Pfky852pcHs3bGJ\n1b/P48SRRIaOGMfQ28fh4lr3I7T98dtY/OPnvPnp/DpfYzRUsGntcv5dt5zTycfoO+hW+g0aRpsO\nsQ35CE6jSxtvQn3drvi+Ogl6XtnZ+eiGy89HdwS/f/k7Xv5e/M9iof263Vhll25zJTYb+aF+rHlp\nnOD+XYirUkMnTz0d3V1xEc/F6809Ez/AW+/Ox69ffmrUsr928f2SLSxd8ZdAnom0JJJS8jmZUYTA\n7TdqpaK8jPtvu4Zf/jrgbFfsQl5OJqt/n8fqJfPoes113HT7PUTFdLvidVc7870wP5d/1y1n07oV\nlBQV0G/QrfQbfCvBYZENWk8oNCo5vaP9cdVcecNaJ0G32Wws2L2ArOIsuzhYH07sP0H8dyv4xVWD\nuqis1vdJbDb+feRWUju3EdC7KkLcPYn18CRCK0dqxw35un1yVv9ziPefamPXdRsbZeUGut00iSkT\nRzPu9uvrdM23v6wl/lA238yu+926iMiVOJZWyNHUIsyNRc2BD16byDX9htBn4C3OdsXu/LtuBauW\n/ER5WQlDR4zjxtvurvF99u5bn3nmNJvWLWfT2uXI5Qr6DR5Gv8HD8fatKgtTFeQTtP4PKnV60pz8\nc9e5qrgu9vJHDOeok6ADbDyykYQ054Q5/xj+Ej97e2JT1Z4MJas0s++2Phy4pbcgPqlkSjqcLTnT\n2znSn5qew/SZC9mc2pVWYZF091rL60/X/Be9qfPP9gPcPP51dq/6lPaRwfW69s1PF2GRe/DG2584\nyDuRlsSpzBKSTudjMjUeMd+/eyuLf/qSNz+d52xXHMqpE0dY/fs8/lz2MzfedjdDb7+H0PA2rFvx\nKyFhkSSfOETK8cM8+uxbdredcvwQm9auYNPaZfj4BTLimut4+t91mPNzKDdUUDrqPk6OfxJnNQiJ\nDPIgOqxu007rLOin8k6x4sAKzBbhyzcSX5vDK0dTUXvWfoYgM1s4OKQbe+6s2w6vofho3YnV62nn\nokRh59/v0ZNnmD5zIRu27mfKxFE8Mm4oRrMUt8hhlB3/DYW8eWV3f/jNElas3cnGxe82eI0npn6L\nf3Akr7z1gR09E2lpnM4u5eCpfIyVjav92CN39efNT360S4Z4U8Bms7Fm6XxW/fYjbjpPDibswj8o\nFI3Whceff4c2UTEOtX94/27CP3mTDslHqbSYsVqtuLi4cuqnvzD6+jvUdk3IZBKuifLD2+PKJWtQ\nhzr0c3i7eqPT6BrsWENJ3JrImeJyMq/QoUlis5HVvtVl39NQZFIZUZ6+jIpow92h/nR0ta+Y7zuY\nzMhH3mHYvW8wsE8sp3f+wCPjquaBq+RWpr8wninv/Wg/g42AMU+8R0Z2wVWJOcAX0x4mUC/jnTeb\nbwMiEceSllPK0bTCRifmK379nqEj7m4xYg5VXTOHjhjHe1//Rs6ZFACyMtKwWCwOF3OA9jHdiOk7\nCB8f3+p69jybje9nvMyuLX873P5/0aoUuGvr3gemzjt0gBX7V3Ai50SDHKsPx/YeY8+GPez5ew9t\n49rSdUBXHk3LIXLTPqzymmu/iv30rHplPDZpne9Rroi7UkuM3otody0aB7QX3BZ/mOkzF5CWkcvU\nSaO58+Y+tb7XI2okqTvn4u7WtEcVFpWU0W3oZN567h5GD+9nt3UnvjYbN30g02eIE9pE6k5KZglH\nThdiMDWOxjHnOHZwH99+8jrvf/u7s11xGgf37WLul+9SVlrMsLvu44bhYwWxK7FY6PnSI1iSEiix\nmMl+9i2WAZvWLudA/Db6DalKpuvY5RqH+xLgpaVH+7pPPa2XoB/JOsKfiX9ixf5nTKePnGbP+j3s\nWb8H/zB/ul7fla4Du6JUVd2dSKxWBn+wAJ+TGVgvyBCTWiyUe7qx+uXxGNztI3bh7t7EeHoQ5qB5\n4+u37GPapwswGCuZMnE0Nw/sfsVrPv9+BUdOnuGztx61v0MC8ffmBO546G12r/6EyLC6JXnUh7c/\n/40T6aXMnrvQ7muLND+OpBVy4kwRJnPjOTM/x7ibuvL1gvW4ugsfFW1MFOTn8Ohd/Vm4Lklw2x7H\nkjDqvDD4nA+1GwzlbPqrKpnuzKkT9BtSVePuiFa3EqBzGx9CfV3rfk19BL3EUMKShCUUlBU0xL9L\nyDqdVS3iWjctXQd0peuArrhd5qy808pttNp9BKnZjE0qJattCAkj+lKpVV+VL2q5ko6e3nRyd8XD\nQeXsf6zbyfSZC9FqVEydNJrre9cvhBTQZRx7//oMf5/L9/NtjLz35WLWbtrLugXTHWpnzq/rWbx6\nN6v+2uhQOyJNmwMn8zidXYLZ0vjKSz96YzLdeg+g3+Bbne2K0/n1h88wm82MffB/znblEgryc9j0\nV1WNe3lpCX0HV+3c7dX4x0WtoHdHf7SXSQb/L/USdLj6sHthTmF1ON1sMleLuHegd73W0RaUYHTT\nYqklBF9X/F08iNV70sZFgRzHZDEu+mMz02cuICTQhykTR3FN14bN956z4C+27D7E7A8ubXvYmBn5\nyDu0buXPuy/fJ4i91RsTmDJjHnv2HRTEnkjTYs/RHM7klTWKyWn/5Z8/l7Jn5yb+98pHznalUXD3\njZ35dvGmejWgcQbpaSn8u7Zq565Sa+h3Vtz13nUPl/8Xf72WnlH1u77egn448zB/Jf1Vr7C7ocxA\n/Pp49qzfQ35mfnU4Pah1UL2ctRdyqYx2nt7E6jzwdWBzubmL/mb6zAV0jo5gysTRxHYIv+o121/3\nMH/On0ar4Cu3AXQ2eQUldLtpEu9Pvf+y+QGOYG9SMjePf5309HSQNo4OgiLOZ9vBLHIKyhtNB7gL\nKSkq4PGxg/hpZbyzXWkUrFu5iMP7d/PkS+8525V6cfJoEpvOintAcKvq1rNal3qEzoGubX0J9qnf\nBLl6C3pdw+42m434v6tEPDkpmbgBcXQd0JWITs7rQ6xTuxCr96KDmwaVxA7/pE+egfhDEBYI3TtU\nP/31T6uYPnMhA/vEMmXiaNqE2++8eNmf2/n+17Usnf2K3dZ0BH/+s4e7n5zB7lWfEhbS8LvUqyEj\nO59uNz3Nqj+WEhsnTH8CkcZJRaWZ+CM55BUbnO1KrTz74HAefXaaQ0ePNiWeGncDz0/7nJAw4ZuF\n2YukhJ3VrWc7xFaNee03+FYkV0jOctVUhds1yvqVKtdb0OF82L3SUIlcIUcqO59Znrg1kfi/49m3\naR9xA6tEPKpHVH1N2A2JRELrs0luISqp/ZLcFq6DOcvAYgWVAu4YwMcWK9M+XcBdw/oyZeIoggPq\nd4xQV4aOe5VJDw7nxv5xDlm/ocz7bQO79h+lZ+f2/Lh4HWvm278JRH2x2Wx0uXEy9907nknPNu6b\nIBHHkJlfwaFT+RSXVzrblVr5edbHyOVy7rr3KWe70ijYu2MTy3+dw2sf/uBsV+zG7q0bqlrPrl3O\ntQNupt/gWy8aVGMxmzGbzajU6npnt5+jQYJ+KPMQq/atYs7rc6g0VHLLA7ewfdV24tfH0y6uHXED\n4+h8Xed6O2NPtAoVnfTedHR3wc3eU872H8Pw3GecOpWO3sMNs8VCQXY+K0dczwNvPIxed+Um+ldD\nSmoW19/1Esnb5jjUzpU4U6CipEJKpH8Fv63cxP1Pf0J5hRE/Pz8y453r23+Z/MYcUtKLWPrHWme7\nIiIgB08VcDqrBH5myyoAACAASURBVKOpcdWYX8iRxD389M37TPvsF2e74nR0RxMpDQpj6tTHuW3s\nw3TuLuxRnVBs/vsPNq1dzv7dW+k7eBiDh43mx6/eQ6XR8NK0r+jZMbje4XZooKAXG4q5+c6b2bxy\nMwD+/v70G9uPbgO7oVA597wyyNWTWL0nrTUyZA5q1Zf9wx+UTv+e/AoDMpkUlUpN+xBfpPffAncP\ndYjN//Li29/jqXPjhcfvFMTef1m43Yedx10oM8pRK614m1bz+hvPYrFYGdC3M6t/fANlI5tXv+yv\nXUyY/AEb1q+nS9yVSwVFmi4VRjN7j+eSV1RBI8x9q8ZqtTBqUFcWrd/nbFecjv5APB2+/YAiqYxR\neVlMndf8b77PlcGt/n0eyceqknhvvHUUvy+aj7oB87Yb1IXFXe1Oh+gOqDQqlBol/Ub3o9dNvZwm\n5gqZnFjvAO5p3ZaRwT601codJuaFxWV8k3C0eniDTColNNALqVIObYTr6PTuy/fx9mcLKS4Rfl7z\n+iQPVu9zp7xShkRiIzu/nL+OdeHpyS8w4qbe/PTxM41OzAGGD+nOqR1zeOC+cXz8wTvOdkfEQWTm\nl7P9YCY5hY1bzAGeuHsowdFDSdj5r7NdcTqeh/ajLCrAdOoEYSERlJeVOtslh6NWaxly62huGD4W\ntdYFjcaFjjGxDRJzaOAOHarC7l8v+pqCzAK6DujaIONXi5fGjVhPPe1dVSjt1yCuRjKy85k+cyHz\nl2xgysTRPKxVk/fxfPy0GrQaJdxzM0y42bFO/Idflv7DinU7+Pnz5wWzabJImL4shKzCqpu3jOx8\nSssMtA4LJCa0nMcHpV8x4aMx8PRbP3D8dB7LV65z2tAFEfvTFELs53jrufu56fbxxPXqz+tPT6Bj\n557cOf5xZ7vlVEJXLcbg4883R5NY9OMXXD/0DkaOfwKd3jH5SI2Jf/5ain9AKHePvJEgr/qH2+Eq\nBL3UUMrSfUvJLc1tkOGGIpVIidR5EeupI0jp+P+IT57OZNqnC1izIZ4pE0fxxL3nR+nZ9h9DciwV\nYiIF3Z1fSL87nmf68xPo2zNaEHvllVLeWR5MbrGC4ynpaDQqgvy8sNpsRAUbmHxDuiB+2IMV63Yx\nfeYipkx9mWEjhGkrKeIYisorOZiST26hAWvD/ksTlDmfTcPbN5BbR91f/dy8bz8gLeUEL779lRM9\na1ysXDyXRT9+QbfeAxg54Qn8AkKc7ZJDcdUq6BMdgEroHTrAnwf/5FDGoYZeXi9clWpiPL2Jdtfi\nYu8ktxpIPHKK6TMXsHPvUaZOGs19owY73mgDOHj0NM9Nm83KH98QzObM1W4s+sdCsL87OveqO0mD\nScL/hmYQE1r7zPrGSHFpBeMmfoRErmbWnB/x8XNObwSRhmG2WDmaVkR6billhsbVj7021iydX+so\n0O2b/mT2p2/x4ezluOvqNjKzJbDuj19ZNPcL2nXswsgJTzTpUrbLEeLrStc2Pg2+Xvb666+/3tCL\nVXIVJ3NOYrE6LrwV6q6nn38gA3x0BGuUDg+t79p3lMdf/oJZP//JQ2OH8t37E+nSsbVjjV4FPl4e\nnDyVyd+b99W7lWxD+GPdTp5/8WlGj7mXErMOq1WCVAoDOxUyKLrI4fbtjUqpYMzwfrio5dx4272Y\nDcX0vW6gs90SqQOJR1M5kl5ORm4ZlY2wH3tNHNizjTW/z+f5tz6v8fXgVpH06n8jk++9iVYRbQkI\nDhPWwUZKRNtoht11HyZTJd99/Ab7dm0hMCQMvXfjb7BVV+RSKVGhnrhoGp6LdlU7dKvNysJdC8kq\nyWqwAzWhkimI1vvQycMFT7kw55v/bD/A9JkLKSwqY+qk0dw6pKcgdu1Fr1uf4ePXH2pwW9m68PpH\n84nff5wVP7wGwPEsNady1QR5VtI+UPjkPEfw8nvzWbhiE7O++47rB93obHdEamDZilU898KLBLYf\nzv+euf/KFzQS8nOzePbB25izdFud3v/ms/fTvmMXsTa9Bnb8+xe//vA57jo9I8c/QYfYpl+1onNV\n0jcmEOlV5PRclaAD7ErZxZYTW65miWp8tVV91du5KBFIx1mzMZ7pMxcik0qZMnEUg/t1EcawnSks\nLiP8mvsoOPirQ9a/ZcLrdI9ty2tPN/+z5pOnM3nwuc8JCApl1g+/oNFonO2SCLB5yxaeefYFLMgY\n8+AzbF6/Gg+djhFjH3a2a3Vi9OCO/LB8J2pN3adC/jzrY06dOMxL73zjQM+aLnt3bGLRj18gkUgY\nOf4JOvfo62yXGkxUK0/aBl/ddL2rFvSC8gKWJiylqKJh4VaZVEpbXVVfdX8BktzOsWT1VqbPXICv\nl44pE0fRp4cwSWWO5OelG1m5bhfzP3/Obmueycyj29BJzPpgUp3GvDYnfl76Dw8++ykz3n6FJye/\nBBIHn/eI1Mi+fft49rkXyMzOY8xDzxLduUf1a01leMdzD9/O069+1KAQ+o5/1/LtR6/xwexleOob\nfr7anElK2MmiH7+gtLiQkROeoGffIc52qV5oVXJ6R/tfVbgd7CDoAMv3L+dkzsl6XeOu0hLr6UUH\nDw0aAauG5v++gekzFxIVGcKUiaPp2qnxno83hHFPfcDQAXHcPeL6q15r2Z/beWLKl+xe/WmTHNlq\nL96auZA3PpzHlOcnMeW16ShV4o5dCI4dO8bTz77A4cNHGPfIs3Tu2f+S92zbuIZN65bzwrQvhXew\njjw2+npe/eAHAoJbNXiNvJxMnn1gOE+8+A7deg+wo3fNi+OHD7Bo7hdkpCUzcsKT9B00zNku1YkA\nvZYe9ZysVhN2EfTjOcdZk7gGs/XKWabhHl7EenrSyp591evArF/+ZNqnC+jTPZopE0cR1ab5lj/o\no0dxYutsPD3qPt3nv7zy/k8cOJzS6IfACIXFYmX6Z4uZPvNnnnr0fqa8+haeXuJuyRGknUnnmede\nYMvmzYx79Dl6XXf57otvPnMft9x1L117XieQh3Xn8dEDmPrBHALtlNw27fkHiWzfidH3N60RykJz\nOvkYi+Z+ztGkBEbe+ySDbh7pbJdqRSaV0L2dL376uh/F1IZdYoghniHoXWovsdDIVXTzCeD+yHYM\nD/AiTO04MTdWmjiTkVf9eOac5fh1vpsde47wz+L3mPfZs81azAFW/fQGN93zWoOvv+me11ApFaKY\nX4BMJuXVyXdhPLmUAE9oHdmaxx8az5nUFGe71mwoKCxmwgOP0LlzF/wjYvjil/VXFHOAJ158hy/e\nfUkAD+uHvcUcYOqMWUCVsIvUTmh4G555/VPenDmPw/t3c9+tPVn524/Vr+dlZ2I2mZzo4XlctUq8\ndfaJ+tllhw6w6dgm9pzec9FzAa46Yj31RLrIkOP47bix0sSwe9+kwmDkwTE38NQrX3HfXYOZMnEU\nvt5Xl2zQ1Hj1g3ko5DJemTymztecPpNDt5smMfeTpxl6fTcHetc8+Oqn1UyfuZBBA/ry3PNTiY5p\nmgmVzuaPVWuYPWcue+J3MXTEPQy9Y3y911gw51OARrNzfXzMQKbOmEVgSLhD1t+9dT1fvPsSH8xe\nhpePv0NsNCcK8nNYPPcLNqxZwiNPv8m2JfPoaTLS95slyBXOnT/SNkRHVKh9jjTtJujZJdks37cc\ng7mC9jpvYnTu+CqEban58XMz+fWXP9kOeHt7c3Lz17i5ttzzzm43TeKbd58iLibyiu9dsnor/3v9\nW3av+hQfLw8BvGs+zF30N/OX/UtWThHj77mb8fc9hI9vgLPdatTsjo9nzvc/snDBz0S07UCfQcPp\nf8OIq1rzgdt7M+PrJXj5OlfgHC3m5yjIz+HZB4bz8NNv0LPvYPy2bcR3xz8oSoopiWhLyrBRmNxb\n1kbmSpSXlfLKg8N5OzWZTkBSTDcUXzqmMqguaFRyekX743aVyXDnsJugA6zft4heXlo0AvfGLiwu\nY/rMBYSs3IKyoJiJRhPPPXoH01+o/51+cyI7t5BOg54gK2H+Zd/38rtzOXIijd++myKQZ82T/YeS\n+fG3jfy4aB1xXWKYMGECo+++T+wVf5a0tDS+m/09P8+fj0SmoP8Nt9Fn0HA8PL3ssn5jmKH9xNhB\nvPzutwSFRghm852XHuEBs5mRhXlILBZsEgkSq4VKnRd7pnyAoRk1X7EHC76awZCfv6GLXM4CnwCO\nXj+UkeOfQOvS8JyjhuLnqeWaDlefDHcOuwo6FZmQvw8QZjBCRnY+0z5dwM+/b2TKxNE8++jtbNq0\nF4WLhl5xjmuw0pT44dd1/LP9AN9/9L8aX7/h7lfo36sTLz15l8CeNW/WbIxn7uJ/+G3lP4wfczvj\nJ9xLvwHCjNZtTBgMBmZ/P5effppH8skTDLrpDnoPHEawg1p3znjlCfoMuIXe1wv/s3510jj+9+pH\neHoJK6Be+3cT/MoTlBsMBIaEXfRaSatIEl58B6tCKahPjZ1je3fglXIc/Yi7+X3+N1WDYG68nTsn\nPCFYaaBUKiGunS+BdkiGO4d9Bd1mhZztYCq025I1ceJUBtNnLmTNhnimThrN4wJPOWtq3PXoO4y8\npS8jb+lDWkYuKalZtAkPosP1j/LLF88z5DrnTMtrCZjMZn5ctJ4fl2xE76lD7+VH/wGDGTDkJoIC\nA53tnkMoNxhZvmIVc+f+wPp1fzJo6O1cO+hWojs7vvtiWWkxD9/Zj/lrEhxu6xxZ6ad5dPQA5q7Y\nhbuH8OWdUd+8j9+OTZRVlJGVnkZoRFsqjQYUSiVStYaEF9+lpJn2PrcnK3/7kcVzvyCu9/WCDILR\nuSrp0ykQmdR+ETz7CjpA2WkoTALsP/Eo8cgppn26gN37jjFl4qhGOzClMeLa9g62LH2f0Y+9R0Fx\nKa2CfFk97030Ojdnu9ZiSE3PZe2mPazZfJgNWxJwdXOj33X9GTRwIENvGIy3t31Cz0JTUWFkzdq/\n2bBhA5s2/UPS/gSuGzyMbtcOold/4dvnLv3lOwrzc7n3Ccdnvu/Z8Q/ffPgaXy9Yj0TqnMZDnT59\nE/3+3SCRYLFYyEhLwWSqRCaVERjUigOvf0px63ZO8a0pcm4QTNvoztx175MOGwTTMUxP6yD75ivZ\nX9CtlZC7A0wldltyZ8JRps9cwMlTmUydNJpRt/az29othU07Epkw+SNSUqv67kdERJCw+j3cXOwX\n7hGpGwkFEZwqUnHm9EkO7NnGwYTtJOzaip+/P/37D2Dw4MG0bh1BTMco5HK5s929CBuQsO8A+/cf\n4Ojxk/yxYhmHEvcR260XUTE9iO58De07OT/iI8RZ9srFc4nftpFXP/zeYTbqQsjq34n85RusShVW\nq5XMM6coLysFQBEaQcbnCzHqm+bNojP5d90Kfv3hcwJDwhk54Qki23ey29ruWgW9r2JMam3YX9AB\niv/P3lnHV1n9cfx9c93JgLEx2EaMbgEBkR8gIt1KlzQoSDrpbhCQFClRSqSkRLrHiAGjx4p13W23\nfn+MKbGxurXtvl8vXxd4nuecD6/J/TznnG/ch8RHBR4ms2FKfEIyk0cWroYpYbFSAl5YUM3tGa6O\nhlGW8ofF21i/4xgSiZhF3w+g/f/q61tSsUONkEMvvFEo399me/boPoHXz/Mq7AUB187z4uljXN1K\nUq68N74+PlTw9cHH15eKFXxxL11Kqzojo6J59uwFIS/DuHbtKoG3bxN09w7BD+7h7lGOMmW98far\nRTmfyvhU1r+Bv8u9W1f5ec185mgpgvmnJf4gEDBwdP7rPWgKoUJB7WnDMAsPRS0UkpQYT3RkOBKh\nkE0e5Wm4Yb++JRZqLv1zjN1bVmFlY6exRjBeJa2p7KH5lyztGLoiBaIvZ3zmg8OnrjJr+S7EIlGh\nbJgSEi1l2ZGS3H0WT8qrm2yfaEkJZ8Pobdxj+HxqV/VmzMB2+pZSLElQ2XDqee7PziNCn/Py+WNC\nXzwlPOQxL1884cXTRyQlJtD009ZERYRhZW2FrbU1ltZWWFlaYWllhbXVf59W1lYIBUJSUmQky1JI\nlaWSkiJDJpORIksBtZCg+3cJDwsjMjyUiPAwpCYmODq7UqlqbUzNrSjtUZ4yXj6UKeujt63lvLJ8\n1rdUrlGPZq06anTcH8b1oVaDZnyWj3x5bSFKT8dvqT8WoS8QpqWRJJEQ1rIDx0uUZO6koSzasB8X\nN3d9yyzUZDaCAej81TCq183fTrH561Q1Sw2lqr2JdgwdIO4WJIfk6ZHMhikujnZMHtmVj2pX1Io0\nbfPr0WCW/uWNs5M9lUor2bv+K+6eXKZvWf/ySddJTB7ZlWYfVdW3lGLHw+RS3H1V8LiF1NQUwkOe\nkZQYjywlGVlKMqkpSaTKUpDJMn6d+eeylGTUahVSE1OkUpO3PsUSE2zsHbG0ssHByQV7R1ccnFyQ\nmphq4G+rX5RKJV2a+fL73w81Mp5arWZI16YMGTc931/m2sY89AWitFRkziVQvE7DSkqMZ1z/L/hq\nyLd81MwYQFxQ7gZcYffPq0iMj81XI5hSThbU9NZOJoT2DF0eB1HXQJWW463b9p5i5rKdVCzvXqgb\npiiVKnqPXkxkdBxjxs3gYVQJ+jaJYvWGncTGJTJ3Ul99S/wX348Hs3/jVHy8tLt1a+Rt/g4rT1ya\nYZ2LF2WO7NvG0+Aghnwzo0Dj3Lz8D79uWcmoyQsK7Up3wbQROLuWpPfX3+lbSpEgsxFM6IsndOmT\nu0YwUomIehVcsLMy0Yom7Rk6QPRVSI3M9vJP248wa/kuGtauxJRR3fAtV3jNZePOYwyasIItS8dm\n2emsfttxLPEfSL0ahpMfb+XTibDrW7G0KL7V9HRJutqMw8889C2j2DGuf1u+Hj8bL5/K+Xp+08pZ\nPHv8AP/FWzSsTPfs3b6O6xf/ZsbyDxebMpJ7Xjx9yK+bXzeC6T2M5m2yr+nhZGtGg0raq2So3cMw\nizIgzFiNXAl4QExcRuR7ZsOUKzcf/tswpbCa+dMXEXzccQLnrt5D8eyPbNuW7t84lS/6FWyVoGlC\nr23FreaX+pZRbIhKN6YI6oNhE+awal7eU9iiX4Uz8sv/Ye/oWiTMHKB9j0F06TOc7i38CH3xRN9y\nigSlPd5oBHP7On3a1vm3EUxifCwP790CQCwS4FVCuwHS2l2hA+rIc4ydvIDNu09Q3qMEd4ND6N+1\naDRM+WHxdjbvPs6WpWNpXDfnt/91245w7dZD1s4boQN1uSMoOIT2A2Zw7/RafUsp8tyI9eR5fOE/\nmy6MrF00Dfey3rRq3ytX9x//czc71i/h+8VbcPcsekVZZCnJjOvflm79RtH407b6llOkiIuJYveW\nlZw6/Dsly3gR9vIpzVp1ZszEH2hStaRW59Z6uGp4oilHTl0jLj6Jq7eCadOmLcumDy7UZn7m0m08\n6/dDjZonFzbmyswBBvVsSUhYNIdOXtGywtzjW64UK2cOpXk3Yx13baJGxMsE7ZybGcmZweOms2H5\njFy1zFwwbQRBt66yYe/5ImnmAGbmFqzecYKr50+yccVMfcspUtjaOzJwjD9fT5jLw3u3SEpI4NrF\n09iIc44nKyhaX6GjVrB8zres2vAbHqWcObrdsLad80r/b5YR/CSULUvH4lE670X15QoFFuU6kv7U\nsHJDf/7tBCfOBrBl6Vh9SymSxCtsOR1i7MCmT04f3cvNy2cZPXVRltcf3L2J/9jeDBs/u1hFgx/Y\ntZGLZ44ye9UufUvJE6JUGUKFHLmlYdT5yAr/Mb2JjHhJp+79WDx7kkbLvGaF9g0dIPkFgRf+pHxZ\nV0xNCmeTgG17T9F79GLWzRtBv255S1N4l9/+PMuuA/+we632S1PmhTkrfyUxScbs73rrW0qR40Fi\nKe5FG8/Q9c2i70ehUilp+Embt8rS7t/xE+dOHcZ/8RbMLYvfz+luwBX8x/Zm8YYDlPLIud2yPrF8\n8QSPvb9gERYCajVya1vCGrcgrGFzfUt7j/S0VMJePqNtiwZ4uGj/xUM3FSLMS+JXxa9QmnlYZAwt\nekzh8MlrpD3eX2AzB+j0WUNMpBK27T2lAYWaY+LwLiQmy1i56Q99SylyhCRZ6FtCsSctLZXEhDjO\nnTrEynnf8TT4HpfPHqf357URicXMX7enWJo5QMWqtfnl0HXmTvma00f36ltOtjhfOkNN/9E43riE\n6atwTKMisHoUhM/6JVRYt1Df8t5DamJKFT8/3J108/+VblboALIQiL0Dat20Vs0zavV7favnrtrN\n8g0H2LJ0rFaq1Vl6dyTi5jYszA0rUKrDgJl82ekT2rc0lobVBGmYc+RpGX3LKPakp6cx6esuBAcF\nYmJqRqkyXjg4uTJswhyN9WQvCiydMQ5LaxsGjJqmbylv4XTlHD6blyNKS83yulAh59lnXXnc2XB2\nGIUCqFbOidLOuum1rrsajmYlQaL7BvI5EvwCZqyH79fBrYyKUpdvPqBCk8HEJyQTen2r1krPGmIq\nG8Ce9VOYu/JXLt98oG8pRYJXMgP8/74YIpWa8O2MlZQs44VQKKR7/9FMmrvOaObvMHrqIlzd3Plu\naCd9S3mL0kf3IEqVZXtdJZbgeu44pq/Cdajqw1hbmFDKSXf//nVYskoAlmUh5hZgIKv08wHgvx5E\nr99rzgawrqQjG2IT2bt+qtZz4z9pWI19Ry+yctMfDO+bc5UhXXLp4BIqNRvKz8vGUtOvaEb66ooI\no6EbBDcunWHVvIk0bdWBngPH6VuOQdOmcx/K+VahU1MfFq0/QBk9t1+1fPEEk5io93ZR38U0OhKb\n4CBSnbRXvCW3CEUCvNysc5Ks2Tl1NxVgVgKkBnJGlSyD9ft5lZBERHQ8ickyrge/4PPHoVxaN0ln\nhW5WzBjCibMBhIZH//eHiSlw+S4E560Wvqa5c/JH2vefxYVrQXrVUZhRISIs0Ziupk+SkxKYN+Vr\nDvy6kblrfjOaeS7x9avBzmO3WTx9NCf+/E2vWtQCIUJ5ei5uJNsteV1jbSbV6eocdLpCf42VF8QG\ngEqh86nfIjKWZ3eeEBX6CgCpVEq1ip4IVSqISQA3J51J2bRkDJ71+hJ791cIi4JRiyA8BkzE0KEZ\nDOmQ45uptnh+eTMNvhjH2EHt6fRZQ71oKMzEK61R6iZKxcg7JMbHsnPTcsJDntG8TZe3otqN5A6x\nRMKyLYdZMWc8wUG3GDxuOrLkJMwsdGtUKqkUhbkVYtmHO3iqJBLSDOAIRSQUUL6U7mut6L4PoqkL\niG10Pu17ONkRlSxDrVajVquxtjRFKBSCrSWU1k4nnOywtbZg/6ZpfNxxAszdAvHJYGkGEgn8ehwe\nPNepnnc5v38Ruw78wzJjX+U8E5liIDtSxYiE+Fh+WuLP1z2a41bKg6kLNxrNvICMmDgf97LeLJv5\nDXMmD2X+1GH/FunRRVy1zLkEiZ7lESg/vBAMFUuI9dZ/l04bCxPcHMx1Pq9+GhtbeYFQ871gc8ut\ne0+o3nE8jwe0w97GEkdrC9xdHCBdDkM6go3uv4Qb161M95b1uXPpzn9n+pARJqlnQwfYvXYiT55H\n8O3MDfqWUqh4mWRYGQy6xOHmZfyWz6TmjLFUm/cdpY7txyQ2OucH80lCXAxrF01jeI/muLmXZeuf\n1/isk+FEPBd2Wn7Rg2eP73Pr6jnOnzrMgd2buBMMf10ScuSckID7QlQq7e0kPvjqa9LsHLO9Hh4T\nxWqplDHDu/P8iWZa5uYHsUhAuVL6WbTqLm3tXaIvQ2qUzqcdN309x/+5yZalY6lWqSyqyDiEO46A\nQgntPgY9txP9uV4f2soV2Lo4ZqTSiYSwbQbYGEZg1cI1e7h+O5jtK8frW4rBk6q24OizN1ptqtVY\nhIUgTklCLRCQVKYcKnHRbKVaZfE07O7c/O8PBAJEaakklvHizvAppLi6aWyu+NhodmxcyvlTh+ne\nf3Su67UbyTtrFk3l6L7tWFja0Kj7L1g7+SEQZFiIUgl2NmpafgRCgXZsxTQ6kkor52D1JCMDR4Aa\nVCoSxBK+Tkuj/7ZjPLp/m2Uzx1GjXhP6DNN98S5td1T7EPoz9LRoiLkOqpxrK2uCP09coffoRUwa\n0ZWxg9rrZM680v+bZTjaWuKz/wzt3V2xszKHb7+CSp76lvYWO/b9zZqth/j793n6lmLQvEhx4Xqk\nPQAmcTH4bFqO5fPHiJMSUUkkpNvaE9x9IDF+NfWsVLNUWeKPfeA11MKsNwDlltZc/WE56TZ2BZrn\nVXgov//yIxf+PkL3fqNp2b5ngcYzkjNqlYpTR/eSJq1JcKg1amUazq7/NRxRAx4l1NSvqj1bEctS\nsL0XgMOta6hRI3MrzZfrFjNq+S9v9arft+Mn9mxby+gpC6lRr4nW9LyJRCykjq8Ljjb62ZnTn6ED\nxF6HFO3mDMpS0+k9ehEpsjS2LB2Hg53hnWkqFEpqtR7FyH5t/61EV658B27d2oG5mWFGSJ+5dJu+\nY5bw6LxxCz47rsR4EZogRZSWRq1pwzF7Ff6eyQlUKoK7DSCkxRd6UqlZHK9foPKKWahFomzvESoU\nhDX6lKD+o/M1x/lThzm6fzspKUl80roTLdsZjVyXKFUCjp4XkJCUccwRHxdD6TfKxVqZwyf11JhK\ndWMtP/84H0trazr0HPLetYS4GJbO/AZzC0tGTVmIRKLdaqWlHC2o6aPbGKw30c8ZeiaW5UFkprXh\n12w9hEPlrnRu04iDW/wN0swvXg/CrFx7tiwd91ZZ2aPHV1Gl+TA9KvswjetW5q+dszAt247o2ER9\nyzE4VAIx4YkZXx7V5kzANCoiyxWrWijEY/92bB7e1bVEreBy/lSOGRkqsRibh/cwjYrM9bgRYS/Y\numY+vVpV5+zJg3ToNYQF6/YazVwPKJVqhGT8jK1t7XF2LUlwUCBpr4u+KFVqUKt0ouXR/dsEXD2b\npZln6pu2cCP1GregR4sqHDuwQ2taLEwl+JYp2K5TQdGvoUusMnLTNcyDxy+p33YcAXefkBK8l85t\nDDPdatXmWWLCgQAAIABJREFUg4zx/wn50wNUrfj2trpXmRIsnNqf9gMMt7VhWXdX4oN249N4IAF3\nn/x3QaGEu08yPospcenWqNRg/fAu5hEvP2hykuREXM6d0KE67WEaG4U6FymWIllyjhHLkLEa/370\nl0wb2QtzS2vW/Hqa8TNWUbXWR5qQayQfSCVgYaFE9XoBbmJqRjlfPyLDXxIfF4OFuQATqW7SbOdP\nGcb4matyvK/hJ23YfSqI4KDbfDe0E2EhzzSupbSTBRam+gv2Bn3kob+LlRekRYE8QSPDTZ73M7/9\neZYtS8dSr4avRsbUBn3HLsHC3JQLB7Ju5QjQrmV9bt17yveLfuGHcYYZ6GMilRAVuJNqLYYz+7ve\ntK5dCYbOhej4jADD5d9kROoXMyJSM4IYTRLikCTGoTTNPoVFJRJjGfJUR8q0i9zcAoFanaOpq8QS\nBKqsV3FhIU85fvBXju7fQZVaDejQa4jRwA2MGr7wKkZNWrrg33fV0h7leBX+nHt//8gndbQfjLZl\n9Vxatu+JS4nSuX7m6/GzCAq8zvRv+tDok8/pMVAz7aJtLKR4ldR/OrZ+V+iQkb5mVRaE2Z+55Ybj\n/9ykZM0vsTA34f6ZdQZr5ulyBVWaD+Pjen6snDk0x/unjenOnfvP+f3QOR2oyz83j61k1eY/OTt5\nNYRFZ6xI7z6BE5f1LU0vhCRmGLhApQJBzv/MVBL9vtlrihi/WjmuvAVqFWkOTqSU+C+j5G7AFTat\nnM3X3ZqxdvE042rcwLEwg1YfgZOdGhMTMDXJiHDv1bEUvhW8GNO3DSqV9nboHt67xe0bF2nfY1Ce\nn/X1q8GPO08hlkoZ0OEjAq9fKJAWkVCIl5sNYpH+7VS/QXFvEnU5Y6WeR1QqNb1HLyL8VSxblo7D\nzcVeC+I0w/mr92ja+TuuHl6Gn69Hnp71aTyIPzZ/j3fZkjnfrEcW9fZnSNAzzO2tESiV8NMkKKO5\nFKXCgExtwbHX6WpmkWFUn/UtkuTs4wxE6WkEd+3H88+66Eqi1hClplB72oiMutvZoJSacKffKA4l\nJ3H5n7+4fPY4Zbx8qNvoU2o3zCgGY6TwkCRTo1IJsDL/72TpycO7jOv/BfPW/Eb5ilU1PufATo2Y\nvXInTq4F+z6Migxj2cxvcHJxY+TkBfkaw8HGlIaVNX90nB/0/0qRiY0PiPIW6r9p119IPD7nf01q\n8teOWQZt5is2/cG3MzeQ9mR/ns0cIOCvVbTp7a9xXZomtWYF1nqWRFCrIswbUezMHCBS9l/wpcy5\nBNHV62W7vQwgc3Il7ONWupCmdZSm5tyYtIA0O8f3VuoqhZzEmChmpKXRbFwfzhzbR5VaDVj32xlm\nr9rFF90GGM28EGJpJsDa4u0wEc/yFdlz5iHrlvpzeO8vGp1v86o5fNbxqwKbOYCjcwlmLN9G5Rr1\naNewLKeO7MnT8yYSERX0HAj3JoazQgeIuwPJOQcrPAuJpPfoxZQt48rGRflLfdElvUcvxsbKnOUz\nso7EzC0hYVHUbzuOF1e2fPjGLHq764Kjf19nybq9HNlmeC1hdcmlKC/Ck95Oj6m0ag4ul/5GIZEi\neP2zEcrlyFzcuPntTIPoDqVJTOJisPlxHmb3AlDFxhCXlECcpRXHq9XF6bNOOssLNqJ/1i6aRnp6\nKiMmzi/wWA/u3OTA7o18479cA8reZ9nMb4h+FcaoyYtwcM7536S7sxXVy2dfvU7XGJahq9Ih6hLI\ns9+enL5kBxt3HWPL0rF8XM9Ph+LyTmpaOrVajWb81x35qtMnGhkz+GkorXp9z8OzP71/MToefv0L\nHr8EKwv4Xz2oW1kj8+ZEdGwiPo0HEhW4UyfzGSpKJPz51As177xQqdW4njtB9JIfUEdHgqU14SXd\nCf6oKVZValPa0xvrAhZa0ScRoc95cDeA+3du8ODOTR7cvYl3xWrUKl+RCmW9SZQl809QIBNmrta3\nVCN64MSfv/HHrxtZtOEAogJUR2zfuBx7Tj9AkE3RIk1w69oFls0ax/++6EGX3sOzvc/STEL9Sq6Y\nm+g/tjwTwzJ0gOQXEHeXzJ7p8Ykp2FiZc/byHXqPXkyvjk0NNuL7Tc5duUvzbpO5engplbzLaHTs\nOw+e0XXIPG6ffOPLMSoOhi+AmHgQizPqMIrF0L8tdGiq0fmzwrN+P079OgeP0i5an8uQiZI7cO5l\n1oUl4mKiGNunNas3HCDkyUOCXz7n+ZMHPHv8gBdPHiAUiXD3LI97WZ+MT8+MT3NLw6ifkJKUSETY\ni4z/QkOIDA8BtZp/ThzEzNwS74pV8alUHe9K1fCuWO2tZ5MS4xnSpQm/HL6hJ/VG9M3TR0GM69+W\n2at24VOpep6fnzqyJ136DMevRn0tqHuf7T8t5p8TfzBq8iJ8/WqQnJSAhaU1AAKBgEqedniV0H9k\n+5sYnqEDvLpAamIEHQfOQqlS0aR+Ff48cYUtS8dS1t3wtyaXbdjP7oNnObs3f0EWueF64CMGjl/G\ntcPLM/K9xyyGRy/fv1EqAv9BUM1Ha1o6D55D17aNjO1VgbuJ7jyMtsjy2oW/j3Lm2D4mzPoxy+tx\nMVE8f/KQ54/vZ3w+yfg0M7fA3dObUmW8sLC0xtrWHhs7B2wyP+0c87W6l8vTSZOlkJoqI1WWQtrr\nT4VcTsjzR0SGvSAyLISIsBAiQl+gRo1LidIZ/7mVwtm1FCXLlKVs+UpY2+YcvzKmbxtGTpqPZ3n9\nd8Myoj8mDO5I4xZf8FnHr3L9zM6NywDo1m+UtmRlSVjIM5bNGkfdRi24de0CQpGQibPW4GRnSeOq\nhhcfZJiGnhbDd98MY97KjO1bFxcXwq9t1LOo3PHlyIU42Fmz9Ie8p1PklfNX7/HtzA2cWzAKvl0G\n6VmkC8kVGU1nhnXWioZ5q38jNi6RuZP6amX8woWAYyHeyBRZbwduWjkbe0dnvug2IE+jRkeG8/zJ\nAyIjXhIbFZlRbjM2mvjMz9go3Mv6cP/2dSRSKWKxBInUBLFEikQqRSKRolapSE1NIU0my/hMTUUk\nEmFiZo6pqRmmZuaYvP509/RGKBTiXKI0ziVK4VKiFC5upf9dneSXTStnYe/oyhfd+hdoHCOFn5+W\n+CNLSc5VZPntGxfZuXE5M1ds14GyrBnduzVPHwUB0LXPMFYvX4i9leF1UjSczf83MbGnUaOPWbf1\nD+ITU+jdoZG+Fb1PWBQcPg8JydChKSlOdtRqPYpJI7rSSwdb3AANalVg5vivGDR6Eeuyey0TCiFF\nppX5T5y9yV9nbnB85yytjF/YSFFZZmvmAEGB1+g3ckqex3Vwds1VgI5cno48PR2FQo48PQ3F69/L\n5ekIhEJMTc0xMTPL+DQ1RVjA2g95xa9GA47s+8Vo6EYYOMafk4d/Z+RXLVm04UC2NdbVajVTR/Zk\n7z+PdKzwbWrU/ZhnTx5gYWFF06ZNDNLMwVBX6AAqOXt/no9AmUq7lro5M8k1D19kbHGnpIJYQrIs\nlQ4vI1l6dAUVyue+apGmOL33FCY/rKeemyOCd4Ox5AoY1Q00XP42LiEZz3p9ib37q0bHLcw8TSlB\nQKRtltfUajUdGpfT+xeTPklPS6VX6xr8eqJo1K03UnCeP37AuP5tmbF8O75+Nd67PmlYV3oN+oaK\nVWvrQd3bXPz7GBZmYiaO6ofIQKtfGuYKHUAooX23ARAbAKqcaz7rlKU7iI9JJDktHTNTKZFRcRyt\nVxn0YOYATdo35ei1+zzf/RdlvN7QoFSCbxmNmzlArVajuHp4mcbHLcyEpWR9dg4Zq3PfItYmNa9I\nTUzxLFeB+3du5CsoykjRw72sN7tPBfHd0E606z6IJw/vUd7Xj1ofNWPbT4uoXqexQZg5QOPmrajp\n7WiwZg6GbOgApi4ZzVuSX+hbyX8kpRD+8DmhIeGoVGqkUilVfMtkBKY9jwB33Ud5PwuJZPDxS2zt\n3Yawfaep5+EGEjFUKQ/jNN+NqtvX85g14Su8yhhGdSRDQCmQEpmUfflWo6Fn4FezPoHXLhgN3chb\nzP3xN74Z8AXBQYGYmJrRtktfHt67hf+Sn/Ut7V9KOJjhbJt9TwZDwHAqxWWHtS9IChaMo1EszYky\nkSJ83WrIzESMWqkEOyu9mfnHnSbw9OImGk3qy9PhXZlgZQFLx8GEr0Cs2XPShWv2UNrNka5tG2t0\n3MJOTNqHU8vuBV6jgtHQqVKjAbeunde3DCMGhkIux9I647iqaqqMi9vWGpSZW1tIqehuuJVIMzF8\nQxdKwLo8iLTbmD63nDh7kx4hkViUcMTJ3AxPexsEluYwbaDOtbxp5pl0+6o1Xs1q0XfOpg88mT9O\nXwjkzxOXWTDFGNT0LhEyyw9eN67QM/CrWb/AzTCMFD3EEgkjJs6jau2PsLB3QmJmzu0bF/UtCwCx\nSIh3SVukEt0GkeYHw95yz8TUBUwj9b71Pm/1b/x15ga3bryuTXz0IphIoGYFsNLtVkxWZp7JoJ4t\nqV/Tl1a9pnH4l+kamS8pWcbnfX4g8f5vGhmvaCEgJMEs26uhL55gaW1bqCvBaQqBQEClanW5feMi\nlavX07ccIwaEg5MrVtZ21Bw1lVGftGHKiB7UahBIu+66Xyy9iZOtGSWdso+PMSQMf4WeiZ633jsP\nnkNsXOLbKVr/qwdNahqUmWfi5+tBny7Nqfe5Zvr91mo9mquHlmpkrKJGstqSNGX2gTLG1fnbVKlZ\nn1vXjKt0I2+zc+MySpXxouEnbQCYuWI7cTFRLPx+pN40WZtJ8CvroLf580rhMXShBKy8Mz51SHRs\nIp71+9G1bSODKJ6SGzPPpGvbxiybPhiXaj1JkaXle85eIxYydXQ3fLxK5XxzMeTN7mpZYTw/fxu/\nmg0INJ6jG3mDf47/wcvnj9+rBNdn2ETqNW7BkK5NSE5K0KkmiViIt7sdZlLD32rPpPAYOoCZc0bU\nu444+vd1fBoP5NSvcwyirGlezDyTutV9CDy+Cqcq3bnzIOdOdu+ydP1+nBys6dleN8VyCiNhyR/e\noQkKvJ5ljm1xpYJfTR4G3UIhl+tbihED4MnDu+zZtpZx/lmnwTb8pA3+i39mUKfG3LqquxdBNwdz\nSjoWjq32TAqXoQPY+IJE+wXxZy3fxZJ1e4kK3GkQDUfyY+aZODvakvxwD12HzOPg8cu5fu7s5Tv8\nfugcS/y1X8a2sKJAyqvk7HeNkpMSiImKoLRHeR2qMnyq1PyIW9fO6VuGET2Tnp7GhMEdWbLp4Afv\ncy3pzrYjN/lt62r2bFujdV22FlL8yhpOW9TcUvgMXSAGa28Qai/qvf2AmchS0wymr3dBzPxNbp9c\nzdpfDrNi0x853puals6n3afwz56C9zAuysSkf/jl0rg6zxrjOboRgGE9mrNq+/Fc3z992S8kJSQw\nf+owrWkylYjwK+tg0AVksqPwGTqAqRNYaP48NzIqDvc6fejd6RNmjs99JyBtoikzz+SPzd/z8PFL\nxv6QRT/1N6jVajRXDxuD4HIiXJb1lpw4NRWhQsGDW1eo4FdLx6oMn8wCM0aKL/5jezNs/GycXEvm\n6bmvho6nYbM2DOrcmMT4WI1qEgoEeJawxt7aMGu154Th1nLPDa/OQ3qcRoY6dPIKfccu5eqhpZR2\nc9LImAVF02b+Jkt+2seZS7fZu/6/ZiEqlRq5QsHgCSto2qAqvTt/ovF5ixQCAYdf+JCu+O9N3urx\nA1wvnMTmwV2kiXFcf3APycctUPQZgczJ8Fv/6pJ+LauyYe1eLCViUlxKohYVnuAjIwVj/bLpuLq5\n06Zzn3yPERkWwrgBXzB22hKq19VMoStHG1M+qlx4K2AWbkNXJkPUVVAkF2iY6Ut2cOnGff782V8z\nujSANs08k31HLuC/eBs3j60kPiGFNn38CY2IZmTfzxk1oJ3W5i0qJKmsOfH8v9VFqWP78Ni/A0lS\nIipJxrn6o/u3KedRHpW5BQHjphPvXUlfcg2KEv/8RdwSfzxs7LC1d0BhZkFE/aY8/0w7bX4LA0K5\nHLugAMRJiaglEuLLVSQtF33mCxunj+4l/OVzjfU2/2FcHypWqU3n3gXbhrc0k1CvkisWJoWjPEtW\nFG5DB0gNh9jboErP1+Nt+06neuWy/DCul4aF5R9dmHkmAXef0LjjePp1+ZSlG/YD4O3tzb3jixEW\nwjMkXfI4uSSBrzJqI7ie/QvvLasRqFX/Xk9LlREZ/pLSHuUAUJqacW/gWKKr1tGLXkPBe8tKSp44\nSGxyEunpaTi5uAEgUKqIrlabwFHT9KxQ95iHv8RvqT+mUZGIUmWoRSJkTq68bPYZL1p30rc8jXHm\nrwNcPX+Ssd9r9jhv20+LeP74IRPn5C9gTiIS4uflQGmnD1d8NHQK5xn6m5i6grlbnh8LjYjBrcaX\nDOzxv2Jr5gBVK3oScGoHh25aYGFuirmZlF5t6xrNPBeEJmWkq5mHPsdny6q3zBxAJkvGzOy/M3ZR\nqoxyO9ZjouFzv8KE556tlPjnGCqpCWbmlshS/ttdU4uEOF49j9evG/SoUPfYPLxLtbkTMI2KBDJe\n/FQSKSZxMXju20bJEx+OAC8sXD1/kjN/HdC4mQP0HDiOZq070L9DA+JiovL8vKuDRaE3cygKhg5g\nUxGkuS+reeDYJWq3HsW1I8v4/NO6WhSWN3Rt5gAJMjE/nvbCtfIQ/Jp8R/OGNZg6upvO5i+syDEl\nWpaxNVfq+B8I098v3JOakoKp+ds56uZhIdjduakTjYaGJCkB50tngIyXRamJCUqlAqXiv/bIKhMT\nnC/8jWlUhJ5U6hZRWhrlf1mDJCkxy+sClYqyv27CIiTvNSQMiTs3L7N3+zqmzF+vtTnqNmrB/DV7\nGN2nNVfPn8r1c3ZWJlQrV3iqwX2IomHoAPZVQZzzG9a0hb+wYedRXl7bSglnwzmf0oeZA6iBO0FP\ncLCzYGSfVjSqW4nq/xtBdGzWXzBGMoh+o7uadfC9f8/M3yRVloKp6duGrhaJcDCQphO6xiLkKaav\n3jZqM3NLUlLejoExjwzDLPylLqXpDevH9zEPC/ngPeI0Ga7nT+pIkeZ5/OAOG5bPYNbKnVqfy8HZ\nlc0HLnNk3y/s3Jh1oZo3sTARU62cI0JB0diRLDqGLjIHG58PloZt/eX3SMQi9m80rDM6fZk5wNad\ne3FXbWfs5yl0rR/FN0M6sGnxGHwaD2TXgTM611NYiHgjXU2UlkrmqjMThVwOgowuUm+hViGWFSyI\ns7CiFgrfO5YwN7dElpL09n0CAWJZii6l6Q2RLAVxyodfntUCASaxed9GNgTCXz5n/tRhLN6Yc+0L\nTTJlfsaxzczxA7K9RywS4uthj7W5YXTy1ARFx9AhoyubeWkyv1zDImP45/IdomIScK7agxH9Pmfq\n6O761fia5JRUDh27RPirGL2Z+cXrQWzbe5rV03vR0CeBzGPzapXKEhW4k71HLjDw2+U612XoqAVC\nXib8l6eaZv9+mqNMloKpWdY56ulFMHI5N6ikJsgt326wZGZhQUpSIoo3tt0V5hak2Re+Kl35QSmV\nohLn1J9CgNyi8J3vJsTFMH5wB9bsOq2X+bv1G0XLdj3o27YuSQlx3Ll5idiYVxkXBeBZwopShay0\na04U3vj87LDxBXkcT4ODaP3VNOLikylVwpE7J3/EyUH7JWNzQ2pqGj//bySWIeG0c3Phq76Dda5B\noVDSqMN45E8PZHvPztUTWL/jKJ71+3Fi12zKuhvzqAESlVbIVf+tyCPrfozdnRuopCYAqNVqkhPj\nMTN//8tCqFAQWUczObOFjUSP8iSV9sQu6BZqYcZaIlUmA4GAkKcPKenuhUQqJcWtNImvMwOKOoll\nfUh1dsMk02iyQC0S8ap2Ix2qKjhyeTpDurdm+farPAkRYmqqwtwUbHT8XlKrQTMWbz6I/9g+RL8K\nx9LKmu8XbaaijxcVyxS9F+uitULPxK4quw9d4t7DF4RFxhCVIEckMpy/avDvJ/noZQSV5Ur6RcfS\nqpatzjXUaj2Kq4dyPmMa0P1/nPp1Dp92m8y6bUd0oMzwiUh5+1spxq8GSWX+M6CIsBekpspITozj\n3aTQpFIeRFcpvpXjggaNQ/F6talWq0mIi0YhT0ehUJAQF4Pc3JL7vUegFhW9tUZWKMwteNh9IAiz\n/n5SydOJrN2QOJ/KOlaWf9JSZQwfOIbuEy9w/LKAczfVHL8k4ORlEWeuC0hL122mtFgkxszCktjo\nSF48Debq2aPU8nHWqQZdYTgup0lEZvQbMoZqlb3wdHdh1jedsbf9cItLXWJTuxKx1paozU1Jqu9H\n/Zq+Op1/wLfLGNG3LVUreubqfo/SLjw6v4Frtx7SZcgcLaszfN7trpbq4ExQv1HILaxITUlBlpKM\nQp5OulxOelrqv/el2TtxLZuOUsWFNFt7bkyYS3IpD4QqJfY29piLJViYmCH18CJgwhwSPYtXI5vo\n6nV50GMwcktrhPI0hAo5AoWCyMhQ9sjl3Bv8rb4l5ok1a4/QsP1yklNEoBYgFguQiDKMPCRcyJ9n\nRcjSdReEZmVjR/M2nXEtWRovn0p8O/prJOKiaX2Fv7DMB0iNCiI0+BJlSxtGKVd4IwDu1BqCLwRS\nrpluV2s//vwngUHPWD3763w9v/vgWQZPWMHxnbOp4eeV9U0KJYiLZhlPOWYceuqR5TWzV+FUnfkN\nyXcDkKWnYmJmjrNrKZRiCUke5bg9airpVoZx7KNvxClJ2Dy4i93dAMKiI9h87ADdfjuD0qRw1tDW\nBOahL3C8cYHEW9c4duowonY9ifMsx+3rFxk5eYG+5eWKZ2EC/rkuIORJEKU8vBBnEx9gbQmtG6qy\nvKYtXoU9p1GdSvi4F934jCJt6ADE3YHk52QkaOkXfUazA1wJeMCwST9y+c8lBRonNj6J5t0m0bdr\nC4b3afP2xX2n4dQ18CgBo7pDEStQE5rmzJWw7HNWBSoV95dNx/leAPWq1EZh58irug1JKOv777mx\nkff5ulszpizciFspD31L0StrFk7lxdNgvvlhGXYOGdvCC6YOp0Gz1nzUtLWe1X0YhULIicsQm5Dx\n+6fB2Zu6Sg31q6rxdNPd93IZFyuqlSu6Zg5Fdcv9TWwrZXRn0zP6NnO1Wk3dNmMLbOYAdjaWXDu8\nnJjYBKq1GM61W8EZFw6eg+W74MFz+OMsfL+2wHMZGhGyD0f1qIVCdr58zuN+owgaPongnoOIL1fR\naOY54FezAYHXzutbht64fulverashkc5X2at3PGvmQN8O2MlK2aNJzXVsFP5UlJVJKX89wLvUc6X\nkKePUCjk79+shsho3b3sO9qYFnkzh+Jg6AD2NUCiv61OfZs55D4ILi9MG9ODLUvHMfi7FQyduApO\nXQaJBAQCMJXCwxfwquiUOVUj4mWCSY73Bd2+hm/lmjpQVHQozv3Rl8/6loO/bmbdb2do2a5nlvdM\nXbiBGd/017GyvJEsEyBLf3sbPTtTFwohSUfvJ9bmUur4uuhmMj1TPAxdIASH6iDRfS6nIZj5oPEr\nGPJl6+zPvAtA1YqeXD20jKoVPfl290niYuMzLqjVYGkOTrkvyWvoJCitUOZw7Pf8yUMcnVwxtzSc\nIMzCQHFcoV88c5TOTX2pXKMe0xZtwuKdHP03qVStLt6VqrF3m+HueplI1UhF76+6szJ1lRpMdFDP\nxcJMQi0fpyIbBPcuxeNvCa8ryVUGke6CbgzBzNdtO4JAAAN7tNTqPEO+bM2kwB3sTpRx82koiS72\nsHi0VufUNTlttwMEBV7D18+4Os8r1jZ22Dk68+zRfX1L0TpqtZoF00Zw+sg+th+7RbNWHXP1XO+h\nEzh1ZA/PnzzUssL8YW4qwNws62vvmrpaJcDZXrtBcSYSEVXLOmBVhCrB5UTxMXQAE3uw9v5geVhN\nYQhmfj3wEWt/OcTaeSN0Ml/v0YtxXT6OpDUTqR0cwsRVu3Uyr654mWSe4z1Bt6/jW7mGDtQUParU\naMCt60V7lX7xzFE6NC5HgyYt+W72j0gkeTObqQs3MeObvlpSVzBMTdSUKaFGrsg60O1NUzczVeNZ\nUnsBcRKxkArudjjZZvOGUUQpXoYOYF4KLNwzznm1hCGYOWjn3Dw7fj90DqlEzOef1qVh4+oEnf0J\nG2sLnKp058CxSzrRoE3S1WYkpOacihd06yq+xbhwTEHwq1mfwCJ6jn4v8BrjB3XgbsBV9v7ziI+a\nfZavcZxc3OjYayhrFk3VsELN4Fdejau9AJUq6+/XDFN/gl/ZV0jE2vkOFgkFeLpZU8a1+B17FT9D\nB7D2yeijrgUMxczrfDaGSwcXI9BRF6HeoxezZenYt/7su2GduXd6LRt2HuWLftN5FR2vEy3a4FVa\n9uebmSTEx5KUGF/sU6/yS5WaDbhVxM7RI8NCmDd5KD+vnsuA0dPoN2Jygcds2b4nURFhXDXQDmzN\n6yspU1KFUCRAqQSlWo1SCQqlAFMp9OtRnrljPyf6VbhW5ndztKRC6aITu5MXikd9xaywrw6vZJAe\np7EhDcXMh05cRb9un1K7qrdO5hs+5UfmTeqLhfn78QmO9tbs3ziNA8cuUanZUMYOas93wzrrRJcm\nCZfl3MTh3q2rVDCuzvONqZk5pT3K8fDeLcpXqKJvOQVCqVCwceUsrpw7Qd/hk6n/8f80Ov6U+etp\n38iLPWeCdfbSnlsEAgEfVVUTFaviVRzEJWYYuaOtipLOaoRC2LD3PP3bN2D+uj04OGluceVkY0aN\n8kU/PS07iucKPRPHOiDRzLaMoZj5hh3HkCsUDPlSN0UorgQ84PKNBwx7t8DMO7RtUZfIgO3EJyTT\nadBstu09pRN9mkCNiND4nM86jefnBcevRgMCC/k5+p5ta+jSvCJupTxYt/uMxs08k6kLNzLjm35a\nGVsTONqpqeCppn4VFdV9VZR2Vb9Vsn7D3vOMH9RBYyt1W0spdSsWj/S07Cjehi4Qvzb1nLdTP4Sh\nmHni8JbmAAAgAElEQVTA3Ses2HSA9QtG6WzOrLbaP8SciX2YP6Ufh09ew7vRQLbvO609cRoiXmmN\nipxXQcbz84JTmPPR/z66j6/a1CIpIYHfTz/gs069tTpfjbofU6JUGf78/WetzqNNNGXqNuZSavu4\nICpilSnzStEv/ZobFDKIuQLypDw/aghmHhYRQwkXeyQebZEF70Wsozrq81f/RnRcIvMm5S/q9uGT\nUPwXbePqrYf4j+1J93Yfa1ihZrifWJqg6JxT1gx1C7QwoVQq6dLMl9//NszUrKwIvH6BjStm4V7W\nm/4jpmCt4373g7s0YfrSn3Fxc9fpvJqkINvvVmYSavs4Y2VRfNLTsqN4r9AzEZuBXXUQ563ZvSGY\n+enfT/D3Z6Po1aA/d0/+qDMzj3gVx+Kf9ubbzAHKe7qxbeW3/LH5e/44fgnfjwezc/8ZDarUDC+T\nck59uX/7Ot6VqhvNvICIRCJ8KtfgbsAVfUvJkZCnwcwc359fN69k5KT5jJm6WOdmDjB1wQZmfFuw\nKnIClW4bpbxLflfqFmYSang7Gc38NUZDz0RiBXbVQJxzrjEYhpknRcVhMnUN5cNjGPA8nAXTtuts\n7j5jFrN5Se632j+Ed9mSbF85nv0bp7L/2AUqNBnMrgOGYexpagsS03KRrmY8P9cYhh7tfuvaBaaP\n68vPa+fTsl0vZizfhmf5inrTU6qMF59+3o1NK2fl63mhQkGFdQuxv31dw8ryRl5N3dxUTLVyDtha\n5lyOubhgNPQ3kdq8rib34RWZIZg5gKWVBaZWlogFAqRSCePHfK6TeXfuP4OtjQUtm2i2IpqPVym2\nr5zAkHGb2HzeC69PZrL74FmNzpFXItNyVy7YWCFOcxiqof9z/A/G9WvLbz+vpE2XPkyas45aDZrq\nWxYAX3Trz5OHd/MVf2B7PxDnM8dw2bQcYVaNVHRIbk3dzERMlbKOOFoXr8IxOWE09HcxdQSbiiDM\n+q3PUMwc4N7zcIaYSKFzcxw3TaVcTV+dzNt79CK2LB2n8XEVKlh0yI07Ee6ozStQpcUydvwVSaVm\nQ/ntTw0Yu1wJckWeHolIyd0xzL3Aa1QwGrpGqFi1NvdvX0epVOpbCgAHd2+mf4cGXD57nK+/m830\nZduoUdfw4j3yW0XuWHwcfcJf0vbFU0LCX2pBWd7IydRNJSIqezrgYmc083cpvnnoH8LMBdQKiA8C\nVRrJKams2PQHDetUpNeIhQZh5gA1W40k+vYuzEx1d340eMIKVswcilSi+f91ohIk3A8zQ6VMJzEp\nCXc3ZypVH8aMr2vhv3gbS3/aT9+un9K/e4u8D771EJy/BQol+HnB4A45dodQCUSEJea8nRcR+hwT\nU3Ns7Ytv/qumyWzWUq1OI73Mn5KUyN4d69i7fR0t2/Vk/po9ODhrpxiVppBIpIz1X8a8yUOZMOvH\nXD2zZfVcXjx9yJST95ClJNOvXT12HAvUstKcycxTH+e/jHuB12jTqTcmpmaYSERU9LTHzSF3R6PF\nDeMKPTvMS4J1eRBK6DBgJhPnbObzPj/wv9bt9K0MgMYdx3N020ydmvn5q/e4ff8Zg3pqp9GLUi3E\n3lJFWEQsJZztUasF2JopqOTjzu61E1k3fwQXrt9D5N6GoRNXceP2o9wNPGsjbD0Mz8Lh5Sv48xyM\nXJjjaj1OboMqFzkgxtW55tFX+lpYyDNWz5/EgE4NkUpN2XnsNgNGTTN4M8+k/sf/w8LKhuMHf/3g\nfenpaXw7qD3WtvZMmb8BADNzCybNXcfUkVm3cNU1k+auZfq43mxdM5+5k4ciEQnxdbejtJPuu2YW\nFoyG/iEs3IlVOhKbkAyATJZO8xoOehYFY3/4ifYtG9CobiWdzpvXnPO8UtIujRa+T4mNjcPOxpbS\njql81fDVv9creruzfsEo5E//oGpFT/p/s4zarUfz0/Yj2Q96LiBjZf5m9L9IBI9D4ZfDH9QTmYvq\ncABBgdfx9TMGxGkSXReYeXj3JnMmDmH6N30o51uF7UcC6Nx7GGKJ9hs5aZrh381l27pFxMa8yvL6\njUtn6NWyGoNG+9O+x6C3rvnVqE+Neh+zZfVcXUj9IGEhz1G8PnZJSoijlIMYj2JYnz0viPz9/f31\nLcKQMbMuQWWfMjx+eI/2Leszsl9bvaYmbd93mhu3H7NgasHSVPLKrOW78PEqSafPGmp1nmWr11K3\nfALDO7jweY2YLHvoCAQCalUtz+Berajh58Ufxy7Ttu90wiJicHNxwM3ljdShYxchIBhE77y7ioQZ\nDXpa1M1WS0BMCdKVOf+st65dQNsu/Yxb7hrEwcmFjStm0qZzH62ZakTocw7u3syK2RNIiI+lYfPP\nGDxuBl4+lbUyny6pUfdjFvuP4knwPUp7ev/ba/2XtQu4eOYYq7Yfzzbnu4JfTf76Yxeo1bh76qZ8\ndFaU9iiHLCUFqVTCnAUL+LhO4S4HrAuMhWVySVr0fUzSX4AqXW8aHjx+yed9fuD+mXU6nTckLIr6\nbcfx4soWrc6TlCyjRI0vSbz/W76eX7ftCOu2HUatVjOoZysG9WyJ4LcTsGbP++flShXUrwz+g7Ic\nK1VtydFnpXOcM1WWQp+2ddj51+18aTaSPbO/G0TzNl2o07C5xsaUy9M5dXgPp47sISYqkqYt29O0\nVQdcSuT8sy5MPHv8gNkTBxPx8hke5Srww9KtzJk4iFoNPqHTl0NzNYYhFKyRiIWUdTXHt4yT3jQU\nJoxBcbnExMEHUswh/gGo0vSioVbrUby8ulXn82p7qz2TWct3MXlk13w/P6hnSwb1bMn1wEes23YY\nkfvnTGjbiIkWplgrsiic8YHdhtxutxsbsmiPzHaqmjD0axdOc/Lw71z+5y+aturAV0PGF+mfmwBI\nS3l9VJiSRN8v6jJ75a48HQ0t2rCfIV2a8MvhG1pS+WGkYhEVytji4Vqw0tzFCeMZel4wLw22FUD0\nflcxbdOsy0T2b5yGlaVuUzW2/n6Skq4ONPuoqlbnUSpVLFjzu0Y6sdXw82LN3OGoXhzEq2E1BqSk\ncvnxSxSJyZCaDjaWMP5LqJ19MZBwWe7O6owFZbRHlRoNuFWAc/QnD++yccVMvvysJof2/EyDJi3Z\nfSqIr8fPLtJmDuBe1puBY/1xci1JKXcv9vz9MM9xHpZWNnwzfQX+Y77SksrsMZWIqFzW3mjmecS4\n5Z4fZBEQfxeUMp1MN37WRpzsbfh2aEedzPcmwtJtUD7/Q+txA9OX7ECpUvLDuF5aGf+ztmP5vkU9\n6viUAa9SULZktveqkHDwmRdqdc5/5+9Hf0mHXkOoWuujAmsUqFSYRYQiSpOR7OaOSmqsgPXVZzVZ\nuf041ja5628dFRnGuZN/cvLw7wiFIpq27EDTlu2xyuXzRYW7AVeYN+VrOn81nDadC9Yk5retP5Ka\nkkSvwd9qSN2HMZWK8PN0xM3RmJqWV4yGnl9SoyEuEJQpWp3m1z/+4fdD59j143danScr+o5dwsf1\n/OjTRXNnmNlh4vkFiQ9+10p+e1xCMp71+hJ798OpPJlEK+w5G5K7NoxdPqnIL4euIzUp2K6N5YvH\n+G5YhklMFAhAbmHFy08+5+UnnxVo3MLOvCnDSElOZMLM1ZhbZJ2udPPyP1y/9DfXL51BIpFQpeZH\nNGvVkTJePjpWaxj8tPQHnjy8y4SZq7Gx00xWzrzJQ2ncop3WWsFmYm4qoWpZB5yNRWPyhfEMPb+Y\nOoB9dYgNAEXeu7TlhsfPw5k4ZzOPzm/QyvjZoVAoOXf1Lk+eR7Bp8Ritz7dwzR5G9m+rFTMH2L73\nND3aN8n1/ZHJudtuP7JvG2XLVyywmdvfukrlVbMRvFEZTZychNfOnxColIR82rZA4xdWblw6w5Wz\nx1Eo5Cz0H8HEmWuQmJgQGvKUqxcvEBhwh3uB1yhXrjQ1atfju5mrKeVRTt+y9ca9wGvMnzKMTl8O\nZeDo7zU69oRZPzKwY0PK+frh5OKm0bEzsTCVUL28Iw7Wuj/SLCoYDb0gSG1em/qNfLVezYlarUbp\n3MyfhUQyfPJqwiLjOLJtuk7mnLlsJ88ua6/63o79fzPnu9xvO4Yk5fyFsm39En7/eRVSqZSLp49Q\nr0n+iu1IEuPw2r3pLTPPRKBW47lnK3G+VUgq7ZGv8QsziQlxSKRSFAo50a8i2LhyFtcvncHapS72\nZdthU64JbRuVxMIEKnurKVWi+G42blg+k+B7ASzeeAA7B2etzLFowwGG92rBzwevanxsSzMJtbyd\nsDE2WikQxqC4giKxAvvaGZ8apEWPKez68TvsbHRXFUmhUNJp0GwOnrjCnQfPGPR97raoC8KqzQfp\n1bEpNlZ5a12bW16EvuJZSCQN6+SuCE+K2pIUec7/LB7euYFKpSI1NZW7gfn/grN88RSLl8+zvS5O\nScIh4HK+xy+sPA0OIiYqAgcnVwQCIY6OrriX9abfxD1Ub7UA59J+yOUKVCpIlMGFAAiNLH6ta+/f\nvk7/9g1wdnVjzo+7tWbmANa29oyespDp3/TT6Lg2FlLq+DgbzVwDGFfomkBsBo51IPo6pMcWeLhJ\nc7fQtEEVPm1cXQPico8aNaUdbbkKSCViJg/SfgOKWct3ce3IMq2Nv2Pf33Rvl/u/R2Tqh1/MUtME\nhEWradNvNWrzVYjkL+g5MP+NaoRyOUJ5GkqTrM8M1UIhkoS4fI9fGHj04DaPggIJDrrNo/uBPLp/\nm7qNPqVEKQ8GjZ1OlZr1AUhMhpOXhQiFYG5hRfhbL0ICrtwR0NJOiUnhK+6WL7Zt3Mity4eYv25P\ntkViNE2Nek0IDgpk+/ol9BhQ8OM4W0sT6vi6YGaSc4tiIzljNHRNITQBh9oQcw3SovM9zJ7D57n/\nKITff5qsQXG5QyIWU9FUSon2TWnSsh41/cprdb6NO4/RqlktSjjb53xzPtm+73SeOsOFJ2e/UxAa\nCdfuCUhMFiCXm2NeqjPlfcoRlaCiZD6P/eSWVqRb2SFKT83yulChJMFLN130dMGj+xmm/aZ5e3lX\nxsvXj3K+lfnfF92zrdQWFQNJsswifwJMzSyQpSRjZp7xM0tIUREbD67FoGDfpWtPCUuvx9ff98NB\nxzVXuvQZwezvBnH57PEC1QhwsjWjXgUXhMLit7OiLYyGrkmEYnCsC3G3ICUU1FkUM/kAz1++Yoz/\nOp5d2qwdfTmwfsdRImws+WnBSJ3MN2v5Lv7aOUtr49998By5QknVip65ul+JhMikrP9JxCfD+QAR\nCqUaoRDk6cmYSKWkp8O5ABF1KqnxcMvbzxsgwcuXxLLe2N29iVr4/lZ/YhkvYirrdqemoCgVCl5F\nhBIZ/pLoyFDuBV7jUdBtHj24jZdPZbx8cjbvLMdFgEoNmWs5C0srkpMS/jV0gVpIRiiCYbRd1Sbl\nvTy5ePM+gVdOU6ZtE53PP2nuOvq1q085Xz/sHXOXEZKJSCCgpJMl1csXgzcvHWNMW9MWicGQ9DRP\npWKdq/bgzskfcXKw0Z6ubJArFFiU60j60/06mW/n/jPsP3aBHasmaG2OqQu2YiKVMGVUt1zdHyV3\n4NzLrM8gj50TEpP4xr2RYYjFkn/rt1uaQ6uGqvdKxucGgVJJrR9GY/X0IXKRGFQqRECaozPXJy8k\nzcBqxCclxhP12rBfRYTy6p3PhPgYnFzccHYtiZePHyVKeeDlWxkv74LVSI+MUXP6iujfDnjpaWmE\nhz77t964WAwt6qmwLibNuFLToHtzL/acCdZLf4nY6EjG9mvLpv0Xc/2MRCzEq4QNPu62WlRWfDEa\nujZJeQkJD3JVgKZVr2mMGvAFLZvopw1nj+Hz+bx53TydNxcEv0++ZsfqCVT2KaO1Obwa9OevnbMo\n656788U7Ce4Ex7y/5R6frObUZQmpaf+twEOeBuPoWhJT04yzb4FATbM64GSX/39ObqeP8GTlbBKi\nIwlQKvjD1gGBvSM2tvbY2DlgY+uAjZ0D1pm/t3NAKBQikUiRSE2QSKUZv878vUSKSPzfjoNKpSQt\nNZW0VBlpaTLSZLL/fp2aSmpqCmmpMtJTU1//mYxUmQyRWMTjB3f+NWyRSIzja8N2cnHD6Z1PbQZm\nnb4iIDRKQOYu7dNH9ynlXhaBWELZkmrqVyleX2enj+7l5uWzjJ66SC/zXz1/kiP7tjNl/voc7zWV\niqhQxg53Z2PHNG1h3HLXJuYlQWyRUYBGnpjtbVMXbOWj2hX1ZuZH/75OTGyizsx8/9GLeHmU0KqZ\nX775AEd761ybOQh4mZB1ZSq1UojijVrwajWkpaX+a+YZfyZEUMCt3tAmLek2bTh7Tj+gqVpNzbho\n4mOjiY+Lef2Z8fvIoBDiY6ORmpgSEfoCuTwdeXoa8vT0jF+//r1SJcDKuSY2TpVRCdQkRwUhi7mJ\nRCLCxMQMEzMzTEzNMn5taoqpqTkmpmZITU1f/5kZltbW2No54Vu55r+GnbnFrQ8+rqXi5BUR4VFq\nBAiwsLQjKTmByj4Oxc7MAZr8rz0nD/3OravnqVKrgc7nr9WgGcFBgezcuIxu/UZle5+FWUbBGCdb\nY8EYbWI0dG0jtQWHWhBzHdLj37r0LCSSm3ceExj0lH0bpupJIPQevYiAY6t0Nt+s5btYNTt3HZ/y\nS16LySSrLJEpst62NDcDqRQUrzdaUmXJmJq9bf6mUihopdaYqAjs7J0QCIWIADsH53yvdhNS4J+r\nQmITBMTFRiAUiLC2c8TWSs3HNdVYWRRO8xMIBHxSR0VoJEREC3gpjCPw0m807Kb7SoqGwqgpCxk/\nqAMb9uquf/ybdOs3ipnj/9/emYc3WaX/+86eNG3aNGm62kIr0I0WKLvs4oKDCo6g4oIzoqOi4qij\nuC8syogKjMv89CuOjiKOjoLLCIjKooDsO5WlCJQWutC92ZPfH6EqCjRp876Fcu7rygUX5JzntEn7\nyfOcZ7mF9au+JbVjJ2yJKSf8v8mopWeXOKIM2lPsIAgXog5dDlQGsPYHvQ1Q4PP5ue+pNxg9YQpz\n5i5sUzF/aPpb3HfraOLj5LnT+mrFJmKijfTKl3bO8rwFyxg3akjQzy+zn/riVavxk5box3v8dsph\nbzxB0P1+SLB6MbWy9XRl2REsttaXH9U1wFerlNQ1glrtR4kfFF7UKj/1jbBolYL6xrNT0JtIskH3\nLB+XXdyRdV/L23wpGFQuB13+NYecV58j/ocVktqyxCUwYvQNvPv6TEntnI7H/v4mn7z/Os89eidz\nX56O3xeIaMVFGxiQmyjEXCaEoMuFQhHw1CPTWLNpD//++Bs2bS9iS+FhNm3f1yZH2rn7IJ8vXcuD\nd14tm82ps+cHnaTWUr7+bjN5WR1DSi4sbWZcan5nP+lJ4PEojnvoged7vWCJgb55rToyEEi0s9oS\nW7WH3w/rdihxe079HI8X1m5vHz/6SqWKvJ792bx2ZVsf5Wd0VZX0m3QTScsWEbfuO7Jee470j9+R\n1ObVN93Jqm+/pOTQfkntnIq9hVupqiyjaPd2li/6mH2FW+mQaKJ/bgIadft4r50NiO+03ERnk9tr\nOGkpCSiVCvIyU8iR8C75dMg15xzA8806dk19E5XPx6A+rct2bo55C5YzLoR8AC9ayuub70bSL99P\n/3wfx0q3YYnVE2uCHtlwcb/Qy9VORkVZCVZb6/pkN9gV1DacPuNZAdTUK2g8een7WUdBvyFsWL2s\nrY8BgMLnJfu1GajcTnxqDX6VCr9aQ9rC94k8IO0H90mPzWT21AcktXEqUtO7YLHGo1AqsSWmMGJY\nP/LTwzMYRhA8QtDbAFNiLosXfc67rz7B/955SrKhJKfj5bc+o29BJj3zpG0eA8DSHzh410zUcz9l\nTnEVuNySmgv1/rzSHfzMZa1vL1U/zmHkYBXD+3rJ6hgeMYfweOiNDj+OIITa7VLS0Ng+GnoU9B3C\nhjXL2voYAOiOVaKtOXm3yNgdmyS13SWnOx07ZbNowXuS2jkZWq2Ox5+fy2PT/sGiRYvIzpCnc53g\nRISgtxGWxE5cd+sj6KOTQSHvy1BXb+eRGW/zjym3y2Jv34x/U1VbT43Lg6nqGI5V2ySztWDRai4d\nWoBeF/yd3dHG4AuXC7dtIDO3O2oVYe9wVXG0FGt86wRdrwONpvn7caXah057dt+jN5F0Xkd8Pu9v\nWsG2Dc5YK/6T/Dz7VGrsCcmS27/9gSnM/cc0XE55wy9KFKQkmHn8gdtJT23de1jQcoSgtyVKbaBd\nbFRGoHWsTIy/94WQ2qG2Fk/e+RjVajQK8Joi0OdLN+Iy1GQ4UFBcF3zf1sJtG8jsKk15YTg8dIMW\njPrmhToqAiIM7cNDByjoN5QNq79t62PgVyrZdt/T4POjON4p0ldXS3nvQZT36CfLGeQOvWvUSjJS\noumXLe7L2xrx3T8TiOoEMV1BLX3DhYWL1+Dz+xl9qTy/XAA0k67lo1QbysE96PjJ82AOPsQdCl6v\nj4+/XMWYkQOCXtPgi8J1inK1k7Fr2waypBL08lKsca0TdI0Gcjvxcze1k+H3Q9dOPtSq9uGhAxT0\nHcyGNcvb+hgA2G0JrJn2Kut1Bpb8tJdnXE6Wj75eNvsXDL0Mp9PO+lXSf8Ax6jV0y7CSnWaW3Jag\neYSgnykYbGDtBVoLgbQlabj5ry/yr5fkSYRr4smZ79Lh3nF0fecZSJMuHBe6dw5HT1Ou9lvqa6up\nqT5Gcmp6iCcLjnCVraXE++mXByoV+Hy/vJd8PgUqpZ++XSFJ5oEeUtOj7xA2ngH36IcPFvHPFx5n\n5LVDeTkrn9p3l+C/9T7ef3OWrOe459GZzJkmrZduNunpk2Ujydp2jYYEJyIE/UxCpYe4PhCZDqrw\n123e++TrPHX/9cSY5PsBPHi4nBU/bOeGq4aCxFOVQk2GAyhtDP57Ial3HoZw+6/pmOxjeG8/6Sl+\nlP4a1NSRnuLjwr7QMSV8iXxnEm2Z7b5h9TKeum880yffRof0TP67fA833/0ocQnJDLvsajavXcmx\niqOynccUbeaPN97BWy9PD/veGrWStIRIBuYmEBUh6svPJISgn4lEdwmE4DXhmzKxafs+VvywnUm3\nXBm2PYNBjrpzgOraBtZsLAypfa4HHRUNwVcYSHp/HoaEuN9ijvbTN8+HyfkpMZ4v6JvnJ9bUfsLs\nv6UtvPQvPnqbO64dyv8+fodR107glXlLufQk4fWx4+/iP2+/LOvZrrx2ApvXreTAvh/DtmekQUt+\nhpVuGXFtMhBGcHqEoJ+p6OMDjWi0ZsIRgpez5ryJ8soaFixeza3jLpXcVku88wpnaDkLhds3kpnb\nI6Q1QZ8lDDXo5zo9+w1hvQwe+tHSQ7w5ewqjB2ZQUvwTT8z8F48/P5duvQeecs2lo6/nu6WfU19X\nc8rnSMGkR2cyOwyhd6VSgS3GQP/ceJJFiP2MRQj6mYwqAuL6tToL/oX/9zEXD+5B18wO4TtbEEyb\n8wGP3nONLLbeX7ic664MbbhMmT00Qd+1dQNZedJ46JXlR7DEidrd1hCflIparebwwSJJ9t+y/num\nPjiBJ+65AVtSCh+v2Mut9z5JYkpwjaHGjJ/Ih2/LNzMBIL1zDjn5vfnsw7davIdBqyIrNYZ+OQkY\ntGL8x5mMeHXOBkydQWeFml3gDu0TfsWxWp575UPKt74v0eFOTn2DnTfnL6Hux48ktzV5+ls4nC4G\n9M4Jeo1foaS4Lvj7vz07t5CRmYtSqWrJEZul4mgptqSU5p8oOC1NYfdwJi4uXjiPzz78FxZrPJeP\n/RM9+w9r0T5XXjuBscOyuP62+9G2dpJPCNwy6XGuv7Qbw0b8EWNkaBUm0UYd+RkWzFHynVfQcoSH\nfragiw146yEmzLVFqB3k8c79fj833jOTGa9+xLbCgyz6dkPQa+s9Ubi9wb/9pUyIAxFyDxctSYwz\n7dlJ7j+monI6f/631csW8fwTdzPpphEU7d7J5Kmv8vSsf7dYzJu4evxEPpLZS4fQa9O1aiUdE00M\nyk8UYn4WIQT9bEKhhOhMMPcATfODR/7z2UoijXouG9ZLhsP9gs/n5++vfcTkiWMktaNQKCg5egwA\nj8fN9h8PBL02lHI1gMLtG8jMlVLQw5vlfq7SrdcAtm1cjdcb3Gx6dUM92a/PJG7jamIfv5OXnryH\n0YPOZ8XST+k/5FJmvf0/7vjbVFI6hKcZ0pibJvLhO/ILeu8Bw1GpVKxevrjZ50ZHaumWYSUv3YJS\nJL6dVYiQ+9lIk7deWwiNJeBznfDfbo8HtUrF+HtfpGrnB7Ifb9qc+Tx6j/SZ7QCvzriPGx94jwFd\njTxw+1VBrytpaH7WqdLtJmXJQmJ+3MY1a5bTceQ1SFXwJUWW+7lKj75DWL/qG/oMvKjZ567atIYf\nq6votLeQ940mel48inufnIVCKY2vo1Ao+OMNt/PRv1/j6hvvkMTGqZj02AvcfEVv+g68CJ/Ph0p9\n4q9/jVpJvDmC3I6x6DTSXC0JpEUI+tmKQgnR2YFs+Jpd4K4FwOPxMvb259hReID5rz4UUk/zcDF1\n9nzqdv9XFlvvfbSIy/on8NR9wYf33eipsjfz1vf56DH1fkz7d+NEwRCPh7TXZrC3porii8Nb+uf1\neqmtOYY5tp11e2kjuuR0540XHsXjdnPBsMt+9//rV33Dd19/wffffEH3PoMYOPZmfty1FaKiGTj8\ncsnPN2b8Xdw0sqfsgq43RHDvYy9y57jhpKV35sEpr6BUBYQ72qglM9VMQmzzH3QFZy4i5H62o7ME\nvHVjGii1PD7z3yxYtJo9P5Xw4IwP8J2uB6gEzPznx9xzyxWyTZCb98kybvzjoJDWVLiaz27Pfv0F\nIg/uw6vVYXc0ojNE4FerSf/v28Ts3tHS456UyrJSLCLcHhaKD+zjy0/epaKigvfeeIGi3duBQOOX\nOdP+xtgLs1m0YB7deg9g3pKtPPLc6wy86EryR13Piq8+leWMOr2Bi6+4js/+M1cWe014PB6W/nbs\n+XQAABLVSURBVO8/lBb/xJoVS5g3dxY6jYr0RBMDuiYKMW8HCA+9PaBQQUwO6G3k5eYQFfkFTqeL\nUcPzwj4RrDmmzZnP/jUtL5EJhXVbdhMbE0VGiO1kjzac/v5cW32MyOL9+FWBHw9HYwN6Q6D2VuV0\nYtm4murOwWfUN4e4Pw8fGo0Wk9lCZfkRfH4vC+a/ydoVX5HTvTcXDPsDtz8wBa3u98N4klPT0ekN\nFO3eQXoYX9tTMWb8RO4aN5zLx/5ZcltNqNVqUlIz2PzDSjRaHdm5ufTqYsMSHfxwIsGZjRD09oQ+\njutue5T08zPZtmU9E64ZKqv5V/71OddfNVS21rItaSbjR8Xh+tNn7Sr8PvAFkqpqqo5htzdijPol\nCVERZMJVsAhBbz0OeyM7Nq9l++YfUABKpYou2T3IK+jPnQ9OQ69v3vscdNEVrPjqU1kE3RRtpt+Q\nESxeOI9Lrhwnub0mbp74MB3Tz6dfnwKuvvxCCadGCNoCIejtDYWaPhdeQ59BI6D2R3BWgd8ji+lp\ncz5gw6LZstiCQDOZLUtCyxiu80bh8Z7+15jTbMVuS4ai3RyrOILX66Ws9BDndeyMAj/H8nq25ti/\nQ5SshU59bTU7tqxl+6a17Ny8lsOHisjp1pvcbn34y/3P0CWne8h7Dhx+OQ/edhU3T3xYghP/njHj\nJzL59qtlE3SlUkFslI6nHp6EyShK0dojQtDbKxpTYNa6vRTq9v2cNCcVb33wFZcOLSDRFiupnSa+\n+X4LOZ3TiI+LCWldsOVqu8dPJGfPTrRHSrDjRa3RovD5OHzJKI6FsR494kgxORtW4cjMC9uebYG+\n/AgOCTvd1R45zLadm9m+6Qd2bFnLsYoycvJ7k9u9N0MmTyejc26rbVjiEkhITmXH5rXkdOsdhlOf\nHqstkdzufVm2+BOGXDJaUltRERrSk6LpEC/9iGZB2yEEvb1jSAS9LSDq9hLwNEpiZtqcD1g8b4ok\ne5+M9xcs57pRobV6BSitNwT1PKfZwtbn38TzyO2Y9u/BnN+L/QOGhzXD3bJ1HV1nPU1G8UGMB/ZT\nboph37UTwra/HOgrysif+RgqeyOOuAQ2Pzgdn7b1lRXlR0vYeTyEvmPzWpIryzGkdyLrktGMGH0D\nqemdw3D63zNw+OWsXPqZLIIOAS99+uTbJBN0vU5NUmwEnVNi0GlFKVp7Rwj6uYBCFWgfG5EINbvB\nVQm+8IXh5y9cQa9unUJOTmsN8xYsY/YzfwlpjQsDVY7g3/KeCCPPqNRc/vBz9Og9CH8Ya5NVLhed\n334Fu9NJg8+LTq0m9cuPKRk2EnsYZqLLRfepD6CtqwaFAl11JVlvvMCOEELWtTVVHD6wj+ID+zh8\nsIjiA/sAPwf2/Uj28RD66HG3UXJoP4sXzGPE6Buk+2KAQRddyTuvzeD2B+T5cJqcmk5aRhdWffsl\n/YeOCNu+arUSS5SerDQz0UYx4vRcQQj6uYQ6CiwF4DgCtftC7gt/KqbNmc/7rz4Ulr2CYeHiNVw0\nqDsRhtDuASscoYcbd21bz9+mvBxWMQdQuhx4a6spP3IYl9NB2ZFiDEmpGI4Uh13Q62qrf9dEJBwY\ni38KJBAe7ybm02gxHj6IyunEqzvxtSkp/ukX4W4S74NFKIDktAxS0jJITk0nt3sfUtM7Y0s4sa+9\nKSaWWVPuD/vX8FsijJFk5/di/apv6dlfnqTSMTdNZM70B8Mi6AqFgmijls4pMSRaRBnauYYQ9HMR\nfQLobFBfBI2HwdPQ4q0+XfID6WkJ5HYJbuJUOGjJZDWAo42htXs9WLSbuIRkDBHhz9p3R5qoyshE\nv7cQF6BVqmg0xYQ94W7d91/z/Tdf4HE76d57EAX9hoRt74aUDjhj49BVV+LTaFE21LPPbGXpt18c\nF+8iig8GxDsxKfVn4c7M68mFI8eSkppOVLQ5KFuRUdHExFopPrCPlLSMsH0NJ2Pg8CtYufRT2QS9\nY6dsYq02Nqxe1qrXJ9KgJS0+kvQkk2jZeo4iBP1cRaGEqPPBkAT1e8FRCV57yNtMnT2fV6bL1/HK\n5/Pz4ecrmR9iRMCPipJmytV+y65t68nqGl6B/TV7/zYNs99Pw8olJGZ3Y9sTL4bdxsqln1NbU3X8\n75+GVdABNk9+lryXnqR46zqWHi3hvT3bSXbaSU7LYMilo0hJDXje4Wilmtm1gMJtGyQX9EEXXcGs\nKffx1ydektTOrxk7/i7mvjy9Ra+PXqsmITaCzudFi/Gm5zji1T/XUUdATF4gC76uCJyV4HM2vw74\nasUmYqKN9MqXJkHpZLy/cBnXXTkk5HW1HhOeEBuxF27bSF7P/iHbCha/SsXKEVfx+cEiHpopTTOe\na/58NwcPlOL3+xj7p7vDvr9Xp2fT5Bk8e+soRs1+nr9LOJEus2sBhVvXM3zkWMlsQCBsfcGwP/Dd\n158z4MKRktpqoktuD7RaHds2rqZrj35BrdGqVViidXRKicEcKcrQBKL1q6AJjQliu4G1INAfXqlp\ndokcI1J/y7xPljNudAvC7fbQw+ZSe+gQGMqiTTpPsv2jLel0HjyTrGEvEm3pKJkdbXIaFUdLJNsf\nIKtrAbu2BT8itzU0NZmRkzE3TeTDIEarqtVK4mIM9OoSR+/MeCHmgp8Rgi44EU1MIHEutgforaD4\nvbD/dKiMvz71BhEGLYP7dpXtaLV1jXy3bkeLxsEW14WWIFRTVYm9sYGE5NSQbYVCeVkpcRJ2ibM7\nlaA04lMYabRL9+NutSVSUVYq2f4QyAivqT5GfW21pHYgMG50y/rvcTpCv4ZqKXk9+6NQKnnr5WmU\nH/3991KjUmKJ1tOrs43+OQlYY4IrwRScOwhBF5wcnQUsvSG2O2jNoAjczlQcq2XULVOY9X8L2FlU\nQWWVtA1rfs28BcsYN2pIyOucRFDnCq0GVw7vHKQfzBJn9mF0fonJ+zVxsVINfw00ZaksPyLZ/k20\nZy+9pvoYbpeThfPfZNpDE6g7nvugUiqIjdJT0CWOAbmJ2MxCyAUnRwi64PTorYFpbrF5oI1hx+5D\nlFUGPCSFz059g0O2o7S0mUx5kN3hfk3hto1kdu0R8rpQkaOPu8Z/BC3Siq01PpGKk3iV4aYpMU4O\nmrLd5cJpb/w5ylFXVcnhQ0WYo3QUdLYxMC+ReLMoQxOcHiHoguDQJ0BcfwZfdj0P3XUjBXmdeHby\nzaSl2GQxf/hIJfsOlDKoT+gtPo/aQ68/L9y+gcxc6RK8mmgvg1mstiQqyqS9QwfIzO1B4faNktsB\nyCvox8H9e6g+ViGLPVtiCjfcej8ZXXK5YcLd3PjHyxiUlyTqyQVBI7LcBaFhSGLSY7OYcMckjP4y\ncNeBzyW52ZZMVoNAuVppXeidstqThy4HctyhA2TlFbBrqzweOvwSdr/iGunHnGpUCq4acw13TriB\njPOsktsTtD+Ehy5oEUZLR7D2CSTQGZJALe29XkubyVR7THj9oa2RS8xdTgdOhz3o5ipnMjGxVupq\nq/F6pJ3sp1SqyMjMZc/OLZLaaUKOsLteqybJYqR3dgIX5CYKMRe0GCHogtahNQfK3Sy9ILIDqEO/\nr26Owr3F2B1OuueG3lAk2Olqv0auhLiK8iNYJZxQJjdyhd3lTIzrlJVHfV0NpcUHwr53pEFDx0QT\n/XPi6ZVpw2rSh92G4NxCCLogPKgjITo74LWbsgJ17WFqP9nSZjIAxbWh3z/KFm4/Woo1/uwPtzdh\ntSVQUSZ9pntmbgGF2+ULu4fTS1coFJiMWrJSzfTPSSAv3UJUhBieIggPQtAF4UWlg6iOgcx4c/4J\nJW8tpaXNZBx+Iw3u0N/isnnoZSVYbUmS25GL9n6P3hrUKgXmKB3dMiwM6JpI5/NiMOhECpMgvIh3\nlEAaFKrA3bohCRwV0Hgo0F42xEEw67fuIcZk5PwOoQtfmSP0cHtp8QGMkVGYYmJDXhsq7SUhrgm5\nBN1ssaHRaikrLcaWmNL8glaSkpaBRqtj/56ddOyUHdJao0GD2ajlPFuUqB8XSI4QdIH06K2Bh6cR\n7GXgKAkIu8/d7NJ3//tti7LbIfTpaiBfuRoEQu7nZ4ZehnemYo1P4mDRbllsNZWvySHoEPDSly1e\nEJSga9RKjHoNKXFGEi1GIoQnLpAJEXIXyIc6AqI6QFx/sPQE43mgiTrlXfst98/mqxUbGXv5gJBN\n+VBTWt98P/rfsmvrBrLyZBJ04aG3mKy8nuzaul4WWwADLhzJxjXLeGXGw6d8TqRBS6otit6ZNgbn\nJ5GRFC3EXCAr4t0maBu05sDD5wJnOTQcBk89eAOd556Y+S5zP1gCwJBrp7Bn2eyQtq92m/D7Q0/K\nK9y+gZFXjw95XUuoLC/FEtd+BF2u9q8Q8NCXfDpfFlsAr854hEM/7eXQT3ux2hK45k+TANBplETo\nNZxniyQhNkKMLxW0KeLdJ2hblFowJAce7jqwl4KjnO5dOxFpNFDfYGdo7xaUq7Xg/ryxoZ6KoyWk\npsszDrbdZbnHJ0k+ca2Jjp2yKTm0H6fDjk4v/d100+ukj4jk/C45RBu1WKP1JFkjiY0S084EZwZC\n0AVnDpqowCMqg9HjuvBiHTTWVTHpz5eBP7TBIsX1LShXk/H+3GFvxOv1YIw0yWJPDkzRZhz2Rlwu\nJ1qt9CLXdI+e3/MCyW3d8/AMOnXJxGYxc8etNxAbpUOtEjeWgjMLIeiCMw+FCvRWbp30dCAk76oB\nR2ngT48d/KfvRmb3R9LobEG4fesGMuW6Pz9agjW+/ZSsNdF0j56U0kFyW0336FIJukqpwGjQEBOp\nI8Vq5JJnn0CjFiIuOHMRgi44s1FqQR8XePjcgdI3+xFwVwey5k+SKV/Wgu5wEPDQr77prtaeOCja\nW0JcE01T1+QQ9MzcHiyY/39h3VOlUGKMUBNj1JFsjcAcpRciLjhrEIIuOHtQagJz2nUW8HuP37kf\nBVcleBvBGxgSc6QF5Wogc4Z7O2v72oQlLpHKcnky3TPzCih85I5W76PTqjBoVERH6UiyRBBj1KHV\nqMJwQoFAXoSgC85OFCrQxgQe+AOeu7MCd/0RvD4FCgX4QxjKsm7V1ySnpqPRyNOGs92G3GWaiw6g\n10cQl5DMxh+W06NP8J0ElUow6rTodSpsZgNWk56oCC0qZXhaFQsEbYUQdEE7QAGaaNBEo4nMIN/U\nSLXdT/kxO1UNTpwuL06395Sr13//DW+89DRKPNRWVWIyWyQ/cUVZKZm50veLlxurLZGi3TtlsVV9\nrAKNVsucKX/l7kdfpKDfkFM+V69VodeqiYnUkRBrwBShFa1XBe0O8Y4WtDuMEREYIyDZYgSg3u7m\nWJ2DsioH1Q0OnC4fHm8ga97ldPDJ+69TdqQYgC8/eZdr/jxJ8jO22zt0WxJrv1sqi63/ffIuRbt3\nAPDxu/8kr2f/nyMsOo0SnVaNUafGGq3HEm0gyqBBKbxwQTtGCLqg3RNp0BBp0JBqiwICAl9Za6e8\n2klto4bBF43k6OGD6AwRDL5klCxnar+CLl+3uKEXj+L7bz7H3tjA0EuvJM4cidGgwWLSExOpw6hT\ni7twwTmFEHTBOUeTwKfFgx/onTmZCwf2wWRJQW2MxuP10ejw4g/lEj5ExB16y1EqFUTo1GRndeGd\n+Z9TU1HM8GGDidBrxD244JxGCLrgnEZBQOCvuvxiICDwDXY3dqebqgYXNfVu6h0uPB4fDpcPny+0\nBjcn48ftG7HEJciWgCcnOp2BaLOFPbu20Ckrv9X7qVUKdBo1arUCg1aNOVKPOUqD0aA93ic9Cchq\ntR2BoD0gBF0g+BVNAh9p0BAX80u3Oafbi93lpabeQVWdizq7G6fbg9vjx+XxBj4JBEHh9o1Mn3wb\ndTVVvPjMX/nbM/+Q5gtpI158ehKlxT/x5KTreXrWe3TKDk7UlQrQadVo1Eo0aiVRBi3RRi2mCA16\nrRq9ViXuvwWCZhCCLhAEgU6jQqdREWPUkhYf+Defz4/D5aXR6aa63k1to4tGhxu3x4fb68Pt9uLx\nnaj0pYd+oq62Gr/fT3VVBfW11USaYiQ7d211JWu//xpHfRUjRl1PVLRZMlt1NVXU1gS+NrvDQUnx\n/t8JulajRKNSoVIpUB0PnZuMAfE26NTotWq0opGLQNAiFH4pLwoFgnMQt8eHw+3B5fZhd3mxO9w0\nOj3H/+7i708/SNHundx239OcH4aw9Knw+/28/Nxkvv7iQwCGjxzLxIeeRXGKcbXhYPfOjcydNYWM\nzGzuf2wGEfqAUEfo1UTq1eg06oCoq1VCuAWCMCMEXSCQGZ/fT6PdiUKhwuXx0uj0Ynd5cDg9OFxe\nXJ6Ad+8jMJPG5/fh9QciAn6fH4/PH3TC3pJP5/PGS0+hUMBf7p/ChX8YE/Q5VSoFaqUSlUqBUqFA\nqVSgVIBSqUStUqJVKdBqAsKs06qJ0KrQaFT4fR4ijQYh2AKBzPx/XeDpidZlQ8AAAAAASUVORK5C\nYII=\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "phylum_color = ['lightsteelblue', \n",
    "                'moccasin',\n",
    "                'darkseagreen',\n",
    "                'khaki',\n",
    "                'mediumturquoise',\n",
    "                'lightblue',\n",
    "                'thistle',\n",
    "                'tan',\n",
    "                'mistyrose',\n",
    "                'honeydew',\n",
    "                'peachpuff',\n",
    "                'peru',\n",
    "                'saddlebrown',\n",
    "                'orchid',\n",
    "                'm',\n",
    "                'darkslategray',\n",
    "                'azure',\n",
    "                'lightcyan'\n",
    "                ]\n",
    "\n",
    "img = deepbiome.deepbiome_draw_phylogenetic_tree(log, network_info_with_covariates, path_info_with_covariates, num_classes=1,\n",
    "                                                 file_name='%%inline', img_w=500, branch_vertical_margin=20, \n",
    "                                                 arc_start=0, arc_span=360, \n",
    "                                                 node_name_on=False, name_fsize=10, \n",
    "                                                 tree_weight_on=True, tree_weight=trained_weight_list, \n",
    "                                                 tree_weight_classes = ['Genus', 'Family', 'Order', 'Class', 'Phylum', 'Disease'],\n",
    "                                                 weight_opacity=0.8, weight_max_radios=10, \n",
    "                                                 phylum_background_color_on=True, phylum_color=phylum_color, phylum_color_legend=True,\n",
    "                                                 verbose=False)\n",
    "img"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
