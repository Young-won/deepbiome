{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Example : k fold cross-validation with an input file \n",
    "\n",
    "DeepBiome package takes microbiome abundance data as input and uses the phylogenetic taxonomy to guide the decision of the optimal number of layers and neurons in the deep learning architecture.\n",
    "\n",
    "To use DeepBiome, you can experiment (1) __k times repetition__ or (2) __k fold cross-validation__.\n",
    "For each experiment, we asuume that the dataset is given by\n",
    "- __A list of k input files for k times repetition.__\n",
    "- __One input file for k fold cross-validation.__\n",
    "\n",
    "This notebook contains an example of (2) __k fold cross-validation__ for the deep neural netowrk using deepbiome."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Load library\n",
    "\n",
    "First, we load the DeepBiome package. The DeepBiome package is built on the tensorflow and keras library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import logging\n",
    "import json\n",
    "from pkg_resources import resource_filename\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from deepbiome import deepbiome"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Prepare the dataset\n",
    "\n",
    "In this example, we assume that we have __one input file for k times repetition.__\n",
    "\n",
    "DeepBiome needs 3 data files as follows:\n",
    "1. **the tree information**\n",
    "1. **the input file**\n",
    "1. **y**\n",
    "\n",
    "In addition, we can set **the training index for each fold**. If we set the index file, DeepBiome builds the training set for each fold based on each fold index in the index file. If not, DeepBiome will generate the index file locally.\n",
    "        \n",
    "Each data should have the csv format as follow:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example of the tree information\n",
    "\n",
    "First we need a file about the phylogenetic tree information. This tree information file should have the format below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Genus</th>\n",
       "      <th>Family</th>\n",
       "      <th>Order</th>\n",
       "      <th>Class</th>\n",
       "      <th>Phylum</th>\n",
       "      <th>Domain</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Streptococcus</td>\n",
       "      <td>Streptococcaceae</td>\n",
       "      <td>Lactobacillales</td>\n",
       "      <td>Bacilli</td>\n",
       "      <td>Firmicutes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Tropheryma</td>\n",
       "      <td>Cellulomonadaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Veillonella</td>\n",
       "      <td>Veillonellaceae</td>\n",
       "      <td>Selenomonadales</td>\n",
       "      <td>Negativicutes</td>\n",
       "      <td>Firmicutes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Actinomyces</td>\n",
       "      <td>Actinomycetaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Flavobacterium</td>\n",
       "      <td>Flavobacteriaceae</td>\n",
       "      <td>Flavobacteriales</td>\n",
       "      <td>Flavobacteria</td>\n",
       "      <td>Bacteroidetes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Prevotella</td>\n",
       "      <td>Prevotellaceae</td>\n",
       "      <td>Bacteroidales</td>\n",
       "      <td>Bacteroidia</td>\n",
       "      <td>Bacteroidetes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Porphyromonas</td>\n",
       "      <td>Porphyromonadaceae</td>\n",
       "      <td>Bacteroidales</td>\n",
       "      <td>Bacteroidia</td>\n",
       "      <td>Bacteroidetes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Parvimonas</td>\n",
       "      <td>Clostridiales_Incertae_Sedis_XI</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Fusobacterium</td>\n",
       "      <td>Fusobacteriaceae</td>\n",
       "      <td>Fusobacteriales</td>\n",
       "      <td>Fusobacteria</td>\n",
       "      <td>Fusobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Propionibacterium</td>\n",
       "      <td>Propionibacteriaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Gemella</td>\n",
       "      <td>Bacillales_Incertae_Sedis_XI</td>\n",
       "      <td>Bacillales</td>\n",
       "      <td>Bacilli</td>\n",
       "      <td>Firmicutes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Rothia</td>\n",
       "      <td>Micrococcaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Granulicatella</td>\n",
       "      <td>Carnobacteriaceae</td>\n",
       "      <td>Lactobacillales</td>\n",
       "      <td>Bacilli</td>\n",
       "      <td>Firmicutes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Neisseria</td>\n",
       "      <td>Neisseriaceae</td>\n",
       "      <td>Neisseriales</td>\n",
       "      <td>Betaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Lactobacillus</td>\n",
       "      <td>Lactobacillaceae</td>\n",
       "      <td>Lactobacillales</td>\n",
       "      <td>Bacilli</td>\n",
       "      <td>Firmicutes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Megasphaera</td>\n",
       "      <td>Veillonellaceae</td>\n",
       "      <td>Selenomonadales</td>\n",
       "      <td>Negativicutes</td>\n",
       "      <td>Firmicutes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Catonella</td>\n",
       "      <td>Lachnospiraceae</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Atopobium</td>\n",
       "      <td>Coriobacteriaceae</td>\n",
       "      <td>Coriobacteriales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Campylobacter</td>\n",
       "      <td>Campylobacteraceae</td>\n",
       "      <td>Campylobacterales</td>\n",
       "      <td>Epsilonproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Capnocytophaga</td>\n",
       "      <td>Flavobacteriaceae</td>\n",
       "      <td>Flavobacteriales</td>\n",
       "      <td>Flavobacteria</td>\n",
       "      <td>Bacteroidetes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Solobacterium</td>\n",
       "      <td>Erysipelotrichaceae</td>\n",
       "      <td>Erysipelotrichales</td>\n",
       "      <td>Erysipelotrichia</td>\n",
       "      <td>Firmicutes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Moryella</td>\n",
       "      <td>Lachnospiraceae</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>TM7_genera_incertae_sedis</td>\n",
       "      <td>TM7_genera_incertae_sedis</td>\n",
       "      <td>TM7_genera_incertae_sedis</td>\n",
       "      <td>TM7_genera_incertae_sedis</td>\n",
       "      <td>TM7</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Staphylococcus</td>\n",
       "      <td>Staphylococcaceae</td>\n",
       "      <td>Bacillales</td>\n",
       "      <td>Bacilli</td>\n",
       "      <td>Firmicutes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Filifactor</td>\n",
       "      <td>Peptostreptococcaceae</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Oribacterium</td>\n",
       "      <td>Lachnospiraceae</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Burkholderia</td>\n",
       "      <td>Burkholderiaceae</td>\n",
       "      <td>Burkholderiales</td>\n",
       "      <td>Betaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Sneathia</td>\n",
       "      <td>Leptotrichiaceae</td>\n",
       "      <td>Fusobacteriales</td>\n",
       "      <td>Fusobacteria</td>\n",
       "      <td>Fusobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Treponema</td>\n",
       "      <td>Spirochaetaceae</td>\n",
       "      <td>Spirochaetales</td>\n",
       "      <td>Spirochaetes</td>\n",
       "      <td>Spirochaetes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Moraxella</td>\n",
       "      <td>Moraxellaceae</td>\n",
       "      <td>Pseudomonadales</td>\n",
       "      <td>Gammaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>Haemophilus</td>\n",
       "      <td>Pasteurellaceae</td>\n",
       "      <td>Pasteurellales</td>\n",
       "      <td>Gammaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>Selenomonas</td>\n",
       "      <td>Veillonellaceae</td>\n",
       "      <td>Selenomonadales</td>\n",
       "      <td>Negativicutes</td>\n",
       "      <td>Firmicutes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>Corynebacterium</td>\n",
       "      <td>Corynebacteriaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>Rhizobium</td>\n",
       "      <td>Rhizobiaceae</td>\n",
       "      <td>Rhizobiales</td>\n",
       "      <td>Alphaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>Bradyrhizobium</td>\n",
       "      <td>Bradyrhizobiaceae</td>\n",
       "      <td>Rhizobiales</td>\n",
       "      <td>Alphaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>Methylobacterium</td>\n",
       "      <td>Methylobacteriaceae</td>\n",
       "      <td>Rhizobiales</td>\n",
       "      <td>Alphaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>OD1_genera_incertae_sedis</td>\n",
       "      <td>OD1_genera_incertae_sedis</td>\n",
       "      <td>OD1_genera_incertae_sedis</td>\n",
       "      <td>OD1_genera_incertae_sedis</td>\n",
       "      <td>OD1</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>Finegoldia</td>\n",
       "      <td>Clostridiales_Incertae_Sedis_XI</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>Microbacterium</td>\n",
       "      <td>Microbacteriaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>Sphingomonas</td>\n",
       "      <td>Sphingomonadaceae</td>\n",
       "      <td>Sphingomonadales</td>\n",
       "      <td>Alphaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>Chryseobacterium</td>\n",
       "      <td>Flavobacteriaceae</td>\n",
       "      <td>Flavobacteriales</td>\n",
       "      <td>Flavobacteria</td>\n",
       "      <td>Bacteroidetes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>Bacteroides</td>\n",
       "      <td>Bacteroidaceae</td>\n",
       "      <td>Bacteroidales</td>\n",
       "      <td>Bacteroidia</td>\n",
       "      <td>Bacteroidetes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>Bdellovibrio</td>\n",
       "      <td>Bdellovibrionaceae</td>\n",
       "      <td>Bdellovibrionales</td>\n",
       "      <td>Deltaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>Streptophyta</td>\n",
       "      <td>Chloroplast</td>\n",
       "      <td>Chloroplast</td>\n",
       "      <td>Chloroplast</td>\n",
       "      <td>Cyanobacteria_Chloroplast</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>Lachnospiracea_incertae_sedis</td>\n",
       "      <td>Lachnospiraceae</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>Paracoccus</td>\n",
       "      <td>Rhodobacteraceae</td>\n",
       "      <td>Rhodobacterales</td>\n",
       "      <td>Alphaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>Fastidiosipila</td>\n",
       "      <td>Ruminococcaceae</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>Pseudonocardia</td>\n",
       "      <td>Pseudonocardiaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            Genus                           Family  \\\n",
       "0                   Streptococcus                 Streptococcaceae   \n",
       "1                      Tropheryma                Cellulomonadaceae   \n",
       "2                     Veillonella                  Veillonellaceae   \n",
       "3                     Actinomyces                 Actinomycetaceae   \n",
       "4                  Flavobacterium                Flavobacteriaceae   \n",
       "5                      Prevotella                   Prevotellaceae   \n",
       "6                   Porphyromonas               Porphyromonadaceae   \n",
       "7                      Parvimonas  Clostridiales_Incertae_Sedis_XI   \n",
       "8                   Fusobacterium                 Fusobacteriaceae   \n",
       "9               Propionibacterium             Propionibacteriaceae   \n",
       "10                        Gemella     Bacillales_Incertae_Sedis_XI   \n",
       "11                         Rothia                   Micrococcaceae   \n",
       "12                 Granulicatella                Carnobacteriaceae   \n",
       "13                      Neisseria                    Neisseriaceae   \n",
       "14                  Lactobacillus                 Lactobacillaceae   \n",
       "15                    Megasphaera                  Veillonellaceae   \n",
       "16                      Catonella                  Lachnospiraceae   \n",
       "17                      Atopobium                Coriobacteriaceae   \n",
       "18                  Campylobacter               Campylobacteraceae   \n",
       "19                 Capnocytophaga                Flavobacteriaceae   \n",
       "20                  Solobacterium              Erysipelotrichaceae   \n",
       "21                       Moryella                  Lachnospiraceae   \n",
       "22      TM7_genera_incertae_sedis        TM7_genera_incertae_sedis   \n",
       "23                 Staphylococcus                Staphylococcaceae   \n",
       "24                     Filifactor            Peptostreptococcaceae   \n",
       "25                   Oribacterium                  Lachnospiraceae   \n",
       "26                   Burkholderia                 Burkholderiaceae   \n",
       "27                       Sneathia                 Leptotrichiaceae   \n",
       "28                      Treponema                  Spirochaetaceae   \n",
       "29                      Moraxella                    Moraxellaceae   \n",
       "30                    Haemophilus                  Pasteurellaceae   \n",
       "31                    Selenomonas                  Veillonellaceae   \n",
       "32                Corynebacterium               Corynebacteriaceae   \n",
       "33                      Rhizobium                     Rhizobiaceae   \n",
       "34                 Bradyrhizobium                Bradyrhizobiaceae   \n",
       "35               Methylobacterium              Methylobacteriaceae   \n",
       "36      OD1_genera_incertae_sedis        OD1_genera_incertae_sedis   \n",
       "37                     Finegoldia  Clostridiales_Incertae_Sedis_XI   \n",
       "38                 Microbacterium                Microbacteriaceae   \n",
       "39                   Sphingomonas                Sphingomonadaceae   \n",
       "40               Chryseobacterium                Flavobacteriaceae   \n",
       "41                    Bacteroides                   Bacteroidaceae   \n",
       "42                   Bdellovibrio               Bdellovibrionaceae   \n",
       "43                   Streptophyta                      Chloroplast   \n",
       "44  Lachnospiracea_incertae_sedis                  Lachnospiraceae   \n",
       "45                     Paracoccus                 Rhodobacteraceae   \n",
       "46                 Fastidiosipila                  Ruminococcaceae   \n",
       "47                 Pseudonocardia               Pseudonocardiaceae   \n",
       "\n",
       "                        Order                      Class  \\\n",
       "0             Lactobacillales                    Bacilli   \n",
       "1             Actinomycetales             Actinobacteria   \n",
       "2             Selenomonadales              Negativicutes   \n",
       "3             Actinomycetales             Actinobacteria   \n",
       "4            Flavobacteriales              Flavobacteria   \n",
       "5               Bacteroidales                Bacteroidia   \n",
       "6               Bacteroidales                Bacteroidia   \n",
       "7               Clostridiales                 Clostridia   \n",
       "8             Fusobacteriales               Fusobacteria   \n",
       "9             Actinomycetales             Actinobacteria   \n",
       "10                 Bacillales                    Bacilli   \n",
       "11            Actinomycetales             Actinobacteria   \n",
       "12            Lactobacillales                    Bacilli   \n",
       "13               Neisseriales         Betaproteobacteria   \n",
       "14            Lactobacillales                    Bacilli   \n",
       "15            Selenomonadales              Negativicutes   \n",
       "16              Clostridiales                 Clostridia   \n",
       "17           Coriobacteriales             Actinobacteria   \n",
       "18          Campylobacterales      Epsilonproteobacteria   \n",
       "19           Flavobacteriales              Flavobacteria   \n",
       "20         Erysipelotrichales           Erysipelotrichia   \n",
       "21              Clostridiales                 Clostridia   \n",
       "22  TM7_genera_incertae_sedis  TM7_genera_incertae_sedis   \n",
       "23                 Bacillales                    Bacilli   \n",
       "24              Clostridiales                 Clostridia   \n",
       "25              Clostridiales                 Clostridia   \n",
       "26            Burkholderiales         Betaproteobacteria   \n",
       "27            Fusobacteriales               Fusobacteria   \n",
       "28             Spirochaetales               Spirochaetes   \n",
       "29            Pseudomonadales        Gammaproteobacteria   \n",
       "30             Pasteurellales        Gammaproteobacteria   \n",
       "31            Selenomonadales              Negativicutes   \n",
       "32            Actinomycetales             Actinobacteria   \n",
       "33                Rhizobiales        Alphaproteobacteria   \n",
       "34                Rhizobiales        Alphaproteobacteria   \n",
       "35                Rhizobiales        Alphaproteobacteria   \n",
       "36  OD1_genera_incertae_sedis  OD1_genera_incertae_sedis   \n",
       "37              Clostridiales                 Clostridia   \n",
       "38            Actinomycetales             Actinobacteria   \n",
       "39           Sphingomonadales        Alphaproteobacteria   \n",
       "40           Flavobacteriales              Flavobacteria   \n",
       "41              Bacteroidales                Bacteroidia   \n",
       "42          Bdellovibrionales        Deltaproteobacteria   \n",
       "43                Chloroplast                Chloroplast   \n",
       "44              Clostridiales                 Clostridia   \n",
       "45            Rhodobacterales        Alphaproteobacteria   \n",
       "46              Clostridiales                 Clostridia   \n",
       "47            Actinomycetales             Actinobacteria   \n",
       "\n",
       "                       Phylum    Domain  \n",
       "0                  Firmicutes  Bacteria  \n",
       "1              Actinobacteria  Bacteria  \n",
       "2                  Firmicutes  Bacteria  \n",
       "3              Actinobacteria  Bacteria  \n",
       "4               Bacteroidetes  Bacteria  \n",
       "5               Bacteroidetes  Bacteria  \n",
       "6               Bacteroidetes  Bacteria  \n",
       "7                  Firmicutes  Bacteria  \n",
       "8                Fusobacteria  Bacteria  \n",
       "9              Actinobacteria  Bacteria  \n",
       "10                 Firmicutes  Bacteria  \n",
       "11             Actinobacteria  Bacteria  \n",
       "12                 Firmicutes  Bacteria  \n",
       "13             Proteobacteria  Bacteria  \n",
       "14                 Firmicutes  Bacteria  \n",
       "15                 Firmicutes  Bacteria  \n",
       "16                 Firmicutes  Bacteria  \n",
       "17             Actinobacteria  Bacteria  \n",
       "18             Proteobacteria  Bacteria  \n",
       "19              Bacteroidetes  Bacteria  \n",
       "20                 Firmicutes  Bacteria  \n",
       "21                 Firmicutes  Bacteria  \n",
       "22                        TM7  Bacteria  \n",
       "23                 Firmicutes  Bacteria  \n",
       "24                 Firmicutes  Bacteria  \n",
       "25                 Firmicutes  Bacteria  \n",
       "26             Proteobacteria  Bacteria  \n",
       "27               Fusobacteria  Bacteria  \n",
       "28               Spirochaetes  Bacteria  \n",
       "29             Proteobacteria  Bacteria  \n",
       "30             Proteobacteria  Bacteria  \n",
       "31                 Firmicutes  Bacteria  \n",
       "32             Actinobacteria  Bacteria  \n",
       "33             Proteobacteria  Bacteria  \n",
       "34             Proteobacteria  Bacteria  \n",
       "35             Proteobacteria  Bacteria  \n",
       "36                        OD1  Bacteria  \n",
       "37                 Firmicutes  Bacteria  \n",
       "38             Actinobacteria  Bacteria  \n",
       "39             Proteobacteria  Bacteria  \n",
       "40              Bacteroidetes  Bacteria  \n",
       "41              Bacteroidetes  Bacteria  \n",
       "42             Proteobacteria  Bacteria  \n",
       "43  Cyanobacteria_Chloroplast  Bacteria  \n",
       "44                 Firmicutes  Bacteria  \n",
       "45             Proteobacteria  Bacteria  \n",
       "46                 Firmicutes  Bacteria  \n",
       "47             Actinobacteria  Bacteria  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tree_information = pd.read_csv(resource_filename('deepbiome', 'tests/data/genus48_dic.csv'))\n",
    "tree_information"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This file has `.csv` format below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Genus,Family,Order,Class,Phylum,Domain\n",
      "Streptococcus,Streptococcaceae,Lactobacillales,Bacilli,Firmicutes,Bacteria\n",
      "Tropheryma,Cellulomonadaceae,Actinomycetales,Actinobacteria,Actinobacteria,Bacteria\n",
      "Veillonella,Veillonellaceae,Selenomonadales,Negativicutes,Firmicutes,Bacteria\n",
      "Actinomyces,Actinomycetaceae,Actinomycetales,Actinobacteria,Actinobacteria,Bacteria\n",
      "Flavobacterium,Flavobacteriaceae,Flavobacteriales,Flavobacteria,Bacteroidetes,Bacteria\n",
      "Prevotella,Prevotellaceae,Bacteroidales,Bacteroidia,Bacteroidetes,Bacteria\n",
      "Porphyromonas,Porphyromonadaceae,Bacteroidales,Bacteroidia,Bacteroidetes,Bacteria\n",
      "Parvimonas,Clostridiales_Incertae_Sedis_XI,Clostridiales,Clostridia,Firmicutes,Bacteria\n",
      "Fusobacterium,Fusobacteriaceae,Fusobacteriales,Fusobacteria,Fusobacteria,Bacteria\n",
      "Propionibacterium,Propionibacteriaceae,Actinomycetales,Actinobacteria,Actinobacteria,Bacteria\n",
      "Gemella,Bacillales_Incertae_Sedis_XI,Bacillales,Bacilli,Firmicutes,Bacteria\n",
      "Rothia,Micrococcaceae,Actinomycetales,Actinobacteria,Actinobacteria,Bacteria\n",
      "Granulicatella,Carnobacteriaceae,Lactobacillales,Bacilli,Firmicutes,Bacteria\n",
      "Neisseria,Neisseriaceae,Neisseriales,Betaproteobacteria,Proteobacteria,Bacteria\n",
      "Lactobacillus,Lactobacillaceae,Lactobacillales,Bacilli,Firmicutes,Bacteria\n",
      "Megasphaera,Veillonellaceae,Selenomonadales,Negativicutes,Firmicutes,Bacteria\n",
      "Catonella,Lachnospiraceae,Clostridiales,Clostridia,Firmicutes,Bacteria\n",
      "Atopobium,Coriobacteriaceae,Coriobacteriales,Actinobacteria,Actinobacteria,Bacteria\n",
      "Campylobacter,Campylobacteraceae,Campylobacterales,Epsilonproteobacteria,Proteobacteria,Bacteria\n",
      "Capnocytophaga,Flavobacteriaceae,Flavobacteriales,Flavobacteria,Bacteroidetes,Bacteria\n",
      "Solobacterium,Erysipelotrichaceae,Erysipelotrichales,Erysipelotrichia,Firmicutes,Bacteria\n",
      "Moryella,Lachnospiraceae,Clostridiales,Clostridia,Firmicutes,Bacteria\n",
      "TM7_genera_incertae_sedis,TM7_genera_incertae_sedis,TM7_genera_incertae_sedis,TM7_genera_incertae_sedis,TM7,Bacteria\n",
      "Staphylococcus,Staphylococcaceae,Bacillales,Bacilli,Firmicutes,Bacteria\n",
      "Filifactor,Peptostreptococcaceae,Clostridiales,Clostridia,Firmicutes,Bacteria\n",
      "Oribacterium,Lachnospiraceae,Clostridiales,Clostridia,Firmicutes,Bacteria\n",
      "Burkholderia,Burkholderiaceae,Burkholderiales,Betaproteobacteria,Proteobacteria,Bacteria\n",
      "Sneathia,Leptotrichiaceae,Fusobacteriales,Fusobacteria,Fusobacteria,Bacteria\n",
      "Treponema,Spirochaetaceae,Spirochaetales,Spirochaetes,Spirochaetes,Bacteria\n",
      "Moraxella,Moraxellaceae,Pseudomonadales,Gammaproteobacteria,Proteobacteria,Bacteria\n",
      "Haemophilus,Pasteurellaceae,Pasteurellales,Gammaproteobacteria,Proteobacteria,Bacteria\n",
      "Selenomonas,Veillonellaceae,Selenomonadales,Negativicutes,Firmicutes,Bacteria\n",
      "Corynebacterium,Corynebacteriaceae,Actinomycetales,Actinobacteria,Actinobacteria,Bacteria\n",
      "Rhizobium,Rhizobiaceae,Rhizobiales,Alphaproteobacteria,Proteobacteria,Bacteria\n",
      "Bradyrhizobium,Bradyrhizobiaceae,Rhizobiales,Alphaproteobacteria,Proteobacteria,Bacteria\n",
      "Methylobacterium,Methylobacteriaceae,Rhizobiales,Alphaproteobacteria,Proteobacteria,Bacteria\n",
      "OD1_genera_incertae_sedis,OD1_genera_incertae_sedis,OD1_genera_incertae_sedis,OD1_genera_incertae_sedis,OD1,Bacteria\n",
      "Finegoldia,Clostridiales_Incertae_Sedis_XI,Clostridiales,Clostridia,Firmicutes,Bacteria\n",
      "Microbacterium,Microbacteriaceae,Actinomycetales,Actinobacteria,Actinobacteria,Bacteria\n",
      "Sphingomonas,Sphingomonadaceae,Sphingomonadales,Alphaproteobacteria,Proteobacteria,Bacteria\n",
      "Chryseobacterium,Flavobacteriaceae,Flavobacteriales,Flavobacteria,Bacteroidetes,Bacteria\n",
      "Bacteroides,Bacteroidaceae,Bacteroidales,Bacteroidia,Bacteroidetes,Bacteria\n",
      "Bdellovibrio,Bdellovibrionaceae,Bdellovibrionales,Deltaproteobacteria,Proteobacteria,Bacteria\n",
      "Streptophyta,Chloroplast,Chloroplast,Chloroplast,Cyanobacteria_Chloroplast,Bacteria\n",
      "Lachnospiracea_incertae_sedis,Lachnospiraceae,Clostridiales,Clostridia,Firmicutes,Bacteria\n",
      "Paracoccus,Rhodobacteraceae,Rhodobacterales,Alphaproteobacteria,Proteobacteria,Bacteria\n",
      "Fastidiosipila,Ruminococcaceae,Clostridiales,Clostridia,Firmicutes,Bacteria\n",
      "Pseudonocardia,Pseudonocardiaceae,Actinomycetales,Actinobacteria,Actinobacteria,Bacteria\n",
      "\n"
     ]
    }
   ],
   "source": [
    "with open(resource_filename('deepbiome', 'tests/data/genus48_dic.csv')) as f:\n",
    "    print(f.read())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example of the input file\n",
    "\n",
    "Below is an example of the input file.\n",
    "This example has 1000 samples' microbiome abandunce. __The order of the microbiome should be same as the order of the microbiome in the Genus level in the tree information above.__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Streptococcus</th>\n",
       "      <th>Tropheryma</th>\n",
       "      <th>Veillonella</th>\n",
       "      <th>Actinomyces</th>\n",
       "      <th>Flavobacterium</th>\n",
       "      <th>Prevotella</th>\n",
       "      <th>Porphyromonas</th>\n",
       "      <th>Parvimonas</th>\n",
       "      <th>Fusobacterium</th>\n",
       "      <th>Propionibacterium</th>\n",
       "      <th>...</th>\n",
       "      <th>Microbacterium</th>\n",
       "      <th>Sphingomonas</th>\n",
       "      <th>Chryseobacterium</th>\n",
       "      <th>Bacteroides</th>\n",
       "      <th>Bdellovibrio</th>\n",
       "      <th>Streptophyta</th>\n",
       "      <th>Lachnospiracea_incertae_sedis</th>\n",
       "      <th>Paracoccus</th>\n",
       "      <th>Fastidiosipila</th>\n",
       "      <th>Pseudonocardia</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>841</td>\n",
       "      <td>0</td>\n",
       "      <td>813</td>\n",
       "      <td>505</td>\n",
       "      <td>5</td>\n",
       "      <td>3224</td>\n",
       "      <td>0</td>\n",
       "      <td>362</td>\n",
       "      <td>11</td>\n",
       "      <td>65</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>87</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2133</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1445</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>573</td>\n",
       "      <td>0</td>\n",
       "      <td>1278</td>\n",
       "      <td>82</td>\n",
       "      <td>85</td>\n",
       "      <td>69</td>\n",
       "      <td>154</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3638</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1259</td>\n",
       "      <td>0</td>\n",
       "      <td>805</td>\n",
       "      <td>650</td>\n",
       "      <td>0</td>\n",
       "      <td>1088</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>74</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>39</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>982</td>\n",
       "      <td>0</td>\n",
       "      <td>327</td>\n",
       "      <td>594</td>\n",
       "      <td>0</td>\n",
       "      <td>960</td>\n",
       "      <td>81</td>\n",
       "      <td>19</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>157</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1162</td>\n",
       "      <td>0</td>\n",
       "      <td>130</td>\n",
       "      <td>969</td>\n",
       "      <td>163</td>\n",
       "      <td>1515</td>\n",
       "      <td>167</td>\n",
       "      <td>4</td>\n",
       "      <td>162</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3945</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 48 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Streptococcus  Tropheryma  Veillonella  Actinomyces  Flavobacterium  \\\n",
       "0            841           0          813          505               5   \n",
       "1           1445           0            1          573               0   \n",
       "2           1259           0          805          650               0   \n",
       "3            982           0          327          594               0   \n",
       "4           1162           0          130          969             163   \n",
       "\n",
       "   Prevotella  Porphyromonas  Parvimonas  Fusobacterium  Propionibacterium  \\\n",
       "0        3224              0         362             11                 65   \n",
       "1        1278             82          85             69                154   \n",
       "2        1088              0           0             74                  0   \n",
       "3         960             81          19              9                  0   \n",
       "4        1515            167           4            162                  3   \n",
       "\n",
       "   ...  Microbacterium  Sphingomonas  Chryseobacterium  Bacteroides  \\\n",
       "0  ...               0            87                 0            0   \n",
       "1  ...               0             1                 2            0   \n",
       "2  ...               0             2                 8            1   \n",
       "3  ...             157             1                 0            4   \n",
       "4  ...               0             9                 0            0   \n",
       "\n",
       "   Bdellovibrio  Streptophyta  Lachnospiracea_incertae_sedis  Paracoccus  \\\n",
       "0             0             0                              0           0   \n",
       "1             0             0                              0           0   \n",
       "2            39             0                              0           0   \n",
       "3            60             0                              0           0   \n",
       "4             0             0                             60           0   \n",
       "\n",
       "   Fastidiosipila  Pseudonocardia  \n",
       "0               0            2133  \n",
       "1               0            3638  \n",
       "2               0            3445  \n",
       "3               0            3507  \n",
       "4               0            3945  \n",
       "\n",
       "[5 rows x 48 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = pd.read_csv(resource_filename('deepbiome', 'tests/data/onefile_x.csv'))\n",
    "x.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Streptococcus</th>\n",
       "      <th>Tropheryma</th>\n",
       "      <th>Veillonella</th>\n",
       "      <th>Actinomyces</th>\n",
       "      <th>Flavobacterium</th>\n",
       "      <th>Prevotella</th>\n",
       "      <th>Porphyromonas</th>\n",
       "      <th>Parvimonas</th>\n",
       "      <th>Fusobacterium</th>\n",
       "      <th>Propionibacterium</th>\n",
       "      <th>...</th>\n",
       "      <th>Microbacterium</th>\n",
       "      <th>Sphingomonas</th>\n",
       "      <th>Chryseobacterium</th>\n",
       "      <th>Bacteroides</th>\n",
       "      <th>Bdellovibrio</th>\n",
       "      <th>Streptophyta</th>\n",
       "      <th>Lachnospiracea_incertae_sedis</th>\n",
       "      <th>Paracoccus</th>\n",
       "      <th>Fastidiosipila</th>\n",
       "      <th>Pseudonocardia</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>1401</td>\n",
       "      <td>4</td>\n",
       "      <td>30</td>\n",
       "      <td>526</td>\n",
       "      <td>0</td>\n",
       "      <td>923</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>127</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4470</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>2655</td>\n",
       "      <td>6</td>\n",
       "      <td>106</td>\n",
       "      <td>74</td>\n",
       "      <td>0</td>\n",
       "      <td>952</td>\n",
       "      <td>76</td>\n",
       "      <td>13</td>\n",
       "      <td>158</td>\n",
       "      <td>125</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2826</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>335</td>\n",
       "      <td>0</td>\n",
       "      <td>71</td>\n",
       "      <td>259</td>\n",
       "      <td>67</td>\n",
       "      <td>718</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>167</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>246</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6527</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>649</td>\n",
       "      <td>69</td>\n",
       "      <td>966</td>\n",
       "      <td>1227</td>\n",
       "      <td>0</td>\n",
       "      <td>508</td>\n",
       "      <td>2</td>\n",
       "      <td>30</td>\n",
       "      <td>550</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4402</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>1258</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1119</td>\n",
       "      <td>0</td>\n",
       "      <td>2348</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>137</td>\n",
       "      <td>176</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2585</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 48 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Streptococcus  Tropheryma  Veillonella  Actinomyces  Flavobacterium  \\\n",
       "995           1401           4           30          526               0   \n",
       "996           2655           6          106           74               0   \n",
       "997            335           0           71          259              67   \n",
       "998            649          69          966         1227               0   \n",
       "999           1258           0            0         1119               0   \n",
       "\n",
       "     Prevotella  Porphyromonas  Parvimonas  Fusobacterium  Propionibacterium  \\\n",
       "995         923             25           0            127                  0   \n",
       "996         952             76          13            158                125   \n",
       "997         718              1           4              4                167   \n",
       "998         508              2          30            550                  0   \n",
       "999        2348             25           0            137                176   \n",
       "\n",
       "     ...  Microbacterium  Sphingomonas  Chryseobacterium  Bacteroides  \\\n",
       "995  ...               0             0                 7            0   \n",
       "996  ...               0             2                 0            0   \n",
       "997  ...               0           246                 0            0   \n",
       "998  ...               0             0                 0            0   \n",
       "999  ...               0             2                 0            0   \n",
       "\n",
       "     Bdellovibrio  Streptophyta  Lachnospiracea_incertae_sedis  Paracoccus  \\\n",
       "995             0             0                              0           0   \n",
       "996             0             0                              0           0   \n",
       "997             6             0                              0           0   \n",
       "998             0             6                              0           0   \n",
       "999             0             0                              0           0   \n",
       "\n",
       "     Fastidiosipila  Pseudonocardia  \n",
       "995               0            4470  \n",
       "996               0            2826  \n",
       "997               0            6527  \n",
       "998               0            4402  \n",
       "999               0            2585  \n",
       "\n",
       "[5 rows x 48 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This file has `.csv` format below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\"Streptococcus\",\"Tropheryma\",\"Veillonella\",\"Actinomyces\",\"Flavobacterium\",\"Prevotella\",\"Porphyromonas\",\"Parvimonas\",\"Fusobacterium\",\"Propionibacterium\",\"Gemella\",\"Rothia\",\"Granulicatella\",\"Neisseria\",\"Lactobacillus\",\"Megasphaera\",\"Catonella\",\"Atopobium\",\"Campylobacter\",\"Capnocytophaga\",\"Solobacterium\",\"Moryella\",\"TM7_genera_incertae_sedis\",\"Staphylococcus\",\"Filifactor\",\"Oribacterium\",\"Burkholderia\",\"Sneathia\",\"Treponema\",\"Moraxella\",\"Haemophilus\",\"Selenomonas\",\"Corynebacterium\",\"Rhizobium\",\"Bradyrhizobium\",\"Methylobacterium\",\"OD1_genera_incertae_sedis\",\"Finegoldia\",\"Microbacterium\",\"Sphingomonas\",\"Chryseobacterium\",\"Bacteroides\",\"Bdellovibrio\",\"Streptophyta\",\"Lachnospiracea_incertae_sedis\",\"Paracoccus\",\"Fastidiosipila\",\"Pseudonocardia\"\n",
      "841,0,813,505,5,3224,0,362,11,65,156,1,55,0,1,20,382,1,333,24,80,43,309,2,3,4,0,1,32,0,2,4,382,0,0,96,23,0,0,87,0,0,0,0,0,0,0,2133\n",
      "1445,0,1,573,0,1278,82,85,69,154,436,3,0,61,440,0,394,83,33,123,0,49,414,0,0,37,0,0,42,0,0,384,27,0,0,0,146,0,0,1,2,0,0,0,0,0,0,3638\n",
      "1259,0,805,650,0,1088,0,0,74,0,155,228,430,765,0,0,11,102,68,90,77,83,322,10,0,7,0,122,76,0,1,25,0,0,0,44,13,0,0,2,8,1,39,0,0,0,0,3445\n",
      "982,0,327,594,0,960,81,19,9,0,45,457,1049,0,3,450,19,170,388,147,0,0,41,63,0,1,0,0,121,0,0,1,0,0,0,0,344,0,157,1,0,4,60,0,0,0,0,3507\n",
      "1162,0,130,969,163,1515,167,4,162,3,12,0,48,73,93,259,52,0,201,85,14,14,434,2,0,0,0,0,187,0,0,188,45,0,0,0,4,0,0,9,0,0,0,0,60,0,0,3945\n",
      "1956,37,41,661,47,1555,374,7,142,19,61,226,0,30,52,0,6,480,142,148,9,575,12,0,0,0,0,3,168,0,56,50,0,0,0,98,989,0,0,12,0,0,0,0,0,0,0,2044\n",
      "1037,14,83,1595,132,305,103,174,1195,0,410,224,1,320,26,0,476,0,7,37,46,61,20,0,0,0,0,0,226,0,239,8,1,0,0,0,0,188,0,20,4,0,4,0,0,0,0,3044\n",
      "641,0,172,179,0,1312,84,9,81,376,128,223,160,0,532,155,89,355,1,282,0,0,25,0,0,43,0,9,311,0,0,0,0,0,0,0,845,0,0,8,0,0,0,0,0,0,0,3980\n",
      "852,146,504,99,2,376,116,152,67,0,120,3,23,2,34,0,127,75,240,60,42,0,9,0,15,0,62,0,13,0,197,187,396,0,0,20,51,0,0,3,0,0,0,0,0,0,0,6007\n",
      "901,3,187,1214,0,1508,675,0,107,49,318,2,393,5,3,65,4,285,79,11,0,0,4,3,0,0,1,0,729,0,0,173,0,0,0,0,254,0,0,0,0,0,1,0,29,0,0,2997\n",
      "677,60,635,45,268,2461,466,9,338,0,97,63,45,82,128,1,139,4,323,6,0,0,58,0,0,0,0,0,36,0,646,29,0,0,0,0,120,0,0,41,0,0,0,0,0,0,0,3223\n",
      "413,0,355,1258,0,583,48,107,250,5,102,204,287,4,0,18,2,145,454,11,0,79,104,25,164,1,0,100,55,0,1,33,206,0,0,10,81,0,0,0,0,0,0,0,0,0,0,4895\n",
      "351,99,17,268,0,912,4,96,847,472,67,8,440,16,0,0,247,0,165,83,0,0,0,0,4,0,0,0,275,0,21,1968,3,0,0,0,173,0,0,1,37,0,0,0,0,0,53,3373\n",
      "1829,0,32,77,0,1971,8,6,319,1,8,140,302,165,177,0,166,27,857,19,0,0,155,0,0,579,127,112,54,0,1,19,0,0,0,0,143,0,0,8,51,0,0,0,0,0,0,2647\n",
      "1089,0,4,30,0,847,51,42,48,0,211,1,24,0,81,1,687,494,758,27,0,0,123,7,0,0,0,1,310,0,6,4,780,0,0,4,1,0,0,0,0,0,2,0,0,0,0,4367\n",
      "1761,0,60,517,4,576,63,0,169,0,12,437,0,7,130,0,2,7,47,346,115,0,539,0,2,0,0,0,515,0,0,68,5,0,0,0,315,0,0,16,0,0,0,0,0,0,0,4287\n",
      "938,0,601,794,0,1836,52,6,10,0,1104,8,219,168,174,3,0,12,425,885,0,15,268,34,0,141,2,0,8,0,0,5,8,0,0,0,2,0,0,0,0,0,0,0,0,0,0,2282\n",
      "882,8,110,975,0,1042,11,3,211,0,15,22,56,0,47,140,5,4,194,109,0,403,129,6,0,10,0,3,19,0,1,591,2,2,0,6,0,0,0,1,0,0,0,0,0,0,0,4993\n",
      "1395,0,76,60,0,916,2,466,353,13,1,159,369,0,92,2,14,528,103,133,100,4,17,0,0,0,0,0,7,0,0,6,48,0,0,44,578,0,0,0,0,0,0,0,0,0,0,4514\n",
      "1150,3,168,1265,0,1328,14,0,432,14,140,0,1,179,77,0,92,55,33,123,0,8,844,0,0,82,34,113,14,0,0,99,26,0,0,0,14,14,0,24,49,0,0,0,0,0,0,3605\n",
      "352,0,20,48,0,1035,269,1,1,53,122,1,0,0,107,0,12,414,253,483,335,3,117,0,0,1,21,37,7,0,8,13,15,0,0,186,0,0,0,18,0,57,0,0,0,0,0,6011\n",
      "1120,0,124,1198,0,2161,795,1,483,0,0,5,8,16,78,7,22,3,62,203,0,0,148,0,0,68,0,2,22,0,0,23,148,0,0,0,127,0,0,2,0,0,0,0,0,0,0,3174\n",
      "406,5,6,1191,0,2582,239,155,81,0,2,183,4,7,483,0,190,0,10,8,0,0,447,4,226,0,59,4,146,0,22,225,0,0,0,0,34,0,0,1,0,0,0,0,0,0,0,3280\n",
      "439,133,130,108,0,1511,50,180,33,0,110,86,539,0,88,145,7,11,745,487,0,40,176,43,8,103,0,6,193,0,4,306,6,0,0,0,2,1,0,0,0,0,0,0,0,0,0,4310\n",
      "513,0,130,583,2,781,3,34,201,84,3,1358,59,3,343,117,148,278,0,335,0,51,80,47,0,5,63,775,35,0,16,562,0,0,0,0,62,0,0,5,0,0,18,1,0,2,0,3303\n",
      "229,0,126,179,0,1581,61,26,1018,25,27,73,289,25,9,2,4,150,32,130,0,84,78,102,0,29,1,11,143,0,1,15,0,0,0,471,179,0,0,398,0,0,0,0,0,0,0,4502\n",
      "1378,3,327,351,3,1129,103,35,140,245,23,1,251,0,13,1128,0,0,81,16,0,0,193,31,0,0,0,255,273,0,1,15,8,0,0,0,29,0,6,0,0,0,1,0,0,0,2,3959\n",
      "701,0,402,918,0,1518,116,234,881,252,144,14,4,0,18,374,22,8,0,363,1,0,37,0,0,0,0,0,187,0,0,7,5,0,0,0,0,0,0,2,120,0,0,1,0,0,0,3671\n",
      "1116,1,630,232,0,1291,318,93,423,0,166,122,432,0,13,0,6,54,5,3,0,11,2019,0,0,51,0,0,88,0,0,91,1,0,0,34,0,0,0,0,0,0,0,1,0,0,0,2799\n",
      "1356,813,40,210,0,1337,628,0,134,0,145,203,247,1,28,5,25,0,1,373,58,0,93,2,0,80,260,0,18,0,0,196,0,2,0,0,0,0,4,0,4,0,0,0,0,0,0,3737\n",
      "470,0,167,18,41,882,318,820,189,38,521,65,58,132,25,257,43,6,973,46,132,114,17,48,0,0,51,0,4,0,0,131,76,0,0,0,106,0,0,0,2,0,0,0,0,0,0,4250\n",
      "487,16,412,945,1,535,1,0,122,0,530,392,1,182,167,1,1,44,374,61,73,9,33,0,8,0,0,9,484,0,52,66,4,0,0,0,571,0,0,1,0,0,21,0,0,0,0,4397\n",
      "994,0,1190,98,0,917,16,9,357,0,101,15,0,0,48,2,8,0,25,40,0,286,27,0,0,75,243,0,1610,0,0,387,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3477\n",
      "383,6,1452,690,4,775,2,58,287,0,833,0,83,1,5,0,50,400,28,120,0,16,6,0,3,274,0,0,313,0,0,0,0,0,0,4,27,0,0,0,0,0,72,0,0,0,0,4108\n",
      "179,101,59,491,0,1902,59,0,150,0,11,75,131,461,112,0,0,462,0,6,0,225,78,50,96,21,1,1,35,0,0,0,79,162,172,0,250,0,0,0,19,0,0,0,0,0,0,4612\n",
      "822,0,168,475,0,1640,600,6,247,13,138,2,51,2,64,169,24,55,360,126,0,841,94,158,0,0,0,27,448,0,0,190,0,0,0,0,5,0,0,0,22,0,0,0,0,0,0,3253\n",
      "525,50,142,278,1,1005,148,26,905,5,256,9,1536,37,6,116,48,13,116,14,23,0,0,0,0,1,1,1,8,0,0,48,7,0,0,0,289,0,0,0,0,0,0,9,0,0,0,4377\n",
      "660,14,132,252,64,597,0,206,13,23,12,233,160,0,212,21,281,160,45,102,4,133,44,0,0,88,53,0,204,0,20,127,13,0,0,0,1,0,0,0,0,0,0,0,0,0,0,6126\n",
      "480,22,72,170,222,1481,6,2,585,211,448,503,11,48,14,527,832,0,9,192,341,272,2,0,0,50,2,0,52,0,0,86,192,0,0,0,14,0,0,0,0,0,0,1,0,0,0,3153\n",
      "741,23,189,143,3,2487,35,201,312,0,3,233,0,1,150,12,495,0,1,102,285,0,507,26,7,62,0,1,41,0,0,0,588,0,0,29,18,0,0,0,0,0,0,0,0,0,0,3305\n",
      "623,168,18,1993,0,1829,157,0,146,0,177,1,86,8,1232,0,6,0,5,14,3,0,59,0,5,0,122,8,25,0,2,202,265,0,0,0,201,0,0,0,12,0,0,0,0,0,0,2633\n",
      "835,0,79,117,17,1140,559,59,350,262,242,178,6,178,0,0,59,133,27,62,39,20,5,0,69,3,0,13,449,0,0,0,0,0,0,0,178,0,13,0,0,0,0,0,0,0,0,4908\n",
      "2196,0,614,328,0,1809,467,70,470,3,131,0,2,1,1,4,3,172,417,14,14,0,231,0,0,1,4,47,258,0,0,73,133,0,0,0,0,0,3,5,0,0,0,0,0,0,0,2529\n",
      "618,0,73,740,0,1253,21,115,508,8,124,15,221,0,88,14,33,304,733,10,258,177,305,0,0,46,0,0,342,0,13,512,0,0,0,0,117,0,0,0,0,0,0,0,0,0,0,3352\n",
      "835,7,94,769,1,1235,65,97,629,0,115,436,42,0,265,31,70,15,396,99,0,611,66,26,0,0,32,1,86,0,0,395,935,0,0,0,18,0,0,140,0,0,0,0,0,0,0,2489\n",
      "587,24,12,1374,0,2272,96,109,789,26,238,1,1,46,1,2,10,6,120,80,19,0,13,10,0,5,0,8,175,0,0,83,0,0,0,0,17,0,3,0,0,0,0,0,0,0,0,3873\n",
      "750,0,261,235,5,592,30,0,704,579,0,12,61,2,64,576,0,100,0,44,26,0,343,0,0,13,12,4,32,0,0,451,16,0,0,440,186,0,0,22,12,7,1,0,0,21,0,4399\n",
      "940,1,12,2219,2,447,203,35,451,10,76,22,183,5,78,16,0,0,194,394,68,0,14,0,0,305,7,0,567,0,1,183,410,0,0,1,27,0,0,0,0,0,0,0,0,0,0,3129\n",
      "516,2,300,127,0,831,494,18,798,0,0,589,342,53,86,922,140,5,118,207,0,2,37,31,5,77,144,0,113,0,169,34,195,0,0,0,5,0,0,60,37,216,0,0,0,0,0,3327\n",
      "449,8,130,731,8,1533,220,0,147,3,253,248,6,20,77,50,9,0,6,255,0,0,138,0,0,0,10,390,43,0,0,56,3,0,0,0,278,0,0,0,0,0,141,1,0,0,0,4787\n",
      "429,0,0,460,0,937,899,222,58,0,38,62,3,6,657,0,130,20,81,552,41,4,184,72,38,3,12,0,489,0,14,317,307,0,0,0,101,0,0,0,0,0,0,0,0,0,0,3864\n",
      "1453,368,215,377,2,1464,1,22,346,0,473,114,16,0,1,24,47,0,458,349,208,0,79,117,6,199,0,28,542,0,11,46,3,0,0,0,290,0,0,1,0,0,0,0,0,0,0,2740\n",
      "946,200,7,506,183,366,5,124,152,571,302,47,70,5,6,55,5,42,272,470,13,367,3,161,31,0,0,2,599,21,0,3,0,0,0,0,263,0,0,104,0,0,0,7,0,0,0,4092\n",
      "2039,1,288,1033,302,562,313,1,50,0,4,3,2,3,41,209,151,0,637,1031,43,5,0,0,0,1,6,101,318,0,1,20,0,0,0,0,13,0,0,7,0,0,0,0,0,0,0,2815\n",
      "707,81,332,103,436,1272,0,87,1262,0,102,69,12,22,2,2,436,507,425,177,0,0,425,0,0,0,0,0,90,2,207,272,487,0,0,477,4,0,0,0,0,0,1,0,0,0,0,2001\n",
      "534,0,94,1573,0,1752,75,0,830,7,35,0,3,5,135,16,502,65,121,4,0,0,17,1,0,314,0,262,16,0,2,274,47,0,0,162,5,4,0,3,0,185,0,0,0,0,0,2957\n",
      "1160,9,122,189,14,1479,305,158,291,9,39,4,301,0,376,0,85,0,532,32,6,621,990,0,71,61,1,4,24,0,0,160,104,0,0,0,33,0,0,58,0,0,0,27,0,7,0,2728\n",
      "564,2,31,423,0,2131,604,1,224,2,4,69,0,0,371,0,62,573,3,0,0,0,52,0,0,0,0,42,210,0,1,258,27,0,0,0,0,0,0,312,10,0,0,0,0,15,0,4009\n",
      "779,0,11,47,0,1710,568,2,188,0,255,4,2,88,75,95,786,421,698,72,7,0,31,0,21,137,0,10,354,8,0,379,103,0,0,0,126,0,0,0,0,0,0,0,0,0,0,3023\n",
      "1015,353,145,58,127,1030,47,0,39,0,410,64,22,104,212,1,260,51,86,30,8,146,78,2,0,22,22,0,19,0,43,982,382,0,0,10,0,0,26,0,154,0,0,61,0,0,0,3991\n",
      "1123,0,188,483,0,649,72,19,386,43,4,35,3,150,10,66,46,4,36,0,169,445,0,0,57,2,9,132,1286,0,0,38,12,0,0,16,22,0,0,15,0,0,0,0,0,0,0,4480\n",
      "902,0,336,744,0,1350,10,0,109,397,0,968,53,0,0,1,18,0,560,0,12,0,256,92,237,8,272,4,81,78,34,11,78,0,0,0,13,0,0,0,22,5,0,0,0,0,0,3349\n",
      "1586,0,11,473,0,2151,138,373,6,0,13,482,175,16,1,222,8,13,32,362,0,2,29,0,29,86,0,0,12,0,84,582,24,0,0,0,201,0,0,0,0,3,29,0,0,0,0,2857\n",
      "965,0,142,930,0,510,332,282,9,0,109,1,51,2,120,0,0,542,439,0,0,0,148,247,0,0,0,304,146,0,123,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,4501\n",
      "922,0,900,203,0,1362,21,384,26,0,523,16,42,10,42,3,29,3,9,204,0,0,13,2,57,65,0,6,108,0,140,33,43,0,0,0,70,0,0,0,0,0,0,0,0,0,0,4764\n",
      "826,0,61,84,6,1248,112,7,365,1071,193,45,0,0,1698,0,2,15,0,692,5,88,0,17,40,18,19,0,433,0,0,1,28,0,0,0,36,0,0,43,0,0,0,0,0,0,0,2847\n",
      "1138,0,504,573,3,1529,346,72,166,0,190,0,131,38,18,0,261,142,10,17,149,0,726,0,20,12,4,0,32,0,0,58,0,0,0,2,37,0,0,0,0,0,0,0,0,0,0,3822\n",
      "1610,0,17,35,0,721,597,2,588,24,32,6,187,15,31,0,15,3,531,190,34,75,10,0,0,6,0,0,250,0,0,177,44,0,0,0,78,0,0,0,0,0,25,0,0,0,0,4697\n",
      "1351,0,202,492,34,1607,639,28,197,0,55,0,155,0,174,0,10,0,158,494,47,70,32,227,0,0,0,0,445,0,0,120,1,0,0,0,42,0,0,12,0,0,0,0,0,0,0,3408\n",
      "1255,0,181,78,0,855,33,0,394,0,300,2,18,54,163,4,146,1,171,173,0,3,183,1093,0,274,288,0,336,0,0,201,13,0,0,12,24,1,0,0,0,0,0,0,0,0,0,3744\n",
      "1430,253,2,485,0,54,99,0,122,21,40,0,12,0,0,0,5,116,469,17,969,0,31,173,0,41,39,0,661,0,288,0,934,0,0,43,46,0,0,20,0,0,0,0,0,0,0,3630\n",
      "266,0,60,414,0,668,88,55,71,0,88,38,3,72,0,4,499,101,78,7,8,558,0,40,0,44,154,109,241,0,292,494,23,0,0,0,850,0,0,0,0,0,0,0,0,0,0,4675\n",
      "974,402,252,441,0,1557,40,0,188,1,231,0,2,57,1,0,655,462,468,143,239,0,60,0,0,0,0,0,56,0,0,35,10,4,0,0,254,0,0,0,0,0,0,0,0,0,173,3295\n",
      "710,503,53,94,0,1490,2,5,269,1,24,0,12,0,97,108,285,152,329,2,59,8,99,40,0,0,0,0,91,11,183,374,2,0,20,0,0,0,0,0,461,0,0,0,0,0,0,4516\n",
      "2075,309,141,83,19,1424,184,27,97,85,180,0,10,70,34,4,266,0,488,145,0,17,78,1,0,0,53,243,177,0,0,12,130,0,0,0,76,0,0,3,4,0,0,0,0,0,0,3565\n",
      "1319,3,1019,4,0,1102,1136,18,436,0,85,139,129,0,132,6,2,1,0,1,0,244,73,1,0,9,0,0,4,0,0,0,67,0,0,0,0,0,94,0,0,0,0,0,0,0,0,3976\n",
      "262,0,46,421,0,1027,501,62,377,1114,5,18,0,15,56,0,447,313,0,734,69,0,14,16,0,2,2,79,222,0,0,60,11,0,0,241,12,0,5,0,0,0,0,0,0,6,0,3863\n",
      "964,0,132,214,32,1532,130,11,1138,0,20,0,0,0,166,0,359,25,110,11,0,221,111,0,0,0,15,0,11,3,1,98,154,0,0,0,6,0,0,1,0,0,70,0,0,0,0,4465\n",
      "1813,0,110,549,20,428,1,177,131,111,0,0,5,0,3,0,0,0,318,4,7,0,52,0,0,305,0,23,441,5,124,8,829,0,0,5,10,0,4,25,0,0,0,0,0,0,0,4492\n",
      "942,3,424,292,0,658,191,37,147,0,419,50,1,542,13,0,11,6,1090,4,45,1,122,95,4,0,242,349,148,0,537,113,0,0,11,0,12,0,0,0,0,0,0,7,0,0,0,3484\n",
      "298,0,672,366,0,1176,3,8,304,253,18,432,31,0,2,50,299,6,3,32,1,618,16,258,0,0,0,0,182,0,0,1893,13,0,0,75,30,0,0,1,0,0,0,0,0,0,0,2960\n",
      "412,0,33,663,0,678,300,308,347,46,122,220,1,0,143,1,7,0,68,40,3,4,521,0,0,0,0,0,12,0,407,120,0,0,0,0,389,0,0,17,44,0,14,0,0,3,0,5077\n",
      "931,6,138,452,0,511,47,0,60,21,0,0,317,4,0,5,31,177,4,22,14,0,40,0,0,72,50,0,645,0,0,308,11,0,0,0,36,0,0,0,0,176,1,0,0,0,0,5921\n",
      "1836,605,11,72,0,2037,155,50,505,34,255,0,0,0,100,0,643,52,164,46,0,0,62,0,83,22,0,0,81,0,0,374,0,4,0,0,41,0,0,11,0,0,0,0,0,0,0,2757\n",
      "1304,2,37,119,76,1263,278,148,18,0,202,3,62,28,330,0,117,33,271,0,0,0,302,0,0,496,0,0,394,0,0,135,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,4381\n",
      "1283,90,350,408,0,764,453,4,66,0,30,0,0,60,0,12,5,30,59,225,0,25,45,0,2,0,105,5,361,0,300,259,244,0,0,115,17,0,0,7,0,0,0,0,0,0,0,4676\n",
      "675,72,166,372,27,1507,8,73,720,0,4,1,0,0,8,19,108,0,746,44,0,0,140,0,0,100,0,0,191,104,1,604,3,0,134,47,126,0,0,1008,34,0,0,0,50,0,0,2908\n",
      "2130,168,163,154,244,1733,192,19,3,57,58,1,97,0,104,34,2,8,1195,23,288,114,77,214,0,27,19,0,10,0,0,479,0,0,0,0,159,0,0,155,0,0,0,0,0,0,0,2073\n",
      "488,0,608,808,0,621,0,35,427,0,319,522,0,0,320,13,292,0,67,21,0,1,520,0,0,18,0,0,281,0,19,8,0,0,10,0,17,0,0,0,0,0,30,0,0,0,0,4555\n",
      "793,60,872,436,28,1153,0,28,18,1,0,4,145,50,216,0,4,1,93,318,44,30,22,81,0,0,0,467,72,4,0,3,0,0,0,53,99,0,0,0,413,0,0,0,0,0,0,4492\n",
      "556,0,343,804,4,1317,60,39,644,1,94,148,0,0,50,0,2,530,45,70,0,0,135,0,0,325,6,0,25,0,13,166,82,0,0,0,0,0,83,0,18,0,0,0,0,0,0,4440\n",
      "422,1433,55,365,0,513,45,9,251,10,17,31,3,400,387,0,3,88,338,4,0,95,7,8,192,180,3,6,118,0,0,369,30,0,0,240,886,0,69,11,0,0,0,0,0,5,0,3407\n",
      "818,0,411,362,332,654,174,47,137,0,223,515,15,312,614,0,255,117,58,275,0,99,159,0,0,0,83,506,380,0,1,371,48,0,0,83,108,0,0,0,7,1,0,0,0,0,0,2835\n",
      "875,0,323,50,13,1542,11,84,40,3,937,0,19,0,453,149,138,1,199,391,129,2,6,0,132,0,0,1251,75,0,0,10,0,0,0,0,2,0,15,39,0,0,1,0,0,0,0,3110\n",
      "1029,224,830,561,109,1795,17,182,40,11,1,8,2,47,88,0,516,0,4,18,5,62,0,713,0,148,0,15,204,0,3,489,1100,0,0,2,122,0,2,0,0,0,0,0,0,0,0,1653\n",
      "635,59,392,622,0,2423,4,11,294,148,60,27,164,15,38,0,7,56,572,127,5,0,922,107,5,2,0,0,232,0,172,220,62,0,0,14,0,0,0,0,0,0,0,0,0,0,0,2605\n",
      "673,13,268,526,0,2855,549,0,245,2,1,30,3,0,2,24,15,1,108,2,0,0,352,0,0,244,22,1,22,0,0,18,8,0,0,23,108,4,0,0,0,0,0,0,0,0,0,3881\n",
      "1239,7,60,1294,1,643,16,129,799,0,86,11,10,0,398,11,91,1,28,101,4,271,1,316,0,0,0,6,70,0,0,14,0,0,0,4,3,0,0,0,0,0,0,0,0,0,0,4386\n",
      "1470,0,334,281,0,975,2,225,12,0,22,631,23,0,127,7,12,334,2,36,0,0,644,27,12,5,1,0,683,0,1,276,26,0,0,5,75,0,0,1,0,0,18,0,0,0,0,3733\n",
      "641,1,135,649,0,1211,849,10,496,5,8,0,0,0,10,3,5,11,10,999,137,39,375,0,0,0,19,0,7,1,364,88,72,5,0,0,2,0,1,0,0,0,2,0,0,0,0,3845\n",
      "1163,0,786,861,0,785,86,599,291,0,239,205,3,0,47,0,37,2,4,141,158,0,240,40,0,0,7,9,39,0,0,57,20,1,0,0,364,0,0,0,0,0,0,0,0,0,0,3816\n",
      "568,2,523,348,0,1221,22,75,361,20,3,172,280,117,59,90,583,0,203,35,0,6,6,243,0,553,0,0,742,0,0,19,0,0,0,4,110,0,0,163,0,0,7,0,0,0,0,3465\n",
      "493,0,96,79,0,2091,238,72,258,0,422,146,0,36,8,104,1,5,42,49,0,1,138,0,40,0,0,2,419,0,0,56,506,0,0,0,4,0,0,7,0,0,5,0,0,0,0,4682\n",
      "395,0,46,1373,0,1394,55,0,48,34,48,0,24,124,123,336,40,23,17,1,638,0,63,7,0,0,0,0,5,0,0,109,243,0,0,0,3,0,0,2,0,0,0,0,0,0,0,4849\n",
      "694,0,6,414,0,1196,168,122,22,0,83,83,180,0,21,21,28,7,142,75,8,116,5,8,0,5,41,3,816,0,0,5,279,0,0,253,44,0,0,0,48,0,0,0,0,13,0,5094\n",
      "855,110,367,662,0,1401,4,107,29,2,20,7,101,0,108,29,358,2,53,18,7,9,639,2,0,1,4,0,202,0,0,53,8,0,0,0,244,0,0,14,0,0,0,0,0,0,0,4584\n",
      "600,0,1,148,0,1042,423,3,15,3,30,995,47,0,744,1,0,0,263,53,0,115,206,0,0,0,0,0,22,0,0,0,12,0,0,0,22,0,0,0,0,0,0,0,0,0,0,5255\n",
      "312,0,93,1111,0,1802,227,30,0,0,6,25,9,0,60,47,178,0,270,864,1,1,383,0,0,50,0,73,199,0,0,17,419,0,0,0,83,0,0,0,0,0,0,0,0,0,0,3740\n",
      "523,0,98,197,497,2342,15,0,662,0,52,222,10,12,23,37,203,0,423,444,1,0,61,39,0,18,109,2,148,0,1,32,15,0,0,0,14,0,0,177,0,0,0,0,0,0,0,3623\n",
      "297,0,175,232,0,484,0,170,35,0,358,31,2,0,2,0,6,0,104,22,168,150,42,1,0,57,0,2,409,0,1,511,551,0,0,0,16,0,53,6,0,0,13,0,0,0,0,6102\n",
      "936,26,35,73,1,958,4,0,1274,0,219,5,170,1,17,1,103,437,168,124,105,437,141,0,0,3,0,139,361,0,0,229,2,0,0,0,36,0,0,0,0,0,0,0,0,0,0,3995\n",
      "2003,0,304,329,0,852,121,9,209,5,95,135,693,0,216,0,33,6,2,1,0,2,416,38,0,111,3,0,122,0,0,43,134,0,0,0,1,0,0,0,0,0,0,17,0,0,0,4100\n",
      "724,190,18,877,0,1560,1002,725,429,75,0,0,49,17,103,0,25,0,15,52,0,0,638,0,0,24,0,0,267,15,0,146,2,0,0,1,0,33,0,0,0,0,0,0,0,0,0,3013\n",
      "646,4,332,674,0,861,381,6,897,4,145,149,38,36,108,3,1072,1,16,0,0,0,84,0,0,7,0,261,491,0,24,273,2,0,0,23,0,0,0,0,23,10,7,0,0,0,0,3422\n",
      "261,0,11,213,24,2144,35,337,178,45,423,0,127,13,72,0,0,0,2,11,196,0,13,0,0,0,0,111,261,0,0,597,284,0,0,47,10,0,0,0,1,0,0,0,2,0,0,4582\n",
      "1387,5,154,44,0,893,0,80,234,117,418,196,0,1,269,0,203,75,45,0,10,0,142,12,0,16,5,0,58,2,266,159,0,0,0,160,2,261,0,0,0,0,0,0,0,0,0,4786\n",
      "1154,31,13,1332,0,654,504,13,127,428,191,39,15,0,1,0,0,0,62,23,0,0,1,1,0,0,1,0,307,0,0,336,366,0,0,0,236,0,0,0,0,0,0,0,0,0,0,4165\n",
      "1315,5,309,698,0,759,31,8,110,26,69,245,622,232,74,0,22,0,17,7,4,0,6,6,0,2,1,272,443,0,0,93,61,0,0,0,22,0,0,0,0,0,1,0,0,0,0,4540\n",
      "1196,49,1,675,0,1126,412,5,24,15,674,157,36,0,1,1,0,0,161,79,958,3,203,0,0,0,8,0,3,2,14,242,0,0,0,0,157,0,0,1,0,184,0,0,0,0,0,3613\n",
      "267,0,228,584,58,634,450,0,240,0,137,2,202,0,48,58,20,61,75,151,2,0,424,0,0,10,35,85,16,0,805,0,846,0,0,3,4,0,0,0,0,0,49,0,0,0,0,4506\n",
      "1589,7,101,23,0,3168,54,1,20,43,124,129,14,16,107,27,0,0,2,20,0,0,25,0,0,8,0,31,2,0,0,111,131,0,0,0,0,0,0,0,0,0,0,1,0,0,0,4246\n",
      "2039,17,76,177,0,1770,15,851,320,0,366,52,314,0,39,0,208,0,9,71,17,166,26,1,0,0,8,75,133,0,0,4,0,0,0,0,121,0,0,0,0,3,8,0,0,0,0,3114\n",
      "1040,21,1246,901,412,789,809,0,76,0,0,158,7,79,55,0,31,0,157,2,118,51,191,0,11,2,0,15,188,0,678,46,1,0,0,0,162,0,0,24,2,1,0,0,0,0,0,2727\n",
      "341,70,337,88,2,322,415,2,494,4,97,107,148,0,217,781,0,27,161,421,35,0,722,5,4,0,0,31,3,0,19,281,1,0,0,0,1203,0,0,0,2,0,0,0,0,0,0,3660\n",
      "633,0,505,43,220,993,55,326,270,2,375,14,68,258,88,51,28,1,4,153,12,429,386,0,0,48,294,31,129,0,2,38,147,0,0,0,293,0,13,0,0,0,0,0,0,0,0,4091\n",
      "667,109,472,85,2,998,125,66,479,161,0,9,217,0,0,0,46,1,18,37,0,0,4,6,0,48,7,81,390,0,12,52,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,5878\n",
      "1427,0,210,376,49,1506,10,33,4,10,29,350,21,62,254,14,78,0,2,211,3,0,10,35,1188,18,0,12,34,0,25,330,261,0,0,1,4,0,0,244,7,0,0,0,0,0,0,3182\n",
      "704,0,771,390,0,2541,82,27,212,13,498,244,17,161,0,12,38,0,22,533,58,62,504,0,303,30,0,1,70,0,5,11,5,5,0,0,1,0,0,0,0,0,0,33,0,0,0,2647\n",
      "1450,3,99,303,4,385,267,83,182,55,44,0,329,11,80,1,294,130,22,3,0,6,205,0,0,1,18,8,88,25,0,6,29,0,260,0,17,0,0,420,0,0,0,0,0,0,0,5172\n",
      "431,1,118,195,227,1150,579,18,77,0,16,4,275,196,0,44,16,1011,788,13,0,0,20,8,0,4,0,1,130,0,0,32,303,327,0,0,70,0,93,3,0,0,64,0,0,0,0,3786\n",
      "150,0,757,821,1,535,48,0,108,0,132,7,288,431,1,1,56,68,122,300,14,0,276,0,0,34,6,0,438,0,2,2,0,0,0,0,63,0,0,0,0,0,0,0,0,0,0,5339\n",
      "648,0,239,947,0,935,4,0,189,12,217,0,33,0,3,0,808,6,99,612,0,29,12,0,0,11,5,94,10,0,0,23,0,0,0,0,32,0,0,2,0,0,1,0,0,0,0,5029\n",
      "2104,63,4,505,0,1186,420,95,320,54,69,157,258,307,332,162,1,20,0,111,42,16,85,78,24,0,1,1,277,0,0,39,281,0,0,0,1,0,0,0,2,0,1,0,0,0,0,2984\n",
      "684,0,895,53,159,500,199,0,264,2,342,0,12,5,1,0,329,202,446,78,66,0,419,0,0,0,0,1,726,0,91,256,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4149\n",
      "1041,96,176,378,0,2298,56,670,253,0,1,740,43,89,117,245,12,1,23,39,0,2,171,21,1,0,0,0,72,7,0,827,73,0,0,37,75,0,0,0,0,0,0,0,0,0,0,2436\n",
      "864,711,350,1101,0,2048,80,7,25,1,245,19,228,0,2,0,134,0,50,14,5,0,307,13,0,33,0,360,5,0,5,85,116,182,3,77,0,0,0,0,0,0,0,18,0,0,0,2912\n",
      "974,22,88,247,8,1109,115,13,131,0,17,130,6,40,686,0,95,296,32,9,0,284,81,338,0,0,328,0,109,0,25,78,1,0,0,0,65,0,0,1,0,0,0,0,0,0,0,4672\n",
      "37,0,344,263,0,647,73,0,12,16,424,0,47,0,113,1,402,112,14,0,225,2,47,0,1,107,88,0,1064,0,0,1066,1129,0,25,9,336,0,0,0,0,0,4,0,0,0,0,3392\n",
      "1616,9,104,493,98,676,83,0,101,126,4,0,81,0,101,0,428,0,248,181,70,16,3,7,0,0,52,0,91,3,8,219,495,0,0,0,0,0,0,0,96,0,2,0,13,0,0,4576\n",
      "765,349,441,285,78,2028,418,1,313,0,147,0,153,1,1,183,85,0,274,572,0,202,29,131,0,51,0,53,44,0,0,11,0,389,0,0,18,0,0,0,0,0,0,0,0,0,0,2978\n",
      "2120,0,23,538,0,786,130,1,535,0,67,103,19,2,0,196,14,0,212,119,14,0,242,0,43,1,12,126,191,0,0,38,161,0,0,0,0,0,0,138,0,0,0,0,0,0,0,4169\n",
      "161,206,261,787,5,1441,79,1059,14,92,22,17,17,4,98,96,14,24,131,278,15,0,0,40,3,0,7,0,227,49,52,85,25,0,0,0,4,0,0,0,0,0,0,23,0,11,0,4653\n",
      "369,0,1,240,0,2111,33,0,331,1,5,41,0,151,0,365,559,61,478,257,232,0,78,29,0,0,0,0,457,0,27,0,71,0,0,80,73,0,0,0,0,0,0,0,0,0,0,3950\n",
      "156,310,43,232,81,1570,164,10,212,0,29,6,494,25,5,255,0,89,10,1,21,9,225,0,0,0,0,6,149,0,0,1303,102,0,0,0,72,0,0,4,0,0,0,0,0,8,0,4409\n",
      "650,0,19,576,0,2185,18,89,265,0,50,14,16,61,48,0,76,0,24,751,0,77,81,192,0,0,0,0,362,0,0,167,395,0,0,2,0,0,0,12,0,0,0,1,0,5,0,3864\n",
      "2143,25,33,336,0,2094,40,1,109,0,485,26,54,0,126,251,58,30,115,89,14,0,11,479,0,60,1,75,287,0,0,385,24,0,0,0,487,0,0,0,0,0,64,0,0,0,0,2098\n",
      "773,1,562,611,7,2419,251,101,312,6,476,15,69,0,584,267,7,22,4,30,0,0,8,0,13,82,0,0,25,0,74,12,3,0,0,0,359,0,0,3,14,0,688,0,0,0,0,2202\n",
      "1238,0,8,54,0,1887,58,0,433,83,0,1435,3,104,286,0,7,14,154,4,49,1,50,2,441,0,0,102,58,0,0,98,3,0,0,0,11,0,0,24,0,0,0,407,0,0,557,2429\n",
      "870,1,147,97,27,724,130,15,274,27,199,36,2,0,933,128,24,0,202,40,10,0,23,16,0,0,0,23,905,0,81,0,518,0,0,483,66,0,0,9,0,0,0,0,0,0,0,3990\n",
      "660,225,201,1088,32,2427,395,0,92,0,16,244,61,401,5,1,91,145,122,18,0,16,50,1,0,373,0,2,326,0,34,529,167,0,0,9,2,0,0,0,0,0,3,0,0,0,0,2264\n",
      "268,0,101,450,0,595,59,0,9,2,651,177,31,10,37,72,3,153,26,2,7,68,84,0,8,255,0,0,352,0,0,322,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,6256\n",
      "1318,0,13,235,0,551,208,29,31,0,0,471,68,25,325,2,40,425,167,33,42,0,641,0,1,1,2,75,50,1,0,300,63,0,0,0,1,0,901,75,25,0,0,0,26,0,0,3855\n",
      "1801,0,35,42,1,772,1560,0,324,2,184,10,2,0,380,0,0,1,16,2,0,8,67,0,37,3,0,0,408,0,2,2,15,0,0,0,711,0,0,0,0,0,0,0,0,0,1,3614\n",
      "596,11,297,29,0,1242,102,45,11,572,18,153,0,0,87,20,107,39,7,0,0,0,166,0,0,356,0,0,89,0,162,4,163,0,0,0,184,0,0,5,0,0,19,0,0,0,0,5516\n",
      "409,0,171,481,1,2338,9,363,514,406,30,0,6,1,209,14,230,0,31,5,1,176,55,0,32,190,176,0,216,0,0,304,511,0,0,0,56,0,0,0,0,0,0,0,0,0,0,3065\n",
      "356,0,75,353,178,321,409,751,116,177,583,1,0,0,59,32,95,858,103,64,244,0,71,0,0,0,0,0,244,9,18,74,508,0,0,0,116,0,0,1,0,1,7,0,0,0,0,4176\n",
      "866,50,183,151,255,859,300,26,476,0,167,3,1,43,1,32,6,16,91,70,0,30,15,299,0,0,0,1,793,0,22,64,171,0,0,0,29,0,0,0,0,0,0,0,0,0,0,4980\n",
      "2345,285,104,216,259,1750,718,12,402,108,190,185,129,29,433,243,56,35,61,59,128,20,0,1,0,0,4,0,118,0,0,69,0,0,0,0,291,0,0,0,0,0,0,1,0,0,0,1749\n",
      "1044,0,81,413,0,254,1,474,35,50,154,151,39,60,194,0,107,0,6,1416,0,298,338,0,0,8,0,0,78,0,0,17,0,0,1,0,100,0,0,1,105,0,0,0,0,0,0,4575\n",
      "682,0,129,152,0,708,55,735,164,0,230,0,1735,3,379,11,42,12,0,0,0,15,9,1,41,88,127,2,28,0,8,11,1,0,0,1,1,0,0,3,0,0,0,0,17,0,0,4610\n",
      "1411,0,200,382,129,1289,0,1,7,2,544,135,6,0,35,0,1,47,2,360,0,62,139,9,0,0,570,247,3,0,0,10,14,0,0,0,4,0,0,0,0,0,0,0,0,0,17,4374\n",
      "435,0,510,381,0,2236,1,96,944,0,118,5,4,80,105,0,2,0,177,0,0,49,32,6,0,1,0,0,685,0,0,2,0,0,0,0,0,0,0,4,42,0,24,0,0,0,0,4061\n",
      "868,317,1,602,0,2364,20,0,308,50,366,2,0,1,45,6,9,0,320,465,0,0,95,104,0,0,0,1,120,0,9,104,66,0,0,0,0,0,0,64,0,0,0,0,0,0,0,3693\n",
      "1218,0,126,170,0,1544,94,25,224,19,100,31,0,277,397,4,618,4,102,12,0,0,103,29,0,85,0,78,112,0,1,0,41,0,0,0,0,0,0,0,0,14,0,0,0,0,0,4572\n",
      "1467,0,78,82,5,2945,320,12,805,230,160,53,0,28,41,27,41,44,9,51,2,197,12,0,0,5,0,0,127,0,0,16,116,0,0,0,1,0,2,0,0,0,207,0,0,0,0,2917\n",
      "797,0,1507,113,0,1109,180,0,211,0,121,98,414,0,11,4,13,7,11,73,6,5,385,43,0,0,38,0,0,0,7,114,12,0,0,0,16,0,0,3,0,0,229,0,0,0,0,4473\n",
      "230,230,446,687,72,899,18,18,35,580,493,4,518,0,36,0,0,42,400,737,3,0,0,2,0,0,38,1,46,375,0,81,102,0,0,1,81,0,0,0,38,0,0,0,0,0,0,3787\n",
      "177,52,0,555,0,1451,94,0,116,616,826,63,24,7,46,551,109,178,39,70,0,0,14,0,46,277,188,0,183,7,0,587,2,0,0,0,302,0,50,2,0,0,0,0,0,0,0,3368\n",
      "1749,0,112,202,0,2169,366,5,15,56,119,116,182,20,92,0,460,3,3,24,0,0,488,3,0,290,5,0,459,0,0,255,5,0,0,0,15,0,0,0,0,0,0,0,0,0,0,2787\n",
      "206,0,1130,223,4,1004,4,0,112,0,292,648,163,139,12,0,15,29,307,60,0,2,0,0,1,225,0,0,956,0,0,131,0,0,0,0,501,0,0,0,0,0,0,0,0,0,0,3836\n",
      "639,47,320,453,0,792,16,0,436,2,88,37,1,3,20,38,37,0,3,930,0,0,19,0,0,0,30,57,211,0,0,1213,275,0,0,12,1,0,0,19,0,0,0,0,0,0,0,4301\n",
      "189,35,87,1938,0,1890,98,67,65,0,584,73,3,240,1,58,8,3,249,15,156,5,4,6,0,48,0,0,26,0,0,295,12,0,133,5,33,0,0,0,0,0,0,0,0,0,0,3674\n",
      "571,0,1233,321,75,2339,14,87,227,0,185,274,0,15,2,6,297,0,54,3,28,0,107,0,0,20,0,0,259,0,0,19,29,0,0,7,26,0,0,11,0,0,0,0,0,0,0,3791\n",
      "1707,0,533,1448,0,707,1,0,9,0,11,740,3,2,46,23,22,167,653,12,0,0,68,0,0,0,0,1,375,0,0,23,39,0,0,193,0,0,0,1,0,0,0,0,0,0,0,3216\n",
      "91,55,380,480,0,1016,162,327,1271,497,23,22,239,0,31,0,21,1,22,3,1,1,0,321,0,305,0,0,700,0,0,59,77,0,0,166,9,0,0,1,0,0,0,0,0,0,0,3719\n",
      "418,9,46,911,86,541,1,41,490,0,758,0,321,23,20,1,78,84,65,338,0,1,3,41,2,634,1,7,224,0,0,93,1,0,0,0,140,0,0,19,2,0,0,0,0,0,0,4601\n",
      "609,0,453,1582,8,522,3,8,401,5,3,5,45,6,17,141,25,111,0,512,1,734,773,0,58,6,0,0,809,0,0,140,1,0,0,0,82,0,0,0,0,0,3,0,0,0,0,2937\n",
      "2642,38,69,692,1,917,73,86,223,9,15,83,98,59,532,1,0,29,19,109,2,0,46,0,0,37,0,0,446,0,73,19,1097,0,0,0,28,1,0,0,0,0,0,0,0,0,0,2556\n",
      "722,0,558,1078,112,829,448,48,1421,0,0,0,1,30,211,136,6,6,20,1,0,72,0,0,22,30,0,2,69,0,2,17,29,2,0,0,47,0,0,2,59,0,1,0,0,0,0,4019\n",
      "1312,189,7,579,0,2032,48,78,282,67,214,8,263,356,128,3,479,9,55,283,1,65,7,117,0,183,0,4,41,0,283,44,3,0,2,0,7,0,0,0,0,0,0,0,0,0,0,2851\n",
      "1065,136,0,1121,1,526,2,0,44,517,188,43,21,1,239,38,0,220,100,0,25,5,233,0,104,46,0,0,13,0,23,71,335,0,0,0,2,0,0,2,0,0,0,0,0,0,0,4879\n",
      "1512,15,63,643,22,1321,0,16,293,0,15,4,188,0,287,0,192,0,66,41,0,0,65,10,0,0,200,2,19,0,0,929,393,0,0,0,136,0,24,2,0,0,82,0,0,0,0,3460\n",
      "652,142,374,254,28,1077,145,1,286,0,12,7,0,0,31,0,20,191,35,1,342,81,34,0,0,3,3,0,58,0,18,5,2,0,0,0,67,0,29,0,0,0,1,0,0,0,0,6101\n",
      "1374,53,303,1283,352,1923,127,19,36,0,225,3,226,51,17,0,41,28,9,14,13,2,30,0,0,4,8,0,254,26,26,21,0,0,0,0,180,0,0,0,2,0,0,0,0,0,0,3350\n",
      "578,58,138,875,20,730,38,89,1694,0,170,0,0,483,0,0,280,6,235,119,0,0,0,359,0,2,0,0,324,0,0,98,22,0,0,0,3,0,0,0,0,0,41,0,0,0,0,3638\n",
      "418,0,25,1094,0,2274,14,46,300,0,14,71,15,3,251,63,155,71,557,6,0,0,342,0,0,0,0,219,623,0,0,121,119,0,0,1,421,0,39,0,1,0,0,0,109,0,0,2628\n",
      "561,0,8,419,0,858,188,239,112,22,221,188,646,0,3,205,362,6,232,44,21,9,222,0,0,0,0,2,149,0,0,269,20,0,0,0,277,0,0,0,0,0,0,0,0,0,0,4717\n",
      "533,141,2,24,0,766,20,28,135,9,31,0,17,133,466,378,6,0,93,238,0,192,13,0,19,2,207,634,978,0,0,192,43,0,6,0,102,0,0,0,0,0,0,0,0,0,0,4592\n",
      "266,0,46,293,8,2097,281,5,732,30,20,1572,2,39,12,1,567,4,33,208,0,0,209,0,0,0,0,69,40,0,0,22,1,0,0,0,5,0,0,200,0,0,0,4,0,0,0,3234\n",
      "1281,0,6,921,104,886,460,179,340,3,0,193,27,45,484,0,0,9,118,179,4,0,378,0,0,0,0,0,128,0,183,223,807,0,0,0,181,0,0,0,0,0,0,0,0,0,0,2861\n",
      "337,0,694,341,11,416,257,332,115,9,226,12,3,139,138,32,77,0,2,3,1,72,42,0,0,3,4,0,3,0,216,6,0,0,0,90,928,0,0,8,0,0,0,0,0,0,0,5483\n",
      "1131,0,1027,294,1,741,0,86,633,224,119,76,51,42,78,11,1,0,244,10,0,0,104,1,0,839,0,3,468,0,8,56,296,0,0,285,11,0,0,17,0,0,0,1,0,0,0,3142\n",
      "589,0,2,338,0,797,3,757,112,74,1,165,0,1,0,0,241,4,50,33,0,2,295,4,0,152,9,38,43,0,0,695,1,0,0,0,0,0,0,206,0,0,0,0,0,0,0,5388\n",
      "904,437,11,536,1,545,106,0,425,2,30,6,4,5,34,0,124,0,583,1,0,134,383,202,0,0,0,0,247,0,0,0,4,0,0,343,18,0,0,0,0,0,0,0,0,0,0,4915\n",
      "661,0,25,895,0,1051,57,119,602,0,9,132,448,12,83,0,107,14,259,38,0,0,179,89,12,8,0,12,394,0,40,179,806,0,0,0,16,0,1,0,0,0,0,0,0,0,0,3752\n",
      "1322,14,1216,1191,0,824,0,3,477,0,24,17,304,10,150,284,25,2,203,9,13,0,67,0,0,9,125,38,256,0,0,317,4,0,0,0,79,0,0,138,0,0,0,0,0,0,0,2879\n",
      "1034,0,106,45,0,842,23,4,347,0,37,4,44,1,77,0,72,101,687,131,547,16,282,0,3,3,956,1,71,0,0,181,0,0,0,12,96,0,0,0,0,0,35,0,0,0,0,4242\n",
      "521,0,247,68,1,618,14,1190,2232,437,57,34,6,0,0,0,126,81,1,316,20,3,118,0,61,104,0,0,30,0,0,18,334,0,0,108,6,0,0,1,0,0,0,0,0,0,0,3248\n",
      "798,0,21,242,0,1383,25,0,364,0,44,0,43,172,358,25,475,1,7,106,0,1081,347,1,0,0,2,2,5,42,0,127,1,0,0,18,31,0,0,0,11,0,0,0,0,0,0,4268\n",
      "931,2,151,750,0,843,5,4,782,21,3,143,2,17,17,0,0,0,28,41,43,75,1,0,0,10,49,0,443,0,0,856,2,39,0,11,2,0,0,6,0,0,0,0,0,0,0,4723\n",
      "373,0,128,1089,9,1176,23,139,305,12,13,2,9,0,80,0,14,55,211,8,17,256,44,3,0,0,1,0,1848,0,870,2,0,0,0,5,1,0,0,0,0,0,13,0,0,0,0,3294\n",
      "1378,24,11,877,89,1897,18,468,816,1,75,75,0,3,73,0,270,58,50,155,0,13,542,2,0,17,0,19,228,0,17,196,1,0,0,0,395,0,12,12,0,1,0,89,0,0,0,2118\n",
      "233,0,106,593,0,784,49,22,287,0,547,284,11,16,37,91,64,0,68,114,253,71,961,8,5,3,65,15,263,0,0,1,46,0,0,43,84,0,0,585,14,0,99,0,0,1,0,4177\n",
      "949,0,69,81,8,2254,127,14,14,179,93,0,514,10,441,1,37,379,0,0,0,0,0,0,0,1,0,0,16,605,354,150,281,598,322,0,4,421,0,0,0,0,3,0,0,0,0,2075\n",
      "1778,19,221,431,95,1309,282,0,663,0,0,344,51,35,727,0,24,137,192,0,0,0,85,0,0,3,0,0,139,0,0,6,0,13,0,65,125,0,0,4,0,0,0,0,0,0,0,3252\n",
      "700,88,234,1016,33,2054,40,106,72,0,27,1,40,65,106,0,133,2,0,60,485,389,468,2,0,16,80,0,73,0,0,807,26,0,0,0,61,0,0,0,0,0,0,0,0,0,0,2816\n",
      "505,1,80,3103,0,1203,17,184,160,0,285,0,371,36,8,0,113,1,225,0,0,0,91,0,67,52,11,0,323,0,226,8,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,2878\n",
      "1585,4,766,116,0,1511,8,0,0,0,9,29,107,353,27,0,428,0,121,2,224,0,202,0,2,6,1,0,263,0,0,159,11,0,0,0,3,0,0,102,0,0,0,0,0,0,0,3961\n",
      "620,0,393,239,0,1113,914,0,64,198,429,10,442,373,15,0,0,0,36,912,204,0,10,128,1,0,2,0,240,0,0,69,7,0,0,0,8,0,0,0,0,0,0,0,0,0,0,3573\n",
      "442,491,1591,408,0,1027,77,0,0,0,372,28,2,206,0,0,883,15,99,126,0,0,573,139,3,0,0,0,272,0,103,23,98,0,0,0,3,0,0,7,0,0,0,0,0,0,0,3012\n",
      "1449,8,157,82,0,496,2,6,1153,3,0,450,7,2,184,0,0,49,40,10,5,2,115,8,0,33,0,0,480,0,12,26,250,0,0,0,231,0,0,115,0,0,2,0,0,0,0,4623\n",
      "739,356,688,211,0,766,155,268,870,0,123,12,182,0,3,1,309,0,7,2,0,0,486,14,0,119,11,0,34,0,0,97,68,0,0,0,71,0,0,0,0,0,0,0,0,0,0,4408\n",
      "1214,0,125,344,195,422,44,0,1212,173,36,111,74,63,153,0,145,9,143,8,13,15,139,0,0,245,27,0,726,0,0,0,4,0,0,0,33,0,0,0,3,0,0,1,0,0,0,4323\n",
      "1497,733,24,810,0,1038,61,107,200,30,21,0,105,980,9,214,84,0,0,25,0,19,205,0,0,111,161,0,111,0,0,257,6,0,0,4,3,0,0,0,0,0,11,0,0,0,0,3174\n",
      "2074,1,843,544,0,1354,7,0,27,0,270,248,37,0,0,0,0,0,90,529,0,0,1,0,0,80,0,3,167,0,0,7,187,0,0,0,58,0,0,4,0,0,0,0,0,0,0,3469\n",
      "1332,0,495,615,0,1983,94,5,40,10,275,2,0,211,2,0,84,82,1034,42,0,4,36,0,1,0,2,0,1,270,3,953,125,0,0,0,26,0,63,0,0,0,1,0,0,0,0,2209\n",
      "751,0,727,1252,28,1183,292,713,302,0,456,28,27,0,172,23,8,31,5,23,1,1,596,37,37,2,0,0,229,0,4,142,36,0,0,0,6,0,0,13,0,0,0,0,8,0,362,2505\n",
      "1084,0,1902,687,0,504,186,621,253,2,210,0,127,211,0,1344,102,29,0,126,0,3,3,141,0,2,3,6,43,0,2,0,4,0,0,0,2,0,0,174,0,0,0,0,0,0,0,2229\n",
      "864,0,692,318,0,1083,7,41,329,362,0,73,140,2,160,0,0,0,2,4,2,0,7,0,0,0,4,128,236,0,0,0,4,0,86,495,3,0,0,10,6,0,16,0,0,4,0,4922\n",
      "918,19,0,239,0,1056,7,375,357,0,28,369,780,0,0,288,1,38,7,0,18,0,193,312,20,4,0,0,250,0,3,3,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,4709\n",
      "748,0,296,345,0,1768,36,0,16,0,616,0,759,45,114,146,60,2,466,523,1,22,228,66,3,18,750,0,50,0,0,94,31,0,0,7,24,0,0,2,1,0,9,0,0,0,0,2754\n",
      "1018,1,312,626,0,1478,229,10,205,64,49,71,0,268,195,0,810,39,53,41,131,0,208,128,0,0,0,10,191,0,0,132,66,0,0,0,0,0,0,1,0,0,0,0,1,0,0,3663\n",
      "1166,0,115,549,0,1842,0,148,221,169,433,30,314,4,22,0,42,32,74,194,16,0,21,0,0,0,0,0,256,0,0,203,183,236,0,0,0,0,0,1,0,0,0,0,0,0,0,3729\n",
      "408,0,14,855,0,377,703,286,126,234,0,7,343,151,85,0,19,126,321,697,535,3,0,0,45,1246,1,23,133,0,0,13,13,0,0,188,0,0,66,6,2,0,0,0,0,0,0,2974\n",
      "1507,0,715,90,0,1082,13,73,243,95,590,101,20,1112,237,194,0,27,316,381,0,71,27,0,0,0,0,0,203,0,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2865\n",
      "513,0,399,657,0,1207,241,424,355,0,596,123,7,95,0,60,45,0,158,0,784,0,568,31,0,22,97,1,162,0,2,96,97,0,16,6,0,0,16,0,0,0,0,15,0,0,0,3207\n",
      "2163,88,284,338,66,807,212,2,752,36,648,43,95,5,0,4,2,119,0,3,0,28,0,0,0,16,0,195,8,0,0,84,315,0,0,0,331,0,0,0,0,243,0,0,0,0,0,3113\n",
      "615,40,166,67,51,2187,17,6,242,14,0,61,0,2,14,10,3,2,320,51,61,0,145,0,0,0,62,0,51,0,30,16,6,0,0,0,126,0,0,0,0,84,5,261,0,0,0,5285\n",
      "619,875,82,526,19,698,209,0,314,0,113,0,127,1319,0,17,32,0,57,484,1,1,119,0,0,372,57,0,29,0,4,633,6,0,0,0,0,323,0,11,6,0,0,0,2,0,0,2945\n",
      "480,105,730,809,105,504,47,0,245,132,110,1189,3,1,119,176,262,263,2,66,0,81,48,1,0,0,177,1,343,0,3,264,8,0,0,13,129,0,0,0,1,0,0,0,0,0,0,3583\n",
      "1126,289,172,307,0,1998,134,0,12,1,66,20,119,14,60,0,0,17,48,3,0,508,34,1,0,32,0,26,106,0,25,12,30,0,0,0,114,0,0,6,0,0,0,0,5,0,0,4715\n",
      "1298,0,51,566,323,651,154,0,13,0,25,911,0,0,380,0,0,17,41,1694,0,161,28,2,5,0,205,0,1,0,14,296,160,0,0,0,10,0,0,13,0,0,0,0,0,0,0,2981\n",
      "607,2,7,233,0,2334,174,5,218,0,658,11,17,0,0,103,0,1,129,168,15,0,2,0,0,15,24,0,231,412,0,140,46,0,0,0,66,0,0,0,0,0,0,0,0,0,0,4382\n",
      "928,451,492,15,57,324,7,328,1159,0,3,7,2,0,71,7,4,158,0,70,0,0,133,0,4,1,323,0,85,0,43,73,283,0,0,0,1404,0,0,2,1,0,0,0,0,44,0,3521\n",
      "1360,0,1,118,154,894,36,564,201,24,113,105,2,5,242,32,90,51,121,284,205,74,286,216,218,0,46,54,388,7,17,1030,118,1,0,0,319,0,0,0,0,0,0,0,0,0,0,2624\n",
      "2852,0,36,578,12,376,130,176,55,0,38,1,2,65,28,0,37,0,44,61,0,5,6,4,0,0,13,14,670,0,1,101,36,0,0,525,26,0,0,1,0,0,0,0,0,0,0,4107\n",
      "1422,0,10,473,12,1085,103,21,5,1,435,0,73,9,63,179,1,4,74,149,68,94,109,13,0,20,25,0,91,0,0,118,58,0,56,17,897,0,0,0,0,0,0,0,0,26,0,4289\n",
      "2535,38,585,204,0,537,27,0,178,0,7,13,1,15,408,6,87,296,0,0,0,67,47,224,86,502,0,85,950,0,0,0,97,0,0,0,4,0,0,66,0,155,0,0,0,0,0,2780\n",
      "574,0,93,904,121,627,25,12,414,12,700,48,50,0,1045,1,66,9,14,3,9,6,40,0,186,0,0,66,0,0,0,390,0,0,0,30,112,0,19,0,2,0,0,0,0,0,0,4422\n",
      "200,46,172,135,0,2691,33,84,552,6,217,128,0,7,24,0,0,480,360,40,0,0,575,7,0,0,0,457,454,0,0,557,3,0,0,4,84,0,0,0,1,7,0,0,0,0,0,2676\n",
      "1003,0,440,265,6,225,204,51,320,35,121,3,110,15,1526,9,120,9,527,218,12,13,51,8,0,0,0,0,242,0,62,19,30,0,0,0,147,0,0,126,0,0,0,0,0,0,0,4083\n",
      "920,0,16,749,2,1117,637,53,183,0,20,0,405,1,363,0,1,0,61,61,0,3,2,1328,28,7,0,101,551,0,0,8,48,0,0,1,427,11,0,0,0,3,0,0,0,0,0,2893\n",
      "713,12,90,221,0,401,3,7,254,12,14,2,120,317,12,37,19,27,31,524,0,0,20,0,3,1,54,0,471,0,2,175,15,0,0,1,3,0,0,0,3,0,718,0,1,0,0,5717\n",
      "656,125,21,438,0,1332,72,0,89,1,306,23,26,9,30,2,1,0,2,322,773,6,716,43,0,18,0,2,69,269,71,468,1284,0,0,134,1,115,0,0,0,0,0,0,0,0,0,2576\n",
      "1637,0,91,687,0,2201,3,5,18,0,3,336,0,12,88,1,50,0,93,222,0,0,4,0,24,1,11,3,202,0,7,253,0,9,0,0,1,0,0,0,0,179,0,0,0,0,8,3851\n",
      "1271,5,178,893,0,719,61,72,342,0,61,99,58,0,7,37,3,155,12,46,0,8,86,150,0,3,125,0,13,0,55,101,201,0,0,0,1,0,0,0,531,0,0,0,0,0,0,4707\n",
      "1719,0,803,60,23,842,722,487,69,320,28,4,0,0,3,48,221,6,116,131,0,0,153,344,109,2,231,3,91,0,0,65,107,0,0,1,0,0,1,22,0,41,0,0,0,0,0,3228\n",
      "626,22,1,127,5,808,3,28,62,0,275,238,0,0,5,165,55,0,600,116,221,0,256,0,0,429,35,0,181,0,4,164,30,0,0,15,58,0,0,0,5,0,0,0,0,0,0,5466\n",
      "1289,0,0,818,0,1478,24,0,1219,0,249,0,415,1,9,0,7,0,26,168,0,67,681,143,0,5,3,5,267,0,23,349,4,0,0,0,1,0,0,2,2,0,0,0,0,0,0,2745\n",
      "296,0,473,404,139,2737,145,533,714,1,4,0,1,7,474,1,0,3,109,22,126,2,67,4,0,0,684,0,2,0,0,2,24,8,0,0,1,0,0,0,0,0,1,0,0,0,0,3016\n",
      "1014,68,12,773,129,1979,129,0,338,64,4,0,101,0,102,0,358,24,222,4,0,0,5,0,0,28,2,0,161,4,0,483,390,0,0,211,0,0,0,0,0,0,0,0,0,0,0,3395\n",
      "670,0,485,466,0,470,668,14,166,0,522,917,101,0,112,1,90,72,14,831,0,0,9,0,0,5,25,143,43,0,1,229,7,0,0,1,135,0,0,0,46,0,0,0,5,0,0,3752\n",
      "1558,1,89,253,0,865,220,0,547,1,14,0,28,0,81,5,4,280,2,232,0,32,801,0,0,65,0,0,1633,0,0,141,6,0,0,0,9,0,0,9,0,46,1,0,0,0,0,3077\n",
      "390,0,169,948,0,972,237,405,519,0,74,149,15,0,0,553,1,280,715,137,3,0,69,110,103,1,7,0,39,0,50,0,536,0,0,0,5,0,6,0,21,0,0,0,0,0,0,3486\n",
      "1011,5,1017,145,0,1484,3,19,415,42,87,27,59,195,0,59,45,1,14,0,0,0,112,0,57,94,0,146,122,0,408,77,425,0,0,0,3,0,0,0,0,0,0,0,0,0,0,3928\n",
      "683,0,775,1010,0,920,618,82,413,0,23,200,57,0,155,0,3,66,10,9,0,0,1,0,0,0,0,0,345,0,0,42,191,0,0,0,5,0,0,0,24,0,0,114,0,0,0,4254\n",
      "829,0,142,74,0,1363,21,55,267,76,30,12,374,908,970,0,103,65,3,559,852,2,144,0,0,35,0,0,124,0,272,143,4,0,0,0,13,0,0,0,0,0,105,0,1,0,0,2454\n",
      "1422,63,72,628,7,1572,38,43,42,118,85,478,0,0,5,627,77,6,100,250,0,0,0,29,0,8,0,0,844,0,0,136,155,0,0,0,41,3,0,6,0,0,0,0,0,0,0,3145\n",
      "1755,571,120,16,0,980,20,676,207,0,138,290,45,10,95,1,3,16,571,29,0,9,82,0,0,70,0,9,645,1,7,25,397,0,35,6,4,0,0,21,1,0,0,0,0,0,0,3145\n",
      "1391,0,226,493,14,1631,29,550,56,0,49,409,8,2,10,35,0,12,24,93,0,13,94,0,0,0,0,647,418,0,49,47,18,0,0,0,3,0,0,1,0,0,0,0,0,29,0,3649\n",
      "1321,5,41,1402,0,2246,6,112,370,12,24,73,3,3,525,1,93,89,24,598,0,286,584,11,18,11,1,19,199,0,11,0,298,0,0,10,31,0,0,0,58,0,3,0,0,0,0,1512\n",
      "1179,0,42,480,0,1437,210,0,27,178,5,353,25,0,1,103,7,68,126,32,0,1,313,0,0,43,14,5,246,1,0,181,41,0,0,0,477,0,72,0,0,0,0,0,0,0,0,4333\n",
      "1604,2,19,70,0,473,159,0,649,0,155,5,0,0,15,2,4,3,14,86,0,5,36,0,0,1,0,0,42,0,21,249,30,0,0,0,519,0,0,300,0,0,0,0,0,0,0,5537\n",
      "554,0,205,79,41,1768,107,4,51,0,72,453,0,0,116,0,0,852,1152,35,0,0,10,0,2,1,0,1,11,6,0,141,113,0,0,0,179,0,0,132,16,0,0,0,0,0,0,3899\n",
      "479,0,165,295,0,829,11,58,310,163,60,111,0,66,5,174,101,8,56,10,0,0,591,0,13,6,0,4,223,0,0,76,111,0,48,0,5,0,18,0,0,0,0,0,0,0,0,6004\n",
      "1061,0,165,342,0,1452,17,2,8,0,12,36,0,57,346,0,35,0,83,31,31,0,103,1007,0,0,1,1,45,0,61,608,3,12,0,0,23,0,0,0,0,0,0,0,0,92,0,4366\n",
      "203,0,620,223,0,3086,448,60,268,0,72,48,115,0,3,2,52,75,635,7,30,11,117,62,0,0,0,253,325,0,0,8,691,0,0,88,1,0,0,0,0,0,0,170,0,0,0,2327\n",
      "930,479,78,193,2,896,49,39,46,8,172,86,14,71,61,10,3,7,101,3,4,0,846,21,0,0,0,14,751,0,0,377,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,4707\n",
      "855,286,861,291,127,1157,194,0,61,81,184,0,13,0,62,109,0,0,119,338,0,181,321,0,0,0,77,0,163,0,21,37,21,0,0,0,97,0,1,0,0,67,0,0,0,0,0,4276\n",
      "306,3,315,327,20,1200,1156,0,586,258,325,9,256,56,82,0,2,54,27,101,0,7,123,0,51,2,1,4,746,0,18,3,11,0,0,0,1,0,0,0,3,0,9,0,0,4,0,3934\n",
      "1068,34,22,469,0,1756,135,0,407,32,385,9,8,59,0,2,1,5,10,11,5,0,83,66,0,0,0,0,29,0,831,2,0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,4554\n",
      "336,3,875,836,43,847,384,0,379,0,1,1020,20,0,505,21,111,8,0,149,0,0,37,0,35,75,0,0,286,0,19,571,15,0,0,58,0,0,0,10,0,0,0,0,0,0,0,3356\n",
      "2123,0,1960,30,7,630,89,0,194,0,16,1,2,93,0,4,0,0,442,78,1,0,65,0,0,1,51,0,144,0,7,508,114,2,0,42,0,0,1,0,0,0,0,48,0,0,0,3347\n",
      "1347,88,1320,460,9,561,38,0,314,4,186,8,14,0,70,29,98,855,42,2,0,62,125,5,0,83,0,103,57,0,0,6,0,0,0,0,524,0,26,0,33,0,0,0,0,0,0,3531\n",
      "906,33,7,463,1,1108,19,21,0,332,30,0,10,4,295,0,56,63,103,1,10,0,0,43,0,27,186,157,168,0,132,116,11,0,0,0,228,0,0,0,0,0,1480,0,0,0,0,3990\n",
      "622,0,5,133,0,246,1,50,1678,0,1,33,107,256,22,0,25,1,15,48,4,32,1370,1,0,0,650,0,291,0,5,4,0,0,0,1,3,0,15,0,28,1458,0,112,0,0,0,2783\n",
      "1252,57,239,21,1,1367,27,349,392,88,71,8,10,2,0,10,414,475,43,53,0,0,923,9,53,0,0,25,0,0,0,204,10,0,0,0,3,0,0,2,0,0,0,0,0,0,0,3892\n",
      "1602,0,116,65,1,1050,230,0,1440,0,4,3,159,13,0,0,1,0,0,1149,0,25,373,1,0,169,0,330,74,0,4,8,1,0,0,0,2,0,0,0,0,0,0,20,0,0,0,3160\n",
      "1154,0,11,283,0,2135,275,340,8,50,0,28,265,43,73,0,159,0,130,63,5,62,939,6,345,140,0,0,18,0,1,227,59,0,0,2,52,0,0,0,0,0,0,0,0,294,0,2833\n",
      "2506,0,362,1352,0,950,1,137,239,0,0,29,133,0,9,0,269,1,84,11,2,4,540,0,0,0,0,127,44,0,31,102,33,0,0,0,46,0,0,0,0,0,0,0,0,0,0,2988\n",
      "1006,4,294,110,0,1161,34,87,1060,15,0,0,583,151,50,388,5,1,218,55,0,2,123,0,57,8,110,10,22,0,1,607,0,0,10,49,289,0,79,4,0,0,217,0,0,47,0,3143\n",
      "826,82,4,419,2,763,0,0,37,9,73,10,28,17,0,0,21,16,2,255,0,38,1027,0,12,21,0,0,487,0,3,191,311,0,0,6,651,0,0,3,0,0,2363,21,0,0,0,2302\n",
      "1125,0,278,201,0,1810,167,0,830,139,103,71,1,47,274,69,252,1,170,5,0,211,116,126,0,0,1,1,30,7,19,98,59,0,0,0,1110,0,0,0,0,0,0,0,0,0,0,2679\n",
      "807,0,307,274,1,1080,4,192,123,19,10,0,309,0,115,29,184,6,874,20,0,0,219,0,0,316,19,0,163,0,0,691,0,0,0,0,14,0,74,92,0,0,0,0,0,0,0,4058\n",
      "842,0,604,685,23,673,960,54,18,0,76,134,36,5,0,0,9,35,115,229,8,0,9,0,0,662,0,10,186,0,0,3,0,0,0,103,652,0,129,0,37,0,45,0,0,0,0,3658\n",
      "1216,0,3,1205,0,1130,276,6,569,1,3,6,0,158,260,2,11,67,46,0,0,539,120,373,0,0,0,0,4,0,0,29,152,0,0,2,1036,0,3,0,0,0,33,0,0,0,0,2750\n",
      "374,2,915,570,3,899,144,12,161,272,122,2,0,0,225,0,267,0,424,170,18,25,185,83,0,0,0,0,1639,0,21,46,0,0,0,0,49,0,0,5,0,0,0,0,0,0,0,3367\n",
      "1270,0,155,164,0,994,19,0,253,0,134,0,172,143,0,5,0,329,71,451,0,0,158,12,0,0,0,4,305,0,0,0,0,0,100,0,130,0,0,1,139,0,0,0,0,0,0,4991\n",
      "1744,7,111,494,123,378,40,0,541,6,799,419,0,0,124,42,0,2,58,89,40,7,36,0,0,0,0,2,64,0,56,15,9,0,0,0,487,0,5,0,0,0,0,0,0,0,0,4302\n",
      "563,69,137,420,493,693,14,0,58,396,364,0,35,76,17,0,31,5,154,752,111,19,268,0,0,0,0,5,6,0,454,111,76,0,0,0,1,0,0,0,0,0,17,0,0,0,0,4655\n",
      "1609,78,384,71,0,919,5,22,829,17,639,77,0,123,21,0,38,2,76,22,17,253,159,0,0,0,25,196,307,0,41,175,374,0,0,0,3,0,4,0,0,0,0,0,0,0,0,3514\n",
      "3410,17,85,151,127,633,186,31,109,0,3,13,0,21,3,63,80,1,5,0,815,524,200,0,104,29,0,0,416,167,112,1,0,0,0,44,9,0,0,0,1,0,0,0,33,0,0,2607\n",
      "2025,0,144,728,0,598,203,25,28,0,25,235,158,1,130,1,123,28,628,6,892,2,69,4,0,0,0,0,391,0,8,167,54,0,0,0,9,0,0,13,4,0,1,0,0,0,0,3300\n",
      "665,0,44,232,111,426,1128,40,51,76,51,801,255,63,1056,113,24,103,0,4,26,0,1505,354,0,9,0,55,129,0,2,24,24,0,0,0,121,0,81,0,0,0,0,12,0,0,0,2415\n",
      "614,0,64,228,0,916,144,67,306,18,0,88,19,0,93,6,58,4,137,27,0,0,50,5,54,15,0,331,1344,601,154,223,169,0,0,0,367,0,0,1,2,0,0,163,0,0,0,3732\n",
      "1440,0,158,248,0,1675,16,2,52,0,642,3,5,141,42,8,180,6,673,364,0,40,41,0,0,4,0,395,73,0,34,60,0,106,0,130,110,0,0,0,0,0,0,0,0,0,0,3352\n",
      "1203,22,126,433,94,1666,550,85,141,0,419,46,90,7,103,0,8,120,188,0,271,33,0,1,201,89,1,0,329,0,26,359,0,0,6,1,2,1,0,79,0,0,0,0,0,0,0,3300\n",
      "112,0,295,1016,0,1814,1,114,816,0,93,363,99,113,27,0,158,1,304,20,0,0,0,75,0,0,0,0,29,0,53,256,1064,1,0,3,0,0,0,81,0,0,0,0,1,0,0,3091\n",
      "496,0,7,10,0,1633,57,14,1017,0,529,1300,9,0,369,217,302,17,209,243,0,9,55,11,0,0,0,158,24,0,2,0,1030,0,0,0,8,0,0,0,0,0,0,0,0,0,0,2274\n",
      "1265,0,131,379,16,1632,27,0,307,0,227,11,106,0,254,0,419,4,13,21,0,2,105,17,0,0,0,0,1015,0,0,10,58,0,0,0,1,0,0,2,7,0,0,0,0,0,0,3971\n",
      "790,16,847,419,3,1454,82,26,1017,1,13,33,0,0,13,0,79,186,50,50,11,67,163,0,9,0,2,23,110,0,7,4,310,0,0,0,13,0,0,0,0,0,1,0,0,0,0,4201\n",
      "718,0,3,431,0,971,235,133,1,1,8,286,238,1147,125,12,57,734,150,194,0,0,344,12,0,1,0,0,447,0,0,20,418,30,0,0,141,0,0,0,0,0,0,0,0,0,0,3143\n",
      "1468,0,48,772,90,923,146,297,213,0,32,1,22,60,13,0,161,324,252,0,0,0,46,20,0,14,0,390,0,0,0,18,0,0,0,0,325,0,0,54,0,0,193,0,0,0,0,4118\n",
      "645,0,501,852,59,688,318,163,315,15,263,14,33,0,236,56,86,0,9,1,0,2,158,107,0,655,0,45,38,0,0,19,6,0,0,0,122,0,0,5,0,1,1,0,0,0,0,4587\n",
      "907,1,192,730,0,1783,144,14,900,7,46,323,27,0,171,0,19,49,426,3,1,1,31,0,0,446,221,6,266,0,0,180,4,0,0,378,27,0,0,0,0,0,0,50,0,0,0,2647\n",
      "434,63,90,1013,345,974,546,0,332,32,98,0,2,100,415,20,16,0,35,63,1,1,1231,1,0,0,0,0,13,0,15,97,313,0,0,0,0,0,0,0,0,0,54,0,0,0,0,3696\n",
      "1509,0,224,261,0,1710,639,0,153,201,872,15,0,10,20,0,48,0,1,26,4,0,0,0,0,0,51,0,323,0,0,9,3,0,0,5,1,0,0,0,0,0,0,0,0,0,0,3915\n",
      "790,484,57,60,474,1181,6,0,190,529,971,136,29,0,298,2,6,2,372,496,0,1,267,48,4,6,0,0,95,0,0,155,208,0,0,24,85,0,0,0,0,0,0,0,0,0,0,3024\n",
      "1099,15,14,66,0,2675,200,9,398,3,31,160,43,20,35,72,236,8,240,345,27,221,92,31,0,1,2,39,70,0,55,1,265,0,114,0,76,0,0,0,0,59,0,0,0,0,0,3278\n",
      "612,269,103,621,0,2229,46,239,17,0,0,114,6,136,231,98,10,2,370,17,13,459,80,8,0,127,0,0,2,0,63,6,61,0,0,231,2,12,2,0,0,0,0,0,0,0,0,3814\n",
      "440,0,612,929,6,1449,27,15,59,0,752,535,122,1,2,45,0,194,444,449,222,0,232,460,2,5,0,2,639,1,0,360,60,36,0,1,217,0,0,94,0,27,0,0,0,0,0,1561\n",
      "2452,22,178,909,0,400,88,12,100,11,51,103,0,156,57,672,335,24,33,39,12,147,374,1,26,0,0,414,27,0,0,61,289,0,0,0,46,0,0,0,0,0,0,0,0,0,0,2961\n",
      "1591,0,5,126,3,1245,175,4,472,2,2,4,0,0,491,22,4,26,0,55,0,0,5,0,46,8,0,43,60,0,0,56,227,0,0,60,670,0,0,53,181,0,0,0,0,0,0,4364\n",
      "1074,7,1387,215,5,715,15,37,313,0,131,0,318,0,25,1,7,0,117,5,31,0,551,2,0,112,0,39,369,0,2,410,3,0,0,0,3,0,0,0,25,1,0,0,0,0,0,4080\n",
      "915,2,237,280,0,1429,604,0,988,47,530,2,0,106,10,0,685,0,34,0,0,529,571,0,0,0,3,4,455,2,0,82,0,0,0,0,13,0,0,0,45,0,0,0,0,0,0,2427\n",
      "488,0,113,241,29,1266,47,14,182,0,7,102,61,101,20,6,70,169,364,116,0,1,19,97,0,0,0,5,52,0,38,1108,3,0,0,1,3,0,2,2,68,0,0,0,0,0,0,5205\n",
      "539,45,1105,1636,0,287,8,1,645,0,358,7,34,6,285,22,1,0,22,224,0,1,99,2,0,5,0,0,194,0,0,1,474,0,0,5,44,0,0,0,0,0,0,0,0,1,0,3949\n",
      "662,32,173,1973,223,684,11,13,525,0,231,4,33,1,349,101,1,20,215,27,0,56,668,26,0,0,99,0,25,0,194,201,0,1,7,0,0,0,0,0,0,0,0,0,0,0,0,3445\n",
      "753,0,29,842,44,595,39,0,345,0,24,31,0,15,174,9,499,1,1,3,218,2,35,11,272,0,0,0,176,0,0,9,87,0,0,89,13,0,0,0,0,0,0,0,0,0,0,5684\n",
      "1620,0,71,142,0,1413,828,27,433,0,781,15,0,443,23,0,0,6,128,325,28,0,157,0,2,11,0,0,148,0,5,58,136,0,0,1,12,0,211,0,0,0,0,0,0,0,0,2976\n",
      "199,1,114,971,0,1558,337,0,788,0,53,44,7,237,42,6,23,125,343,417,3,44,27,0,2,15,0,0,31,0,0,1,338,0,0,56,28,0,0,0,0,0,0,73,0,0,9,4108\n",
      "1094,0,118,477,0,1522,106,1,878,83,133,39,4,0,54,0,97,19,3,0,2,406,156,0,0,105,0,0,672,0,0,50,9,0,0,227,22,0,0,0,1,0,0,20,0,4,0,3698\n",
      "1073,0,1083,137,6,1352,81,9,78,0,52,0,0,282,13,0,404,45,58,0,0,0,310,10,0,1,0,37,436,0,0,211,200,0,0,0,0,0,0,9,0,1,0,0,0,0,0,4112\n",
      "831,0,198,97,151,1117,337,0,117,0,90,56,307,1,75,0,1,28,170,0,0,0,554,0,11,2,0,0,201,0,0,101,27,0,165,0,21,0,0,0,0,0,0,0,0,0,0,5342\n",
      "900,110,418,455,5,2035,150,49,73,0,0,178,203,0,0,0,80,4,405,110,0,221,12,22,0,0,0,779,59,0,2,777,15,0,0,0,12,0,1,0,25,0,0,0,0,0,0,2900\n",
      "636,0,608,49,7,1144,160,116,1700,48,585,37,15,0,282,7,141,77,130,2,1,0,388,17,0,9,0,69,37,0,76,133,108,0,0,8,0,0,4,0,0,0,0,0,4,0,0,3402\n",
      "1365,0,33,496,0,349,157,0,1269,2,7,4,165,202,133,0,191,9,221,0,0,0,1259,0,0,2,2,28,71,0,0,4,1460,0,0,0,23,0,0,0,60,0,1,0,0,0,0,2487\n",
      "1149,108,285,926,1,789,16,110,49,8,8,1,5,42,739,0,4,103,0,568,6,0,4,0,0,273,0,4,192,0,15,55,40,0,0,1,13,0,0,0,0,0,0,0,0,0,0,4486\n",
      "1148,15,463,463,3,1166,382,0,425,2,0,0,69,2,47,69,0,10,37,1,0,0,134,0,0,6,2,12,59,0,0,1061,7,0,0,0,33,0,0,0,0,0,0,0,0,0,0,4384\n",
      "1670,46,4,348,0,1462,42,15,110,13,1,22,230,15,16,0,1,116,31,34,521,0,210,258,0,4,144,499,340,0,83,26,0,0,0,0,0,0,4,12,0,0,0,0,0,0,0,3723\n",
      "604,0,112,266,0,917,218,7,315,1,23,922,463,0,36,1,224,0,1,40,0,83,279,42,0,0,29,0,267,0,301,645,102,0,0,1,0,0,8,16,0,0,9,0,0,0,0,4068\n",
      "1923,32,32,343,8,858,96,0,472,0,16,12,64,1,47,1,0,1,3,1398,570,175,0,0,0,0,0,1,17,0,0,44,51,0,0,30,671,0,3,3,0,108,0,1,0,0,0,3019\n",
      "465,0,852,688,0,1633,102,240,375,0,4,72,90,355,34,51,19,0,1,19,0,53,450,0,0,0,17,0,6,4,0,120,34,0,0,0,1059,0,0,0,0,0,0,0,0,14,0,3243\n",
      "886,0,186,79,1,360,0,116,256,0,316,417,87,477,11,156,108,67,93,248,0,0,13,14,0,16,3,70,18,0,0,455,91,0,0,0,183,0,0,0,0,0,0,0,0,0,0,5273\n",
      "963,0,150,776,51,977,266,0,474,0,66,9,13,5,391,0,4,13,0,5,3,244,52,0,1,0,0,0,92,144,0,12,53,0,0,0,8,0,5,0,0,0,0,0,0,0,0,5223\n",
      "2492,106,29,363,0,793,144,18,229,0,156,35,1,0,5,12,2,148,60,369,1,151,41,0,2,137,0,247,801,0,0,200,15,0,0,0,58,0,1,0,2,3,0,0,0,0,0,3379\n",
      "327,11,4,48,3,1783,949,366,38,0,20,490,95,0,25,15,40,52,9,159,0,0,3,160,0,0,32,0,208,1,11,40,16,0,0,2,44,0,13,0,0,0,73,0,0,0,0,4963\n",
      "337,0,1,455,15,1740,12,0,264,1,46,76,0,72,142,0,1,0,369,790,805,132,27,0,0,81,0,12,0,0,1,448,76,0,0,0,323,0,0,0,0,0,0,0,0,0,0,3774\n",
      "785,64,1035,215,7,1787,237,0,145,118,8,100,0,9,35,18,0,34,24,143,5,0,329,109,0,0,0,0,421,0,31,351,1,0,0,366,8,0,15,0,0,0,0,0,0,0,0,3600\n",
      "312,0,83,810,0,300,37,14,152,0,154,46,0,144,24,10,1,40,375,6,0,0,42,29,0,84,0,1,37,0,0,26,343,98,0,0,93,0,0,0,0,0,120,0,0,0,0,6619\n",
      "1111,14,439,97,1,1043,2,53,1658,35,67,56,0,18,0,0,10,29,6,60,0,0,18,1,0,0,0,0,25,0,41,46,297,0,0,0,59,0,376,2,0,0,1,0,0,0,0,4435\n",
      "1682,0,104,7,0,1791,927,0,33,0,11,0,0,57,6,24,2,73,0,242,64,72,396,0,5,0,16,2,767,0,0,1101,63,0,0,0,324,0,1,74,0,0,0,0,0,0,0,2156\n",
      "1599,348,367,93,0,1423,380,251,169,2,9,0,31,0,30,0,1,0,41,27,1,27,398,2,0,46,0,0,310,0,0,296,1,0,0,0,55,0,0,1,0,0,2,51,0,0,0,4039\n",
      "627,0,216,303,0,469,320,180,349,3,0,0,180,1,0,1,156,0,3,533,0,118,26,0,0,0,0,0,1017,0,178,54,64,0,0,0,0,0,0,0,213,0,0,0,0,0,0,4989\n",
      "630,0,440,447,117,300,86,24,237,269,127,49,106,4,372,87,0,23,1672,142,24,0,1043,68,0,4,9,0,15,0,0,319,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3380\n",
      "1299,144,273,341,0,824,560,1,185,2,423,39,1,86,5,0,12,33,10,9,2,48,68,0,0,277,7,0,73,0,413,66,35,0,0,3,1,0,0,0,0,0,0,0,0,0,0,4760\n",
      "410,0,207,198,0,2825,32,8,495,0,75,201,1,195,22,0,315,0,182,32,0,1,561,1,126,2,0,0,180,0,0,1,0,0,0,0,5,23,1,7,0,0,0,0,0,0,0,3894\n",
      "1807,0,42,30,4,1057,420,35,269,5,54,0,201,10,52,0,49,63,360,0,625,9,10,0,0,3,0,5,84,0,0,14,73,30,0,0,0,0,0,0,0,1,0,0,0,0,0,4688\n",
      "935,7,282,174,250,712,442,5,168,2,92,0,6,152,13,327,12,0,292,0,1,406,0,12,0,0,0,0,945,0,0,730,0,0,0,0,38,0,0,0,0,0,6,93,0,0,0,3898\n",
      "869,13,0,815,0,2231,0,18,91,41,0,4,143,0,7,0,4,0,98,353,0,1,0,0,24,0,0,249,335,0,217,13,4,0,0,21,212,0,0,0,0,0,0,0,0,0,0,4237\n",
      "770,110,63,30,2,655,28,0,112,0,8,190,16,96,76,0,16,0,7,191,0,201,308,0,4,18,26,0,369,0,0,262,26,0,0,0,127,0,136,0,0,0,0,0,0,0,0,6153\n",
      "833,0,628,267,41,951,189,0,348,0,43,1,2,0,128,12,0,7,24,0,4,159,17,0,0,0,0,0,41,0,322,10,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,5918\n",
      "293,436,29,1513,30,1895,38,0,41,19,11,264,46,48,96,0,140,0,45,88,0,34,24,159,106,5,0,0,421,0,4,697,61,0,0,0,0,0,0,28,35,0,0,0,0,0,0,3394\n",
      "967,0,5,387,662,2190,347,3,330,0,36,4,0,215,30,0,34,131,85,4,202,0,0,0,0,384,0,0,191,22,0,112,0,0,0,0,100,0,1,1,0,0,0,0,0,0,0,3557\n",
      "161,0,12,645,2,571,163,0,227,0,28,37,16,1,417,39,1,39,685,138,0,6,142,0,1,0,2,57,753,0,20,318,0,0,0,7,17,6,0,17,0,1,0,0,0,0,2,5469\n",
      "406,0,6,796,24,1886,22,8,153,30,885,12,19,2,345,627,274,0,415,72,0,21,172,46,33,0,21,107,17,0,0,345,185,173,0,0,0,0,1,46,0,0,15,0,0,0,0,2836\n",
      "522,1,98,78,29,1206,142,873,569,0,13,1,10,36,45,94,126,1,0,119,0,0,347,0,0,0,0,399,113,0,0,255,0,0,0,0,50,0,0,0,0,0,0,0,0,0,0,4873\n",
      "1126,0,516,125,35,2657,88,0,43,0,95,9,3,2,258,279,0,0,70,2,0,0,0,22,0,172,0,17,335,0,0,283,2,0,0,0,2,0,0,1,0,0,2,0,0,0,0,3856\n",
      "1210,0,116,724,17,827,44,248,818,0,176,375,29,0,8,37,40,2,57,151,62,0,564,16,0,2,0,1036,50,0,140,0,0,0,0,35,222,0,36,0,0,0,0,0,0,0,0,2958\n",
      "1885,7,628,651,50,1447,66,28,174,0,62,30,81,0,14,88,348,75,69,324,0,76,47,60,0,1,0,26,28,0,348,1,184,0,0,0,25,0,0,0,0,0,0,0,0,0,58,3119\n",
      "656,7,72,51,9,2707,481,12,175,6,20,17,21,283,33,563,0,1,33,20,13,0,5,261,0,0,1,4,268,0,0,240,28,4,0,0,103,0,0,4,0,0,0,0,0,0,0,3902\n",
      "1192,8,318,254,193,716,1288,2,32,0,12,3,0,63,61,0,55,7,1,138,0,0,45,7,0,19,528,0,17,0,314,61,3,56,0,0,98,0,0,0,0,0,0,0,0,0,0,4509\n",
      "394,0,95,400,2,2224,92,4,401,4,602,0,2,0,130,0,96,0,29,44,119,3,592,48,3,0,4,0,126,0,38,1,76,0,90,0,3,0,0,0,0,0,0,0,0,0,0,4378\n",
      "818,0,23,498,0,967,294,218,40,15,10,15,0,21,21,1,39,0,0,24,0,0,120,7,0,2,568,0,652,0,249,501,0,0,0,487,23,0,0,0,0,0,0,0,0,0,0,4387\n",
      "756,0,107,548,0,911,10,0,364,249,0,140,145,11,467,0,281,403,993,80,0,51,1,0,0,3,1,0,9,0,0,120,0,0,0,4,119,0,0,36,1,0,0,0,0,0,0,4190\n",
      "1690,0,5,112,0,1214,57,33,42,0,212,7,89,103,27,0,11,0,37,100,1,0,5,149,5,0,0,0,278,0,42,11,5,4,0,0,153,0,0,2,0,282,0,3,0,0,0,5321\n",
      "887,0,115,246,20,1021,12,111,103,72,52,123,0,1,263,0,135,1,556,275,250,150,661,0,0,39,487,4,71,0,1,396,519,0,0,0,681,0,99,1,0,2,0,0,0,0,0,2646\n",
      "704,16,682,532,33,929,0,2,274,12,17,0,113,23,7,9,1,195,46,1,0,0,13,0,85,2,0,0,446,0,1,191,296,0,0,0,1024,0,0,69,81,0,0,0,0,0,0,4196\n",
      "2505,0,86,46,3,1043,119,27,180,251,2,23,340,0,333,0,4,135,42,0,0,335,10,0,443,7,0,0,110,0,4,30,465,0,0,0,32,0,0,0,180,0,0,0,0,0,0,3245\n",
      "327,8,336,587,0,899,0,5,56,0,30,0,44,1,6,0,70,78,224,85,0,0,79,49,0,1,0,0,469,154,72,116,24,2,0,1,581,0,0,0,0,0,0,0,0,0,0,5696\n",
      "517,0,103,869,39,1600,40,46,100,6,119,3,7,253,145,6,36,0,4,212,0,0,17,0,0,69,0,5,7,363,0,21,413,0,0,0,262,0,0,0,0,0,0,0,0,0,0,4738\n",
      "753,0,401,300,0,954,4,237,482,0,824,480,210,0,2,324,2,0,0,6,37,21,93,186,5,0,0,0,117,0,4,503,6,0,0,0,252,0,0,0,12,0,0,0,0,0,0,3785\n",
      "729,26,497,44,10,968,16,281,270,1,315,12,3,460,19,52,59,690,46,297,8,2,154,0,944,384,0,5,147,0,0,71,1,0,0,0,343,0,0,19,0,0,36,0,0,0,1,3090\n",
      "1223,0,204,171,0,1401,437,38,281,91,284,0,55,0,4,71,138,88,2,78,0,10,10,166,0,0,0,0,66,0,0,13,21,0,0,0,132,0,0,0,0,0,5,0,0,0,0,5011\n",
      "1148,30,266,678,0,1222,526,569,1289,0,20,53,0,0,62,39,44,0,642,0,0,0,435,0,0,0,0,1,64,0,0,385,183,0,0,0,74,0,0,2,0,0,0,0,0,0,0,2268\n",
      "1087,0,97,443,0,2190,142,273,148,30,57,0,21,89,502,0,214,3,18,240,134,153,12,0,0,0,0,0,103,0,0,23,0,0,0,0,8,0,7,0,0,0,0,0,0,0,0,4006\n",
      "1384,75,1734,589,0,1332,152,1,211,697,4,3,111,58,3,40,0,0,27,67,16,39,3,0,4,79,0,8,82,0,0,84,17,0,0,0,122,0,0,0,8,0,0,0,0,0,0,3050\n",
      "661,0,981,139,0,871,27,201,66,0,389,87,198,0,286,2,190,3,13,0,0,47,471,7,0,100,676,0,113,0,0,11,5,0,0,0,152,0,0,2,0,0,0,0,0,0,0,4302\n",
      "1501,14,1029,137,29,1546,245,1,92,8,22,134,65,0,70,0,152,24,2,11,0,0,8,0,79,0,0,97,196,0,0,9,571,0,0,0,18,0,0,0,0,0,0,0,0,0,0,3940\n",
      "1423,167,74,206,0,350,244,1,140,41,10,0,19,0,9,1,482,62,82,9,91,773,73,0,0,807,0,49,11,0,14,6,0,0,0,135,353,0,0,0,0,0,733,0,0,0,0,3635\n",
      "183,0,124,272,52,1898,361,2,135,0,1,0,104,0,57,17,2,1180,322,424,0,0,84,2,0,0,0,0,258,3,7,261,112,0,0,0,188,0,0,0,0,0,0,0,0,0,0,3951\n",
      "545,8,64,1109,182,691,763,0,242,102,437,1,0,0,2,1,1222,77,606,12,1,62,123,0,0,0,0,1,496,29,0,71,34,0,0,0,134,0,278,0,0,0,0,0,0,0,0,2707\n",
      "647,0,26,435,16,3785,979,355,80,0,7,363,7,0,4,0,58,2,254,186,0,0,39,0,0,54,0,0,120,0,3,5,2,0,0,0,84,0,0,25,0,0,0,0,0,0,8,2456\n",
      "3960,45,122,388,6,921,153,41,4,11,124,0,3,64,675,1,0,0,57,35,3,0,12,0,0,0,0,14,246,0,4,5,6,0,0,0,172,0,0,0,0,0,0,0,0,0,0,2928\n",
      "1047,0,9,206,37,1013,435,134,360,228,4,0,162,0,95,159,833,35,2,301,0,0,212,0,0,478,0,0,15,0,0,30,2,7,0,0,465,0,0,214,14,0,0,0,6,0,7,3490\n",
      "1907,54,45,29,2,2607,546,1,75,0,152,198,1,92,0,0,13,4,14,2,0,0,40,253,25,5,30,0,99,0,2,6,281,0,0,192,135,0,0,0,0,0,56,0,0,0,0,3134\n",
      "1123,0,158,68,58,1290,95,66,311,734,1,298,0,2,13,1,2,0,514,0,43,0,485,0,0,53,1,0,9,0,32,8,88,0,0,0,11,0,0,0,0,0,0,0,0,0,0,4536\n",
      "1087,0,63,807,1,1786,19,3,282,1,28,268,0,0,39,1,1,190,144,20,0,37,55,0,0,1,0,0,27,0,0,20,956,0,0,0,12,0,0,0,0,0,0,0,0,0,0,4152\n",
      "477,2,196,601,12,411,249,2,540,201,140,537,21,0,906,0,0,6,449,0,0,2,136,209,0,117,0,96,1,0,0,327,1,0,0,3,49,0,0,0,0,0,0,0,0,0,0,4309\n",
      "176,0,7,775,0,2240,1,1,454,0,0,1,0,80,0,115,378,0,397,98,0,34,126,0,0,3,0,0,766,0,0,142,10,0,0,0,3,0,0,0,0,0,0,0,0,0,0,4193\n",
      "713,97,160,215,0,1594,120,3,484,19,12,129,148,2,0,0,351,1,1,0,12,77,52,20,0,0,101,0,246,0,0,71,0,0,0,33,86,0,0,0,0,0,126,14,0,0,0,5113\n",
      "820,2,382,1016,0,1176,167,42,116,76,89,31,760,0,0,106,529,0,62,273,0,0,24,0,0,0,0,20,36,0,0,296,68,0,0,0,81,0,0,1,3,0,4,0,0,0,0,3820\n",
      "1655,0,294,246,285,1009,38,59,75,0,203,29,0,1,18,16,424,294,186,259,12,0,11,44,0,44,0,0,104,0,0,9,0,0,0,25,65,0,0,0,0,0,0,0,0,0,0,4595\n",
      "1236,0,454,681,0,1265,87,0,17,3,3,27,3,112,210,0,13,131,81,1011,0,134,7,13,0,5,0,6,205,0,294,336,56,0,0,16,145,0,0,179,75,0,354,0,0,0,0,2841\n",
      "689,30,204,35,301,915,45,0,161,0,461,1,359,79,122,18,39,0,93,7,803,1,367,4,0,596,0,0,52,0,1,51,183,0,0,0,4,0,0,2,0,0,5,0,0,0,0,4372\n",
      "1305,0,1082,33,15,1163,15,0,923,861,35,23,75,38,79,0,276,40,2,221,187,46,38,0,0,0,2,24,211,0,0,224,30,0,0,75,0,0,0,0,0,21,0,0,0,0,0,2956\n",
      "710,0,764,260,0,2348,0,27,189,9,68,12,58,0,163,18,309,8,130,20,0,0,75,0,209,42,0,0,48,19,0,378,12,0,0,0,8,0,0,0,0,92,0,0,0,0,0,4024\n",
      "2452,0,92,267,321,1345,630,0,558,0,111,81,114,0,17,0,92,252,156,74,0,0,50,0,0,5,0,0,425,0,1,18,322,0,0,8,21,0,0,0,0,0,6,0,0,0,0,2582\n",
      "1650,0,185,219,0,1482,44,106,330,0,1,57,0,1,1,95,243,1,0,52,1,43,21,0,0,0,7,39,931,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,246,4241\n",
      "902,154,2,181,0,1013,1,1,1486,4,47,75,10,6,14,0,12,312,66,599,0,825,6,0,0,134,0,172,7,0,18,4,15,0,0,29,99,0,0,6,0,0,0,0,0,0,0,3800\n",
      "582,70,416,126,146,633,170,0,10,0,165,0,7,24,1162,3,32,15,29,444,147,1,195,0,0,18,0,131,89,0,0,11,12,0,0,140,1,0,3,0,0,0,6,0,0,0,0,5212\n",
      "650,76,352,73,20,1164,56,320,21,0,5,52,0,0,387,0,79,0,4,1677,5,93,185,0,0,215,0,128,194,0,0,111,227,0,0,0,41,0,0,0,0,0,0,0,0,0,0,3865\n",
      "302,0,304,470,6,1895,301,1,226,0,39,3,199,5,38,568,194,63,227,51,628,0,135,0,0,0,123,0,64,0,214,90,414,0,0,0,318,0,0,146,538,0,0,27,0,0,0,2411\n",
      "391,0,18,960,1,537,39,0,44,28,615,0,29,0,0,147,71,0,5,55,186,0,408,31,32,0,0,0,89,0,529,378,6,0,1,23,0,0,0,0,65,0,2,0,0,0,0,5310\n",
      "1105,61,315,230,0,767,102,0,201,132,371,115,65,50,35,0,0,109,177,0,0,297,412,183,0,0,1,0,34,0,1,354,80,0,0,0,539,0,0,5,0,0,0,0,0,0,0,4259\n",
      "365,47,40,394,88,3011,10,257,179,194,0,34,1,688,268,508,0,17,245,17,33,0,47,1,19,0,39,0,35,412,0,14,0,0,0,15,14,1,0,0,0,0,0,0,0,1,0,3006\n",
      "558,25,254,961,36,681,3,144,124,5,141,234,63,8,526,0,152,2,250,15,247,0,116,0,0,1,0,0,187,1134,0,2,25,0,95,0,69,0,0,0,0,60,0,0,0,0,0,3882\n",
      "343,0,573,605,8,1269,0,144,206,50,18,106,728,5,304,32,20,44,31,147,0,0,185,0,0,0,1,0,334,159,140,63,333,0,0,0,39,1,0,0,0,594,0,0,0,0,0,3518\n",
      "2667,0,17,516,221,567,115,0,789,54,206,886,88,0,143,34,130,207,30,19,1,6,27,2,0,15,0,0,496,0,0,65,0,0,0,2,112,0,0,0,0,0,0,0,0,0,0,2585\n",
      "946,0,143,636,0,1350,5,0,167,224,16,41,67,58,0,13,129,8,14,362,15,0,124,1,0,3,1,21,237,0,21,173,0,0,0,0,405,0,0,0,0,1,1,0,0,23,0,4795\n",
      "174,0,519,362,0,1349,130,16,190,13,15,0,25,33,4,12,28,20,130,66,0,169,57,152,0,0,0,292,790,0,0,108,162,0,0,0,130,0,0,0,3,0,0,0,0,0,0,5051\n",
      "1936,0,245,924,0,322,607,11,2,61,68,212,11,2,749,35,203,4,7,59,3,0,15,0,0,0,0,0,212,0,167,15,64,0,0,13,746,0,7,73,0,0,0,0,0,0,0,3227\n",
      "322,1,4,1274,0,746,221,10,805,0,20,26,0,25,113,0,11,24,274,89,89,242,110,5,0,92,0,32,27,0,0,2,17,0,0,0,67,0,16,492,0,0,0,0,0,0,0,4844\n",
      "1967,0,227,381,8,667,234,27,0,0,57,126,60,9,121,0,0,168,69,5,80,1,78,0,0,0,0,106,172,0,0,476,25,0,0,0,10,0,0,0,2,0,0,0,0,0,0,4924\n",
      "418,0,301,729,456,912,55,30,132,274,211,495,0,10,349,28,314,35,12,0,0,99,368,0,0,0,11,0,24,0,30,14,54,0,0,0,6,0,0,456,0,0,1,0,0,0,0,4176\n",
      "859,120,42,57,12,406,119,167,96,0,68,127,12,4,66,0,294,662,41,0,2,2,0,76,15,811,506,15,213,0,16,261,3,0,0,4,46,0,0,0,0,0,0,0,0,0,0,4878\n",
      "547,0,10,29,6,1856,104,0,38,11,143,82,502,122,660,43,55,4,92,43,11,189,228,0,0,0,103,2,519,0,0,38,69,0,0,0,50,0,0,0,0,0,0,0,0,0,0,4444\n",
      "2291,5,190,792,4,663,95,374,430,0,371,20,7,3,169,0,522,0,42,98,0,4,0,34,0,6,0,2,319,7,0,190,774,0,0,0,0,0,0,4,1,209,0,0,954,0,0,1420\n",
      "794,0,647,1016,0,1829,121,11,36,0,142,0,15,5,46,5,4,4,42,150,4,0,93,4,0,1,1,5,32,0,7,237,189,0,0,9,52,0,0,0,0,0,0,0,0,0,0,4499\n",
      "1770,159,10,407,0,1199,9,91,1083,0,82,1,127,1,58,28,1246,122,3,4,9,162,136,0,6,0,40,62,497,0,0,15,2,1,0,0,259,0,0,0,0,0,12,0,0,0,0,2399\n",
      "1523,0,12,664,0,965,24,171,15,593,15,56,0,90,261,13,0,3,96,91,15,3,262,0,0,51,0,15,14,0,0,15,32,0,0,0,101,0,0,383,0,0,0,0,0,0,0,4517\n",
      "652,4,459,887,2,798,77,75,258,4,268,0,0,0,206,1,8,319,18,314,45,0,13,0,0,145,54,0,502,0,14,706,13,3,0,0,99,0,0,0,0,0,0,0,0,0,0,4056\n",
      "1829,0,88,137,0,1534,27,1,145,0,81,40,7,1,843,6,272,0,224,13,12,0,490,5,0,1,0,1,722,0,0,432,47,31,0,0,50,0,0,14,0,78,0,0,0,0,0,2869\n",
      "2285,127,255,755,0,1430,2,91,30,1,122,0,222,127,6,4,133,3,192,50,0,0,83,0,0,91,31,1,6,0,0,4,0,0,0,0,23,0,0,0,0,0,57,0,0,0,0,3869\n",
      "862,0,1019,136,17,1287,36,240,98,88,149,429,148,306,0,0,1,36,443,1,60,0,89,21,4,236,148,3,367,0,0,185,12,0,0,4,91,0,0,3,93,2,0,0,0,0,0,3386\n",
      "990,51,84,230,0,2364,165,11,74,0,64,568,178,3,16,0,7,7,334,141,0,192,277,1,0,60,0,0,554,0,0,134,13,0,0,0,8,0,0,0,0,0,39,0,0,0,0,3435\n",
      "2315,5,480,752,0,1054,1,15,549,0,0,0,379,4,2,121,62,1,138,2,4,0,190,0,0,1,0,0,126,0,0,3,6,0,0,0,47,0,0,164,0,0,0,0,0,0,0,3579\n",
      "158,0,611,788,16,337,1062,18,39,89,4,174,1,0,4,396,30,0,275,225,59,0,260,105,0,0,972,183,109,0,0,140,147,0,0,2,9,0,0,0,0,0,0,0,5,0,0,3782\n",
      "998,14,145,318,82,1385,888,0,56,0,0,302,13,45,188,17,0,2,19,1,0,0,1,0,8,179,37,1,315,0,0,923,81,0,0,0,18,0,0,0,0,0,47,0,0,0,0,3917\n",
      "100,0,28,0,0,1177,42,248,93,23,147,261,14,77,29,0,10,22,120,16,0,3,295,901,5,0,121,0,247,0,32,49,57,0,0,0,475,0,719,0,0,0,0,3,0,0,0,4686\n",
      "2587,2,82,117,16,1381,88,0,166,67,364,64,0,3,3,363,118,1,32,0,0,0,75,0,0,0,0,105,628,0,7,0,2,0,0,0,39,0,0,0,40,1109,134,0,0,0,0,2407\n",
      "1136,0,703,493,0,776,119,3,4,91,0,38,0,246,114,96,115,0,298,39,0,0,157,19,0,1,4,1,864,0,0,3,211,0,0,0,83,0,0,0,2,0,0,0,0,0,0,4384\n",
      "247,28,177,76,19,1907,350,1,714,69,90,78,0,497,225,36,116,2,72,93,11,0,7,0,10,0,0,0,74,0,0,346,22,0,0,0,12,0,0,0,0,0,0,0,0,5,0,4716\n",
      "271,0,171,673,2,918,22,243,17,0,1,318,101,10,172,171,830,1,126,6,0,23,332,0,0,24,0,0,35,0,1217,61,267,0,0,0,35,0,0,15,0,0,0,0,0,0,0,3938\n",
      "1030,28,375,64,0,2046,221,2,433,0,299,120,178,157,555,14,128,326,29,111,0,0,3,0,0,1,4,0,610,0,22,19,13,0,0,0,65,0,0,0,0,0,0,0,0,0,0,3147\n",
      "421,194,32,90,0,1604,252,0,1063,113,13,0,40,295,478,41,26,0,249,4,0,0,148,0,0,2,0,0,392,0,74,4,15,0,0,0,15,0,0,0,0,0,0,0,0,0,0,4435\n",
      "658,1,16,636,0,1035,524,30,229,190,741,53,76,390,7,0,194,1,54,89,0,0,4,180,2,5,13,0,214,315,0,58,4,0,0,6,27,0,54,0,0,0,0,0,0,0,0,4194\n",
      "603,0,362,129,0,2403,91,23,22,0,261,1,108,0,93,0,72,51,3,395,0,7,14,18,0,13,0,0,40,0,0,1172,2,0,0,117,37,0,0,0,0,92,0,0,0,0,0,3871\n",
      "427,81,92,260,61,2507,285,0,38,0,269,33,931,44,0,1,58,37,22,172,1,113,82,6,0,0,0,0,584,0,0,13,216,0,0,0,8,0,0,6,0,0,0,0,0,0,0,3653\n",
      "1222,0,861,678,0,677,140,13,753,0,131,16,3,70,18,7,30,0,106,101,4,42,1,0,0,0,21,49,671,0,0,100,1,0,0,35,624,0,0,184,0,0,0,0,0,0,0,3442\n",
      "1977,10,325,1564,0,493,1292,0,570,0,46,5,141,42,256,0,191,47,196,105,0,0,7,0,0,32,40,0,7,0,315,2,2,0,0,0,28,0,0,0,1,0,0,0,0,0,0,2306\n",
      "351,10,123,9,0,2318,0,0,292,2,1196,0,0,1,1,0,298,0,1,58,0,0,99,1,0,0,1,0,457,0,0,135,164,0,0,0,81,0,0,1,0,0,0,0,0,0,0,4401\n",
      "922,0,382,1982,2,299,358,0,125,246,20,0,9,18,178,5,0,45,593,15,0,0,28,0,0,11,314,0,315,0,830,17,140,0,0,11,0,0,0,0,0,0,0,0,0,0,0,3135\n",
      "1951,0,147,381,111,1403,379,4,190,65,311,18,1,0,5,86,116,91,134,37,10,0,68,0,0,45,0,2,271,0,8,380,1,0,0,0,0,0,0,16,4,0,0,0,0,1,0,3764\n",
      "1059,0,379,348,0,420,7,90,1789,1,119,5,65,227,355,0,50,6,749,89,137,0,55,0,0,1,0,1,28,8,0,3,231,0,0,0,159,0,2,0,0,0,0,0,0,0,0,3617\n",
      "1257,237,27,224,5,406,394,0,203,0,0,0,244,9,1172,36,144,0,31,8,68,244,13,0,0,0,1,0,476,0,1,464,226,1,0,2,53,0,0,0,0,0,0,0,0,0,0,4054\n",
      "481,264,251,55,0,1560,143,356,5,5,6,0,16,12,840,0,315,4,15,193,0,0,131,1,0,45,28,0,124,0,15,401,0,0,0,0,417,0,0,0,19,0,38,0,0,173,0,4087\n",
      "788,2,190,100,0,1660,461,15,187,0,320,2,71,0,11,0,100,5,2,118,0,0,3,1,0,1,0,0,470,0,0,54,0,0,0,0,120,0,110,0,0,0,5,0,0,0,0,5204\n",
      "1266,0,367,63,1,1334,12,72,10,15,323,183,11,61,223,15,208,899,89,1,28,0,52,0,3,57,0,0,717,0,0,8,565,0,0,94,7,0,0,1,0,0,0,0,0,0,0,3315\n",
      "564,799,30,801,0,1179,603,423,26,0,3,27,0,100,8,0,77,0,158,231,3,23,920,53,0,34,0,0,176,0,0,977,9,4,0,306,0,0,0,0,0,0,0,0,0,0,0,2466\n",
      "1252,1,319,34,26,761,1,24,53,190,557,20,200,0,214,7,54,329,891,225,0,0,509,462,56,2,8,0,55,0,0,0,295,0,0,71,28,0,0,0,0,0,0,0,0,0,0,3356\n",
      "1010,0,153,366,197,1196,56,0,294,0,539,186,10,2,403,26,257,132,41,216,43,360,209,165,0,26,10,28,91,0,0,265,235,0,0,0,138,0,0,1,0,0,0,0,0,0,0,3345\n",
      "820,13,1225,34,0,1058,243,200,861,0,257,48,322,2,207,0,1,16,177,4,33,0,43,0,16,0,0,0,281,0,0,193,70,0,0,5,87,0,0,55,0,0,0,0,0,0,0,3729\n",
      "1372,3,355,1289,0,615,761,62,115,0,73,14,263,453,3,56,35,35,279,121,0,0,7,183,8,25,0,5,291,0,157,71,137,0,0,2,254,0,0,5,0,0,0,0,0,0,0,2951\n",
      "1029,0,246,175,190,508,295,34,248,1,131,15,185,1769,0,174,375,40,31,1,2,0,557,0,0,0,1,8,224,0,105,130,314,0,0,0,14,0,0,0,0,0,0,0,0,0,0,3198\n",
      "686,0,120,957,409,1118,35,0,277,1,296,29,0,10,1174,106,65,96,66,17,0,0,11,0,0,7,41,229,459,0,0,424,81,25,0,0,528,0,0,0,4,0,0,0,0,0,0,2729\n",
      "1519,6,519,747,1,469,36,0,431,3,59,163,0,0,31,265,260,7,51,524,0,4,362,0,0,0,0,4,289,0,0,14,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4226\n",
      "1343,0,573,205,46,1060,789,22,564,0,119,154,121,92,53,4,364,12,46,36,4,147,0,1,0,1,0,0,84,0,4,49,639,0,0,70,222,0,0,1,35,0,7,0,0,0,0,3133\n",
      "1458,0,234,128,0,494,182,1,1556,36,16,5,197,6,443,131,37,84,14,43,6,2,130,0,0,0,0,0,2,501,0,0,44,0,0,0,508,0,0,1,0,1,0,0,22,0,0,3718\n",
      "937,8,367,123,7,1930,298,1,652,173,0,10,157,14,95,0,98,157,261,38,4,228,4,49,175,18,1,83,59,0,0,3,168,0,4,0,106,0,0,76,6,0,0,1,0,0,0,3689\n",
      "664,0,155,480,179,1162,740,8,632,0,271,21,8,0,0,3,12,5,150,92,210,0,259,2,0,88,1,0,44,0,445,131,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4216\n",
      "289,78,763,184,264,1229,62,13,259,3,14,14,248,49,1,0,117,48,245,8,0,360,127,203,2,0,1,2,123,40,24,81,25,0,0,0,10,0,0,0,1333,0,0,0,0,0,0,3781\n",
      "861,0,66,78,0,2330,46,160,126,176,132,13,39,31,12,7,0,99,7,0,60,45,110,3,0,13,0,2,3,0,152,515,1391,0,0,267,60,0,0,8,0,0,0,0,0,0,0,3188\n",
      "410,6,477,38,0,2080,101,0,1401,27,359,23,0,26,87,4,25,9,0,0,1,0,257,0,0,0,0,0,306,0,0,251,0,0,0,0,402,0,0,0,0,0,0,0,0,0,0,3710\n",
      "1862,0,323,1605,24,1327,276,69,174,0,25,134,0,12,98,0,6,0,31,114,0,105,2,0,0,0,0,0,43,0,111,532,236,0,0,0,48,0,0,0,0,0,12,0,0,0,1,2830\n",
      "1017,0,228,724,1,1419,639,112,295,0,698,8,130,0,0,0,233,5,875,134,0,12,122,0,0,0,3,0,8,0,0,77,14,0,0,1,0,0,0,32,0,0,0,0,0,0,0,3213\n",
      "483,0,125,590,0,2091,248,279,703,1,95,6,0,16,462,1,74,5,279,112,0,243,231,7,0,3,1,74,165,0,370,16,254,0,0,0,2,14,0,0,0,1,0,1,0,0,0,3048\n",
      "743,12,88,1038,94,2390,73,5,265,73,24,274,1,0,55,303,121,11,80,9,6,0,511,145,0,0,0,14,3,0,34,6,732,0,0,0,10,0,9,0,0,0,0,0,0,0,0,2871\n",
      "865,16,130,241,0,1572,1489,156,174,14,169,12,68,88,8,0,2,0,491,307,44,55,497,7,0,5,0,0,5,0,37,2,1,0,0,34,513,0,0,0,0,0,0,0,0,0,0,2998\n",
      "1014,0,1,335,519,367,11,408,197,22,22,113,0,11,5,13,235,10,122,52,0,0,339,2,0,4,0,3,96,0,115,293,0,0,0,27,1,0,0,0,0,0,4,2,0,0,0,5657\n",
      "194,0,40,220,0,2262,43,226,2,0,10,26,54,213,7,262,0,0,393,44,0,49,142,0,0,0,0,45,43,0,0,362,367,0,0,11,118,0,0,0,0,0,0,0,0,0,0,4867\n",
      "1890,8,131,371,12,802,134,34,750,120,703,13,0,28,82,5,0,45,5,204,0,89,120,0,0,0,11,0,294,0,714,3,0,0,0,0,4,0,1,0,3,0,0,0,0,0,2,3422\n",
      "552,0,89,442,0,1793,653,12,185,18,60,88,1,23,167,0,45,42,11,264,0,11,150,32,0,0,1,13,43,0,0,1,231,0,0,3,16,0,0,3,0,0,0,0,0,0,0,5051\n",
      "447,0,728,119,0,2153,38,48,763,1,6,1,0,155,5,19,33,390,349,44,1,0,30,0,21,0,0,50,313,746,1,113,2,0,0,0,0,0,10,0,1,0,0,0,0,0,0,3413\n",
      "550,0,9,314,0,1472,2,0,463,79,0,67,4,0,10,781,56,2,369,21,0,17,182,0,0,13,0,0,154,0,13,67,612,0,0,1,110,0,0,0,0,0,0,0,10,0,0,4622\n",
      "1007,6,654,606,11,1194,3,499,49,8,14,1,53,88,15,136,16,0,39,0,1,0,10,0,0,24,253,1,254,0,0,831,25,0,0,0,3,0,10,0,0,0,545,0,0,0,0,3644\n",
      "2113,26,113,472,98,1645,204,41,30,15,78,0,843,0,0,29,0,0,140,5,6,6,929,1927,0,0,8,0,8,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1253\n",
      "920,0,200,1708,75,864,41,13,91,0,223,265,39,6,1,6,193,578,340,2,13,7,46,11,0,0,0,3,168,0,0,5,0,0,0,51,227,0,1,5,0,0,0,0,0,0,0,3898\n",
      "1443,0,55,142,0,1063,0,15,745,0,45,16,520,73,220,47,2,0,0,9,37,13,86,0,73,0,8,15,25,0,0,95,0,0,0,0,535,0,0,31,0,0,0,0,0,0,0,4687\n",
      "1886,71,415,110,18,1597,52,5,149,0,17,15,187,90,38,249,22,11,142,813,0,185,203,0,0,431,0,0,875,0,8,36,0,0,0,0,183,0,0,197,0,0,0,0,0,0,0,1995\n",
      "589,176,302,120,0,2187,25,212,295,380,75,0,358,68,64,1,0,3,110,605,0,0,0,0,0,0,0,112,33,0,0,3,75,0,0,83,24,0,0,0,0,0,58,0,0,0,0,4042\n",
      "1467,0,130,140,31,1986,0,141,237,0,245,12,0,86,272,0,104,2,401,17,289,121,3,124,0,19,0,0,637,0,0,22,0,0,0,0,0,0,1,4,0,0,13,0,0,0,0,3496\n",
      "684,3,179,493,0,1245,0,3,710,5,427,2,85,4,0,109,12,0,374,313,5,17,96,0,6,12,230,0,1099,0,65,296,27,0,0,0,441,0,0,0,0,0,0,0,0,0,0,3058\n",
      "224,27,0,940,0,858,55,0,644,161,298,0,1,0,227,1763,32,0,27,3,2,4,165,0,0,0,0,151,760,0,0,13,165,0,0,0,154,0,0,3,6,0,0,0,0,0,0,3317\n",
      "1586,0,0,70,85,1868,191,20,126,192,152,0,1,0,22,11,11,166,423,23,0,0,206,5,0,2,7,0,72,0,123,12,103,0,0,0,16,0,0,2,0,0,0,0,0,0,0,4505\n",
      "1639,0,7,381,5,1999,213,0,259,4,0,15,5,64,15,43,24,22,175,8,0,0,45,3,0,25,4,6,244,0,0,258,270,0,0,1,154,0,0,0,3,0,0,0,0,0,0,4109\n",
      "1121,0,53,111,0,1676,105,0,356,4,55,0,526,53,1322,14,25,139,551,7,250,0,78,3,0,0,61,8,6,0,0,22,147,0,0,0,36,0,0,0,0,0,0,0,0,0,0,3271\n",
      "1002,18,27,261,0,1353,51,253,112,138,368,29,6,11,83,414,5,4,4,138,97,0,190,16,0,31,0,15,17,0,1,192,17,199,0,0,1,0,1,0,0,0,0,0,0,0,0,4946\n",
      "781,0,25,513,0,500,200,29,152,237,525,889,15,0,2,0,93,54,3,639,0,191,199,0,0,47,0,0,10,0,0,2,109,0,0,6,0,0,0,0,0,0,0,0,0,0,0,4779\n",
      "569,0,1222,186,0,1389,43,53,31,0,40,0,1,0,118,0,0,0,14,287,1,0,9,0,0,6,0,0,102,298,0,367,21,0,0,0,245,0,0,12,0,3,0,0,0,0,0,4983\n",
      "1563,1,198,719,0,1408,14,9,5,9,112,686,0,0,602,238,26,0,554,15,3,0,14,7,0,15,0,1,453,124,0,345,0,0,0,34,24,0,0,3,0,0,0,0,0,0,0,2818\n",
      "961,0,162,575,0,1630,2,1175,131,13,34,0,170,184,770,0,14,30,1,59,0,0,120,0,3,142,166,6,28,0,4,0,428,0,0,0,125,0,0,0,0,0,0,0,0,0,0,3067\n",
      "143,0,42,1745,3,1036,63,0,118,108,13,39,49,54,53,21,99,0,32,0,46,0,537,351,22,0,4,0,14,0,4,900,1,0,0,0,3,1,0,0,0,0,0,0,0,0,0,4499\n",
      "2159,3,38,400,0,966,223,22,355,0,2,0,16,211,0,1,88,30,102,330,8,109,645,100,59,0,0,0,115,5,3,12,65,0,0,751,1,0,0,0,1,0,0,0,0,0,0,3180\n",
      "1260,0,7,61,0,1219,436,46,205,23,78,29,265,153,0,195,56,118,204,0,1,3,151,0,1,0,0,0,696,0,1,206,5,0,0,3,331,0,0,0,18,0,0,0,0,0,0,4229\n",
      "1028,0,0,421,5,393,213,0,794,87,106,3,23,22,0,1,427,112,13,361,10,0,204,1,0,1097,0,42,47,0,0,112,0,0,0,0,11,0,0,22,248,93,0,0,0,0,0,4104\n",
      "3366,7,333,266,0,525,259,89,1,0,66,209,319,124,254,0,91,0,134,8,158,6,439,235,0,0,0,0,95,0,0,15,183,0,0,277,84,0,0,6,0,0,0,0,0,0,0,2451\n",
      "2147,0,182,321,296,1817,15,3,188,0,1,355,115,0,287,2,0,187,10,21,35,0,106,0,147,232,0,3,125,0,25,31,0,0,0,0,128,0,132,4,57,0,0,0,0,0,0,3028\n",
      "1064,1,33,232,0,1082,825,63,762,287,145,195,281,10,5,1,54,0,170,192,77,1,6,0,3,0,280,0,57,0,26,251,250,0,0,0,0,0,0,347,0,0,0,0,0,0,0,3300\n",
      "657,536,257,809,0,662,170,376,475,0,7,1,496,474,0,4,8,3,94,121,1,0,96,224,0,19,15,126,15,0,0,227,0,0,0,0,199,0,0,0,1,0,0,0,0,0,0,3927\n",
      "1012,0,34,204,0,1049,370,42,596,7,2,0,257,630,1,8,0,216,112,2,0,9,995,0,0,127,31,83,0,0,0,124,3,0,0,0,488,0,0,0,0,0,0,0,0,0,0,3598\n",
      "1251,135,683,81,0,1248,67,0,83,56,78,0,192,13,65,451,0,86,122,203,0,515,69,0,2,54,3,50,564,0,265,13,1,0,0,0,498,0,0,0,0,0,0,0,0,0,0,3152\n",
      "1464,0,620,187,0,809,88,3,79,18,692,2,2,50,47,117,259,4,39,95,1,3,0,1,0,0,7,274,4,0,168,16,45,0,0,0,917,0,0,188,0,0,0,46,0,0,0,3755\n",
      "586,0,148,498,3,929,113,35,183,98,740,77,0,0,8,0,0,1711,276,2,0,91,9,0,16,0,0,0,895,0,0,2,389,0,0,0,35,0,0,0,99,0,214,0,0,0,0,2843\n",
      "698,15,841,1055,16,1355,2,386,6,1,0,107,55,26,32,80,4,113,60,17,166,10,277,9,0,2,105,0,4,0,0,41,29,0,0,0,138,0,0,2,3,0,0,0,0,0,0,4345\n",
      "1482,19,194,343,34,1140,98,0,566,0,126,0,67,132,2,1,182,31,95,299,0,24,606,0,1,0,0,112,491,0,0,24,1,0,0,0,1521,0,0,0,0,0,0,0,0,0,0,2409\n",
      "786,0,261,206,0,3129,43,30,43,0,22,276,83,6,38,0,32,0,43,95,0,116,15,0,0,0,0,15,51,0,0,142,53,0,0,0,25,0,0,65,146,0,1,0,0,0,0,4278\n",
      "572,0,837,197,0,611,236,42,269,571,147,197,67,258,14,0,4,2,251,931,0,0,3,10,0,0,145,1,141,0,47,0,157,0,0,0,69,0,0,0,0,0,0,161,0,0,0,4060\n",
      "955,0,321,654,1,1307,205,33,166,0,79,0,400,69,174,84,17,105,442,217,10,0,24,0,0,167,0,0,58,0,0,93,32,0,0,0,3,0,22,36,0,0,0,0,0,0,0,4326\n",
      "1452,0,309,489,0,486,113,254,211,207,22,7,691,169,161,920,431,3,173,0,0,42,285,10,0,3,0,0,162,0,61,301,377,0,0,96,0,0,0,13,0,0,0,0,0,0,3,2549\n",
      "491,0,255,555,1,1029,0,0,651,680,330,16,0,91,39,0,357,233,185,922,3,40,23,0,2,0,0,0,1181,0,54,74,37,0,0,0,4,0,0,7,0,0,151,0,0,0,0,2589\n",
      "1153,5,293,780,2,1155,18,0,83,11,209,253,3,2,380,234,32,2,479,732,1,6,787,10,0,176,0,69,140,211,5,4,0,0,0,0,33,0,0,0,0,0,1,0,0,0,0,2731\n",
      "1517,0,869,48,0,558,14,0,127,0,1,2,1,145,710,1,6,305,12,624,0,0,38,2,7,0,13,90,55,0,0,46,2,0,0,0,0,0,0,2,0,0,0,0,0,30,0,4775\n",
      "902,17,204,159,0,2635,464,1,329,0,103,19,89,0,0,0,86,362,33,88,131,0,209,72,0,5,3,483,30,0,0,2,0,0,0,9,25,0,0,0,0,0,0,0,0,0,0,3540\n",
      "2241,0,11,950,0,958,1,3,23,0,259,466,377,0,6,0,82,677,5,260,0,0,361,128,15,73,209,1,164,0,2,64,0,1,0,0,277,0,0,0,0,0,0,0,0,0,67,2319\n",
      "459,0,536,601,16,1470,420,291,518,3,340,0,85,0,0,459,63,98,60,7,0,0,98,8,0,0,460,46,157,0,1,1206,1,0,0,351,0,0,0,0,0,0,0,0,0,0,0,2246\n",
      "527,0,41,635,0,1624,529,26,161,40,51,50,147,76,191,6,17,6,24,665,0,11,828,8,0,0,0,0,182,0,0,103,4,0,0,254,757,3,0,758,0,0,0,7,0,0,0,2269\n",
      "812,96,36,589,0,1609,169,0,190,0,102,0,4,0,16,468,187,1,10,164,0,33,462,25,1,22,86,0,62,0,163,985,1,0,0,0,38,0,0,0,164,0,0,0,0,0,0,3505\n",
      "1436,0,78,230,0,2178,203,105,46,45,53,12,133,63,45,44,15,31,28,89,0,275,60,3,0,49,50,0,121,0,0,221,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4355\n",
      "1586,678,165,142,161,1427,5,0,39,0,205,38,0,183,108,1,36,105,85,75,89,158,110,0,0,164,0,0,21,0,91,333,2,0,0,0,2,4,0,0,0,0,0,0,0,0,0,3987\n",
      "874,0,176,381,83,1015,1520,10,62,0,678,27,37,45,28,72,81,74,311,93,0,0,293,6,0,0,0,0,14,0,111,1234,19,0,0,40,1,0,0,0,0,0,0,0,0,332,0,2383\n",
      "1495,0,83,1219,20,1102,1,0,787,113,35,5,4,20,289,0,22,26,315,639,0,92,121,73,4,0,7,22,302,0,29,6,99,0,0,0,29,0,0,0,0,0,8,0,0,0,0,3033\n",
      "1066,5,324,71,129,600,546,1,356,321,204,68,3,656,37,313,129,273,127,21,1,4,458,0,0,0,1,0,248,0,0,165,23,0,0,18,83,0,9,0,0,0,102,0,0,0,0,3638\n",
      "466,2,378,343,0,1591,346,825,250,0,2,196,478,51,0,27,0,157,140,4,0,0,5,8,20,10,0,0,113,0,0,0,69,0,0,824,1,0,0,51,408,8,0,0,0,0,0,3227\n",
      "537,0,122,370,2,484,340,0,488,6,30,0,39,387,46,187,116,0,207,299,25,97,594,0,0,0,14,2,234,118,5,27,227,0,0,0,94,0,0,279,0,0,0,0,0,0,0,4624\n",
      "2098,12,332,1625,59,2034,831,17,140,0,2,13,15,10,87,0,4,0,0,58,226,6,5,11,0,34,39,0,279,0,125,72,1,0,0,0,1,0,0,0,62,0,0,0,0,0,0,1802\n",
      "1297,0,302,252,0,897,95,0,66,0,119,393,143,328,23,236,172,356,321,83,0,0,1,0,0,10,0,0,792,0,0,91,22,15,0,0,0,0,0,96,0,0,0,0,0,0,0,3890\n",
      "1511,250,498,371,0,1544,184,232,338,0,135,0,60,149,453,0,21,40,87,275,0,0,92,0,0,0,0,0,11,0,0,91,0,9,0,44,2,0,0,13,109,0,27,0,0,0,0,3454\n",
      "667,0,937,126,15,1508,79,6,462,222,26,112,137,0,35,0,0,200,582,2,0,4,545,136,0,0,0,24,24,0,2,209,32,0,0,0,463,0,0,0,0,0,0,8,0,0,0,3437\n",
      "185,4,479,507,0,681,114,134,1176,0,0,0,245,0,134,6,247,0,188,186,0,0,1061,54,0,180,3,0,32,0,75,8,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4264\n",
      "1386,0,313,199,2,1334,84,63,84,47,188,222,152,6,113,0,3,4,137,8,8,0,282,0,0,115,0,142,411,0,4,1082,47,0,0,0,25,91,0,0,0,0,0,0,0,0,0,3448\n",
      "2408,30,81,781,0,967,399,7,372,0,34,0,0,8,179,23,57,371,155,223,0,3,28,0,58,0,0,0,947,22,0,15,0,0,0,13,13,0,0,247,0,0,2,0,0,8,0,2549\n",
      "2304,5,70,46,0,1625,19,1,218,21,403,19,81,106,32,0,0,0,0,0,0,124,475,0,26,162,1,356,508,0,0,168,8,0,0,0,6,0,0,0,0,0,0,0,0,0,0,3216\n",
      "1452,0,172,169,10,2880,306,0,612,0,276,7,132,0,579,78,136,77,157,22,0,11,71,14,9,318,1,27,201,0,0,82,0,0,0,0,286,0,0,2,1,0,0,0,0,0,0,1912\n",
      "523,0,295,1654,0,1613,75,339,399,0,48,0,113,19,202,0,168,364,31,210,0,2,332,0,0,1,49,0,518,0,1,30,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2992\n",
      "2657,0,246,68,0,2889,46,68,3,0,21,5,11,1,0,1,87,0,3,30,0,18,260,2,3,8,0,0,168,0,0,578,30,0,0,0,141,0,0,0,0,0,0,0,0,0,0,2656\n",
      "1948,0,45,175,0,1215,2,30,124,211,33,199,75,28,105,1,36,171,72,259,5,12,163,0,0,13,27,0,29,156,0,1271,160,0,0,0,159,0,0,0,8,0,0,0,0,0,0,3268\n",
      "1567,0,351,589,0,1250,57,3,273,54,10,21,0,33,37,0,409,1,91,90,5,516,124,1,0,11,30,0,24,0,88,78,0,75,0,0,0,0,0,0,0,0,0,0,0,8,0,4204\n",
      "1065,131,346,181,0,829,4,0,32,0,106,194,319,15,69,50,274,291,229,7,1,0,313,3,0,2,0,0,121,0,0,1,1,0,0,862,36,0,0,1,0,0,0,0,0,0,0,4517\n",
      "2441,0,98,672,0,816,8,77,66,8,375,344,18,276,40,7,64,10,4,11,23,0,165,5,85,11,0,53,375,0,326,53,62,0,0,0,337,0,0,0,0,0,21,0,0,0,0,3149\n",
      "1931,0,45,207,15,1140,53,0,35,552,188,175,41,89,37,18,12,46,113,35,137,0,136,9,0,42,3,0,313,0,29,83,552,0,0,0,0,0,0,0,4,0,0,0,0,0,0,3960\n",
      "139,0,323,115,0,1220,755,1,1148,0,27,39,90,1,90,18,0,1,183,150,7,3,854,27,0,22,0,538,13,0,0,26,2,0,0,0,216,0,0,0,0,0,0,0,0,0,0,3992\n",
      "1242,0,537,620,0,1299,52,334,64,124,1,15,58,97,758,4,286,0,29,153,0,277,1,0,4,10,72,226,189,0,0,391,45,0,4,0,26,0,0,0,0,0,244,0,0,0,0,2838\n",
      "1548,0,87,95,0,1142,787,85,288,36,14,56,370,0,41,2,0,123,68,21,0,0,198,0,0,477,0,14,41,0,0,1576,9,0,0,0,48,0,0,1,0,0,0,0,0,0,0,2873\n",
      "38,0,1421,41,321,1357,31,20,1480,0,77,4,559,1,201,0,348,0,89,0,0,1,3,80,14,131,10,50,76,0,0,102,229,0,0,262,35,0,15,1,0,1,0,0,0,0,0,3002\n",
      "1245,58,147,96,0,1985,56,74,35,0,158,33,0,86,850,0,6,1,1244,6,57,0,21,0,118,0,4,12,205,0,90,48,0,0,0,0,21,0,0,0,0,0,6,0,0,0,0,3338\n",
      "924,37,175,80,4,742,103,220,1450,0,122,19,175,20,279,0,0,63,119,0,1,1,2,121,0,0,0,0,233,0,0,6,3,0,0,541,29,0,11,0,9,441,0,0,0,0,0,4070\n",
      "1851,0,46,169,0,1270,10,296,476,1,41,2,25,3,613,271,0,12,3,9,9,0,162,0,0,6,0,59,340,0,4,64,249,0,0,14,4,0,0,6,0,35,0,17,0,0,0,3933\n",
      "460,23,116,494,0,1172,43,186,618,466,3,0,126,0,169,12,147,9,120,499,0,0,155,12,0,6,75,503,26,0,5,539,9,0,0,0,273,0,0,0,0,0,0,0,0,0,0,3734\n",
      "704,0,89,255,4,1494,0,6,10,19,2,234,87,28,2,117,5,86,170,222,675,0,549,0,35,161,9,378,7,0,0,34,41,0,0,49,6,0,0,0,0,0,0,2,0,0,0,4520\n",
      "1258,26,21,262,186,958,20,12,231,0,0,0,38,49,726,538,7,28,15,170,195,0,309,0,0,0,0,0,539,0,0,226,0,0,0,0,0,0,0,0,8,0,0,0,0,0,22,4156\n",
      "1060,114,267,609,7,443,281,7,51,5,31,0,128,207,25,30,35,2,22,19,1,6,297,0,196,1,1,10,635,1,0,131,64,0,0,34,472,0,0,0,0,0,0,0,0,0,0,4808\n",
      "487,4,5,105,18,2828,0,0,754,0,46,15,13,6,10,84,1090,163,550,146,0,65,353,1,0,3,0,0,14,0,0,120,6,0,0,0,7,0,0,1,0,0,0,0,0,0,0,3106\n",
      "647,0,12,241,0,1464,0,5,3,179,0,4,0,0,219,80,0,0,173,2,0,28,250,0,0,0,98,67,353,0,0,167,203,0,0,26,75,0,0,183,0,0,28,0,0,0,0,5493\n",
      "978,1,507,174,0,1414,34,5,193,1004,23,1,99,0,334,31,1,43,1,0,0,230,450,0,73,1,0,0,139,0,0,48,1,0,0,0,65,0,0,0,0,0,0,0,0,0,0,4150\n",
      "762,80,185,661,0,1172,422,98,81,1,3,32,0,1,7,28,26,298,1,1,0,1,212,1731,0,94,0,1,306,0,0,222,8,0,0,0,4,0,12,0,0,426,0,0,0,0,0,3124\n",
      "578,0,70,154,0,1604,123,13,598,0,644,201,204,0,105,0,0,0,0,228,155,0,1675,118,56,0,80,159,300,0,1,150,0,0,0,0,0,0,0,0,39,0,0,0,0,0,0,2745\n",
      "509,0,124,519,0,558,119,84,318,0,151,106,120,124,1,0,3,510,1153,869,14,0,140,1,1,0,0,0,29,3,37,217,11,0,0,0,149,0,0,588,0,0,0,0,0,0,0,3542\n",
      "795,329,122,469,12,1015,282,0,577,0,35,513,52,0,862,85,44,68,3,306,0,46,30,0,194,1,307,7,116,12,0,396,392,0,0,0,46,0,0,1,0,0,0,0,0,0,0,2883\n",
      "1674,0,409,1255,3,788,558,320,533,0,0,5,33,242,39,0,334,0,0,4,0,114,622,0,0,0,0,78,8,0,17,36,317,0,0,27,39,0,1,0,0,0,7,0,0,0,0,2537\n",
      "344,0,29,543,0,574,0,0,544,0,10,1,13,71,22,49,0,7,2,274,0,0,357,27,0,199,0,1,804,0,0,391,4,17,0,0,2425,0,0,0,473,0,144,0,0,0,0,2675\n",
      "2628,0,162,292,22,1374,65,336,158,1,61,1,7,0,80,12,119,93,52,9,31,75,52,48,0,5,3,0,590,0,0,60,28,0,0,0,196,0,0,0,0,0,0,0,0,0,0,3440\n",
      "1236,0,637,524,0,300,3,131,193,0,126,3,41,2,90,14,492,373,386,871,0,678,101,0,0,286,0,303,174,0,12,214,164,0,0,3,10,0,0,27,0,1,0,0,0,0,0,2605\n",
      "712,0,282,194,6,1394,118,205,128,0,94,4,11,330,53,22,88,0,98,12,0,26,865,446,1,103,4,0,351,0,9,0,7,0,0,0,0,0,0,1,0,0,0,0,0,0,0,4436\n",
      "696,0,176,389,209,893,334,352,103,0,55,0,39,12,306,7,52,124,114,27,74,1,2,0,0,0,0,0,32,0,0,377,14,0,0,4,43,0,14,0,0,0,2,0,0,0,0,5549\n",
      "1715,4,598,636,355,1199,0,122,676,0,124,97,1,252,8,30,0,0,531,7,0,0,305,36,0,0,130,0,0,0,0,162,88,0,0,0,80,0,0,0,0,107,19,0,0,0,0,2718\n",
      "412,176,211,200,0,1735,90,37,884,8,34,156,20,0,1434,0,0,121,93,11,6,0,7,1,15,1,73,0,400,0,5,114,0,0,0,6,4,0,0,0,0,0,0,0,0,0,0,3746\n",
      "697,25,32,335,0,2095,14,20,312,192,72,300,128,1,5,111,0,487,46,11,1,0,277,0,0,0,13,14,3,0,1,132,709,0,0,41,55,0,32,0,0,0,0,0,0,0,0,3839\n",
      "584,14,709,456,293,2864,81,0,219,0,25,133,5,0,121,0,59,0,68,153,1,46,226,1,0,17,0,9,9,0,3,0,8,0,0,0,1,0,0,0,0,0,0,0,0,0,0,3895\n",
      "585,0,703,236,16,1151,1,0,277,0,2,546,631,0,119,34,1448,21,115,0,0,0,44,3,0,0,0,30,15,0,0,37,86,0,0,7,136,0,0,0,0,0,0,0,0,0,0,3757\n",
      "751,0,122,276,0,1347,7,1,304,0,1,16,13,0,0,24,232,0,528,167,0,3,32,484,0,2,243,0,136,60,226,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,5015\n",
      "650,0,139,204,0,1737,43,0,168,0,460,0,5,1,244,136,505,2,152,8,0,54,78,0,0,4,32,0,28,0,17,27,82,0,0,0,72,0,0,30,0,0,0,0,0,0,0,5122\n",
      "1388,0,282,1640,0,627,233,110,39,0,27,0,0,9,15,12,0,13,20,43,2,231,304,212,0,0,0,1,0,0,3,0,0,0,0,0,187,0,0,2,0,0,0,0,0,0,0,4600\n",
      "474,31,72,283,775,1763,72,17,111,135,300,1,336,1,258,6,0,0,157,84,0,0,23,0,63,0,0,15,10,0,260,71,204,0,0,19,193,0,0,15,2,0,0,0,0,0,0,4249\n",
      "1416,0,457,521,6,881,0,514,180,0,104,21,81,391,52,125,95,0,2,0,20,0,601,0,0,6,0,0,1084,0,1,15,0,0,0,27,15,0,0,84,0,0,0,0,8,14,2,3277\n",
      "846,1,210,756,0,1352,0,0,653,3,67,7,83,0,9,65,5,0,68,5,0,0,151,0,0,384,1,0,519,0,0,660,157,0,0,75,4,0,0,60,0,0,0,0,0,0,0,3859\n",
      "1939,0,242,255,133,1423,18,1,64,22,509,7,26,82,4,41,282,3,2,196,52,23,22,136,3,62,58,0,607,0,50,22,7,0,0,0,7,0,0,1,6,0,0,0,0,0,0,3695\n",
      "1139,0,135,460,0,661,2,3,1140,0,23,11,74,15,2,65,110,0,800,0,29,2,17,156,0,0,0,0,1,0,0,108,65,0,0,0,4,0,0,0,0,6,25,0,0,0,0,4947\n",
      "1040,143,491,582,0,1348,92,28,8,0,1491,5,10,70,274,0,6,0,317,17,245,108,215,0,0,0,317,47,433,0,4,3,1,0,0,0,0,0,0,56,0,0,0,0,0,0,0,2649\n",
      "1328,0,67,357,24,895,333,0,25,8,28,92,1,0,566,0,1370,0,544,999,7,28,40,0,57,60,299,0,81,0,5,1,3,20,0,0,314,0,2,19,6,0,0,0,0,0,0,2421\n",
      "596,0,121,284,4,1226,48,42,754,0,9,825,0,32,100,124,130,0,8,18,5,84,181,3,0,547,3,0,517,0,169,8,0,0,0,0,7,1,0,0,0,7,0,0,0,0,0,4147\n",
      "1385,14,137,130,0,916,80,35,75,2,420,4,0,17,261,0,49,288,0,161,313,0,7,8,0,188,0,0,454,0,1517,5,153,0,0,0,283,0,0,8,0,0,34,0,0,0,0,3056\n",
      "1981,0,525,546,2,1176,79,26,71,48,43,0,0,45,49,3,0,21,16,117,0,0,315,0,5,0,0,3,55,0,4,372,41,1,0,0,1,0,0,0,0,0,0,0,0,0,0,4455\n",
      "2193,9,490,119,0,1573,95,2,135,0,113,26,331,0,136,10,67,22,88,212,0,0,128,0,0,2,89,34,75,0,0,498,0,0,0,0,93,0,0,0,6,0,0,0,0,0,0,3454\n",
      "830,0,178,278,0,1276,128,3,163,2,390,1120,82,15,1,68,487,133,11,21,4,5,119,3,1,1,1,0,29,0,0,168,284,0,0,0,1,0,0,97,0,0,0,0,0,5,0,4096\n",
      "780,87,26,877,238,1790,29,39,172,0,15,0,53,70,62,2,62,89,92,43,428,21,4,80,0,11,0,0,271,0,0,2386,211,0,0,0,15,0,0,2,0,0,0,0,0,0,0,2045\n",
      "417,2,1241,84,149,1151,345,61,158,0,90,129,63,145,45,6,28,295,9,69,0,16,1,0,0,0,5,0,597,0,5,356,35,0,0,0,13,21,9,0,69,0,109,1,0,0,273,4003\n",
      "264,0,241,284,322,1291,167,1,130,535,36,40,44,51,144,0,0,2,111,86,1,165,49,78,0,0,197,0,885,0,50,3,36,0,0,0,4,0,0,0,0,0,0,0,0,0,0,4783\n",
      "1109,2,138,1077,760,2069,640,168,5,0,16,0,0,0,1,123,451,0,3,1,1,2,144,0,79,1,0,0,28,0,0,14,50,0,0,0,5,0,0,14,0,0,0,0,0,0,0,3099\n",
      "1904,1,168,117,0,974,74,611,87,221,118,136,432,994,171,0,8,19,21,0,0,1,33,15,0,0,0,6,55,0,0,305,258,81,0,0,8,0,3,0,0,0,0,0,0,0,0,3179\n",
      "1068,4,213,243,1,1129,0,4,910,193,0,14,155,11,964,0,1,0,25,14,170,2,394,41,0,231,0,218,23,0,0,443,270,0,0,3,859,0,0,0,0,0,35,0,0,3,0,2359\n",
      "1927,0,8,538,0,1094,165,1218,58,107,7,414,1,108,3,414,7,5,24,45,2,115,0,152,0,1,0,3,12,31,4,303,358,0,0,0,58,0,0,35,0,0,0,0,23,0,0,2760\n",
      "1312,5,243,1086,0,922,5,162,38,30,2,375,17,20,173,7,89,183,274,6,0,31,9,146,0,457,0,0,76,0,0,21,153,68,0,0,1463,0,0,2,1,0,0,0,0,0,0,2624\n",
      "2308,0,141,120,9,1281,37,113,210,0,214,39,0,269,441,206,4,35,12,77,0,143,233,0,38,0,1,8,923,0,0,106,10,0,0,5,3,0,0,0,0,0,0,0,0,0,0,3014\n",
      "870,144,314,1615,0,751,89,0,132,113,9,0,0,0,222,108,0,29,70,4,0,0,24,0,0,75,120,5,620,0,7,374,14,0,0,0,104,0,0,73,0,0,0,0,0,0,0,4114\n",
      "144,117,0,91,0,1494,367,3,84,98,688,547,2,5,0,19,0,330,9,1,0,186,0,0,0,0,139,0,375,0,0,15,61,0,0,21,56,0,5,0,0,0,0,0,0,67,0,5076\n",
      "274,65,97,444,24,1993,45,152,146,947,1119,68,1,118,0,4,86,1,2,245,14,0,101,52,0,0,1,0,77,0,41,407,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3447\n",
      "672,2,134,1181,3,1844,67,0,770,2,527,2,117,92,50,32,81,0,5,153,10,441,122,44,0,0,0,0,49,24,0,0,110,0,0,0,6,0,2,0,0,1,0,0,0,0,0,3457\n",
      "503,109,791,415,0,836,99,463,14,0,11,15,148,43,2,6,144,0,163,0,99,1,58,104,0,0,110,0,539,0,0,15,362,0,28,1,56,0,501,0,0,0,0,0,0,0,0,4364\n",
      "619,0,612,459,72,2116,13,10,285,0,212,0,2,1,0,10,27,44,870,231,2,0,42,0,0,0,0,0,155,0,156,371,15,0,0,0,20,0,0,6,0,0,0,1,569,0,0,3080\n",
      "214,165,3,43,0,559,1180,770,316,0,46,5,1,438,788,0,76,32,189,133,0,52,1,260,0,287,363,0,75,0,6,197,553,0,0,1,1,0,0,1,0,0,0,0,0,0,0,3245\n",
      "516,0,157,359,6,1105,0,4,267,65,0,5,2,0,1135,7,8,124,118,154,0,41,16,0,0,21,0,0,100,0,0,12,32,0,0,0,710,0,0,2,0,0,2,0,0,0,0,5032\n",
      "1742,8,178,149,5,663,154,294,138,0,733,641,572,0,8,0,5,56,1,0,143,60,289,165,1,0,0,0,27,1,875,190,1,0,0,0,188,0,0,0,0,0,0,0,0,0,0,2713\n",
      "403,11,528,66,9,1232,2,18,40,0,486,272,19,725,33,163,212,51,237,819,197,0,23,0,0,1,34,0,1,0,0,7,784,0,0,85,14,0,0,361,0,244,0,0,0,0,0,2923\n",
      "1032,0,79,923,2,1913,41,1,27,0,76,7,0,0,96,0,2,2,270,180,1,0,108,102,0,28,5,0,4,0,21,192,3,0,0,0,134,364,0,5,0,15,0,0,0,0,0,4367\n",
      "686,0,4,514,142,809,71,317,1,822,3,40,6,3,121,0,106,993,7,24,0,126,141,23,144,2,0,38,194,0,10,227,234,0,0,60,71,0,0,295,0,0,0,0,0,0,0,3766\n",
      "790,0,311,722,5,1335,501,0,355,98,0,165,9,0,0,12,680,417,252,36,0,1,99,145,360,0,0,0,127,0,3,339,21,0,0,0,6,0,0,2,112,0,0,0,0,0,0,3097\n",
      "485,0,260,340,0,1539,278,59,1134,20,69,0,8,1,24,0,69,0,413,313,0,40,2,0,0,192,0,44,5,30,15,107,0,0,10,89,0,0,0,2,0,0,0,0,0,0,0,4452\n",
      "958,0,400,47,0,757,142,26,940,27,8,21,7,7,115,0,13,7,18,586,866,188,298,23,1,1,0,0,254,0,2,241,7,0,0,0,0,0,0,25,0,34,0,108,0,0,0,3873\n",
      "918,0,0,201,0,1001,96,438,398,0,53,0,44,1082,46,4,67,4,0,521,69,0,130,69,16,7,12,56,413,4,0,147,51,0,0,1,9,0,0,0,105,9,0,0,0,0,0,4029\n",
      "411,0,167,924,52,1156,262,6,36,0,0,341,0,0,5,0,3,0,22,2,13,1,9,0,0,0,0,3,54,0,97,7,0,0,0,15,0,124,0,1,0,0,0,0,0,0,0,6289\n",
      "339,0,15,411,0,2186,29,0,157,442,1430,0,1,1,79,362,20,5,232,22,0,102,269,761,0,7,0,7,635,0,1,0,43,0,0,0,146,0,0,23,5,0,0,0,0,0,0,2270\n",
      "833,0,5,668,102,1104,242,158,4,0,0,0,94,61,511,45,105,14,15,509,0,0,518,377,0,0,0,189,142,0,0,663,19,0,0,0,168,0,0,0,0,0,0,0,0,0,0,3454\n",
      "495,175,45,225,346,686,4,0,296,216,871,208,6,8,6,1,152,57,2,32,472,75,392,2,5,0,0,0,47,0,0,1,56,0,0,47,36,0,103,0,0,0,0,0,0,0,0,4933\n",
      "1712,401,927,98,602,1047,122,300,75,8,134,2,80,60,107,17,12,243,10,3,1,1,629,21,142,0,0,0,84,0,1,122,0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,3022\n",
      "868,2,301,1600,0,1426,90,0,326,0,33,10,0,0,51,0,2,32,0,278,2,0,251,195,0,5,0,281,464,29,0,0,0,0,0,13,1,0,0,0,0,0,0,102,0,0,0,3638\n",
      "801,46,396,36,25,614,317,2,336,0,135,761,22,153,601,0,1,490,1,6,0,270,1,228,6,0,0,0,47,0,1,13,328,0,0,0,223,0,0,0,0,0,27,0,0,0,0,4113\n",
      "1346,0,2,1381,0,263,8,55,1540,245,8,0,0,0,397,77,95,28,1,72,0,0,194,1,0,11,3,0,160,0,4,3,31,0,17,0,1,1434,0,0,0,0,0,0,0,0,0,2623\n",
      "1284,23,18,841,0,400,3,114,156,0,8,28,128,13,982,14,1165,22,65,2,0,3,0,0,40,0,415,1,242,0,0,79,0,0,0,1098,222,0,71,0,0,0,0,0,0,11,0,2552\n",
      "607,0,576,56,84,2713,226,1,139,414,253,30,73,37,278,297,0,43,96,1,0,0,30,0,0,0,5,4,16,0,12,277,25,0,0,54,6,0,0,0,0,0,0,0,0,0,0,3647\n",
      "1352,294,105,144,5,1227,135,83,564,70,44,0,85,20,0,43,19,172,121,531,18,47,9,3,214,109,0,0,19,0,0,551,3,0,0,0,3,0,49,0,0,0,0,0,412,0,0,3549\n",
      "821,1,16,373,627,1000,0,107,17,0,32,223,20,256,234,3,0,0,201,483,0,0,98,4,0,0,0,0,454,0,79,204,71,0,0,0,71,0,6,0,0,0,0,0,0,0,0,4599\n",
      "1738,0,212,220,0,2270,46,1,115,7,0,132,11,0,2,0,0,6,58,624,65,0,85,1,0,0,41,14,236,0,0,14,0,0,0,4,3,0,0,0,47,779,7,0,0,0,0,3262\n",
      "1392,0,549,401,3,1178,0,29,543,21,14,19,407,43,0,960,519,605,82,9,0,0,173,0,0,0,0,0,9,11,0,63,1,0,0,0,7,0,0,211,10,0,0,0,0,0,0,2741\n",
      "1431,3,135,770,1,1706,83,78,49,0,15,2,132,358,755,38,0,162,241,113,0,10,11,117,0,38,8,149,117,0,0,852,4,60,0,0,0,0,6,18,68,5,0,0,0,0,0,2465\n",
      "737,0,630,579,59,882,176,67,257,8,108,170,53,101,91,0,10,0,3,153,49,568,609,42,0,0,0,0,17,45,1,1,2,7,0,0,157,0,0,1,0,0,0,0,0,0,0,4417\n",
      "856,0,61,112,0,926,31,13,244,719,41,318,13,226,30,1,0,76,2,45,1,0,119,21,0,43,3,55,33,0,2,193,88,0,0,0,284,0,226,104,5,0,0,0,0,0,0,5109\n",
      "1278,0,202,11,0,466,585,34,42,15,3,766,0,0,51,74,8,6,88,213,0,77,412,1,0,0,0,35,1026,254,0,340,0,0,0,22,43,0,0,0,0,2,0,0,0,0,0,3946\n",
      "1416,0,262,206,2,1344,79,0,267,0,0,9,265,0,381,4,1,0,92,66,18,454,37,4,0,36,0,31,64,0,45,47,0,0,0,1,47,278,1,0,0,0,0,0,0,0,0,4543\n",
      "474,257,445,354,1,782,362,883,517,192,0,179,16,11,284,0,502,0,14,112,0,3,171,0,0,262,0,0,152,0,0,27,10,0,0,0,0,0,0,18,0,0,0,0,0,0,0,3972\n",
      "1770,1,457,176,0,1569,22,43,6,76,91,37,41,0,405,3,1,4,121,1,0,0,837,1,1,0,206,2,147,0,0,10,1,0,0,1,232,0,0,0,1,0,0,0,0,6,0,3731\n",
      "985,0,117,12,0,2989,45,101,259,0,143,0,12,91,170,35,316,11,194,73,0,6,220,1,116,145,19,1,26,0,0,284,289,0,0,0,99,0,0,0,0,0,0,0,0,0,0,3241\n",
      "515,0,14,793,0,934,34,148,52,40,257,5,4,1,172,0,25,18,316,232,749,0,20,2,0,151,0,0,238,4,3,443,100,0,0,0,12,0,0,0,0,0,0,23,0,0,0,4695\n",
      "781,2,203,80,303,2262,13,289,211,2,11,0,11,1,12,257,0,0,119,23,7,4,1,1,0,0,0,0,174,0,6,129,8,0,0,63,727,0,0,0,1,0,0,0,0,0,0,4299\n",
      "1298,0,201,1111,0,1798,494,37,246,26,516,117,22,106,103,8,64,109,200,59,0,23,381,8,0,0,0,0,6,0,0,47,9,0,0,0,6,0,0,0,0,0,0,158,0,0,0,2847\n",
      "567,9,3,691,8,2506,363,0,690,0,0,55,47,53,7,58,758,86,35,10,64,6,22,270,7,16,0,0,108,0,1,4,232,40,0,0,142,0,1,0,0,2,0,0,0,0,0,3139\n",
      "739,7,2126,10,1,1043,1,1,299,0,15,5,15,21,13,0,40,315,11,0,73,68,1,0,0,0,1,0,218,0,44,0,1,0,0,0,67,0,0,28,0,0,0,0,0,0,0,4837\n",
      "872,66,22,547,0,1893,6,0,145,0,596,0,73,0,6,106,8,88,16,0,2,6,1,0,5,85,5,0,318,0,0,647,0,0,0,9,7,0,0,17,0,1,0,37,0,0,0,4416\n",
      "713,0,49,735,0,1435,32,116,2,27,10,1,1,0,27,4,201,2,9,278,163,254,0,1,7,211,0,0,776,0,0,366,2,0,0,0,34,0,0,3,0,0,401,0,0,0,0,4140\n",
      "771,0,12,39,28,1187,196,0,134,55,335,625,2,3,410,90,229,0,707,8,1,1,157,24,87,0,5,0,113,0,0,785,21,0,0,4,120,0,0,2,194,174,125,0,0,0,0,3356\n",
      "1481,14,179,39,2,2218,67,5,161,566,172,135,51,0,3,111,12,63,5,2,4,0,262,4,26,2,1,0,0,0,0,59,0,0,0,51,0,0,25,1,0,0,0,0,0,0,0,4279\n",
      "1519,0,16,895,3,1688,8,0,17,0,18,1,18,0,162,33,428,0,755,0,0,0,9,0,0,242,0,0,178,0,109,82,0,0,7,0,24,0,0,150,0,0,0,0,0,0,0,3638\n",
      "433,15,551,1771,0,1665,82,24,39,1,38,0,12,203,1,2,4,15,346,2,0,299,296,127,57,0,0,0,27,0,0,7,26,0,0,0,147,0,0,13,0,0,0,114,0,0,0,3683\n",
      "453,6,855,102,6,401,14,39,165,111,14,0,30,196,873,741,12,2,91,466,11,268,383,38,0,0,0,350,4,0,296,0,3,0,0,56,2,150,155,0,1,0,1,0,0,0,0,3705\n",
      "333,0,74,306,0,1686,314,0,18,0,188,5,93,260,757,7,52,120,331,368,48,105,0,12,311,2,19,0,81,0,27,771,3,0,1,0,856,0,0,0,0,0,6,0,0,4,0,2842\n",
      "556,0,522,390,116,2173,423,5,8,0,10,1,435,0,59,0,0,19,160,250,32,5,125,25,0,0,0,0,4,0,286,84,95,0,0,39,67,0,0,0,0,1,0,0,0,0,0,4110\n",
      "414,49,474,719,0,511,227,2,582,348,0,3,63,36,27,542,109,1,26,374,30,71,0,37,0,42,0,88,79,0,0,1186,90,0,0,0,136,0,0,0,0,0,100,0,0,0,0,3634\n",
      "1373,4,568,563,271,1931,108,0,91,10,87,8,45,52,20,34,4,160,13,49,39,0,6,1,0,13,23,0,4,55,35,393,4,0,0,135,130,0,0,0,0,0,123,0,0,0,0,3648\n",
      "301,899,12,416,0,2128,742,514,4,0,122,300,45,10,24,1,514,322,563,72,0,191,62,0,0,0,0,0,553,0,39,0,0,0,0,6,356,0,0,15,0,0,0,0,0,0,0,1789\n",
      "1567,0,90,89,0,1502,234,3,84,0,97,1,54,31,66,0,262,0,47,260,0,0,2,0,0,0,8,0,261,0,0,372,295,0,0,2,3,0,0,0,0,35,0,0,0,0,0,4635\n",
      "600,0,2,134,66,1859,237,1349,369,15,117,2,16,167,40,88,122,1,170,8,302,0,224,145,2,1,204,0,0,0,13,57,0,0,0,42,69,0,0,65,0,0,0,0,0,0,0,3514\n",
      "1194,5,60,625,2,767,28,6,993,0,2,21,20,78,57,95,36,1,5,0,0,12,649,0,1,0,1,9,214,563,0,76,35,60,0,0,3,0,0,0,1,45,0,90,0,0,0,4246\n",
      "1132,0,55,319,13,1916,347,0,1433,5,0,0,4,0,8,28,4,39,92,0,4,0,304,0,0,4,0,0,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4226\n",
      "1612,0,567,31,15,1688,122,5,914,44,17,10,1,0,0,5,1,40,308,39,4,15,191,3,0,130,0,206,0,0,0,1037,4,0,0,0,16,0,0,0,0,0,0,0,0,0,0,2975\n",
      "590,0,1063,572,0,1369,49,0,464,19,0,10,0,3,7,135,15,8,631,6,2,71,113,0,0,41,0,214,98,36,0,0,254,0,0,0,110,0,0,9,40,0,0,0,0,0,0,4071\n",
      "893,0,808,66,0,1693,68,0,49,3,5,1,0,0,1098,3,0,0,1,1245,0,102,121,0,319,0,0,0,27,0,0,95,0,0,0,0,3,0,0,0,0,13,44,0,0,3,0,3340\n",
      "1506,107,458,203,0,927,291,0,7,27,325,66,182,260,333,12,22,239,41,27,0,4,14,0,0,0,1,1,876,0,0,19,111,2,0,3,4,0,3,8,0,0,0,0,0,0,0,3921\n",
      "1477,337,68,64,0,883,349,1,433,0,97,8,2,0,148,0,6,44,737,89,14,21,343,0,0,34,16,197,188,0,225,10,6,0,0,165,273,0,0,0,0,0,486,0,0,0,0,3279\n",
      "1104,0,400,477,0,2141,778,11,175,1,0,33,13,8,8,334,0,8,375,79,0,19,1,26,0,0,2,34,1,0,0,264,0,0,0,0,242,0,0,0,0,0,7,0,0,0,0,3459\n",
      "558,0,71,135,115,1696,64,5,13,51,0,58,0,409,4,0,362,326,34,18,14,0,362,24,0,0,9,0,39,1,5,130,2838,0,0,0,0,0,0,0,0,0,8,0,0,0,0,2651\n",
      "1975,0,260,521,0,1104,9,33,865,0,152,117,19,102,191,75,259,8,675,0,0,15,116,5,0,0,137,37,242,1,0,559,8,0,26,0,58,0,0,1,0,0,249,0,0,0,0,2181\n",
      "1645,0,69,57,0,1124,171,2,10,9,85,14,48,214,23,0,260,36,41,236,0,101,21,2,0,49,47,25,765,0,6,469,2020,1,0,1,223,0,0,0,0,0,0,0,0,0,0,2226\n",
      "613,1,118,702,61,1103,84,23,903,0,267,36,0,19,128,15,4,35,168,343,0,0,576,38,0,28,0,261,21,1,246,52,21,0,0,6,0,0,0,49,0,1433,0,0,0,0,0,2645\n",
      "1087,0,13,196,4,779,0,22,111,73,182,0,111,0,90,11,28,0,5,0,0,86,37,215,88,4,411,0,158,0,1,986,34,0,0,0,1,0,0,0,51,0,0,0,0,0,0,5216\n",
      "362,0,765,207,0,947,1,31,1,23,483,0,31,1,133,93,371,2,326,142,123,0,821,59,0,14,0,17,1029,0,323,128,0,0,0,373,46,0,32,0,2,0,0,0,0,0,0,3114\n",
      "452,0,884,58,31,2294,4,7,352,0,2,2,113,0,122,40,401,0,0,63,0,6,123,14,0,20,16,31,839,0,5,715,0,0,0,0,17,0,0,1,0,0,3,0,0,0,0,3385\n",
      "492,0,7,314,0,525,108,14,158,0,36,0,32,0,77,90,746,427,275,329,0,0,1349,7,0,791,52,66,124,0,0,2,2,0,0,2,83,0,0,0,0,0,0,0,0,0,0,3892\n",
      "1667,32,88,1600,1,919,3,0,2,190,427,0,0,2,18,0,2,94,64,131,0,0,2,2,0,0,0,0,207,14,417,550,1,0,0,0,95,0,0,6,0,0,0,0,0,0,0,3466\n",
      "416,2,131,438,12,453,33,2,291,7,21,48,346,18,219,4,20,786,189,37,4,3,0,1,0,0,0,1010,827,0,89,633,198,0,0,3,2,0,0,2,0,0,0,73,0,0,0,3682\n",
      "909,0,24,963,62,507,2,274,32,0,0,10,1,9,18,125,172,356,7,0,0,0,96,0,0,397,0,0,6,1,15,33,241,0,0,20,90,0,0,11,0,0,0,0,0,0,0,5619\n",
      "907,0,217,226,0,2147,64,1,88,2,3,0,743,19,3,3,0,18,417,1,0,0,65,0,0,465,35,0,109,0,9,182,8,0,0,0,169,0,0,0,0,0,2,0,0,0,0,4097\n",
      "1136,0,733,122,0,984,3,17,166,31,34,64,3,577,21,0,447,44,401,146,0,0,16,0,0,0,493,35,474,0,0,59,152,0,0,2,54,0,0,144,0,0,0,0,0,0,0,3642\n",
      "406,546,178,890,0,1139,9,7,536,2,82,66,0,13,21,16,3,0,6,11,742,42,4,356,0,42,69,21,14,0,206,176,119,0,0,0,151,0,0,214,0,0,0,0,0,0,0,3913\n",
      "796,2,130,562,2,2172,328,33,249,48,0,49,0,18,299,7,3,48,12,399,0,0,339,0,4,0,0,120,184,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4192\n",
      "1220,0,6,251,3,1346,40,1,82,0,29,5,1,0,274,0,1,271,10,539,94,30,42,4,331,0,0,25,234,74,2,318,0,0,0,3,293,0,0,0,0,0,84,0,0,0,0,4387\n",
      "566,0,311,516,54,2134,9,0,464,0,410,86,0,3,0,1,1,334,358,3,75,112,1029,0,15,0,12,0,61,0,100,55,55,0,0,0,0,75,0,0,0,0,0,0,0,0,0,3161\n",
      "1459,655,158,840,88,755,5,3,85,167,16,11,10,349,0,30,1059,0,59,1,108,248,154,0,0,0,0,24,985,0,3,537,12,0,0,0,9,0,0,37,0,0,0,0,0,2,0,2131\n",
      "3792,189,164,134,18,579,32,30,169,7,289,2,1272,0,1,6,0,0,2,0,0,0,49,2,0,49,234,39,216,0,0,52,16,4,0,0,4,0,0,4,0,1,0,0,0,0,0,2644\n",
      "927,0,69,321,0,2055,67,0,488,64,12,0,124,1,639,1,26,27,1,255,0,1,124,0,0,46,0,0,87,0,1709,424,139,0,0,0,0,0,0,92,186,1,0,0,0,0,0,2114\n",
      "620,50,7,194,0,1378,238,2,729,734,86,0,0,11,9,39,410,184,81,355,222,0,391,0,0,0,0,17,30,0,0,77,149,0,0,104,433,0,146,4,0,0,0,0,150,0,0,3150\n",
      "588,14,542,753,0,496,48,67,392,95,137,330,205,454,161,0,0,10,158,25,12,18,26,22,0,0,1,0,595,0,0,599,7,0,0,0,28,0,0,139,0,0,0,0,0,0,0,4078\n",
      "699,0,493,733,0,1161,0,0,231,32,234,38,12,2,513,3,5,32,1353,1,6,13,0,0,0,0,116,24,44,26,0,633,3,0,0,0,124,0,0,138,0,0,0,0,0,0,0,3331\n",
      "658,228,329,144,130,543,289,41,127,0,552,71,6,6,31,0,123,0,109,10,0,2,780,0,1,36,0,74,572,0,0,131,41,0,0,0,0,0,0,0,0,0,0,0,0,81,0,4885\n",
      "1887,0,84,241,0,1164,450,0,102,0,0,13,2,0,183,45,0,0,266,4,0,0,0,0,89,0,0,0,196,0,1,68,53,0,0,0,207,0,0,0,0,0,0,0,0,0,0,4945\n",
      "986,35,125,227,56,2076,285,5,35,340,94,6,1,2,322,0,255,399,72,80,0,154,36,0,0,0,32,3,390,0,0,0,287,0,0,19,155,6,347,121,7,0,3,0,0,0,0,3039\n",
      "1893,0,93,27,0,1110,556,3,86,37,415,13,137,0,280,0,12,19,625,111,81,77,274,0,47,0,0,5,489,0,0,127,33,0,0,0,75,0,0,22,0,0,0,0,0,0,0,3353\n",
      "3284,0,190,93,0,1281,240,20,788,2,128,94,28,3,93,0,19,26,3,1,0,142,935,2,17,8,0,24,353,0,0,314,1,0,0,0,22,0,0,2,0,0,0,0,0,0,0,1887\n",
      "1466,56,283,271,0,1237,45,23,1231,0,24,1,186,495,47,456,459,4,0,68,0,0,82,53,0,61,1,6,142,0,207,331,1,0,0,0,49,0,0,0,4,31,0,91,1,0,0,2588\n",
      "575,0,527,951,540,1564,512,140,225,30,64,5,0,292,20,31,8,8,41,27,1,70,713,60,0,1,162,0,160,0,0,4,18,0,2,0,209,0,0,0,0,0,56,0,0,0,0,2984\n",
      "348,5,20,383,0,2484,145,36,1552,7,20,34,358,4,63,4,0,1,38,9,1,33,17,16,0,2,16,4,900,0,506,87,0,0,634,0,82,0,0,0,39,0,0,12,0,0,0,2140\n",
      "688,23,34,472,0,1130,199,0,95,55,4,336,519,107,83,910,100,199,443,0,0,1,98,0,7,16,37,9,367,0,0,107,299,0,0,0,39,0,0,114,0,0,0,0,0,0,0,3509\n",
      "1064,34,497,480,0,917,189,0,135,0,72,70,94,177,36,3,288,0,561,65,1,119,38,17,0,0,0,44,14,0,0,983,0,0,0,0,193,0,0,0,550,12,0,159,0,0,0,3188\n",
      "281,7,248,68,0,1303,7,21,1307,0,55,34,407,188,32,0,272,2,188,242,0,3,467,0,0,109,0,0,739,0,0,47,0,0,10,0,5,0,0,0,2,0,0,0,0,0,0,3956\n",
      "698,34,61,443,15,1225,526,21,209,1,53,0,972,9,2,70,78,0,27,13,0,1,21,9,0,42,55,46,36,366,3,1536,6,0,0,308,830,0,0,0,1,0,0,0,0,0,0,2283\n",
      "941,3,92,478,85,1584,118,66,366,0,163,0,4,0,6,8,4,745,3,40,0,0,0,0,0,0,17,0,278,0,0,227,92,0,0,0,0,0,191,808,0,0,0,0,0,0,0,3681\n",
      "1036,0,336,1014,390,1206,8,175,448,11,552,760,110,4,27,26,10,0,1159,61,14,277,7,0,0,0,0,63,20,0,16,89,16,0,0,3,94,0,0,0,5,0,0,0,0,0,0,2063\n",
      "1644,143,417,92,0,1004,0,0,212,0,4,6,52,0,1,16,1508,2,0,71,1,321,144,209,1,33,0,0,7,0,0,31,0,0,0,0,761,0,0,0,0,31,0,0,0,0,0,3289\n",
      "848,0,495,336,0,897,93,14,402,10,41,0,537,32,122,0,55,2,678,95,0,3,124,4,0,0,0,0,58,0,15,1,5,0,0,1,145,0,0,0,0,0,0,0,0,0,0,4987\n",
      "574,0,317,214,274,1495,4,42,136,44,270,248,0,17,54,2,565,226,423,561,0,97,94,0,0,0,0,1,4,0,0,47,128,0,0,0,0,0,0,0,363,0,0,0,0,0,0,3800\n",
      "425,0,70,509,0,630,1010,4,42,0,564,28,464,0,883,47,30,161,16,1,15,43,150,0,0,11,0,0,299,0,38,9,16,0,0,138,0,0,0,0,0,0,0,0,0,0,11,4386\n",
      "224,14,81,992,26,1298,11,3,447,23,3,0,0,10,61,290,5,38,226,612,12,160,2,0,0,103,0,0,6,0,0,60,0,0,0,0,220,0,0,0,9,0,0,0,0,0,0,5064\n",
      "365,41,430,90,13,2312,737,105,81,0,118,287,0,44,80,7,20,0,105,228,0,0,348,507,1,2,573,0,5,0,0,80,88,0,0,1,115,0,0,0,0,0,0,0,0,0,0,3217\n",
      "502,0,575,76,0,2389,9,0,6,18,179,0,3,282,17,0,288,74,212,400,89,2,33,0,0,0,112,229,244,0,36,91,1,0,0,0,214,0,0,574,0,0,0,0,0,19,0,3326\n",
      "1114,0,29,287,0,997,247,0,119,0,10,58,178,1,155,62,21,259,106,16,0,0,10,0,0,89,0,17,2707,0,16,9,486,0,0,0,12,0,0,0,0,0,1,0,0,0,0,2994\n",
      "1347,94,98,386,30,1258,42,3,583,4,114,5,2,407,50,0,5,2,62,0,0,0,721,58,0,0,2,3,54,0,0,29,23,0,0,0,413,0,0,0,5,0,0,0,0,0,0,4200\n",
      "1773,0,1120,908,0,1288,537,0,398,0,59,0,0,0,12,0,374,3,41,553,2,18,82,0,0,0,14,0,43,0,0,49,108,0,0,0,2,0,0,1,0,0,0,0,0,0,0,2615\n",
      "218,7,1069,72,0,2185,50,10,761,28,1,0,76,14,55,35,5,0,199,163,500,8,0,0,0,6,0,0,414,0,0,508,0,0,0,0,43,0,0,4,1,55,17,0,0,0,0,3496\n",
      "374,0,739,61,102,1229,18,157,313,0,33,0,4,3,480,183,25,3,135,7,0,379,185,0,0,156,43,0,143,0,0,33,0,0,0,0,116,0,0,1,0,0,416,0,0,0,0,4662\n",
      "1292,13,139,600,0,942,49,14,160,19,27,802,0,1,0,0,96,0,0,251,0,0,88,0,12,0,1,4,721,0,132,245,278,0,0,5,0,0,0,91,0,1,0,0,0,0,0,4017\n",
      "1139,0,162,109,248,1633,35,174,69,0,43,15,3,252,5,3,82,3,3,0,158,12,268,20,160,0,1,0,761,7,20,1048,38,0,0,47,215,0,0,0,0,0,36,0,0,0,0,3231\n",
      "305,2,831,444,0,829,271,0,100,0,2,16,32,102,32,23,177,0,40,1,37,0,773,0,1,214,7,0,119,40,0,0,0,0,0,0,8,0,0,11,0,1,0,0,0,8,0,5574\n",
      "1332,0,75,457,0,1422,5,6,400,336,92,11,117,24,9,3,32,21,22,72,2,0,19,0,24,61,0,6,421,0,0,38,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,4991\n",
      "1153,62,423,313,130,335,569,51,527,16,59,1,339,0,98,3,590,0,52,129,0,78,308,8,0,131,0,1,74,0,107,124,97,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4220\n",
      "1211,0,696,262,223,667,40,0,20,0,192,11,0,0,41,134,3,82,349,98,0,0,226,0,0,10,0,99,167,0,0,194,44,0,0,0,39,0,626,18,0,7,0,0,0,0,0,4541\n",
      "516,29,4,758,0,257,9,6,229,0,142,129,12,0,331,1,101,3,12,0,29,27,12,2,10,0,0,2299,20,0,0,71,0,0,0,10,1,0,0,0,0,0,0,0,0,0,0,4980\n",
      "1419,1,80,366,0,1020,277,37,61,47,88,9,0,0,215,123,3,102,54,1,2,0,136,8,202,9,0,11,226,36,0,32,1200,543,0,161,0,0,0,0,0,0,0,0,0,0,0,3531\n",
      "1633,0,469,187,458,863,107,549,23,6,85,23,2,123,1,52,662,19,62,231,0,44,689,0,0,4,0,26,865,0,0,18,30,0,0,0,2,10,60,0,82,0,0,0,0,0,0,2615\n",
      "1190,0,1,795,0,2127,0,7,264,0,1,3,22,0,6,4,763,83,253,90,0,16,136,0,0,309,0,0,363,0,0,334,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3233\n",
      "218,1,288,945,1,1264,91,0,7,16,557,584,1,94,11,0,1,0,314,15,84,30,54,112,0,11,0,44,248,0,0,675,27,0,0,0,55,0,0,13,0,0,0,0,0,0,0,4239\n",
      "1554,148,19,489,0,807,155,0,741,1,384,22,0,320,175,29,0,0,75,9,0,372,4,2,0,0,8,0,127,0,136,66,50,0,0,0,104,0,0,0,37,0,51,0,0,0,0,4115\n",
      "1282,217,48,193,5,1234,59,0,575,0,154,711,204,56,0,2,323,2,11,7,0,1,1306,4,0,365,1,1,397,0,64,11,173,0,0,0,60,0,0,0,0,0,0,0,0,0,0,2534\n",
      "422,0,1009,401,0,853,124,4,214,2,830,41,23,1,369,301,5,0,417,9,86,0,460,0,5,336,0,0,52,0,0,746,0,0,0,0,49,0,0,0,0,0,0,0,99,0,0,3142\n",
      "620,0,36,376,0,1487,173,0,30,135,522,7,88,1,13,3,0,147,395,41,137,0,235,15,0,22,0,5,380,0,0,2,42,0,0,54,226,0,0,694,0,0,0,0,0,0,0,4114\n",
      "1481,0,2,129,13,1399,301,6,334,40,133,701,6,19,4,8,615,99,204,52,25,3,109,0,1267,2,0,0,193,4,18,222,1,0,0,0,85,0,0,11,0,0,0,0,0,0,0,2514\n",
      "667,0,104,1446,1,1492,299,20,435,0,39,11,22,1,57,51,329,4,11,32,0,0,6,2,0,0,46,23,27,0,0,35,2,0,0,0,1151,0,0,0,0,2,0,0,0,0,0,3685\n",
      "3059,0,239,96,0,766,524,0,449,0,10,0,28,148,14,6,218,153,766,1,1,0,671,0,0,0,0,0,7,0,10,92,12,0,0,0,180,0,0,0,0,0,0,0,0,0,0,2550\n",
      "308,6,310,704,41,1370,32,0,135,0,29,71,4,0,388,3,91,0,239,291,3,0,34,1,0,21,0,0,630,0,0,0,2,0,1430,0,78,0,0,0,0,0,0,0,0,0,0,3779\n",
      "477,0,1432,677,0,2066,2,0,46,0,17,9,0,24,102,0,314,5,269,944,666,156,23,95,6,4,21,0,17,0,0,5,39,0,0,0,294,0,0,0,0,0,0,0,0,0,222,2068\n",
      "2427,0,392,921,0,657,159,8,182,3,65,0,16,80,9,105,162,0,41,366,0,0,5,1,0,0,0,11,388,46,0,37,5,0,0,0,118,0,0,0,0,0,0,0,0,0,0,3796\n",
      "1718,1,54,496,105,996,0,772,658,0,8,13,21,1,583,660,24,10,114,17,52,0,88,0,0,1,2,3,31,0,0,307,42,0,0,0,133,0,0,1,0,0,5,0,0,0,0,3084\n",
      "767,1,19,9,198,1551,85,0,663,18,10,69,38,18,205,46,73,88,327,12,0,0,242,1,1,7,0,0,47,0,0,1075,2,0,0,0,2,0,0,0,0,37,0,0,0,0,0,4389\n",
      "89,0,886,744,11,1267,426,35,26,0,492,227,120,340,63,1,346,540,14,0,0,31,0,0,0,1,0,0,52,0,0,624,3,0,0,87,115,0,0,0,0,0,0,0,0,0,0,3460\n",
      "1278,4,633,31,0,721,112,3,93,0,188,3,192,0,0,282,1076,1,180,446,0,0,511,10,1,0,0,92,578,0,69,6,104,0,0,0,11,0,225,0,0,0,0,0,0,0,0,3150\n",
      "919,0,57,44,114,1197,0,0,79,4,19,370,30,60,15,0,1,0,90,393,352,1,1831,442,7,0,0,175,25,0,0,25,82,0,0,1,10,0,0,76,0,0,0,7,0,0,0,3574\n",
      "834,3,44,213,12,1528,25,0,301,0,1621,270,17,2,10,230,28,6,74,596,63,119,0,0,0,0,23,0,92,0,447,29,291,0,0,0,17,0,1,8,0,0,0,0,0,0,0,3096\n",
      "771,429,1032,46,0,1951,61,467,168,0,30,0,1,0,625,0,18,49,14,197,190,0,50,13,0,59,0,0,555,0,3,0,141,0,0,0,45,0,0,17,0,0,0,0,0,0,0,3068\n",
      "1653,0,270,134,0,931,60,81,294,2,0,85,0,427,2,4,37,6,221,94,0,11,125,86,37,0,578,0,213,0,6,15,66,0,0,0,256,0,0,2,0,0,10,0,0,0,0,4294\n",
      "1223,0,101,327,361,1377,1270,12,832,0,57,0,498,510,78,17,4,0,36,61,1,1,119,740,3,0,0,0,44,0,0,79,47,0,0,0,184,0,0,0,0,0,0,0,0,23,0,1995\n",
      "1353,274,322,83,0,1332,21,7,94,2,828,60,718,0,142,143,22,17,151,194,0,0,123,0,0,158,4,4,43,0,0,58,56,0,0,1,118,0,0,0,0,0,0,0,0,0,0,3672\n",
      "664,0,300,970,0,2394,949,192,232,0,3,0,0,36,12,5,0,0,4,92,0,1,50,44,0,0,79,8,118,0,9,57,75,0,0,3,455,0,0,0,13,0,0,0,0,340,0,2895\n",
      "350,40,59,876,436,352,47,6,212,0,4,103,1,139,0,2,345,164,67,3,3,0,38,0,0,0,0,3,22,0,0,376,2044,33,0,107,4,0,2,0,0,0,1,0,0,0,0,4161\n",
      "606,1,80,473,0,2120,35,0,77,0,17,0,124,0,621,263,102,125,224,59,0,1,60,0,2,11,0,0,225,0,0,71,49,0,0,45,65,0,0,2,0,0,8,0,0,0,0,4534\n",
      "1649,0,698,211,0,1057,586,696,198,0,0,165,0,6,59,217,34,0,0,236,2,0,803,0,0,1,13,65,358,0,0,19,36,0,0,0,73,0,0,34,0,0,706,0,0,0,0,2078\n",
      "785,15,265,1620,0,1371,9,109,0,11,254,2,0,0,10,0,174,1,591,46,12,1,595,0,0,47,0,0,294,0,0,115,25,0,0,0,39,0,0,0,1,0,0,0,0,0,0,3608\n",
      "2242,163,49,411,268,907,78,1,73,2,51,8,0,161,0,107,3,5,11,381,14,1,30,0,0,0,0,2,22,0,0,384,24,0,0,0,374,0,0,6,0,0,35,0,0,0,0,4187\n",
      "539,0,185,283,0,1077,662,0,89,0,262,177,5,1,294,5,91,644,125,3,2,0,100,5,31,5,2,0,3,0,1,47,134,0,0,0,1,0,0,345,0,0,0,0,0,0,0,4882\n",
      "498,0,15,430,7,2210,14,7,447,0,51,89,23,41,8,72,6,0,1098,64,3,16,28,0,80,130,0,0,106,0,5,229,122,0,0,12,0,0,0,412,0,0,0,0,0,0,0,3777\n",
      "2077,64,122,145,4,234,238,0,62,0,180,0,11,162,69,41,68,4,54,627,0,21,270,23,0,8,5,18,210,0,65,464,31,0,0,0,0,0,0,70,0,0,0,0,0,0,0,4653\n",
      "336,137,300,131,0,1477,0,336,175,43,23,73,97,0,49,12,62,3,1023,248,0,564,42,0,0,43,0,95,13,0,0,281,4,0,0,5,132,0,610,4,0,0,0,0,0,0,0,3682\n",
      "675,17,257,1364,4,1092,192,1,28,100,122,853,1,1,159,110,0,3,12,2,244,25,6,0,0,0,11,0,337,0,0,171,540,0,0,0,75,0,0,6,55,0,0,0,0,0,0,3537\n",
      "370,168,100,509,0,1800,68,88,94,21,0,206,37,1,554,0,68,210,9,123,47,0,300,0,0,10,18,1,269,0,0,0,1,0,0,0,7,3,32,0,0,0,0,0,0,0,0,4886\n",
      "1317,0,70,140,0,1820,91,11,239,0,2,0,4,2,100,0,15,0,435,677,58,0,0,0,0,0,0,92,568,0,0,308,672,0,0,1,21,0,0,0,2,0,5,0,0,0,0,3350\n",
      "579,386,234,538,0,504,276,4,510,23,388,19,3,1091,523,13,128,153,24,109,266,0,45,0,0,1500,39,6,41,14,0,0,3,4,0,0,99,0,2,2,0,49,0,0,0,83,0,2342\n",
      "1682,456,1,282,0,2567,178,1,24,0,149,0,17,2,94,6,1,1,1,34,0,0,119,21,0,219,0,0,161,0,13,43,17,0,0,0,16,0,191,0,0,0,0,0,0,0,0,3704\n",
      "141,0,216,386,3,2963,63,139,531,0,391,25,108,57,57,0,8,35,296,344,0,0,516,550,0,645,4,0,152,0,0,78,18,0,0,356,18,0,0,16,0,1,0,0,0,0,0,1883\n",
      "889,0,114,41,0,1047,86,0,237,33,295,0,1084,0,151,10,1,1,18,197,804,0,12,0,1,0,0,0,306,0,0,488,25,0,0,6,153,0,0,267,37,0,0,0,0,0,0,3697\n",
      "651,19,3,239,21,1139,124,0,237,1,153,13,107,180,89,2,1,0,808,311,0,11,754,107,0,1,0,124,94,0,1,294,519,0,0,0,1,0,0,10,0,0,21,0,0,0,0,3965\n",
      "1772,1,73,124,0,1448,29,5,216,0,75,223,23,2,1,45,2,46,169,172,3,0,324,468,572,36,0,3,120,0,0,17,0,0,0,0,32,0,0,0,0,0,840,0,0,0,0,3159\n",
      "404,69,667,359,18,2233,315,48,346,3,7,0,111,0,22,0,5,85,627,91,8,0,258,0,6,0,386,0,20,0,0,190,0,0,0,3,19,0,0,22,1,0,0,0,0,0,0,3677\n",
      "1213,0,0,691,5,802,146,342,122,3,8,82,27,6,1,0,0,30,86,22,0,3,57,134,426,67,0,36,31,0,194,11,118,0,0,0,189,0,0,0,9,0,0,0,0,0,0,5139\n",
      "512,0,163,736,33,644,504,5,1133,0,2,248,0,119,2,24,948,193,76,185,0,0,152,56,0,0,1,0,95,0,0,11,211,0,0,0,29,0,0,0,0,0,0,0,0,0,0,3918\n",
      "824,0,784,149,0,1054,315,8,274,0,706,0,234,2,2,2,105,59,107,136,0,118,22,19,0,59,140,359,29,0,152,11,0,0,0,0,9,0,0,2,0,0,0,0,0,0,0,4319\n",
      "1266,6,111,19,0,402,8,8,85,0,125,14,699,0,21,70,154,0,873,119,0,133,108,0,17,16,0,7,136,0,4,1,0,0,0,0,30,0,0,0,0,0,0,0,0,0,7,5561\n",
      "1285,9,291,151,2,585,881,144,255,110,140,5,2,0,113,4,1,304,257,11,118,0,304,0,0,0,6,7,149,11,0,53,351,0,0,16,316,0,370,0,0,0,0,0,0,0,0,3749\n",
      "642,47,275,1277,0,1960,56,31,844,36,14,61,648,1,0,0,5,0,282,149,0,13,59,0,0,3,0,0,535,0,0,439,52,0,0,0,55,0,0,0,0,0,0,0,0,0,0,2516\n",
      "837,1,45,474,2,2891,342,0,257,0,26,227,0,20,88,0,1,40,164,521,0,154,66,0,0,0,7,397,21,0,2,17,0,20,0,2,165,0,0,0,16,0,0,0,0,0,0,3197\n",
      "455,37,141,1268,17,1874,5,14,470,2,37,15,0,1,592,120,4,0,161,120,9,1,9,0,0,2,0,0,6,0,1,817,2,0,0,0,311,0,0,11,0,0,0,0,0,0,0,3498\n",
      "340,196,33,399,0,1463,1,1,291,63,32,2,0,0,193,7,12,48,81,151,3,71,0,0,0,1,0,0,8,0,381,574,362,0,0,0,365,0,0,0,0,0,0,0,0,0,0,4922\n",
      "619,0,195,195,0,162,40,45,1162,0,1769,57,254,0,849,0,406,32,7,327,0,90,116,0,0,93,3,0,103,28,0,24,0,0,0,53,48,0,0,0,0,0,0,0,0,0,0,3323\n",
      "1393,242,421,428,0,421,0,2,126,0,12,0,1560,106,3,417,1,3,79,730,0,187,46,0,0,0,0,1033,227,0,0,7,5,0,0,113,2,0,0,0,0,11,1,0,0,0,0,2424\n",
      "309,1,205,1287,36,407,27,11,354,0,44,24,393,123,116,0,0,37,335,3,0,262,403,0,0,73,0,1,41,0,0,104,192,0,0,0,55,0,0,113,0,0,0,3,0,0,0,5041\n",
      "806,1,364,21,14,2121,301,5,242,0,69,9,73,0,38,0,4,59,0,128,27,6,181,0,0,37,0,0,76,0,2,106,0,0,0,3,219,0,0,0,0,0,0,0,0,0,0,5088\n",
      "417,23,35,162,218,1829,15,72,661,1,535,39,71,14,1,54,75,85,83,29,378,271,114,34,0,2,0,15,576,0,105,149,459,0,0,0,194,0,0,0,0,0,30,0,0,0,0,3254\n",
      "476,0,731,456,2,753,64,6,320,169,21,326,90,0,82,1,9,0,190,63,113,2,0,228,0,52,0,0,5,0,1,20,7,0,0,0,135,0,0,0,2,0,0,0,0,0,0,5676\n",
      "654,0,350,359,9,3490,185,128,52,0,0,1,62,18,25,0,270,8,13,31,4,0,14,0,0,22,0,738,193,0,26,282,2,0,0,0,3,0,5,8,0,0,0,0,0,0,0,3048\n",
      "1968,0,158,87,136,1509,400,9,514,0,215,105,9,0,0,5,3,0,3,6,0,0,224,6,0,4,0,0,71,0,1,2,516,0,0,0,358,0,0,12,1,0,0,0,0,0,0,3678\n",
      "916,0,461,93,4,948,198,2,696,36,37,22,1,114,403,0,121,406,262,145,6,7,270,178,0,0,91,12,164,0,0,289,204,6,0,0,16,0,0,0,0,0,0,0,0,0,0,3892\n",
      "582,8,154,648,0,1592,86,0,328,16,72,0,2,0,149,172,0,38,411,1131,0,0,154,0,0,5,0,0,407,0,0,1163,31,0,0,0,1,2,0,0,0,0,8,0,0,0,0,2840\n",
      "2567,0,18,552,0,636,1,22,92,3,104,12,0,0,34,50,71,222,117,61,0,287,130,0,0,0,0,10,334,0,0,705,6,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3963\n",
      "2108,360,303,392,38,675,67,0,242,2,1,19,92,214,171,0,151,55,13,44,11,0,37,37,0,0,0,2,512,0,0,82,61,0,0,0,0,0,0,3,3,0,0,0,0,0,0,4305\n",
      "330,48,33,473,0,1585,3,22,544,0,14,360,303,0,98,5,0,0,158,3,14,68,310,17,0,27,0,427,81,344,2,61,0,0,0,0,248,0,0,23,0,0,5,0,0,0,0,4394\n",
      "1329,0,83,35,0,549,11,12,581,42,110,0,20,0,3,8,645,414,38,164,2,0,216,356,0,3,4,1185,81,0,0,245,2,0,0,1,239,0,0,4,0,1,0,0,0,0,0,3617\n",
      "1427,13,693,601,0,1213,386,6,625,132,239,0,83,0,1,1,1,14,24,102,0,0,2,0,12,139,0,16,737,420,0,91,0,0,0,2,19,0,0,0,0,0,7,0,0,0,0,2994\n",
      "342,0,443,126,0,1407,279,2,23,136,49,29,69,0,155,466,54,0,1524,380,0,0,15,30,0,0,0,0,539,0,0,31,0,0,0,23,87,0,0,3,0,0,0,0,0,0,0,3788\n",
      "1715,45,316,74,0,1104,621,3,3,585,4,11,19,2,164,0,78,0,5,4,0,0,329,0,35,186,3,0,109,144,0,632,21,0,0,0,345,0,0,0,428,1,0,0,0,0,0,3014\n",
      "1954,7,208,411,67,408,74,484,3,0,964,0,13,37,762,5,0,0,252,2,69,0,794,0,14,394,0,0,81,0,29,586,66,0,0,4,2,0,27,0,0,0,0,0,0,0,0,2283\n",
      "1653,6,734,542,0,1336,14,0,168,117,215,15,83,0,2,22,10,0,0,414,43,0,4,27,0,452,345,0,5,0,39,8,146,342,0,0,2,0,0,0,2,0,0,0,0,0,0,3254\n",
      "193,0,165,159,1,1135,17,0,299,8,267,14,404,47,74,4,168,140,0,333,0,3,37,0,0,0,0,0,24,0,34,118,0,0,0,0,1,0,113,21,0,0,0,0,0,0,0,6221\n",
      "634,256,1116,380,0,1302,276,124,625,0,69,2,34,0,0,10,6,84,349,5,34,134,38,0,0,0,0,0,8,0,95,12,41,0,0,1,27,0,0,1,0,0,1,0,0,0,0,4336\n",
      "3030,198,284,1115,0,882,108,1,994,0,148,60,309,0,2,0,1,204,64,0,1,210,170,7,0,0,0,33,400,0,60,11,7,0,0,0,0,0,0,0,20,5,0,0,0,0,0,1676\n",
      "1446,1,4,31,112,2389,128,8,749,1,365,10,0,0,15,0,4,5,87,347,166,165,405,0,45,157,0,26,98,0,31,5,31,0,0,0,2,0,0,0,0,5,0,0,0,0,0,3162\n",
      "286,184,262,1199,47,1230,254,72,153,0,236,1,4,0,149,59,3,0,19,0,124,0,221,3,1,0,0,430,152,0,71,311,234,0,0,4,251,0,0,0,2,0,0,0,0,0,0,4038\n",
      "1747,0,315,71,0,1212,70,811,219,7,153,4,0,0,50,1,83,74,24,639,1,0,10,0,0,1,4,0,2,43,1,333,0,52,0,1,62,0,0,0,0,0,0,0,0,0,0,4010\n",
      "332,2,90,180,118,2442,339,0,346,0,194,556,0,334,6,11,116,59,14,13,7,2,27,0,0,18,0,0,29,0,3,10,1,0,0,0,1,0,0,6,0,0,0,0,0,0,0,4744\n",
      "1975,0,384,214,0,1099,88,1,61,0,1262,2,0,301,115,4,0,38,44,466,0,0,279,22,42,0,3,33,120,1,11,147,0,401,0,0,578,0,1,0,0,0,26,0,0,0,0,2282\n",
      "1491,1,386,48,187,2005,279,50,344,0,20,14,22,84,565,45,11,8,0,257,0,1,759,1,0,139,0,16,44,0,0,98,0,0,0,0,2,10,0,0,0,0,0,41,0,0,0,3072\n",
      "1190,0,8,519,0,1760,28,0,410,0,46,59,255,27,16,0,3,0,405,292,18,0,216,1,0,52,90,12,395,4,13,109,304,0,0,0,12,0,0,6,0,0,52,0,0,0,0,3698\n",
      "262,0,14,280,19,1518,29,5,202,0,29,118,20,60,0,107,0,9,182,344,0,26,473,6,3,0,0,55,161,27,75,138,16,2,0,3,1620,0,0,5,0,0,0,0,0,0,0,4192\n",
      "211,128,564,598,15,406,596,17,220,0,9,323,446,6,100,1,5,39,50,2,0,1,47,17,405,1,17,0,184,0,0,310,0,0,0,18,152,0,0,278,0,0,0,0,0,0,0,4834\n",
      "619,0,143,1248,0,965,76,150,1133,0,437,697,24,0,400,0,0,28,272,317,6,0,832,0,50,144,0,1,64,0,10,296,84,0,0,0,137,0,0,0,0,0,0,0,0,0,0,1867\n",
      "1270,2,372,1320,0,658,18,0,26,1,699,0,199,199,319,38,111,209,34,11,0,0,223,27,0,638,0,100,175,0,0,40,0,0,0,0,93,0,0,25,0,0,0,0,0,0,0,3193\n",
      "2936,0,69,1476,0,500,369,0,254,0,56,17,88,0,353,0,11,0,32,306,16,0,153,1,0,0,1,104,29,0,27,157,1,0,0,0,24,0,0,0,0,0,0,0,0,3,23,2994\n",
      "518,0,113,218,0,2277,276,0,10,16,637,1,35,1,0,12,102,58,0,1,1,1,414,0,0,0,427,9,231,0,0,415,0,0,0,0,86,0,0,11,0,0,0,0,0,0,18,4112\n",
      "413,14,30,1246,0,927,543,151,11,23,437,114,6,12,32,0,0,16,2,3,1,0,240,32,21,0,0,14,1,0,1,7,0,0,0,0,5,0,22,6,0,0,0,0,41,0,256,5373\n",
      "2618,118,32,86,1,574,15,6,24,37,8,3,0,0,311,185,64,310,325,42,0,4,49,0,0,47,9,26,460,0,166,24,11,0,0,0,206,0,0,41,0,0,0,0,0,0,0,4198\n",
      "1221,0,534,223,0,919,60,148,661,2,266,36,12,0,23,0,18,8,1,26,0,75,895,0,1,725,26,268,111,0,0,376,46,0,0,0,47,0,0,0,1,48,0,0,0,0,0,3223\n",
      "534,1,305,520,0,3251,42,8,310,0,504,15,2,0,103,4,340,1,131,36,0,0,15,0,0,0,6,0,510,0,63,45,477,0,0,0,1,0,0,11,0,0,0,0,0,0,0,2765\n",
      "636,0,194,568,13,1510,201,0,38,2,258,127,41,22,117,4,110,244,229,401,97,735,322,0,21,0,0,0,198,16,0,19,60,0,0,0,39,0,0,0,0,168,0,0,0,0,0,3610\n",
      "880,74,793,282,21,1175,4,5,799,9,350,161,1,46,19,3,5,1,21,53,0,14,1249,15,0,193,0,14,231,0,0,78,2,0,0,0,29,0,0,0,0,2,0,0,0,0,0,3471\n",
      "2231,101,457,647,38,937,90,1,58,11,2,197,16,9,468,28,213,56,9,53,15,0,56,11,0,744,1,1,24,0,0,474,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,3048\n",
      "1744,69,18,1661,8,293,48,0,2,28,806,66,0,92,76,114,10,1,283,54,0,315,92,0,0,716,11,0,448,94,0,53,4,0,0,0,191,0,0,0,0,0,10,0,0,0,0,2693\n",
      "714,46,372,888,0,1356,78,24,49,0,27,6,0,10,624,15,556,261,74,60,0,130,281,0,0,96,28,90,228,0,0,903,13,0,0,44,238,0,0,0,0,0,0,0,0,0,0,2789\n",
      "803,0,440,198,0,692,150,0,25,0,208,267,735,1,420,10,4,28,352,68,80,0,2,0,330,104,0,0,125,0,20,124,2,0,0,4,0,0,0,0,0,0,0,0,0,0,1,4807\n",
      "1021,0,799,188,0,1135,2,0,1311,1,67,1,3,2,134,43,3,0,356,50,0,0,150,30,0,9,13,14,55,0,0,221,35,0,0,0,357,0,0,0,0,0,0,0,0,0,0,4000\n",
      "2491,0,576,160,0,990,263,34,121,0,25,49,46,0,0,344,0,0,19,15,0,26,197,1,0,152,0,1,139,0,67,7,7,0,0,0,289,0,0,0,0,0,0,0,0,0,0,3981\n",
      "1664,0,26,341,32,1197,337,0,239,12,6,0,2,93,91,0,1,0,368,52,0,0,118,0,0,26,152,201,916,0,0,24,128,0,0,0,7,0,124,0,0,0,4,0,0,0,0,3839\n",
      "1780,1,72,397,12,348,67,0,1311,0,4,0,3,0,400,118,236,44,0,0,85,1,3,143,0,719,0,0,381,0,5,5,7,0,0,0,32,0,0,1,5,0,0,0,0,0,0,3820\n",
      "1516,14,167,226,0,1873,10,0,62,18,124,0,112,2,43,542,13,20,178,13,0,0,228,178,51,5,0,0,374,0,54,43,36,0,0,4,99,0,0,9,0,0,0,0,0,0,0,3986\n",
      "1419,19,201,160,0,1740,1150,13,32,13,162,49,81,116,2,1,0,10,0,65,0,0,21,0,64,11,0,253,87,0,0,211,0,0,0,0,42,0,0,0,426,0,0,0,0,0,0,3652\n",
      "1643,0,98,170,4,1326,113,150,523,233,42,3,0,16,3,0,27,11,31,108,0,0,306,171,0,28,0,63,94,0,49,285,0,0,0,3,97,0,0,0,0,0,0,0,0,0,0,4403\n",
      "600,0,197,841,0,969,254,249,497,0,146,103,208,0,103,173,7,97,86,2,0,1,917,0,0,11,206,23,565,0,0,213,299,0,0,0,17,0,0,0,0,0,0,0,0,0,0,3216\n",
      "687,0,618,443,0,1188,443,405,909,6,206,414,148,0,0,0,21,207,67,111,0,16,209,129,0,6,0,0,152,0,0,489,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3123\n",
      "856,146,107,2011,2,1399,16,1,63,0,15,0,0,5,27,34,701,0,210,179,0,112,552,1,0,0,0,0,15,0,0,227,204,0,0,0,111,0,258,0,0,0,0,0,0,0,0,2748\n",
      "666,0,178,600,11,689,24,6,10,0,26,15,867,0,93,8,1,215,254,1,0,175,28,365,0,0,2,6,193,0,0,28,5,0,0,6,7,0,0,7,0,0,0,0,0,0,0,5514\n",
      "741,63,499,442,0,3143,496,35,20,0,0,1,180,22,33,37,1,11,124,27,5,2,24,0,0,0,0,0,199,0,0,44,12,0,0,0,467,0,0,222,0,0,0,0,0,0,0,3150\n",
      "1599,6,43,158,9,1533,16,302,139,5,0,137,14,0,543,0,181,0,45,7,0,3,13,12,81,0,0,507,998,0,3,264,14,0,0,0,149,0,262,0,4,0,0,0,0,0,0,2953\n",
      "730,9,0,176,0,3437,234,0,9,1,22,305,0,0,30,0,292,0,0,60,94,0,818,0,2,40,0,0,36,1,221,96,279,0,0,0,149,0,0,0,0,0,0,0,0,7,0,2952\n",
      "971,0,103,120,12,651,3,0,223,86,2,1,120,684,189,12,47,0,116,4,0,0,408,10,960,0,0,0,168,0,39,129,217,0,0,0,147,0,0,0,0,0,0,0,2,0,0,4576\n",
      "596,224,51,134,0,2384,242,292,416,42,17,92,1,6,135,1,76,2,0,151,16,0,5,0,0,312,34,66,425,0,31,8,219,0,0,450,185,0,55,19,0,0,1,0,0,0,0,3312\n",
      "1067,5,238,670,253,796,774,70,456,5,270,757,209,4,2,1,289,125,4,6,15,11,45,2,0,223,0,1,37,0,0,47,3,0,0,1,162,0,106,0,4,0,0,0,0,0,0,3342\n",
      "188,32,1599,1665,0,347,593,23,66,3,590,13,12,24,84,38,10,198,169,289,104,21,138,0,1,14,0,95,524,0,0,41,41,0,0,0,98,0,0,0,0,0,0,0,0,0,0,2980\n",
      "811,66,229,164,0,1616,182,38,159,0,18,63,1,0,63,1,38,176,207,1062,0,0,8,8,0,0,199,79,39,0,219,37,114,0,0,0,6,0,0,0,0,0,0,0,0,0,0,4397\n",
      "657,67,140,52,0,1639,15,148,239,0,891,50,15,83,3,42,24,585,20,17,75,66,422,0,0,109,172,274,13,151,0,10,0,0,0,0,399,0,0,34,0,0,0,0,0,0,0,3588\n",
      "1634,193,459,500,33,1594,90,7,151,0,19,3,642,17,598,0,0,146,29,14,0,38,25,1,0,34,0,2,41,0,54,1,15,0,0,0,131,0,164,1,0,0,0,0,0,0,0,3364\n",
      "1053,0,434,640,0,2345,187,42,270,0,76,43,0,110,52,0,11,5,20,37,68,93,7,0,0,2,0,0,19,0,25,239,416,0,0,1,341,0,7,105,0,0,0,0,0,0,0,3352\n",
      "1566,148,1,381,33,906,86,48,131,0,4,0,21,128,11,0,13,23,12,316,59,255,218,0,0,102,3,0,178,0,262,2,11,0,0,0,50,0,0,0,0,0,0,0,0,0,0,5032\n",
      "238,8,176,74,10,926,338,41,296,0,17,0,143,0,0,8,114,266,121,261,0,56,207,273,3,7,0,11,987,0,0,82,17,0,127,0,154,1,17,0,12,0,283,0,0,0,0,4726\n",
      "271,0,248,1006,10,685,9,218,200,0,3,75,788,0,169,1235,1,88,45,10,5,1,114,0,0,0,5,0,7,0,3,156,349,0,0,0,18,0,0,0,3,0,0,0,94,0,0,4184\n",
      "1090,1,398,267,0,1444,24,0,143,21,455,0,4,0,44,0,1,0,245,1,11,1,19,2,0,64,3,24,42,0,281,51,94,0,0,1,6,0,0,0,0,47,0,0,0,0,0,5216\n",
      "1050,493,1470,105,12,648,6,335,84,0,8,19,0,23,143,181,54,0,35,34,9,0,240,2,0,237,0,27,1,0,0,7,48,0,86,0,262,0,0,0,0,0,0,18,0,0,0,4363\n",
      "641,1,91,186,2,2168,405,93,176,64,16,81,3,5,50,0,23,142,46,39,144,0,5,1,0,149,1,3,6,0,53,0,0,0,0,0,114,0,0,0,23,0,0,0,0,0,0,5269\n",
      "1148,7,30,602,1,1035,368,0,387,18,180,47,85,61,327,105,108,848,1588,139,18,2,329,0,0,273,0,2,14,0,0,37,109,0,0,0,744,0,8,16,0,0,0,0,0,0,0,1364\n",
      "837,0,244,306,2,1325,33,6,654,0,155,81,135,285,24,11,64,2,396,329,152,0,71,382,0,15,0,0,23,0,0,541,39,0,0,0,0,940,0,321,0,0,0,0,0,0,0,2627\n",
      "410,0,1128,136,13,1181,153,44,43,90,313,1,441,283,28,15,255,3,368,244,0,610,72,0,0,9,0,67,129,334,0,48,1,0,0,32,30,0,0,1,11,0,16,0,0,0,0,3491\n",
      "2673,0,145,704,73,1328,246,58,315,44,70,0,0,14,25,4,310,8,11,429,0,4,222,0,0,0,0,0,122,0,0,30,205,0,0,0,851,0,0,0,0,0,0,0,0,0,0,2109\n",
      "471,0,59,25,17,1289,347,4,1155,414,162,0,64,450,341,0,17,2,540,38,347,349,184,0,0,1,85,82,9,0,0,829,3,0,0,3,652,0,0,0,0,0,0,0,0,0,0,2061\n",
      "493,0,300,208,1,1248,8,238,187,0,38,482,135,4,144,0,173,12,130,1296,5,0,480,0,0,0,279,0,38,7,0,160,183,0,0,405,128,18,46,21,0,0,0,0,0,0,0,3133\n",
      "746,25,312,226,0,1392,33,0,469,10,174,212,61,0,47,3,25,0,1,212,0,0,29,110,157,0,103,0,62,0,173,6,0,0,0,0,10,0,0,59,0,0,205,0,0,152,0,4986\n",
      "879,0,47,416,1,1464,335,0,254,0,0,66,29,15,191,0,116,88,35,31,409,40,1,0,0,0,0,0,237,0,165,145,11,0,0,0,121,0,0,1,0,0,0,0,0,0,0,4903\n",
      "1350,0,57,703,29,744,83,3,133,22,55,6,19,24,54,187,8,6,59,38,3,186,23,0,0,25,0,35,55,0,0,0,0,0,0,0,1293,0,0,0,27,0,0,0,0,0,0,4773\n",
      "1826,7,28,372,0,1970,157,0,224,18,14,162,38,0,241,12,5,34,81,70,0,11,1085,5,0,0,58,46,111,0,21,222,10,0,0,0,153,0,0,0,0,0,0,0,0,0,0,3019\n",
      "2550,4,44,45,52,616,289,151,488,179,350,85,305,1,88,30,471,4,241,59,5,0,34,0,155,0,26,1,54,0,11,247,0,0,0,0,0,0,0,0,1,248,2,0,0,0,0,3164\n",
      "297,0,173,326,0,272,165,0,601,77,302,0,2,0,62,435,490,632,9,1132,321,0,123,0,0,83,0,0,12,35,0,16,216,0,0,0,15,0,0,0,0,0,0,0,0,0,0,4204\n",
      "376,13,302,368,140,969,659,2,169,0,0,49,314,58,295,150,70,85,82,1,124,0,199,293,0,0,0,0,1,0,0,1,76,0,0,207,0,0,115,0,0,0,0,0,0,0,0,4882\n",
      "754,5,425,90,1,1455,9,532,84,3,4,41,2,0,990,30,35,579,200,3,0,0,69,0,0,0,0,0,370,0,0,178,23,0,0,1,1,0,0,0,1023,2,0,0,0,0,0,3091\n",
      "1191,18,11,405,0,810,40,461,605,406,217,0,185,10,30,14,250,124,4,513,14,109,10,9,1,0,0,0,441,0,0,102,0,0,0,0,140,0,0,0,0,0,0,0,0,0,0,3880\n",
      "276,150,394,131,0,839,0,0,93,367,0,47,151,221,71,22,289,0,25,1,6,22,217,32,0,14,145,0,394,0,26,8,95,2,0,0,289,0,0,14,0,0,0,0,0,0,0,5659\n",
      "1111,70,412,112,102,656,1063,176,93,0,2,16,0,0,270,0,40,1,130,26,92,0,30,84,0,0,0,0,1065,0,0,0,10,0,0,0,370,0,0,0,216,219,0,10,0,0,0,3624\n",
      "945,0,327,596,14,438,544,0,77,16,12,565,34,4,0,6,0,0,14,18,0,75,80,9,0,0,1,7,1,0,0,35,0,0,0,0,188,0,0,0,0,0,0,0,0,0,0,5994\n",
      "1285,0,870,146,0,1128,65,67,188,5,458,0,17,18,157,217,223,31,94,0,0,3,93,174,0,97,0,2,844,0,0,329,400,0,0,0,2,0,0,0,0,17,12,0,0,0,0,3058\n",
      "1221,0,146,1219,0,1414,407,1,246,6,51,88,1,11,8,29,21,6,3,350,69,0,34,72,0,0,0,0,8,0,0,1,386,0,0,0,1,2,0,0,0,0,0,0,0,0,0,4199\n",
      "1094,0,246,129,0,1689,322,279,218,78,54,5,189,44,64,76,50,8,700,154,3,5,1,0,2,64,172,16,292,0,0,163,11,0,0,0,3,0,11,0,5,0,0,0,0,0,129,3724\n",
      "645,1,308,407,0,3564,138,6,3,246,151,213,13,36,10,212,1,66,5,470,0,0,206,351,0,35,0,42,296,0,30,62,39,0,0,0,23,0,0,1,0,0,0,0,0,0,0,2420\n",
      "344,0,790,465,1,768,15,0,365,202,623,7,145,12,0,0,2,55,9,2,0,7,712,824,0,4,0,44,123,0,0,102,5,0,0,0,487,0,0,0,94,0,68,0,0,0,0,3725\n",
      "822,319,315,90,2,2118,571,0,265,5,952,0,0,275,17,36,163,36,216,245,69,0,736,0,0,26,0,1,344,2,226,44,48,0,0,0,2,0,35,0,8,0,2,0,191,0,0,1819\n",
      "2206,21,363,367,1,1084,466,58,172,105,94,130,5,106,9,0,7,14,8,17,75,0,8,1235,0,0,1,98,252,0,0,155,659,0,0,0,40,0,0,0,0,0,0,0,0,4,0,2240\n",
      "707,0,186,265,0,859,1486,204,216,0,558,0,21,30,17,32,0,21,1,274,12,0,241,13,29,0,10,9,19,0,6,2683,45,0,13,0,13,0,0,0,0,0,0,0,0,0,0,2030\n",
      "527,0,830,327,0,1421,162,25,153,24,85,31,1,12,8,51,17,219,7,16,0,0,944,0,0,1,37,0,12,0,0,199,1,0,0,0,39,0,0,0,0,0,0,0,0,0,0,4851\n",
      "383,60,43,1073,0,1130,1559,0,329,133,1,94,63,0,53,0,0,2,215,463,28,122,204,0,0,0,0,0,178,0,0,25,42,0,1,0,13,0,0,2,0,0,108,0,0,0,0,3676\n",
      "924,0,221,567,0,529,0,185,427,3,584,422,28,971,17,0,0,0,569,8,4,21,138,0,0,4,0,35,56,0,0,29,0,0,0,0,74,0,0,0,0,0,0,0,0,0,0,4184\n",
      "1208,0,35,876,85,1369,307,7,25,1,81,248,49,350,27,313,207,9,6,203,8,209,284,0,9,0,1,715,12,0,32,11,20,0,0,35,211,0,0,0,0,0,0,0,0,0,0,3047\n",
      "1147,36,444,178,0,1143,0,9,264,2,9,159,12,327,13,42,178,1563,2,271,156,224,134,4,0,0,522,0,2,0,0,1,0,0,0,0,139,0,0,0,0,0,0,0,0,16,0,3003\n",
      "920,0,4,677,3,660,261,3,0,5,498,6,7,58,2,194,18,2,47,658,0,0,480,26,0,6,0,101,130,0,0,30,548,0,0,0,12,0,0,0,0,5,0,12,0,0,0,4627\n",
      "1148,3,92,120,129,695,7,48,238,473,16,0,34,0,331,660,107,1,21,0,0,0,95,192,593,0,0,2,414,0,0,0,88,0,0,0,9,0,0,0,112,0,0,12,0,0,0,4360\n",
      "987,0,1022,32,28,398,837,301,298,25,31,0,0,12,27,65,0,12,156,1,467,0,2,0,0,0,0,0,324,0,0,984,259,0,0,0,390,0,0,0,0,0,0,0,0,0,0,3342\n",
      "944,0,77,128,442,1377,103,0,229,0,70,0,113,0,489,56,2,0,175,37,6,0,527,0,0,1,11,87,170,1515,0,0,140,0,0,0,424,0,1,27,24,0,0,35,0,0,0,2790\n",
      "703,0,174,751,316,1933,15,0,0,4,0,46,405,0,35,0,14,53,33,9,10,0,639,0,0,1195,47,0,39,0,0,197,5,0,0,0,529,0,0,0,0,0,0,0,0,0,0,2848\n",
      "1345,11,46,179,280,1583,570,4,7,0,2,0,146,92,15,3,315,58,88,42,48,0,66,0,0,0,600,0,48,0,2,4,203,0,0,2,0,0,3,0,0,0,1,0,0,0,0,4237\n",
      "594,0,557,1297,0,1118,0,380,114,2,22,81,3,1,6,0,282,400,74,52,1,8,29,78,0,142,91,0,299,0,194,4,57,0,0,0,128,0,27,0,0,0,7,0,0,0,0,3952\n",
      "1453,0,103,111,0,1689,541,3,291,2,367,0,362,2,24,11,524,0,11,4,1,53,208,2,0,1,0,0,254,0,42,59,16,0,0,2,175,0,0,49,9,0,0,0,0,0,0,3631\n",
      "2326,91,6,47,13,943,1,0,142,0,450,3,13,0,562,2,983,0,243,0,100,2,8,0,0,1,0,0,370,411,0,42,9,139,0,2,11,0,0,27,0,0,0,0,0,0,0,3053\n",
      "301,1,112,419,0,566,193,0,463,225,27,30,131,63,236,275,512,0,0,108,0,0,373,1,0,22,0,19,426,0,0,350,2,0,0,0,2,0,138,2,0,0,0,0,0,0,0,5003\n",
      "2169,4,63,184,0,760,587,26,709,0,10,29,0,0,82,0,3,0,2007,176,178,0,225,0,4,0,1,0,466,0,0,23,1,0,0,178,178,0,0,21,14,0,0,0,0,0,0,1902\n",
      "1578,0,54,819,2,1143,77,4,158,0,4,335,17,4,38,26,475,34,3,17,4,316,23,0,0,39,11,0,67,0,7,16,110,0,0,29,33,0,0,0,0,0,0,10,0,0,0,4547\n",
      "872,14,60,289,7,1575,28,1070,140,0,465,3,0,2,51,0,141,6,29,19,26,0,31,0,0,5,130,3,315,0,0,464,64,0,0,5,883,0,4,75,6,0,0,0,0,0,0,3218\n",
      "819,0,696,1519,4,1654,59,0,1018,0,139,48,156,0,195,89,397,15,134,285,43,34,0,3,8,0,0,0,274,0,7,10,41,1,0,6,2,0,0,0,0,0,0,0,0,0,0,2344\n",
      "1441,153,526,1565,0,1609,306,253,209,0,1,167,12,0,15,0,0,139,59,13,0,1,75,80,7,43,13,1,341,0,127,6,443,0,0,0,113,0,0,1,0,0,0,0,0,0,0,2281\n",
      "1108,11,119,443,0,827,61,13,161,0,163,26,48,145,108,2,11,7,121,543,706,201,104,14,0,570,0,0,151,0,3,41,54,0,0,1,66,0,0,0,0,0,79,0,0,7,4,4082\n",
      "1188,21,113,182,0,2158,12,63,881,0,0,38,0,14,40,0,21,8,7,94,131,0,209,42,0,4,0,5,527,0,0,27,8,0,0,93,457,0,5,0,0,0,0,0,0,0,0,3652\n",
      "774,108,144,1634,271,329,52,113,206,0,37,14,0,12,23,2,27,36,2,356,19,0,159,9,0,74,0,0,1,0,33,992,412,0,0,0,0,0,0,4,0,0,57,0,0,0,0,4100\n",
      "1366,12,107,1433,15,530,156,14,13,214,9,310,345,1,4,0,563,62,217,0,59,1,114,138,10,0,0,0,1635,12,0,839,37,0,0,0,319,0,0,0,6,0,0,0,0,0,0,1459\n",
      "2022,43,293,123,0,693,342,11,429,3,31,6,16,16,449,0,22,22,314,241,0,0,88,0,0,0,1,0,131,0,0,2,22,0,0,3,0,0,0,5,0,0,208,9,0,0,0,4455\n",
      "1811,0,245,376,0,1257,7,431,450,99,405,0,0,39,843,4,7,0,122,1,326,4,311,0,0,0,4,15,485,0,7,241,107,0,0,7,46,0,10,0,0,0,0,0,0,0,0,2340\n",
      "741,29,311,621,87,1690,0,66,821,4,811,160,85,165,41,207,4,1,3,278,5,188,104,1187,0,0,0,135,0,0,0,23,0,0,0,0,186,0,23,0,2,0,0,0,0,0,0,2022\n",
      "1657,0,574,268,325,1334,27,0,573,0,6,82,11,6,290,7,211,36,41,77,0,2,72,2,409,0,0,257,5,0,0,7,19,10,0,406,64,0,0,92,0,0,0,0,0,0,0,3130\n",
      "762,4,675,508,0,1660,18,21,60,0,0,4,0,592,56,281,2,118,824,4,0,278,317,1,15,0,285,141,518,0,4,311,1,0,0,107,108,0,2,0,0,0,0,0,0,0,0,2323\n",
      "328,0,417,597,4,988,119,0,625,15,38,0,28,0,382,44,358,224,3,0,679,0,0,103,0,0,18,0,82,0,6,39,865,0,0,0,42,0,0,62,0,0,0,0,0,0,0,3934\n",
      "1417,78,70,1352,0,1514,259,201,6,18,10,2,3,294,38,244,269,10,37,16,0,2,243,0,251,512,390,31,31,7,0,1,18,0,0,0,42,0,0,2,53,0,0,0,201,0,0,2378\n",
      "1398,0,335,617,25,1712,8,0,2,9,1,207,1,412,51,44,2,3,45,67,0,5,469,33,0,20,0,0,16,0,6,45,238,0,0,0,2,0,0,31,0,0,0,0,0,0,0,4196\n",
      "1005,136,148,516,0,1840,273,66,445,0,41,45,4,82,15,216,861,103,978,15,0,0,5,11,0,0,0,82,295,0,0,55,0,0,0,12,56,0,0,0,0,0,0,0,0,0,0,2695\n",
      "2703,6,1,732,4,690,186,0,308,194,488,12,81,51,8,0,69,127,462,3,0,384,0,0,0,0,0,0,5,0,0,233,105,0,0,31,258,0,153,198,0,0,0,0,0,0,0,2508\n",
      "463,0,204,373,3,1343,79,77,456,2,96,92,73,468,1,0,5,336,66,180,0,67,115,29,0,0,527,0,369,0,0,21,37,0,0,24,165,0,0,0,0,0,47,0,0,0,1490,2792\n",
      "615,23,102,696,0,910,8,27,156,0,8,0,0,672,10,0,2,4,93,0,0,0,40,277,0,96,0,1,415,0,28,10,23,0,0,0,1245,0,0,330,0,0,0,55,0,0,0,4154\n",
      "1357,112,32,477,11,677,35,16,163,5,33,37,31,0,99,10,126,399,16,0,214,0,96,0,0,4,0,11,201,0,76,7,7,0,0,0,322,0,3,1,0,0,0,0,0,0,0,5422\n",
      "2114,1,580,99,0,863,118,2,151,13,10,3,182,25,1,164,760,19,212,168,0,0,63,0,52,0,0,16,114,0,307,113,31,0,0,0,897,0,0,1,0,0,0,0,0,0,0,2921\n",
      "1018,0,396,485,26,615,118,285,73,13,27,0,394,7,1595,116,157,0,10,4,0,0,71,0,0,512,0,0,42,0,62,284,8,0,0,0,1108,0,0,0,99,0,0,0,0,0,0,2475\n",
      "1516,0,221,81,82,1713,493,636,19,6,3,21,5,0,321,0,61,0,9,24,33,0,12,16,0,0,0,1,145,0,12,370,152,0,0,6,146,0,0,34,0,0,0,0,0,0,0,3862\n",
      "432,2,222,595,369,1777,439,0,209,0,579,87,3,0,44,2,343,0,556,37,0,180,32,286,0,0,14,11,43,0,0,464,143,0,0,0,0,0,0,3,40,0,0,0,0,0,0,3088\n",
      "2786,20,100,37,0,845,453,2,286,16,70,1,0,13,102,26,1,5,0,14,0,0,36,176,0,0,12,0,295,0,252,118,147,0,0,194,27,0,3,0,0,46,0,0,0,0,0,3917\n",
      "586,5,63,63,3,975,146,13,65,178,40,148,546,2,126,0,0,163,124,1,0,9,51,0,0,80,0,1,171,0,0,233,4,0,0,8,4,0,0,0,0,0,7,0,0,0,0,6185\n",
      "816,1,489,140,4,1176,498,117,50,298,140,210,0,12,979,6,0,3,88,2,0,0,45,17,0,7,66,0,709,0,0,10,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,4093\n",
      "933,0,48,84,0,2237,724,18,336,0,47,0,0,563,148,141,49,7,0,347,23,240,115,0,0,0,0,351,49,0,3,64,671,0,0,0,6,0,0,2,0,0,7,0,0,0,0,2787\n",
      "447,150,98,1565,0,986,301,70,118,0,711,193,43,20,17,1,0,0,68,0,0,0,20,0,0,1,0,463,74,0,0,1,114,0,0,6,11,0,0,0,1,0,0,0,0,0,0,4521\n",
      "1398,0,34,110,99,1279,395,1,255,0,213,181,12,377,3,6,266,21,93,150,0,284,73,8,0,37,3,9,9,0,0,263,0,0,0,15,1,0,6,20,5,0,0,0,0,0,0,4374\n",
      "2109,0,129,946,0,1759,1,83,4,2,111,40,0,64,651,31,412,11,147,0,205,2,227,47,0,4,81,59,81,0,20,20,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2752\n",
      "1111,0,528,468,1,981,145,3,1137,42,17,8,129,0,23,0,0,2,59,160,280,5,10,0,0,185,0,0,385,0,0,104,81,0,0,0,370,0,0,0,0,0,0,0,0,0,0,3766\n",
      "2097,97,58,647,0,579,52,112,944,0,19,457,147,47,471,21,257,0,9,209,3,142,180,0,0,0,4,1,255,0,0,21,16,0,0,0,470,0,0,0,0,0,0,0,0,0,0,2685\n",
      "1051,0,84,65,11,1438,180,85,615,0,201,24,57,566,69,0,18,272,73,53,168,106,161,0,0,21,0,0,982,0,0,152,8,0,0,0,240,0,0,0,1,0,0,0,0,0,0,3299\n",
      "597,0,317,2091,158,1529,279,33,507,2,1401,0,0,0,21,0,10,104,30,79,234,1,112,0,0,0,1,0,141,0,0,65,63,0,0,0,0,0,11,0,0,0,0,0,0,0,0,2214\n",
      "490,0,29,60,0,638,118,9,762,0,537,40,96,171,1,6,142,1,526,396,0,0,758,6,27,40,0,188,83,0,0,7,0,0,0,0,156,0,0,0,0,0,0,283,0,0,0,4430\n",
      "2445,0,81,680,415,939,123,375,397,3,0,53,96,0,0,2,285,22,41,132,16,0,5,0,5,0,0,7,258,0,0,25,52,0,0,19,103,0,0,0,0,0,0,0,0,0,0,3421\n",
      "890,114,208,367,475,1095,59,0,66,150,4,8,120,10,615,374,2,0,160,55,2,127,184,15,0,0,0,0,350,0,13,7,5,0,0,0,763,0,0,0,0,0,0,0,0,0,0,3762\n",
      "725,120,7,250,226,1035,552,441,4,51,21,1,52,0,280,0,0,4,11,15,0,9,5,0,0,0,131,0,167,384,50,13,53,0,0,0,180,0,0,254,0,0,1,0,0,0,0,4958\n",
      "545,2,55,210,0,420,348,0,300,10,804,23,0,0,4,1,76,150,77,5,768,0,412,2,76,4,570,0,556,0,0,17,62,0,0,2,59,0,0,0,416,0,0,0,0,0,0,4026\n",
      "1941,0,313,741,0,574,25,3,388,4,565,61,22,12,24,0,20,205,0,24,134,1190,154,1,5,14,106,239,10,0,0,27,59,0,0,453,0,0,104,0,0,0,0,0,0,0,0,2582\n",
      "922,2,18,140,24,2011,71,167,19,0,637,71,325,502,253,185,35,226,51,22,0,310,83,1,0,0,0,0,51,2,4,210,509,0,1,0,7,0,0,0,0,0,0,8,0,0,0,3133\n",
      "229,0,49,806,77,1393,337,41,391,5,3,45,4,0,14,0,49,15,58,94,21,0,92,0,0,0,75,0,251,0,12,208,0,0,0,0,88,0,0,0,0,0,181,0,0,0,0,5462\n",
      "1131,0,344,334,0,1528,45,23,182,37,272,0,0,1,0,1748,1,0,2,175,204,0,60,31,0,0,153,0,648,0,0,42,61,0,0,76,44,0,0,2,0,0,0,0,0,0,0,2856\n",
      "417,626,375,141,0,1513,78,0,174,460,478,37,112,0,69,95,69,0,140,1050,0,0,126,39,0,27,14,0,32,0,0,194,0,0,0,0,329,0,0,6,0,0,0,0,0,0,0,3399\n",
      "1195,81,66,103,23,739,39,0,570,7,1045,151,0,10,140,110,7,24,532,1,0,10,436,190,0,46,0,109,91,0,1,449,329,0,0,0,246,0,0,0,5,0,0,0,0,0,0,3245\n",
      "882,0,231,992,8,848,210,42,645,0,1,150,0,167,99,42,155,252,100,4,0,0,1,561,2,3,45,0,121,0,0,29,63,0,0,0,55,627,0,0,0,0,0,0,0,0,0,3665\n",
      "399,0,5,206,0,2685,133,0,617,105,15,479,90,34,5,0,314,26,5,39,4,558,230,0,0,37,0,0,465,0,2,100,14,0,0,0,85,2,1,370,0,0,9,0,2,0,0,2964\n",
      "1096,0,119,191,2,1807,47,17,365,0,2,2,46,91,11,36,34,1,999,230,0,27,228,0,0,2,0,188,828,0,56,110,5,0,0,0,136,0,0,96,52,0,2,0,0,0,0,3174\n",
      "974,479,1491,7,133,553,55,1,104,9,0,4,0,0,252,6,1,100,242,17,969,0,50,0,0,146,111,2,161,45,145,553,0,0,0,0,151,0,0,0,0,0,0,0,0,0,0,3239\n",
      "1207,77,287,759,215,1312,371,30,222,9,908,71,222,97,2,0,209,0,17,115,0,69,690,0,0,0,1,0,118,0,0,845,43,19,0,0,11,0,0,2,0,0,0,0,0,0,0,2072\n",
      "1453,0,2,323,1,1403,44,10,85,64,10,10,0,407,7,0,3,193,3,1,8,4,129,0,0,205,2,0,534,0,0,376,0,0,0,60,2,0,1,0,2,0,3,0,0,0,0,4655\n",
      "999,6,17,290,256,1555,64,18,542,0,45,1,36,40,1,115,659,635,361,4,1,0,323,405,0,4,0,82,9,0,0,15,4,0,0,0,9,0,0,9,0,3,0,0,0,0,0,3492\n",
      "330,0,88,222,9,1092,517,2,21,69,424,0,60,0,469,42,631,0,126,164,156,262,74,0,0,0,0,0,461,0,68,6,318,0,0,0,1,0,0,0,93,0,0,0,0,0,0,4295\n",
      "481,0,316,431,0,576,197,8,487,129,645,90,8,2,568,20,0,1,29,23,0,152,8,173,0,0,0,0,153,0,2,8,76,0,0,0,120,0,0,0,0,0,0,0,0,0,0,5297\n",
      "1574,329,464,1217,0,1010,91,191,63,0,165,448,0,0,2,4,1,0,12,218,0,0,9,568,0,0,0,0,582,0,120,8,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,2900\n",
      "568,217,460,918,0,794,219,0,273,0,126,786,0,0,1,16,84,7,31,34,137,0,70,1,0,6,0,29,9,0,10,700,54,0,0,0,5,0,0,0,0,0,0,0,0,73,1,4371\n",
      "347,2,363,207,2,2514,488,4,27,42,99,0,0,98,11,7,0,0,472,5,78,23,70,1,1,2,10,0,16,0,13,232,23,0,0,0,2,4,0,0,0,0,0,60,0,0,0,4777\n",
      "591,0,300,351,0,742,31,0,737,2,770,2,1,4,16,0,57,0,21,29,434,0,584,286,17,29,57,98,209,0,126,1,0,0,0,0,576,0,6,0,0,0,0,0,2,0,0,3921\n",
      "642,139,150,1043,77,1074,0,636,56,169,0,1,22,10,30,0,6,0,0,11,89,0,3,36,0,117,265,0,566,0,830,59,2,0,0,3,106,0,0,0,0,0,0,0,0,0,0,3858\n",
      "507,16,816,39,49,900,16,102,1457,67,6,150,23,194,75,0,6,0,3,272,261,41,83,0,0,11,0,35,330,30,0,535,104,0,0,0,317,0,0,0,354,8,0,0,1,0,0,3192\n",
      "857,0,366,581,0,955,29,224,362,0,8,454,33,361,143,4,117,0,1071,312,758,0,23,188,0,0,0,2,176,16,204,68,29,0,0,51,68,0,0,19,0,0,0,0,0,0,2,2519\n",
      "545,1,851,421,0,1743,310,0,42,2,2,559,0,233,0,11,224,349,53,371,1,35,489,0,37,62,0,0,285,0,0,54,2,0,0,13,29,0,0,0,0,0,10,0,0,0,0,3266\n",
      "1846,0,136,121,0,1580,44,77,301,0,46,0,2,12,4,294,135,190,33,242,35,0,33,0,0,0,49,1168,78,0,0,5,0,0,0,39,1,0,0,0,0,0,0,0,0,0,0,3529\n",
      "1027,4,997,1038,17,1472,573,85,85,101,0,150,109,23,246,78,28,0,183,1,1,0,207,103,0,0,98,40,270,0,13,595,185,0,0,0,103,128,0,0,0,0,0,0,0,3,0,2037\n",
      "1711,1,231,1923,0,337,0,22,718,49,3,9,336,0,24,35,11,215,576,0,121,0,108,0,0,0,221,0,48,0,57,23,0,0,0,0,77,0,0,0,0,0,0,0,0,0,0,3144\n",
      "1727,0,30,1315,0,416,252,0,110,9,360,0,0,13,0,81,89,0,833,140,0,1,11,0,0,1,19,234,18,0,0,125,1,0,0,0,15,0,0,0,1,0,0,0,0,0,0,4199\n",
      "1367,0,490,933,0,791,0,0,424,3,81,9,16,45,120,0,3,43,257,1,0,440,1,14,0,1,13,0,176,0,0,152,36,98,0,0,390,0,6,0,39,0,0,0,0,0,0,4051\n",
      "936,5,85,102,85,2309,908,6,385,160,15,0,0,0,5,0,9,0,1,225,652,1,0,195,0,1,107,1,1,0,0,157,115,0,0,0,16,0,0,5,294,0,0,0,0,0,0,3219\n",
      "1959,65,7,258,0,1479,139,6,437,204,20,12,5,0,16,8,124,94,392,12,12,0,10,0,0,29,2,3,230,0,0,214,8,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4252\n",
      "1005,24,439,762,14,1262,302,78,23,8,48,7,26,0,20,162,846,6,146,2,0,91,132,1,0,20,1,4,122,0,0,65,4,0,0,0,142,0,0,1,1,0,360,0,0,0,4,3872\n",
      "316,11,777,128,0,733,125,274,154,0,28,245,19,0,1107,0,126,8,121,289,5,1,8,0,4,233,0,12,309,0,0,250,283,0,0,4,123,0,0,0,0,0,1,0,0,0,0,4306\n",
      "789,4,165,78,0,1833,45,0,843,119,197,16,3,51,52,3,37,374,165,1,2,42,34,0,45,0,23,16,245,0,0,11,59,0,172,41,376,0,0,0,0,11,0,163,0,0,0,3985\n",
      "2325,5,14,195,0,452,7,188,226,47,9,1268,1,333,6,1,0,174,782,59,367,52,1,0,0,197,0,0,65,0,0,0,1,0,0,0,47,0,0,0,7,0,0,0,0,6,4,3161\n",
      "1987,0,501,13,0,807,21,0,272,0,58,1,13,573,2,0,55,594,14,3,278,0,25,5,7,0,1,1,426,0,42,17,167,0,0,0,0,0,0,0,77,0,0,0,0,0,0,4040\n",
      "1832,627,5,826,0,2226,250,0,106,44,461,0,24,194,2,381,346,12,452,136,0,0,10,0,0,55,0,0,138,0,0,188,8,0,0,0,27,0,0,0,0,0,0,0,0,0,0,1650\n",
      "1011,3,73,1329,3,484,1851,2,49,0,189,1,8,30,51,3,28,19,22,0,0,19,21,3,0,0,15,3,166,1,2,11,0,0,0,3,747,0,0,0,0,0,0,0,0,0,0,3853\n",
      "617,0,0,38,141,1434,933,0,352,309,515,7,0,1,4,425,928,2,635,37,154,389,11,1,0,73,182,322,183,0,64,146,111,0,0,0,4,0,0,0,0,0,1,0,0,0,0,1981\n",
      "1823,0,713,364,113,218,2,0,24,4,46,12,1,104,20,3,193,1,50,43,21,0,11,0,1,7,1,0,125,0,0,0,91,0,0,0,234,0,0,21,0,0,0,0,0,0,0,5754\n",
      "1073,0,80,29,0,111,308,35,342,2,76,3,0,17,2,336,0,508,23,256,1,13,6,0,380,0,31,0,334,0,0,667,439,176,0,0,925,0,0,716,0,28,2,0,0,0,0,3081\n",
      "743,10,27,1566,0,1064,407,8,132,0,26,12,79,2,2,177,345,4,251,24,1,0,78,32,0,53,733,21,1,0,0,68,5,0,0,0,21,0,0,0,0,0,8,0,0,0,0,4100\n",
      "1499,49,14,727,0,1488,52,45,204,20,111,1,180,2,51,44,0,0,42,121,180,0,16,30,0,0,432,6,12,0,0,483,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,4188\n",
      "253,0,236,1202,0,1012,543,170,618,0,1148,2,0,1,91,56,0,4,21,1,29,0,159,0,0,95,2,1,22,0,0,0,12,0,0,10,43,0,0,0,2,0,2,0,0,0,0,4265\n",
      "1544,2,130,99,0,1290,343,334,338,137,54,15,16,47,523,45,115,19,11,184,3,15,81,0,0,0,0,0,292,0,5,36,25,0,0,6,106,0,0,78,0,0,0,0,0,0,0,4107\n",
      "955,0,17,345,0,1636,32,5,615,6,19,1,1,5,55,0,1,73,272,38,0,136,343,29,0,119,36,1,373,0,110,37,0,0,0,0,6,0,0,8,141,0,0,0,0,0,0,4585\n",
      "641,0,7,1007,0,1771,235,0,491,57,927,30,5,16,384,0,33,100,125,169,0,0,64,23,0,595,0,0,230,0,0,56,18,0,2,0,7,0,0,0,0,0,0,0,0,0,0,3007\n",
      "947,730,245,910,0,574,679,0,35,0,235,59,8,5,163,583,159,118,138,475,0,72,73,0,0,52,0,0,895,0,0,490,36,46,0,3,336,0,0,39,0,0,0,0,0,0,0,1895\n",
      "284,128,36,468,0,674,1482,40,17,0,45,10,98,2,3,104,66,0,160,205,0,33,1355,22,0,1,40,0,0,0,0,4,1,7,0,3,70,0,67,76,0,0,0,0,0,0,0,4499\n",
      "583,23,980,1188,1,1518,19,93,703,0,145,1,0,0,30,30,8,3,15,117,0,0,53,2,7,0,0,0,37,0,3,119,411,0,0,0,170,0,0,0,0,0,0,0,0,0,0,3741\n",
      "1157,1,121,230,2,351,3,141,26,40,25,58,29,181,70,897,59,621,287,0,0,0,240,231,555,11,3,9,508,0,78,5,79,2,0,0,170,0,10,0,0,0,9,0,0,0,0,3791\n",
      "1056,0,150,340,187,1508,3,2,154,67,1,1,1,3,149,0,25,0,223,362,8,18,37,163,0,1,5,0,46,0,126,770,1,0,0,0,189,0,0,3,0,0,0,0,0,0,0,4401\n",
      "2274,0,851,181,184,1875,9,4,347,0,94,8,0,0,9,43,10,1,0,47,3,1,308,0,0,21,0,3,29,0,0,25,18,0,0,0,9,0,0,0,2,0,3,0,0,0,0,3641\n",
      "623,0,14,386,26,794,495,12,701,360,433,6,7,2,611,4,4,45,61,18,29,0,1459,0,0,1,19,0,73,9,1065,95,6,0,0,89,346,0,0,0,0,0,0,0,7,0,0,2200\n",
      "184,0,28,842,0,836,132,56,597,0,95,31,11,16,195,21,0,75,0,4,252,0,13,28,0,3,10,0,97,0,8,5,98,0,0,0,175,0,0,0,0,13,253,8,0,0,0,5914\n",
      "848,0,477,585,12,655,0,19,1366,3,228,324,345,0,8,11,89,138,6,26,0,11,61,616,217,73,0,0,348,0,0,187,0,0,0,0,10,0,277,0,0,0,0,0,0,0,0,3060\n",
      "965,232,38,50,39,1440,113,303,531,29,26,0,0,75,20,19,0,0,1,6,0,0,7,1,0,0,31,0,209,0,0,75,0,0,0,0,432,0,0,0,0,0,61,0,1,0,0,5296\n",
      "1401,0,406,87,0,300,556,392,6,29,201,10,52,0,265,0,246,9,437,49,26,242,310,0,29,0,1,18,13,0,93,1181,13,0,0,180,92,269,0,0,0,0,0,32,0,0,0,3055\n",
      "695,0,621,257,0,1288,11,0,163,0,945,306,39,41,397,25,34,161,0,11,20,24,0,153,0,1,0,94,0,51,26,0,0,0,0,0,816,0,0,3,0,0,0,0,0,0,0,3818\n",
      "1265,0,696,192,212,722,8,305,12,111,43,291,3,796,29,0,20,12,326,306,0,17,1,0,0,4,2,371,225,0,3,13,11,0,0,0,6,0,0,0,22,0,0,0,0,0,0,3976\n",
      "687,0,631,164,0,830,400,82,1,0,110,19,84,218,68,7,8,131,121,4,11,34,125,31,3,0,1,3,705,0,45,24,5,0,0,0,261,0,0,0,0,0,0,0,0,0,0,5187\n",
      "2983,0,660,140,0,1742,277,36,6,99,49,113,76,45,70,0,1,127,142,1,0,0,1,1,0,74,49,130,154,0,0,13,85,0,0,0,134,0,1,2,1,0,0,0,0,0,0,2788\n",
      "505,16,139,265,5,1501,238,232,124,391,662,0,140,574,14,35,22,999,13,3,126,13,830,0,0,1,12,1,5,0,86,1,108,0,0,0,4,0,0,0,0,0,0,0,0,1,0,2934\n",
      "1204,0,2,989,0,827,362,1,118,241,488,172,76,0,2,0,2,8,197,0,44,8,68,6,0,0,0,6,239,0,20,61,1431,0,0,0,317,0,0,0,0,0,0,0,0,0,0,3111\n",
      "806,16,1439,69,55,436,200,13,117,219,335,1204,52,38,376,0,0,68,15,112,63,0,257,0,0,1,6,0,171,0,1,36,177,0,0,0,108,0,0,133,351,0,0,0,0,0,0,3126\n",
      "419,679,140,383,0,725,21,35,35,14,59,0,93,0,57,0,47,1,10,77,204,7,243,184,101,451,0,84,151,0,0,340,287,0,0,0,10,0,0,0,0,0,0,0,0,0,0,5143\n",
      "596,5,1691,320,1,1011,238,21,247,69,71,178,273,3,1,0,338,200,2,0,110,48,50,1,0,0,0,8,2,0,37,35,0,0,0,0,0,0,0,292,6,0,0,0,0,0,0,4146\n",
      "1341,0,1107,1457,43,876,212,136,133,1,6,21,3,38,26,3,216,0,30,280,0,0,107,12,4,126,8,0,482,0,0,365,2,0,0,0,15,0,0,0,0,0,0,0,0,0,0,2950\n",
      "613,1,284,293,0,1402,295,114,1214,0,23,49,0,13,1689,13,94,0,7,10,0,2,107,4,0,17,61,49,110,0,0,100,65,0,0,0,69,0,3,11,0,0,0,0,0,2,0,3286\n",
      "1818,1,333,394,1,945,465,0,38,100,1,7,36,527,32,0,361,2,2,3,120,139,110,5,8,2,0,0,544,0,493,425,0,0,0,5,101,0,0,5,219,0,0,0,0,0,0,2758\n",
      "1057,0,0,322,217,650,1,969,214,41,1006,0,2,0,7,0,12,1,0,166,0,0,17,7,0,19,5,1,95,2,1,44,0,0,0,30,0,0,0,0,2,0,0,0,0,0,0,5112\n",
      "422,0,250,79,0,1381,225,0,72,0,784,2,1,0,916,0,227,91,307,91,0,10,60,0,0,80,0,0,95,0,0,123,16,0,0,73,1183,0,0,1,0,124,0,0,0,6,0,3381\n",
      "1401,4,30,526,0,923,25,0,127,0,483,11,70,1089,1,3,174,11,4,2,49,0,81,297,0,4,18,0,100,0,35,8,1,0,0,0,46,0,0,0,7,0,0,0,0,0,0,4470\n",
      "2655,6,106,74,0,952,76,13,158,125,736,43,19,6,49,0,2,21,971,138,95,0,548,0,0,5,105,0,223,0,1,4,5,0,0,0,36,0,0,2,0,0,0,0,0,0,0,2826\n",
      "335,0,71,259,67,718,1,4,4,167,6,0,174,12,6,0,2,56,1,104,8,0,124,0,0,0,0,4,861,0,0,0,1,0,0,0,236,0,0,246,0,0,6,0,0,0,0,6527\n",
      "649,69,966,1227,0,508,2,30,550,0,302,159,3,49,195,26,19,180,7,49,2,0,324,32,0,0,0,0,5,0,0,147,87,0,0,0,5,0,0,0,0,0,0,6,0,0,0,4402\n",
      "1258,0,0,1119,0,2348,25,0,137,176,2,12,148,92,35,0,0,10,26,0,336,164,18,0,0,23,0,4,1318,0,102,1,49,0,0,0,10,0,0,2,0,0,0,0,0,0,0,2585\n",
      "\n"
     ]
    }
   ],
   "source": [
    "with open(resource_filename('deepbiome', 'tests/data/onefile_x.csv')) as f:\n",
    "    print(f.read())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example of the Y (regression)\n",
    "\n",
    "This is an example of the output file for regression problem."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4.997270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.004092</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5.485126</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5.489590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.500001</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         x1\n",
       "0  4.997270\n",
       "1  5.004092\n",
       "2  5.485126\n",
       "3  5.489590\n",
       "4  1.500001"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = pd.read_csv(resource_filename('deepbiome', 'tests/data/onefile_regression_y.csv'))\n",
    "y.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>2.609926</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>5.488959</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>3.498418</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>5.486107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>5.319623</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           x1\n",
       "995  2.609926\n",
       "996  5.488959\n",
       "997  3.498418\n",
       "998  5.486107\n",
       "999  5.319623"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example of the Y (classification)\n",
    "\n",
    "This is an example of the output file for classification problem. Below example file has 1000 samples in rows."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>V1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    V1\n",
       "0  1.0\n",
       "1  1.0\n",
       "2  0.0\n",
       "3  0.0\n",
       "4  1.0"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = pd.read_csv(resource_filename('deepbiome', 'tests/data/onefile_classification_y.csv'))\n",
    "y.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>V1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      V1\n",
       "995  1.0\n",
       "996  0.0\n",
       "997  1.0\n",
       "998  0.0\n",
       "999  1.0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exmple of the training index file for `k` fold cross-validation\n",
    "\n",
    "For each fold, we have to set the training and test set. If the index file is given, DeepBiome sets the training set and test set based on the index file for 5 fold cross-validation. Below is the example of the index file. Each column has the training indices for each fold. DeepBiome will only use the samples in this index set for training."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   0  1  2  3  4\n",
       "0  1  1  3  1  1\n",
       "1  2  2  4  2  2\n",
       "2  3  3  5  3  4\n",
       "3  6  4  7  4  5\n",
       "4  7  5  9  5  6"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "idxs = pd.read_csv(resource_filename('deepbiome', 'tests/data/onefile_idx.csv'), dtype=np.int)\n",
    "idxs.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>795</th>\n",
       "      <td>994</td>\n",
       "      <td>996</td>\n",
       "      <td>994</td>\n",
       "      <td>995</td>\n",
       "      <td>996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>796</th>\n",
       "      <td>995</td>\n",
       "      <td>997</td>\n",
       "      <td>995</td>\n",
       "      <td>996</td>\n",
       "      <td>997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>797</th>\n",
       "      <td>997</td>\n",
       "      <td>998</td>\n",
       "      <td>996</td>\n",
       "      <td>997</td>\n",
       "      <td>998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>798</th>\n",
       "      <td>999</td>\n",
       "      <td>999</td>\n",
       "      <td>998</td>\n",
       "      <td>998</td>\n",
       "      <td>999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>799</th>\n",
       "      <td>1000</td>\n",
       "      <td>1000</td>\n",
       "      <td>999</td>\n",
       "      <td>1000</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        0     1    2     3     4\n",
       "795   994   996  994   995   996\n",
       "796   995   997  995   996   997\n",
       "797   997   998  996   997   998\n",
       "798   999   999  998   998   999\n",
       "799  1000  1000  999  1000  1000"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "idxs.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below is the index set for 1st fold. From 1000 samples above, it uses 800 samples for training."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    1\n",
       "1    2\n",
       "2    3\n",
       "3    6\n",
       "4    7\n",
       "Name: 0, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "idxs.iloc[:,0].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "795     994\n",
       "796     995\n",
       "797     997\n",
       "798     999\n",
       "799    1000\n",
       "Name: 0, dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "idxs.iloc[:,0].tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Prepare the configuration\n",
    "\n",
    "For detailed configuration, we can build the configuration information for the network training by:\n",
    "1. the python dictionary format\n",
    "1. the configufation file (.cfg).\n",
    "\n",
    "In this notebook, we show the python dictionary format configuration.\n",
    "\n",
    "Please check the detailed information about each option in the [documantation](https://young-won.github.io/deepbiome/prerequisites.html#configuration)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### For preparing the configuration about the network information (`network_info`)\n",
    "\n",
    "To give the information about the training process, we provide a dictionary of configurations to the `netowrk_info` field.\n",
    "Your configuration for the network training should include the information about:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "network_info = {\n",
    "    'architecture_info': {\n",
    "        'batch_normalization': 'False',\n",
    "        'drop_out': '0',\n",
    "        'weight_initial': 'glorot_uniform',\n",
    "        'weight_l1_penalty':'0.',\n",
    "        'weight_decay': 'phylogenetic_tree',\n",
    "    },\n",
    "    'model_info': {\n",
    "        'lr': '0.01',\n",
    "        'decay': '0.001',\n",
    "        'loss': 'binary_crossentropy',\n",
    "        'metrics': 'binary_accuracy, sensitivity, specificity, gmeasure',\n",
    "        'taxa_selection_metrics': 'sensitivity, specificity, gmeasure, accuracy',\n",
    "        'network_class': 'DeepBiomeNetwork',\n",
    "        'optimizer': 'adam',\n",
    "        'reader_class': 'MicroBiomeClassificationReader',\n",
    "        'normalizer': 'normalize_minmax',\n",
    "    },\n",
    "    'training_info': {\n",
    "        'epochs': '10',\n",
    "        'batch_size': '50', \n",
    "        'callbacks': 'ModelCheckpoint',\n",
    "        'monitor': 'val_loss',\n",
    "        'mode' : 'min',\n",
    "        'min_delta': '1e-7',\n",
    "    },\n",
    "    'validation_info': {\n",
    "        'batch_size': 'None', \n",
    "        'validation_size': '0.2'\n",
    "    },\n",
    "    'test_info': {\n",
    "        'batch_size': 'None'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### For preparing the configuration about the path information (`path_info`)\n",
    "\n",
    "To give the information about the path of dataset, paths for saving the trained weights and the evaluation results, we provide a dictionary of configurations to the `path_info` field.\n",
    "Your configuration for the network training should include the information about:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "path_info = {\n",
    "    'data_info': {\n",
    "        'data_path': resource_filename('deepbiome', 'tests/data'),\n",
    "        'idx_path': resource_filename('deepbiome', 'tests/data/onefile_idx.csv'),\n",
    "        'tree_info_path': resource_filename('deepbiome', 'tests/data/genus48_dic.csv'),\n",
    "        'x_path': 'onefile_x.csv',\n",
    "        'y_path': 'classification_y.csv'\n",
    "    },\n",
    "    'model_info': {\n",
    "        'evaluation': 'eval.npy',\n",
    "        'history': 'hist.json',\n",
    "        'model_dir': './example_result/',\n",
    "        'weight': 'weight.h5'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Deepbiome Training\n",
    "\n",
    "Now we can train the DeepBiome network based on the configurations."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For logging, we used the python logging library."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "logging.basicConfig(format = '[%(name)-8s|%(levelname)s|%(filename)s:%(lineno)s] %(message)s',\n",
    "                    level=logging.DEBUG)\n",
    "log = logging.getLogger()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The deeobiome_train function provide the test evaluation, train evaluation and the deepbiome network instance.\n",
    "\n",
    "If we set `number_of_fold`, then DeepBiome performs cross-validation based on that value. If not, DeepBiome package performs cross-validation based on the index file. If both `number_of_fold` option and the index file are missing, then the library performs leave-one-out-cross-validation (LOOCV)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:105] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:143] -------1 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:153] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:154] Build network for 1 simulation\n",
      "[root    |INFO|build_network.py:508] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:514] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:515] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:522]      Genus: 48\n",
      "[root    |INFO|build_network.py:522]     Family: 40\n",
      "[root    |INFO|build_network.py:522]      Order: 23\n",
      "[root    |INFO|build_network.py:522]      Class: 17\n",
      "[root    |INFO|build_network.py:522]     Phylum: 9\n",
      "[root    |INFO|build_network.py:526] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:527] Phylogenetic_tree_dict info: ['Genus', 'Family', 'Phylum', 'Number', 'Class', 'Order']\n",
      "[root    |INFO|build_network.py:528] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:551] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:559] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:561] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/resource_variable_ops.py:432: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Colocations handled automatically by placer.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[tensorflow|WARNING|deprecation.py:328] From /usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/resource_variable_ops.py:432: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Colocations handled automatically by placer.\n",
      "[root    |INFO|build_network.py:643] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:164] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:165] 1 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:133] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/math_ops.py:2862: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.cast instead.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[tensorflow|WARNING|deprecation.py:328] From /usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/math_ops.py:2862: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.cast instead.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 1ms/step - loss: 0.6719 - binary_accuracy: 0.6719 - sensitivity: 0.9674 - specificity: 0.0271 - gmeasure: 0.0347 - val_loss: 0.6456 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 133us/step - loss: 0.6349 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6189 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 129us/step - loss: 0.6233 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6161 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 136us/step - loss: 0.6241 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6161 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 142us/step - loss: 0.6238 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6161 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 129us/step - loss: 0.6236 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6164 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 140us/step - loss: 0.6236 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6163 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 0.6238 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6162 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 126us/step - loss: 0.6239 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6161 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 125us/step - loss: 0.6239 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6166 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:83] Load trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |INFO|build_network.py:143] Training end with time 3.7204179763793945!\n",
      "[root    |INFO|build_network.py:79] Saved trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |DEBUG|deepbiome.py:173] Save weight at ./example_result/weight_0.h5\n",
      "[root    |DEBUG|deepbiome.py:176] Save history at ./example_result/hist_0.json\n",
      "[root    |INFO|build_network.py:169] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 4us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:174] Evaluation end with time 0.00818943977355957!\n",
      "[root    |INFO|build_network.py:175] Evaluation: [0.622032642364502, 0.6862499713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:169] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 11us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:174] Evaluation end with time 0.008712053298950195!\n",
      "[root    |INFO|build_network.py:175] Evaluation: [0.6190659999847412, 0.6899999976158142, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:187] Compute time : 6.163313388824463\n",
      "[root    |INFO|deepbiome.py:188] 1 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:143] -------2 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:153] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:154] Build network for 2 simulation\n",
      "[root    |INFO|build_network.py:508] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:514] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:515] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:522]      Genus: 48\n",
      "[root    |INFO|build_network.py:522]     Family: 40\n",
      "[root    |INFO|build_network.py:522]      Order: 23\n",
      "[root    |INFO|build_network.py:522]      Class: 17\n",
      "[root    |INFO|build_network.py:522]     Phylum: 9\n",
      "[root    |INFO|build_network.py:526] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:527] Phylogenetic_tree_dict info: ['Genus', 'Family', 'Phylum', 'Number', 'Class', 'Order']\n",
      "[root    |INFO|build_network.py:528] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:551] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:559] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:561] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:643] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:164] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:165] 2 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:133] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 861us/step - loss: 0.6623 - binary_accuracy: 0.7094 - sensitivity: 0.9720 - specificity: 0.0362 - gmeasure: 0.0421 - val_loss: 0.6232 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 0.6085 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5766 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 148us/step - loss: 0.5989 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5756 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 130us/step - loss: 0.5983 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5772 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 131us/step - loss: 0.5973 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5769 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 0.5976 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5778 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 0.5974 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5761 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 133us/step - loss: 0.5988 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5766 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 140us/step - loss: 0.5978 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5791 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 134us/step - loss: 0.5970 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5768 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:83] Load trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |INFO|build_network.py:143] Training end with time 2.936978340148926!\n",
      "[root    |INFO|build_network.py:79] Saved trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |DEBUG|deepbiome.py:173] Save weight at ./example_result/weight_1.h5\n",
      "[root    |DEBUG|deepbiome.py:176] Save history at ./example_result/hist_1.json\n",
      "[root    |INFO|build_network.py:169] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:174] Evaluation end with time 0.007624387741088867!\n",
      "[root    |INFO|build_network.py:175] Evaluation: [0.5941978693008423, 0.7200000286102295, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:169] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 9us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:174] Evaluation end with time 0.0067102909088134766!\n",
      "[root    |INFO|build_network.py:175] Evaluation: [0.5942409038543701, 0.7200000286102295, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:187] Compute time : 3.858309268951416\n",
      "[root    |INFO|deepbiome.py:188] 2 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:143] -------3 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:153] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:154] Build network for 3 simulation\n",
      "[root    |INFO|build_network.py:508] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:514] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:515] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:522]      Genus: 48\n",
      "[root    |INFO|build_network.py:522]     Family: 40\n",
      "[root    |INFO|build_network.py:522]      Order: 23\n",
      "[root    |INFO|build_network.py:522]      Class: 17\n",
      "[root    |INFO|build_network.py:522]     Phylum: 9\n",
      "[root    |INFO|build_network.py:526] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:527] Phylogenetic_tree_dict info: ['Genus', 'Family', 'Phylum', 'Number', 'Class', 'Order']\n",
      "[root    |INFO|build_network.py:528] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:551] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:559] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:561] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:643] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:164] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:165] 3 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:133] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 829us/step - loss: 0.6718 - binary_accuracy: 0.6969 - sensitivity: 0.9708 - specificity: 0.0403 - gmeasure: 0.0439 - val_loss: 0.6492 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 135us/step - loss: 0.6296 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6132 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 132us/step - loss: 0.6121 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6117 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 142us/step - loss: 0.6150 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6111 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.6141 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6109 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 132us/step - loss: 0.6138 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6108 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 131us/step - loss: 0.6142 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6108 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 126us/step - loss: 0.6137 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6109 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 130us/step - loss: 0.6137 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6109 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 134us/step - loss: 0.6136 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6108 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:83] Load trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |INFO|build_network.py:143] Training end with time 3.0752785205841064!\n",
      "[root    |INFO|build_network.py:79] Saved trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |DEBUG|deepbiome.py:173] Save weight at ./example_result/weight_2.h5\n",
      "[root    |DEBUG|deepbiome.py:176] Save history at ./example_result/hist_2.json\n",
      "[root    |INFO|build_network.py:169] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:174] Evaluation end with time 0.009227991104125977!\n",
      "[root    |INFO|build_network.py:175] Evaluation: [0.6128766536712646, 0.6974999904632568, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:169] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 11us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:174] Evaluation end with time 0.008453130722045898!\n",
      "[root    |INFO|build_network.py:175] Evaluation: [0.6487385630607605, 0.6549999713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:187] Compute time : 4.265295505523682\n",
      "[root    |INFO|deepbiome.py:188] 3 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:143] -------4 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:153] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:154] Build network for 4 simulation\n",
      "[root    |INFO|build_network.py:508] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:514] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:515] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:522]      Genus: 48\n",
      "[root    |INFO|build_network.py:522]     Family: 40\n",
      "[root    |INFO|build_network.py:522]      Order: 23\n",
      "[root    |INFO|build_network.py:522]      Class: 17\n",
      "[root    |INFO|build_network.py:522]     Phylum: 9\n",
      "[root    |INFO|build_network.py:526] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:527] Phylogenetic_tree_dict info: ['Genus', 'Family', 'Phylum', 'Number', 'Class', 'Order']\n",
      "[root    |INFO|build_network.py:528] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:551] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:559] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:561] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:643] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:164] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:165] 4 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:133] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 833us/step - loss: 0.6661 - binary_accuracy: 0.6844 - sensitivity: 0.9978 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6375 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.6250 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6218 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 132us/step - loss: 0.6264 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6220 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6226 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6215 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.6230 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 0.6224 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6225 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6213 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6226 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 0.6225 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6228 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6213 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:83] Load trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |INFO|build_network.py:143] Training end with time 2.998058795928955!\n",
      "[root    |INFO|build_network.py:79] Saved trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |DEBUG|deepbiome.py:173] Save weight at ./example_result/weight_3.h5\n",
      "[root    |DEBUG|deepbiome.py:176] Save history at ./example_result/hist_3.json\n",
      "[root    |INFO|build_network.py:169] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:174] Evaluation end with time 0.008797407150268555!\n",
      "[root    |INFO|build_network.py:175] Evaluation: [0.6220258474349976, 0.6862499713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:169] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 9us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:174] Evaluation end with time 0.007493495941162109!\n",
      "[root    |INFO|build_network.py:175] Evaluation: [0.6190847754478455, 0.6899999976158142, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:187] Compute time : 3.970416784286499\n",
      "[root    |INFO|deepbiome.py:188] 4 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:143] -------5 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:153] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:154] Build network for 5 simulation\n",
      "[root    |INFO|build_network.py:508] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:514] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:515] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:522]      Genus: 48\n",
      "[root    |INFO|build_network.py:522]     Family: 40\n",
      "[root    |INFO|build_network.py:522]      Order: 23\n",
      "[root    |INFO|build_network.py:522]      Class: 17\n",
      "[root    |INFO|build_network.py:522]     Phylum: 9\n",
      "[root    |INFO|build_network.py:526] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:527] Phylogenetic_tree_dict info: ['Genus', 'Family', 'Phylum', 'Number', 'Class', 'Order']\n",
      "[root    |INFO|build_network.py:528] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:551] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:559] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:561] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:643] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:164] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:165] 5 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:133] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 822us/step - loss: 0.6619 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6205 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 130us/step - loss: 0.6268 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6167 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 0.6307 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6171 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 140us/step - loss: 0.6279 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6167 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.6275 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6161 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 0.6274 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6164 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 133us/step - loss: 0.6277 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6166 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 136us/step - loss: 0.6274 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6169 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 136us/step - loss: 0.6284 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6160 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 131us/step - loss: 0.6274 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6158 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:83] Load trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |INFO|build_network.py:143] Training end with time 3.1041157245635986!\n",
      "[root    |INFO|build_network.py:79] Saved trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |DEBUG|deepbiome.py:173] Save weight at ./example_result/weight_4.h5\n",
      "[root    |DEBUG|deepbiome.py:176] Save history at ./example_result/hist_4.json\n",
      "[root    |INFO|build_network.py:169] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:174] Evaluation end with time 0.008765697479248047!\n",
      "[root    |INFO|build_network.py:175] Evaluation: [0.6244078874588013, 0.6825000047683716, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:169] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 9us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:174] Evaluation end with time 0.008251190185546875!\n",
      "[root    |INFO|build_network.py:175] Evaluation: [0.6067084670066833, 0.7049999833106995, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:187] Compute time : 4.239539861679077\n",
      "[root    |INFO|deepbiome.py:188] 5 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:191] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:193] Train Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure']\n",
      "[root    |INFO|deepbiome.py:196]       mean : [0.61510818 0.69449999 1.         0.         0.        ]\n",
      "[root    |INFO|deepbiome.py:197]        std : [0.01117594 0.01370677 0.         0.         0.        ]\n",
      "[root    |INFO|deepbiome.py:198] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:200] Test Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure']\n",
      "[root    |INFO|deepbiome.py:203]       mean : [0.61756774 0.692      1.         0.         0.        ]\n",
      "[root    |INFO|deepbiome.py:204]        std : [0.018101   0.02158705 0.         0.         0.        ]\n",
      "[root    |INFO|deepbiome.py:205] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:214] Total Computing Ended\n",
      "[root    |INFO|deepbiome.py:215] -----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "test_evaluation, train_evaluation, network = deepbiome.deepbiome_train(log, network_info, path_info, number_of_fold=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `deepbiome_train` saves the trained model weights, evaluation results and history based on the path information from the configuration.\n",
    "\n",
    "From the example above, we can check that `hist_*.json`, `weight_*.h5`, `test_eval.npy`, `train_eval.npy` files were saved."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['hist_0.json',\n",
       " 'weight_2.h5',\n",
       " 'test_eval.npy',\n",
       " 'weight_0.h5',\n",
       " 'train_eval.npy',\n",
       " 'hist_2.json',\n",
       " 'hist_4.json',\n",
       " 'weight_3.h5',\n",
       " 'hist_3.json',\n",
       " 'weight_1.h5',\n",
       " 'weight_4.h5',\n",
       " 'hist_1.json']"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.listdir(path_info['model_info']['model_dir'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lets check the history files."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nrZndbmZXZzZbBtSY2TpgOfB1d68BMLMxwCig876ilKqE3evhUEvj7CIivVekv7Nw98eBx5ut+2bW\nYwe+mrk1f+02PjggHq1UZXC/9Vk4t+Wf64uI9EZxD3B3LSOmQp9B+r2FiEgzCotsiSSMuVjjFiIi\nzSgsmktVwt5tsPfU358WEelNFBbNNYxbbHsu3jpEJDY1NTVMmzaNadOmcfrpp1NaWtq43DC5YC6f\n+9zn2Lhx4ym3ueuuu/jlL38ZRsmR0zW4mxs+AfoNC7qiysOdiEtEuoehQ4eyalVwQbRvf/vbFBUV\n8bWvfa3JNu6Ou5NItPyZ+9577825ny9+8YsdL7aT6MyiObPg7GLrsxDRDxZFpHvavHkzEydO5Prr\nr2fSpEns3LmTm2++uXGq8dtvv71x24svvphVq1aRTqcpLi5m0aJFTJ06lYsuuohdu4Kv5//t3/5t\n41TjF198MYsWLWLGjBmcc845/P73vwfg8OHDfOpTn2LixIlce+21VFRUNAZZZ9KZRUtSlbD2V1Cz\nGYaNjbsakd7tiUXw7mvhtnn6uXDVB66Y0CYbNmzgvvvuo6Ii+NHzHXfcwZAhQ0in08yePZtrr72W\niRObTLDN/v37ueSSS7jjjjv46le/ys9+9jMWLVr0gbbdnVdeeYWlS5dy++238+STT/LjH/+Y008/\nnYcffpjVq1c3mea8M+nMoiWNv7fQV2hFpKmzzjqrMSgAHnjgAaZPn8706dNZv359i1ON9+3bl6uu\nugo49RTi11xzzQe2ef7551mwYAEQzCk1aVI8s/DqzKIlQ86EgWVBV9T5X4i7GpHerZ1nAFHp379/\n4+NNmzbxwx/+kFdeeYXi4mJuuOGGFqcaLygoaHycTCZJp9Mttt0w1fiptomLzixa0jhu8RzU18dd\njYh0UQcOHGDAgAEMHDiQnTt3smxZixNkd8jMmTN58MEHAXjttddyXiQpKjqzaE2qElbfD7vWBv2b\nIiLNTJ8+nYkTJzJ+/HhGjx7dZKrxsHzpS1/is5/9LBMnTmy8DRo0KPT95BLZFOWdrcNTlDe3vxp+\nMAk+9vdwUff5eptIT6Apyk9Kp9Ok02kKCwvZtGkTV155JZs2bSIv78N/1u/IFOU6s2jNoDIYclYw\nbqGwEJGYHDp0iMsvv5x0Oo2789Of/rRdQdFRCotTSVXCaw9BXRqSeqtEpPMVFxezcuXKuMvQAPcp\n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\nsLavhLEs6wAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f7660bcf208>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "with open('./%s/hist_0.json' % path_info['model_info']['model_dir'], 'r') as f:\n",
    "    history = json.load(f)\n",
    "    \n",
    "plt.plot(history['val_loss'], label='Validation')\n",
    "plt.plot(history['loss'], label='Training')\n",
    "plt.legend()\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Test evauation and train evauation is the numpy array of the shape (number of folds, number of evaluation measures)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.619066  , 0.69      , 1.        , 0.        , 0.        ],\n",
       "       [0.5942409 , 0.72000003, 1.        , 0.        , 0.        ],\n",
       "       [0.64873856, 0.65499997, 1.        , 0.        , 0.        ],\n",
       "       [0.61908478, 0.69      , 1.        , 0.        , 0.        ],\n",
       "       [0.60670847, 0.70499998, 1.        , 0.        , 0.        ]])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.62203264, 0.68624997, 1.        , 0.        , 0.        ],\n",
       "       [0.59419787, 0.72000003, 1.        , 0.        , 0.        ],\n",
       "       [0.61287665, 0.69749999, 1.        , 0.        , 0.        ],\n",
       "       [0.62202585, 0.68624997, 1.        , 0.        , 0.        ],\n",
       "       [0.62440789, 0.6825    , 1.        , 0.        , 0.        ]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_evaluation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Load the pre-trained network for training\n",
    "\n",
    "If you have a pre-trianed model, you warm_start next training using the pre-trained weights by setting the `warm_start` option in `training_info` to `True`. The file path of the pre-trained weights passed in the `warm_start_model` option. Below is the example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "warm_start_network_info = {\n",
    "    'architecture_info': {\n",
    "        'batch_normalization': 'False',\n",
    "        'drop_out': '0',\n",
    "        'weight_initial': 'glorot_uniform',\n",
    "        'weight_l1_penalty':'0.',\n",
    "        'weight_decay': 'phylogenetic_tree',\n",
    "    },\n",
    "    'model_info': {\n",
    "        'decay': '0.001',\n",
    "        'loss': 'binary_crossentropy',\n",
    "        'lr': '0.01',\n",
    "        'metrics': 'binary_accuracy, sensitivity, specificity, gmeasure',\n",
    "        'network_class': 'DeepBiomeNetwork',\n",
    "        'normalizer': 'normalize_minmax',\n",
    "        'optimizer': 'adam',\n",
    "        'reader_class': 'MicroBiomeClassificationReader',\n",
    "        'taxa_selection_metrics': 'sensitivity, specificity, gmeasure, accuracy',\n",
    "    },\n",
    "    'training_info': {\n",
    "        'warm_start':'True',\n",
    "        'warm_start_model':'./example_result/weight.h5',\n",
    "        'epochs': '10',\n",
    "        'batch_size': '50',\n",
    "        'callbacks': 'ModelCheckpoint',\n",
    "        'monitor': 'val_loss',\n",
    "        'mode' : 'min',\n",
    "        'min_delta': '1e-7',\n",
    "    },\n",
    "    'validation_info': {\n",
    "        'batch_size': 'None', \n",
    "        'validation_size': '0.2'\n",
    "    },\n",
    "    'test_info': {\n",
    "        'batch_size': 'None'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:105] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:143] -------1 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:153] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:154] Build network for 1 simulation\n",
      "[root    |INFO|build_network.py:508] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:514] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:515] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:522]      Genus: 48\n",
      "[root    |INFO|build_network.py:522]     Family: 40\n",
      "[root    |INFO|build_network.py:522]      Order: 23\n",
      "[root    |INFO|build_network.py:522]      Class: 17\n",
      "[root    |INFO|build_network.py:522]     Phylum: 9\n",
      "[root    |INFO|build_network.py:526] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:527] Phylogenetic_tree_dict info: ['Genus', 'Family', 'Phylum', 'Number', 'Class', 'Order']\n",
      "[root    |INFO|build_network.py:528] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:551] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:559] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:561] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:643] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|build_network.py:83] Load trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |INFO|deepbiome.py:164] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:165] 1 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:133] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 851us/step - loss: 0.6248 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6160 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 155us/step - loss: 0.6242 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6178 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 154us/step - loss: 0.6239 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6160 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 152us/step - loss: 0.6237 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6160 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.6237 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6159 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 143us/step - loss: 0.6233 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6166 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 131us/step - loss: 0.6237 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6159 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 132us/step - loss: 0.6241 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6156 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 140us/step - loss: 0.6230 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6158 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 133us/step - loss: 0.6230 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6155 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:83] Load trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |INFO|build_network.py:143] Training end with time 2.9854896068573!\n",
      "[root    |INFO|build_network.py:79] Saved trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |DEBUG|deepbiome.py:173] Save weight at ./example_result/weight_0.h5\n",
      "[root    |DEBUG|deepbiome.py:176] Save history at ./example_result/hist_0.json\n",
      "[root    |INFO|build_network.py:169] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 4us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:174] Evaluation end with time 0.009921789169311523!\n",
      "[root    |INFO|build_network.py:175] Evaluation: [0.6211239695549011, 0.6862499713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:169] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 11us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:174] Evaluation end with time 0.00890207290649414!\n",
      "[root    |INFO|build_network.py:175] Evaluation: [0.6184194684028625, 0.6899999976158142, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:187] Compute time : 4.455077886581421\n",
      "[root    |INFO|deepbiome.py:188] 1 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:143] -------2 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:153] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:154] Build network for 2 simulation\n",
      "[root    |INFO|build_network.py:508] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:514] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:515] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:522]      Genus: 48\n",
      "[root    |INFO|build_network.py:522]     Family: 40\n",
      "[root    |INFO|build_network.py:522]      Order: 23\n",
      "[root    |INFO|build_network.py:522]      Class: 17\n",
      "[root    |INFO|build_network.py:522]     Phylum: 9\n",
      "[root    |INFO|build_network.py:526] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:527] Phylogenetic_tree_dict info: ['Genus', 'Family', 'Phylum', 'Number', 'Class', 'Order']\n",
      "[root    |INFO|build_network.py:528] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:551] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:559] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:561] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:643] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:83] Load trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |INFO|deepbiome.py:164] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:165] 2 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:133] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 837us/step - loss: 0.5980 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5764 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 146us/step - loss: 0.5986 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5792 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 134us/step - loss: 0.5975 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5771 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 135us/step - loss: 0.5977 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5758 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.5970 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5767 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 0.5988 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5795 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.5977 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5761 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 145us/step - loss: 0.5999 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5784 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 135us/step - loss: 0.5969 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5759 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 133us/step - loss: 0.5989 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5758 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:83] Load trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |INFO|build_network.py:143] Training end with time 2.8258769512176514!\n",
      "[root    |INFO|build_network.py:79] Saved trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |DEBUG|deepbiome.py:173] Save weight at ./example_result/weight_1.h5\n",
      "[root    |DEBUG|deepbiome.py:176] Save history at ./example_result/hist_1.json\n",
      "[root    |INFO|build_network.py:169] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 4us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:174] Evaluation end with time 0.01132345199584961!\n",
      "[root    |INFO|build_network.py:175] Evaluation: [0.5930893421173096, 0.7200000286102295, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:169] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 10us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:174] Evaluation end with time 0.008644819259643555!\n",
      "[root    |INFO|build_network.py:175] Evaluation: [0.5931310057640076, 0.7200000286102295, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:187] Compute time : 4.068595886230469\n",
      "[root    |INFO|deepbiome.py:188] 2 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:143] -------3 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:153] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:154] Build network for 3 simulation\n",
      "[root    |INFO|build_network.py:508] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:514] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:515] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:522]      Genus: 48\n",
      "[root    |INFO|build_network.py:522]     Family: 40\n",
      "[root    |INFO|build_network.py:522]      Order: 23\n",
      "[root    |INFO|build_network.py:522]      Class: 17\n",
      "[root    |INFO|build_network.py:522]     Phylum: 9\n",
      "[root    |INFO|build_network.py:526] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:527] Phylogenetic_tree_dict info: ['Genus', 'Family', 'Phylum', 'Number', 'Class', 'Order']\n",
      "[root    |INFO|build_network.py:528] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:551] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:559] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:561] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:643] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|build_network.py:83] Load trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |INFO|deepbiome.py:164] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:165] 3 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:133] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 841us/step - loss: 0.6152 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6109 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 0.6142 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6108 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.6141 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6108 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 145us/step - loss: 0.6135 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6108 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 151us/step - loss: 0.6136 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6108 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.6133 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6109 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 150us/step - loss: 0.6137 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6108 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6137 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6108 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 150us/step - loss: 0.6135 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6107 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.6135 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6108 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:83] Load trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |INFO|build_network.py:143] Training end with time 2.974233388900757!\n",
      "[root    |INFO|build_network.py:79] Saved trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |DEBUG|deepbiome.py:173] Save weight at ./example_result/weight_2.h5\n",
      "[root    |DEBUG|deepbiome.py:176] Save history at ./example_result/hist_2.json\n",
      "[root    |INFO|build_network.py:169] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:174] Evaluation end with time 0.009840965270996094!\n",
      "[root    |INFO|build_network.py:175] Evaluation: [0.6127115488052368, 0.6974999904632568, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:169] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 12us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:174] Evaluation end with time 0.009210586547851562!\n",
      "[root    |INFO|build_network.py:175] Evaluation: [0.6486936807632446, 0.6549999713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:187] Compute time : 4.316506624221802\n",
      "[root    |INFO|deepbiome.py:188] 3 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:143] -------4 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:153] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:154] Build network for 4 simulation\n",
      "[root    |INFO|build_network.py:508] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:514] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:515] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:522]      Genus: 48\n",
      "[root    |INFO|build_network.py:522]     Family: 40\n",
      "[root    |INFO|build_network.py:522]      Order: 23\n",
      "[root    |INFO|build_network.py:522]      Class: 17\n",
      "[root    |INFO|build_network.py:522]     Phylum: 9\n",
      "[root    |INFO|build_network.py:526] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:527] Phylogenetic_tree_dict info: ['Genus', 'Family', 'Phylum', 'Number', 'Class', 'Order']\n",
      "[root    |INFO|build_network.py:528] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:551] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:559] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:561] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:643] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:83] Load trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |INFO|deepbiome.py:164] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:165] 4 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:133] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 823us/step - loss: 0.6236 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 147us/step - loss: 0.6237 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6221 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 0.6229 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 136us/step - loss: 0.6220 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6217 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.6249 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6215 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 0.6226 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6223 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 140us/step - loss: 0.6225 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.6219 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 140us/step - loss: 0.6218 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 145us/step - loss: 0.6216 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6210 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:83] Load trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |INFO|build_network.py:143] Training end with time 2.9457409381866455!\n",
      "[root    |INFO|build_network.py:79] Saved trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |DEBUG|deepbiome.py:173] Save weight at ./example_result/weight_3.h5\n",
      "[root    |DEBUG|deepbiome.py:176] Save history at ./example_result/hist_3.json\n",
      "[root    |INFO|build_network.py:169] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:174] Evaluation end with time 0.009141921997070312!\n",
      "[root    |INFO|build_network.py:175] Evaluation: [0.621023952960968, 0.6862499713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:169] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 15us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:174] Evaluation end with time 0.008924484252929688!\n",
      "[root    |INFO|build_network.py:175] Evaluation: [0.618122398853302, 0.6899999976158142, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:187] Compute time : 4.237967491149902\n",
      "[root    |INFO|deepbiome.py:188] 4 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:143] -------5 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:153] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:154] Build network for 5 simulation\n",
      "[root    |INFO|build_network.py:508] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:514] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:515] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:522]      Genus: 48\n",
      "[root    |INFO|build_network.py:522]     Family: 40\n",
      "[root    |INFO|build_network.py:522]      Order: 23\n",
      "[root    |INFO|build_network.py:522]      Class: 17\n",
      "[root    |INFO|build_network.py:522]     Phylum: 9\n",
      "[root    |INFO|build_network.py:526] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:527] Phylogenetic_tree_dict info: ['Genus', 'Family', 'Phylum', 'Number', 'Class', 'Order']\n",
      "[root    |INFO|build_network.py:528] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:551] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:559] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:561] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:643] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:83] Load trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |INFO|deepbiome.py:164] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:165] 5 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:133] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 862us/step - loss: 0.6268 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6159 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 143us/step - loss: 0.6272 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6163 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 136us/step - loss: 0.6270 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6152 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 135us/step - loss: 0.6259 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6157 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 134us/step - loss: 0.6255 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6147 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 149us/step - loss: 0.6251 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6150 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 145us/step - loss: 0.6265 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6134 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 135us/step - loss: 0.6223 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6149 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6227 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6124 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6204 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6103 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:83] Load trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |INFO|build_network.py:143] Training end with time 3.083226203918457!\n",
      "[root    |INFO|build_network.py:79] Saved trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |DEBUG|deepbiome.py:173] Save weight at ./example_result/weight_4.h5\n",
      "[root    |DEBUG|deepbiome.py:176] Save history at ./example_result/hist_4.json\n",
      "[root    |INFO|build_network.py:169] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 4us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:174] Evaluation end with time 0.010264873504638672!\n",
      "[root    |INFO|build_network.py:175] Evaluation: [0.6170426607131958, 0.6825000047683716, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:169] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 11us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:174] Evaluation end with time 0.008906126022338867!\n",
      "[root    |INFO|build_network.py:175] Evaluation: [0.598039448261261, 0.7049999833106995, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:187] Compute time : 4.431697845458984\n",
      "[root    |INFO|deepbiome.py:188] 5 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:191] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:193] Train Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure']\n",
      "[root    |INFO|deepbiome.py:196]       mean : [0.61299829 0.69449999 1.         0.         0.        ]\n",
      "[root    |INFO|deepbiome.py:197]        std : [0.01042347 0.01370677 0.         0.         0.        ]\n",
      "[root    |INFO|deepbiome.py:198] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:200] Test Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure']\n",
      "[root    |INFO|deepbiome.py:203]       mean : [0.6152812 0.692     1.        0.        0.       ]\n",
      "[root    |INFO|deepbiome.py:204]        std : [0.01960726 0.02158705 0.         0.         0.        ]\n",
      "[root    |INFO|deepbiome.py:205] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:214] Total Computing Ended\n",
      "[root    |INFO|deepbiome.py:215] -----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "test_evaluation, train_evaluation, network = deepbiome.deepbiome_train(log, warm_start_network_info, path_info, \n",
    "                                                                       number_of_fold=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's check the history plot again."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f7648047c50>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "with open('./%s/hist_0.json' % path_info['model_info']['model_dir'], 'r') as f:\n",
    "    history = json.load(f)\n",
    "    \n",
    "plt.plot(history['val_loss'], label='Validation')\n",
    "plt.plot(history['loss'], label='Training')\n",
    "plt.legend()\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. Load the pre-trained network for testing\n",
    "\n",
    "To test the trained model, we can use the `deepbiome_test` function. \n",
    "\n",
    "If you use the index file (`idx_path`), this function provides the evaluation using the test index (index set not included in the index file) for each fold. If not, this function provides the evaluation using the whole samples. \n",
    "\n",
    "If `number_of_fold` is set to `k`, the function will test the model only with first `k` folds.\n",
    "\n",
    "We can use the testing metrics different with the training. In the example below, we additionally used `AUC` metric."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "test_network_info = {\n",
    "    'architecture_info': {\n",
    "        'batch_normalization': 'False',\n",
    "        'drop_out': '0',\n",
    "        'weight_initial': 'glorot_uniform',\n",
    "        'weight_l1_penalty':'0.',\n",
    "        'weight_decay': 'phylogenetic_tree',\n",
    "    },\n",
    "    'model_info': {\n",
    "        'lr': '0.01',\n",
    "        'decay': '0.001',\n",
    "        'loss': 'binary_crossentropy',\n",
    "        'metrics': 'binary_accuracy, sensitivity, specificity, gmeasure, auc',\n",
    "        'taxa_selection_metrics': 'sensitivity, specificity, gmeasure, accuracy',\n",
    "        'network_class': 'DeepBiomeNetwork',\n",
    "        'optimizer': 'adam',\n",
    "        'reader_class': 'MicroBiomeClassificationReader',\n",
    "        'normalizer': 'normalize_minmax',\n",
    "    },\n",
    "    'test_info': {\n",
    "        'batch_size': 'None'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "test_path_info = {\n",
    "    'data_info': {\n",
    "        'data_path': resource_filename('deepbiome', 'tests/data'),\n",
    "        'idx_path': resource_filename('deepbiome', 'tests/data/onefile_idx.csv'),\n",
    "        'tree_info_path': resource_filename('deepbiome', 'tests/data/genus48_dic.csv'),\n",
    "        'x_path': 'onefile_x.csv',\n",
    "        'y_path': 'classification_y.csv'\n",
    "    },\n",
    "    'model_info': {\n",
    "        'evaluation': 'eval.npy',\n",
    "        'model_dir': './example_result/',\n",
    "        'weight': 'weight.h5'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:270] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:302] Test Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure' 'auc']\n",
      "[root    |INFO|deepbiome.py:304] -------1 fold test start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:314] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:315] Build network for 1 fold testing\n",
      "[root    |INFO|build_network.py:508] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:514] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:515] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:522]      Genus: 48\n",
      "[root    |INFO|build_network.py:522]     Family: 40\n",
      "[root    |INFO|build_network.py:522]      Order: 23\n",
      "[root    |INFO|build_network.py:522]      Class: 17\n",
      "[root    |INFO|build_network.py:522]     Phylum: 9\n",
      "[root    |INFO|build_network.py:526] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:527] Phylogenetic_tree_dict info: ['Genus', 'Family', 'Phylum', 'Number', 'Class', 'Order']\n",
      "[root    |INFO|build_network.py:528] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:551] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:559] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:561] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:643] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|deepbiome.py:324] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:325] 1 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:169] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 611us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:174] Evaluation end with time 0.31334471702575684!\n",
      "[root    |INFO|build_network.py:175] Evaluation: [0.6184194684028625, 0.6899999976158142, 1.0, 0.0, 0.0, 0.6466807126998901]\n",
      "[root    |INFO|deepbiome.py:328] \n",
      "[root    |INFO|deepbiome.py:330] Compute time : 1.47926664352417\n",
      "[root    |INFO|deepbiome.py:331] 1 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:304] -------2 fold test start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:314] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:315] Build network for 2 fold testing\n",
      "[root    |INFO|build_network.py:508] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:514] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:515] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:522]      Genus: 48\n",
      "[root    |INFO|build_network.py:522]     Family: 40\n",
      "[root    |INFO|build_network.py:522]      Order: 23\n",
      "[root    |INFO|build_network.py:522]      Class: 17\n",
      "[root    |INFO|build_network.py:522]     Phylum: 9\n",
      "[root    |INFO|build_network.py:526] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:527] Phylogenetic_tree_dict info: ['Genus', 'Family', 'Phylum', 'Number', 'Class', 'Order']\n",
      "[root    |INFO|build_network.py:528] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:551] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:559] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:561] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:643] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|deepbiome.py:324] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:325] 2 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:169] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 575us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:174] Evaluation end with time 0.31040287017822266!\n",
      "[root    |INFO|build_network.py:175] Evaluation: [0.5931310057640076, 0.7200000286102295, 1.0, 0.0, 0.0, 0.4692460298538208]\n",
      "[root    |INFO|deepbiome.py:328] \n",
      "[root    |INFO|deepbiome.py:330] Compute time : 1.4309766292572021\n",
      "[root    |INFO|deepbiome.py:331] 2 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:304] -------3 fold test start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:314] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:315] Build network for 3 fold testing\n",
      "[root    |INFO|build_network.py:508] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:514] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:515] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:522]      Genus: 48\n",
      "[root    |INFO|build_network.py:522]     Family: 40\n",
      "[root    |INFO|build_network.py:522]      Order: 23\n",
      "[root    |INFO|build_network.py:522]      Class: 17\n",
      "[root    |INFO|build_network.py:522]     Phylum: 9\n",
      "[root    |INFO|build_network.py:526] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:527] Phylogenetic_tree_dict info: ['Genus', 'Family', 'Phylum', 'Number', 'Class', 'Order']\n",
      "[root    |INFO|build_network.py:528] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:551] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:559] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:561] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:643] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|deepbiome.py:324] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:325] 3 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:169] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 552us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:174] Evaluation end with time 0.3064887523651123!\n",
      "[root    |INFO|build_network.py:175] Evaluation: [0.6486936807632446, 0.6549999713897705, 1.0, 0.0, 0.0, 0.46553823351860046]\n",
      "[root    |INFO|deepbiome.py:328] \n",
      "[root    |INFO|deepbiome.py:330] Compute time : 1.5363824367523193\n",
      "[root    |INFO|deepbiome.py:331] 3 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:304] -------4 fold test start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:314] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:315] Build network for 4 fold testing\n",
      "[root    |INFO|build_network.py:508] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:514] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:515] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:522]      Genus: 48\n",
      "[root    |INFO|build_network.py:522]     Family: 40\n",
      "[root    |INFO|build_network.py:522]      Order: 23\n",
      "[root    |INFO|build_network.py:522]      Class: 17\n",
      "[root    |INFO|build_network.py:522]     Phylum: 9\n",
      "[root    |INFO|build_network.py:526] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:527] Phylogenetic_tree_dict info: ['Genus', 'Family', 'Phylum', 'Number', 'Class', 'Order']\n",
      "[root    |INFO|build_network.py:528] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:551] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:559] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:561] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:643] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|deepbiome.py:324] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:325] 4 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:169] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 592us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:174] Evaluation end with time 0.3324117660522461!\n",
      "[root    |INFO|build_network.py:175] Evaluation: [0.618122398853302, 0.6899999976158142, 1.0, 0.0, 0.0, 0.6383824348449707]\n",
      "[root    |INFO|deepbiome.py:328] \n",
      "[root    |INFO|deepbiome.py:330] Compute time : 1.6294331550598145\n",
      "[root    |INFO|deepbiome.py:331] 4 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:304] -------5 fold test start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:314] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:315] Build network for 5 fold testing\n",
      "[root    |INFO|build_network.py:508] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:514] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:515] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:522]      Genus: 48\n",
      "[root    |INFO|build_network.py:522]     Family: 40\n",
      "[root    |INFO|build_network.py:522]      Order: 23\n",
      "[root    |INFO|build_network.py:522]      Class: 17\n",
      "[root    |INFO|build_network.py:522]     Phylum: 9\n",
      "[root    |INFO|build_network.py:526] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:527] Phylogenetic_tree_dict info: ['Genus', 'Family', 'Phylum', 'Number', 'Class', 'Order']\n",
      "[root    |INFO|build_network.py:528] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:551] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:559] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:561] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:643] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|deepbiome.py:324] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:325] 5 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:169] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 566us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:174] Evaluation end with time 0.3071293830871582!\n",
      "[root    |INFO|build_network.py:175] Evaluation: [0.598039448261261, 0.7049999833106995, 1.0, 0.0, 0.0, 0.8972232341766357]\n",
      "[root    |INFO|deepbiome.py:328] \n",
      "[root    |INFO|deepbiome.py:330] Compute time : 1.4513914585113525\n",
      "[root    |INFO|deepbiome.py:331] 5 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:334] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:336] Test Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure' 'auc']\n",
      "[root    |INFO|deepbiome.py:339]       mean : [0.6152812  0.692      1.         0.         0.         0.62341413]\n",
      "[root    |INFO|deepbiome.py:340]        std : [0.01960726 0.02158705 0.         0.         0.         0.1577526 ]\n",
      "[root    |INFO|deepbiome.py:341] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:344] Total Computing Ended\n",
      "[root    |INFO|deepbiome.py:345] -----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "evaluation = deepbiome.deepbiome_test(log, test_network_info, test_path_info, number_of_fold=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This function provides the evaluation result as a numpy array with a shape of (number of folds, number of evaluation measures)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                  loss binary_accuracy     sensitivity     specificity        gmeasure             auc\n",
      "Mean:           0.6153          0.6920          1.0000          0.0000          0.0000          0.6234\n",
      "Std :           0.0196          0.0216          0.0000          0.0000          0.0000          0.1578\n"
     ]
    }
   ],
   "source": [
    "print('      %s' % ''.join(['%16s'%'loss']+ ['%16s'%s.strip() for s in test_network_info['model_info']['metrics'].split(',')]))\n",
    "print('Mean: %s' % ''.join(['%16.4f'%v for v in np.mean(evaluation, axis=0)]))\n",
    "print('Std : %s' % ''.join(['%16.4f'%v for v in np.std(evaluation, axis=0)]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7. Load the pre-trained network for prediction\n",
    "\n",
    "If you want to predict using the pre-trained model, you can use the `deepbiome_prediction` function. If `number_of_fold` is setted as `k`, the function will predict only with first `k` folds sample's outputs. \n",
    "\n",
    "If `change_weight_for_each_fold` is set as `False`, the function will predict the output of every folds by same weight from the given path. If `change_weight_for_each_fold` is set as `True`, the function will predict the output of by each fold weight.\n",
    "\n",
    "If 'get_y=True', the function will provide a list of tuples (prediction, true output) as a output with the shape of `(n_samples, 2, n_classes)`. If 'get_y=False', the function will provide predictions only. The output will have the shape of `(n_samples, n_classes)`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 7.1 Prediction with fixed weight\n",
    "\n",
    "If we want to predict new data from one pre-trained model, we can use the option below. We fixed the weight `weight_0.h5` for predicting the whole samples from `onefile_x.csv` (without using index file)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "prediction_network_info = {\n",
    "    'architecture_info': {\n",
    "        'batch_normalization': 'False',\n",
    "        'drop_out': '0',\n",
    "        'weight_initial': 'glorot_uniform',\n",
    "        'weight_l1_penalty':'0.',\n",
    "        'weight_decay': 'phylogenetic_tree',\n",
    "    },\n",
    "    'model_info': {\n",
    "        'decay': '0.001',\n",
    "        'loss': 'binary_crossentropy',\n",
    "        'lr': '0.01',\n",
    "        'metrics': 'binary_accuracy, sensitivity, specificity, gmeasure, auc',\n",
    "        'network_class': 'DeepBiomeNetwork',\n",
    "        'normalizer': 'normalize_minmax',\n",
    "        'optimizer': 'adam',\n",
    "        'reader_class': 'MicroBiomeClassificationReader',\n",
    "        'taxa_selection_metrics': 'sensitivity, specificity, gmeasure, accuracy',\n",
    "    },\n",
    "    'test_info': {\n",
    "        'batch_size': 'None'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "prediction_path_info = {\n",
    "    'data_info': {\n",
    "        'data_path': resource_filename('deepbiome', 'tests/data'),\n",
    "        'tree_info_path': resource_filename('deepbiome', 'tests/data/genus48_dic.csv'),\n",
    "        'x_path': 'onefile_x.csv',\n",
    "        'y_path': 'classification_y.csv'\n",
    "    },\n",
    "    'model_info': {\n",
    "        'model_dir': './example_result/',\n",
    "        'weight': 'weight_0.h5'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:414] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:444] -------1 th repeatition prediction start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:462] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:508] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:514] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:515] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:522]      Genus: 48\n",
      "[root    |INFO|build_network.py:522]     Family: 40\n",
      "[root    |INFO|build_network.py:522]      Order: 23\n",
      "[root    |INFO|build_network.py:522]      Class: 17\n",
      "[root    |INFO|build_network.py:522]     Phylum: 9\n",
      "[root    |INFO|build_network.py:526] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:527] Phylogenetic_tree_dict info: ['Genus', 'Family', 'Phylum', 'Number', 'Class', 'Order']\n",
      "[root    |INFO|build_network.py:528] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:551] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:559] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:561] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:643] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|deepbiome.py:472] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:189] Prediction start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "1000/1000 [==============================] - 0s 47us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:194] Prediction end with time 0.05032491683959961!\n",
      "[root    |INFO|deepbiome.py:476] Compute time : 1.1920359134674072\n",
      "[root    |INFO|deepbiome.py:477] 1 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:482] Total Computing Ended\n",
      "[root    |INFO|deepbiome.py:483] -----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "prediction = deepbiome.deepbiome_prediction(log, prediction_network_info, prediction_path_info,\n",
    "                                            num_classes = 1, number_of_fold=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 1000, 1)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prediction.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.6826391 ],\n",
       "       [0.6817073 ],\n",
       "       [0.6834248 ],\n",
       "       [0.68320024],\n",
       "       [0.6830491 ],\n",
       "       [0.6833162 ],\n",
       "       [0.6832347 ],\n",
       "       [0.6802738 ],\n",
       "       [0.68469334],\n",
       "       [0.68286955]], dtype=float32)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prediction[0,:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 7.2 Prediction with each fold weight\n",
    "\n",
    "If we want to predict the cross-validation outputs, we can use the option belows.\n",
    "\n",
    "The example below shows how to predict the 5-fold cross-validation outputs. (If we use the leave-one-out-cross-validation (LOOCV) for training, we can predict the LOOCV outputs by same way.)\n",
    "We set `idx_path` for using the index file `onefile_idx.csv` to predict only the test set for each fold."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "prediction_network_info = {\n",
    "    'architecture_info': {\n",
    "        'batch_normalization': 'False',\n",
    "        'drop_out': '0',\n",
    "        'weight_initial': 'glorot_uniform',\n",
    "        'weight_l1_penalty':'0.',\n",
    "        'weight_decay': 'phylogenetic_tree',\n",
    "    },\n",
    "    'model_info': {\n",
    "        'decay': '0.001',\n",
    "        'loss': 'binary_crossentropy',\n",
    "        'lr': '0.01',\n",
    "        'metrics': 'binary_accuracy, sensitivity, specificity, gmeasure, auc',\n",
    "        'network_class': 'DeepBiomeNetwork',\n",
    "        'normalizer': 'normalize_minmax',\n",
    "        'optimizer': 'adam',\n",
    "        'reader_class': 'MicroBiomeClassificationReader',\n",
    "        'taxa_selection_metrics': 'sensitivity, specificity, gmeasure, accuracy',\n",
    "    },\n",
    "    'test_info': {\n",
    "        'batch_size': 'None'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "prediction_path_info = {\n",
    "    'data_info': {\n",
    "        'data_path': resource_filename('deepbiome', 'tests/data'),\n",
    "        'idx_path': resource_filename('deepbiome', 'tests/data/onefile_idx.csv'),\n",
    "        'tree_info_path': resource_filename('deepbiome', 'tests/data/genus48_dic.csv'),\n",
    "        'x_path': 'onefile_x.csv',\n",
    "        'y_path': 'classification_y.csv'\n",
    "    },\n",
    "    'model_info': {\n",
    "        'model_dir': './example_result/',\n",
    "        'weight': 'weight.h5'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To predict the CV outputs from each fold, we set `change_weight_for_each_fold = True`. Also, we set `get_y=True` to get the paired output of each prediction too."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:414] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:444] -------1 th repeatition prediction start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:462] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:508] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:514] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:515] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:522]      Genus: 48\n",
      "[root    |INFO|build_network.py:522]     Family: 40\n",
      "[root    |INFO|build_network.py:522]      Order: 23\n",
      "[root    |INFO|build_network.py:522]      Class: 17\n",
      "[root    |INFO|build_network.py:522]     Phylum: 9\n",
      "[root    |INFO|build_network.py:526] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:527] Phylogenetic_tree_dict info: ['Genus', 'Family', 'Phylum', 'Number', 'Class', 'Order']\n",
      "[root    |INFO|build_network.py:528] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:551] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:559] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:561] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:643] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|deepbiome.py:472] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:189] Prediction start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 242us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:194] Prediction end with time 0.05169367790222168!\n",
      "[root    |INFO|deepbiome.py:476] Compute time : 1.1278069019317627\n",
      "[root    |INFO|deepbiome.py:477] 1 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:444] -------2 th repeatition prediction start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:462] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:508] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:514] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:515] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:522]      Genus: 48\n",
      "[root    |INFO|build_network.py:522]     Family: 40\n",
      "[root    |INFO|build_network.py:522]      Order: 23\n",
      "[root    |INFO|build_network.py:522]      Class: 17\n",
      "[root    |INFO|build_network.py:522]     Phylum: 9\n",
      "[root    |INFO|build_network.py:526] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:527] Phylogenetic_tree_dict info: ['Genus', 'Family', 'Phylum', 'Number', 'Class', 'Order']\n",
      "[root    |INFO|build_network.py:528] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:551] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:559] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:561] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:643] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_2\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|deepbiome.py:472] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:189] Prediction start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 304us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:194] Prediction end with time 0.06390881538391113!\n",
      "[root    |INFO|deepbiome.py:476] Compute time : 1.2459158897399902\n",
      "[root    |INFO|deepbiome.py:477] 2 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:444] -------3 th repeatition prediction start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:462] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:508] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:514] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:515] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:522]      Genus: 48\n",
      "[root    |INFO|build_network.py:522]     Family: 40\n",
      "[root    |INFO|build_network.py:522]      Order: 23\n",
      "[root    |INFO|build_network.py:522]      Class: 17\n",
      "[root    |INFO|build_network.py:522]     Phylum: 9\n",
      "[root    |INFO|build_network.py:526] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:527] Phylogenetic_tree_dict info: ['Genus', 'Family', 'Phylum', 'Number', 'Class', 'Order']\n",
      "[root    |INFO|build_network.py:528] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:551] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:559] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:561] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:643] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_3\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|deepbiome.py:472] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:189] Prediction start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 445us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:194] Prediction end with time 0.0929708480834961!\n",
      "[root    |INFO|deepbiome.py:476] Compute time : 1.3128130435943604\n",
      "[root    |INFO|deepbiome.py:477] 3 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:444] -------4 th repeatition prediction start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:462] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:508] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:514] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:515] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:522]      Genus: 48\n",
      "[root    |INFO|build_network.py:522]     Family: 40\n",
      "[root    |INFO|build_network.py:522]      Order: 23\n",
      "[root    |INFO|build_network.py:522]      Class: 17\n",
      "[root    |INFO|build_network.py:522]     Phylum: 9\n",
      "[root    |INFO|build_network.py:526] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:527] Phylogenetic_tree_dict info: ['Genus', 'Family', 'Phylum', 'Number', 'Class', 'Order']\n",
      "[root    |INFO|build_network.py:528] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:551] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:559] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:561] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:643] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_4\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|deepbiome.py:472] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:189] Prediction start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 557us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:194] Prediction end with time 0.11579632759094238!\n",
      "[root    |INFO|deepbiome.py:476] Compute time : 1.4189376831054688\n",
      "[root    |INFO|deepbiome.py:477] 4 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:444] -------5 th repeatition prediction start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:462] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:508] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:514] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:515] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:522]      Genus: 48\n",
      "[root    |INFO|build_network.py:522]     Family: 40\n",
      "[root    |INFO|build_network.py:522]      Order: 23\n",
      "[root    |INFO|build_network.py:522]      Class: 17\n",
      "[root    |INFO|build_network.py:522]     Phylum: 9\n",
      "[root    |INFO|build_network.py:526] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:527] Phylogenetic_tree_dict info: ['Genus', 'Family', 'Phylum', 'Number', 'Class', 'Order']\n",
      "[root    |INFO|build_network.py:528] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:551] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:559] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:561] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:643] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_5\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|deepbiome.py:472] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:189] Prediction start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 626us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:194] Prediction end with time 0.12838101387023926!\n",
      "[root    |INFO|deepbiome.py:476] Compute time : 1.5303637981414795\n",
      "[root    |INFO|deepbiome.py:477] 5 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:482] Total Computing Ended\n",
      "[root    |INFO|deepbiome.py:483] -----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "prediction = deepbiome.deepbiome_prediction(log, prediction_network_info, prediction_path_info,\n",
    "                                            num_classes = 1, number_of_fold=None, \n",
    "                                            change_weight_for_each_fold = True, \n",
    "                                            get_y=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We gathered the outputs from each fold. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "prediction = np.vstack(prediction)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since we set the option `get_y=True`, the output has the shape of `(n_samples, 2, n_classes)`. With this options, we can get the CV predictions and the true output of each predictions.\n",
    "\n",
    "Now, we can calculate the CV performance by the CV predictions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|<ipython-input-39-dc5b95be41ff>:4] Shape of the predict function ourput: (1000, 2, 1)\n",
      "[root    |INFO|<ipython-input-39-dc5b95be41ff>:5] Shape of the prediction: (1000, 1)\n",
      "[root    |INFO|<ipython-input-39-dc5b95be41ff>:6] Shape of the true_output for each prediction: (1000, 1)\n"
     ]
    }
   ],
   "source": [
    "predict_output = prediction[:,0]\n",
    "true_output = prediction[:,1]\n",
    "\n",
    "log.info('Shape of the predict function ourput: %s' % str(prediction.shape))\n",
    "log.info('Shape of the prediction: %s' % str(predict_output.shape))\n",
    "log.info('Shape of the true_output for each prediction: %s' % str(true_output.shape))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|<ipython-input-40-ecaee2413087>:1] CV accuracy:  0.692\n"
     ]
    }
   ],
   "source": [
    "log.info('CV accuracy: %6.3f' % np.mean((predict_output >= 0.5) ==  true_output))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 8. Load trained weight matrix\n",
    "\n",
    "The `deepbiome_get_trained_weight` function convert the trained weight `*.h5` saved from the `deepbiome_train` to a list of pandas dataframe.\n",
    "In this exampe, the list has numpy array of weights from 6 layers. (`[genus to family, family to order, order to Class, class to phylum, phylum to output]`)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|<ipython-input-41-d6c43d8a172c>:3] 5\n"
     ]
    }
   ],
   "source": [
    "weight_path = '%s/%s' % (prediction_path_info['model_info']['model_dir'], 'weight_0.h5')\n",
    "trained_weight_list = deepbiome.deepbiome_get_trained_weight(log, network_info, path_info, num_classes=1, weight_path=weight_path)\n",
    "log.info(len(trained_weight_list))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First weight between the `genus` and `family` layers has the shape of `(number of genus = 48, number of family = 40)`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|<ipython-input-42-c71fa46ab178>:1] (48, 40)\n"
     ]
    }
   ],
   "source": [
    "log.info(trained_weight_list[0].shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Streptococcaceae</th>\n",
       "      <th>Cellulomonadaceae</th>\n",
       "      <th>Veillonellaceae</th>\n",
       "      <th>Actinomycetaceae</th>\n",
       "      <th>Flavobacteriaceae</th>\n",
       "      <th>Prevotellaceae</th>\n",
       "      <th>Porphyromonadaceae</th>\n",
       "      <th>Clostridiales_Incertae_Sedis_XI</th>\n",
       "      <th>Fusobacteriaceae</th>\n",
       "      <th>Propionibacteriaceae</th>\n",
       "      <th>...</th>\n",
       "      <th>Methylobacteriaceae</th>\n",
       "      <th>OD1_genera_incertae_sedis</th>\n",
       "      <th>Microbacteriaceae</th>\n",
       "      <th>Sphingomonadaceae</th>\n",
       "      <th>Bacteroidaceae</th>\n",
       "      <th>Bdellovibrionaceae</th>\n",
       "      <th>Chloroplast</th>\n",
       "      <th>Rhodobacteraceae</th>\n",
       "      <th>Ruminococcaceae</th>\n",
       "      <th>Pseudonocardiaceae</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Streptococcus</th>\n",
       "      <td>-0.014793</td>\n",
       "      <td>0.001963</td>\n",
       "      <td>0.004347</td>\n",
       "      <td>0.001159</td>\n",
       "      <td>-0.000791</td>\n",
       "      <td>-0.002248</td>\n",
       "      <td>0.000906</td>\n",
       "      <td>0.001430</td>\n",
       "      <td>0.001406</td>\n",
       "      <td>0.005341</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001627</td>\n",
       "      <td>-0.002168</td>\n",
       "      <td>0.003276</td>\n",
       "      <td>0.001065</td>\n",
       "      <td>8.258116e-04</td>\n",
       "      <td>-0.001063</td>\n",
       "      <td>0.002237</td>\n",
       "      <td>0.001537</td>\n",
       "      <td>-0.002051</td>\n",
       "      <td>-0.001486</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tropheryma</th>\n",
       "      <td>0.001968</td>\n",
       "      <td>2.643693</td>\n",
       "      <td>0.002938</td>\n",
       "      <td>-0.001316</td>\n",
       "      <td>0.001414</td>\n",
       "      <td>-0.001211</td>\n",
       "      <td>0.000915</td>\n",
       "      <td>-0.000834</td>\n",
       "      <td>0.000942</td>\n",
       "      <td>0.009464</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000215</td>\n",
       "      <td>0.000753</td>\n",
       "      <td>0.007650</td>\n",
       "      <td>0.000689</td>\n",
       "      <td>-5.062897e-04</td>\n",
       "      <td>-0.002308</td>\n",
       "      <td>-0.000089</td>\n",
       "      <td>-0.001389</td>\n",
       "      <td>-0.002437</td>\n",
       "      <td>-0.002324</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Veillonella</th>\n",
       "      <td>0.002327</td>\n",
       "      <td>0.000996</td>\n",
       "      <td>0.810107</td>\n",
       "      <td>0.002155</td>\n",
       "      <td>0.001318</td>\n",
       "      <td>-0.001905</td>\n",
       "      <td>0.002336</td>\n",
       "      <td>0.000344</td>\n",
       "      <td>-0.001571</td>\n",
       "      <td>0.004497</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.002243</td>\n",
       "      <td>-0.001715</td>\n",
       "      <td>0.002423</td>\n",
       "      <td>0.000382</td>\n",
       "      <td>-4.005031e-04</td>\n",
       "      <td>0.001489</td>\n",
       "      <td>-0.000408</td>\n",
       "      <td>0.001809</td>\n",
       "      <td>0.001761</td>\n",
       "      <td>0.001315</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Actinomyces</th>\n",
       "      <td>-0.001718</td>\n",
       "      <td>0.007389</td>\n",
       "      <td>0.003110</td>\n",
       "      <td>-0.180331</td>\n",
       "      <td>0.001431</td>\n",
       "      <td>0.001595</td>\n",
       "      <td>0.002037</td>\n",
       "      <td>0.000756</td>\n",
       "      <td>0.001290</td>\n",
       "      <td>0.003654</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001803</td>\n",
       "      <td>0.000208</td>\n",
       "      <td>0.005222</td>\n",
       "      <td>-0.000659</td>\n",
       "      <td>-4.506988e-04</td>\n",
       "      <td>0.002200</td>\n",
       "      <td>-0.000853</td>\n",
       "      <td>-0.000043</td>\n",
       "      <td>0.000658</td>\n",
       "      <td>-0.000433</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Flavobacterium</th>\n",
       "      <td>0.000457</td>\n",
       "      <td>-0.003228</td>\n",
       "      <td>-0.001253</td>\n",
       "      <td>-0.002179</td>\n",
       "      <td>0.086882</td>\n",
       "      <td>-0.000805</td>\n",
       "      <td>0.001855</td>\n",
       "      <td>-0.000015</td>\n",
       "      <td>-0.002281</td>\n",
       "      <td>-0.000385</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001277</td>\n",
       "      <td>-0.002132</td>\n",
       "      <td>-0.001425</td>\n",
       "      <td>-0.001280</td>\n",
       "      <td>1.712017e-03</td>\n",
       "      <td>0.002046</td>\n",
       "      <td>0.001117</td>\n",
       "      <td>0.001177</td>\n",
       "      <td>0.001554</td>\n",
       "      <td>0.001618</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Prevotella</th>\n",
       "      <td>-0.001422</td>\n",
       "      <td>0.001370</td>\n",
       "      <td>0.001748</td>\n",
       "      <td>-0.002602</td>\n",
       "      <td>0.002539</td>\n",
       "      <td>-0.065576</td>\n",
       "      <td>0.001014</td>\n",
       "      <td>0.002510</td>\n",
       "      <td>0.001106</td>\n",
       "      <td>0.004950</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002446</td>\n",
       "      <td>0.001850</td>\n",
       "      <td>0.002515</td>\n",
       "      <td>-0.000855</td>\n",
       "      <td>-6.095981e-04</td>\n",
       "      <td>-0.002064</td>\n",
       "      <td>-0.002452</td>\n",
       "      <td>0.000455</td>\n",
       "      <td>-0.002353</td>\n",
       "      <td>0.000388</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Porphyromonas</th>\n",
       "      <td>0.000285</td>\n",
       "      <td>-0.006207</td>\n",
       "      <td>-0.004304</td>\n",
       "      <td>-0.000607</td>\n",
       "      <td>-0.003547</td>\n",
       "      <td>-0.000603</td>\n",
       "      <td>0.107162</td>\n",
       "      <td>0.001925</td>\n",
       "      <td>0.002579</td>\n",
       "      <td>-0.003740</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000119</td>\n",
       "      <td>-0.002586</td>\n",
       "      <td>-0.002964</td>\n",
       "      <td>0.000596</td>\n",
       "      <td>-2.241743e-03</td>\n",
       "      <td>0.002004</td>\n",
       "      <td>0.000736</td>\n",
       "      <td>0.001423</td>\n",
       "      <td>-0.000501</td>\n",
       "      <td>0.000905</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Parvimonas</th>\n",
       "      <td>0.000845</td>\n",
       "      <td>0.001325</td>\n",
       "      <td>-0.000987</td>\n",
       "      <td>-0.000068</td>\n",
       "      <td>-0.001069</td>\n",
       "      <td>-0.001630</td>\n",
       "      <td>-0.001872</td>\n",
       "      <td>0.108699</td>\n",
       "      <td>0.000746</td>\n",
       "      <td>0.001768</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000201</td>\n",
       "      <td>0.001997</td>\n",
       "      <td>0.000978</td>\n",
       "      <td>0.001852</td>\n",
       "      <td>-4.318894e-04</td>\n",
       "      <td>0.000578</td>\n",
       "      <td>-0.001637</td>\n",
       "      <td>0.000951</td>\n",
       "      <td>-0.001134</td>\n",
       "      <td>0.002050</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fusobacterium</th>\n",
       "      <td>-0.001614</td>\n",
       "      <td>0.000511</td>\n",
       "      <td>-0.001467</td>\n",
       "      <td>0.000294</td>\n",
       "      <td>-0.001060</td>\n",
       "      <td>-0.001367</td>\n",
       "      <td>-0.002356</td>\n",
       "      <td>-0.001482</td>\n",
       "      <td>-0.046245</td>\n",
       "      <td>0.003387</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002216</td>\n",
       "      <td>0.000907</td>\n",
       "      <td>-0.000957</td>\n",
       "      <td>-0.000942</td>\n",
       "      <td>4.763678e-04</td>\n",
       "      <td>-0.002455</td>\n",
       "      <td>-0.000501</td>\n",
       "      <td>-0.000108</td>\n",
       "      <td>0.002000</td>\n",
       "      <td>-0.000579</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Propionibacterium</th>\n",
       "      <td>0.000930</td>\n",
       "      <td>-0.013073</td>\n",
       "      <td>-0.004651</td>\n",
       "      <td>0.001216</td>\n",
       "      <td>-0.004595</td>\n",
       "      <td>-0.000471</td>\n",
       "      <td>0.001658</td>\n",
       "      <td>0.001750</td>\n",
       "      <td>0.001167</td>\n",
       "      <td>-2.201533</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000765</td>\n",
       "      <td>-0.001584</td>\n",
       "      <td>-0.008847</td>\n",
       "      <td>0.000841</td>\n",
       "      <td>1.930105e-03</td>\n",
       "      <td>0.001994</td>\n",
       "      <td>0.001334</td>\n",
       "      <td>-0.002277</td>\n",
       "      <td>-0.000127</td>\n",
       "      <td>-0.002420</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gemella</th>\n",
       "      <td>-0.001498</td>\n",
       "      <td>0.001463</td>\n",
       "      <td>0.001017</td>\n",
       "      <td>-0.001636</td>\n",
       "      <td>-0.001378</td>\n",
       "      <td>0.000401</td>\n",
       "      <td>0.000076</td>\n",
       "      <td>0.001693</td>\n",
       "      <td>-0.001238</td>\n",
       "      <td>-0.001961</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001241</td>\n",
       "      <td>0.000407</td>\n",
       "      <td>-0.000970</td>\n",
       "      <td>-0.000308</td>\n",
       "      <td>1.864710e-07</td>\n",
       "      <td>-0.000281</td>\n",
       "      <td>-0.001355</td>\n",
       "      <td>-0.001817</td>\n",
       "      <td>0.000703</td>\n",
       "      <td>0.000701</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rothia</th>\n",
       "      <td>-0.000115</td>\n",
       "      <td>-0.016207</td>\n",
       "      <td>-0.009075</td>\n",
       "      <td>0.002453</td>\n",
       "      <td>-0.006259</td>\n",
       "      <td>0.001580</td>\n",
       "      <td>0.000415</td>\n",
       "      <td>-0.001189</td>\n",
       "      <td>0.000002</td>\n",
       "      <td>-0.015961</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000570</td>\n",
       "      <td>0.000673</td>\n",
       "      <td>-0.013014</td>\n",
       "      <td>-0.001078</td>\n",
       "      <td>7.016866e-04</td>\n",
       "      <td>0.002240</td>\n",
       "      <td>-0.001756</td>\n",
       "      <td>0.002292</td>\n",
       "      <td>0.002300</td>\n",
       "      <td>-0.002169</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Granulicatella</th>\n",
       "      <td>0.000624</td>\n",
       "      <td>0.001726</td>\n",
       "      <td>0.003570</td>\n",
       "      <td>-0.000384</td>\n",
       "      <td>-0.001819</td>\n",
       "      <td>0.001330</td>\n",
       "      <td>0.001206</td>\n",
       "      <td>0.000105</td>\n",
       "      <td>0.000237</td>\n",
       "      <td>0.001844</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.002049</td>\n",
       "      <td>0.000314</td>\n",
       "      <td>0.002234</td>\n",
       "      <td>0.002073</td>\n",
       "      <td>-1.533006e-03</td>\n",
       "      <td>-0.002611</td>\n",
       "      <td>-0.000789</td>\n",
       "      <td>-0.002119</td>\n",
       "      <td>0.000354</td>\n",
       "      <td>-0.000799</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Neisseria</th>\n",
       "      <td>-0.000255</td>\n",
       "      <td>-0.002021</td>\n",
       "      <td>-0.002048</td>\n",
       "      <td>-0.002532</td>\n",
       "      <td>0.001075</td>\n",
       "      <td>0.002411</td>\n",
       "      <td>0.000078</td>\n",
       "      <td>0.000719</td>\n",
       "      <td>-0.000602</td>\n",
       "      <td>-0.000383</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001485</td>\n",
       "      <td>0.000684</td>\n",
       "      <td>-0.004025</td>\n",
       "      <td>-0.002050</td>\n",
       "      <td>-1.690782e-03</td>\n",
       "      <td>-0.001648</td>\n",
       "      <td>0.000329</td>\n",
       "      <td>0.001427</td>\n",
       "      <td>0.000080</td>\n",
       "      <td>0.001910</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Lactobacillus</th>\n",
       "      <td>0.001288</td>\n",
       "      <td>0.000041</td>\n",
       "      <td>-0.001769</td>\n",
       "      <td>-0.000117</td>\n",
       "      <td>-0.000680</td>\n",
       "      <td>0.001913</td>\n",
       "      <td>0.000175</td>\n",
       "      <td>0.002084</td>\n",
       "      <td>0.000972</td>\n",
       "      <td>0.000657</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001286</td>\n",
       "      <td>0.001386</td>\n",
       "      <td>-0.000451</td>\n",
       "      <td>0.001351</td>\n",
       "      <td>9.154539e-04</td>\n",
       "      <td>0.002429</td>\n",
       "      <td>-0.000406</td>\n",
       "      <td>-0.001493</td>\n",
       "      <td>0.002128</td>\n",
       "      <td>0.002136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Megasphaera</th>\n",
       "      <td>0.001857</td>\n",
       "      <td>-0.004590</td>\n",
       "      <td>-0.450920</td>\n",
       "      <td>-0.000565</td>\n",
       "      <td>-0.001280</td>\n",
       "      <td>-0.002229</td>\n",
       "      <td>-0.001190</td>\n",
       "      <td>0.001829</td>\n",
       "      <td>0.002256</td>\n",
       "      <td>-0.004708</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000598</td>\n",
       "      <td>0.002535</td>\n",
       "      <td>-0.003356</td>\n",
       "      <td>0.001590</td>\n",
       "      <td>-2.757030e-04</td>\n",
       "      <td>-0.002461</td>\n",
       "      <td>0.000129</td>\n",
       "      <td>-0.001857</td>\n",
       "      <td>0.000693</td>\n",
       "      <td>-0.000510</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Catonella</th>\n",
       "      <td>-0.000552</td>\n",
       "      <td>0.004705</td>\n",
       "      <td>0.001851</td>\n",
       "      <td>-0.000622</td>\n",
       "      <td>0.001096</td>\n",
       "      <td>0.001496</td>\n",
       "      <td>0.002197</td>\n",
       "      <td>-0.000119</td>\n",
       "      <td>0.000624</td>\n",
       "      <td>0.005800</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.002390</td>\n",
       "      <td>-0.000225</td>\n",
       "      <td>0.000729</td>\n",
       "      <td>0.001592</td>\n",
       "      <td>-1.538441e-03</td>\n",
       "      <td>0.002322</td>\n",
       "      <td>-0.001311</td>\n",
       "      <td>0.001033</td>\n",
       "      <td>-0.002097</td>\n",
       "      <td>0.002511</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Atopobium</th>\n",
       "      <td>0.001015</td>\n",
       "      <td>-0.003637</td>\n",
       "      <td>-0.001954</td>\n",
       "      <td>-0.001635</td>\n",
       "      <td>0.000163</td>\n",
       "      <td>0.001047</td>\n",
       "      <td>0.000006</td>\n",
       "      <td>0.002091</td>\n",
       "      <td>0.000684</td>\n",
       "      <td>-0.004942</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002473</td>\n",
       "      <td>0.002593</td>\n",
       "      <td>-0.002530</td>\n",
       "      <td>-0.002565</td>\n",
       "      <td>2.935952e-04</td>\n",
       "      <td>0.001023</td>\n",
       "      <td>-0.001279</td>\n",
       "      <td>-0.001647</td>\n",
       "      <td>0.001326</td>\n",
       "      <td>0.002378</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Campylobacter</th>\n",
       "      <td>0.000271</td>\n",
       "      <td>-0.000293</td>\n",
       "      <td>-0.000450</td>\n",
       "      <td>-0.002135</td>\n",
       "      <td>-0.001871</td>\n",
       "      <td>-0.001314</td>\n",
       "      <td>-0.002341</td>\n",
       "      <td>0.001738</td>\n",
       "      <td>0.002508</td>\n",
       "      <td>-0.002144</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002353</td>\n",
       "      <td>-0.001047</td>\n",
       "      <td>-0.001110</td>\n",
       "      <td>-0.000089</td>\n",
       "      <td>-6.340943e-04</td>\n",
       "      <td>-0.000651</td>\n",
       "      <td>-0.001737</td>\n",
       "      <td>0.001490</td>\n",
       "      <td>-0.000382</td>\n",
       "      <td>0.000218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Capnocytophaga</th>\n",
       "      <td>0.001394</td>\n",
       "      <td>-0.001214</td>\n",
       "      <td>-0.001459</td>\n",
       "      <td>0.001374</td>\n",
       "      <td>0.677167</td>\n",
       "      <td>0.000891</td>\n",
       "      <td>0.002356</td>\n",
       "      <td>0.001402</td>\n",
       "      <td>0.002588</td>\n",
       "      <td>0.003668</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002439</td>\n",
       "      <td>0.001809</td>\n",
       "      <td>0.000726</td>\n",
       "      <td>-0.002255</td>\n",
       "      <td>1.402029e-04</td>\n",
       "      <td>-0.000935</td>\n",
       "      <td>-0.000882</td>\n",
       "      <td>0.002582</td>\n",
       "      <td>-0.000707</td>\n",
       "      <td>0.002351</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Solobacterium</th>\n",
       "      <td>0.000408</td>\n",
       "      <td>-0.001596</td>\n",
       "      <td>0.002217</td>\n",
       "      <td>-0.000253</td>\n",
       "      <td>-0.001933</td>\n",
       "      <td>-0.002397</td>\n",
       "      <td>-0.002084</td>\n",
       "      <td>-0.001448</td>\n",
       "      <td>0.000034</td>\n",
       "      <td>0.001254</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000054</td>\n",
       "      <td>0.001058</td>\n",
       "      <td>0.002495</td>\n",
       "      <td>-0.002568</td>\n",
       "      <td>2.288027e-03</td>\n",
       "      <td>0.001604</td>\n",
       "      <td>-0.000584</td>\n",
       "      <td>-0.001131</td>\n",
       "      <td>0.001727</td>\n",
       "      <td>-0.002114</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Moryella</th>\n",
       "      <td>-0.001687</td>\n",
       "      <td>0.009675</td>\n",
       "      <td>0.003876</td>\n",
       "      <td>0.001688</td>\n",
       "      <td>0.002519</td>\n",
       "      <td>-0.002244</td>\n",
       "      <td>0.001180</td>\n",
       "      <td>-0.000861</td>\n",
       "      <td>0.000712</td>\n",
       "      <td>0.007021</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000058</td>\n",
       "      <td>0.001273</td>\n",
       "      <td>0.006766</td>\n",
       "      <td>-0.000580</td>\n",
       "      <td>-1.388777e-03</td>\n",
       "      <td>-0.001805</td>\n",
       "      <td>0.002000</td>\n",
       "      <td>-0.002293</td>\n",
       "      <td>0.000656</td>\n",
       "      <td>-0.001884</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TM7_genera_incertae_sedis</th>\n",
       "      <td>-0.000592</td>\n",
       "      <td>-0.006033</td>\n",
       "      <td>-0.000963</td>\n",
       "      <td>0.001680</td>\n",
       "      <td>-0.002047</td>\n",
       "      <td>-0.000580</td>\n",
       "      <td>-0.001642</td>\n",
       "      <td>-0.001679</td>\n",
       "      <td>-0.001301</td>\n",
       "      <td>-0.004437</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002536</td>\n",
       "      <td>0.000015</td>\n",
       "      <td>-0.004040</td>\n",
       "      <td>0.002382</td>\n",
       "      <td>-1.794019e-03</td>\n",
       "      <td>-0.001688</td>\n",
       "      <td>0.001683</td>\n",
       "      <td>-0.002570</td>\n",
       "      <td>0.002232</td>\n",
       "      <td>0.000305</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Staphylococcus</th>\n",
       "      <td>0.000967</td>\n",
       "      <td>-0.001700</td>\n",
       "      <td>0.001304</td>\n",
       "      <td>-0.002055</td>\n",
       "      <td>-0.001103</td>\n",
       "      <td>-0.002200</td>\n",
       "      <td>-0.002407</td>\n",
       "      <td>0.000643</td>\n",
       "      <td>-0.000295</td>\n",
       "      <td>-0.001501</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000195</td>\n",
       "      <td>-0.000141</td>\n",
       "      <td>0.002990</td>\n",
       "      <td>0.002575</td>\n",
       "      <td>1.645397e-03</td>\n",
       "      <td>-0.000924</td>\n",
       "      <td>-0.000161</td>\n",
       "      <td>0.001230</td>\n",
       "      <td>-0.001942</td>\n",
       "      <td>-0.001016</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Filifactor</th>\n",
       "      <td>0.002091</td>\n",
       "      <td>0.006263</td>\n",
       "      <td>-0.000457</td>\n",
       "      <td>-0.000649</td>\n",
       "      <td>0.002268</td>\n",
       "      <td>0.000715</td>\n",
       "      <td>0.000915</td>\n",
       "      <td>0.000207</td>\n",
       "      <td>-0.002572</td>\n",
       "      <td>0.008097</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000704</td>\n",
       "      <td>0.000013</td>\n",
       "      <td>0.002581</td>\n",
       "      <td>0.001540</td>\n",
       "      <td>-1.249174e-03</td>\n",
       "      <td>0.000898</td>\n",
       "      <td>-0.002486</td>\n",
       "      <td>-0.002071</td>\n",
       "      <td>0.002547</td>\n",
       "      <td>-0.000419</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Oribacterium</th>\n",
       "      <td>0.001547</td>\n",
       "      <td>0.013564</td>\n",
       "      <td>0.005766</td>\n",
       "      <td>-0.001444</td>\n",
       "      <td>0.005615</td>\n",
       "      <td>0.002488</td>\n",
       "      <td>-0.000536</td>\n",
       "      <td>-0.000083</td>\n",
       "      <td>-0.001361</td>\n",
       "      <td>0.013332</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001747</td>\n",
       "      <td>-0.002142</td>\n",
       "      <td>0.009023</td>\n",
       "      <td>-0.001985</td>\n",
       "      <td>-2.965122e-04</td>\n",
       "      <td>-0.001120</td>\n",
       "      <td>0.001932</td>\n",
       "      <td>0.000913</td>\n",
       "      <td>0.000406</td>\n",
       "      <td>-0.002011</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Burkholderia</th>\n",
       "      <td>-0.001791</td>\n",
       "      <td>-0.000416</td>\n",
       "      <td>-0.002620</td>\n",
       "      <td>0.001159</td>\n",
       "      <td>0.000534</td>\n",
       "      <td>-0.001859</td>\n",
       "      <td>-0.001470</td>\n",
       "      <td>0.000969</td>\n",
       "      <td>-0.000156</td>\n",
       "      <td>-0.002749</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000964</td>\n",
       "      <td>-0.002339</td>\n",
       "      <td>-0.001168</td>\n",
       "      <td>0.000090</td>\n",
       "      <td>-2.472406e-03</td>\n",
       "      <td>0.002425</td>\n",
       "      <td>-0.002496</td>\n",
       "      <td>0.001003</td>\n",
       "      <td>0.001576</td>\n",
       "      <td>0.000500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sneathia</th>\n",
       "      <td>-0.002545</td>\n",
       "      <td>-0.002039</td>\n",
       "      <td>0.000645</td>\n",
       "      <td>0.000634</td>\n",
       "      <td>-0.000336</td>\n",
       "      <td>-0.002534</td>\n",
       "      <td>0.001111</td>\n",
       "      <td>-0.000223</td>\n",
       "      <td>-0.002524</td>\n",
       "      <td>-0.002815</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000126</td>\n",
       "      <td>-0.000378</td>\n",
       "      <td>-0.002740</td>\n",
       "      <td>-0.001696</td>\n",
       "      <td>-8.634260e-04</td>\n",
       "      <td>0.000401</td>\n",
       "      <td>-0.001691</td>\n",
       "      <td>-0.001215</td>\n",
       "      <td>-0.000074</td>\n",
       "      <td>0.000820</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Treponema</th>\n",
       "      <td>0.000824</td>\n",
       "      <td>0.001540</td>\n",
       "      <td>-0.000959</td>\n",
       "      <td>-0.001349</td>\n",
       "      <td>-0.000261</td>\n",
       "      <td>0.001563</td>\n",
       "      <td>0.000785</td>\n",
       "      <td>-0.002576</td>\n",
       "      <td>-0.002302</td>\n",
       "      <td>0.001230</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002398</td>\n",
       "      <td>-0.001786</td>\n",
       "      <td>-0.000777</td>\n",
       "      <td>-0.000684</td>\n",
       "      <td>2.177736e-03</td>\n",
       "      <td>0.002129</td>\n",
       "      <td>-0.000096</td>\n",
       "      <td>0.000568</td>\n",
       "      <td>0.001119</td>\n",
       "      <td>0.002332</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Moraxella</th>\n",
       "      <td>-0.000462</td>\n",
       "      <td>0.000530</td>\n",
       "      <td>-0.000766</td>\n",
       "      <td>0.000479</td>\n",
       "      <td>-0.001577</td>\n",
       "      <td>0.000565</td>\n",
       "      <td>-0.000092</td>\n",
       "      <td>-0.002279</td>\n",
       "      <td>-0.001156</td>\n",
       "      <td>-0.000698</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001322</td>\n",
       "      <td>0.001126</td>\n",
       "      <td>0.000659</td>\n",
       "      <td>-0.000875</td>\n",
       "      <td>2.405707e-03</td>\n",
       "      <td>-0.001856</td>\n",
       "      <td>0.001188</td>\n",
       "      <td>0.000128</td>\n",
       "      <td>-0.001191</td>\n",
       "      <td>-0.000014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Haemophilus</th>\n",
       "      <td>0.000740</td>\n",
       "      <td>0.002996</td>\n",
       "      <td>-0.000073</td>\n",
       "      <td>0.000331</td>\n",
       "      <td>0.002617</td>\n",
       "      <td>0.000235</td>\n",
       "      <td>-0.001497</td>\n",
       "      <td>0.000343</td>\n",
       "      <td>0.001060</td>\n",
       "      <td>0.000249</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000463</td>\n",
       "      <td>0.001841</td>\n",
       "      <td>0.003732</td>\n",
       "      <td>0.001860</td>\n",
       "      <td>3.109707e-04</td>\n",
       "      <td>-0.001054</td>\n",
       "      <td>-0.000151</td>\n",
       "      <td>0.000232</td>\n",
       "      <td>-0.000724</td>\n",
       "      <td>0.001726</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Selenomonas</th>\n",
       "      <td>0.000016</td>\n",
       "      <td>0.004031</td>\n",
       "      <td>0.981867</td>\n",
       "      <td>-0.001391</td>\n",
       "      <td>0.003543</td>\n",
       "      <td>0.000704</td>\n",
       "      <td>0.000751</td>\n",
       "      <td>-0.001940</td>\n",
       "      <td>-0.000460</td>\n",
       "      <td>0.006241</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002257</td>\n",
       "      <td>-0.000355</td>\n",
       "      <td>0.004772</td>\n",
       "      <td>-0.002008</td>\n",
       "      <td>3.074188e-04</td>\n",
       "      <td>-0.001401</td>\n",
       "      <td>0.001645</td>\n",
       "      <td>0.001228</td>\n",
       "      <td>-0.000172</td>\n",
       "      <td>-0.001842</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Corynebacterium</th>\n",
       "      <td>-0.001395</td>\n",
       "      <td>-0.004226</td>\n",
       "      <td>-0.000957</td>\n",
       "      <td>-0.002531</td>\n",
       "      <td>-0.003655</td>\n",
       "      <td>0.002610</td>\n",
       "      <td>-0.001815</td>\n",
       "      <td>-0.000949</td>\n",
       "      <td>-0.002576</td>\n",
       "      <td>-0.004950</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002145</td>\n",
       "      <td>-0.001582</td>\n",
       "      <td>-0.000777</td>\n",
       "      <td>-0.001847</td>\n",
       "      <td>-2.844669e-04</td>\n",
       "      <td>-0.001395</td>\n",
       "      <td>-0.001526</td>\n",
       "      <td>0.002459</td>\n",
       "      <td>0.000748</td>\n",
       "      <td>0.000668</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rhizobium</th>\n",
       "      <td>-0.000697</td>\n",
       "      <td>0.001967</td>\n",
       "      <td>0.001917</td>\n",
       "      <td>0.000441</td>\n",
       "      <td>-0.000158</td>\n",
       "      <td>0.002549</td>\n",
       "      <td>-0.002518</td>\n",
       "      <td>-0.000059</td>\n",
       "      <td>-0.001725</td>\n",
       "      <td>-0.001181</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001549</td>\n",
       "      <td>-0.001602</td>\n",
       "      <td>0.001171</td>\n",
       "      <td>0.002235</td>\n",
       "      <td>1.216348e-04</td>\n",
       "      <td>-0.001413</td>\n",
       "      <td>-0.000714</td>\n",
       "      <td>-0.000324</td>\n",
       "      <td>-0.000889</td>\n",
       "      <td>0.001327</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bradyrhizobium</th>\n",
       "      <td>0.001343</td>\n",
       "      <td>-0.003528</td>\n",
       "      <td>-0.002096</td>\n",
       "      <td>0.001241</td>\n",
       "      <td>0.001285</td>\n",
       "      <td>0.002452</td>\n",
       "      <td>-0.002536</td>\n",
       "      <td>-0.000355</td>\n",
       "      <td>-0.001579</td>\n",
       "      <td>-0.003262</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.002126</td>\n",
       "      <td>-0.000508</td>\n",
       "      <td>-0.002227</td>\n",
       "      <td>0.000615</td>\n",
       "      <td>2.086164e-03</td>\n",
       "      <td>0.001451</td>\n",
       "      <td>0.000497</td>\n",
       "      <td>0.002102</td>\n",
       "      <td>-0.001444</td>\n",
       "      <td>0.002037</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Methylobacterium</th>\n",
       "      <td>-0.001436</td>\n",
       "      <td>-0.000755</td>\n",
       "      <td>0.001305</td>\n",
       "      <td>0.001168</td>\n",
       "      <td>-0.000473</td>\n",
       "      <td>0.000936</td>\n",
       "      <td>0.001691</td>\n",
       "      <td>-0.001856</td>\n",
       "      <td>0.000480</td>\n",
       "      <td>-0.000136</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.193119</td>\n",
       "      <td>-0.000015</td>\n",
       "      <td>-0.000703</td>\n",
       "      <td>0.001370</td>\n",
       "      <td>-1.867919e-03</td>\n",
       "      <td>-0.000750</td>\n",
       "      <td>0.002069</td>\n",
       "      <td>-0.000797</td>\n",
       "      <td>-0.000521</td>\n",
       "      <td>0.001786</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OD1_genera_incertae_sedis</th>\n",
       "      <td>0.001998</td>\n",
       "      <td>0.001212</td>\n",
       "      <td>-0.001320</td>\n",
       "      <td>0.001724</td>\n",
       "      <td>-0.001093</td>\n",
       "      <td>0.001364</td>\n",
       "      <td>-0.000357</td>\n",
       "      <td>-0.000418</td>\n",
       "      <td>-0.001108</td>\n",
       "      <td>0.004143</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000350</td>\n",
       "      <td>0.136480</td>\n",
       "      <td>0.003464</td>\n",
       "      <td>-0.001496</td>\n",
       "      <td>6.769474e-04</td>\n",
       "      <td>0.000642</td>\n",
       "      <td>-0.000766</td>\n",
       "      <td>-0.002276</td>\n",
       "      <td>-0.001721</td>\n",
       "      <td>0.001907</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Finegoldia</th>\n",
       "      <td>-0.001243</td>\n",
       "      <td>-0.001041</td>\n",
       "      <td>-0.001099</td>\n",
       "      <td>0.000102</td>\n",
       "      <td>-0.000503</td>\n",
       "      <td>-0.001713</td>\n",
       "      <td>-0.000208</td>\n",
       "      <td>0.093400</td>\n",
       "      <td>0.001156</td>\n",
       "      <td>0.002404</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001875</td>\n",
       "      <td>0.000245</td>\n",
       "      <td>0.001073</td>\n",
       "      <td>0.001517</td>\n",
       "      <td>-1.318439e-03</td>\n",
       "      <td>0.000260</td>\n",
       "      <td>-0.002489</td>\n",
       "      <td>0.002529</td>\n",
       "      <td>0.001280</td>\n",
       "      <td>0.000904</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Microbacterium</th>\n",
       "      <td>-0.001884</td>\n",
       "      <td>-0.000044</td>\n",
       "      <td>0.001811</td>\n",
       "      <td>0.000997</td>\n",
       "      <td>-0.002854</td>\n",
       "      <td>-0.001759</td>\n",
       "      <td>0.000665</td>\n",
       "      <td>0.000627</td>\n",
       "      <td>-0.002369</td>\n",
       "      <td>-0.003967</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000376</td>\n",
       "      <td>0.002131</td>\n",
       "      <td>-0.795767</td>\n",
       "      <td>0.001077</td>\n",
       "      <td>2.059834e-03</td>\n",
       "      <td>-0.000627</td>\n",
       "      <td>0.001643</td>\n",
       "      <td>-0.001693</td>\n",
       "      <td>-0.001191</td>\n",
       "      <td>-0.002426</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sphingomonas</th>\n",
       "      <td>0.001498</td>\n",
       "      <td>-0.005168</td>\n",
       "      <td>-0.002409</td>\n",
       "      <td>0.001802</td>\n",
       "      <td>-0.003339</td>\n",
       "      <td>-0.000679</td>\n",
       "      <td>0.000377</td>\n",
       "      <td>0.001111</td>\n",
       "      <td>0.002068</td>\n",
       "      <td>-0.002489</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.002608</td>\n",
       "      <td>0.001402</td>\n",
       "      <td>-0.002714</td>\n",
       "      <td>0.170665</td>\n",
       "      <td>-2.059235e-03</td>\n",
       "      <td>0.001151</td>\n",
       "      <td>-0.001222</td>\n",
       "      <td>-0.002386</td>\n",
       "      <td>-0.000714</td>\n",
       "      <td>0.000419</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chryseobacterium</th>\n",
       "      <td>-0.000823</td>\n",
       "      <td>-0.001778</td>\n",
       "      <td>0.000207</td>\n",
       "      <td>-0.002427</td>\n",
       "      <td>0.058901</td>\n",
       "      <td>0.002023</td>\n",
       "      <td>-0.000971</td>\n",
       "      <td>0.002105</td>\n",
       "      <td>-0.000046</td>\n",
       "      <td>-0.001541</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002391</td>\n",
       "      <td>-0.002590</td>\n",
       "      <td>-0.001804</td>\n",
       "      <td>0.002186</td>\n",
       "      <td>-1.376114e-03</td>\n",
       "      <td>-0.001108</td>\n",
       "      <td>0.002146</td>\n",
       "      <td>-0.002139</td>\n",
       "      <td>0.001707</td>\n",
       "      <td>0.002257</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bacteroides</th>\n",
       "      <td>0.000721</td>\n",
       "      <td>-0.006687</td>\n",
       "      <td>0.000659</td>\n",
       "      <td>0.000434</td>\n",
       "      <td>-0.002918</td>\n",
       "      <td>-0.000256</td>\n",
       "      <td>0.001585</td>\n",
       "      <td>-0.000590</td>\n",
       "      <td>0.000054</td>\n",
       "      <td>-0.005517</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000003</td>\n",
       "      <td>0.001263</td>\n",
       "      <td>-0.003526</td>\n",
       "      <td>-0.002416</td>\n",
       "      <td>-1.016557e-01</td>\n",
       "      <td>0.000259</td>\n",
       "      <td>0.001271</td>\n",
       "      <td>0.001460</td>\n",
       "      <td>0.002190</td>\n",
       "      <td>0.000485</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bdellovibrio</th>\n",
       "      <td>-0.000177</td>\n",
       "      <td>-0.001346</td>\n",
       "      <td>0.000405</td>\n",
       "      <td>0.001589</td>\n",
       "      <td>0.001255</td>\n",
       "      <td>-0.001302</td>\n",
       "      <td>0.002221</td>\n",
       "      <td>0.001802</td>\n",
       "      <td>-0.002352</td>\n",
       "      <td>-0.000303</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001908</td>\n",
       "      <td>0.000881</td>\n",
       "      <td>-0.000329</td>\n",
       "      <td>-0.001910</td>\n",
       "      <td>-7.942526e-04</td>\n",
       "      <td>-0.067080</td>\n",
       "      <td>0.000376</td>\n",
       "      <td>-0.001013</td>\n",
       "      <td>-0.001799</td>\n",
       "      <td>-0.001569</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Streptophyta</th>\n",
       "      <td>0.001206</td>\n",
       "      <td>0.000248</td>\n",
       "      <td>0.001377</td>\n",
       "      <td>-0.001214</td>\n",
       "      <td>-0.001159</td>\n",
       "      <td>0.001592</td>\n",
       "      <td>-0.001693</td>\n",
       "      <td>-0.000899</td>\n",
       "      <td>0.002446</td>\n",
       "      <td>-0.000454</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001782</td>\n",
       "      <td>-0.002206</td>\n",
       "      <td>-0.003124</td>\n",
       "      <td>0.000522</td>\n",
       "      <td>-1.249387e-03</td>\n",
       "      <td>-0.002163</td>\n",
       "      <td>-0.190269</td>\n",
       "      <td>0.002056</td>\n",
       "      <td>0.001456</td>\n",
       "      <td>-0.000697</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Lachnospiracea_incertae_sedis</th>\n",
       "      <td>0.000031</td>\n",
       "      <td>0.003153</td>\n",
       "      <td>0.002112</td>\n",
       "      <td>-0.002269</td>\n",
       "      <td>-0.000467</td>\n",
       "      <td>-0.000774</td>\n",
       "      <td>0.000436</td>\n",
       "      <td>0.000396</td>\n",
       "      <td>0.002288</td>\n",
       "      <td>0.002605</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.002023</td>\n",
       "      <td>0.001015</td>\n",
       "      <td>0.001725</td>\n",
       "      <td>0.001065</td>\n",
       "      <td>-1.250638e-03</td>\n",
       "      <td>-0.001187</td>\n",
       "      <td>-0.000044</td>\n",
       "      <td>-0.000072</td>\n",
       "      <td>-0.001244</td>\n",
       "      <td>0.001252</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Paracoccus</th>\n",
       "      <td>0.000184</td>\n",
       "      <td>-0.001373</td>\n",
       "      <td>0.000762</td>\n",
       "      <td>0.002271</td>\n",
       "      <td>-0.001073</td>\n",
       "      <td>0.000560</td>\n",
       "      <td>0.000226</td>\n",
       "      <td>-0.001017</td>\n",
       "      <td>-0.002340</td>\n",
       "      <td>-0.002099</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000323</td>\n",
       "      <td>0.000293</td>\n",
       "      <td>-0.001871</td>\n",
       "      <td>-0.001232</td>\n",
       "      <td>-1.290021e-03</td>\n",
       "      <td>0.002014</td>\n",
       "      <td>-0.002432</td>\n",
       "      <td>0.159397</td>\n",
       "      <td>0.000647</td>\n",
       "      <td>0.001955</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fastidiosipila</th>\n",
       "      <td>-0.000017</td>\n",
       "      <td>0.002214</td>\n",
       "      <td>0.001293</td>\n",
       "      <td>-0.001661</td>\n",
       "      <td>0.001669</td>\n",
       "      <td>0.002024</td>\n",
       "      <td>-0.001368</td>\n",
       "      <td>0.000244</td>\n",
       "      <td>-0.001963</td>\n",
       "      <td>0.000780</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000575</td>\n",
       "      <td>0.000544</td>\n",
       "      <td>-0.000228</td>\n",
       "      <td>0.000847</td>\n",
       "      <td>-2.035570e-03</td>\n",
       "      <td>0.000797</td>\n",
       "      <td>-0.001897</td>\n",
       "      <td>0.001389</td>\n",
       "      <td>0.216137</td>\n",
       "      <td>0.001388</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pseudonocardia</th>\n",
       "      <td>-0.001102</td>\n",
       "      <td>-0.001387</td>\n",
       "      <td>-0.000705</td>\n",
       "      <td>0.002086</td>\n",
       "      <td>-0.002385</td>\n",
       "      <td>0.000177</td>\n",
       "      <td>-0.001157</td>\n",
       "      <td>0.001119</td>\n",
       "      <td>0.001773</td>\n",
       "      <td>0.000600</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.002324</td>\n",
       "      <td>0.001244</td>\n",
       "      <td>-0.000162</td>\n",
       "      <td>0.001022</td>\n",
       "      <td>-2.364053e-03</td>\n",
       "      <td>0.001984</td>\n",
       "      <td>0.001929</td>\n",
       "      <td>-0.000169</td>\n",
       "      <td>-0.000158</td>\n",
       "      <td>-0.195752</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>48 rows × 40 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                               Streptococcaceae  Cellulomonadaceae  \\\n",
       "Streptococcus                         -0.014793           0.001963   \n",
       "Tropheryma                             0.001968           2.643693   \n",
       "Veillonella                            0.002327           0.000996   \n",
       "Actinomyces                           -0.001718           0.007389   \n",
       "Flavobacterium                         0.000457          -0.003228   \n",
       "Prevotella                            -0.001422           0.001370   \n",
       "Porphyromonas                          0.000285          -0.006207   \n",
       "Parvimonas                             0.000845           0.001325   \n",
       "Fusobacterium                         -0.001614           0.000511   \n",
       "Propionibacterium                      0.000930          -0.013073   \n",
       "Gemella                               -0.001498           0.001463   \n",
       "Rothia                                -0.000115          -0.016207   \n",
       "Granulicatella                         0.000624           0.001726   \n",
       "Neisseria                             -0.000255          -0.002021   \n",
       "Lactobacillus                          0.001288           0.000041   \n",
       "Megasphaera                            0.001857          -0.004590   \n",
       "Catonella                             -0.000552           0.004705   \n",
       "Atopobium                              0.001015          -0.003637   \n",
       "Campylobacter                          0.000271          -0.000293   \n",
       "Capnocytophaga                         0.001394          -0.001214   \n",
       "Solobacterium                          0.000408          -0.001596   \n",
       "Moryella                              -0.001687           0.009675   \n",
       "TM7_genera_incertae_sedis             -0.000592          -0.006033   \n",
       "Staphylococcus                         0.000967          -0.001700   \n",
       "Filifactor                             0.002091           0.006263   \n",
       "Oribacterium                           0.001547           0.013564   \n",
       "Burkholderia                          -0.001791          -0.000416   \n",
       "Sneathia                              -0.002545          -0.002039   \n",
       "Treponema                              0.000824           0.001540   \n",
       "Moraxella                             -0.000462           0.000530   \n",
       "Haemophilus                            0.000740           0.002996   \n",
       "Selenomonas                            0.000016           0.004031   \n",
       "Corynebacterium                       -0.001395          -0.004226   \n",
       "Rhizobium                             -0.000697           0.001967   \n",
       "Bradyrhizobium                         0.001343          -0.003528   \n",
       "Methylobacterium                      -0.001436          -0.000755   \n",
       "OD1_genera_incertae_sedis              0.001998           0.001212   \n",
       "Finegoldia                            -0.001243          -0.001041   \n",
       "Microbacterium                        -0.001884          -0.000044   \n",
       "Sphingomonas                           0.001498          -0.005168   \n",
       "Chryseobacterium                      -0.000823          -0.001778   \n",
       "Bacteroides                            0.000721          -0.006687   \n",
       "Bdellovibrio                          -0.000177          -0.001346   \n",
       "Streptophyta                           0.001206           0.000248   \n",
       "Lachnospiracea_incertae_sedis          0.000031           0.003153   \n",
       "Paracoccus                             0.000184          -0.001373   \n",
       "Fastidiosipila                        -0.000017           0.002214   \n",
       "Pseudonocardia                        -0.001102          -0.001387   \n",
       "\n",
       "                               Veillonellaceae  Actinomycetaceae  \\\n",
       "Streptococcus                         0.004347          0.001159   \n",
       "Tropheryma                            0.002938         -0.001316   \n",
       "Veillonella                           0.810107          0.002155   \n",
       "Actinomyces                           0.003110         -0.180331   \n",
       "Flavobacterium                       -0.001253         -0.002179   \n",
       "Prevotella                            0.001748         -0.002602   \n",
       "Porphyromonas                        -0.004304         -0.000607   \n",
       "Parvimonas                           -0.000987         -0.000068   \n",
       "Fusobacterium                        -0.001467          0.000294   \n",
       "Propionibacterium                    -0.004651          0.001216   \n",
       "Gemella                               0.001017         -0.001636   \n",
       "Rothia                               -0.009075          0.002453   \n",
       "Granulicatella                        0.003570         -0.000384   \n",
       "Neisseria                            -0.002048         -0.002532   \n",
       "Lactobacillus                        -0.001769         -0.000117   \n",
       "Megasphaera                          -0.450920         -0.000565   \n",
       "Catonella                             0.001851         -0.000622   \n",
       "Atopobium                            -0.001954         -0.001635   \n",
       "Campylobacter                        -0.000450         -0.002135   \n",
       "Capnocytophaga                       -0.001459          0.001374   \n",
       "Solobacterium                         0.002217         -0.000253   \n",
       "Moryella                              0.003876          0.001688   \n",
       "TM7_genera_incertae_sedis            -0.000963          0.001680   \n",
       "Staphylococcus                        0.001304         -0.002055   \n",
       "Filifactor                           -0.000457         -0.000649   \n",
       "Oribacterium                          0.005766         -0.001444   \n",
       "Burkholderia                         -0.002620          0.001159   \n",
       "Sneathia                              0.000645          0.000634   \n",
       "Treponema                            -0.000959         -0.001349   \n",
       "Moraxella                            -0.000766          0.000479   \n",
       "Haemophilus                          -0.000073          0.000331   \n",
       "Selenomonas                           0.981867         -0.001391   \n",
       "Corynebacterium                      -0.000957         -0.002531   \n",
       "Rhizobium                             0.001917          0.000441   \n",
       "Bradyrhizobium                       -0.002096          0.001241   \n",
       "Methylobacterium                      0.001305          0.001168   \n",
       "OD1_genera_incertae_sedis            -0.001320          0.001724   \n",
       "Finegoldia                           -0.001099          0.000102   \n",
       "Microbacterium                        0.001811          0.000997   \n",
       "Sphingomonas                         -0.002409          0.001802   \n",
       "Chryseobacterium                      0.000207         -0.002427   \n",
       "Bacteroides                           0.000659          0.000434   \n",
       "Bdellovibrio                          0.000405          0.001589   \n",
       "Streptophyta                          0.001377         -0.001214   \n",
       "Lachnospiracea_incertae_sedis         0.002112         -0.002269   \n",
       "Paracoccus                            0.000762          0.002271   \n",
       "Fastidiosipila                        0.001293         -0.001661   \n",
       "Pseudonocardia                       -0.000705          0.002086   \n",
       "\n",
       "                               Flavobacteriaceae  Prevotellaceae  \\\n",
       "Streptococcus                          -0.000791       -0.002248   \n",
       "Tropheryma                              0.001414       -0.001211   \n",
       "Veillonella                             0.001318       -0.001905   \n",
       "Actinomyces                             0.001431        0.001595   \n",
       "Flavobacterium                          0.086882       -0.000805   \n",
       "Prevotella                              0.002539       -0.065576   \n",
       "Porphyromonas                          -0.003547       -0.000603   \n",
       "Parvimonas                             -0.001069       -0.001630   \n",
       "Fusobacterium                          -0.001060       -0.001367   \n",
       "Propionibacterium                      -0.004595       -0.000471   \n",
       "Gemella                                -0.001378        0.000401   \n",
       "Rothia                                 -0.006259        0.001580   \n",
       "Granulicatella                         -0.001819        0.001330   \n",
       "Neisseria                               0.001075        0.002411   \n",
       "Lactobacillus                          -0.000680        0.001913   \n",
       "Megasphaera                            -0.001280       -0.002229   \n",
       "Catonella                               0.001096        0.001496   \n",
       "Atopobium                               0.000163        0.001047   \n",
       "Campylobacter                          -0.001871       -0.001314   \n",
       "Capnocytophaga                          0.677167        0.000891   \n",
       "Solobacterium                          -0.001933       -0.002397   \n",
       "Moryella                                0.002519       -0.002244   \n",
       "TM7_genera_incertae_sedis              -0.002047       -0.000580   \n",
       "Staphylococcus                         -0.001103       -0.002200   \n",
       "Filifactor                              0.002268        0.000715   \n",
       "Oribacterium                            0.005615        0.002488   \n",
       "Burkholderia                            0.000534       -0.001859   \n",
       "Sneathia                               -0.000336       -0.002534   \n",
       "Treponema                              -0.000261        0.001563   \n",
       "Moraxella                              -0.001577        0.000565   \n",
       "Haemophilus                             0.002617        0.000235   \n",
       "Selenomonas                             0.003543        0.000704   \n",
       "Corynebacterium                        -0.003655        0.002610   \n",
       "Rhizobium                              -0.000158        0.002549   \n",
       "Bradyrhizobium                          0.001285        0.002452   \n",
       "Methylobacterium                       -0.000473        0.000936   \n",
       "OD1_genera_incertae_sedis              -0.001093        0.001364   \n",
       "Finegoldia                             -0.000503       -0.001713   \n",
       "Microbacterium                         -0.002854       -0.001759   \n",
       "Sphingomonas                           -0.003339       -0.000679   \n",
       "Chryseobacterium                        0.058901        0.002023   \n",
       "Bacteroides                            -0.002918       -0.000256   \n",
       "Bdellovibrio                            0.001255       -0.001302   \n",
       "Streptophyta                           -0.001159        0.001592   \n",
       "Lachnospiracea_incertae_sedis          -0.000467       -0.000774   \n",
       "Paracoccus                             -0.001073        0.000560   \n",
       "Fastidiosipila                          0.001669        0.002024   \n",
       "Pseudonocardia                         -0.002385        0.000177   \n",
       "\n",
       "                               Porphyromonadaceae  \\\n",
       "Streptococcus                            0.000906   \n",
       "Tropheryma                               0.000915   \n",
       "Veillonella                              0.002336   \n",
       "Actinomyces                              0.002037   \n",
       "Flavobacterium                           0.001855   \n",
       "Prevotella                               0.001014   \n",
       "Porphyromonas                            0.107162   \n",
       "Parvimonas                              -0.001872   \n",
       "Fusobacterium                           -0.002356   \n",
       "Propionibacterium                        0.001658   \n",
       "Gemella                                  0.000076   \n",
       "Rothia                                   0.000415   \n",
       "Granulicatella                           0.001206   \n",
       "Neisseria                                0.000078   \n",
       "Lactobacillus                            0.000175   \n",
       "Megasphaera                             -0.001190   \n",
       "Catonella                                0.002197   \n",
       "Atopobium                                0.000006   \n",
       "Campylobacter                           -0.002341   \n",
       "Capnocytophaga                           0.002356   \n",
       "Solobacterium                           -0.002084   \n",
       "Moryella                                 0.001180   \n",
       "TM7_genera_incertae_sedis               -0.001642   \n",
       "Staphylococcus                          -0.002407   \n",
       "Filifactor                               0.000915   \n",
       "Oribacterium                            -0.000536   \n",
       "Burkholderia                            -0.001470   \n",
       "Sneathia                                 0.001111   \n",
       "Treponema                                0.000785   \n",
       "Moraxella                               -0.000092   \n",
       "Haemophilus                             -0.001497   \n",
       "Selenomonas                              0.000751   \n",
       "Corynebacterium                         -0.001815   \n",
       "Rhizobium                               -0.002518   \n",
       "Bradyrhizobium                          -0.002536   \n",
       "Methylobacterium                         0.001691   \n",
       "OD1_genera_incertae_sedis               -0.000357   \n",
       "Finegoldia                              -0.000208   \n",
       "Microbacterium                           0.000665   \n",
       "Sphingomonas                             0.000377   \n",
       "Chryseobacterium                        -0.000971   \n",
       "Bacteroides                              0.001585   \n",
       "Bdellovibrio                             0.002221   \n",
       "Streptophyta                            -0.001693   \n",
       "Lachnospiracea_incertae_sedis            0.000436   \n",
       "Paracoccus                               0.000226   \n",
       "Fastidiosipila                          -0.001368   \n",
       "Pseudonocardia                          -0.001157   \n",
       "\n",
       "                               Clostridiales_Incertae_Sedis_XI  \\\n",
       "Streptococcus                                         0.001430   \n",
       "Tropheryma                                           -0.000834   \n",
       "Veillonella                                           0.000344   \n",
       "Actinomyces                                           0.000756   \n",
       "Flavobacterium                                       -0.000015   \n",
       "Prevotella                                            0.002510   \n",
       "Porphyromonas                                         0.001925   \n",
       "Parvimonas                                            0.108699   \n",
       "Fusobacterium                                        -0.001482   \n",
       "Propionibacterium                                     0.001750   \n",
       "Gemella                                               0.001693   \n",
       "Rothia                                               -0.001189   \n",
       "Granulicatella                                        0.000105   \n",
       "Neisseria                                             0.000719   \n",
       "Lactobacillus                                         0.002084   \n",
       "Megasphaera                                           0.001829   \n",
       "Catonella                                            -0.000119   \n",
       "Atopobium                                             0.002091   \n",
       "Campylobacter                                         0.001738   \n",
       "Capnocytophaga                                        0.001402   \n",
       "Solobacterium                                        -0.001448   \n",
       "Moryella                                             -0.000861   \n",
       "TM7_genera_incertae_sedis                            -0.001679   \n",
       "Staphylococcus                                        0.000643   \n",
       "Filifactor                                            0.000207   \n",
       "Oribacterium                                         -0.000083   \n",
       "Burkholderia                                          0.000969   \n",
       "Sneathia                                             -0.000223   \n",
       "Treponema                                            -0.002576   \n",
       "Moraxella                                            -0.002279   \n",
       "Haemophilus                                           0.000343   \n",
       "Selenomonas                                          -0.001940   \n",
       "Corynebacterium                                      -0.000949   \n",
       "Rhizobium                                            -0.000059   \n",
       "Bradyrhizobium                                       -0.000355   \n",
       "Methylobacterium                                     -0.001856   \n",
       "OD1_genera_incertae_sedis                            -0.000418   \n",
       "Finegoldia                                            0.093400   \n",
       "Microbacterium                                        0.000627   \n",
       "Sphingomonas                                          0.001111   \n",
       "Chryseobacterium                                      0.002105   \n",
       "Bacteroides                                          -0.000590   \n",
       "Bdellovibrio                                          0.001802   \n",
       "Streptophyta                                         -0.000899   \n",
       "Lachnospiracea_incertae_sedis                         0.000396   \n",
       "Paracoccus                                           -0.001017   \n",
       "Fastidiosipila                                        0.000244   \n",
       "Pseudonocardia                                        0.001119   \n",
       "\n",
       "                               Fusobacteriaceae  Propionibacteriaceae  ...  \\\n",
       "Streptococcus                          0.001406              0.005341  ...   \n",
       "Tropheryma                             0.000942              0.009464  ...   \n",
       "Veillonella                           -0.001571              0.004497  ...   \n",
       "Actinomyces                            0.001290              0.003654  ...   \n",
       "Flavobacterium                        -0.002281             -0.000385  ...   \n",
       "Prevotella                             0.001106              0.004950  ...   \n",
       "Porphyromonas                          0.002579             -0.003740  ...   \n",
       "Parvimonas                             0.000746              0.001768  ...   \n",
       "Fusobacterium                         -0.046245              0.003387  ...   \n",
       "Propionibacterium                      0.001167             -2.201533  ...   \n",
       "Gemella                               -0.001238             -0.001961  ...   \n",
       "Rothia                                 0.000002             -0.015961  ...   \n",
       "Granulicatella                         0.000237              0.001844  ...   \n",
       "Neisseria                             -0.000602             -0.000383  ...   \n",
       "Lactobacillus                          0.000972              0.000657  ...   \n",
       "Megasphaera                            0.002256             -0.004708  ...   \n",
       "Catonella                              0.000624              0.005800  ...   \n",
       "Atopobium                              0.000684             -0.004942  ...   \n",
       "Campylobacter                          0.002508             -0.002144  ...   \n",
       "Capnocytophaga                         0.002588              0.003668  ...   \n",
       "Solobacterium                          0.000034              0.001254  ...   \n",
       "Moryella                               0.000712              0.007021  ...   \n",
       "TM7_genera_incertae_sedis             -0.001301             -0.004437  ...   \n",
       "Staphylococcus                        -0.000295             -0.001501  ...   \n",
       "Filifactor                            -0.002572              0.008097  ...   \n",
       "Oribacterium                          -0.001361              0.013332  ...   \n",
       "Burkholderia                          -0.000156             -0.002749  ...   \n",
       "Sneathia                              -0.002524             -0.002815  ...   \n",
       "Treponema                             -0.002302              0.001230  ...   \n",
       "Moraxella                             -0.001156             -0.000698  ...   \n",
       "Haemophilus                            0.001060              0.000249  ...   \n",
       "Selenomonas                           -0.000460              0.006241  ...   \n",
       "Corynebacterium                       -0.002576             -0.004950  ...   \n",
       "Rhizobium                             -0.001725             -0.001181  ...   \n",
       "Bradyrhizobium                        -0.001579             -0.003262  ...   \n",
       "Methylobacterium                       0.000480             -0.000136  ...   \n",
       "OD1_genera_incertae_sedis             -0.001108              0.004143  ...   \n",
       "Finegoldia                             0.001156              0.002404  ...   \n",
       "Microbacterium                        -0.002369             -0.003967  ...   \n",
       "Sphingomonas                           0.002068             -0.002489  ...   \n",
       "Chryseobacterium                      -0.000046             -0.001541  ...   \n",
       "Bacteroides                            0.000054             -0.005517  ...   \n",
       "Bdellovibrio                          -0.002352             -0.000303  ...   \n",
       "Streptophyta                           0.002446             -0.000454  ...   \n",
       "Lachnospiracea_incertae_sedis          0.002288              0.002605  ...   \n",
       "Paracoccus                            -0.002340             -0.002099  ...   \n",
       "Fastidiosipila                        -0.001963              0.000780  ...   \n",
       "Pseudonocardia                         0.001773              0.000600  ...   \n",
       "\n",
       "                               Methylobacteriaceae  OD1_genera_incertae_sedis  \\\n",
       "Streptococcus                            -0.001627                  -0.002168   \n",
       "Tropheryma                                0.000215                   0.000753   \n",
       "Veillonella                              -0.002243                  -0.001715   \n",
       "Actinomyces                               0.001803                   0.000208   \n",
       "Flavobacterium                           -0.001277                  -0.002132   \n",
       "Prevotella                                0.002446                   0.001850   \n",
       "Porphyromonas                            -0.000119                  -0.002586   \n",
       "Parvimonas                                0.000201                   0.001997   \n",
       "Fusobacterium                             0.002216                   0.000907   \n",
       "Propionibacterium                         0.000765                  -0.001584   \n",
       "Gemella                                   0.001241                   0.000407   \n",
       "Rothia                                    0.000570                   0.000673   \n",
       "Granulicatella                           -0.002049                   0.000314   \n",
       "Neisseria                                -0.001485                   0.000684   \n",
       "Lactobacillus                             0.001286                   0.001386   \n",
       "Megasphaera                              -0.000598                   0.002535   \n",
       "Catonella                                -0.002390                  -0.000225   \n",
       "Atopobium                                 0.002473                   0.002593   \n",
       "Campylobacter                             0.002353                  -0.001047   \n",
       "Capnocytophaga                            0.002439                   0.001809   \n",
       "Solobacterium                            -0.000054                   0.001058   \n",
       "Moryella                                 -0.000058                   0.001273   \n",
       "TM7_genera_incertae_sedis                 0.002536                   0.000015   \n",
       "Staphylococcus                            0.000195                  -0.000141   \n",
       "Filifactor                                0.000704                   0.000013   \n",
       "Oribacterium                              0.001747                  -0.002142   \n",
       "Burkholderia                              0.000964                  -0.002339   \n",
       "Sneathia                                 -0.000126                  -0.000378   \n",
       "Treponema                                 0.002398                  -0.001786   \n",
       "Moraxella                                -0.001322                   0.001126   \n",
       "Haemophilus                              -0.000463                   0.001841   \n",
       "Selenomonas                               0.002257                  -0.000355   \n",
       "Corynebacterium                           0.002145                  -0.001582   \n",
       "Rhizobium                                 0.001549                  -0.001602   \n",
       "Bradyrhizobium                           -0.002126                  -0.000508   \n",
       "Methylobacterium                         -0.193119                  -0.000015   \n",
       "OD1_genera_incertae_sedis                -0.000350                   0.136480   \n",
       "Finegoldia                               -0.001875                   0.000245   \n",
       "Microbacterium                           -0.000376                   0.002131   \n",
       "Sphingomonas                             -0.002608                   0.001402   \n",
       "Chryseobacterium                          0.002391                  -0.002590   \n",
       "Bacteroides                               0.000003                   0.001263   \n",
       "Bdellovibrio                             -0.001908                   0.000881   \n",
       "Streptophyta                             -0.001782                  -0.002206   \n",
       "Lachnospiracea_incertae_sedis            -0.002023                   0.001015   \n",
       "Paracoccus                               -0.000323                   0.000293   \n",
       "Fastidiosipila                           -0.000575                   0.000544   \n",
       "Pseudonocardia                           -0.002324                   0.001244   \n",
       "\n",
       "                               Microbacteriaceae  Sphingomonadaceae  \\\n",
       "Streptococcus                           0.003276           0.001065   \n",
       "Tropheryma                              0.007650           0.000689   \n",
       "Veillonella                             0.002423           0.000382   \n",
       "Actinomyces                             0.005222          -0.000659   \n",
       "Flavobacterium                         -0.001425          -0.001280   \n",
       "Prevotella                              0.002515          -0.000855   \n",
       "Porphyromonas                          -0.002964           0.000596   \n",
       "Parvimonas                              0.000978           0.001852   \n",
       "Fusobacterium                          -0.000957          -0.000942   \n",
       "Propionibacterium                      -0.008847           0.000841   \n",
       "Gemella                                -0.000970          -0.000308   \n",
       "Rothia                                 -0.013014          -0.001078   \n",
       "Granulicatella                          0.002234           0.002073   \n",
       "Neisseria                              -0.004025          -0.002050   \n",
       "Lactobacillus                          -0.000451           0.001351   \n",
       "Megasphaera                            -0.003356           0.001590   \n",
       "Catonella                               0.000729           0.001592   \n",
       "Atopobium                              -0.002530          -0.002565   \n",
       "Campylobacter                          -0.001110          -0.000089   \n",
       "Capnocytophaga                          0.000726          -0.002255   \n",
       "Solobacterium                           0.002495          -0.002568   \n",
       "Moryella                                0.006766          -0.000580   \n",
       "TM7_genera_incertae_sedis              -0.004040           0.002382   \n",
       "Staphylococcus                          0.002990           0.002575   \n",
       "Filifactor                              0.002581           0.001540   \n",
       "Oribacterium                            0.009023          -0.001985   \n",
       "Burkholderia                           -0.001168           0.000090   \n",
       "Sneathia                               -0.002740          -0.001696   \n",
       "Treponema                              -0.000777          -0.000684   \n",
       "Moraxella                               0.000659          -0.000875   \n",
       "Haemophilus                             0.003732           0.001860   \n",
       "Selenomonas                             0.004772          -0.002008   \n",
       "Corynebacterium                        -0.000777          -0.001847   \n",
       "Rhizobium                               0.001171           0.002235   \n",
       "Bradyrhizobium                         -0.002227           0.000615   \n",
       "Methylobacterium                       -0.000703           0.001370   \n",
       "OD1_genera_incertae_sedis               0.003464          -0.001496   \n",
       "Finegoldia                              0.001073           0.001517   \n",
       "Microbacterium                         -0.795767           0.001077   \n",
       "Sphingomonas                           -0.002714           0.170665   \n",
       "Chryseobacterium                       -0.001804           0.002186   \n",
       "Bacteroides                            -0.003526          -0.002416   \n",
       "Bdellovibrio                           -0.000329          -0.001910   \n",
       "Streptophyta                           -0.003124           0.000522   \n",
       "Lachnospiracea_incertae_sedis           0.001725           0.001065   \n",
       "Paracoccus                             -0.001871          -0.001232   \n",
       "Fastidiosipila                         -0.000228           0.000847   \n",
       "Pseudonocardia                         -0.000162           0.001022   \n",
       "\n",
       "                               Bacteroidaceae  Bdellovibrionaceae  \\\n",
       "Streptococcus                    8.258116e-04           -0.001063   \n",
       "Tropheryma                      -5.062897e-04           -0.002308   \n",
       "Veillonella                     -4.005031e-04            0.001489   \n",
       "Actinomyces                     -4.506988e-04            0.002200   \n",
       "Flavobacterium                   1.712017e-03            0.002046   \n",
       "Prevotella                      -6.095981e-04           -0.002064   \n",
       "Porphyromonas                   -2.241743e-03            0.002004   \n",
       "Parvimonas                      -4.318894e-04            0.000578   \n",
       "Fusobacterium                    4.763678e-04           -0.002455   \n",
       "Propionibacterium                1.930105e-03            0.001994   \n",
       "Gemella                          1.864710e-07           -0.000281   \n",
       "Rothia                           7.016866e-04            0.002240   \n",
       "Granulicatella                  -1.533006e-03           -0.002611   \n",
       "Neisseria                       -1.690782e-03           -0.001648   \n",
       "Lactobacillus                    9.154539e-04            0.002429   \n",
       "Megasphaera                     -2.757030e-04           -0.002461   \n",
       "Catonella                       -1.538441e-03            0.002322   \n",
       "Atopobium                        2.935952e-04            0.001023   \n",
       "Campylobacter                   -6.340943e-04           -0.000651   \n",
       "Capnocytophaga                   1.402029e-04           -0.000935   \n",
       "Solobacterium                    2.288027e-03            0.001604   \n",
       "Moryella                        -1.388777e-03           -0.001805   \n",
       "TM7_genera_incertae_sedis       -1.794019e-03           -0.001688   \n",
       "Staphylococcus                   1.645397e-03           -0.000924   \n",
       "Filifactor                      -1.249174e-03            0.000898   \n",
       "Oribacterium                    -2.965122e-04           -0.001120   \n",
       "Burkholderia                    -2.472406e-03            0.002425   \n",
       "Sneathia                        -8.634260e-04            0.000401   \n",
       "Treponema                        2.177736e-03            0.002129   \n",
       "Moraxella                        2.405707e-03           -0.001856   \n",
       "Haemophilus                      3.109707e-04           -0.001054   \n",
       "Selenomonas                      3.074188e-04           -0.001401   \n",
       "Corynebacterium                 -2.844669e-04           -0.001395   \n",
       "Rhizobium                        1.216348e-04           -0.001413   \n",
       "Bradyrhizobium                   2.086164e-03            0.001451   \n",
       "Methylobacterium                -1.867919e-03           -0.000750   \n",
       "OD1_genera_incertae_sedis        6.769474e-04            0.000642   \n",
       "Finegoldia                      -1.318439e-03            0.000260   \n",
       "Microbacterium                   2.059834e-03           -0.000627   \n",
       "Sphingomonas                    -2.059235e-03            0.001151   \n",
       "Chryseobacterium                -1.376114e-03           -0.001108   \n",
       "Bacteroides                     -1.016557e-01            0.000259   \n",
       "Bdellovibrio                    -7.942526e-04           -0.067080   \n",
       "Streptophyta                    -1.249387e-03           -0.002163   \n",
       "Lachnospiracea_incertae_sedis   -1.250638e-03           -0.001187   \n",
       "Paracoccus                      -1.290021e-03            0.002014   \n",
       "Fastidiosipila                  -2.035570e-03            0.000797   \n",
       "Pseudonocardia                  -2.364053e-03            0.001984   \n",
       "\n",
       "                               Chloroplast  Rhodobacteraceae  Ruminococcaceae  \\\n",
       "Streptococcus                     0.002237          0.001537        -0.002051   \n",
       "Tropheryma                       -0.000089         -0.001389        -0.002437   \n",
       "Veillonella                      -0.000408          0.001809         0.001761   \n",
       "Actinomyces                      -0.000853         -0.000043         0.000658   \n",
       "Flavobacterium                    0.001117          0.001177         0.001554   \n",
       "Prevotella                       -0.002452          0.000455        -0.002353   \n",
       "Porphyromonas                     0.000736          0.001423        -0.000501   \n",
       "Parvimonas                       -0.001637          0.000951        -0.001134   \n",
       "Fusobacterium                    -0.000501         -0.000108         0.002000   \n",
       "Propionibacterium                 0.001334         -0.002277        -0.000127   \n",
       "Gemella                          -0.001355         -0.001817         0.000703   \n",
       "Rothia                           -0.001756          0.002292         0.002300   \n",
       "Granulicatella                   -0.000789         -0.002119         0.000354   \n",
       "Neisseria                         0.000329          0.001427         0.000080   \n",
       "Lactobacillus                    -0.000406         -0.001493         0.002128   \n",
       "Megasphaera                       0.000129         -0.001857         0.000693   \n",
       "Catonella                        -0.001311          0.001033        -0.002097   \n",
       "Atopobium                        -0.001279         -0.001647         0.001326   \n",
       "Campylobacter                    -0.001737          0.001490        -0.000382   \n",
       "Capnocytophaga                   -0.000882          0.002582        -0.000707   \n",
       "Solobacterium                    -0.000584         -0.001131         0.001727   \n",
       "Moryella                          0.002000         -0.002293         0.000656   \n",
       "TM7_genera_incertae_sedis         0.001683         -0.002570         0.002232   \n",
       "Staphylococcus                   -0.000161          0.001230        -0.001942   \n",
       "Filifactor                       -0.002486         -0.002071         0.002547   \n",
       "Oribacterium                      0.001932          0.000913         0.000406   \n",
       "Burkholderia                     -0.002496          0.001003         0.001576   \n",
       "Sneathia                         -0.001691         -0.001215        -0.000074   \n",
       "Treponema                        -0.000096          0.000568         0.001119   \n",
       "Moraxella                         0.001188          0.000128        -0.001191   \n",
       "Haemophilus                      -0.000151          0.000232        -0.000724   \n",
       "Selenomonas                       0.001645          0.001228        -0.000172   \n",
       "Corynebacterium                  -0.001526          0.002459         0.000748   \n",
       "Rhizobium                        -0.000714         -0.000324        -0.000889   \n",
       "Bradyrhizobium                    0.000497          0.002102        -0.001444   \n",
       "Methylobacterium                  0.002069         -0.000797        -0.000521   \n",
       "OD1_genera_incertae_sedis        -0.000766         -0.002276        -0.001721   \n",
       "Finegoldia                       -0.002489          0.002529         0.001280   \n",
       "Microbacterium                    0.001643         -0.001693        -0.001191   \n",
       "Sphingomonas                     -0.001222         -0.002386        -0.000714   \n",
       "Chryseobacterium                  0.002146         -0.002139         0.001707   \n",
       "Bacteroides                       0.001271          0.001460         0.002190   \n",
       "Bdellovibrio                      0.000376         -0.001013        -0.001799   \n",
       "Streptophyta                     -0.190269          0.002056         0.001456   \n",
       "Lachnospiracea_incertae_sedis    -0.000044         -0.000072        -0.001244   \n",
       "Paracoccus                       -0.002432          0.159397         0.000647   \n",
       "Fastidiosipila                   -0.001897          0.001389         0.216137   \n",
       "Pseudonocardia                    0.001929         -0.000169        -0.000158   \n",
       "\n",
       "                               Pseudonocardiaceae  \n",
       "Streptococcus                           -0.001486  \n",
       "Tropheryma                              -0.002324  \n",
       "Veillonella                              0.001315  \n",
       "Actinomyces                             -0.000433  \n",
       "Flavobacterium                           0.001618  \n",
       "Prevotella                               0.000388  \n",
       "Porphyromonas                            0.000905  \n",
       "Parvimonas                               0.002050  \n",
       "Fusobacterium                           -0.000579  \n",
       "Propionibacterium                       -0.002420  \n",
       "Gemella                                  0.000701  \n",
       "Rothia                                  -0.002169  \n",
       "Granulicatella                          -0.000799  \n",
       "Neisseria                                0.001910  \n",
       "Lactobacillus                            0.002136  \n",
       "Megasphaera                             -0.000510  \n",
       "Catonella                                0.002511  \n",
       "Atopobium                                0.002378  \n",
       "Campylobacter                            0.000218  \n",
       "Capnocytophaga                           0.002351  \n",
       "Solobacterium                           -0.002114  \n",
       "Moryella                                -0.001884  \n",
       "TM7_genera_incertae_sedis                0.000305  \n",
       "Staphylococcus                          -0.001016  \n",
       "Filifactor                              -0.000419  \n",
       "Oribacterium                            -0.002011  \n",
       "Burkholderia                             0.000500  \n",
       "Sneathia                                 0.000820  \n",
       "Treponema                                0.002332  \n",
       "Moraxella                               -0.000014  \n",
       "Haemophilus                              0.001726  \n",
       "Selenomonas                             -0.001842  \n",
       "Corynebacterium                          0.000668  \n",
       "Rhizobium                                0.001327  \n",
       "Bradyrhizobium                           0.002037  \n",
       "Methylobacterium                         0.001786  \n",
       "OD1_genera_incertae_sedis                0.001907  \n",
       "Finegoldia                               0.000904  \n",
       "Microbacterium                          -0.002426  \n",
       "Sphingomonas                             0.000419  \n",
       "Chryseobacterium                         0.002257  \n",
       "Bacteroides                              0.000485  \n",
       "Bdellovibrio                            -0.001569  \n",
       "Streptophyta                            -0.000697  \n",
       "Lachnospiracea_incertae_sedis            0.001252  \n",
       "Paracoccus                               0.001955  \n",
       "Fastidiosipila                           0.001388  \n",
       "Pseudonocardia                          -0.195752  \n",
       "\n",
       "[48 rows x 40 columns]"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trained_weight_list[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 9. Taxa selection performance\n",
    "\n",
    "If we know the true disease path, we can calculate the taxa selection performance by `deepbiome_taxa_selection_performance` funciton. First, we prepared the true weight list based on the true disease path. For each fold, we prepared 4 weights from the 5 layers (`[genus to family, family to order, order to Class, class to phylum]`). An example of the list of the true weights from each fold is as follow:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|<ipython-input-44-7f16305fbcb7>:2] (5, 4)\n"
     ]
    }
   ],
   "source": [
    "true_tree_weight_list = np.load(resource_filename('deepbiome', 'tests/data/true_weight_list.npy'), allow_pickle=True)\n",
    "log.info(true_tree_weight_list.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The first weight between the genus and family layers for first epoch has the shape below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|<ipython-input-45-7f1406e7d9a7>:1] (48, 40)\n"
     ]
    }
   ],
   "source": [
    "log.info(true_tree_weight_list[0][0].shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1., 0., 0., ..., 0., 0., 0.],\n",
       "       [0., 1., 0., ..., 0., 0., 0.],\n",
       "       [0., 0., 1., ..., 0., 0., 0.],\n",
       "       ...,\n",
       "       [0., 0., 0., ..., 0., 0., 0.],\n",
       "       [0., 0., 0., ..., 0., 1., 0.],\n",
       "       [0., 0., 0., ..., 0., 0., 1.]], dtype=float32)"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "true_tree_weight_list[0][0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will calculate the taxa selection performance of the trained weight below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['./example_result//weight_0.h5',\n",
       " './example_result//weight_1.h5',\n",
       " './example_result//weight_2.h5',\n",
       " './example_result//weight_3.h5',\n",
       " './example_result//weight_4.h5']"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trained_weight_path_list = ['%s/weight_%d.h5' % (prediction_path_info['model_info']['model_dir'], i) for i in range(5)]\n",
    "trained_weight_path_list"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is the summary of the taxa selection accuracy of trained weights from each fold."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n"
     ]
    }
   ],
   "source": [
    "summary = deepbiome.deepbiome_taxa_selection_performance(log, network_info, path_info, num_classes=1, \n",
    "                                                         true_tree_weight_list=true_tree_weight_list, \n",
    "                                                         trained_weight_path_list = trained_weight_path_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>PhyloTree</th>\n",
       "      <th>No. true taxa</th>\n",
       "      <th>No. total taxa</th>\n",
       "      <th>Sensitivity_mean</th>\n",
       "      <th>Sensitivity_std</th>\n",
       "      <th>Specificity_mean</th>\n",
       "      <th>Specificity_std</th>\n",
       "      <th>Gmeasure_mean</th>\n",
       "      <th>Gmeasure_std</th>\n",
       "      <th>Accuracy_mean</th>\n",
       "      <th>Accuracy_std</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>./example_result/</td>\n",
       "      <td>Genus</td>\n",
       "      <td>31</td>\n",
       "      <td>48</td>\n",
       "      <td>0.961290</td>\n",
       "      <td>0.012903</td>\n",
       "      <td>0.986342</td>\n",
       "      <td>0.005351</td>\n",
       "      <td>0.973702</td>\n",
       "      <td>0.005933</td>\n",
       "      <td>0.985938</td>\n",
       "      <td>0.005177</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td></td>\n",
       "      <td>Family</td>\n",
       "      <td>23</td>\n",
       "      <td>40</td>\n",
       "      <td>0.991304</td>\n",
       "      <td>0.017391</td>\n",
       "      <td>0.977703</td>\n",
       "      <td>0.007259</td>\n",
       "      <td>0.984468</td>\n",
       "      <td>0.012305</td>\n",
       "      <td>0.978043</td>\n",
       "      <td>0.007512</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td></td>\n",
       "      <td>Order</td>\n",
       "      <td>9</td>\n",
       "      <td>23</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.956021</td>\n",
       "      <td>0.010653</td>\n",
       "      <td>0.977748</td>\n",
       "      <td>0.005460</td>\n",
       "      <td>0.957033</td>\n",
       "      <td>0.010408</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td></td>\n",
       "      <td>Class</td>\n",
       "      <td>7</td>\n",
       "      <td>17</td>\n",
       "      <td>0.971429</td>\n",
       "      <td>0.057143</td>\n",
       "      <td>0.931507</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.950827</td>\n",
       "      <td>0.028638</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.002614</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Model PhyloTree No. true taxa No. total taxa  Sensitivity_mean  \\\n",
       "0  ./example_result/     Genus            31             48          0.961290   \n",
       "1                       Family            23             40          0.991304   \n",
       "2                        Order             9             23          1.000000   \n",
       "3                        Class             7             17          0.971429   \n",
       "\n",
       "   Sensitivity_std  Specificity_mean  Specificity_std  Gmeasure_mean  \\\n",
       "0         0.012903          0.986342         0.005351       0.973702   \n",
       "1         0.017391          0.977703         0.007259       0.984468   \n",
       "2         0.000000          0.956021         0.010653       0.977748   \n",
       "3         0.057143          0.931507         0.000000       0.950827   \n",
       "\n",
       "   Gmeasure_std  Accuracy_mean  Accuracy_std  \n",
       "0      0.005933       0.985938      0.005177  \n",
       "1      0.012305       0.978043      0.007512  \n",
       "2      0.005460       0.957033      0.010408  \n",
       "3      0.028638       0.933333      0.002614  "
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "summary"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 10. Draw phylogenetic tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "phylumn_color = ['lightsteelblue', \n",
    "                 'moccasin',\n",
    "                 'darkseagreen',\n",
    "                 'khaki',\n",
    "                 'mediumturquoise',\n",
    "                 'lightblue',\n",
    "                 'thistle',\n",
    "                 'tan',\n",
    "                 'mistyrose',\n",
    "                ]\n",
    "\n",
    "deepbiome.deepbiome_draw_phylogenetic_tree(log, network_info, path_info, num_classes=1,\n",
    "                                 file_name='%%inline', img_w=500, branch_vertical_margin=20, arc_start=0, arc_span=360, \n",
    "                                 node_name_on=False, name_fsize=50, \n",
    "                                 tree_weight_on=True, tree_weight=trained_weight_list[:4],\n",
    "                                 weight_opacity=0.8, weight_max_radios=20, \n",
    "                                 background_color_on=True, phylumn_color=phylumn_color)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### With name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n"
     ]
    },
    {
     "data": {
      "image/png": "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\nSUVORK5CYII=\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "deepbiome.deepbiome_draw_phylogenetic_tree(log, network_info, path_info, num_classes=1,\n",
    "                                 file_name='%%inline', img_w=500, branch_vertical_margin=20, arc_start=0, arc_span=360, \n",
    "                                 node_name_on=True, name_fsize=30, \n",
    "                                 tree_weight_on=True, tree_weight=trained_weight_list[:4],\n",
    "                                 weight_opacity=0.8, weight_max_radios=20, \n",
    "                                 background_color_on=True, phylumn_color=phylumn_color)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 11. Using covariates\n",
    "\n",
    "We can use covariates for training the DeepBiome network."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below is an example of the input files for the continuous covariates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ages</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>59.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>45.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>42.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>50.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>69.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>37.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>66.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>75.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>32.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>72.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>65.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>58.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>41.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>49.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>49.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>70.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>64.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>33.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>74.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>56.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>37.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>51.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>34.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>46.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>44.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>60.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>46.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>37.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>58.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>970</th>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>971</th>\n",
       "      <td>78.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>972</th>\n",
       "      <td>32.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>973</th>\n",
       "      <td>62.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>974</th>\n",
       "      <td>47.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>975</th>\n",
       "      <td>47.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>976</th>\n",
       "      <td>65.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>977</th>\n",
       "      <td>68.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>978</th>\n",
       "      <td>45.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>979</th>\n",
       "      <td>43.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>980</th>\n",
       "      <td>31.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>981</th>\n",
       "      <td>45.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>982</th>\n",
       "      <td>64.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>983</th>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>984</th>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>985</th>\n",
       "      <td>59.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>986</th>\n",
       "      <td>78.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>987</th>\n",
       "      <td>49.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>988</th>\n",
       "      <td>33.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>989</th>\n",
       "      <td>60.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>990</th>\n",
       "      <td>48.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991</th>\n",
       "      <td>75.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>992</th>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>993</th>\n",
       "      <td>39.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>994</th>\n",
       "      <td>49.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>71.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>34.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>48.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>52.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     ages\n",
       "0    59.0\n",
       "1    45.0\n",
       "2    42.0\n",
       "3    50.0\n",
       "4    69.0\n",
       "5    37.0\n",
       "6    66.0\n",
       "7    75.0\n",
       "8    32.0\n",
       "9    72.0\n",
       "10   65.0\n",
       "11   58.0\n",
       "12   41.0\n",
       "13   49.0\n",
       "14   49.0\n",
       "15   70.0\n",
       "16   64.0\n",
       "17   33.0\n",
       "18   74.0\n",
       "19   56.0\n",
       "20   37.0\n",
       "21   38.0\n",
       "22   51.0\n",
       "23   34.0\n",
       "24   46.0\n",
       "25   44.0\n",
       "26   60.0\n",
       "27   46.0\n",
       "28   37.0\n",
       "29   58.0\n",
       "..    ...\n",
       "970  38.0\n",
       "971  78.0\n",
       "972  32.0\n",
       "973  62.0\n",
       "974  47.0\n",
       "975  47.0\n",
       "976  65.0\n",
       "977  68.0\n",
       "978  45.0\n",
       "979  43.0\n",
       "980  31.0\n",
       "981  45.0\n",
       "982  64.0\n",
       "983  36.0\n",
       "984  36.0\n",
       "985  59.0\n",
       "986  78.0\n",
       "987  49.0\n",
       "988  33.0\n",
       "989  60.0\n",
       "990  48.0\n",
       "991  75.0\n",
       "992  38.0\n",
       "993  39.0\n",
       "994  49.0\n",
       "995  71.0\n",
       "996  34.0\n",
       "997  48.0\n",
       "998  38.0\n",
       "999  52.0\n",
       "\n",
       "[1000 rows x 1 columns]"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_csv(resource_filename('deepbiome', 'tests/data/ages.csv'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below is an example of the input files for the categorical covariates. We assume that the file contains all of the catetogories for one-hot encoding."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>970</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>971</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>972</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>973</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>974</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>975</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>976</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>977</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>978</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>979</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>980</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>981</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>982</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>983</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>984</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>985</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>986</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>987</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>988</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>989</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>990</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>992</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>993</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>994</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     gender\n",
       "0         1\n",
       "1         0\n",
       "2         1\n",
       "3         1\n",
       "4         1\n",
       "5         0\n",
       "6         1\n",
       "7         1\n",
       "8         0\n",
       "9         0\n",
       "10        0\n",
       "11        1\n",
       "12        0\n",
       "13        1\n",
       "14        1\n",
       "15        1\n",
       "16        0\n",
       "17        0\n",
       "18        1\n",
       "19        1\n",
       "20        0\n",
       "21        0\n",
       "22        1\n",
       "23        0\n",
       "24        1\n",
       "25        0\n",
       "26        0\n",
       "27        0\n",
       "28        1\n",
       "29        1\n",
       "..      ...\n",
       "970       1\n",
       "971       1\n",
       "972       0\n",
       "973       1\n",
       "974       0\n",
       "975       1\n",
       "976       0\n",
       "977       1\n",
       "978       1\n",
       "979       1\n",
       "980       1\n",
       "981       1\n",
       "982       0\n",
       "983       0\n",
       "984       0\n",
       "985       1\n",
       "986       0\n",
       "987       0\n",
       "988       1\n",
       "989       0\n",
       "990       0\n",
       "991       1\n",
       "992       1\n",
       "993       1\n",
       "994       0\n",
       "995       0\n",
       "996       0\n",
       "997       1\n",
       "998       0\n",
       "999       1\n",
       "\n",
       "[1000 rows x 1 columns]"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_csv(resource_filename('deepbiome', 'tests/data/gender.csv'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ethnicity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>970</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>971</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>972</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>973</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>974</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>975</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>976</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>977</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>978</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>979</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>980</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>981</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>982</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>983</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>984</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>985</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>986</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>987</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>988</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>989</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>990</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>992</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>993</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>994</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     ethnicity\n",
       "0            4\n",
       "1            0\n",
       "2            0\n",
       "3            4\n",
       "4            4\n",
       "5            2\n",
       "6            3\n",
       "7            0\n",
       "8            2\n",
       "9            5\n",
       "10           2\n",
       "11           3\n",
       "12           5\n",
       "13           3\n",
       "14           0\n",
       "15           0\n",
       "16           4\n",
       "17           5\n",
       "18           1\n",
       "19           1\n",
       "20           4\n",
       "21           4\n",
       "22           1\n",
       "23           0\n",
       "24           1\n",
       "25           3\n",
       "26           1\n",
       "27           4\n",
       "28           4\n",
       "29           3\n",
       "..         ...\n",
       "970          1\n",
       "971          0\n",
       "972          0\n",
       "973          5\n",
       "974          3\n",
       "975          2\n",
       "976          1\n",
       "977          5\n",
       "978          4\n",
       "979          1\n",
       "980          0\n",
       "981          3\n",
       "982          3\n",
       "983          5\n",
       "984          5\n",
       "985          5\n",
       "986          3\n",
       "987          1\n",
       "988          2\n",
       "989          2\n",
       "990          0\n",
       "991          5\n",
       "992          3\n",
       "993          5\n",
       "994          5\n",
       "995          2\n",
       "996          2\n",
       "997          1\n",
       "998          0\n",
       "999          0\n",
       "\n",
       "[1000 rows x 1 columns]"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_csv(resource_filename('deepbiome', 'tests/data/ethnicity.csv'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For using the covariates, we have to set the `covariates_info` field in the configuration for the path informations. If we don't specify the `covariates_info`, than the DeepBiome will train the model without any covariates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "network_info_with_covariates = {\n",
    "    'architecture_info': {\n",
    "        'batch_normalization': 'False',\n",
    "        'drop_out': '0',\n",
    "        'weight_initial': 'glorot_uniform',\n",
    "        'weight_l1_penalty':'0.',\n",
    "        'weight_decay': 'phylogenetic_tree',\n",
    "    },\n",
    "    'model_info': {\n",
    "        'lr': '0.01',\n",
    "        'decay': '0.001',\n",
    "        'loss': 'binary_crossentropy',\n",
    "        'metrics': 'binary_accuracy, sensitivity, specificity, gmeasure',\n",
    "        'taxa_selection_metrics': 'sensitivity, specificity, gmeasure, accuracy',\n",
    "        'network_class': 'DeepBiomeNetwork',\n",
    "        'optimizer': 'adam',\n",
    "        'reader_class': 'MicroBiomeClassificationReader',\n",
    "        'normalizer': 'normalize_minmax',\n",
    "    },\n",
    "    'training_info': {\n",
    "        'epochs': '10',\n",
    "        'batch_size': '50', \n",
    "        'callbacks': 'ModelCheckpoint',\n",
    "        'monitor': 'val_loss',\n",
    "        'mode' : 'min',\n",
    "        'min_delta': '1e-7',\n",
    "    },\n",
    "    'validation_info': {\n",
    "        'batch_size': 'None', \n",
    "        'validation_size': '0.2'\n",
    "    },\n",
    "    'test_info': {\n",
    "        'batch_size': 'None'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "path_info_with_covariates = {\n",
    "    'data_info': {\n",
    "        'data_path': resource_filename('deepbiome', 'tests/data'),\n",
    "        'idx_path': resource_filename('deepbiome', 'tests/data/onefile_idx.csv'),\n",
    "        'tree_info_path': resource_filename('deepbiome', 'tests/data/genus48_dic.csv'),\n",
    "        'x_path': 'onefile_x.csv',\n",
    "        'y_path': 'classification_y.csv'\n",
    "    },\n",
    "    'model_info': {\n",
    "        'evaluation': 'eval.npy',\n",
    "        'history': 'hist.json',\n",
    "        'model_dir': './example_result/',\n",
    "        'weight': 'weight.h5'\n",
    "    },\n",
    "    'covariates_info':{\n",
    "#         'continuous_variables':'ages.csv, weights.csv',\n",
    "#         'categorical_variables':'gender.csv, ethnicity.csv',\n",
    "        'continuous_variables':','.join([resource_filename('deepbiome', 'tests/data/ages.csv'),\n",
    "                                         resource_filename('deepbiome', 'tests/data/weights.csv')]),\n",
    "        'categorical_variables':','.join([resource_filename('deepbiome', 'tests/data/gender.csv'),\n",
    "                                         resource_filename('deepbiome', 'tests/data/ethnicity.csv')]),\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can use the same `deepbiome_train` function when we train the network with covariates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:105] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:143] -------1 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:153] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:154] Build network for 1 simulation\n",
      "[root    |INFO|build_network.py:508] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:514] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:515] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:522]      Genus: 48\n",
      "[root    |INFO|build_network.py:522]     Family: 40\n",
      "[root    |INFO|build_network.py:522]      Order: 23\n",
      "[root    |INFO|build_network.py:522]      Class: 17\n",
      "[root    |INFO|build_network.py:522]     Phylum: 9\n",
      "[root    |INFO|build_network.py:526] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:527] Phylogenetic_tree_dict info: ['Genus', 'Family', 'Phylum', 'Number', 'Class', 'Order']\n",
      "[root    |INFO|build_network.py:528] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:551] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:559] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:561] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:643] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_3\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input (InputLayer)              (None, 48)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "l1_dense (Dense_with_tree)      (None, 40)           1960        input[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "l1_activation (Activation)      (None, 40)           0           l1_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l2_dense (Dense_with_tree)      (None, 23)           943         l1_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l2_activation (Activation)      (None, 23)           0           l2_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l3_dense (Dense_with_tree)      (None, 17)           408         l2_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l3_activation (Activation)      (None, 17)           0           l3_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l4_dense (Dense_with_tree)      (None, 9)            162         l3_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l4_activation (Activation)      (None, 9)            0           l4_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "covariates_input (InputLayer)   (None, 10)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "biome_covariates_concat (Concat (None, 19)           0           l4_activation[0][0]              \n",
      "                                                                 covariates_input[0][0]           \n",
      "__________________________________________________________________________________________________\n",
      "last_dense_h (Dense)            (None, 1)            20          biome_covariates_concat[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "p_hat (Activation)              (None, 1)            0           last_dense_h[0][0]               \n",
      "==================================================================================================\n",
      "Total params: 3,493\n",
      "Trainable params: 3,493\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:164] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:165] 1 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:133] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 810us/step - loss: 11.0308 - binary_accuracy: 0.3156 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 143us/step - loss: 11.0308 - binary_accuracy: 0.3156 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 151us/step - loss: 11.0308 - binary_accuracy: 0.3156 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 11.0308 - binary_accuracy: 0.3156 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 149us/step - loss: 11.0308 - binary_accuracy: 0.3156 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 147us/step - loss: 11.0308 - binary_accuracy: 0.3156 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 11.0308 - binary_accuracy: 0.3156 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 11.0308 - binary_accuracy: 0.3156 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 142us/step - loss: 11.0308 - binary_accuracy: 0.3156 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 11.0308 - binary_accuracy: 0.3156 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:83] Load trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |INFO|build_network.py:143] Training end with time 3.009403944015503!\n",
      "[root    |INFO|build_network.py:79] Saved trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |DEBUG|deepbiome.py:173] Save weight at ./example_result/weight_0.h5\n",
      "[root    |DEBUG|deepbiome.py:176] Save history at ./example_result/hist_0.json\n",
      "[root    |INFO|build_network.py:169] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 4us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:174] Evaluation end with time 0.009022235870361328!\n",
      "[root    |INFO|build_network.py:175] Evaluation: [11.061043739318848, 0.3137499988079071, 0.0, 1.0, 0.0]\n",
      "[root    |INFO|build_network.py:169] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 10us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:174] Evaluation end with time 0.007338762283325195!\n",
      "[root    |INFO|build_network.py:175] Evaluation: [11.121485710144043, 0.3100000023841858, 0.0, 1.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:187] Compute time : 3.9766945838928223\n",
      "[root    |INFO|deepbiome.py:188] 1 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:143] -------2 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:153] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:154] Build network for 2 simulation\n",
      "[root    |INFO|build_network.py:508] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:514] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:515] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:522]      Genus: 48\n",
      "[root    |INFO|build_network.py:522]     Family: 40\n",
      "[root    |INFO|build_network.py:522]      Order: 23\n",
      "[root    |INFO|build_network.py:522]      Class: 17\n",
      "[root    |INFO|build_network.py:522]     Phylum: 9\n",
      "[root    |INFO|build_network.py:526] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:527] Phylogenetic_tree_dict info: ['Genus', 'Family', 'Phylum', 'Number', 'Class', 'Order']\n",
      "[root    |INFO|build_network.py:528] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:551] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:559] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:561] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:643] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input (InputLayer)              (None, 48)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "l1_dense (Dense_with_tree)      (None, 40)           1960        input[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "l1_activation (Activation)      (None, 40)           0           l1_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l2_dense (Dense_with_tree)      (None, 23)           943         l1_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l2_activation (Activation)      (None, 23)           0           l2_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l3_dense (Dense_with_tree)      (None, 17)           408         l2_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l3_activation (Activation)      (None, 17)           0           l3_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l4_dense (Dense_with_tree)      (None, 9)            162         l3_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l4_activation (Activation)      (None, 9)            0           l4_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "covariates_input (InputLayer)   (None, 10)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "biome_covariates_concat (Concat (None, 19)           0           l4_activation[0][0]              \n",
      "                                                                 covariates_input[0][0]           \n",
      "__________________________________________________________________________________________________\n",
      "last_dense_h (Dense)            (None, 1)            20          biome_covariates_concat[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "p_hat (Activation)              (None, 1)            0           last_dense_h[0][0]               \n",
      "==================================================================================================\n",
      "Total params: 3,493\n",
      "Trainable params: 3,493\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:164] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:165] 2 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:133] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 843us/step - loss: 1.9148 - binary_accuracy: 0.5203 - sensitivity: 0.5105 - specificity: 0.5064 - gmeasure: 0.0631 - val_loss: 1.2839 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 150us/step - loss: 1.0652 - binary_accuracy: 0.7156 - sensitivity: 0.9973 - specificity: 0.0070 - gmeasure: 0.0228 - val_loss: 0.6727 - val_binary_accuracy: 0.5875 - val_sensitivity: 0.7296 - val_specificity: 0.2066 - val_gmeasure: 0.3769\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 0.7589 - binary_accuracy: 0.5469 - sensitivity: 0.5821 - specificity: 0.4590 - gmeasure: 0.3533 - val_loss: 0.6633 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.6766 - binary_accuracy: 0.6922 - sensitivity: 0.9532 - specificity: 0.0145 - gmeasure: 0.0405 - val_loss: 0.6567 - val_binary_accuracy: 0.6062 - val_sensitivity: 0.7499 - val_specificity: 0.2066 - val_gmeasure: 0.3814\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 0.6846 - binary_accuracy: 0.6531 - sensitivity: 0.8653 - specificity: 0.1376 - gmeasure: 0.2025 - val_loss: 0.6228 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 145us/step - loss: 0.6345 - binary_accuracy: 0.6500 - sensitivity: 0.8845 - specificity: 0.0487 - gmeasure: 0.1314 - val_loss: 0.5990 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9504 - val_specificity: 0.0227 - val_gmeasure: 0.0754\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.6453 - binary_accuracy: 0.6969 - sensitivity: 0.9651 - specificity: 0.0316 - gmeasure: 0.0766 - val_loss: 0.6403 - val_binary_accuracy: 0.6375 - val_sensitivity: 0.8127 - val_specificity: 0.2066 - val_gmeasure: 0.3991\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 150us/step - loss: 0.6182 - binary_accuracy: 0.7016 - sensitivity: 0.9524 - specificity: 0.0559 - gmeasure: 0.1488 - val_loss: 0.6042 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.6218 - binary_accuracy: 0.7141 - sensitivity: 0.9959 - specificity: 0.0077 - gmeasure: 0.0243 - val_loss: 0.5940 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 143us/step - loss: 0.6116 - binary_accuracy: 0.7141 - sensitivity: 0.9960 - specificity: 0.0038 - gmeasure: 0.0172 - val_loss: 0.5905 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:83] Load trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |INFO|build_network.py:143] Training end with time 3.261338472366333!\n",
      "[root    |INFO|build_network.py:79] Saved trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |DEBUG|deepbiome.py:173] Save weight at ./example_result/weight_1.h5\n",
      "[root    |DEBUG|deepbiome.py:176] Save history at ./example_result/hist_1.json\n",
      "[root    |INFO|build_network.py:169] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:174] Evaluation end with time 0.008616924285888672!\n",
      "[root    |INFO|build_network.py:175] Evaluation: [0.6094632148742676, 0.7200000286102295, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:169] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 12us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:174] Evaluation end with time 0.007965564727783203!\n",
      "[root    |INFO|build_network.py:175] Evaluation: [0.6092787384986877, 0.7200000286102295, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:187] Compute time : 4.325320720672607\n",
      "[root    |INFO|deepbiome.py:188] 2 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:143] -------3 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:153] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:154] Build network for 3 simulation\n",
      "[root    |INFO|build_network.py:508] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:514] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:515] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:522]      Genus: 48\n",
      "[root    |INFO|build_network.py:522]     Family: 40\n",
      "[root    |INFO|build_network.py:522]      Order: 23\n",
      "[root    |INFO|build_network.py:522]      Class: 17\n",
      "[root    |INFO|build_network.py:522]     Phylum: 9\n",
      "[root    |INFO|build_network.py:526] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:527] Phylogenetic_tree_dict info: ['Genus', 'Family', 'Phylum', 'Number', 'Class', 'Order']\n",
      "[root    |INFO|build_network.py:528] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:551] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:559] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:561] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:643] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input (InputLayer)              (None, 48)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "l1_dense (Dense_with_tree)      (None, 40)           1960        input[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "l1_activation (Activation)      (None, 40)           0           l1_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l2_dense (Dense_with_tree)      (None, 23)           943         l1_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l2_activation (Activation)      (None, 23)           0           l2_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l3_dense (Dense_with_tree)      (None, 17)           408         l2_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l3_activation (Activation)      (None, 17)           0           l3_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l4_dense (Dense_with_tree)      (None, 9)            162         l3_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l4_activation (Activation)      (None, 9)            0           l4_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "covariates_input (InputLayer)   (None, 10)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "biome_covariates_concat (Concat (None, 19)           0           l4_activation[0][0]              \n",
      "                                                                 covariates_input[0][0]           \n",
      "__________________________________________________________________________________________________\n",
      "last_dense_h (Dense)            (None, 1)            20          biome_covariates_concat[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "p_hat (Activation)              (None, 1)            0           last_dense_h[0][0]               \n",
      "==================================================================================================\n",
      "Total params: 3,493\n",
      "Trainable params: 3,493\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:164] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:165] 3 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:133] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 916us/step - loss: 4.8325 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.7827 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 156us/step - loss: 4.8325 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.7827 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 4.8325 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.7827 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 140us/step - loss: 4.8325 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.7827 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 140us/step - loss: 4.8325 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.7827 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 153us/step - loss: 4.8325 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.7827 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 151us/step - loss: 4.8325 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.7827 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 148us/step - loss: 4.8325 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.7827 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 145us/step - loss: 4.8325 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.7827 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 146us/step - loss: 4.8325 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.7827 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:83] Load trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |INFO|build_network.py:143] Training end with time 2.9785048961639404!\n",
      "[root    |INFO|build_network.py:79] Saved trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |DEBUG|deepbiome.py:173] Save weight at ./example_result/weight_2.h5\n",
      "[root    |DEBUG|deepbiome.py:176] Save history at ./example_result/hist_2.json\n",
      "[root    |INFO|build_network.py:169] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "800/800 [==============================] - 0s 4us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:174] Evaluation end with time 0.009859085083007812!\n",
      "[root    |INFO|build_network.py:175] Evaluation: [4.822571277618408, 0.6974999904632568, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:169] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 12us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:174] Evaluation end with time 0.007889270782470703!\n",
      "[root    |INFO|build_network.py:175] Evaluation: [5.500122547149658, 0.6549999713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:187] Compute time : 4.153483629226685\n",
      "[root    |INFO|deepbiome.py:188] 3 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:143] -------4 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:153] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:154] Build network for 4 simulation\n",
      "[root    |INFO|build_network.py:508] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:514] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:515] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:522]      Genus: 48\n",
      "[root    |INFO|build_network.py:522]     Family: 40\n",
      "[root    |INFO|build_network.py:522]      Order: 23\n",
      "[root    |INFO|build_network.py:522]      Class: 17\n",
      "[root    |INFO|build_network.py:522]     Phylum: 9\n",
      "[root    |INFO|build_network.py:526] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:527] Phylogenetic_tree_dict info: ['Genus', 'Family', 'Phylum', 'Number', 'Class', 'Order']\n",
      "[root    |INFO|build_network.py:528] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:551] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:559] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:561] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:643] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input (InputLayer)              (None, 48)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "l1_dense (Dense_with_tree)      (None, 40)           1960        input[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "l1_activation (Activation)      (None, 40)           0           l1_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l2_dense (Dense_with_tree)      (None, 23)           943         l1_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l2_activation (Activation)      (None, 23)           0           l2_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l3_dense (Dense_with_tree)      (None, 17)           408         l2_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l3_activation (Activation)      (None, 17)           0           l3_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l4_dense (Dense_with_tree)      (None, 9)            162         l3_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l4_activation (Activation)      (None, 9)            0           l4_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "covariates_input (InputLayer)   (None, 10)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "biome_covariates_concat (Concat (None, 19)           0           l4_activation[0][0]              \n",
      "                                                                 covariates_input[0][0]           \n",
      "__________________________________________________________________________________________________\n",
      "last_dense_h (Dense)            (None, 1)            20          biome_covariates_concat[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "p_hat (Activation)              (None, 1)            0           last_dense_h[0][0]               \n",
      "==================================================================================================\n",
      "Total params: 3,493\n",
      "Trainable params: 3,493\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:164] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:165] 4 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:133] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 908us/step - loss: 1.6495 - binary_accuracy: 0.5703 - sensitivity: 0.7026 - specificity: 0.2746 - gmeasure: 0.4308 - val_loss: 1.0652 - val_binary_accuracy: 0.6000 - val_sensitivity: 0.7105 - val_specificity: 0.2953 - val_gmeasure: 0.4482\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 149us/step - loss: 1.0420 - binary_accuracy: 0.5891 - sensitivity: 0.7264 - specificity: 0.2926 - gmeasure: 0.4521 - val_loss: 0.7023 - val_binary_accuracy: 0.6313 - val_sensitivity: 0.8108 - val_specificity: 0.2365 - val_gmeasure: 0.4346\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6861 - binary_accuracy: 0.6344 - sensitivity: 0.8882 - specificity: 0.0981 - gmeasure: 0.2289 - val_loss: 0.6272 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6433 - binary_accuracy: 0.6609 - sensitivity: 0.9256 - specificity: 0.0836 - gmeasure: 0.1865 - val_loss: 0.6574 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 150us/step - loss: 0.6345 - binary_accuracy: 0.6516 - sensitivity: 0.9006 - specificity: 0.0962 - gmeasure: 0.1610 - val_loss: 0.6395 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 145us/step - loss: 0.6293 - binary_accuracy: 0.6828 - sensitivity: 0.9875 - specificity: 0.0189 - gmeasure: 0.0517 - val_loss: 0.6349 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6277 - binary_accuracy: 0.6844 - sensitivity: 0.9910 - specificity: 0.0154 - gmeasure: 0.0329 - val_loss: 0.6203 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6460 - binary_accuracy: 0.6734 - sensitivity: 0.9756 - specificity: 0.0246 - gmeasure: 0.0686 - val_loss: 0.6315 - val_binary_accuracy: 0.6750 - val_sensitivity: 0.9490 - val_specificity: 0.1336 - val_gmeasure: 0.3409\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.6331 - binary_accuracy: 0.6641 - sensitivity: 0.9326 - specificity: 0.0877 - gmeasure: 0.1501 - val_loss: 0.6339 - val_binary_accuracy: 0.6687 - val_sensitivity: 0.9358 - val_specificity: 0.1544 - val_gmeasure: 0.3598\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.6209 - binary_accuracy: 0.6844 - sensitivity: 0.9740 - specificity: 0.0641 - gmeasure: 0.1290 - val_loss: 0.6111 - val_binary_accuracy: 0.6875 - val_sensitivity: 0.9934 - val_specificity: 0.0147 - val_gmeasure: 0.0606\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:83] Load trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |INFO|build_network.py:143] Training end with time 3.1816039085388184!\n",
      "[root    |INFO|build_network.py:79] Saved trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |DEBUG|deepbiome.py:173] Save weight at ./example_result/weight_3.h5\n",
      "[root    |DEBUG|deepbiome.py:176] Save history at ./example_result/hist_3.json\n",
      "[root    |INFO|build_network.py:169] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 4us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:174] Evaluation end with time 0.010124683380126953!\n",
      "[root    |INFO|build_network.py:175] Evaluation: [0.6080161333084106, 0.6875, 0.9981784820556641, 0.007968127727508545, 0.08918303996324539]\n",
      "[root    |INFO|build_network.py:169] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 11us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:174] Evaluation end with time 0.007972240447998047!\n",
      "[root    |INFO|build_network.py:175] Evaluation: [0.5975711345672607, 0.6899999976158142, 0.9927536249160767, 0.016129031777381897, 0.12653914093971252]\n",
      "[root    |INFO|deepbiome.py:187] Compute time : 4.379457712173462\n",
      "[root    |INFO|deepbiome.py:188] 4 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:143] -------5 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:153] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:154] Build network for 5 simulation\n",
      "[root    |INFO|build_network.py:508] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:514] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:515] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:522]      Genus: 48\n",
      "[root    |INFO|build_network.py:522]     Family: 40\n",
      "[root    |INFO|build_network.py:522]      Order: 23\n",
      "[root    |INFO|build_network.py:522]      Class: 17\n",
      "[root    |INFO|build_network.py:522]     Phylum: 9\n",
      "[root    |INFO|build_network.py:526] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:527] Phylogenetic_tree_dict info: ['Genus', 'Family', 'Phylum', 'Number', 'Class', 'Order']\n",
      "[root    |INFO|build_network.py:528] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:538] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:551] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:559] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:561] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:643] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input (InputLayer)              (None, 48)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "l1_dense (Dense_with_tree)      (None, 40)           1960        input[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "l1_activation (Activation)      (None, 40)           0           l1_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l2_dense (Dense_with_tree)      (None, 23)           943         l1_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l2_activation (Activation)      (None, 23)           0           l2_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l3_dense (Dense_with_tree)      (None, 17)           408         l2_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l3_activation (Activation)      (None, 17)           0           l3_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l4_dense (Dense_with_tree)      (None, 9)            162         l3_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l4_activation (Activation)      (None, 9)            0           l4_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "covariates_input (InputLayer)   (None, 10)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "biome_covariates_concat (Concat (None, 19)           0           l4_activation[0][0]              \n",
      "                                                                 covariates_input[0][0]           \n",
      "__________________________________________________________________________________________________\n",
      "last_dense_h (Dense)            (None, 1)            20          biome_covariates_concat[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "p_hat (Activation)              (None, 1)            0           last_dense_h[0][0]               \n",
      "==================================================================================================\n",
      "Total params: 3,493\n",
      "Trainable params: 3,493\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:164] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:165] 5 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:133] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 843us/step - loss: 2.9015 - binary_accuracy: 0.6109 - sensitivity: 0.7831 - specificity: 0.2555 - gmeasure: 0.4256 - val_loss: 2.3664 - val_binary_accuracy: 0.5688 - val_sensitivity: 0.7015 - val_specificity: 0.3409 - val_gmeasure: 0.4881\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 152us/step - loss: 2.4875 - binary_accuracy: 0.5797 - sensitivity: 0.6586 - specificity: 0.4142 - gmeasure: 0.5203 - val_loss: 1.8994 - val_binary_accuracy: 0.6062 - val_sensitivity: 0.7577 - val_specificity: 0.3097 - val_gmeasure: 0.4812\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 147us/step - loss: 1.8766 - binary_accuracy: 0.6062 - sensitivity: 0.7125 - specificity: 0.3977 - gmeasure: 0.5138 - val_loss: 1.3987 - val_binary_accuracy: 0.5625 - val_sensitivity: 0.6805 - val_specificity: 0.3722 - val_gmeasure: 0.5012\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 133us/step - loss: 1.3658 - binary_accuracy: 0.5688 - sensitivity: 0.6663 - specificity: 0.3665 - gmeasure: 0.4779 - val_loss: 1.0831 - val_binary_accuracy: 0.6375 - val_sensitivity: 0.8945 - val_specificity: 0.1400 - val_gmeasure: 0.3394\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 143us/step - loss: 0.9386 - binary_accuracy: 0.5875 - sensitivity: 0.6956 - specificity: 0.3604 - gmeasure: 0.4820 - val_loss: 0.7296 - val_binary_accuracy: 0.6375 - val_sensitivity: 0.8155 - val_specificity: 0.2571 - val_gmeasure: 0.4473\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 0.6969 - binary_accuracy: 0.6328 - sensitivity: 0.8065 - specificity: 0.2542 - gmeasure: 0.4119 - val_loss: 0.6731 - val_binary_accuracy: 0.5875 - val_sensitivity: 0.5952 - val_specificity: 0.4752 - val_gmeasure: 0.5161\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 147us/step - loss: 0.6475 - binary_accuracy: 0.6625 - sensitivity: 0.9408 - specificity: 0.0823 - gmeasure: 0.1356 - val_loss: 0.6158 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0156 - val_gmeasure: 0.0625\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6443 - binary_accuracy: 0.6594 - sensitivity: 0.9675 - specificity: 0.0099 - gmeasure: 0.0364 - val_loss: 0.6113 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 136us/step - loss: 0.6302 - binary_accuracy: 0.6781 - sensitivity: 0.9980 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6119 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 145us/step - loss: 0.6286 - binary_accuracy: 0.6828 - sensitivity: 0.9913 - specificity: 0.0300 - gmeasure: 0.1049 - val_loss: 0.6139 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:83] Load trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |INFO|build_network.py:143] Training end with time 3.2617533206939697!\n",
      "[root    |INFO|build_network.py:79] Saved trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |DEBUG|deepbiome.py:173] Save weight at ./example_result/weight_4.h5\n",
      "[root    |DEBUG|deepbiome.py:176] Save history at ./example_result/hist_4.json\n",
      "[root    |INFO|build_network.py:169] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:174] Evaluation end with time 0.008570671081542969!\n",
      "[root    |INFO|build_network.py:175] Evaluation: [0.62502521276474, 0.6825000047683716, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:169] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 11us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:174] Evaluation end with time 0.007973432540893555!\n",
      "[root    |INFO|build_network.py:175] Evaluation: [0.6031255722045898, 0.7049999833106995, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:187] Compute time : 4.410266160964966\n",
      "[root    |INFO|deepbiome.py:188] 5 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:191] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:193] Train Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure']\n",
      "[root    |INFO|deepbiome.py:196]       mean : [3.54522392 0.62025    0.7996357  0.20159363 0.01783661]\n",
      "[root    |INFO|deepbiome.py:197]        std : [4.09615929 0.15379045 0.39981847 0.39921512 0.03567322]\n",
      "[root    |INFO|deepbiome.py:198] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:200] Test Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure']\n",
      "[root    |INFO|deepbiome.py:203]       mean : [3.68631674 0.616      0.79855072 0.20322581 0.02530783]\n",
      "[root    |INFO|deepbiome.py:204]        std : [4.17339692 0.15451213 0.39928523 0.39843607 0.05061566]\n",
      "[root    |INFO|deepbiome.py:205] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:214] Total Computing Ended\n",
      "[root    |INFO|deepbiome.py:215] -----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "test_evaluation_with_cov, train_evaluation_with_cov, network_with_cov = deepbiome.deepbiome_train(log, network_info_with_covariates, \n",
    "                                                                                                  path_info_with_covariates,\n",
    "                                                                                                  number_of_fold=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The DeepBiome used the covariates at the latest hidden layer just before the last prediction layer (`biome_covariates_concat` layer in the above example)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input (InputLayer)              (None, 48)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "l1_dense (Dense_with_tree)      (None, 40)           1960        input[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "l1_activation (Activation)      (None, 40)           0           l1_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l2_dense (Dense_with_tree)      (None, 23)           943         l1_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l2_activation (Activation)      (None, 23)           0           l2_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l3_dense (Dense_with_tree)      (None, 17)           408         l2_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l3_activation (Activation)      (None, 17)           0           l3_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l4_dense (Dense_with_tree)      (None, 9)            162         l3_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l4_activation (Activation)      (None, 9)            0           l4_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "covariates_input (InputLayer)   (None, 10)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "biome_covariates_concat (Concat (None, 19)           0           l4_activation[0][0]              \n",
      "                                                                 covariates_input[0][0]           \n",
      "__________________________________________________________________________________________________\n",
      "last_dense_h (Dense)            (None, 1)            20          biome_covariates_concat[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "p_hat (Activation)              (None, 1)            0           last_dense_h[0][0]               \n",
      "==================================================================================================\n",
      "Total params: 3,493\n",
      "Trainable params: 3,493\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "network_with_cov.model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can analysis the effects of covariates by checking the trained weights of the last hidden layer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|<ipython-input-59-1107d9e6b563>:4] 5\n"
     ]
    }
   ],
   "source": [
    "weight_path = '%s/%s' % (prediction_path_info['model_info']['model_dir'], 'weight_0.h5')\n",
    "trained_weight_list = deepbiome.deepbiome_get_trained_weight(log, network_info_with_covariates, path_info_with_covariates,\n",
    "                                                             num_classes=1, weight_path=weight_path)\n",
    "log.info(len(trained_weight_list))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Firmicutes</th>\n",
       "      <td>-0.344851</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Actinobacteria</th>\n",
       "      <td>0.145585</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bacteroidetes</th>\n",
       "      <td>0.404393</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fusobacteria</th>\n",
       "      <td>0.460592</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Proteobacteria</th>\n",
       "      <td>0.690000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TM7</th>\n",
       "      <td>0.474099</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Spirochaetes</th>\n",
       "      <td>0.636293</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OD1</th>\n",
       "      <td>-0.420406</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cyanobacteria_Chloroplast</th>\n",
       "      <td>-0.071823</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ages</th>\n",
       "      <td>-0.218253</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>weights</th>\n",
       "      <td>-0.295915</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gender_0</th>\n",
       "      <td>-0.490817</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gender_1</th>\n",
       "      <td>0.093510</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ethnicity_0</th>\n",
       "      <td>0.498719</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ethnicity_1</th>\n",
       "      <td>-0.111899</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ethnicity_2</th>\n",
       "      <td>0.107435</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ethnicity_3</th>\n",
       "      <td>0.024898</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ethnicity_4</th>\n",
       "      <td>-0.086535</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ethnicity_5</th>\n",
       "      <td>-0.575101</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  0\n",
       "Firmicutes                -0.344851\n",
       "Actinobacteria             0.145585\n",
       "Bacteroidetes              0.404393\n",
       "Fusobacteria               0.460592\n",
       "Proteobacteria             0.690000\n",
       "TM7                        0.474099\n",
       "Spirochaetes               0.636293\n",
       "OD1                       -0.420406\n",
       "Cyanobacteria_Chloroplast -0.071823\n",
       "ages                      -0.218253\n",
       "weights                   -0.295915\n",
       "gender_0                  -0.490817\n",
       "gender_1                   0.093510\n",
       "ethnicity_0                0.498719\n",
       "ethnicity_1               -0.111899\n",
       "ethnicity_2                0.107435\n",
       "ethnicity_3                0.024898\n",
       "ethnicity_4               -0.086535\n",
       "ethnicity_5               -0.575101"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trained_weight_list[4]"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
