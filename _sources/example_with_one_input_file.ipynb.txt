{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Example : k fold cross-validation with an input file \n",
    "\n",
    "DeepBiome package takes microbiome abundance data as input and uses the phylogenetic taxonomy to guide the decision of the optimal number of layers and neurons in the deep learning architecture.\n",
    "\n",
    "To use DeepBiome, you can experiment (1) __k times repetition__ or (2) __k fold cross-validation__.\n",
    "For each experiment, we asuume that the dataset is given by\n",
    "- __A list of k input files for k times repetition.__\n",
    "- __One input file for k fold cross-validation.__\n",
    "\n",
    "This notebook contains an example of (2) __k fold cross-validation__ for the deep neural netowrk using deepbiome."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Load library\n",
    "\n",
    "First, we load the DeepBiome package. The DeepBiome package is built on the tensorflow and keras library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import logging\n",
    "import json\n",
    "from pkg_resources import resource_filename\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from deepbiome import deepbiome"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Prepare the dataset\n",
    "\n",
    "In this example, we assume that we have __one input file for k times repetition.__\n",
    "\n",
    "DeepBiome needs 3 data files as follows:\n",
    "1. **the tree information**\n",
    "1. **the input file**\n",
    "1. **y**\n",
    "\n",
    "In addition, we can set **the training index for each fold**. If we set the index file, DeepBiome builds the training set for each fold based on each fold index in the index file. If not, DeepBiome will generate the index file locally.\n",
    "        \n",
    "Each data should have the csv format as follow:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example of the tree information\n",
    "\n",
    "First we need a file about the phylogenetic tree information. This tree information file should have the format below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Genus</th>\n",
       "      <th>Family</th>\n",
       "      <th>Order</th>\n",
       "      <th>Class</th>\n",
       "      <th>Phylum</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Streptococcus</td>\n",
       "      <td>Streptococcaceae</td>\n",
       "      <td>Lactobacillales</td>\n",
       "      <td>Bacilli</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Tropheryma</td>\n",
       "      <td>Cellulomonadaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Veillonella</td>\n",
       "      <td>Veillonellaceae</td>\n",
       "      <td>Selenomonadales</td>\n",
       "      <td>Negativicutes</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Actinomyces</td>\n",
       "      <td>Actinomycetaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Flavobacterium</td>\n",
       "      <td>Flavobacteriaceae</td>\n",
       "      <td>Flavobacteriales</td>\n",
       "      <td>Flavobacteria</td>\n",
       "      <td>Bacteroidetes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Prevotella</td>\n",
       "      <td>Prevotellaceae</td>\n",
       "      <td>Bacteroidales</td>\n",
       "      <td>Bacteroidia</td>\n",
       "      <td>Bacteroidetes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Porphyromonas</td>\n",
       "      <td>Porphyromonadaceae</td>\n",
       "      <td>Bacteroidales</td>\n",
       "      <td>Bacteroidia</td>\n",
       "      <td>Bacteroidetes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Parvimonas</td>\n",
       "      <td>Clostridiales_Incertae_Sedis_XI</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Fusobacterium</td>\n",
       "      <td>Fusobacteriaceae</td>\n",
       "      <td>Fusobacteriales</td>\n",
       "      <td>Fusobacteria</td>\n",
       "      <td>Fusobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Propionibacterium</td>\n",
       "      <td>Propionibacteriaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Gemella</td>\n",
       "      <td>Bacillales_Incertae_Sedis_XI</td>\n",
       "      <td>Bacillales</td>\n",
       "      <td>Bacilli</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Rothia</td>\n",
       "      <td>Micrococcaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Granulicatella</td>\n",
       "      <td>Carnobacteriaceae</td>\n",
       "      <td>Lactobacillales</td>\n",
       "      <td>Bacilli</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Neisseria</td>\n",
       "      <td>Neisseriaceae</td>\n",
       "      <td>Neisseriales</td>\n",
       "      <td>Betaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Lactobacillus</td>\n",
       "      <td>Lactobacillaceae</td>\n",
       "      <td>Lactobacillales</td>\n",
       "      <td>Bacilli</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Megasphaera</td>\n",
       "      <td>Veillonellaceae</td>\n",
       "      <td>Selenomonadales</td>\n",
       "      <td>Negativicutes</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Catonella</td>\n",
       "      <td>Lachnospiraceae</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Atopobium</td>\n",
       "      <td>Coriobacteriaceae</td>\n",
       "      <td>Coriobacteriales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Campylobacter</td>\n",
       "      <td>Campylobacteraceae</td>\n",
       "      <td>Campylobacterales</td>\n",
       "      <td>Epsilonproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Capnocytophaga</td>\n",
       "      <td>Flavobacteriaceae</td>\n",
       "      <td>Flavobacteriales</td>\n",
       "      <td>Flavobacteria</td>\n",
       "      <td>Bacteroidetes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Solobacterium</td>\n",
       "      <td>Erysipelotrichaceae</td>\n",
       "      <td>Erysipelotrichales</td>\n",
       "      <td>Erysipelotrichia</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Moryella</td>\n",
       "      <td>Lachnospiraceae</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>TM7_genera_incertae_sedis</td>\n",
       "      <td>TM7_genera_incertae_sedis</td>\n",
       "      <td>TM7_genera_incertae_sedis</td>\n",
       "      <td>TM7_genera_incertae_sedis</td>\n",
       "      <td>TM7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Staphylococcus</td>\n",
       "      <td>Staphylococcaceae</td>\n",
       "      <td>Bacillales</td>\n",
       "      <td>Bacilli</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Filifactor</td>\n",
       "      <td>Peptostreptococcaceae</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Oribacterium</td>\n",
       "      <td>Lachnospiraceae</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Burkholderia</td>\n",
       "      <td>Burkholderiaceae</td>\n",
       "      <td>Burkholderiales</td>\n",
       "      <td>Betaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Sneathia</td>\n",
       "      <td>Leptotrichiaceae</td>\n",
       "      <td>Fusobacteriales</td>\n",
       "      <td>Fusobacteria</td>\n",
       "      <td>Fusobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Treponema</td>\n",
       "      <td>Spirochaetaceae</td>\n",
       "      <td>Spirochaetales</td>\n",
       "      <td>Spirochaetes</td>\n",
       "      <td>Spirochaetes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Moraxella</td>\n",
       "      <td>Moraxellaceae</td>\n",
       "      <td>Pseudomonadales</td>\n",
       "      <td>Gammaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>Haemophilus</td>\n",
       "      <td>Pasteurellaceae</td>\n",
       "      <td>Pasteurellales</td>\n",
       "      <td>Gammaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>Selenomonas</td>\n",
       "      <td>Veillonellaceae</td>\n",
       "      <td>Selenomonadales</td>\n",
       "      <td>Negativicutes</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>Corynebacterium</td>\n",
       "      <td>Corynebacteriaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>Rhizobium</td>\n",
       "      <td>Rhizobiaceae</td>\n",
       "      <td>Rhizobiales</td>\n",
       "      <td>Alphaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>Bradyrhizobium</td>\n",
       "      <td>Bradyrhizobiaceae</td>\n",
       "      <td>Rhizobiales</td>\n",
       "      <td>Alphaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>Methylobacterium</td>\n",
       "      <td>Methylobacteriaceae</td>\n",
       "      <td>Rhizobiales</td>\n",
       "      <td>Alphaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>OD1_genera_incertae_sedis</td>\n",
       "      <td>OD1_genera_incertae_sedis</td>\n",
       "      <td>OD1_genera_incertae_sedis</td>\n",
       "      <td>OD1_genera_incertae_sedis</td>\n",
       "      <td>OD1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>Finegoldia</td>\n",
       "      <td>Clostridiales_Incertae_Sedis_XI</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>Microbacterium</td>\n",
       "      <td>Microbacteriaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>Sphingomonas</td>\n",
       "      <td>Sphingomonadaceae</td>\n",
       "      <td>Sphingomonadales</td>\n",
       "      <td>Alphaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>Chryseobacterium</td>\n",
       "      <td>Flavobacteriaceae</td>\n",
       "      <td>Flavobacteriales</td>\n",
       "      <td>Flavobacteria</td>\n",
       "      <td>Bacteroidetes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>Bacteroides</td>\n",
       "      <td>Bacteroidaceae</td>\n",
       "      <td>Bacteroidales</td>\n",
       "      <td>Bacteroidia</td>\n",
       "      <td>Bacteroidetes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>Bdellovibrio</td>\n",
       "      <td>Bdellovibrionaceae</td>\n",
       "      <td>Bdellovibrionales</td>\n",
       "      <td>Deltaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>Streptophyta</td>\n",
       "      <td>Chloroplast</td>\n",
       "      <td>Chloroplast</td>\n",
       "      <td>Chloroplast</td>\n",
       "      <td>Cyanobacteria_Chloroplast</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>Lachnospiracea_incertae_sedis</td>\n",
       "      <td>Lachnospiraceae</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>Paracoccus</td>\n",
       "      <td>Rhodobacteraceae</td>\n",
       "      <td>Rhodobacterales</td>\n",
       "      <td>Alphaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>Fastidiosipila</td>\n",
       "      <td>Ruminococcaceae</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>Pseudonocardia</td>\n",
       "      <td>Pseudonocardiaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            Genus                           Family  \\\n",
       "0                   Streptococcus                 Streptococcaceae   \n",
       "1                      Tropheryma                Cellulomonadaceae   \n",
       "2                     Veillonella                  Veillonellaceae   \n",
       "3                     Actinomyces                 Actinomycetaceae   \n",
       "4                  Flavobacterium                Flavobacteriaceae   \n",
       "5                      Prevotella                   Prevotellaceae   \n",
       "6                   Porphyromonas               Porphyromonadaceae   \n",
       "7                      Parvimonas  Clostridiales_Incertae_Sedis_XI   \n",
       "8                   Fusobacterium                 Fusobacteriaceae   \n",
       "9               Propionibacterium             Propionibacteriaceae   \n",
       "10                        Gemella     Bacillales_Incertae_Sedis_XI   \n",
       "11                         Rothia                   Micrococcaceae   \n",
       "12                 Granulicatella                Carnobacteriaceae   \n",
       "13                      Neisseria                    Neisseriaceae   \n",
       "14                  Lactobacillus                 Lactobacillaceae   \n",
       "15                    Megasphaera                  Veillonellaceae   \n",
       "16                      Catonella                  Lachnospiraceae   \n",
       "17                      Atopobium                Coriobacteriaceae   \n",
       "18                  Campylobacter               Campylobacteraceae   \n",
       "19                 Capnocytophaga                Flavobacteriaceae   \n",
       "20                  Solobacterium              Erysipelotrichaceae   \n",
       "21                       Moryella                  Lachnospiraceae   \n",
       "22      TM7_genera_incertae_sedis        TM7_genera_incertae_sedis   \n",
       "23                 Staphylococcus                Staphylococcaceae   \n",
       "24                     Filifactor            Peptostreptococcaceae   \n",
       "25                   Oribacterium                  Lachnospiraceae   \n",
       "26                   Burkholderia                 Burkholderiaceae   \n",
       "27                       Sneathia                 Leptotrichiaceae   \n",
       "28                      Treponema                  Spirochaetaceae   \n",
       "29                      Moraxella                    Moraxellaceae   \n",
       "30                    Haemophilus                  Pasteurellaceae   \n",
       "31                    Selenomonas                  Veillonellaceae   \n",
       "32                Corynebacterium               Corynebacteriaceae   \n",
       "33                      Rhizobium                     Rhizobiaceae   \n",
       "34                 Bradyrhizobium                Bradyrhizobiaceae   \n",
       "35               Methylobacterium              Methylobacteriaceae   \n",
       "36      OD1_genera_incertae_sedis        OD1_genera_incertae_sedis   \n",
       "37                     Finegoldia  Clostridiales_Incertae_Sedis_XI   \n",
       "38                 Microbacterium                Microbacteriaceae   \n",
       "39                   Sphingomonas                Sphingomonadaceae   \n",
       "40               Chryseobacterium                Flavobacteriaceae   \n",
       "41                    Bacteroides                   Bacteroidaceae   \n",
       "42                   Bdellovibrio               Bdellovibrionaceae   \n",
       "43                   Streptophyta                      Chloroplast   \n",
       "44  Lachnospiracea_incertae_sedis                  Lachnospiraceae   \n",
       "45                     Paracoccus                 Rhodobacteraceae   \n",
       "46                 Fastidiosipila                  Ruminococcaceae   \n",
       "47                 Pseudonocardia               Pseudonocardiaceae   \n",
       "\n",
       "                        Order                      Class  \\\n",
       "0             Lactobacillales                    Bacilli   \n",
       "1             Actinomycetales             Actinobacteria   \n",
       "2             Selenomonadales              Negativicutes   \n",
       "3             Actinomycetales             Actinobacteria   \n",
       "4            Flavobacteriales              Flavobacteria   \n",
       "5               Bacteroidales                Bacteroidia   \n",
       "6               Bacteroidales                Bacteroidia   \n",
       "7               Clostridiales                 Clostridia   \n",
       "8             Fusobacteriales               Fusobacteria   \n",
       "9             Actinomycetales             Actinobacteria   \n",
       "10                 Bacillales                    Bacilli   \n",
       "11            Actinomycetales             Actinobacteria   \n",
       "12            Lactobacillales                    Bacilli   \n",
       "13               Neisseriales         Betaproteobacteria   \n",
       "14            Lactobacillales                    Bacilli   \n",
       "15            Selenomonadales              Negativicutes   \n",
       "16              Clostridiales                 Clostridia   \n",
       "17           Coriobacteriales             Actinobacteria   \n",
       "18          Campylobacterales      Epsilonproteobacteria   \n",
       "19           Flavobacteriales              Flavobacteria   \n",
       "20         Erysipelotrichales           Erysipelotrichia   \n",
       "21              Clostridiales                 Clostridia   \n",
       "22  TM7_genera_incertae_sedis  TM7_genera_incertae_sedis   \n",
       "23                 Bacillales                    Bacilli   \n",
       "24              Clostridiales                 Clostridia   \n",
       "25              Clostridiales                 Clostridia   \n",
       "26            Burkholderiales         Betaproteobacteria   \n",
       "27            Fusobacteriales               Fusobacteria   \n",
       "28             Spirochaetales               Spirochaetes   \n",
       "29            Pseudomonadales        Gammaproteobacteria   \n",
       "30             Pasteurellales        Gammaproteobacteria   \n",
       "31            Selenomonadales              Negativicutes   \n",
       "32            Actinomycetales             Actinobacteria   \n",
       "33                Rhizobiales        Alphaproteobacteria   \n",
       "34                Rhizobiales        Alphaproteobacteria   \n",
       "35                Rhizobiales        Alphaproteobacteria   \n",
       "36  OD1_genera_incertae_sedis  OD1_genera_incertae_sedis   \n",
       "37              Clostridiales                 Clostridia   \n",
       "38            Actinomycetales             Actinobacteria   \n",
       "39           Sphingomonadales        Alphaproteobacteria   \n",
       "40           Flavobacteriales              Flavobacteria   \n",
       "41              Bacteroidales                Bacteroidia   \n",
       "42          Bdellovibrionales        Deltaproteobacteria   \n",
       "43                Chloroplast                Chloroplast   \n",
       "44              Clostridiales                 Clostridia   \n",
       "45            Rhodobacterales        Alphaproteobacteria   \n",
       "46              Clostridiales                 Clostridia   \n",
       "47            Actinomycetales             Actinobacteria   \n",
       "\n",
       "                       Phylum  \n",
       "0                  Firmicutes  \n",
       "1              Actinobacteria  \n",
       "2                  Firmicutes  \n",
       "3              Actinobacteria  \n",
       "4               Bacteroidetes  \n",
       "5               Bacteroidetes  \n",
       "6               Bacteroidetes  \n",
       "7                  Firmicutes  \n",
       "8                Fusobacteria  \n",
       "9              Actinobacteria  \n",
       "10                 Firmicutes  \n",
       "11             Actinobacteria  \n",
       "12                 Firmicutes  \n",
       "13             Proteobacteria  \n",
       "14                 Firmicutes  \n",
       "15                 Firmicutes  \n",
       "16                 Firmicutes  \n",
       "17             Actinobacteria  \n",
       "18             Proteobacteria  \n",
       "19              Bacteroidetes  \n",
       "20                 Firmicutes  \n",
       "21                 Firmicutes  \n",
       "22                        TM7  \n",
       "23                 Firmicutes  \n",
       "24                 Firmicutes  \n",
       "25                 Firmicutes  \n",
       "26             Proteobacteria  \n",
       "27               Fusobacteria  \n",
       "28               Spirochaetes  \n",
       "29             Proteobacteria  \n",
       "30             Proteobacteria  \n",
       "31                 Firmicutes  \n",
       "32             Actinobacteria  \n",
       "33             Proteobacteria  \n",
       "34             Proteobacteria  \n",
       "35             Proteobacteria  \n",
       "36                        OD1  \n",
       "37                 Firmicutes  \n",
       "38             Actinobacteria  \n",
       "39             Proteobacteria  \n",
       "40              Bacteroidetes  \n",
       "41              Bacteroidetes  \n",
       "42             Proteobacteria  \n",
       "43  Cyanobacteria_Chloroplast  \n",
       "44                 Firmicutes  \n",
       "45             Proteobacteria  \n",
       "46                 Firmicutes  \n",
       "47             Actinobacteria  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tree_information = pd.read_csv(resource_filename('deepbiome', 'tests/data/genus48_dic.csv'))\n",
    "tree_information"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This file has `.csv` format below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Genus,Family,Order,Class,Phylum\n",
      "Streptococcus,Streptococcaceae,Lactobacillales,Bacilli,Firmicutes\n",
      "Tropheryma,Cellulomonadaceae,Actinomycetales,Actinobacteria,Actinobacteria\n",
      "Veillonella,Veillonellaceae,Selenomonadales,Negativicutes,Firmicutes\n",
      "Actinomyces,Actinomycetaceae,Actinomycetales,Actinobacteria,Actinobacteria\n",
      "Flavobacterium,Flavobacteriaceae,Flavobacteriales,Flavobacteria,Bacteroidetes\n",
      "Prevotella,Prevotellaceae,Bacteroidales,Bacteroidia,Bacteroidetes\n",
      "Porphyromonas,Porphyromonadaceae,Bacteroidales,Bacteroidia,Bacteroidetes\n",
      "Parvimonas,Clostridiales_Incertae_Sedis_XI,Clostridiales,Clostridia,Firmicutes\n",
      "Fusobacterium,Fusobacteriaceae,Fusobacteriales,Fusobacteria,Fusobacteria\n",
      "Propionibacterium,Propionibacteriaceae,Actinomycetales,Actinobacteria,Actinobacteria\n",
      "Gemella,Bacillales_Incertae_Sedis_XI,Bacillales,Bacilli,Firmicutes\n",
      "Rothia,Micrococcaceae,Actinomycetales,Actinobacteria,Actinobacteria\n",
      "Granulicatella,Carnobacteriaceae,Lactobacillales,Bacilli,Firmicutes\n",
      "Neisseria,Neisseriaceae,Neisseriales,Betaproteobacteria,Proteobacteria\n",
      "Lactobacillus,Lactobacillaceae,Lactobacillales,Bacilli,Firmicutes\n",
      "Megasphaera,Veillonellaceae,Selenomonadales,Negativicutes,Firmicutes\n",
      "Catonella,Lachnospiraceae,Clostridiales,Clostridia,Firmicutes\n",
      "Atopobium,Coriobacteriaceae,Coriobacteriales,Actinobacteria,Actinobacteria\n",
      "Campylobacter,Campylobacteraceae,Campylobacterales,Epsilonproteobacteria,Proteobacteria\n",
      "Capnocytophaga,Flavobacteriaceae,Flavobacteriales,Flavobacteria,Bacteroidetes\n",
      "Solobacterium,Erysipelotrichaceae,Erysipelotrichales,Erysipelotrichia,Firmicutes\n",
      "Moryella,Lachnospiraceae,Clostridiales,Clostridia,Firmicutes\n",
      "TM7_genera_incertae_sedis,TM7_genera_incertae_sedis,TM7_genera_incertae_sedis,TM7_genera_incertae_sedis,TM7\n",
      "Staphylococcus,Staphylococcaceae,Bacillales,Bacilli,Firmicutes\n",
      "Filifactor,Peptostreptococcaceae,Clostridiales,Clostridia,Firmicutes\n",
      "Oribacterium,Lachnospiraceae,Clostridiales,Clostridia,Firmicutes\n",
      "Burkholderia,Burkholderiaceae,Burkholderiales,Betaproteobacteria,Proteobacteria\n",
      "Sneathia,Leptotrichiaceae,Fusobacteriales,Fusobacteria,Fusobacteria\n",
      "Treponema,Spirochaetaceae,Spirochaetales,Spirochaetes,Spirochaetes\n",
      "Moraxella,Moraxellaceae,Pseudomonadales,Gammaproteobacteria,Proteobacteria\n",
      "Haemophilus,Pasteurellaceae,Pasteurellales,Gammaproteobacteria,Proteobacteria\n",
      "Selenomonas,Veillonellaceae,Selenomonadales,Negativicutes,Firmicutes\n",
      "Corynebacterium,Corynebacteriaceae,Actinomycetales,Actinobacteria,Actinobacteria\n",
      "Rhizobium,Rhizobiaceae,Rhizobiales,Alphaproteobacteria,Proteobacteria\n",
      "Bradyrhizobium,Bradyrhizobiaceae,Rhizobiales,Alphaproteobacteria,Proteobacteria\n",
      "Methylobacterium,Methylobacteriaceae,Rhizobiales,Alphaproteobacteria,Proteobacteria\n",
      "OD1_genera_incertae_sedis,OD1_genera_incertae_sedis,OD1_genera_incertae_sedis,OD1_genera_incertae_sedis,OD1\n",
      "Finegoldia,Clostridiales_Incertae_Sedis_XI,Clostridiales,Clostridia,Firmicutes\n",
      "Microbacterium,Microbacteriaceae,Actinomycetales,Actinobacteria,Actinobacteria\n",
      "Sphingomonas,Sphingomonadaceae,Sphingomonadales,Alphaproteobacteria,Proteobacteria\n",
      "Chryseobacterium,Flavobacteriaceae,Flavobacteriales,Flavobacteria,Bacteroidetes\n",
      "Bacteroides,Bacteroidaceae,Bacteroidales,Bacteroidia,Bacteroidetes\n",
      "Bdellovibrio,Bdellovibrionaceae,Bdellovibrionales,Deltaproteobacteria,Proteobacteria\n",
      "Streptophyta,Chloroplast,Chloroplast,Chloroplast,Cyanobacteria_Chloroplast\n",
      "Lachnospiracea_incertae_sedis,Lachnospiraceae,Clostridiales,Clostridia,Firmicutes\n",
      "Paracoccus,Rhodobacteraceae,Rhodobacterales,Alphaproteobacteria,Proteobacteria\n",
      "Fastidiosipila,Ruminococcaceae,Clostridiales,Clostridia,Firmicutes\n",
      "Pseudonocardia,Pseudonocardiaceae,Actinomycetales,Actinobacteria,Actinobacteria\n",
      "\n"
     ]
    }
   ],
   "source": [
    "with open(resource_filename('deepbiome', 'tests/data/genus48_dic.csv')) as f:\n",
    "    print(f.read())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example of the input file\n",
    "\n",
    "Below is an example of the input file.\n",
    "This example has 1000 samples' microbiome abandunce. __The order of the microbiome should be same as the order of the microbiome in the Genus level in the tree information above.__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Streptococcus</th>\n",
       "      <th>Tropheryma</th>\n",
       "      <th>Veillonella</th>\n",
       "      <th>Actinomyces</th>\n",
       "      <th>Flavobacterium</th>\n",
       "      <th>Prevotella</th>\n",
       "      <th>Porphyromonas</th>\n",
       "      <th>Parvimonas</th>\n",
       "      <th>Fusobacterium</th>\n",
       "      <th>Propionibacterium</th>\n",
       "      <th>...</th>\n",
       "      <th>Microbacterium</th>\n",
       "      <th>Sphingomonas</th>\n",
       "      <th>Chryseobacterium</th>\n",
       "      <th>Bacteroides</th>\n",
       "      <th>Bdellovibrio</th>\n",
       "      <th>Streptophyta</th>\n",
       "      <th>Lachnospiracea_incertae_sedis</th>\n",
       "      <th>Paracoccus</th>\n",
       "      <th>Fastidiosipila</th>\n",
       "      <th>Pseudonocardia</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>841</td>\n",
       "      <td>0</td>\n",
       "      <td>813</td>\n",
       "      <td>505</td>\n",
       "      <td>5</td>\n",
       "      <td>3224</td>\n",
       "      <td>0</td>\n",
       "      <td>362</td>\n",
       "      <td>11</td>\n",
       "      <td>65</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>87</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2133</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1445</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>573</td>\n",
       "      <td>0</td>\n",
       "      <td>1278</td>\n",
       "      <td>82</td>\n",
       "      <td>85</td>\n",
       "      <td>69</td>\n",
       "      <td>154</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3638</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1259</td>\n",
       "      <td>0</td>\n",
       "      <td>805</td>\n",
       "      <td>650</td>\n",
       "      <td>0</td>\n",
       "      <td>1088</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>74</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>39</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>982</td>\n",
       "      <td>0</td>\n",
       "      <td>327</td>\n",
       "      <td>594</td>\n",
       "      <td>0</td>\n",
       "      <td>960</td>\n",
       "      <td>81</td>\n",
       "      <td>19</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>157</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1162</td>\n",
       "      <td>0</td>\n",
       "      <td>130</td>\n",
       "      <td>969</td>\n",
       "      <td>163</td>\n",
       "      <td>1515</td>\n",
       "      <td>167</td>\n",
       "      <td>4</td>\n",
       "      <td>162</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3945</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 48 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Streptococcus  Tropheryma  Veillonella  Actinomyces  Flavobacterium  \\\n",
       "0            841           0          813          505               5   \n",
       "1           1445           0            1          573               0   \n",
       "2           1259           0          805          650               0   \n",
       "3            982           0          327          594               0   \n",
       "4           1162           0          130          969             163   \n",
       "\n",
       "   Prevotella  Porphyromonas  Parvimonas  Fusobacterium  Propionibacterium  \\\n",
       "0        3224              0         362             11                 65   \n",
       "1        1278             82          85             69                154   \n",
       "2        1088              0           0             74                  0   \n",
       "3         960             81          19              9                  0   \n",
       "4        1515            167           4            162                  3   \n",
       "\n",
       "   ...  Microbacterium  Sphingomonas  Chryseobacterium  Bacteroides  \\\n",
       "0  ...               0            87                 0            0   \n",
       "1  ...               0             1                 2            0   \n",
       "2  ...               0             2                 8            1   \n",
       "3  ...             157             1                 0            4   \n",
       "4  ...               0             9                 0            0   \n",
       "\n",
       "   Bdellovibrio  Streptophyta  Lachnospiracea_incertae_sedis  Paracoccus  \\\n",
       "0             0             0                              0           0   \n",
       "1             0             0                              0           0   \n",
       "2            39             0                              0           0   \n",
       "3            60             0                              0           0   \n",
       "4             0             0                             60           0   \n",
       "\n",
       "   Fastidiosipila  Pseudonocardia  \n",
       "0               0            2133  \n",
       "1               0            3638  \n",
       "2               0            3445  \n",
       "3               0            3507  \n",
       "4               0            3945  \n",
       "\n",
       "[5 rows x 48 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = pd.read_csv(resource_filename('deepbiome', 'tests/data/onefile_x.csv'))\n",
    "x.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Streptococcus</th>\n",
       "      <th>Tropheryma</th>\n",
       "      <th>Veillonella</th>\n",
       "      <th>Actinomyces</th>\n",
       "      <th>Flavobacterium</th>\n",
       "      <th>Prevotella</th>\n",
       "      <th>Porphyromonas</th>\n",
       "      <th>Parvimonas</th>\n",
       "      <th>Fusobacterium</th>\n",
       "      <th>Propionibacterium</th>\n",
       "      <th>...</th>\n",
       "      <th>Microbacterium</th>\n",
       "      <th>Sphingomonas</th>\n",
       "      <th>Chryseobacterium</th>\n",
       "      <th>Bacteroides</th>\n",
       "      <th>Bdellovibrio</th>\n",
       "      <th>Streptophyta</th>\n",
       "      <th>Lachnospiracea_incertae_sedis</th>\n",
       "      <th>Paracoccus</th>\n",
       "      <th>Fastidiosipila</th>\n",
       "      <th>Pseudonocardia</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>1401</td>\n",
       "      <td>4</td>\n",
       "      <td>30</td>\n",
       "      <td>526</td>\n",
       "      <td>0</td>\n",
       "      <td>923</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>127</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4470</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>2655</td>\n",
       "      <td>6</td>\n",
       "      <td>106</td>\n",
       "      <td>74</td>\n",
       "      <td>0</td>\n",
       "      <td>952</td>\n",
       "      <td>76</td>\n",
       "      <td>13</td>\n",
       "      <td>158</td>\n",
       "      <td>125</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2826</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>335</td>\n",
       "      <td>0</td>\n",
       "      <td>71</td>\n",
       "      <td>259</td>\n",
       "      <td>67</td>\n",
       "      <td>718</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>167</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>246</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6527</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>649</td>\n",
       "      <td>69</td>\n",
       "      <td>966</td>\n",
       "      <td>1227</td>\n",
       "      <td>0</td>\n",
       "      <td>508</td>\n",
       "      <td>2</td>\n",
       "      <td>30</td>\n",
       "      <td>550</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4402</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>1258</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1119</td>\n",
       "      <td>0</td>\n",
       "      <td>2348</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>137</td>\n",
       "      <td>176</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2585</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 48 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Streptococcus  Tropheryma  Veillonella  Actinomyces  Flavobacterium  \\\n",
       "995           1401           4           30          526               0   \n",
       "996           2655           6          106           74               0   \n",
       "997            335           0           71          259              67   \n",
       "998            649          69          966         1227               0   \n",
       "999           1258           0            0         1119               0   \n",
       "\n",
       "     Prevotella  Porphyromonas  Parvimonas  Fusobacterium  Propionibacterium  \\\n",
       "995         923             25           0            127                  0   \n",
       "996         952             76          13            158                125   \n",
       "997         718              1           4              4                167   \n",
       "998         508              2          30            550                  0   \n",
       "999        2348             25           0            137                176   \n",
       "\n",
       "     ...  Microbacterium  Sphingomonas  Chryseobacterium  Bacteroides  \\\n",
       "995  ...               0             0                 7            0   \n",
       "996  ...               0             2                 0            0   \n",
       "997  ...               0           246                 0            0   \n",
       "998  ...               0             0                 0            0   \n",
       "999  ...               0             2                 0            0   \n",
       "\n",
       "     Bdellovibrio  Streptophyta  Lachnospiracea_incertae_sedis  Paracoccus  \\\n",
       "995             0             0                              0           0   \n",
       "996             0             0                              0           0   \n",
       "997             6             0                              0           0   \n",
       "998             0             6                              0           0   \n",
       "999             0             0                              0           0   \n",
       "\n",
       "     Fastidiosipila  Pseudonocardia  \n",
       "995               0            4470  \n",
       "996               0            2826  \n",
       "997               0            6527  \n",
       "998               0            4402  \n",
       "999               0            2585  \n",
       "\n",
       "[5 rows x 48 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This file has `.csv` format below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\"Streptococcus\",\"Tropheryma\",\"Veillonella\",\"Actinomyces\",\"Flavobacterium\",\"Prevotella\",\"Porphyromonas\",\"Parvimonas\",\"Fusobacterium\",\"Propionibacterium\",\"Gemella\",\"Rothia\",\"Granulicatella\",\"Neisseria\",\"Lactobacillus\",\"Megasphaera\",\"Catonella\",\"Atopobium\",\"Campylobacter\",\"Capnocytophaga\",\"Solobacterium\",\"Moryella\",\"TM7_genera_incertae_sedis\",\"Staphylococcus\",\"Filifactor\",\"Oribacterium\",\"Burkholderia\",\"Sneathia\",\"Treponema\",\"Moraxella\",\"Haemophilus\",\"Selenomonas\",\"Corynebacterium\",\"Rhizobium\",\"Bradyrhizobium\",\"Methylobacterium\",\"OD1_genera_incertae_sedis\",\"Finegoldia\",\"Microbacterium\",\"Sphingomonas\",\"Chryseobacterium\",\"Bacteroides\",\"Bdellovibrio\",\"Streptophyta\",\"Lachnospiracea_incertae_sedis\",\"Paracoccus\",\"Fastidiosipila\",\"Pseudonocardia\"\n",
      "841,0,813,505,5,3224,0,362,11,65,156,1,55,0,1,20,382,1,333,24,80,43,309,2,3,4,0,1,32,0,2,4,382,0,0,96,23,0,0,87,0,0,0,0,0,0,0,2133\n",
      "1445,0,1,573,0,1278,82,85,69,154,436,3,0,61,440,0,394,83,33,123,0,49,414,0,0,37,0,0,42,0,0,384,27,0,0,0,146,0,0,1,2,0,0,0,0,0,0,3638\n",
      "1259,0,805,650,0,1088,0,0,74,0,155,228,430,765,0,0,11,102,68,90,77,83,322,10,0,7,0,122,76,0,1,25,0,0,0,44,13,0,0,2,8,1,39,0,0,0,0,3445\n",
      "982,0,327,594,0,960,81,19,9,0,45,457,1049,0,3,450,19,170,388,147,0,0,41,63,0,1,0,0,121,0,0,1,0,0,0,0,344,0,157,1,0,4,60,0,0,0,0,3507\n",
      "1162,0,130,969,163,1515,167,4,162,3,12,0,48,73,93,259,52,0,201,85,14,14,434,2,0,0,0,0,187,0,0,188,45,0,0,0,4,0,0,9,0,0,0,0,60,0,0,3945\n",
      "1956,37,41,661,47,1555,374,7,142,19,61,226,0,30,52,0,6,480,142,148,9,575,12,0,0,0,0,3,168,0,56,50,0,0,0,98,989,0,0,12,0,0,0,0,0,0,0,2044\n",
      "1037,14,83,1595,132,305,103,174,1195,0,410,224,1,320,26,0,476,0,7,37,46,61,20,0,0,0,0,0,226,0,239,8,1,0,0,0,0,188,0,20,4,0,4,0,0,0,0,3044\n",
      "641,0,172,179,0,1312,84,9,81,376,128,223,160,0,532,155,89,355,1,282,0,0,25,0,0,43,0,9,311,0,0,0,0,0,0,0,845,0,0,8,0,0,0,0,0,0,0,3980\n",
      "852,146,504,99,2,376,116,152,67,0,120,3,23,2,34,0,127,75,240,60,42,0,9,0,15,0,62,0,13,0,197,187,396,0,0,20,51,0,0,3,0,0,0,0,0,0,0,6007\n",
      "901,3,187,1214,0,1508,675,0,107,49,318,2,393,5,3,65,4,285,79,11,0,0,4,3,0,0,1,0,729,0,0,173,0,0,0,0,254,0,0,0,0,0,1,0,29,0,0,2997\n",
      "677,60,635,45,268,2461,466,9,338,0,97,63,45,82,128,1,139,4,323,6,0,0,58,0,0,0,0,0,36,0,646,29,0,0,0,0,120,0,0,41,0,0,0,0,0,0,0,3223\n",
      "413,0,355,1258,0,583,48,107,250,5,102,204,287,4,0,18,2,145,454,11,0,79,104,25,164,1,0,100,55,0,1,33,206,0,0,10,81,0,0,0,0,0,0,0,0,0,0,4895\n",
      "351,99,17,268,0,912,4,96,847,472,67,8,440,16,0,0,247,0,165,83,0,0,0,0,4,0,0,0,275,0,21,1968,3,0,0,0,173,0,0,1,37,0,0,0,0,0,53,3373\n",
      "1829,0,32,77,0,1971,8,6,319,1,8,140,302,165,177,0,166,27,857,19,0,0,155,0,0,579,127,112,54,0,1,19,0,0,0,0,143,0,0,8,51,0,0,0,0,0,0,2647\n",
      "1089,0,4,30,0,847,51,42,48,0,211,1,24,0,81,1,687,494,758,27,0,0,123,7,0,0,0,1,310,0,6,4,780,0,0,4,1,0,0,0,0,0,2,0,0,0,0,4367\n",
      "1761,0,60,517,4,576,63,0,169,0,12,437,0,7,130,0,2,7,47,346,115,0,539,0,2,0,0,0,515,0,0,68,5,0,0,0,315,0,0,16,0,0,0,0,0,0,0,4287\n",
      "938,0,601,794,0,1836,52,6,10,0,1104,8,219,168,174,3,0,12,425,885,0,15,268,34,0,141,2,0,8,0,0,5,8,0,0,0,2,0,0,0,0,0,0,0,0,0,0,2282\n",
      "882,8,110,975,0,1042,11,3,211,0,15,22,56,0,47,140,5,4,194,109,0,403,129,6,0,10,0,3,19,0,1,591,2,2,0,6,0,0,0,1,0,0,0,0,0,0,0,4993\n",
      "1395,0,76,60,0,916,2,466,353,13,1,159,369,0,92,2,14,528,103,133,100,4,17,0,0,0,0,0,7,0,0,6,48,0,0,44,578,0,0,0,0,0,0,0,0,0,0,4514\n",
      "1150,3,168,1265,0,1328,14,0,432,14,140,0,1,179,77,0,92,55,33,123,0,8,844,0,0,82,34,113,14,0,0,99,26,0,0,0,14,14,0,24,49,0,0,0,0,0,0,3605\n",
      "352,0,20,48,0,1035,269,1,1,53,122,1,0,0,107,0,12,414,253,483,335,3,117,0,0,1,21,37,7,0,8,13,15,0,0,186,0,0,0,18,0,57,0,0,0,0,0,6011\n",
      "1120,0,124,1198,0,2161,795,1,483,0,0,5,8,16,78,7,22,3,62,203,0,0,148,0,0,68,0,2,22,0,0,23,148,0,0,0,127,0,0,2,0,0,0,0,0,0,0,3174\n",
      "406,5,6,1191,0,2582,239,155,81,0,2,183,4,7,483,0,190,0,10,8,0,0,447,4,226,0,59,4,146,0,22,225,0,0,0,0,34,0,0,1,0,0,0,0,0,0,0,3280\n",
      "439,133,130,108,0,1511,50,180,33,0,110,86,539,0,88,145,7,11,745,487,0,40,176,43,8,103,0,6,193,0,4,306,6,0,0,0,2,1,0,0,0,0,0,0,0,0,0,4310\n",
      "513,0,130,583,2,781,3,34,201,84,3,1358,59,3,343,117,148,278,0,335,0,51,80,47,0,5,63,775,35,0,16,562,0,0,0,0,62,0,0,5,0,0,18,1,0,2,0,3303\n",
      "229,0,126,179,0,1581,61,26,1018,25,27,73,289,25,9,2,4,150,32,130,0,84,78,102,0,29,1,11,143,0,1,15,0,0,0,471,179,0,0,398,0,0,0,0,0,0,0,4502\n",
      "1378,3,327,351,3,1129,103,35,140,245,23,1,251,0,13,1128,0,0,81,16,0,0,193,31,0,0,0,255,273,0,1,15,8,0,0,0,29,0,6,0,0,0,1,0,0,0,2,3959\n",
      "701,0,402,918,0,1518,116,234,881,252,144,14,4,0,18,374,22,8,0,363,1,0,37,0,0,0,0,0,187,0,0,7,5,0,0,0,0,0,0,2,120,0,0,1,0,0,0,3671\n",
      "1116,1,630,232,0,1291,318,93,423,0,166,122,432,0,13,0,6,54,5,3,0,11,2019,0,0,51,0,0,88,0,0,91,1,0,0,34,0,0,0,0,0,0,0,1,0,0,0,2799\n",
      "1356,813,40,210,0,1337,628,0,134,0,145,203,247,1,28,5,25,0,1,373,58,0,93,2,0,80,260,0,18,0,0,196,0,2,0,0,0,0,4,0,4,0,0,0,0,0,0,3737\n",
      "470,0,167,18,41,882,318,820,189,38,521,65,58,132,25,257,43,6,973,46,132,114,17,48,0,0,51,0,4,0,0,131,76,0,0,0,106,0,0,0,2,0,0,0,0,0,0,4250\n",
      "487,16,412,945,1,535,1,0,122,0,530,392,1,182,167,1,1,44,374,61,73,9,33,0,8,0,0,9,484,0,52,66,4,0,0,0,571,0,0,1,0,0,21,0,0,0,0,4397\n",
      "994,0,1190,98,0,917,16,9,357,0,101,15,0,0,48,2,8,0,25,40,0,286,27,0,0,75,243,0,1610,0,0,387,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3477\n",
      "383,6,1452,690,4,775,2,58,287,0,833,0,83,1,5,0,50,400,28,120,0,16,6,0,3,274,0,0,313,0,0,0,0,0,0,4,27,0,0,0,0,0,72,0,0,0,0,4108\n",
      "179,101,59,491,0,1902,59,0,150,0,11,75,131,461,112,0,0,462,0,6,0,225,78,50,96,21,1,1,35,0,0,0,79,162,172,0,250,0,0,0,19,0,0,0,0,0,0,4612\n",
      "822,0,168,475,0,1640,600,6,247,13,138,2,51,2,64,169,24,55,360,126,0,841,94,158,0,0,0,27,448,0,0,190,0,0,0,0,5,0,0,0,22,0,0,0,0,0,0,3253\n",
      "525,50,142,278,1,1005,148,26,905,5,256,9,1536,37,6,116,48,13,116,14,23,0,0,0,0,1,1,1,8,0,0,48,7,0,0,0,289,0,0,0,0,0,0,9,0,0,0,4377\n",
      "660,14,132,252,64,597,0,206,13,23,12,233,160,0,212,21,281,160,45,102,4,133,44,0,0,88,53,0,204,0,20,127,13,0,0,0,1,0,0,0,0,0,0,0,0,0,0,6126\n",
      "480,22,72,170,222,1481,6,2,585,211,448,503,11,48,14,527,832,0,9,192,341,272,2,0,0,50,2,0,52,0,0,86,192,0,0,0,14,0,0,0,0,0,0,1,0,0,0,3153\n",
      "741,23,189,143,3,2487,35,201,312,0,3,233,0,1,150,12,495,0,1,102,285,0,507,26,7,62,0,1,41,0,0,0,588,0,0,29,18,0,0,0,0,0,0,0,0,0,0,3305\n",
      "623,168,18,1993,0,1829,157,0,146,0,177,1,86,8,1232,0,6,0,5,14,3,0,59,0,5,0,122,8,25,0,2,202,265,0,0,0,201,0,0,0,12,0,0,0,0,0,0,2633\n",
      "835,0,79,117,17,1140,559,59,350,262,242,178,6,178,0,0,59,133,27,62,39,20,5,0,69,3,0,13,449,0,0,0,0,0,0,0,178,0,13,0,0,0,0,0,0,0,0,4908\n",
      "2196,0,614,328,0,1809,467,70,470,3,131,0,2,1,1,4,3,172,417,14,14,0,231,0,0,1,4,47,258,0,0,73,133,0,0,0,0,0,3,5,0,0,0,0,0,0,0,2529\n",
      "618,0,73,740,0,1253,21,115,508,8,124,15,221,0,88,14,33,304,733,10,258,177,305,0,0,46,0,0,342,0,13,512,0,0,0,0,117,0,0,0,0,0,0,0,0,0,0,3352\n",
      "835,7,94,769,1,1235,65,97,629,0,115,436,42,0,265,31,70,15,396,99,0,611,66,26,0,0,32,1,86,0,0,395,935,0,0,0,18,0,0,140,0,0,0,0,0,0,0,2489\n",
      "587,24,12,1374,0,2272,96,109,789,26,238,1,1,46,1,2,10,6,120,80,19,0,13,10,0,5,0,8,175,0,0,83,0,0,0,0,17,0,3,0,0,0,0,0,0,0,0,3873\n",
      "750,0,261,235,5,592,30,0,704,579,0,12,61,2,64,576,0,100,0,44,26,0,343,0,0,13,12,4,32,0,0,451,16,0,0,440,186,0,0,22,12,7,1,0,0,21,0,4399\n",
      "940,1,12,2219,2,447,203,35,451,10,76,22,183,5,78,16,0,0,194,394,68,0,14,0,0,305,7,0,567,0,1,183,410,0,0,1,27,0,0,0,0,0,0,0,0,0,0,3129\n",
      "516,2,300,127,0,831,494,18,798,0,0,589,342,53,86,922,140,5,118,207,0,2,37,31,5,77,144,0,113,0,169,34,195,0,0,0,5,0,0,60,37,216,0,0,0,0,0,3327\n",
      "449,8,130,731,8,1533,220,0,147,3,253,248,6,20,77,50,9,0,6,255,0,0,138,0,0,0,10,390,43,0,0,56,3,0,0,0,278,0,0,0,0,0,141,1,0,0,0,4787\n",
      "429,0,0,460,0,937,899,222,58,0,38,62,3,6,657,0,130,20,81,552,41,4,184,72,38,3,12,0,489,0,14,317,307,0,0,0,101,0,0,0,0,0,0,0,0,0,0,3864\n",
      "1453,368,215,377,2,1464,1,22,346,0,473,114,16,0,1,24,47,0,458,349,208,0,79,117,6,199,0,28,542,0,11,46,3,0,0,0,290,0,0,1,0,0,0,0,0,0,0,2740\n",
      "946,200,7,506,183,366,5,124,152,571,302,47,70,5,6,55,5,42,272,470,13,367,3,161,31,0,0,2,599,21,0,3,0,0,0,0,263,0,0,104,0,0,0,7,0,0,0,4092\n",
      "2039,1,288,1033,302,562,313,1,50,0,4,3,2,3,41,209,151,0,637,1031,43,5,0,0,0,1,6,101,318,0,1,20,0,0,0,0,13,0,0,7,0,0,0,0,0,0,0,2815\n",
      "707,81,332,103,436,1272,0,87,1262,0,102,69,12,22,2,2,436,507,425,177,0,0,425,0,0,0,0,0,90,2,207,272,487,0,0,477,4,0,0,0,0,0,1,0,0,0,0,2001\n",
      "534,0,94,1573,0,1752,75,0,830,7,35,0,3,5,135,16,502,65,121,4,0,0,17,1,0,314,0,262,16,0,2,274,47,0,0,162,5,4,0,3,0,185,0,0,0,0,0,2957\n",
      "1160,9,122,189,14,1479,305,158,291,9,39,4,301,0,376,0,85,0,532,32,6,621,990,0,71,61,1,4,24,0,0,160,104,0,0,0,33,0,0,58,0,0,0,27,0,7,0,2728\n",
      "564,2,31,423,0,2131,604,1,224,2,4,69,0,0,371,0,62,573,3,0,0,0,52,0,0,0,0,42,210,0,1,258,27,0,0,0,0,0,0,312,10,0,0,0,0,15,0,4009\n",
      "779,0,11,47,0,1710,568,2,188,0,255,4,2,88,75,95,786,421,698,72,7,0,31,0,21,137,0,10,354,8,0,379,103,0,0,0,126,0,0,0,0,0,0,0,0,0,0,3023\n",
      "1015,353,145,58,127,1030,47,0,39,0,410,64,22,104,212,1,260,51,86,30,8,146,78,2,0,22,22,0,19,0,43,982,382,0,0,10,0,0,26,0,154,0,0,61,0,0,0,3991\n",
      "1123,0,188,483,0,649,72,19,386,43,4,35,3,150,10,66,46,4,36,0,169,445,0,0,57,2,9,132,1286,0,0,38,12,0,0,16,22,0,0,15,0,0,0,0,0,0,0,4480\n",
      "902,0,336,744,0,1350,10,0,109,397,0,968,53,0,0,1,18,0,560,0,12,0,256,92,237,8,272,4,81,78,34,11,78,0,0,0,13,0,0,0,22,5,0,0,0,0,0,3349\n",
      "1586,0,11,473,0,2151,138,373,6,0,13,482,175,16,1,222,8,13,32,362,0,2,29,0,29,86,0,0,12,0,84,582,24,0,0,0,201,0,0,0,0,3,29,0,0,0,0,2857\n",
      "965,0,142,930,0,510,332,282,9,0,109,1,51,2,120,0,0,542,439,0,0,0,148,247,0,0,0,304,146,0,123,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,4501\n",
      "922,0,900,203,0,1362,21,384,26,0,523,16,42,10,42,3,29,3,9,204,0,0,13,2,57,65,0,6,108,0,140,33,43,0,0,0,70,0,0,0,0,0,0,0,0,0,0,4764\n",
      "826,0,61,84,6,1248,112,7,365,1071,193,45,0,0,1698,0,2,15,0,692,5,88,0,17,40,18,19,0,433,0,0,1,28,0,0,0,36,0,0,43,0,0,0,0,0,0,0,2847\n",
      "1138,0,504,573,3,1529,346,72,166,0,190,0,131,38,18,0,261,142,10,17,149,0,726,0,20,12,4,0,32,0,0,58,0,0,0,2,37,0,0,0,0,0,0,0,0,0,0,3822\n",
      "1610,0,17,35,0,721,597,2,588,24,32,6,187,15,31,0,15,3,531,190,34,75,10,0,0,6,0,0,250,0,0,177,44,0,0,0,78,0,0,0,0,0,25,0,0,0,0,4697\n",
      "1351,0,202,492,34,1607,639,28,197,0,55,0,155,0,174,0,10,0,158,494,47,70,32,227,0,0,0,0,445,0,0,120,1,0,0,0,42,0,0,12,0,0,0,0,0,0,0,3408\n",
      "1255,0,181,78,0,855,33,0,394,0,300,2,18,54,163,4,146,1,171,173,0,3,183,1093,0,274,288,0,336,0,0,201,13,0,0,12,24,1,0,0,0,0,0,0,0,0,0,3744\n",
      "1430,253,2,485,0,54,99,0,122,21,40,0,12,0,0,0,5,116,469,17,969,0,31,173,0,41,39,0,661,0,288,0,934,0,0,43,46,0,0,20,0,0,0,0,0,0,0,3630\n",
      "266,0,60,414,0,668,88,55,71,0,88,38,3,72,0,4,499,101,78,7,8,558,0,40,0,44,154,109,241,0,292,494,23,0,0,0,850,0,0,0,0,0,0,0,0,0,0,4675\n",
      "974,402,252,441,0,1557,40,0,188,1,231,0,2,57,1,0,655,462,468,143,239,0,60,0,0,0,0,0,56,0,0,35,10,4,0,0,254,0,0,0,0,0,0,0,0,0,173,3295\n",
      "710,503,53,94,0,1490,2,5,269,1,24,0,12,0,97,108,285,152,329,2,59,8,99,40,0,0,0,0,91,11,183,374,2,0,20,0,0,0,0,0,461,0,0,0,0,0,0,4516\n",
      "2075,309,141,83,19,1424,184,27,97,85,180,0,10,70,34,4,266,0,488,145,0,17,78,1,0,0,53,243,177,0,0,12,130,0,0,0,76,0,0,3,4,0,0,0,0,0,0,3565\n",
      "1319,3,1019,4,0,1102,1136,18,436,0,85,139,129,0,132,6,2,1,0,1,0,244,73,1,0,9,0,0,4,0,0,0,67,0,0,0,0,0,94,0,0,0,0,0,0,0,0,3976\n",
      "262,0,46,421,0,1027,501,62,377,1114,5,18,0,15,56,0,447,313,0,734,69,0,14,16,0,2,2,79,222,0,0,60,11,0,0,241,12,0,5,0,0,0,0,0,0,6,0,3863\n",
      "964,0,132,214,32,1532,130,11,1138,0,20,0,0,0,166,0,359,25,110,11,0,221,111,0,0,0,15,0,11,3,1,98,154,0,0,0,6,0,0,1,0,0,70,0,0,0,0,4465\n",
      "1813,0,110,549,20,428,1,177,131,111,0,0,5,0,3,0,0,0,318,4,7,0,52,0,0,305,0,23,441,5,124,8,829,0,0,5,10,0,4,25,0,0,0,0,0,0,0,4492\n",
      "942,3,424,292,0,658,191,37,147,0,419,50,1,542,13,0,11,6,1090,4,45,1,122,95,4,0,242,349,148,0,537,113,0,0,11,0,12,0,0,0,0,0,0,7,0,0,0,3484\n",
      "298,0,672,366,0,1176,3,8,304,253,18,432,31,0,2,50,299,6,3,32,1,618,16,258,0,0,0,0,182,0,0,1893,13,0,0,75,30,0,0,1,0,0,0,0,0,0,0,2960\n",
      "412,0,33,663,0,678,300,308,347,46,122,220,1,0,143,1,7,0,68,40,3,4,521,0,0,0,0,0,12,0,407,120,0,0,0,0,389,0,0,17,44,0,14,0,0,3,0,5077\n",
      "931,6,138,452,0,511,47,0,60,21,0,0,317,4,0,5,31,177,4,22,14,0,40,0,0,72,50,0,645,0,0,308,11,0,0,0,36,0,0,0,0,176,1,0,0,0,0,5921\n",
      "1836,605,11,72,0,2037,155,50,505,34,255,0,0,0,100,0,643,52,164,46,0,0,62,0,83,22,0,0,81,0,0,374,0,4,0,0,41,0,0,11,0,0,0,0,0,0,0,2757\n",
      "1304,2,37,119,76,1263,278,148,18,0,202,3,62,28,330,0,117,33,271,0,0,0,302,0,0,496,0,0,394,0,0,135,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,4381\n",
      "1283,90,350,408,0,764,453,4,66,0,30,0,0,60,0,12,5,30,59,225,0,25,45,0,2,0,105,5,361,0,300,259,244,0,0,115,17,0,0,7,0,0,0,0,0,0,0,4676\n",
      "675,72,166,372,27,1507,8,73,720,0,4,1,0,0,8,19,108,0,746,44,0,0,140,0,0,100,0,0,191,104,1,604,3,0,134,47,126,0,0,1008,34,0,0,0,50,0,0,2908\n",
      "2130,168,163,154,244,1733,192,19,3,57,58,1,97,0,104,34,2,8,1195,23,288,114,77,214,0,27,19,0,10,0,0,479,0,0,0,0,159,0,0,155,0,0,0,0,0,0,0,2073\n",
      "488,0,608,808,0,621,0,35,427,0,319,522,0,0,320,13,292,0,67,21,0,1,520,0,0,18,0,0,281,0,19,8,0,0,10,0,17,0,0,0,0,0,30,0,0,0,0,4555\n",
      "793,60,872,436,28,1153,0,28,18,1,0,4,145,50,216,0,4,1,93,318,44,30,22,81,0,0,0,467,72,4,0,3,0,0,0,53,99,0,0,0,413,0,0,0,0,0,0,4492\n",
      "556,0,343,804,4,1317,60,39,644,1,94,148,0,0,50,0,2,530,45,70,0,0,135,0,0,325,6,0,25,0,13,166,82,0,0,0,0,0,83,0,18,0,0,0,0,0,0,4440\n",
      "422,1433,55,365,0,513,45,9,251,10,17,31,3,400,387,0,3,88,338,4,0,95,7,8,192,180,3,6,118,0,0,369,30,0,0,240,886,0,69,11,0,0,0,0,0,5,0,3407\n",
      "818,0,411,362,332,654,174,47,137,0,223,515,15,312,614,0,255,117,58,275,0,99,159,0,0,0,83,506,380,0,1,371,48,0,0,83,108,0,0,0,7,1,0,0,0,0,0,2835\n",
      "875,0,323,50,13,1542,11,84,40,3,937,0,19,0,453,149,138,1,199,391,129,2,6,0,132,0,0,1251,75,0,0,10,0,0,0,0,2,0,15,39,0,0,1,0,0,0,0,3110\n",
      "1029,224,830,561,109,1795,17,182,40,11,1,8,2,47,88,0,516,0,4,18,5,62,0,713,0,148,0,15,204,0,3,489,1100,0,0,2,122,0,2,0,0,0,0,0,0,0,0,1653\n",
      "635,59,392,622,0,2423,4,11,294,148,60,27,164,15,38,0,7,56,572,127,5,0,922,107,5,2,0,0,232,0,172,220,62,0,0,14,0,0,0,0,0,0,0,0,0,0,0,2605\n",
      "673,13,268,526,0,2855,549,0,245,2,1,30,3,0,2,24,15,1,108,2,0,0,352,0,0,244,22,1,22,0,0,18,8,0,0,23,108,4,0,0,0,0,0,0,0,0,0,3881\n",
      "1239,7,60,1294,1,643,16,129,799,0,86,11,10,0,398,11,91,1,28,101,4,271,1,316,0,0,0,6,70,0,0,14,0,0,0,4,3,0,0,0,0,0,0,0,0,0,0,4386\n",
      "1470,0,334,281,0,975,2,225,12,0,22,631,23,0,127,7,12,334,2,36,0,0,644,27,12,5,1,0,683,0,1,276,26,0,0,5,75,0,0,1,0,0,18,0,0,0,0,3733\n",
      "641,1,135,649,0,1211,849,10,496,5,8,0,0,0,10,3,5,11,10,999,137,39,375,0,0,0,19,0,7,1,364,88,72,5,0,0,2,0,1,0,0,0,2,0,0,0,0,3845\n",
      "1163,0,786,861,0,785,86,599,291,0,239,205,3,0,47,0,37,2,4,141,158,0,240,40,0,0,7,9,39,0,0,57,20,1,0,0,364,0,0,0,0,0,0,0,0,0,0,3816\n",
      "568,2,523,348,0,1221,22,75,361,20,3,172,280,117,59,90,583,0,203,35,0,6,6,243,0,553,0,0,742,0,0,19,0,0,0,4,110,0,0,163,0,0,7,0,0,0,0,3465\n",
      "493,0,96,79,0,2091,238,72,258,0,422,146,0,36,8,104,1,5,42,49,0,1,138,0,40,0,0,2,419,0,0,56,506,0,0,0,4,0,0,7,0,0,5,0,0,0,0,4682\n",
      "395,0,46,1373,0,1394,55,0,48,34,48,0,24,124,123,336,40,23,17,1,638,0,63,7,0,0,0,0,5,0,0,109,243,0,0,0,3,0,0,2,0,0,0,0,0,0,0,4849\n",
      "694,0,6,414,0,1196,168,122,22,0,83,83,180,0,21,21,28,7,142,75,8,116,5,8,0,5,41,3,816,0,0,5,279,0,0,253,44,0,0,0,48,0,0,0,0,13,0,5094\n",
      "855,110,367,662,0,1401,4,107,29,2,20,7,101,0,108,29,358,2,53,18,7,9,639,2,0,1,4,0,202,0,0,53,8,0,0,0,244,0,0,14,0,0,0,0,0,0,0,4584\n",
      "600,0,1,148,0,1042,423,3,15,3,30,995,47,0,744,1,0,0,263,53,0,115,206,0,0,0,0,0,22,0,0,0,12,0,0,0,22,0,0,0,0,0,0,0,0,0,0,5255\n",
      "312,0,93,1111,0,1802,227,30,0,0,6,25,9,0,60,47,178,0,270,864,1,1,383,0,0,50,0,73,199,0,0,17,419,0,0,0,83,0,0,0,0,0,0,0,0,0,0,3740\n",
      "523,0,98,197,497,2342,15,0,662,0,52,222,10,12,23,37,203,0,423,444,1,0,61,39,0,18,109,2,148,0,1,32,15,0,0,0,14,0,0,177,0,0,0,0,0,0,0,3623\n",
      "297,0,175,232,0,484,0,170,35,0,358,31,2,0,2,0,6,0,104,22,168,150,42,1,0,57,0,2,409,0,1,511,551,0,0,0,16,0,53,6,0,0,13,0,0,0,0,6102\n",
      "936,26,35,73,1,958,4,0,1274,0,219,5,170,1,17,1,103,437,168,124,105,437,141,0,0,3,0,139,361,0,0,229,2,0,0,0,36,0,0,0,0,0,0,0,0,0,0,3995\n",
      "2003,0,304,329,0,852,121,9,209,5,95,135,693,0,216,0,33,6,2,1,0,2,416,38,0,111,3,0,122,0,0,43,134,0,0,0,1,0,0,0,0,0,0,17,0,0,0,4100\n",
      "724,190,18,877,0,1560,1002,725,429,75,0,0,49,17,103,0,25,0,15,52,0,0,638,0,0,24,0,0,267,15,0,146,2,0,0,1,0,33,0,0,0,0,0,0,0,0,0,3013\n",
      "646,4,332,674,0,861,381,6,897,4,145,149,38,36,108,3,1072,1,16,0,0,0,84,0,0,7,0,261,491,0,24,273,2,0,0,23,0,0,0,0,23,10,7,0,0,0,0,3422\n",
      "261,0,11,213,24,2144,35,337,178,45,423,0,127,13,72,0,0,0,2,11,196,0,13,0,0,0,0,111,261,0,0,597,284,0,0,47,10,0,0,0,1,0,0,0,2,0,0,4582\n",
      "1387,5,154,44,0,893,0,80,234,117,418,196,0,1,269,0,203,75,45,0,10,0,142,12,0,16,5,0,58,2,266,159,0,0,0,160,2,261,0,0,0,0,0,0,0,0,0,4786\n",
      "1154,31,13,1332,0,654,504,13,127,428,191,39,15,0,1,0,0,0,62,23,0,0,1,1,0,0,1,0,307,0,0,336,366,0,0,0,236,0,0,0,0,0,0,0,0,0,0,4165\n",
      "1315,5,309,698,0,759,31,8,110,26,69,245,622,232,74,0,22,0,17,7,4,0,6,6,0,2,1,272,443,0,0,93,61,0,0,0,22,0,0,0,0,0,1,0,0,0,0,4540\n",
      "1196,49,1,675,0,1126,412,5,24,15,674,157,36,0,1,1,0,0,161,79,958,3,203,0,0,0,8,0,3,2,14,242,0,0,0,0,157,0,0,1,0,184,0,0,0,0,0,3613\n",
      "267,0,228,584,58,634,450,0,240,0,137,2,202,0,48,58,20,61,75,151,2,0,424,0,0,10,35,85,16,0,805,0,846,0,0,3,4,0,0,0,0,0,49,0,0,0,0,4506\n",
      "1589,7,101,23,0,3168,54,1,20,43,124,129,14,16,107,27,0,0,2,20,0,0,25,0,0,8,0,31,2,0,0,111,131,0,0,0,0,0,0,0,0,0,0,1,0,0,0,4246\n",
      "2039,17,76,177,0,1770,15,851,320,0,366,52,314,0,39,0,208,0,9,71,17,166,26,1,0,0,8,75,133,0,0,4,0,0,0,0,121,0,0,0,0,3,8,0,0,0,0,3114\n",
      "1040,21,1246,901,412,789,809,0,76,0,0,158,7,79,55,0,31,0,157,2,118,51,191,0,11,2,0,15,188,0,678,46,1,0,0,0,162,0,0,24,2,1,0,0,0,0,0,2727\n",
      "341,70,337,88,2,322,415,2,494,4,97,107,148,0,217,781,0,27,161,421,35,0,722,5,4,0,0,31,3,0,19,281,1,0,0,0,1203,0,0,0,2,0,0,0,0,0,0,3660\n",
      "633,0,505,43,220,993,55,326,270,2,375,14,68,258,88,51,28,1,4,153,12,429,386,0,0,48,294,31,129,0,2,38,147,0,0,0,293,0,13,0,0,0,0,0,0,0,0,4091\n",
      "667,109,472,85,2,998,125,66,479,161,0,9,217,0,0,0,46,1,18,37,0,0,4,6,0,48,7,81,390,0,12,52,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,5878\n",
      "1427,0,210,376,49,1506,10,33,4,10,29,350,21,62,254,14,78,0,2,211,3,0,10,35,1188,18,0,12,34,0,25,330,261,0,0,1,4,0,0,244,7,0,0,0,0,0,0,3182\n",
      "704,0,771,390,0,2541,82,27,212,13,498,244,17,161,0,12,38,0,22,533,58,62,504,0,303,30,0,1,70,0,5,11,5,5,0,0,1,0,0,0,0,0,0,33,0,0,0,2647\n",
      "1450,3,99,303,4,385,267,83,182,55,44,0,329,11,80,1,294,130,22,3,0,6,205,0,0,1,18,8,88,25,0,6,29,0,260,0,17,0,0,420,0,0,0,0,0,0,0,5172\n",
      "431,1,118,195,227,1150,579,18,77,0,16,4,275,196,0,44,16,1011,788,13,0,0,20,8,0,4,0,1,130,0,0,32,303,327,0,0,70,0,93,3,0,0,64,0,0,0,0,3786\n",
      "150,0,757,821,1,535,48,0,108,0,132,7,288,431,1,1,56,68,122,300,14,0,276,0,0,34,6,0,438,0,2,2,0,0,0,0,63,0,0,0,0,0,0,0,0,0,0,5339\n",
      "648,0,239,947,0,935,4,0,189,12,217,0,33,0,3,0,808,6,99,612,0,29,12,0,0,11,5,94,10,0,0,23,0,0,0,0,32,0,0,2,0,0,1,0,0,0,0,5029\n",
      "2104,63,4,505,0,1186,420,95,320,54,69,157,258,307,332,162,1,20,0,111,42,16,85,78,24,0,1,1,277,0,0,39,281,0,0,0,1,0,0,0,2,0,1,0,0,0,0,2984\n",
      "684,0,895,53,159,500,199,0,264,2,342,0,12,5,1,0,329,202,446,78,66,0,419,0,0,0,0,1,726,0,91,256,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4149\n",
      "1041,96,176,378,0,2298,56,670,253,0,1,740,43,89,117,245,12,1,23,39,0,2,171,21,1,0,0,0,72,7,0,827,73,0,0,37,75,0,0,0,0,0,0,0,0,0,0,2436\n",
      "864,711,350,1101,0,2048,80,7,25,1,245,19,228,0,2,0,134,0,50,14,5,0,307,13,0,33,0,360,5,0,5,85,116,182,3,77,0,0,0,0,0,0,0,18,0,0,0,2912\n",
      "974,22,88,247,8,1109,115,13,131,0,17,130,6,40,686,0,95,296,32,9,0,284,81,338,0,0,328,0,109,0,25,78,1,0,0,0,65,0,0,1,0,0,0,0,0,0,0,4672\n",
      "37,0,344,263,0,647,73,0,12,16,424,0,47,0,113,1,402,112,14,0,225,2,47,0,1,107,88,0,1064,0,0,1066,1129,0,25,9,336,0,0,0,0,0,4,0,0,0,0,3392\n",
      "1616,9,104,493,98,676,83,0,101,126,4,0,81,0,101,0,428,0,248,181,70,16,3,7,0,0,52,0,91,3,8,219,495,0,0,0,0,0,0,0,96,0,2,0,13,0,0,4576\n",
      "765,349,441,285,78,2028,418,1,313,0,147,0,153,1,1,183,85,0,274,572,0,202,29,131,0,51,0,53,44,0,0,11,0,389,0,0,18,0,0,0,0,0,0,0,0,0,0,2978\n",
      "2120,0,23,538,0,786,130,1,535,0,67,103,19,2,0,196,14,0,212,119,14,0,242,0,43,1,12,126,191,0,0,38,161,0,0,0,0,0,0,138,0,0,0,0,0,0,0,4169\n",
      "161,206,261,787,5,1441,79,1059,14,92,22,17,17,4,98,96,14,24,131,278,15,0,0,40,3,0,7,0,227,49,52,85,25,0,0,0,4,0,0,0,0,0,0,23,0,11,0,4653\n",
      "369,0,1,240,0,2111,33,0,331,1,5,41,0,151,0,365,559,61,478,257,232,0,78,29,0,0,0,0,457,0,27,0,71,0,0,80,73,0,0,0,0,0,0,0,0,0,0,3950\n",
      "156,310,43,232,81,1570,164,10,212,0,29,6,494,25,5,255,0,89,10,1,21,9,225,0,0,0,0,6,149,0,0,1303,102,0,0,0,72,0,0,4,0,0,0,0,0,8,0,4409\n",
      "650,0,19,576,0,2185,18,89,265,0,50,14,16,61,48,0,76,0,24,751,0,77,81,192,0,0,0,0,362,0,0,167,395,0,0,2,0,0,0,12,0,0,0,1,0,5,0,3864\n",
      "2143,25,33,336,0,2094,40,1,109,0,485,26,54,0,126,251,58,30,115,89,14,0,11,479,0,60,1,75,287,0,0,385,24,0,0,0,487,0,0,0,0,0,64,0,0,0,0,2098\n",
      "773,1,562,611,7,2419,251,101,312,6,476,15,69,0,584,267,7,22,4,30,0,0,8,0,13,82,0,0,25,0,74,12,3,0,0,0,359,0,0,3,14,0,688,0,0,0,0,2202\n",
      "1238,0,8,54,0,1887,58,0,433,83,0,1435,3,104,286,0,7,14,154,4,49,1,50,2,441,0,0,102,58,0,0,98,3,0,0,0,11,0,0,24,0,0,0,407,0,0,557,2429\n",
      "870,1,147,97,27,724,130,15,274,27,199,36,2,0,933,128,24,0,202,40,10,0,23,16,0,0,0,23,905,0,81,0,518,0,0,483,66,0,0,9,0,0,0,0,0,0,0,3990\n",
      "660,225,201,1088,32,2427,395,0,92,0,16,244,61,401,5,1,91,145,122,18,0,16,50,1,0,373,0,2,326,0,34,529,167,0,0,9,2,0,0,0,0,0,3,0,0,0,0,2264\n",
      "268,0,101,450,0,595,59,0,9,2,651,177,31,10,37,72,3,153,26,2,7,68,84,0,8,255,0,0,352,0,0,322,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,6256\n",
      "1318,0,13,235,0,551,208,29,31,0,0,471,68,25,325,2,40,425,167,33,42,0,641,0,1,1,2,75,50,1,0,300,63,0,0,0,1,0,901,75,25,0,0,0,26,0,0,3855\n",
      "1801,0,35,42,1,772,1560,0,324,2,184,10,2,0,380,0,0,1,16,2,0,8,67,0,37,3,0,0,408,0,2,2,15,0,0,0,711,0,0,0,0,0,0,0,0,0,1,3614\n",
      "596,11,297,29,0,1242,102,45,11,572,18,153,0,0,87,20,107,39,7,0,0,0,166,0,0,356,0,0,89,0,162,4,163,0,0,0,184,0,0,5,0,0,19,0,0,0,0,5516\n",
      "409,0,171,481,1,2338,9,363,514,406,30,0,6,1,209,14,230,0,31,5,1,176,55,0,32,190,176,0,216,0,0,304,511,0,0,0,56,0,0,0,0,0,0,0,0,0,0,3065\n",
      "356,0,75,353,178,321,409,751,116,177,583,1,0,0,59,32,95,858,103,64,244,0,71,0,0,0,0,0,244,9,18,74,508,0,0,0,116,0,0,1,0,1,7,0,0,0,0,4176\n",
      "866,50,183,151,255,859,300,26,476,0,167,3,1,43,1,32,6,16,91,70,0,30,15,299,0,0,0,1,793,0,22,64,171,0,0,0,29,0,0,0,0,0,0,0,0,0,0,4980\n",
      "2345,285,104,216,259,1750,718,12,402,108,190,185,129,29,433,243,56,35,61,59,128,20,0,1,0,0,4,0,118,0,0,69,0,0,0,0,291,0,0,0,0,0,0,1,0,0,0,1749\n",
      "1044,0,81,413,0,254,1,474,35,50,154,151,39,60,194,0,107,0,6,1416,0,298,338,0,0,8,0,0,78,0,0,17,0,0,1,0,100,0,0,1,105,0,0,0,0,0,0,4575\n",
      "682,0,129,152,0,708,55,735,164,0,230,0,1735,3,379,11,42,12,0,0,0,15,9,1,41,88,127,2,28,0,8,11,1,0,0,1,1,0,0,3,0,0,0,0,17,0,0,4610\n",
      "1411,0,200,382,129,1289,0,1,7,2,544,135,6,0,35,0,1,47,2,360,0,62,139,9,0,0,570,247,3,0,0,10,14,0,0,0,4,0,0,0,0,0,0,0,0,0,17,4374\n",
      "435,0,510,381,0,2236,1,96,944,0,118,5,4,80,105,0,2,0,177,0,0,49,32,6,0,1,0,0,685,0,0,2,0,0,0,0,0,0,0,4,42,0,24,0,0,0,0,4061\n",
      "868,317,1,602,0,2364,20,0,308,50,366,2,0,1,45,6,9,0,320,465,0,0,95,104,0,0,0,1,120,0,9,104,66,0,0,0,0,0,0,64,0,0,0,0,0,0,0,3693\n",
      "1218,0,126,170,0,1544,94,25,224,19,100,31,0,277,397,4,618,4,102,12,0,0,103,29,0,85,0,78,112,0,1,0,41,0,0,0,0,0,0,0,0,14,0,0,0,0,0,4572\n",
      "1467,0,78,82,5,2945,320,12,805,230,160,53,0,28,41,27,41,44,9,51,2,197,12,0,0,5,0,0,127,0,0,16,116,0,0,0,1,0,2,0,0,0,207,0,0,0,0,2917\n",
      "797,0,1507,113,0,1109,180,0,211,0,121,98,414,0,11,4,13,7,11,73,6,5,385,43,0,0,38,0,0,0,7,114,12,0,0,0,16,0,0,3,0,0,229,0,0,0,0,4473\n",
      "230,230,446,687,72,899,18,18,35,580,493,4,518,0,36,0,0,42,400,737,3,0,0,2,0,0,38,1,46,375,0,81,102,0,0,1,81,0,0,0,38,0,0,0,0,0,0,3787\n",
      "177,52,0,555,0,1451,94,0,116,616,826,63,24,7,46,551,109,178,39,70,0,0,14,0,46,277,188,0,183,7,0,587,2,0,0,0,302,0,50,2,0,0,0,0,0,0,0,3368\n",
      "1749,0,112,202,0,2169,366,5,15,56,119,116,182,20,92,0,460,3,3,24,0,0,488,3,0,290,5,0,459,0,0,255,5,0,0,0,15,0,0,0,0,0,0,0,0,0,0,2787\n",
      "206,0,1130,223,4,1004,4,0,112,0,292,648,163,139,12,0,15,29,307,60,0,2,0,0,1,225,0,0,956,0,0,131,0,0,0,0,501,0,0,0,0,0,0,0,0,0,0,3836\n",
      "639,47,320,453,0,792,16,0,436,2,88,37,1,3,20,38,37,0,3,930,0,0,19,0,0,0,30,57,211,0,0,1213,275,0,0,12,1,0,0,19,0,0,0,0,0,0,0,4301\n",
      "189,35,87,1938,0,1890,98,67,65,0,584,73,3,240,1,58,8,3,249,15,156,5,4,6,0,48,0,0,26,0,0,295,12,0,133,5,33,0,0,0,0,0,0,0,0,0,0,3674\n",
      "571,0,1233,321,75,2339,14,87,227,0,185,274,0,15,2,6,297,0,54,3,28,0,107,0,0,20,0,0,259,0,0,19,29,0,0,7,26,0,0,11,0,0,0,0,0,0,0,3791\n",
      "1707,0,533,1448,0,707,1,0,9,0,11,740,3,2,46,23,22,167,653,12,0,0,68,0,0,0,0,1,375,0,0,23,39,0,0,193,0,0,0,1,0,0,0,0,0,0,0,3216\n",
      "91,55,380,480,0,1016,162,327,1271,497,23,22,239,0,31,0,21,1,22,3,1,1,0,321,0,305,0,0,700,0,0,59,77,0,0,166,9,0,0,1,0,0,0,0,0,0,0,3719\n",
      "418,9,46,911,86,541,1,41,490,0,758,0,321,23,20,1,78,84,65,338,0,1,3,41,2,634,1,7,224,0,0,93,1,0,0,0,140,0,0,19,2,0,0,0,0,0,0,4601\n",
      "609,0,453,1582,8,522,3,8,401,5,3,5,45,6,17,141,25,111,0,512,1,734,773,0,58,6,0,0,809,0,0,140,1,0,0,0,82,0,0,0,0,0,3,0,0,0,0,2937\n",
      "2642,38,69,692,1,917,73,86,223,9,15,83,98,59,532,1,0,29,19,109,2,0,46,0,0,37,0,0,446,0,73,19,1097,0,0,0,28,1,0,0,0,0,0,0,0,0,0,2556\n",
      "722,0,558,1078,112,829,448,48,1421,0,0,0,1,30,211,136,6,6,20,1,0,72,0,0,22,30,0,2,69,0,2,17,29,2,0,0,47,0,0,2,59,0,1,0,0,0,0,4019\n",
      "1312,189,7,579,0,2032,48,78,282,67,214,8,263,356,128,3,479,9,55,283,1,65,7,117,0,183,0,4,41,0,283,44,3,0,2,0,7,0,0,0,0,0,0,0,0,0,0,2851\n",
      "1065,136,0,1121,1,526,2,0,44,517,188,43,21,1,239,38,0,220,100,0,25,5,233,0,104,46,0,0,13,0,23,71,335,0,0,0,2,0,0,2,0,0,0,0,0,0,0,4879\n",
      "1512,15,63,643,22,1321,0,16,293,0,15,4,188,0,287,0,192,0,66,41,0,0,65,10,0,0,200,2,19,0,0,929,393,0,0,0,136,0,24,2,0,0,82,0,0,0,0,3460\n",
      "652,142,374,254,28,1077,145,1,286,0,12,7,0,0,31,0,20,191,35,1,342,81,34,0,0,3,3,0,58,0,18,5,2,0,0,0,67,0,29,0,0,0,1,0,0,0,0,6101\n",
      "1374,53,303,1283,352,1923,127,19,36,0,225,3,226,51,17,0,41,28,9,14,13,2,30,0,0,4,8,0,254,26,26,21,0,0,0,0,180,0,0,0,2,0,0,0,0,0,0,3350\n",
      "578,58,138,875,20,730,38,89,1694,0,170,0,0,483,0,0,280,6,235,119,0,0,0,359,0,2,0,0,324,0,0,98,22,0,0,0,3,0,0,0,0,0,41,0,0,0,0,3638\n",
      "418,0,25,1094,0,2274,14,46,300,0,14,71,15,3,251,63,155,71,557,6,0,0,342,0,0,0,0,219,623,0,0,121,119,0,0,1,421,0,39,0,1,0,0,0,109,0,0,2628\n",
      "561,0,8,419,0,858,188,239,112,22,221,188,646,0,3,205,362,6,232,44,21,9,222,0,0,0,0,2,149,0,0,269,20,0,0,0,277,0,0,0,0,0,0,0,0,0,0,4717\n",
      "533,141,2,24,0,766,20,28,135,9,31,0,17,133,466,378,6,0,93,238,0,192,13,0,19,2,207,634,978,0,0,192,43,0,6,0,102,0,0,0,0,0,0,0,0,0,0,4592\n",
      "266,0,46,293,8,2097,281,5,732,30,20,1572,2,39,12,1,567,4,33,208,0,0,209,0,0,0,0,69,40,0,0,22,1,0,0,0,5,0,0,200,0,0,0,4,0,0,0,3234\n",
      "1281,0,6,921,104,886,460,179,340,3,0,193,27,45,484,0,0,9,118,179,4,0,378,0,0,0,0,0,128,0,183,223,807,0,0,0,181,0,0,0,0,0,0,0,0,0,0,2861\n",
      "337,0,694,341,11,416,257,332,115,9,226,12,3,139,138,32,77,0,2,3,1,72,42,0,0,3,4,0,3,0,216,6,0,0,0,90,928,0,0,8,0,0,0,0,0,0,0,5483\n",
      "1131,0,1027,294,1,741,0,86,633,224,119,76,51,42,78,11,1,0,244,10,0,0,104,1,0,839,0,3,468,0,8,56,296,0,0,285,11,0,0,17,0,0,0,1,0,0,0,3142\n",
      "589,0,2,338,0,797,3,757,112,74,1,165,0,1,0,0,241,4,50,33,0,2,295,4,0,152,9,38,43,0,0,695,1,0,0,0,0,0,0,206,0,0,0,0,0,0,0,5388\n",
      "904,437,11,536,1,545,106,0,425,2,30,6,4,5,34,0,124,0,583,1,0,134,383,202,0,0,0,0,247,0,0,0,4,0,0,343,18,0,0,0,0,0,0,0,0,0,0,4915\n",
      "661,0,25,895,0,1051,57,119,602,0,9,132,448,12,83,0,107,14,259,38,0,0,179,89,12,8,0,12,394,0,40,179,806,0,0,0,16,0,1,0,0,0,0,0,0,0,0,3752\n",
      "1322,14,1216,1191,0,824,0,3,477,0,24,17,304,10,150,284,25,2,203,9,13,0,67,0,0,9,125,38,256,0,0,317,4,0,0,0,79,0,0,138,0,0,0,0,0,0,0,2879\n",
      "1034,0,106,45,0,842,23,4,347,0,37,4,44,1,77,0,72,101,687,131,547,16,282,0,3,3,956,1,71,0,0,181,0,0,0,12,96,0,0,0,0,0,35,0,0,0,0,4242\n",
      "521,0,247,68,1,618,14,1190,2232,437,57,34,6,0,0,0,126,81,1,316,20,3,118,0,61,104,0,0,30,0,0,18,334,0,0,108,6,0,0,1,0,0,0,0,0,0,0,3248\n",
      "798,0,21,242,0,1383,25,0,364,0,44,0,43,172,358,25,475,1,7,106,0,1081,347,1,0,0,2,2,5,42,0,127,1,0,0,18,31,0,0,0,11,0,0,0,0,0,0,4268\n",
      "931,2,151,750,0,843,5,4,782,21,3,143,2,17,17,0,0,0,28,41,43,75,1,0,0,10,49,0,443,0,0,856,2,39,0,11,2,0,0,6,0,0,0,0,0,0,0,4723\n",
      "373,0,128,1089,9,1176,23,139,305,12,13,2,9,0,80,0,14,55,211,8,17,256,44,3,0,0,1,0,1848,0,870,2,0,0,0,5,1,0,0,0,0,0,13,0,0,0,0,3294\n",
      "1378,24,11,877,89,1897,18,468,816,1,75,75,0,3,73,0,270,58,50,155,0,13,542,2,0,17,0,19,228,0,17,196,1,0,0,0,395,0,12,12,0,1,0,89,0,0,0,2118\n",
      "233,0,106,593,0,784,49,22,287,0,547,284,11,16,37,91,64,0,68,114,253,71,961,8,5,3,65,15,263,0,0,1,46,0,0,43,84,0,0,585,14,0,99,0,0,1,0,4177\n",
      "949,0,69,81,8,2254,127,14,14,179,93,0,514,10,441,1,37,379,0,0,0,0,0,0,0,1,0,0,16,605,354,150,281,598,322,0,4,421,0,0,0,0,3,0,0,0,0,2075\n",
      "1778,19,221,431,95,1309,282,0,663,0,0,344,51,35,727,0,24,137,192,0,0,0,85,0,0,3,0,0,139,0,0,6,0,13,0,65,125,0,0,4,0,0,0,0,0,0,0,3252\n",
      "700,88,234,1016,33,2054,40,106,72,0,27,1,40,65,106,0,133,2,0,60,485,389,468,2,0,16,80,0,73,0,0,807,26,0,0,0,61,0,0,0,0,0,0,0,0,0,0,2816\n",
      "505,1,80,3103,0,1203,17,184,160,0,285,0,371,36,8,0,113,1,225,0,0,0,91,0,67,52,11,0,323,0,226,8,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,2878\n",
      "1585,4,766,116,0,1511,8,0,0,0,9,29,107,353,27,0,428,0,121,2,224,0,202,0,2,6,1,0,263,0,0,159,11,0,0,0,3,0,0,102,0,0,0,0,0,0,0,3961\n",
      "620,0,393,239,0,1113,914,0,64,198,429,10,442,373,15,0,0,0,36,912,204,0,10,128,1,0,2,0,240,0,0,69,7,0,0,0,8,0,0,0,0,0,0,0,0,0,0,3573\n",
      "442,491,1591,408,0,1027,77,0,0,0,372,28,2,206,0,0,883,15,99,126,0,0,573,139,3,0,0,0,272,0,103,23,98,0,0,0,3,0,0,7,0,0,0,0,0,0,0,3012\n",
      "1449,8,157,82,0,496,2,6,1153,3,0,450,7,2,184,0,0,49,40,10,5,2,115,8,0,33,0,0,480,0,12,26,250,0,0,0,231,0,0,115,0,0,2,0,0,0,0,4623\n",
      "739,356,688,211,0,766,155,268,870,0,123,12,182,0,3,1,309,0,7,2,0,0,486,14,0,119,11,0,34,0,0,97,68,0,0,0,71,0,0,0,0,0,0,0,0,0,0,4408\n",
      "1214,0,125,344,195,422,44,0,1212,173,36,111,74,63,153,0,145,9,143,8,13,15,139,0,0,245,27,0,726,0,0,0,4,0,0,0,33,0,0,0,3,0,0,1,0,0,0,4323\n",
      "1497,733,24,810,0,1038,61,107,200,30,21,0,105,980,9,214,84,0,0,25,0,19,205,0,0,111,161,0,111,0,0,257,6,0,0,4,3,0,0,0,0,0,11,0,0,0,0,3174\n",
      "2074,1,843,544,0,1354,7,0,27,0,270,248,37,0,0,0,0,0,90,529,0,0,1,0,0,80,0,3,167,0,0,7,187,0,0,0,58,0,0,4,0,0,0,0,0,0,0,3469\n",
      "1332,0,495,615,0,1983,94,5,40,10,275,2,0,211,2,0,84,82,1034,42,0,4,36,0,1,0,2,0,1,270,3,953,125,0,0,0,26,0,63,0,0,0,1,0,0,0,0,2209\n",
      "751,0,727,1252,28,1183,292,713,302,0,456,28,27,0,172,23,8,31,5,23,1,1,596,37,37,2,0,0,229,0,4,142,36,0,0,0,6,0,0,13,0,0,0,0,8,0,362,2505\n",
      "1084,0,1902,687,0,504,186,621,253,2,210,0,127,211,0,1344,102,29,0,126,0,3,3,141,0,2,3,6,43,0,2,0,4,0,0,0,2,0,0,174,0,0,0,0,0,0,0,2229\n",
      "864,0,692,318,0,1083,7,41,329,362,0,73,140,2,160,0,0,0,2,4,2,0,7,0,0,0,4,128,236,0,0,0,4,0,86,495,3,0,0,10,6,0,16,0,0,4,0,4922\n",
      "918,19,0,239,0,1056,7,375,357,0,28,369,780,0,0,288,1,38,7,0,18,0,193,312,20,4,0,0,250,0,3,3,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,4709\n",
      "748,0,296,345,0,1768,36,0,16,0,616,0,759,45,114,146,60,2,466,523,1,22,228,66,3,18,750,0,50,0,0,94,31,0,0,7,24,0,0,2,1,0,9,0,0,0,0,2754\n",
      "1018,1,312,626,0,1478,229,10,205,64,49,71,0,268,195,0,810,39,53,41,131,0,208,128,0,0,0,10,191,0,0,132,66,0,0,0,0,0,0,1,0,0,0,0,1,0,0,3663\n",
      "1166,0,115,549,0,1842,0,148,221,169,433,30,314,4,22,0,42,32,74,194,16,0,21,0,0,0,0,0,256,0,0,203,183,236,0,0,0,0,0,1,0,0,0,0,0,0,0,3729\n",
      "408,0,14,855,0,377,703,286,126,234,0,7,343,151,85,0,19,126,321,697,535,3,0,0,45,1246,1,23,133,0,0,13,13,0,0,188,0,0,66,6,2,0,0,0,0,0,0,2974\n",
      "1507,0,715,90,0,1082,13,73,243,95,590,101,20,1112,237,194,0,27,316,381,0,71,27,0,0,0,0,0,203,0,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2865\n",
      "513,0,399,657,0,1207,241,424,355,0,596,123,7,95,0,60,45,0,158,0,784,0,568,31,0,22,97,1,162,0,2,96,97,0,16,6,0,0,16,0,0,0,0,15,0,0,0,3207\n",
      "2163,88,284,338,66,807,212,2,752,36,648,43,95,5,0,4,2,119,0,3,0,28,0,0,0,16,0,195,8,0,0,84,315,0,0,0,331,0,0,0,0,243,0,0,0,0,0,3113\n",
      "615,40,166,67,51,2187,17,6,242,14,0,61,0,2,14,10,3,2,320,51,61,0,145,0,0,0,62,0,51,0,30,16,6,0,0,0,126,0,0,0,0,84,5,261,0,0,0,5285\n",
      "619,875,82,526,19,698,209,0,314,0,113,0,127,1319,0,17,32,0,57,484,1,1,119,0,0,372,57,0,29,0,4,633,6,0,0,0,0,323,0,11,6,0,0,0,2,0,0,2945\n",
      "480,105,730,809,105,504,47,0,245,132,110,1189,3,1,119,176,262,263,2,66,0,81,48,1,0,0,177,1,343,0,3,264,8,0,0,13,129,0,0,0,1,0,0,0,0,0,0,3583\n",
      "1126,289,172,307,0,1998,134,0,12,1,66,20,119,14,60,0,0,17,48,3,0,508,34,1,0,32,0,26,106,0,25,12,30,0,0,0,114,0,0,6,0,0,0,0,5,0,0,4715\n",
      "1298,0,51,566,323,651,154,0,13,0,25,911,0,0,380,0,0,17,41,1694,0,161,28,2,5,0,205,0,1,0,14,296,160,0,0,0,10,0,0,13,0,0,0,0,0,0,0,2981\n",
      "607,2,7,233,0,2334,174,5,218,0,658,11,17,0,0,103,0,1,129,168,15,0,2,0,0,15,24,0,231,412,0,140,46,0,0,0,66,0,0,0,0,0,0,0,0,0,0,4382\n",
      "928,451,492,15,57,324,7,328,1159,0,3,7,2,0,71,7,4,158,0,70,0,0,133,0,4,1,323,0,85,0,43,73,283,0,0,0,1404,0,0,2,1,0,0,0,0,44,0,3521\n",
      "1360,0,1,118,154,894,36,564,201,24,113,105,2,5,242,32,90,51,121,284,205,74,286,216,218,0,46,54,388,7,17,1030,118,1,0,0,319,0,0,0,0,0,0,0,0,0,0,2624\n",
      "2852,0,36,578,12,376,130,176,55,0,38,1,2,65,28,0,37,0,44,61,0,5,6,4,0,0,13,14,670,0,1,101,36,0,0,525,26,0,0,1,0,0,0,0,0,0,0,4107\n",
      "1422,0,10,473,12,1085,103,21,5,1,435,0,73,9,63,179,1,4,74,149,68,94,109,13,0,20,25,0,91,0,0,118,58,0,56,17,897,0,0,0,0,0,0,0,0,26,0,4289\n",
      "2535,38,585,204,0,537,27,0,178,0,7,13,1,15,408,6,87,296,0,0,0,67,47,224,86,502,0,85,950,0,0,0,97,0,0,0,4,0,0,66,0,155,0,0,0,0,0,2780\n",
      "574,0,93,904,121,627,25,12,414,12,700,48,50,0,1045,1,66,9,14,3,9,6,40,0,186,0,0,66,0,0,0,390,0,0,0,30,112,0,19,0,2,0,0,0,0,0,0,4422\n",
      "200,46,172,135,0,2691,33,84,552,6,217,128,0,7,24,0,0,480,360,40,0,0,575,7,0,0,0,457,454,0,0,557,3,0,0,4,84,0,0,0,1,7,0,0,0,0,0,2676\n",
      "1003,0,440,265,6,225,204,51,320,35,121,3,110,15,1526,9,120,9,527,218,12,13,51,8,0,0,0,0,242,0,62,19,30,0,0,0,147,0,0,126,0,0,0,0,0,0,0,4083\n",
      "920,0,16,749,2,1117,637,53,183,0,20,0,405,1,363,0,1,0,61,61,0,3,2,1328,28,7,0,101,551,0,0,8,48,0,0,1,427,11,0,0,0,3,0,0,0,0,0,2893\n",
      "713,12,90,221,0,401,3,7,254,12,14,2,120,317,12,37,19,27,31,524,0,0,20,0,3,1,54,0,471,0,2,175,15,0,0,1,3,0,0,0,3,0,718,0,1,0,0,5717\n",
      "656,125,21,438,0,1332,72,0,89,1,306,23,26,9,30,2,1,0,2,322,773,6,716,43,0,18,0,2,69,269,71,468,1284,0,0,134,1,115,0,0,0,0,0,0,0,0,0,2576\n",
      "1637,0,91,687,0,2201,3,5,18,0,3,336,0,12,88,1,50,0,93,222,0,0,4,0,24,1,11,3,202,0,7,253,0,9,0,0,1,0,0,0,0,179,0,0,0,0,8,3851\n",
      "1271,5,178,893,0,719,61,72,342,0,61,99,58,0,7,37,3,155,12,46,0,8,86,150,0,3,125,0,13,0,55,101,201,0,0,0,1,0,0,0,531,0,0,0,0,0,0,4707\n",
      "1719,0,803,60,23,842,722,487,69,320,28,4,0,0,3,48,221,6,116,131,0,0,153,344,109,2,231,3,91,0,0,65,107,0,0,1,0,0,1,22,0,41,0,0,0,0,0,3228\n",
      "626,22,1,127,5,808,3,28,62,0,275,238,0,0,5,165,55,0,600,116,221,0,256,0,0,429,35,0,181,0,4,164,30,0,0,15,58,0,0,0,5,0,0,0,0,0,0,5466\n",
      "1289,0,0,818,0,1478,24,0,1219,0,249,0,415,1,9,0,7,0,26,168,0,67,681,143,0,5,3,5,267,0,23,349,4,0,0,0,1,0,0,2,2,0,0,0,0,0,0,2745\n",
      "296,0,473,404,139,2737,145,533,714,1,4,0,1,7,474,1,0,3,109,22,126,2,67,4,0,0,684,0,2,0,0,2,24,8,0,0,1,0,0,0,0,0,1,0,0,0,0,3016\n",
      "1014,68,12,773,129,1979,129,0,338,64,4,0,101,0,102,0,358,24,222,4,0,0,5,0,0,28,2,0,161,4,0,483,390,0,0,211,0,0,0,0,0,0,0,0,0,0,0,3395\n",
      "670,0,485,466,0,470,668,14,166,0,522,917,101,0,112,1,90,72,14,831,0,0,9,0,0,5,25,143,43,0,1,229,7,0,0,1,135,0,0,0,46,0,0,0,5,0,0,3752\n",
      "1558,1,89,253,0,865,220,0,547,1,14,0,28,0,81,5,4,280,2,232,0,32,801,0,0,65,0,0,1633,0,0,141,6,0,0,0,9,0,0,9,0,46,1,0,0,0,0,3077\n",
      "390,0,169,948,0,972,237,405,519,0,74,149,15,0,0,553,1,280,715,137,3,0,69,110,103,1,7,0,39,0,50,0,536,0,0,0,5,0,6,0,21,0,0,0,0,0,0,3486\n",
      "1011,5,1017,145,0,1484,3,19,415,42,87,27,59,195,0,59,45,1,14,0,0,0,112,0,57,94,0,146,122,0,408,77,425,0,0,0,3,0,0,0,0,0,0,0,0,0,0,3928\n",
      "683,0,775,1010,0,920,618,82,413,0,23,200,57,0,155,0,3,66,10,9,0,0,1,0,0,0,0,0,345,0,0,42,191,0,0,0,5,0,0,0,24,0,0,114,0,0,0,4254\n",
      "829,0,142,74,0,1363,21,55,267,76,30,12,374,908,970,0,103,65,3,559,852,2,144,0,0,35,0,0,124,0,272,143,4,0,0,0,13,0,0,0,0,0,105,0,1,0,0,2454\n",
      "1422,63,72,628,7,1572,38,43,42,118,85,478,0,0,5,627,77,6,100,250,0,0,0,29,0,8,0,0,844,0,0,136,155,0,0,0,41,3,0,6,0,0,0,0,0,0,0,3145\n",
      "1755,571,120,16,0,980,20,676,207,0,138,290,45,10,95,1,3,16,571,29,0,9,82,0,0,70,0,9,645,1,7,25,397,0,35,6,4,0,0,21,1,0,0,0,0,0,0,3145\n",
      "1391,0,226,493,14,1631,29,550,56,0,49,409,8,2,10,35,0,12,24,93,0,13,94,0,0,0,0,647,418,0,49,47,18,0,0,0,3,0,0,1,0,0,0,0,0,29,0,3649\n",
      "1321,5,41,1402,0,2246,6,112,370,12,24,73,3,3,525,1,93,89,24,598,0,286,584,11,18,11,1,19,199,0,11,0,298,0,0,10,31,0,0,0,58,0,3,0,0,0,0,1512\n",
      "1179,0,42,480,0,1437,210,0,27,178,5,353,25,0,1,103,7,68,126,32,0,1,313,0,0,43,14,5,246,1,0,181,41,0,0,0,477,0,72,0,0,0,0,0,0,0,0,4333\n",
      "1604,2,19,70,0,473,159,0,649,0,155,5,0,0,15,2,4,3,14,86,0,5,36,0,0,1,0,0,42,0,21,249,30,0,0,0,519,0,0,300,0,0,0,0,0,0,0,5537\n",
      "554,0,205,79,41,1768,107,4,51,0,72,453,0,0,116,0,0,852,1152,35,0,0,10,0,2,1,0,1,11,6,0,141,113,0,0,0,179,0,0,132,16,0,0,0,0,0,0,3899\n",
      "479,0,165,295,0,829,11,58,310,163,60,111,0,66,5,174,101,8,56,10,0,0,591,0,13,6,0,4,223,0,0,76,111,0,48,0,5,0,18,0,0,0,0,0,0,0,0,6004\n",
      "1061,0,165,342,0,1452,17,2,8,0,12,36,0,57,346,0,35,0,83,31,31,0,103,1007,0,0,1,1,45,0,61,608,3,12,0,0,23,0,0,0,0,0,0,0,0,92,0,4366\n",
      "203,0,620,223,0,3086,448,60,268,0,72,48,115,0,3,2,52,75,635,7,30,11,117,62,0,0,0,253,325,0,0,8,691,0,0,88,1,0,0,0,0,0,0,170,0,0,0,2327\n",
      "930,479,78,193,2,896,49,39,46,8,172,86,14,71,61,10,3,7,101,3,4,0,846,21,0,0,0,14,751,0,0,377,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,4707\n",
      "855,286,861,291,127,1157,194,0,61,81,184,0,13,0,62,109,0,0,119,338,0,181,321,0,0,0,77,0,163,0,21,37,21,0,0,0,97,0,1,0,0,67,0,0,0,0,0,4276\n",
      "306,3,315,327,20,1200,1156,0,586,258,325,9,256,56,82,0,2,54,27,101,0,7,123,0,51,2,1,4,746,0,18,3,11,0,0,0,1,0,0,0,3,0,9,0,0,4,0,3934\n",
      "1068,34,22,469,0,1756,135,0,407,32,385,9,8,59,0,2,1,5,10,11,5,0,83,66,0,0,0,0,29,0,831,2,0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,4554\n",
      "336,3,875,836,43,847,384,0,379,0,1,1020,20,0,505,21,111,8,0,149,0,0,37,0,35,75,0,0,286,0,19,571,15,0,0,58,0,0,0,10,0,0,0,0,0,0,0,3356\n",
      "2123,0,1960,30,7,630,89,0,194,0,16,1,2,93,0,4,0,0,442,78,1,0,65,0,0,1,51,0,144,0,7,508,114,2,0,42,0,0,1,0,0,0,0,48,0,0,0,3347\n",
      "1347,88,1320,460,9,561,38,0,314,4,186,8,14,0,70,29,98,855,42,2,0,62,125,5,0,83,0,103,57,0,0,6,0,0,0,0,524,0,26,0,33,0,0,0,0,0,0,3531\n",
      "906,33,7,463,1,1108,19,21,0,332,30,0,10,4,295,0,56,63,103,1,10,0,0,43,0,27,186,157,168,0,132,116,11,0,0,0,228,0,0,0,0,0,1480,0,0,0,0,3990\n",
      "622,0,5,133,0,246,1,50,1678,0,1,33,107,256,22,0,25,1,15,48,4,32,1370,1,0,0,650,0,291,0,5,4,0,0,0,1,3,0,15,0,28,1458,0,112,0,0,0,2783\n",
      "1252,57,239,21,1,1367,27,349,392,88,71,8,10,2,0,10,414,475,43,53,0,0,923,9,53,0,0,25,0,0,0,204,10,0,0,0,3,0,0,2,0,0,0,0,0,0,0,3892\n",
      "1602,0,116,65,1,1050,230,0,1440,0,4,3,159,13,0,0,1,0,0,1149,0,25,373,1,0,169,0,330,74,0,4,8,1,0,0,0,2,0,0,0,0,0,0,20,0,0,0,3160\n",
      "1154,0,11,283,0,2135,275,340,8,50,0,28,265,43,73,0,159,0,130,63,5,62,939,6,345,140,0,0,18,0,1,227,59,0,0,2,52,0,0,0,0,0,0,0,0,294,0,2833\n",
      "2506,0,362,1352,0,950,1,137,239,0,0,29,133,0,9,0,269,1,84,11,2,4,540,0,0,0,0,127,44,0,31,102,33,0,0,0,46,0,0,0,0,0,0,0,0,0,0,2988\n",
      "1006,4,294,110,0,1161,34,87,1060,15,0,0,583,151,50,388,5,1,218,55,0,2,123,0,57,8,110,10,22,0,1,607,0,0,10,49,289,0,79,4,0,0,217,0,0,47,0,3143\n",
      "826,82,4,419,2,763,0,0,37,9,73,10,28,17,0,0,21,16,2,255,0,38,1027,0,12,21,0,0,487,0,3,191,311,0,0,6,651,0,0,3,0,0,2363,21,0,0,0,2302\n",
      "1125,0,278,201,0,1810,167,0,830,139,103,71,1,47,274,69,252,1,170,5,0,211,116,126,0,0,1,1,30,7,19,98,59,0,0,0,1110,0,0,0,0,0,0,0,0,0,0,2679\n",
      "807,0,307,274,1,1080,4,192,123,19,10,0,309,0,115,29,184,6,874,20,0,0,219,0,0,316,19,0,163,0,0,691,0,0,0,0,14,0,74,92,0,0,0,0,0,0,0,4058\n",
      "842,0,604,685,23,673,960,54,18,0,76,134,36,5,0,0,9,35,115,229,8,0,9,0,0,662,0,10,186,0,0,3,0,0,0,103,652,0,129,0,37,0,45,0,0,0,0,3658\n",
      "1216,0,3,1205,0,1130,276,6,569,1,3,6,0,158,260,2,11,67,46,0,0,539,120,373,0,0,0,0,4,0,0,29,152,0,0,2,1036,0,3,0,0,0,33,0,0,0,0,2750\n",
      "374,2,915,570,3,899,144,12,161,272,122,2,0,0,225,0,267,0,424,170,18,25,185,83,0,0,0,0,1639,0,21,46,0,0,0,0,49,0,0,5,0,0,0,0,0,0,0,3367\n",
      "1270,0,155,164,0,994,19,0,253,0,134,0,172,143,0,5,0,329,71,451,0,0,158,12,0,0,0,4,305,0,0,0,0,0,100,0,130,0,0,1,139,0,0,0,0,0,0,4991\n",
      "1744,7,111,494,123,378,40,0,541,6,799,419,0,0,124,42,0,2,58,89,40,7,36,0,0,0,0,2,64,0,56,15,9,0,0,0,487,0,5,0,0,0,0,0,0,0,0,4302\n",
      "563,69,137,420,493,693,14,0,58,396,364,0,35,76,17,0,31,5,154,752,111,19,268,0,0,0,0,5,6,0,454,111,76,0,0,0,1,0,0,0,0,0,17,0,0,0,0,4655\n",
      "1609,78,384,71,0,919,5,22,829,17,639,77,0,123,21,0,38,2,76,22,17,253,159,0,0,0,25,196,307,0,41,175,374,0,0,0,3,0,4,0,0,0,0,0,0,0,0,3514\n",
      "3410,17,85,151,127,633,186,31,109,0,3,13,0,21,3,63,80,1,5,0,815,524,200,0,104,29,0,0,416,167,112,1,0,0,0,44,9,0,0,0,1,0,0,0,33,0,0,2607\n",
      "2025,0,144,728,0,598,203,25,28,0,25,235,158,1,130,1,123,28,628,6,892,2,69,4,0,0,0,0,391,0,8,167,54,0,0,0,9,0,0,13,4,0,1,0,0,0,0,3300\n",
      "665,0,44,232,111,426,1128,40,51,76,51,801,255,63,1056,113,24,103,0,4,26,0,1505,354,0,9,0,55,129,0,2,24,24,0,0,0,121,0,81,0,0,0,0,12,0,0,0,2415\n",
      "614,0,64,228,0,916,144,67,306,18,0,88,19,0,93,6,58,4,137,27,0,0,50,5,54,15,0,331,1344,601,154,223,169,0,0,0,367,0,0,1,2,0,0,163,0,0,0,3732\n",
      "1440,0,158,248,0,1675,16,2,52,0,642,3,5,141,42,8,180,6,673,364,0,40,41,0,0,4,0,395,73,0,34,60,0,106,0,130,110,0,0,0,0,0,0,0,0,0,0,3352\n",
      "1203,22,126,433,94,1666,550,85,141,0,419,46,90,7,103,0,8,120,188,0,271,33,0,1,201,89,1,0,329,0,26,359,0,0,6,1,2,1,0,79,0,0,0,0,0,0,0,3300\n",
      "112,0,295,1016,0,1814,1,114,816,0,93,363,99,113,27,0,158,1,304,20,0,0,0,75,0,0,0,0,29,0,53,256,1064,1,0,3,0,0,0,81,0,0,0,0,1,0,0,3091\n",
      "496,0,7,10,0,1633,57,14,1017,0,529,1300,9,0,369,217,302,17,209,243,0,9,55,11,0,0,0,158,24,0,2,0,1030,0,0,0,8,0,0,0,0,0,0,0,0,0,0,2274\n",
      "1265,0,131,379,16,1632,27,0,307,0,227,11,106,0,254,0,419,4,13,21,0,2,105,17,0,0,0,0,1015,0,0,10,58,0,0,0,1,0,0,2,7,0,0,0,0,0,0,3971\n",
      "790,16,847,419,3,1454,82,26,1017,1,13,33,0,0,13,0,79,186,50,50,11,67,163,0,9,0,2,23,110,0,7,4,310,0,0,0,13,0,0,0,0,0,1,0,0,0,0,4201\n",
      "718,0,3,431,0,971,235,133,1,1,8,286,238,1147,125,12,57,734,150,194,0,0,344,12,0,1,0,0,447,0,0,20,418,30,0,0,141,0,0,0,0,0,0,0,0,0,0,3143\n",
      "1468,0,48,772,90,923,146,297,213,0,32,1,22,60,13,0,161,324,252,0,0,0,46,20,0,14,0,390,0,0,0,18,0,0,0,0,325,0,0,54,0,0,193,0,0,0,0,4118\n",
      "645,0,501,852,59,688,318,163,315,15,263,14,33,0,236,56,86,0,9,1,0,2,158,107,0,655,0,45,38,0,0,19,6,0,0,0,122,0,0,5,0,1,1,0,0,0,0,4587\n",
      "907,1,192,730,0,1783,144,14,900,7,46,323,27,0,171,0,19,49,426,3,1,1,31,0,0,446,221,6,266,0,0,180,4,0,0,378,27,0,0,0,0,0,0,50,0,0,0,2647\n",
      "434,63,90,1013,345,974,546,0,332,32,98,0,2,100,415,20,16,0,35,63,1,1,1231,1,0,0,0,0,13,0,15,97,313,0,0,0,0,0,0,0,0,0,54,0,0,0,0,3696\n",
      "1509,0,224,261,0,1710,639,0,153,201,872,15,0,10,20,0,48,0,1,26,4,0,0,0,0,0,51,0,323,0,0,9,3,0,0,5,1,0,0,0,0,0,0,0,0,0,0,3915\n",
      "790,484,57,60,474,1181,6,0,190,529,971,136,29,0,298,2,6,2,372,496,0,1,267,48,4,6,0,0,95,0,0,155,208,0,0,24,85,0,0,0,0,0,0,0,0,0,0,3024\n",
      "1099,15,14,66,0,2675,200,9,398,3,31,160,43,20,35,72,236,8,240,345,27,221,92,31,0,1,2,39,70,0,55,1,265,0,114,0,76,0,0,0,0,59,0,0,0,0,0,3278\n",
      "612,269,103,621,0,2229,46,239,17,0,0,114,6,136,231,98,10,2,370,17,13,459,80,8,0,127,0,0,2,0,63,6,61,0,0,231,2,12,2,0,0,0,0,0,0,0,0,3814\n",
      "440,0,612,929,6,1449,27,15,59,0,752,535,122,1,2,45,0,194,444,449,222,0,232,460,2,5,0,2,639,1,0,360,60,36,0,1,217,0,0,94,0,27,0,0,0,0,0,1561\n",
      "2452,22,178,909,0,400,88,12,100,11,51,103,0,156,57,672,335,24,33,39,12,147,374,1,26,0,0,414,27,0,0,61,289,0,0,0,46,0,0,0,0,0,0,0,0,0,0,2961\n",
      "1591,0,5,126,3,1245,175,4,472,2,2,4,0,0,491,22,4,26,0,55,0,0,5,0,46,8,0,43,60,0,0,56,227,0,0,60,670,0,0,53,181,0,0,0,0,0,0,4364\n",
      "1074,7,1387,215,5,715,15,37,313,0,131,0,318,0,25,1,7,0,117,5,31,0,551,2,0,112,0,39,369,0,2,410,3,0,0,0,3,0,0,0,25,1,0,0,0,0,0,4080\n",
      "915,2,237,280,0,1429,604,0,988,47,530,2,0,106,10,0,685,0,34,0,0,529,571,0,0,0,3,4,455,2,0,82,0,0,0,0,13,0,0,0,45,0,0,0,0,0,0,2427\n",
      "488,0,113,241,29,1266,47,14,182,0,7,102,61,101,20,6,70,169,364,116,0,1,19,97,0,0,0,5,52,0,38,1108,3,0,0,1,3,0,2,2,68,0,0,0,0,0,0,5205\n",
      "539,45,1105,1636,0,287,8,1,645,0,358,7,34,6,285,22,1,0,22,224,0,1,99,2,0,5,0,0,194,0,0,1,474,0,0,5,44,0,0,0,0,0,0,0,0,1,0,3949\n",
      "662,32,173,1973,223,684,11,13,525,0,231,4,33,1,349,101,1,20,215,27,0,56,668,26,0,0,99,0,25,0,194,201,0,1,7,0,0,0,0,0,0,0,0,0,0,0,0,3445\n",
      "753,0,29,842,44,595,39,0,345,0,24,31,0,15,174,9,499,1,1,3,218,2,35,11,272,0,0,0,176,0,0,9,87,0,0,89,13,0,0,0,0,0,0,0,0,0,0,5684\n",
      "1620,0,71,142,0,1413,828,27,433,0,781,15,0,443,23,0,0,6,128,325,28,0,157,0,2,11,0,0,148,0,5,58,136,0,0,1,12,0,211,0,0,0,0,0,0,0,0,2976\n",
      "199,1,114,971,0,1558,337,0,788,0,53,44,7,237,42,6,23,125,343,417,3,44,27,0,2,15,0,0,31,0,0,1,338,0,0,56,28,0,0,0,0,0,0,73,0,0,9,4108\n",
      "1094,0,118,477,0,1522,106,1,878,83,133,39,4,0,54,0,97,19,3,0,2,406,156,0,0,105,0,0,672,0,0,50,9,0,0,227,22,0,0,0,1,0,0,20,0,4,0,3698\n",
      "1073,0,1083,137,6,1352,81,9,78,0,52,0,0,282,13,0,404,45,58,0,0,0,310,10,0,1,0,37,436,0,0,211,200,0,0,0,0,0,0,9,0,1,0,0,0,0,0,4112\n",
      "831,0,198,97,151,1117,337,0,117,0,90,56,307,1,75,0,1,28,170,0,0,0,554,0,11,2,0,0,201,0,0,101,27,0,165,0,21,0,0,0,0,0,0,0,0,0,0,5342\n",
      "900,110,418,455,5,2035,150,49,73,0,0,178,203,0,0,0,80,4,405,110,0,221,12,22,0,0,0,779,59,0,2,777,15,0,0,0,12,0,1,0,25,0,0,0,0,0,0,2900\n",
      "636,0,608,49,7,1144,160,116,1700,48,585,37,15,0,282,7,141,77,130,2,1,0,388,17,0,9,0,69,37,0,76,133,108,0,0,8,0,0,4,0,0,0,0,0,4,0,0,3402\n",
      "1365,0,33,496,0,349,157,0,1269,2,7,4,165,202,133,0,191,9,221,0,0,0,1259,0,0,2,2,28,71,0,0,4,1460,0,0,0,23,0,0,0,60,0,1,0,0,0,0,2487\n",
      "1149,108,285,926,1,789,16,110,49,8,8,1,5,42,739,0,4,103,0,568,6,0,4,0,0,273,0,4,192,0,15,55,40,0,0,1,13,0,0,0,0,0,0,0,0,0,0,4486\n",
      "1148,15,463,463,3,1166,382,0,425,2,0,0,69,2,47,69,0,10,37,1,0,0,134,0,0,6,2,12,59,0,0,1061,7,0,0,0,33,0,0,0,0,0,0,0,0,0,0,4384\n",
      "1670,46,4,348,0,1462,42,15,110,13,1,22,230,15,16,0,1,116,31,34,521,0,210,258,0,4,144,499,340,0,83,26,0,0,0,0,0,0,4,12,0,0,0,0,0,0,0,3723\n",
      "604,0,112,266,0,917,218,7,315,1,23,922,463,0,36,1,224,0,1,40,0,83,279,42,0,0,29,0,267,0,301,645,102,0,0,1,0,0,8,16,0,0,9,0,0,0,0,4068\n",
      "1923,32,32,343,8,858,96,0,472,0,16,12,64,1,47,1,0,1,3,1398,570,175,0,0,0,0,0,1,17,0,0,44,51,0,0,30,671,0,3,3,0,108,0,1,0,0,0,3019\n",
      "465,0,852,688,0,1633,102,240,375,0,4,72,90,355,34,51,19,0,1,19,0,53,450,0,0,0,17,0,6,4,0,120,34,0,0,0,1059,0,0,0,0,0,0,0,0,14,0,3243\n",
      "886,0,186,79,1,360,0,116,256,0,316,417,87,477,11,156,108,67,93,248,0,0,13,14,0,16,3,70,18,0,0,455,91,0,0,0,183,0,0,0,0,0,0,0,0,0,0,5273\n",
      "963,0,150,776,51,977,266,0,474,0,66,9,13,5,391,0,4,13,0,5,3,244,52,0,1,0,0,0,92,144,0,12,53,0,0,0,8,0,5,0,0,0,0,0,0,0,0,5223\n",
      "2492,106,29,363,0,793,144,18,229,0,156,35,1,0,5,12,2,148,60,369,1,151,41,0,2,137,0,247,801,0,0,200,15,0,0,0,58,0,1,0,2,3,0,0,0,0,0,3379\n",
      "327,11,4,48,3,1783,949,366,38,0,20,490,95,0,25,15,40,52,9,159,0,0,3,160,0,0,32,0,208,1,11,40,16,0,0,2,44,0,13,0,0,0,73,0,0,0,0,4963\n",
      "337,0,1,455,15,1740,12,0,264,1,46,76,0,72,142,0,1,0,369,790,805,132,27,0,0,81,0,12,0,0,1,448,76,0,0,0,323,0,0,0,0,0,0,0,0,0,0,3774\n",
      "785,64,1035,215,7,1787,237,0,145,118,8,100,0,9,35,18,0,34,24,143,5,0,329,109,0,0,0,0,421,0,31,351,1,0,0,366,8,0,15,0,0,0,0,0,0,0,0,3600\n",
      "312,0,83,810,0,300,37,14,152,0,154,46,0,144,24,10,1,40,375,6,0,0,42,29,0,84,0,1,37,0,0,26,343,98,0,0,93,0,0,0,0,0,120,0,0,0,0,6619\n",
      "1111,14,439,97,1,1043,2,53,1658,35,67,56,0,18,0,0,10,29,6,60,0,0,18,1,0,0,0,0,25,0,41,46,297,0,0,0,59,0,376,2,0,0,1,0,0,0,0,4435\n",
      "1682,0,104,7,0,1791,927,0,33,0,11,0,0,57,6,24,2,73,0,242,64,72,396,0,5,0,16,2,767,0,0,1101,63,0,0,0,324,0,1,74,0,0,0,0,0,0,0,2156\n",
      "1599,348,367,93,0,1423,380,251,169,2,9,0,31,0,30,0,1,0,41,27,1,27,398,2,0,46,0,0,310,0,0,296,1,0,0,0,55,0,0,1,0,0,2,51,0,0,0,4039\n",
      "627,0,216,303,0,469,320,180,349,3,0,0,180,1,0,1,156,0,3,533,0,118,26,0,0,0,0,0,1017,0,178,54,64,0,0,0,0,0,0,0,213,0,0,0,0,0,0,4989\n",
      "630,0,440,447,117,300,86,24,237,269,127,49,106,4,372,87,0,23,1672,142,24,0,1043,68,0,4,9,0,15,0,0,319,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3380\n",
      "1299,144,273,341,0,824,560,1,185,2,423,39,1,86,5,0,12,33,10,9,2,48,68,0,0,277,7,0,73,0,413,66,35,0,0,3,1,0,0,0,0,0,0,0,0,0,0,4760\n",
      "410,0,207,198,0,2825,32,8,495,0,75,201,1,195,22,0,315,0,182,32,0,1,561,1,126,2,0,0,180,0,0,1,0,0,0,0,5,23,1,7,0,0,0,0,0,0,0,3894\n",
      "1807,0,42,30,4,1057,420,35,269,5,54,0,201,10,52,0,49,63,360,0,625,9,10,0,0,3,0,5,84,0,0,14,73,30,0,0,0,0,0,0,0,1,0,0,0,0,0,4688\n",
      "935,7,282,174,250,712,442,5,168,2,92,0,6,152,13,327,12,0,292,0,1,406,0,12,0,0,0,0,945,0,0,730,0,0,0,0,38,0,0,0,0,0,6,93,0,0,0,3898\n",
      "869,13,0,815,0,2231,0,18,91,41,0,4,143,0,7,0,4,0,98,353,0,1,0,0,24,0,0,249,335,0,217,13,4,0,0,21,212,0,0,0,0,0,0,0,0,0,0,4237\n",
      "770,110,63,30,2,655,28,0,112,0,8,190,16,96,76,0,16,0,7,191,0,201,308,0,4,18,26,0,369,0,0,262,26,0,0,0,127,0,136,0,0,0,0,0,0,0,0,6153\n",
      "833,0,628,267,41,951,189,0,348,0,43,1,2,0,128,12,0,7,24,0,4,159,17,0,0,0,0,0,41,0,322,10,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,5918\n",
      "293,436,29,1513,30,1895,38,0,41,19,11,264,46,48,96,0,140,0,45,88,0,34,24,159,106,5,0,0,421,0,4,697,61,0,0,0,0,0,0,28,35,0,0,0,0,0,0,3394\n",
      "967,0,5,387,662,2190,347,3,330,0,36,4,0,215,30,0,34,131,85,4,202,0,0,0,0,384,0,0,191,22,0,112,0,0,0,0,100,0,1,1,0,0,0,0,0,0,0,3557\n",
      "161,0,12,645,2,571,163,0,227,0,28,37,16,1,417,39,1,39,685,138,0,6,142,0,1,0,2,57,753,0,20,318,0,0,0,7,17,6,0,17,0,1,0,0,0,0,2,5469\n",
      "406,0,6,796,24,1886,22,8,153,30,885,12,19,2,345,627,274,0,415,72,0,21,172,46,33,0,21,107,17,0,0,345,185,173,0,0,0,0,1,46,0,0,15,0,0,0,0,2836\n",
      "522,1,98,78,29,1206,142,873,569,0,13,1,10,36,45,94,126,1,0,119,0,0,347,0,0,0,0,399,113,0,0,255,0,0,0,0,50,0,0,0,0,0,0,0,0,0,0,4873\n",
      "1126,0,516,125,35,2657,88,0,43,0,95,9,3,2,258,279,0,0,70,2,0,0,0,22,0,172,0,17,335,0,0,283,2,0,0,0,2,0,0,1,0,0,2,0,0,0,0,3856\n",
      "1210,0,116,724,17,827,44,248,818,0,176,375,29,0,8,37,40,2,57,151,62,0,564,16,0,2,0,1036,50,0,140,0,0,0,0,35,222,0,36,0,0,0,0,0,0,0,0,2958\n",
      "1885,7,628,651,50,1447,66,28,174,0,62,30,81,0,14,88,348,75,69,324,0,76,47,60,0,1,0,26,28,0,348,1,184,0,0,0,25,0,0,0,0,0,0,0,0,0,58,3119\n",
      "656,7,72,51,9,2707,481,12,175,6,20,17,21,283,33,563,0,1,33,20,13,0,5,261,0,0,1,4,268,0,0,240,28,4,0,0,103,0,0,4,0,0,0,0,0,0,0,3902\n",
      "1192,8,318,254,193,716,1288,2,32,0,12,3,0,63,61,0,55,7,1,138,0,0,45,7,0,19,528,0,17,0,314,61,3,56,0,0,98,0,0,0,0,0,0,0,0,0,0,4509\n",
      "394,0,95,400,2,2224,92,4,401,4,602,0,2,0,130,0,96,0,29,44,119,3,592,48,3,0,4,0,126,0,38,1,76,0,90,0,3,0,0,0,0,0,0,0,0,0,0,4378\n",
      "818,0,23,498,0,967,294,218,40,15,10,15,0,21,21,1,39,0,0,24,0,0,120,7,0,2,568,0,652,0,249,501,0,0,0,487,23,0,0,0,0,0,0,0,0,0,0,4387\n",
      "756,0,107,548,0,911,10,0,364,249,0,140,145,11,467,0,281,403,993,80,0,51,1,0,0,3,1,0,9,0,0,120,0,0,0,4,119,0,0,36,1,0,0,0,0,0,0,4190\n",
      "1690,0,5,112,0,1214,57,33,42,0,212,7,89,103,27,0,11,0,37,100,1,0,5,149,5,0,0,0,278,0,42,11,5,4,0,0,153,0,0,2,0,282,0,3,0,0,0,5321\n",
      "887,0,115,246,20,1021,12,111,103,72,52,123,0,1,263,0,135,1,556,275,250,150,661,0,0,39,487,4,71,0,1,396,519,0,0,0,681,0,99,1,0,2,0,0,0,0,0,2646\n",
      "704,16,682,532,33,929,0,2,274,12,17,0,113,23,7,9,1,195,46,1,0,0,13,0,85,2,0,0,446,0,1,191,296,0,0,0,1024,0,0,69,81,0,0,0,0,0,0,4196\n",
      "2505,0,86,46,3,1043,119,27,180,251,2,23,340,0,333,0,4,135,42,0,0,335,10,0,443,7,0,0,110,0,4,30,465,0,0,0,32,0,0,0,180,0,0,0,0,0,0,3245\n",
      "327,8,336,587,0,899,0,5,56,0,30,0,44,1,6,0,70,78,224,85,0,0,79,49,0,1,0,0,469,154,72,116,24,2,0,1,581,0,0,0,0,0,0,0,0,0,0,5696\n",
      "517,0,103,869,39,1600,40,46,100,6,119,3,7,253,145,6,36,0,4,212,0,0,17,0,0,69,0,5,7,363,0,21,413,0,0,0,262,0,0,0,0,0,0,0,0,0,0,4738\n",
      "753,0,401,300,0,954,4,237,482,0,824,480,210,0,2,324,2,0,0,6,37,21,93,186,5,0,0,0,117,0,4,503,6,0,0,0,252,0,0,0,12,0,0,0,0,0,0,3785\n",
      "729,26,497,44,10,968,16,281,270,1,315,12,3,460,19,52,59,690,46,297,8,2,154,0,944,384,0,5,147,0,0,71,1,0,0,0,343,0,0,19,0,0,36,0,0,0,1,3090\n",
      "1223,0,204,171,0,1401,437,38,281,91,284,0,55,0,4,71,138,88,2,78,0,10,10,166,0,0,0,0,66,0,0,13,21,0,0,0,132,0,0,0,0,0,5,0,0,0,0,5011\n",
      "1148,30,266,678,0,1222,526,569,1289,0,20,53,0,0,62,39,44,0,642,0,0,0,435,0,0,0,0,1,64,0,0,385,183,0,0,0,74,0,0,2,0,0,0,0,0,0,0,2268\n",
      "1087,0,97,443,0,2190,142,273,148,30,57,0,21,89,502,0,214,3,18,240,134,153,12,0,0,0,0,0,103,0,0,23,0,0,0,0,8,0,7,0,0,0,0,0,0,0,0,4006\n",
      "1384,75,1734,589,0,1332,152,1,211,697,4,3,111,58,3,40,0,0,27,67,16,39,3,0,4,79,0,8,82,0,0,84,17,0,0,0,122,0,0,0,8,0,0,0,0,0,0,3050\n",
      "661,0,981,139,0,871,27,201,66,0,389,87,198,0,286,2,190,3,13,0,0,47,471,7,0,100,676,0,113,0,0,11,5,0,0,0,152,0,0,2,0,0,0,0,0,0,0,4302\n",
      "1501,14,1029,137,29,1546,245,1,92,8,22,134,65,0,70,0,152,24,2,11,0,0,8,0,79,0,0,97,196,0,0,9,571,0,0,0,18,0,0,0,0,0,0,0,0,0,0,3940\n",
      "1423,167,74,206,0,350,244,1,140,41,10,0,19,0,9,1,482,62,82,9,91,773,73,0,0,807,0,49,11,0,14,6,0,0,0,135,353,0,0,0,0,0,733,0,0,0,0,3635\n",
      "183,0,124,272,52,1898,361,2,135,0,1,0,104,0,57,17,2,1180,322,424,0,0,84,2,0,0,0,0,258,3,7,261,112,0,0,0,188,0,0,0,0,0,0,0,0,0,0,3951\n",
      "545,8,64,1109,182,691,763,0,242,102,437,1,0,0,2,1,1222,77,606,12,1,62,123,0,0,0,0,1,496,29,0,71,34,0,0,0,134,0,278,0,0,0,0,0,0,0,0,2707\n",
      "647,0,26,435,16,3785,979,355,80,0,7,363,7,0,4,0,58,2,254,186,0,0,39,0,0,54,0,0,120,0,3,5,2,0,0,0,84,0,0,25,0,0,0,0,0,0,8,2456\n",
      "3960,45,122,388,6,921,153,41,4,11,124,0,3,64,675,1,0,0,57,35,3,0,12,0,0,0,0,14,246,0,4,5,6,0,0,0,172,0,0,0,0,0,0,0,0,0,0,2928\n",
      "1047,0,9,206,37,1013,435,134,360,228,4,0,162,0,95,159,833,35,2,301,0,0,212,0,0,478,0,0,15,0,0,30,2,7,0,0,465,0,0,214,14,0,0,0,6,0,7,3490\n",
      "1907,54,45,29,2,2607,546,1,75,0,152,198,1,92,0,0,13,4,14,2,0,0,40,253,25,5,30,0,99,0,2,6,281,0,0,192,135,0,0,0,0,0,56,0,0,0,0,3134\n",
      "1123,0,158,68,58,1290,95,66,311,734,1,298,0,2,13,1,2,0,514,0,43,0,485,0,0,53,1,0,9,0,32,8,88,0,0,0,11,0,0,0,0,0,0,0,0,0,0,4536\n",
      "1087,0,63,807,1,1786,19,3,282,1,28,268,0,0,39,1,1,190,144,20,0,37,55,0,0,1,0,0,27,0,0,20,956,0,0,0,12,0,0,0,0,0,0,0,0,0,0,4152\n",
      "477,2,196,601,12,411,249,2,540,201,140,537,21,0,906,0,0,6,449,0,0,2,136,209,0,117,0,96,1,0,0,327,1,0,0,3,49,0,0,0,0,0,0,0,0,0,0,4309\n",
      "176,0,7,775,0,2240,1,1,454,0,0,1,0,80,0,115,378,0,397,98,0,34,126,0,0,3,0,0,766,0,0,142,10,0,0,0,3,0,0,0,0,0,0,0,0,0,0,4193\n",
      "713,97,160,215,0,1594,120,3,484,19,12,129,148,2,0,0,351,1,1,0,12,77,52,20,0,0,101,0,246,0,0,71,0,0,0,33,86,0,0,0,0,0,126,14,0,0,0,5113\n",
      "820,2,382,1016,0,1176,167,42,116,76,89,31,760,0,0,106,529,0,62,273,0,0,24,0,0,0,0,20,36,0,0,296,68,0,0,0,81,0,0,1,3,0,4,0,0,0,0,3820\n",
      "1655,0,294,246,285,1009,38,59,75,0,203,29,0,1,18,16,424,294,186,259,12,0,11,44,0,44,0,0,104,0,0,9,0,0,0,25,65,0,0,0,0,0,0,0,0,0,0,4595\n",
      "1236,0,454,681,0,1265,87,0,17,3,3,27,3,112,210,0,13,131,81,1011,0,134,7,13,0,5,0,6,205,0,294,336,56,0,0,16,145,0,0,179,75,0,354,0,0,0,0,2841\n",
      "689,30,204,35,301,915,45,0,161,0,461,1,359,79,122,18,39,0,93,7,803,1,367,4,0,596,0,0,52,0,1,51,183,0,0,0,4,0,0,2,0,0,5,0,0,0,0,4372\n",
      "1305,0,1082,33,15,1163,15,0,923,861,35,23,75,38,79,0,276,40,2,221,187,46,38,0,0,0,2,24,211,0,0,224,30,0,0,75,0,0,0,0,0,21,0,0,0,0,0,2956\n",
      "710,0,764,260,0,2348,0,27,189,9,68,12,58,0,163,18,309,8,130,20,0,0,75,0,209,42,0,0,48,19,0,378,12,0,0,0,8,0,0,0,0,92,0,0,0,0,0,4024\n",
      "2452,0,92,267,321,1345,630,0,558,0,111,81,114,0,17,0,92,252,156,74,0,0,50,0,0,5,0,0,425,0,1,18,322,0,0,8,21,0,0,0,0,0,6,0,0,0,0,2582\n",
      "1650,0,185,219,0,1482,44,106,330,0,1,57,0,1,1,95,243,1,0,52,1,43,21,0,0,0,7,39,931,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,246,4241\n",
      "902,154,2,181,0,1013,1,1,1486,4,47,75,10,6,14,0,12,312,66,599,0,825,6,0,0,134,0,172,7,0,18,4,15,0,0,29,99,0,0,6,0,0,0,0,0,0,0,3800\n",
      "582,70,416,126,146,633,170,0,10,0,165,0,7,24,1162,3,32,15,29,444,147,1,195,0,0,18,0,131,89,0,0,11,12,0,0,140,1,0,3,0,0,0,6,0,0,0,0,5212\n",
      "650,76,352,73,20,1164,56,320,21,0,5,52,0,0,387,0,79,0,4,1677,5,93,185,0,0,215,0,128,194,0,0,111,227,0,0,0,41,0,0,0,0,0,0,0,0,0,0,3865\n",
      "302,0,304,470,6,1895,301,1,226,0,39,3,199,5,38,568,194,63,227,51,628,0,135,0,0,0,123,0,64,0,214,90,414,0,0,0,318,0,0,146,538,0,0,27,0,0,0,2411\n",
      "391,0,18,960,1,537,39,0,44,28,615,0,29,0,0,147,71,0,5,55,186,0,408,31,32,0,0,0,89,0,529,378,6,0,1,23,0,0,0,0,65,0,2,0,0,0,0,5310\n",
      "1105,61,315,230,0,767,102,0,201,132,371,115,65,50,35,0,0,109,177,0,0,297,412,183,0,0,1,0,34,0,1,354,80,0,0,0,539,0,0,5,0,0,0,0,0,0,0,4259\n",
      "365,47,40,394,88,3011,10,257,179,194,0,34,1,688,268,508,0,17,245,17,33,0,47,1,19,0,39,0,35,412,0,14,0,0,0,15,14,1,0,0,0,0,0,0,0,1,0,3006\n",
      "558,25,254,961,36,681,3,144,124,5,141,234,63,8,526,0,152,2,250,15,247,0,116,0,0,1,0,0,187,1134,0,2,25,0,95,0,69,0,0,0,0,60,0,0,0,0,0,3882\n",
      "343,0,573,605,8,1269,0,144,206,50,18,106,728,5,304,32,20,44,31,147,0,0,185,0,0,0,1,0,334,159,140,63,333,0,0,0,39,1,0,0,0,594,0,0,0,0,0,3518\n",
      "2667,0,17,516,221,567,115,0,789,54,206,886,88,0,143,34,130,207,30,19,1,6,27,2,0,15,0,0,496,0,0,65,0,0,0,2,112,0,0,0,0,0,0,0,0,0,0,2585\n",
      "946,0,143,636,0,1350,5,0,167,224,16,41,67,58,0,13,129,8,14,362,15,0,124,1,0,3,1,21,237,0,21,173,0,0,0,0,405,0,0,0,0,1,1,0,0,23,0,4795\n",
      "174,0,519,362,0,1349,130,16,190,13,15,0,25,33,4,12,28,20,130,66,0,169,57,152,0,0,0,292,790,0,0,108,162,0,0,0,130,0,0,0,3,0,0,0,0,0,0,5051\n",
      "1936,0,245,924,0,322,607,11,2,61,68,212,11,2,749,35,203,4,7,59,3,0,15,0,0,0,0,0,212,0,167,15,64,0,0,13,746,0,7,73,0,0,0,0,0,0,0,3227\n",
      "322,1,4,1274,0,746,221,10,805,0,20,26,0,25,113,0,11,24,274,89,89,242,110,5,0,92,0,32,27,0,0,2,17,0,0,0,67,0,16,492,0,0,0,0,0,0,0,4844\n",
      "1967,0,227,381,8,667,234,27,0,0,57,126,60,9,121,0,0,168,69,5,80,1,78,0,0,0,0,106,172,0,0,476,25,0,0,0,10,0,0,0,2,0,0,0,0,0,0,4924\n",
      "418,0,301,729,456,912,55,30,132,274,211,495,0,10,349,28,314,35,12,0,0,99,368,0,0,0,11,0,24,0,30,14,54,0,0,0,6,0,0,456,0,0,1,0,0,0,0,4176\n",
      "859,120,42,57,12,406,119,167,96,0,68,127,12,4,66,0,294,662,41,0,2,2,0,76,15,811,506,15,213,0,16,261,3,0,0,4,46,0,0,0,0,0,0,0,0,0,0,4878\n",
      "547,0,10,29,6,1856,104,0,38,11,143,82,502,122,660,43,55,4,92,43,11,189,228,0,0,0,103,2,519,0,0,38,69,0,0,0,50,0,0,0,0,0,0,0,0,0,0,4444\n",
      "2291,5,190,792,4,663,95,374,430,0,371,20,7,3,169,0,522,0,42,98,0,4,0,34,0,6,0,2,319,7,0,190,774,0,0,0,0,0,0,4,1,209,0,0,954,0,0,1420\n",
      "794,0,647,1016,0,1829,121,11,36,0,142,0,15,5,46,5,4,4,42,150,4,0,93,4,0,1,1,5,32,0,7,237,189,0,0,9,52,0,0,0,0,0,0,0,0,0,0,4499\n",
      "1770,159,10,407,0,1199,9,91,1083,0,82,1,127,1,58,28,1246,122,3,4,9,162,136,0,6,0,40,62,497,0,0,15,2,1,0,0,259,0,0,0,0,0,12,0,0,0,0,2399\n",
      "1523,0,12,664,0,965,24,171,15,593,15,56,0,90,261,13,0,3,96,91,15,3,262,0,0,51,0,15,14,0,0,15,32,0,0,0,101,0,0,383,0,0,0,0,0,0,0,4517\n",
      "652,4,459,887,2,798,77,75,258,4,268,0,0,0,206,1,8,319,18,314,45,0,13,0,0,145,54,0,502,0,14,706,13,3,0,0,99,0,0,0,0,0,0,0,0,0,0,4056\n",
      "1829,0,88,137,0,1534,27,1,145,0,81,40,7,1,843,6,272,0,224,13,12,0,490,5,0,1,0,1,722,0,0,432,47,31,0,0,50,0,0,14,0,78,0,0,0,0,0,2869\n",
      "2285,127,255,755,0,1430,2,91,30,1,122,0,222,127,6,4,133,3,192,50,0,0,83,0,0,91,31,1,6,0,0,4,0,0,0,0,23,0,0,0,0,0,57,0,0,0,0,3869\n",
      "862,0,1019,136,17,1287,36,240,98,88,149,429,148,306,0,0,1,36,443,1,60,0,89,21,4,236,148,3,367,0,0,185,12,0,0,4,91,0,0,3,93,2,0,0,0,0,0,3386\n",
      "990,51,84,230,0,2364,165,11,74,0,64,568,178,3,16,0,7,7,334,141,0,192,277,1,0,60,0,0,554,0,0,134,13,0,0,0,8,0,0,0,0,0,39,0,0,0,0,3435\n",
      "2315,5,480,752,0,1054,1,15,549,0,0,0,379,4,2,121,62,1,138,2,4,0,190,0,0,1,0,0,126,0,0,3,6,0,0,0,47,0,0,164,0,0,0,0,0,0,0,3579\n",
      "158,0,611,788,16,337,1062,18,39,89,4,174,1,0,4,396,30,0,275,225,59,0,260,105,0,0,972,183,109,0,0,140,147,0,0,2,9,0,0,0,0,0,0,0,5,0,0,3782\n",
      "998,14,145,318,82,1385,888,0,56,0,0,302,13,45,188,17,0,2,19,1,0,0,1,0,8,179,37,1,315,0,0,923,81,0,0,0,18,0,0,0,0,0,47,0,0,0,0,3917\n",
      "100,0,28,0,0,1177,42,248,93,23,147,261,14,77,29,0,10,22,120,16,0,3,295,901,5,0,121,0,247,0,32,49,57,0,0,0,475,0,719,0,0,0,0,3,0,0,0,4686\n",
      "2587,2,82,117,16,1381,88,0,166,67,364,64,0,3,3,363,118,1,32,0,0,0,75,0,0,0,0,105,628,0,7,0,2,0,0,0,39,0,0,0,40,1109,134,0,0,0,0,2407\n",
      "1136,0,703,493,0,776,119,3,4,91,0,38,0,246,114,96,115,0,298,39,0,0,157,19,0,1,4,1,864,0,0,3,211,0,0,0,83,0,0,0,2,0,0,0,0,0,0,4384\n",
      "247,28,177,76,19,1907,350,1,714,69,90,78,0,497,225,36,116,2,72,93,11,0,7,0,10,0,0,0,74,0,0,346,22,0,0,0,12,0,0,0,0,0,0,0,0,5,0,4716\n",
      "271,0,171,673,2,918,22,243,17,0,1,318,101,10,172,171,830,1,126,6,0,23,332,0,0,24,0,0,35,0,1217,61,267,0,0,0,35,0,0,15,0,0,0,0,0,0,0,3938\n",
      "1030,28,375,64,0,2046,221,2,433,0,299,120,178,157,555,14,128,326,29,111,0,0,3,0,0,1,4,0,610,0,22,19,13,0,0,0,65,0,0,0,0,0,0,0,0,0,0,3147\n",
      "421,194,32,90,0,1604,252,0,1063,113,13,0,40,295,478,41,26,0,249,4,0,0,148,0,0,2,0,0,392,0,74,4,15,0,0,0,15,0,0,0,0,0,0,0,0,0,0,4435\n",
      "658,1,16,636,0,1035,524,30,229,190,741,53,76,390,7,0,194,1,54,89,0,0,4,180,2,5,13,0,214,315,0,58,4,0,0,6,27,0,54,0,0,0,0,0,0,0,0,4194\n",
      "603,0,362,129,0,2403,91,23,22,0,261,1,108,0,93,0,72,51,3,395,0,7,14,18,0,13,0,0,40,0,0,1172,2,0,0,117,37,0,0,0,0,92,0,0,0,0,0,3871\n",
      "427,81,92,260,61,2507,285,0,38,0,269,33,931,44,0,1,58,37,22,172,1,113,82,6,0,0,0,0,584,0,0,13,216,0,0,0,8,0,0,6,0,0,0,0,0,0,0,3653\n",
      "1222,0,861,678,0,677,140,13,753,0,131,16,3,70,18,7,30,0,106,101,4,42,1,0,0,0,21,49,671,0,0,100,1,0,0,35,624,0,0,184,0,0,0,0,0,0,0,3442\n",
      "1977,10,325,1564,0,493,1292,0,570,0,46,5,141,42,256,0,191,47,196,105,0,0,7,0,0,32,40,0,7,0,315,2,2,0,0,0,28,0,0,0,1,0,0,0,0,0,0,2306\n",
      "351,10,123,9,0,2318,0,0,292,2,1196,0,0,1,1,0,298,0,1,58,0,0,99,1,0,0,1,0,457,0,0,135,164,0,0,0,81,0,0,1,0,0,0,0,0,0,0,4401\n",
      "922,0,382,1982,2,299,358,0,125,246,20,0,9,18,178,5,0,45,593,15,0,0,28,0,0,11,314,0,315,0,830,17,140,0,0,11,0,0,0,0,0,0,0,0,0,0,0,3135\n",
      "1951,0,147,381,111,1403,379,4,190,65,311,18,1,0,5,86,116,91,134,37,10,0,68,0,0,45,0,2,271,0,8,380,1,0,0,0,0,0,0,16,4,0,0,0,0,1,0,3764\n",
      "1059,0,379,348,0,420,7,90,1789,1,119,5,65,227,355,0,50,6,749,89,137,0,55,0,0,1,0,1,28,8,0,3,231,0,0,0,159,0,2,0,0,0,0,0,0,0,0,3617\n",
      "1257,237,27,224,5,406,394,0,203,0,0,0,244,9,1172,36,144,0,31,8,68,244,13,0,0,0,1,0,476,0,1,464,226,1,0,2,53,0,0,0,0,0,0,0,0,0,0,4054\n",
      "481,264,251,55,0,1560,143,356,5,5,6,0,16,12,840,0,315,4,15,193,0,0,131,1,0,45,28,0,124,0,15,401,0,0,0,0,417,0,0,0,19,0,38,0,0,173,0,4087\n",
      "788,2,190,100,0,1660,461,15,187,0,320,2,71,0,11,0,100,5,2,118,0,0,3,1,0,1,0,0,470,0,0,54,0,0,0,0,120,0,110,0,0,0,5,0,0,0,0,5204\n",
      "1266,0,367,63,1,1334,12,72,10,15,323,183,11,61,223,15,208,899,89,1,28,0,52,0,3,57,0,0,717,0,0,8,565,0,0,94,7,0,0,1,0,0,0,0,0,0,0,3315\n",
      "564,799,30,801,0,1179,603,423,26,0,3,27,0,100,8,0,77,0,158,231,3,23,920,53,0,34,0,0,176,0,0,977,9,4,0,306,0,0,0,0,0,0,0,0,0,0,0,2466\n",
      "1252,1,319,34,26,761,1,24,53,190,557,20,200,0,214,7,54,329,891,225,0,0,509,462,56,2,8,0,55,0,0,0,295,0,0,71,28,0,0,0,0,0,0,0,0,0,0,3356\n",
      "1010,0,153,366,197,1196,56,0,294,0,539,186,10,2,403,26,257,132,41,216,43,360,209,165,0,26,10,28,91,0,0,265,235,0,0,0,138,0,0,1,0,0,0,0,0,0,0,3345\n",
      "820,13,1225,34,0,1058,243,200,861,0,257,48,322,2,207,0,1,16,177,4,33,0,43,0,16,0,0,0,281,0,0,193,70,0,0,5,87,0,0,55,0,0,0,0,0,0,0,3729\n",
      "1372,3,355,1289,0,615,761,62,115,0,73,14,263,453,3,56,35,35,279,121,0,0,7,183,8,25,0,5,291,0,157,71,137,0,0,2,254,0,0,5,0,0,0,0,0,0,0,2951\n",
      "1029,0,246,175,190,508,295,34,248,1,131,15,185,1769,0,174,375,40,31,1,2,0,557,0,0,0,1,8,224,0,105,130,314,0,0,0,14,0,0,0,0,0,0,0,0,0,0,3198\n",
      "686,0,120,957,409,1118,35,0,277,1,296,29,0,10,1174,106,65,96,66,17,0,0,11,0,0,7,41,229,459,0,0,424,81,25,0,0,528,0,0,0,4,0,0,0,0,0,0,2729\n",
      "1519,6,519,747,1,469,36,0,431,3,59,163,0,0,31,265,260,7,51,524,0,4,362,0,0,0,0,4,289,0,0,14,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4226\n",
      "1343,0,573,205,46,1060,789,22,564,0,119,154,121,92,53,4,364,12,46,36,4,147,0,1,0,1,0,0,84,0,4,49,639,0,0,70,222,0,0,1,35,0,7,0,0,0,0,3133\n",
      "1458,0,234,128,0,494,182,1,1556,36,16,5,197,6,443,131,37,84,14,43,6,2,130,0,0,0,0,0,2,501,0,0,44,0,0,0,508,0,0,1,0,1,0,0,22,0,0,3718\n",
      "937,8,367,123,7,1930,298,1,652,173,0,10,157,14,95,0,98,157,261,38,4,228,4,49,175,18,1,83,59,0,0,3,168,0,4,0,106,0,0,76,6,0,0,1,0,0,0,3689\n",
      "664,0,155,480,179,1162,740,8,632,0,271,21,8,0,0,3,12,5,150,92,210,0,259,2,0,88,1,0,44,0,445,131,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4216\n",
      "289,78,763,184,264,1229,62,13,259,3,14,14,248,49,1,0,117,48,245,8,0,360,127,203,2,0,1,2,123,40,24,81,25,0,0,0,10,0,0,0,1333,0,0,0,0,0,0,3781\n",
      "861,0,66,78,0,2330,46,160,126,176,132,13,39,31,12,7,0,99,7,0,60,45,110,3,0,13,0,2,3,0,152,515,1391,0,0,267,60,0,0,8,0,0,0,0,0,0,0,3188\n",
      "410,6,477,38,0,2080,101,0,1401,27,359,23,0,26,87,4,25,9,0,0,1,0,257,0,0,0,0,0,306,0,0,251,0,0,0,0,402,0,0,0,0,0,0,0,0,0,0,3710\n",
      "1862,0,323,1605,24,1327,276,69,174,0,25,134,0,12,98,0,6,0,31,114,0,105,2,0,0,0,0,0,43,0,111,532,236,0,0,0,48,0,0,0,0,0,12,0,0,0,1,2830\n",
      "1017,0,228,724,1,1419,639,112,295,0,698,8,130,0,0,0,233,5,875,134,0,12,122,0,0,0,3,0,8,0,0,77,14,0,0,1,0,0,0,32,0,0,0,0,0,0,0,3213\n",
      "483,0,125,590,0,2091,248,279,703,1,95,6,0,16,462,1,74,5,279,112,0,243,231,7,0,3,1,74,165,0,370,16,254,0,0,0,2,14,0,0,0,1,0,1,0,0,0,3048\n",
      "743,12,88,1038,94,2390,73,5,265,73,24,274,1,0,55,303,121,11,80,9,6,0,511,145,0,0,0,14,3,0,34,6,732,0,0,0,10,0,9,0,0,0,0,0,0,0,0,2871\n",
      "865,16,130,241,0,1572,1489,156,174,14,169,12,68,88,8,0,2,0,491,307,44,55,497,7,0,5,0,0,5,0,37,2,1,0,0,34,513,0,0,0,0,0,0,0,0,0,0,2998\n",
      "1014,0,1,335,519,367,11,408,197,22,22,113,0,11,5,13,235,10,122,52,0,0,339,2,0,4,0,3,96,0,115,293,0,0,0,27,1,0,0,0,0,0,4,2,0,0,0,5657\n",
      "194,0,40,220,0,2262,43,226,2,0,10,26,54,213,7,262,0,0,393,44,0,49,142,0,0,0,0,45,43,0,0,362,367,0,0,11,118,0,0,0,0,0,0,0,0,0,0,4867\n",
      "1890,8,131,371,12,802,134,34,750,120,703,13,0,28,82,5,0,45,5,204,0,89,120,0,0,0,11,0,294,0,714,3,0,0,0,0,4,0,1,0,3,0,0,0,0,0,2,3422\n",
      "552,0,89,442,0,1793,653,12,185,18,60,88,1,23,167,0,45,42,11,264,0,11,150,32,0,0,1,13,43,0,0,1,231,0,0,3,16,0,0,3,0,0,0,0,0,0,0,5051\n",
      "447,0,728,119,0,2153,38,48,763,1,6,1,0,155,5,19,33,390,349,44,1,0,30,0,21,0,0,50,313,746,1,113,2,0,0,0,0,0,10,0,1,0,0,0,0,0,0,3413\n",
      "550,0,9,314,0,1472,2,0,463,79,0,67,4,0,10,781,56,2,369,21,0,17,182,0,0,13,0,0,154,0,13,67,612,0,0,1,110,0,0,0,0,0,0,0,10,0,0,4622\n",
      "1007,6,654,606,11,1194,3,499,49,8,14,1,53,88,15,136,16,0,39,0,1,0,10,0,0,24,253,1,254,0,0,831,25,0,0,0,3,0,10,0,0,0,545,0,0,0,0,3644\n",
      "2113,26,113,472,98,1645,204,41,30,15,78,0,843,0,0,29,0,0,140,5,6,6,929,1927,0,0,8,0,8,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1253\n",
      "920,0,200,1708,75,864,41,13,91,0,223,265,39,6,1,6,193,578,340,2,13,7,46,11,0,0,0,3,168,0,0,5,0,0,0,51,227,0,1,5,0,0,0,0,0,0,0,3898\n",
      "1443,0,55,142,0,1063,0,15,745,0,45,16,520,73,220,47,2,0,0,9,37,13,86,0,73,0,8,15,25,0,0,95,0,0,0,0,535,0,0,31,0,0,0,0,0,0,0,4687\n",
      "1886,71,415,110,18,1597,52,5,149,0,17,15,187,90,38,249,22,11,142,813,0,185,203,0,0,431,0,0,875,0,8,36,0,0,0,0,183,0,0,197,0,0,0,0,0,0,0,1995\n",
      "589,176,302,120,0,2187,25,212,295,380,75,0,358,68,64,1,0,3,110,605,0,0,0,0,0,0,0,112,33,0,0,3,75,0,0,83,24,0,0,0,0,0,58,0,0,0,0,4042\n",
      "1467,0,130,140,31,1986,0,141,237,0,245,12,0,86,272,0,104,2,401,17,289,121,3,124,0,19,0,0,637,0,0,22,0,0,0,0,0,0,1,4,0,0,13,0,0,0,0,3496\n",
      "684,3,179,493,0,1245,0,3,710,5,427,2,85,4,0,109,12,0,374,313,5,17,96,0,6,12,230,0,1099,0,65,296,27,0,0,0,441,0,0,0,0,0,0,0,0,0,0,3058\n",
      "224,27,0,940,0,858,55,0,644,161,298,0,1,0,227,1763,32,0,27,3,2,4,165,0,0,0,0,151,760,0,0,13,165,0,0,0,154,0,0,3,6,0,0,0,0,0,0,3317\n",
      "1586,0,0,70,85,1868,191,20,126,192,152,0,1,0,22,11,11,166,423,23,0,0,206,5,0,2,7,0,72,0,123,12,103,0,0,0,16,0,0,2,0,0,0,0,0,0,0,4505\n",
      "1639,0,7,381,5,1999,213,0,259,4,0,15,5,64,15,43,24,22,175,8,0,0,45,3,0,25,4,6,244,0,0,258,270,0,0,1,154,0,0,0,3,0,0,0,0,0,0,4109\n",
      "1121,0,53,111,0,1676,105,0,356,4,55,0,526,53,1322,14,25,139,551,7,250,0,78,3,0,0,61,8,6,0,0,22,147,0,0,0,36,0,0,0,0,0,0,0,0,0,0,3271\n",
      "1002,18,27,261,0,1353,51,253,112,138,368,29,6,11,83,414,5,4,4,138,97,0,190,16,0,31,0,15,17,0,1,192,17,199,0,0,1,0,1,0,0,0,0,0,0,0,0,4946\n",
      "781,0,25,513,0,500,200,29,152,237,525,889,15,0,2,0,93,54,3,639,0,191,199,0,0,47,0,0,10,0,0,2,109,0,0,6,0,0,0,0,0,0,0,0,0,0,0,4779\n",
      "569,0,1222,186,0,1389,43,53,31,0,40,0,1,0,118,0,0,0,14,287,1,0,9,0,0,6,0,0,102,298,0,367,21,0,0,0,245,0,0,12,0,3,0,0,0,0,0,4983\n",
      "1563,1,198,719,0,1408,14,9,5,9,112,686,0,0,602,238,26,0,554,15,3,0,14,7,0,15,0,1,453,124,0,345,0,0,0,34,24,0,0,3,0,0,0,0,0,0,0,2818\n",
      "961,0,162,575,0,1630,2,1175,131,13,34,0,170,184,770,0,14,30,1,59,0,0,120,0,3,142,166,6,28,0,4,0,428,0,0,0,125,0,0,0,0,0,0,0,0,0,0,3067\n",
      "143,0,42,1745,3,1036,63,0,118,108,13,39,49,54,53,21,99,0,32,0,46,0,537,351,22,0,4,0,14,0,4,900,1,0,0,0,3,1,0,0,0,0,0,0,0,0,0,4499\n",
      "2159,3,38,400,0,966,223,22,355,0,2,0,16,211,0,1,88,30,102,330,8,109,645,100,59,0,0,0,115,5,3,12,65,0,0,751,1,0,0,0,1,0,0,0,0,0,0,3180\n",
      "1260,0,7,61,0,1219,436,46,205,23,78,29,265,153,0,195,56,118,204,0,1,3,151,0,1,0,0,0,696,0,1,206,5,0,0,3,331,0,0,0,18,0,0,0,0,0,0,4229\n",
      "1028,0,0,421,5,393,213,0,794,87,106,3,23,22,0,1,427,112,13,361,10,0,204,1,0,1097,0,42,47,0,0,112,0,0,0,0,11,0,0,22,248,93,0,0,0,0,0,4104\n",
      "3366,7,333,266,0,525,259,89,1,0,66,209,319,124,254,0,91,0,134,8,158,6,439,235,0,0,0,0,95,0,0,15,183,0,0,277,84,0,0,6,0,0,0,0,0,0,0,2451\n",
      "2147,0,182,321,296,1817,15,3,188,0,1,355,115,0,287,2,0,187,10,21,35,0,106,0,147,232,0,3,125,0,25,31,0,0,0,0,128,0,132,4,57,0,0,0,0,0,0,3028\n",
      "1064,1,33,232,0,1082,825,63,762,287,145,195,281,10,5,1,54,0,170,192,77,1,6,0,3,0,280,0,57,0,26,251,250,0,0,0,0,0,0,347,0,0,0,0,0,0,0,3300\n",
      "657,536,257,809,0,662,170,376,475,0,7,1,496,474,0,4,8,3,94,121,1,0,96,224,0,19,15,126,15,0,0,227,0,0,0,0,199,0,0,0,1,0,0,0,0,0,0,3927\n",
      "1012,0,34,204,0,1049,370,42,596,7,2,0,257,630,1,8,0,216,112,2,0,9,995,0,0,127,31,83,0,0,0,124,3,0,0,0,488,0,0,0,0,0,0,0,0,0,0,3598\n",
      "1251,135,683,81,0,1248,67,0,83,56,78,0,192,13,65,451,0,86,122,203,0,515,69,0,2,54,3,50,564,0,265,13,1,0,0,0,498,0,0,0,0,0,0,0,0,0,0,3152\n",
      "1464,0,620,187,0,809,88,3,79,18,692,2,2,50,47,117,259,4,39,95,1,3,0,1,0,0,7,274,4,0,168,16,45,0,0,0,917,0,0,188,0,0,0,46,0,0,0,3755\n",
      "586,0,148,498,3,929,113,35,183,98,740,77,0,0,8,0,0,1711,276,2,0,91,9,0,16,0,0,0,895,0,0,2,389,0,0,0,35,0,0,0,99,0,214,0,0,0,0,2843\n",
      "698,15,841,1055,16,1355,2,386,6,1,0,107,55,26,32,80,4,113,60,17,166,10,277,9,0,2,105,0,4,0,0,41,29,0,0,0,138,0,0,2,3,0,0,0,0,0,0,4345\n",
      "1482,19,194,343,34,1140,98,0,566,0,126,0,67,132,2,1,182,31,95,299,0,24,606,0,1,0,0,112,491,0,0,24,1,0,0,0,1521,0,0,0,0,0,0,0,0,0,0,2409\n",
      "786,0,261,206,0,3129,43,30,43,0,22,276,83,6,38,0,32,0,43,95,0,116,15,0,0,0,0,15,51,0,0,142,53,0,0,0,25,0,0,65,146,0,1,0,0,0,0,4278\n",
      "572,0,837,197,0,611,236,42,269,571,147,197,67,258,14,0,4,2,251,931,0,0,3,10,0,0,145,1,141,0,47,0,157,0,0,0,69,0,0,0,0,0,0,161,0,0,0,4060\n",
      "955,0,321,654,1,1307,205,33,166,0,79,0,400,69,174,84,17,105,442,217,10,0,24,0,0,167,0,0,58,0,0,93,32,0,0,0,3,0,22,36,0,0,0,0,0,0,0,4326\n",
      "1452,0,309,489,0,486,113,254,211,207,22,7,691,169,161,920,431,3,173,0,0,42,285,10,0,3,0,0,162,0,61,301,377,0,0,96,0,0,0,13,0,0,0,0,0,0,3,2549\n",
      "491,0,255,555,1,1029,0,0,651,680,330,16,0,91,39,0,357,233,185,922,3,40,23,0,2,0,0,0,1181,0,54,74,37,0,0,0,4,0,0,7,0,0,151,0,0,0,0,2589\n",
      "1153,5,293,780,2,1155,18,0,83,11,209,253,3,2,380,234,32,2,479,732,1,6,787,10,0,176,0,69,140,211,5,4,0,0,0,0,33,0,0,0,0,0,1,0,0,0,0,2731\n",
      "1517,0,869,48,0,558,14,0,127,0,1,2,1,145,710,1,6,305,12,624,0,0,38,2,7,0,13,90,55,0,0,46,2,0,0,0,0,0,0,2,0,0,0,0,0,30,0,4775\n",
      "902,17,204,159,0,2635,464,1,329,0,103,19,89,0,0,0,86,362,33,88,131,0,209,72,0,5,3,483,30,0,0,2,0,0,0,9,25,0,0,0,0,0,0,0,0,0,0,3540\n",
      "2241,0,11,950,0,958,1,3,23,0,259,466,377,0,6,0,82,677,5,260,0,0,361,128,15,73,209,1,164,0,2,64,0,1,0,0,277,0,0,0,0,0,0,0,0,0,67,2319\n",
      "459,0,536,601,16,1470,420,291,518,3,340,0,85,0,0,459,63,98,60,7,0,0,98,8,0,0,460,46,157,0,1,1206,1,0,0,351,0,0,0,0,0,0,0,0,0,0,0,2246\n",
      "527,0,41,635,0,1624,529,26,161,40,51,50,147,76,191,6,17,6,24,665,0,11,828,8,0,0,0,0,182,0,0,103,4,0,0,254,757,3,0,758,0,0,0,7,0,0,0,2269\n",
      "812,96,36,589,0,1609,169,0,190,0,102,0,4,0,16,468,187,1,10,164,0,33,462,25,1,22,86,0,62,0,163,985,1,0,0,0,38,0,0,0,164,0,0,0,0,0,0,3505\n",
      "1436,0,78,230,0,2178,203,105,46,45,53,12,133,63,45,44,15,31,28,89,0,275,60,3,0,49,50,0,121,0,0,221,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4355\n",
      "1586,678,165,142,161,1427,5,0,39,0,205,38,0,183,108,1,36,105,85,75,89,158,110,0,0,164,0,0,21,0,91,333,2,0,0,0,2,4,0,0,0,0,0,0,0,0,0,3987\n",
      "874,0,176,381,83,1015,1520,10,62,0,678,27,37,45,28,72,81,74,311,93,0,0,293,6,0,0,0,0,14,0,111,1234,19,0,0,40,1,0,0,0,0,0,0,0,0,332,0,2383\n",
      "1495,0,83,1219,20,1102,1,0,787,113,35,5,4,20,289,0,22,26,315,639,0,92,121,73,4,0,7,22,302,0,29,6,99,0,0,0,29,0,0,0,0,0,8,0,0,0,0,3033\n",
      "1066,5,324,71,129,600,546,1,356,321,204,68,3,656,37,313,129,273,127,21,1,4,458,0,0,0,1,0,248,0,0,165,23,0,0,18,83,0,9,0,0,0,102,0,0,0,0,3638\n",
      "466,2,378,343,0,1591,346,825,250,0,2,196,478,51,0,27,0,157,140,4,0,0,5,8,20,10,0,0,113,0,0,0,69,0,0,824,1,0,0,51,408,8,0,0,0,0,0,3227\n",
      "537,0,122,370,2,484,340,0,488,6,30,0,39,387,46,187,116,0,207,299,25,97,594,0,0,0,14,2,234,118,5,27,227,0,0,0,94,0,0,279,0,0,0,0,0,0,0,4624\n",
      "2098,12,332,1625,59,2034,831,17,140,0,2,13,15,10,87,0,4,0,0,58,226,6,5,11,0,34,39,0,279,0,125,72,1,0,0,0,1,0,0,0,62,0,0,0,0,0,0,1802\n",
      "1297,0,302,252,0,897,95,0,66,0,119,393,143,328,23,236,172,356,321,83,0,0,1,0,0,10,0,0,792,0,0,91,22,15,0,0,0,0,0,96,0,0,0,0,0,0,0,3890\n",
      "1511,250,498,371,0,1544,184,232,338,0,135,0,60,149,453,0,21,40,87,275,0,0,92,0,0,0,0,0,11,0,0,91,0,9,0,44,2,0,0,13,109,0,27,0,0,0,0,3454\n",
      "667,0,937,126,15,1508,79,6,462,222,26,112,137,0,35,0,0,200,582,2,0,4,545,136,0,0,0,24,24,0,2,209,32,0,0,0,463,0,0,0,0,0,0,8,0,0,0,3437\n",
      "185,4,479,507,0,681,114,134,1176,0,0,0,245,0,134,6,247,0,188,186,0,0,1061,54,0,180,3,0,32,0,75,8,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4264\n",
      "1386,0,313,199,2,1334,84,63,84,47,188,222,152,6,113,0,3,4,137,8,8,0,282,0,0,115,0,142,411,0,4,1082,47,0,0,0,25,91,0,0,0,0,0,0,0,0,0,3448\n",
      "2408,30,81,781,0,967,399,7,372,0,34,0,0,8,179,23,57,371,155,223,0,3,28,0,58,0,0,0,947,22,0,15,0,0,0,13,13,0,0,247,0,0,2,0,0,8,0,2549\n",
      "2304,5,70,46,0,1625,19,1,218,21,403,19,81,106,32,0,0,0,0,0,0,124,475,0,26,162,1,356,508,0,0,168,8,0,0,0,6,0,0,0,0,0,0,0,0,0,0,3216\n",
      "1452,0,172,169,10,2880,306,0,612,0,276,7,132,0,579,78,136,77,157,22,0,11,71,14,9,318,1,27,201,0,0,82,0,0,0,0,286,0,0,2,1,0,0,0,0,0,0,1912\n",
      "523,0,295,1654,0,1613,75,339,399,0,48,0,113,19,202,0,168,364,31,210,0,2,332,0,0,1,49,0,518,0,1,30,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2992\n",
      "2657,0,246,68,0,2889,46,68,3,0,21,5,11,1,0,1,87,0,3,30,0,18,260,2,3,8,0,0,168,0,0,578,30,0,0,0,141,0,0,0,0,0,0,0,0,0,0,2656\n",
      "1948,0,45,175,0,1215,2,30,124,211,33,199,75,28,105,1,36,171,72,259,5,12,163,0,0,13,27,0,29,156,0,1271,160,0,0,0,159,0,0,0,8,0,0,0,0,0,0,3268\n",
      "1567,0,351,589,0,1250,57,3,273,54,10,21,0,33,37,0,409,1,91,90,5,516,124,1,0,11,30,0,24,0,88,78,0,75,0,0,0,0,0,0,0,0,0,0,0,8,0,4204\n",
      "1065,131,346,181,0,829,4,0,32,0,106,194,319,15,69,50,274,291,229,7,1,0,313,3,0,2,0,0,121,0,0,1,1,0,0,862,36,0,0,1,0,0,0,0,0,0,0,4517\n",
      "2441,0,98,672,0,816,8,77,66,8,375,344,18,276,40,7,64,10,4,11,23,0,165,5,85,11,0,53,375,0,326,53,62,0,0,0,337,0,0,0,0,0,21,0,0,0,0,3149\n",
      "1931,0,45,207,15,1140,53,0,35,552,188,175,41,89,37,18,12,46,113,35,137,0,136,9,0,42,3,0,313,0,29,83,552,0,0,0,0,0,0,0,4,0,0,0,0,0,0,3960\n",
      "139,0,323,115,0,1220,755,1,1148,0,27,39,90,1,90,18,0,1,183,150,7,3,854,27,0,22,0,538,13,0,0,26,2,0,0,0,216,0,0,0,0,0,0,0,0,0,0,3992\n",
      "1242,0,537,620,0,1299,52,334,64,124,1,15,58,97,758,4,286,0,29,153,0,277,1,0,4,10,72,226,189,0,0,391,45,0,4,0,26,0,0,0,0,0,244,0,0,0,0,2838\n",
      "1548,0,87,95,0,1142,787,85,288,36,14,56,370,0,41,2,0,123,68,21,0,0,198,0,0,477,0,14,41,0,0,1576,9,0,0,0,48,0,0,1,0,0,0,0,0,0,0,2873\n",
      "38,0,1421,41,321,1357,31,20,1480,0,77,4,559,1,201,0,348,0,89,0,0,1,3,80,14,131,10,50,76,0,0,102,229,0,0,262,35,0,15,1,0,1,0,0,0,0,0,3002\n",
      "1245,58,147,96,0,1985,56,74,35,0,158,33,0,86,850,0,6,1,1244,6,57,0,21,0,118,0,4,12,205,0,90,48,0,0,0,0,21,0,0,0,0,0,6,0,0,0,0,3338\n",
      "924,37,175,80,4,742,103,220,1450,0,122,19,175,20,279,0,0,63,119,0,1,1,2,121,0,0,0,0,233,0,0,6,3,0,0,541,29,0,11,0,9,441,0,0,0,0,0,4070\n",
      "1851,0,46,169,0,1270,10,296,476,1,41,2,25,3,613,271,0,12,3,9,9,0,162,0,0,6,0,59,340,0,4,64,249,0,0,14,4,0,0,6,0,35,0,17,0,0,0,3933\n",
      "460,23,116,494,0,1172,43,186,618,466,3,0,126,0,169,12,147,9,120,499,0,0,155,12,0,6,75,503,26,0,5,539,9,0,0,0,273,0,0,0,0,0,0,0,0,0,0,3734\n",
      "704,0,89,255,4,1494,0,6,10,19,2,234,87,28,2,117,5,86,170,222,675,0,549,0,35,161,9,378,7,0,0,34,41,0,0,49,6,0,0,0,0,0,0,2,0,0,0,4520\n",
      "1258,26,21,262,186,958,20,12,231,0,0,0,38,49,726,538,7,28,15,170,195,0,309,0,0,0,0,0,539,0,0,226,0,0,0,0,0,0,0,0,8,0,0,0,0,0,22,4156\n",
      "1060,114,267,609,7,443,281,7,51,5,31,0,128,207,25,30,35,2,22,19,1,6,297,0,196,1,1,10,635,1,0,131,64,0,0,34,472,0,0,0,0,0,0,0,0,0,0,4808\n",
      "487,4,5,105,18,2828,0,0,754,0,46,15,13,6,10,84,1090,163,550,146,0,65,353,1,0,3,0,0,14,0,0,120,6,0,0,0,7,0,0,1,0,0,0,0,0,0,0,3106\n",
      "647,0,12,241,0,1464,0,5,3,179,0,4,0,0,219,80,0,0,173,2,0,28,250,0,0,0,98,67,353,0,0,167,203,0,0,26,75,0,0,183,0,0,28,0,0,0,0,5493\n",
      "978,1,507,174,0,1414,34,5,193,1004,23,1,99,0,334,31,1,43,1,0,0,230,450,0,73,1,0,0,139,0,0,48,1,0,0,0,65,0,0,0,0,0,0,0,0,0,0,4150\n",
      "762,80,185,661,0,1172,422,98,81,1,3,32,0,1,7,28,26,298,1,1,0,1,212,1731,0,94,0,1,306,0,0,222,8,0,0,0,4,0,12,0,0,426,0,0,0,0,0,3124\n",
      "578,0,70,154,0,1604,123,13,598,0,644,201,204,0,105,0,0,0,0,228,155,0,1675,118,56,0,80,159,300,0,1,150,0,0,0,0,0,0,0,0,39,0,0,0,0,0,0,2745\n",
      "509,0,124,519,0,558,119,84,318,0,151,106,120,124,1,0,3,510,1153,869,14,0,140,1,1,0,0,0,29,3,37,217,11,0,0,0,149,0,0,588,0,0,0,0,0,0,0,3542\n",
      "795,329,122,469,12,1015,282,0,577,0,35,513,52,0,862,85,44,68,3,306,0,46,30,0,194,1,307,7,116,12,0,396,392,0,0,0,46,0,0,1,0,0,0,0,0,0,0,2883\n",
      "1674,0,409,1255,3,788,558,320,533,0,0,5,33,242,39,0,334,0,0,4,0,114,622,0,0,0,0,78,8,0,17,36,317,0,0,27,39,0,1,0,0,0,7,0,0,0,0,2537\n",
      "344,0,29,543,0,574,0,0,544,0,10,1,13,71,22,49,0,7,2,274,0,0,357,27,0,199,0,1,804,0,0,391,4,17,0,0,2425,0,0,0,473,0,144,0,0,0,0,2675\n",
      "2628,0,162,292,22,1374,65,336,158,1,61,1,7,0,80,12,119,93,52,9,31,75,52,48,0,5,3,0,590,0,0,60,28,0,0,0,196,0,0,0,0,0,0,0,0,0,0,3440\n",
      "1236,0,637,524,0,300,3,131,193,0,126,3,41,2,90,14,492,373,386,871,0,678,101,0,0,286,0,303,174,0,12,214,164,0,0,3,10,0,0,27,0,1,0,0,0,0,0,2605\n",
      "712,0,282,194,6,1394,118,205,128,0,94,4,11,330,53,22,88,0,98,12,0,26,865,446,1,103,4,0,351,0,9,0,7,0,0,0,0,0,0,1,0,0,0,0,0,0,0,4436\n",
      "696,0,176,389,209,893,334,352,103,0,55,0,39,12,306,7,52,124,114,27,74,1,2,0,0,0,0,0,32,0,0,377,14,0,0,4,43,0,14,0,0,0,2,0,0,0,0,5549\n",
      "1715,4,598,636,355,1199,0,122,676,0,124,97,1,252,8,30,0,0,531,7,0,0,305,36,0,0,130,0,0,0,0,162,88,0,0,0,80,0,0,0,0,107,19,0,0,0,0,2718\n",
      "412,176,211,200,0,1735,90,37,884,8,34,156,20,0,1434,0,0,121,93,11,6,0,7,1,15,1,73,0,400,0,5,114,0,0,0,6,4,0,0,0,0,0,0,0,0,0,0,3746\n",
      "697,25,32,335,0,2095,14,20,312,192,72,300,128,1,5,111,0,487,46,11,1,0,277,0,0,0,13,14,3,0,1,132,709,0,0,41,55,0,32,0,0,0,0,0,0,0,0,3839\n",
      "584,14,709,456,293,2864,81,0,219,0,25,133,5,0,121,0,59,0,68,153,1,46,226,1,0,17,0,9,9,0,3,0,8,0,0,0,1,0,0,0,0,0,0,0,0,0,0,3895\n",
      "585,0,703,236,16,1151,1,0,277,0,2,546,631,0,119,34,1448,21,115,0,0,0,44,3,0,0,0,30,15,0,0,37,86,0,0,7,136,0,0,0,0,0,0,0,0,0,0,3757\n",
      "751,0,122,276,0,1347,7,1,304,0,1,16,13,0,0,24,232,0,528,167,0,3,32,484,0,2,243,0,136,60,226,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,5015\n",
      "650,0,139,204,0,1737,43,0,168,0,460,0,5,1,244,136,505,2,152,8,0,54,78,0,0,4,32,0,28,0,17,27,82,0,0,0,72,0,0,30,0,0,0,0,0,0,0,5122\n",
      "1388,0,282,1640,0,627,233,110,39,0,27,0,0,9,15,12,0,13,20,43,2,231,304,212,0,0,0,1,0,0,3,0,0,0,0,0,187,0,0,2,0,0,0,0,0,0,0,4600\n",
      "474,31,72,283,775,1763,72,17,111,135,300,1,336,1,258,6,0,0,157,84,0,0,23,0,63,0,0,15,10,0,260,71,204,0,0,19,193,0,0,15,2,0,0,0,0,0,0,4249\n",
      "1416,0,457,521,6,881,0,514,180,0,104,21,81,391,52,125,95,0,2,0,20,0,601,0,0,6,0,0,1084,0,1,15,0,0,0,27,15,0,0,84,0,0,0,0,8,14,2,3277\n",
      "846,1,210,756,0,1352,0,0,653,3,67,7,83,0,9,65,5,0,68,5,0,0,151,0,0,384,1,0,519,0,0,660,157,0,0,75,4,0,0,60,0,0,0,0,0,0,0,3859\n",
      "1939,0,242,255,133,1423,18,1,64,22,509,7,26,82,4,41,282,3,2,196,52,23,22,136,3,62,58,0,607,0,50,22,7,0,0,0,7,0,0,1,6,0,0,0,0,0,0,3695\n",
      "1139,0,135,460,0,661,2,3,1140,0,23,11,74,15,2,65,110,0,800,0,29,2,17,156,0,0,0,0,1,0,0,108,65,0,0,0,4,0,0,0,0,6,25,0,0,0,0,4947\n",
      "1040,143,491,582,0,1348,92,28,8,0,1491,5,10,70,274,0,6,0,317,17,245,108,215,0,0,0,317,47,433,0,4,3,1,0,0,0,0,0,0,56,0,0,0,0,0,0,0,2649\n",
      "1328,0,67,357,24,895,333,0,25,8,28,92,1,0,566,0,1370,0,544,999,7,28,40,0,57,60,299,0,81,0,5,1,3,20,0,0,314,0,2,19,6,0,0,0,0,0,0,2421\n",
      "596,0,121,284,4,1226,48,42,754,0,9,825,0,32,100,124,130,0,8,18,5,84,181,3,0,547,3,0,517,0,169,8,0,0,0,0,7,1,0,0,0,7,0,0,0,0,0,4147\n",
      "1385,14,137,130,0,916,80,35,75,2,420,4,0,17,261,0,49,288,0,161,313,0,7,8,0,188,0,0,454,0,1517,5,153,0,0,0,283,0,0,8,0,0,34,0,0,0,0,3056\n",
      "1981,0,525,546,2,1176,79,26,71,48,43,0,0,45,49,3,0,21,16,117,0,0,315,0,5,0,0,3,55,0,4,372,41,1,0,0,1,0,0,0,0,0,0,0,0,0,0,4455\n",
      "2193,9,490,119,0,1573,95,2,135,0,113,26,331,0,136,10,67,22,88,212,0,0,128,0,0,2,89,34,75,0,0,498,0,0,0,0,93,0,0,0,6,0,0,0,0,0,0,3454\n",
      "830,0,178,278,0,1276,128,3,163,2,390,1120,82,15,1,68,487,133,11,21,4,5,119,3,1,1,1,0,29,0,0,168,284,0,0,0,1,0,0,97,0,0,0,0,0,5,0,4096\n",
      "780,87,26,877,238,1790,29,39,172,0,15,0,53,70,62,2,62,89,92,43,428,21,4,80,0,11,0,0,271,0,0,2386,211,0,0,0,15,0,0,2,0,0,0,0,0,0,0,2045\n",
      "417,2,1241,84,149,1151,345,61,158,0,90,129,63,145,45,6,28,295,9,69,0,16,1,0,0,0,5,0,597,0,5,356,35,0,0,0,13,21,9,0,69,0,109,1,0,0,273,4003\n",
      "264,0,241,284,322,1291,167,1,130,535,36,40,44,51,144,0,0,2,111,86,1,165,49,78,0,0,197,0,885,0,50,3,36,0,0,0,4,0,0,0,0,0,0,0,0,0,0,4783\n",
      "1109,2,138,1077,760,2069,640,168,5,0,16,0,0,0,1,123,451,0,3,1,1,2,144,0,79,1,0,0,28,0,0,14,50,0,0,0,5,0,0,14,0,0,0,0,0,0,0,3099\n",
      "1904,1,168,117,0,974,74,611,87,221,118,136,432,994,171,0,8,19,21,0,0,1,33,15,0,0,0,6,55,0,0,305,258,81,0,0,8,0,3,0,0,0,0,0,0,0,0,3179\n",
      "1068,4,213,243,1,1129,0,4,910,193,0,14,155,11,964,0,1,0,25,14,170,2,394,41,0,231,0,218,23,0,0,443,270,0,0,3,859,0,0,0,0,0,35,0,0,3,0,2359\n",
      "1927,0,8,538,0,1094,165,1218,58,107,7,414,1,108,3,414,7,5,24,45,2,115,0,152,0,1,0,3,12,31,4,303,358,0,0,0,58,0,0,35,0,0,0,0,23,0,0,2760\n",
      "1312,5,243,1086,0,922,5,162,38,30,2,375,17,20,173,7,89,183,274,6,0,31,9,146,0,457,0,0,76,0,0,21,153,68,0,0,1463,0,0,2,1,0,0,0,0,0,0,2624\n",
      "2308,0,141,120,9,1281,37,113,210,0,214,39,0,269,441,206,4,35,12,77,0,143,233,0,38,0,1,8,923,0,0,106,10,0,0,5,3,0,0,0,0,0,0,0,0,0,0,3014\n",
      "870,144,314,1615,0,751,89,0,132,113,9,0,0,0,222,108,0,29,70,4,0,0,24,0,0,75,120,5,620,0,7,374,14,0,0,0,104,0,0,73,0,0,0,0,0,0,0,4114\n",
      "144,117,0,91,0,1494,367,3,84,98,688,547,2,5,0,19,0,330,9,1,0,186,0,0,0,0,139,0,375,0,0,15,61,0,0,21,56,0,5,0,0,0,0,0,0,67,0,5076\n",
      "274,65,97,444,24,1993,45,152,146,947,1119,68,1,118,0,4,86,1,2,245,14,0,101,52,0,0,1,0,77,0,41,407,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3447\n",
      "672,2,134,1181,3,1844,67,0,770,2,527,2,117,92,50,32,81,0,5,153,10,441,122,44,0,0,0,0,49,24,0,0,110,0,0,0,6,0,2,0,0,1,0,0,0,0,0,3457\n",
      "503,109,791,415,0,836,99,463,14,0,11,15,148,43,2,6,144,0,163,0,99,1,58,104,0,0,110,0,539,0,0,15,362,0,28,1,56,0,501,0,0,0,0,0,0,0,0,4364\n",
      "619,0,612,459,72,2116,13,10,285,0,212,0,2,1,0,10,27,44,870,231,2,0,42,0,0,0,0,0,155,0,156,371,15,0,0,0,20,0,0,6,0,0,0,1,569,0,0,3080\n",
      "214,165,3,43,0,559,1180,770,316,0,46,5,1,438,788,0,76,32,189,133,0,52,1,260,0,287,363,0,75,0,6,197,553,0,0,1,1,0,0,1,0,0,0,0,0,0,0,3245\n",
      "516,0,157,359,6,1105,0,4,267,65,0,5,2,0,1135,7,8,124,118,154,0,41,16,0,0,21,0,0,100,0,0,12,32,0,0,0,710,0,0,2,0,0,2,0,0,0,0,5032\n",
      "1742,8,178,149,5,663,154,294,138,0,733,641,572,0,8,0,5,56,1,0,143,60,289,165,1,0,0,0,27,1,875,190,1,0,0,0,188,0,0,0,0,0,0,0,0,0,0,2713\n",
      "403,11,528,66,9,1232,2,18,40,0,486,272,19,725,33,163,212,51,237,819,197,0,23,0,0,1,34,0,1,0,0,7,784,0,0,85,14,0,0,361,0,244,0,0,0,0,0,2923\n",
      "1032,0,79,923,2,1913,41,1,27,0,76,7,0,0,96,0,2,2,270,180,1,0,108,102,0,28,5,0,4,0,21,192,3,0,0,0,134,364,0,5,0,15,0,0,0,0,0,4367\n",
      "686,0,4,514,142,809,71,317,1,822,3,40,6,3,121,0,106,993,7,24,0,126,141,23,144,2,0,38,194,0,10,227,234,0,0,60,71,0,0,295,0,0,0,0,0,0,0,3766\n",
      "790,0,311,722,5,1335,501,0,355,98,0,165,9,0,0,12,680,417,252,36,0,1,99,145,360,0,0,0,127,0,3,339,21,0,0,0,6,0,0,2,112,0,0,0,0,0,0,3097\n",
      "485,0,260,340,0,1539,278,59,1134,20,69,0,8,1,24,0,69,0,413,313,0,40,2,0,0,192,0,44,5,30,15,107,0,0,10,89,0,0,0,2,0,0,0,0,0,0,0,4452\n",
      "958,0,400,47,0,757,142,26,940,27,8,21,7,7,115,0,13,7,18,586,866,188,298,23,1,1,0,0,254,0,2,241,7,0,0,0,0,0,0,25,0,34,0,108,0,0,0,3873\n",
      "918,0,0,201,0,1001,96,438,398,0,53,0,44,1082,46,4,67,4,0,521,69,0,130,69,16,7,12,56,413,4,0,147,51,0,0,1,9,0,0,0,105,9,0,0,0,0,0,4029\n",
      "411,0,167,924,52,1156,262,6,36,0,0,341,0,0,5,0,3,0,22,2,13,1,9,0,0,0,0,3,54,0,97,7,0,0,0,15,0,124,0,1,0,0,0,0,0,0,0,6289\n",
      "339,0,15,411,0,2186,29,0,157,442,1430,0,1,1,79,362,20,5,232,22,0,102,269,761,0,7,0,7,635,0,1,0,43,0,0,0,146,0,0,23,5,0,0,0,0,0,0,2270\n",
      "833,0,5,668,102,1104,242,158,4,0,0,0,94,61,511,45,105,14,15,509,0,0,518,377,0,0,0,189,142,0,0,663,19,0,0,0,168,0,0,0,0,0,0,0,0,0,0,3454\n",
      "495,175,45,225,346,686,4,0,296,216,871,208,6,8,6,1,152,57,2,32,472,75,392,2,5,0,0,0,47,0,0,1,56,0,0,47,36,0,103,0,0,0,0,0,0,0,0,4933\n",
      "1712,401,927,98,602,1047,122,300,75,8,134,2,80,60,107,17,12,243,10,3,1,1,629,21,142,0,0,0,84,0,1,122,0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,3022\n",
      "868,2,301,1600,0,1426,90,0,326,0,33,10,0,0,51,0,2,32,0,278,2,0,251,195,0,5,0,281,464,29,0,0,0,0,0,13,1,0,0,0,0,0,0,102,0,0,0,3638\n",
      "801,46,396,36,25,614,317,2,336,0,135,761,22,153,601,0,1,490,1,6,0,270,1,228,6,0,0,0,47,0,1,13,328,0,0,0,223,0,0,0,0,0,27,0,0,0,0,4113\n",
      "1346,0,2,1381,0,263,8,55,1540,245,8,0,0,0,397,77,95,28,1,72,0,0,194,1,0,11,3,0,160,0,4,3,31,0,17,0,1,1434,0,0,0,0,0,0,0,0,0,2623\n",
      "1284,23,18,841,0,400,3,114,156,0,8,28,128,13,982,14,1165,22,65,2,0,3,0,0,40,0,415,1,242,0,0,79,0,0,0,1098,222,0,71,0,0,0,0,0,0,11,0,2552\n",
      "607,0,576,56,84,2713,226,1,139,414,253,30,73,37,278,297,0,43,96,1,0,0,30,0,0,0,5,4,16,0,12,277,25,0,0,54,6,0,0,0,0,0,0,0,0,0,0,3647\n",
      "1352,294,105,144,5,1227,135,83,564,70,44,0,85,20,0,43,19,172,121,531,18,47,9,3,214,109,0,0,19,0,0,551,3,0,0,0,3,0,49,0,0,0,0,0,412,0,0,3549\n",
      "821,1,16,373,627,1000,0,107,17,0,32,223,20,256,234,3,0,0,201,483,0,0,98,4,0,0,0,0,454,0,79,204,71,0,0,0,71,0,6,0,0,0,0,0,0,0,0,4599\n",
      "1738,0,212,220,0,2270,46,1,115,7,0,132,11,0,2,0,0,6,58,624,65,0,85,1,0,0,41,14,236,0,0,14,0,0,0,4,3,0,0,0,47,779,7,0,0,0,0,3262\n",
      "1392,0,549,401,3,1178,0,29,543,21,14,19,407,43,0,960,519,605,82,9,0,0,173,0,0,0,0,0,9,11,0,63,1,0,0,0,7,0,0,211,10,0,0,0,0,0,0,2741\n",
      "1431,3,135,770,1,1706,83,78,49,0,15,2,132,358,755,38,0,162,241,113,0,10,11,117,0,38,8,149,117,0,0,852,4,60,0,0,0,0,6,18,68,5,0,0,0,0,0,2465\n",
      "737,0,630,579,59,882,176,67,257,8,108,170,53,101,91,0,10,0,3,153,49,568,609,42,0,0,0,0,17,45,1,1,2,7,0,0,157,0,0,1,0,0,0,0,0,0,0,4417\n",
      "856,0,61,112,0,926,31,13,244,719,41,318,13,226,30,1,0,76,2,45,1,0,119,21,0,43,3,55,33,0,2,193,88,0,0,0,284,0,226,104,5,0,0,0,0,0,0,5109\n",
      "1278,0,202,11,0,466,585,34,42,15,3,766,0,0,51,74,8,6,88,213,0,77,412,1,0,0,0,35,1026,254,0,340,0,0,0,22,43,0,0,0,0,2,0,0,0,0,0,3946\n",
      "1416,0,262,206,2,1344,79,0,267,0,0,9,265,0,381,4,1,0,92,66,18,454,37,4,0,36,0,31,64,0,45,47,0,0,0,1,47,278,1,0,0,0,0,0,0,0,0,4543\n",
      "474,257,445,354,1,782,362,883,517,192,0,179,16,11,284,0,502,0,14,112,0,3,171,0,0,262,0,0,152,0,0,27,10,0,0,0,0,0,0,18,0,0,0,0,0,0,0,3972\n",
      "1770,1,457,176,0,1569,22,43,6,76,91,37,41,0,405,3,1,4,121,1,0,0,837,1,1,0,206,2,147,0,0,10,1,0,0,1,232,0,0,0,1,0,0,0,0,6,0,3731\n",
      "985,0,117,12,0,2989,45,101,259,0,143,0,12,91,170,35,316,11,194,73,0,6,220,1,116,145,19,1,26,0,0,284,289,0,0,0,99,0,0,0,0,0,0,0,0,0,0,3241\n",
      "515,0,14,793,0,934,34,148,52,40,257,5,4,1,172,0,25,18,316,232,749,0,20,2,0,151,0,0,238,4,3,443,100,0,0,0,12,0,0,0,0,0,0,23,0,0,0,4695\n",
      "781,2,203,80,303,2262,13,289,211,2,11,0,11,1,12,257,0,0,119,23,7,4,1,1,0,0,0,0,174,0,6,129,8,0,0,63,727,0,0,0,1,0,0,0,0,0,0,4299\n",
      "1298,0,201,1111,0,1798,494,37,246,26,516,117,22,106,103,8,64,109,200,59,0,23,381,8,0,0,0,0,6,0,0,47,9,0,0,0,6,0,0,0,0,0,0,158,0,0,0,2847\n",
      "567,9,3,691,8,2506,363,0,690,0,0,55,47,53,7,58,758,86,35,10,64,6,22,270,7,16,0,0,108,0,1,4,232,40,0,0,142,0,1,0,0,2,0,0,0,0,0,3139\n",
      "739,7,2126,10,1,1043,1,1,299,0,15,5,15,21,13,0,40,315,11,0,73,68,1,0,0,0,1,0,218,0,44,0,1,0,0,0,67,0,0,28,0,0,0,0,0,0,0,4837\n",
      "872,66,22,547,0,1893,6,0,145,0,596,0,73,0,6,106,8,88,16,0,2,6,1,0,5,85,5,0,318,0,0,647,0,0,0,9,7,0,0,17,0,1,0,37,0,0,0,4416\n",
      "713,0,49,735,0,1435,32,116,2,27,10,1,1,0,27,4,201,2,9,278,163,254,0,1,7,211,0,0,776,0,0,366,2,0,0,0,34,0,0,3,0,0,401,0,0,0,0,4140\n",
      "771,0,12,39,28,1187,196,0,134,55,335,625,2,3,410,90,229,0,707,8,1,1,157,24,87,0,5,0,113,0,0,785,21,0,0,4,120,0,0,2,194,174,125,0,0,0,0,3356\n",
      "1481,14,179,39,2,2218,67,5,161,566,172,135,51,0,3,111,12,63,5,2,4,0,262,4,26,2,1,0,0,0,0,59,0,0,0,51,0,0,25,1,0,0,0,0,0,0,0,4279\n",
      "1519,0,16,895,3,1688,8,0,17,0,18,1,18,0,162,33,428,0,755,0,0,0,9,0,0,242,0,0,178,0,109,82,0,0,7,0,24,0,0,150,0,0,0,0,0,0,0,3638\n",
      "433,15,551,1771,0,1665,82,24,39,1,38,0,12,203,1,2,4,15,346,2,0,299,296,127,57,0,0,0,27,0,0,7,26,0,0,0,147,0,0,13,0,0,0,114,0,0,0,3683\n",
      "453,6,855,102,6,401,14,39,165,111,14,0,30,196,873,741,12,2,91,466,11,268,383,38,0,0,0,350,4,0,296,0,3,0,0,56,2,150,155,0,1,0,1,0,0,0,0,3705\n",
      "333,0,74,306,0,1686,314,0,18,0,188,5,93,260,757,7,52,120,331,368,48,105,0,12,311,2,19,0,81,0,27,771,3,0,1,0,856,0,0,0,0,0,6,0,0,4,0,2842\n",
      "556,0,522,390,116,2173,423,5,8,0,10,1,435,0,59,0,0,19,160,250,32,5,125,25,0,0,0,0,4,0,286,84,95,0,0,39,67,0,0,0,0,1,0,0,0,0,0,4110\n",
      "414,49,474,719,0,511,227,2,582,348,0,3,63,36,27,542,109,1,26,374,30,71,0,37,0,42,0,88,79,0,0,1186,90,0,0,0,136,0,0,0,0,0,100,0,0,0,0,3634\n",
      "1373,4,568,563,271,1931,108,0,91,10,87,8,45,52,20,34,4,160,13,49,39,0,6,1,0,13,23,0,4,55,35,393,4,0,0,135,130,0,0,0,0,0,123,0,0,0,0,3648\n",
      "301,899,12,416,0,2128,742,514,4,0,122,300,45,10,24,1,514,322,563,72,0,191,62,0,0,0,0,0,553,0,39,0,0,0,0,6,356,0,0,15,0,0,0,0,0,0,0,1789\n",
      "1567,0,90,89,0,1502,234,3,84,0,97,1,54,31,66,0,262,0,47,260,0,0,2,0,0,0,8,0,261,0,0,372,295,0,0,2,3,0,0,0,0,35,0,0,0,0,0,4635\n",
      "600,0,2,134,66,1859,237,1349,369,15,117,2,16,167,40,88,122,1,170,8,302,0,224,145,2,1,204,0,0,0,13,57,0,0,0,42,69,0,0,65,0,0,0,0,0,0,0,3514\n",
      "1194,5,60,625,2,767,28,6,993,0,2,21,20,78,57,95,36,1,5,0,0,12,649,0,1,0,1,9,214,563,0,76,35,60,0,0,3,0,0,0,1,45,0,90,0,0,0,4246\n",
      "1132,0,55,319,13,1916,347,0,1433,5,0,0,4,0,8,28,4,39,92,0,4,0,304,0,0,4,0,0,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4226\n",
      "1612,0,567,31,15,1688,122,5,914,44,17,10,1,0,0,5,1,40,308,39,4,15,191,3,0,130,0,206,0,0,0,1037,4,0,0,0,16,0,0,0,0,0,0,0,0,0,0,2975\n",
      "590,0,1063,572,0,1369,49,0,464,19,0,10,0,3,7,135,15,8,631,6,2,71,113,0,0,41,0,214,98,36,0,0,254,0,0,0,110,0,0,9,40,0,0,0,0,0,0,4071\n",
      "893,0,808,66,0,1693,68,0,49,3,5,1,0,0,1098,3,0,0,1,1245,0,102,121,0,319,0,0,0,27,0,0,95,0,0,0,0,3,0,0,0,0,13,44,0,0,3,0,3340\n",
      "1506,107,458,203,0,927,291,0,7,27,325,66,182,260,333,12,22,239,41,27,0,4,14,0,0,0,1,1,876,0,0,19,111,2,0,3,4,0,3,8,0,0,0,0,0,0,0,3921\n",
      "1477,337,68,64,0,883,349,1,433,0,97,8,2,0,148,0,6,44,737,89,14,21,343,0,0,34,16,197,188,0,225,10,6,0,0,165,273,0,0,0,0,0,486,0,0,0,0,3279\n",
      "1104,0,400,477,0,2141,778,11,175,1,0,33,13,8,8,334,0,8,375,79,0,19,1,26,0,0,2,34,1,0,0,264,0,0,0,0,242,0,0,0,0,0,7,0,0,0,0,3459\n",
      "558,0,71,135,115,1696,64,5,13,51,0,58,0,409,4,0,362,326,34,18,14,0,362,24,0,0,9,0,39,1,5,130,2838,0,0,0,0,0,0,0,0,0,8,0,0,0,0,2651\n",
      "1975,0,260,521,0,1104,9,33,865,0,152,117,19,102,191,75,259,8,675,0,0,15,116,5,0,0,137,37,242,1,0,559,8,0,26,0,58,0,0,1,0,0,249,0,0,0,0,2181\n",
      "1645,0,69,57,0,1124,171,2,10,9,85,14,48,214,23,0,260,36,41,236,0,101,21,2,0,49,47,25,765,0,6,469,2020,1,0,1,223,0,0,0,0,0,0,0,0,0,0,2226\n",
      "613,1,118,702,61,1103,84,23,903,0,267,36,0,19,128,15,4,35,168,343,0,0,576,38,0,28,0,261,21,1,246,52,21,0,0,6,0,0,0,49,0,1433,0,0,0,0,0,2645\n",
      "1087,0,13,196,4,779,0,22,111,73,182,0,111,0,90,11,28,0,5,0,0,86,37,215,88,4,411,0,158,0,1,986,34,0,0,0,1,0,0,0,51,0,0,0,0,0,0,5216\n",
      "362,0,765,207,0,947,1,31,1,23,483,0,31,1,133,93,371,2,326,142,123,0,821,59,0,14,0,17,1029,0,323,128,0,0,0,373,46,0,32,0,2,0,0,0,0,0,0,3114\n",
      "452,0,884,58,31,2294,4,7,352,0,2,2,113,0,122,40,401,0,0,63,0,6,123,14,0,20,16,31,839,0,5,715,0,0,0,0,17,0,0,1,0,0,3,0,0,0,0,3385\n",
      "492,0,7,314,0,525,108,14,158,0,36,0,32,0,77,90,746,427,275,329,0,0,1349,7,0,791,52,66,124,0,0,2,2,0,0,2,83,0,0,0,0,0,0,0,0,0,0,3892\n",
      "1667,32,88,1600,1,919,3,0,2,190,427,0,0,2,18,0,2,94,64,131,0,0,2,2,0,0,0,0,207,14,417,550,1,0,0,0,95,0,0,6,0,0,0,0,0,0,0,3466\n",
      "416,2,131,438,12,453,33,2,291,7,21,48,346,18,219,4,20,786,189,37,4,3,0,1,0,0,0,1010,827,0,89,633,198,0,0,3,2,0,0,2,0,0,0,73,0,0,0,3682\n",
      "909,0,24,963,62,507,2,274,32,0,0,10,1,9,18,125,172,356,7,0,0,0,96,0,0,397,0,0,6,1,15,33,241,0,0,20,90,0,0,11,0,0,0,0,0,0,0,5619\n",
      "907,0,217,226,0,2147,64,1,88,2,3,0,743,19,3,3,0,18,417,1,0,0,65,0,0,465,35,0,109,0,9,182,8,0,0,0,169,0,0,0,0,0,2,0,0,0,0,4097\n",
      "1136,0,733,122,0,984,3,17,166,31,34,64,3,577,21,0,447,44,401,146,0,0,16,0,0,0,493,35,474,0,0,59,152,0,0,2,54,0,0,144,0,0,0,0,0,0,0,3642\n",
      "406,546,178,890,0,1139,9,7,536,2,82,66,0,13,21,16,3,0,6,11,742,42,4,356,0,42,69,21,14,0,206,176,119,0,0,0,151,0,0,214,0,0,0,0,0,0,0,3913\n",
      "796,2,130,562,2,2172,328,33,249,48,0,49,0,18,299,7,3,48,12,399,0,0,339,0,4,0,0,120,184,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4192\n",
      "1220,0,6,251,3,1346,40,1,82,0,29,5,1,0,274,0,1,271,10,539,94,30,42,4,331,0,0,25,234,74,2,318,0,0,0,3,293,0,0,0,0,0,84,0,0,0,0,4387\n",
      "566,0,311,516,54,2134,9,0,464,0,410,86,0,3,0,1,1,334,358,3,75,112,1029,0,15,0,12,0,61,0,100,55,55,0,0,0,0,75,0,0,0,0,0,0,0,0,0,3161\n",
      "1459,655,158,840,88,755,5,3,85,167,16,11,10,349,0,30,1059,0,59,1,108,248,154,0,0,0,0,24,985,0,3,537,12,0,0,0,9,0,0,37,0,0,0,0,0,2,0,2131\n",
      "3792,189,164,134,18,579,32,30,169,7,289,2,1272,0,1,6,0,0,2,0,0,0,49,2,0,49,234,39,216,0,0,52,16,4,0,0,4,0,0,4,0,1,0,0,0,0,0,2644\n",
      "927,0,69,321,0,2055,67,0,488,64,12,0,124,1,639,1,26,27,1,255,0,1,124,0,0,46,0,0,87,0,1709,424,139,0,0,0,0,0,0,92,186,1,0,0,0,0,0,2114\n",
      "620,50,7,194,0,1378,238,2,729,734,86,0,0,11,9,39,410,184,81,355,222,0,391,0,0,0,0,17,30,0,0,77,149,0,0,104,433,0,146,4,0,0,0,0,150,0,0,3150\n",
      "588,14,542,753,0,496,48,67,392,95,137,330,205,454,161,0,0,10,158,25,12,18,26,22,0,0,1,0,595,0,0,599,7,0,0,0,28,0,0,139,0,0,0,0,0,0,0,4078\n",
      "699,0,493,733,0,1161,0,0,231,32,234,38,12,2,513,3,5,32,1353,1,6,13,0,0,0,0,116,24,44,26,0,633,3,0,0,0,124,0,0,138,0,0,0,0,0,0,0,3331\n",
      "658,228,329,144,130,543,289,41,127,0,552,71,6,6,31,0,123,0,109,10,0,2,780,0,1,36,0,74,572,0,0,131,41,0,0,0,0,0,0,0,0,0,0,0,0,81,0,4885\n",
      "1887,0,84,241,0,1164,450,0,102,0,0,13,2,0,183,45,0,0,266,4,0,0,0,0,89,0,0,0,196,0,1,68,53,0,0,0,207,0,0,0,0,0,0,0,0,0,0,4945\n",
      "986,35,125,227,56,2076,285,5,35,340,94,6,1,2,322,0,255,399,72,80,0,154,36,0,0,0,32,3,390,0,0,0,287,0,0,19,155,6,347,121,7,0,3,0,0,0,0,3039\n",
      "1893,0,93,27,0,1110,556,3,86,37,415,13,137,0,280,0,12,19,625,111,81,77,274,0,47,0,0,5,489,0,0,127,33,0,0,0,75,0,0,22,0,0,0,0,0,0,0,3353\n",
      "3284,0,190,93,0,1281,240,20,788,2,128,94,28,3,93,0,19,26,3,1,0,142,935,2,17,8,0,24,353,0,0,314,1,0,0,0,22,0,0,2,0,0,0,0,0,0,0,1887\n",
      "1466,56,283,271,0,1237,45,23,1231,0,24,1,186,495,47,456,459,4,0,68,0,0,82,53,0,61,1,6,142,0,207,331,1,0,0,0,49,0,0,0,4,31,0,91,1,0,0,2588\n",
      "575,0,527,951,540,1564,512,140,225,30,64,5,0,292,20,31,8,8,41,27,1,70,713,60,0,1,162,0,160,0,0,4,18,0,2,0,209,0,0,0,0,0,56,0,0,0,0,2984\n",
      "348,5,20,383,0,2484,145,36,1552,7,20,34,358,4,63,4,0,1,38,9,1,33,17,16,0,2,16,4,900,0,506,87,0,0,634,0,82,0,0,0,39,0,0,12,0,0,0,2140\n",
      "688,23,34,472,0,1130,199,0,95,55,4,336,519,107,83,910,100,199,443,0,0,1,98,0,7,16,37,9,367,0,0,107,299,0,0,0,39,0,0,114,0,0,0,0,0,0,0,3509\n",
      "1064,34,497,480,0,917,189,0,135,0,72,70,94,177,36,3,288,0,561,65,1,119,38,17,0,0,0,44,14,0,0,983,0,0,0,0,193,0,0,0,550,12,0,159,0,0,0,3188\n",
      "281,7,248,68,0,1303,7,21,1307,0,55,34,407,188,32,0,272,2,188,242,0,3,467,0,0,109,0,0,739,0,0,47,0,0,10,0,5,0,0,0,2,0,0,0,0,0,0,3956\n",
      "698,34,61,443,15,1225,526,21,209,1,53,0,972,9,2,70,78,0,27,13,0,1,21,9,0,42,55,46,36,366,3,1536,6,0,0,308,830,0,0,0,1,0,0,0,0,0,0,2283\n",
      "941,3,92,478,85,1584,118,66,366,0,163,0,4,0,6,8,4,745,3,40,0,0,0,0,0,0,17,0,278,0,0,227,92,0,0,0,0,0,191,808,0,0,0,0,0,0,0,3681\n",
      "1036,0,336,1014,390,1206,8,175,448,11,552,760,110,4,27,26,10,0,1159,61,14,277,7,0,0,0,0,63,20,0,16,89,16,0,0,3,94,0,0,0,5,0,0,0,0,0,0,2063\n",
      "1644,143,417,92,0,1004,0,0,212,0,4,6,52,0,1,16,1508,2,0,71,1,321,144,209,1,33,0,0,7,0,0,31,0,0,0,0,761,0,0,0,0,31,0,0,0,0,0,3289\n",
      "848,0,495,336,0,897,93,14,402,10,41,0,537,32,122,0,55,2,678,95,0,3,124,4,0,0,0,0,58,0,15,1,5,0,0,1,145,0,0,0,0,0,0,0,0,0,0,4987\n",
      "574,0,317,214,274,1495,4,42,136,44,270,248,0,17,54,2,565,226,423,561,0,97,94,0,0,0,0,1,4,0,0,47,128,0,0,0,0,0,0,0,363,0,0,0,0,0,0,3800\n",
      "425,0,70,509,0,630,1010,4,42,0,564,28,464,0,883,47,30,161,16,1,15,43,150,0,0,11,0,0,299,0,38,9,16,0,0,138,0,0,0,0,0,0,0,0,0,0,11,4386\n",
      "224,14,81,992,26,1298,11,3,447,23,3,0,0,10,61,290,5,38,226,612,12,160,2,0,0,103,0,0,6,0,0,60,0,0,0,0,220,0,0,0,9,0,0,0,0,0,0,5064\n",
      "365,41,430,90,13,2312,737,105,81,0,118,287,0,44,80,7,20,0,105,228,0,0,348,507,1,2,573,0,5,0,0,80,88,0,0,1,115,0,0,0,0,0,0,0,0,0,0,3217\n",
      "502,0,575,76,0,2389,9,0,6,18,179,0,3,282,17,0,288,74,212,400,89,2,33,0,0,0,112,229,244,0,36,91,1,0,0,0,214,0,0,574,0,0,0,0,0,19,0,3326\n",
      "1114,0,29,287,0,997,247,0,119,0,10,58,178,1,155,62,21,259,106,16,0,0,10,0,0,89,0,17,2707,0,16,9,486,0,0,0,12,0,0,0,0,0,1,0,0,0,0,2994\n",
      "1347,94,98,386,30,1258,42,3,583,4,114,5,2,407,50,0,5,2,62,0,0,0,721,58,0,0,2,3,54,0,0,29,23,0,0,0,413,0,0,0,5,0,0,0,0,0,0,4200\n",
      "1773,0,1120,908,0,1288,537,0,398,0,59,0,0,0,12,0,374,3,41,553,2,18,82,0,0,0,14,0,43,0,0,49,108,0,0,0,2,0,0,1,0,0,0,0,0,0,0,2615\n",
      "218,7,1069,72,0,2185,50,10,761,28,1,0,76,14,55,35,5,0,199,163,500,8,0,0,0,6,0,0,414,0,0,508,0,0,0,0,43,0,0,4,1,55,17,0,0,0,0,3496\n",
      "374,0,739,61,102,1229,18,157,313,0,33,0,4,3,480,183,25,3,135,7,0,379,185,0,0,156,43,0,143,0,0,33,0,0,0,0,116,0,0,1,0,0,416,0,0,0,0,4662\n",
      "1292,13,139,600,0,942,49,14,160,19,27,802,0,1,0,0,96,0,0,251,0,0,88,0,12,0,1,4,721,0,132,245,278,0,0,5,0,0,0,91,0,1,0,0,0,0,0,4017\n",
      "1139,0,162,109,248,1633,35,174,69,0,43,15,3,252,5,3,82,3,3,0,158,12,268,20,160,0,1,0,761,7,20,1048,38,0,0,47,215,0,0,0,0,0,36,0,0,0,0,3231\n",
      "305,2,831,444,0,829,271,0,100,0,2,16,32,102,32,23,177,0,40,1,37,0,773,0,1,214,7,0,119,40,0,0,0,0,0,0,8,0,0,11,0,1,0,0,0,8,0,5574\n",
      "1332,0,75,457,0,1422,5,6,400,336,92,11,117,24,9,3,32,21,22,72,2,0,19,0,24,61,0,6,421,0,0,38,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,4991\n",
      "1153,62,423,313,130,335,569,51,527,16,59,1,339,0,98,3,590,0,52,129,0,78,308,8,0,131,0,1,74,0,107,124,97,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4220\n",
      "1211,0,696,262,223,667,40,0,20,0,192,11,0,0,41,134,3,82,349,98,0,0,226,0,0,10,0,99,167,0,0,194,44,0,0,0,39,0,626,18,0,7,0,0,0,0,0,4541\n",
      "516,29,4,758,0,257,9,6,229,0,142,129,12,0,331,1,101,3,12,0,29,27,12,2,10,0,0,2299,20,0,0,71,0,0,0,10,1,0,0,0,0,0,0,0,0,0,0,4980\n",
      "1419,1,80,366,0,1020,277,37,61,47,88,9,0,0,215,123,3,102,54,1,2,0,136,8,202,9,0,11,226,36,0,32,1200,543,0,161,0,0,0,0,0,0,0,0,0,0,0,3531\n",
      "1633,0,469,187,458,863,107,549,23,6,85,23,2,123,1,52,662,19,62,231,0,44,689,0,0,4,0,26,865,0,0,18,30,0,0,0,2,10,60,0,82,0,0,0,0,0,0,2615\n",
      "1190,0,1,795,0,2127,0,7,264,0,1,3,22,0,6,4,763,83,253,90,0,16,136,0,0,309,0,0,363,0,0,334,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3233\n",
      "218,1,288,945,1,1264,91,0,7,16,557,584,1,94,11,0,1,0,314,15,84,30,54,112,0,11,0,44,248,0,0,675,27,0,0,0,55,0,0,13,0,0,0,0,0,0,0,4239\n",
      "1554,148,19,489,0,807,155,0,741,1,384,22,0,320,175,29,0,0,75,9,0,372,4,2,0,0,8,0,127,0,136,66,50,0,0,0,104,0,0,0,37,0,51,0,0,0,0,4115\n",
      "1282,217,48,193,5,1234,59,0,575,0,154,711,204,56,0,2,323,2,11,7,0,1,1306,4,0,365,1,1,397,0,64,11,173,0,0,0,60,0,0,0,0,0,0,0,0,0,0,2534\n",
      "422,0,1009,401,0,853,124,4,214,2,830,41,23,1,369,301,5,0,417,9,86,0,460,0,5,336,0,0,52,0,0,746,0,0,0,0,49,0,0,0,0,0,0,0,99,0,0,3142\n",
      "620,0,36,376,0,1487,173,0,30,135,522,7,88,1,13,3,0,147,395,41,137,0,235,15,0,22,0,5,380,0,0,2,42,0,0,54,226,0,0,694,0,0,0,0,0,0,0,4114\n",
      "1481,0,2,129,13,1399,301,6,334,40,133,701,6,19,4,8,615,99,204,52,25,3,109,0,1267,2,0,0,193,4,18,222,1,0,0,0,85,0,0,11,0,0,0,0,0,0,0,2514\n",
      "667,0,104,1446,1,1492,299,20,435,0,39,11,22,1,57,51,329,4,11,32,0,0,6,2,0,0,46,23,27,0,0,35,2,0,0,0,1151,0,0,0,0,2,0,0,0,0,0,3685\n",
      "3059,0,239,96,0,766,524,0,449,0,10,0,28,148,14,6,218,153,766,1,1,0,671,0,0,0,0,0,7,0,10,92,12,0,0,0,180,0,0,0,0,0,0,0,0,0,0,2550\n",
      "308,6,310,704,41,1370,32,0,135,0,29,71,4,0,388,3,91,0,239,291,3,0,34,1,0,21,0,0,630,0,0,0,2,0,1430,0,78,0,0,0,0,0,0,0,0,0,0,3779\n",
      "477,0,1432,677,0,2066,2,0,46,0,17,9,0,24,102,0,314,5,269,944,666,156,23,95,6,4,21,0,17,0,0,5,39,0,0,0,294,0,0,0,0,0,0,0,0,0,222,2068\n",
      "2427,0,392,921,0,657,159,8,182,3,65,0,16,80,9,105,162,0,41,366,0,0,5,1,0,0,0,11,388,46,0,37,5,0,0,0,118,0,0,0,0,0,0,0,0,0,0,3796\n",
      "1718,1,54,496,105,996,0,772,658,0,8,13,21,1,583,660,24,10,114,17,52,0,88,0,0,1,2,3,31,0,0,307,42,0,0,0,133,0,0,1,0,0,5,0,0,0,0,3084\n",
      "767,1,19,9,198,1551,85,0,663,18,10,69,38,18,205,46,73,88,327,12,0,0,242,1,1,7,0,0,47,0,0,1075,2,0,0,0,2,0,0,0,0,37,0,0,0,0,0,4389\n",
      "89,0,886,744,11,1267,426,35,26,0,492,227,120,340,63,1,346,540,14,0,0,31,0,0,0,1,0,0,52,0,0,624,3,0,0,87,115,0,0,0,0,0,0,0,0,0,0,3460\n",
      "1278,4,633,31,0,721,112,3,93,0,188,3,192,0,0,282,1076,1,180,446,0,0,511,10,1,0,0,92,578,0,69,6,104,0,0,0,11,0,225,0,0,0,0,0,0,0,0,3150\n",
      "919,0,57,44,114,1197,0,0,79,4,19,370,30,60,15,0,1,0,90,393,352,1,1831,442,7,0,0,175,25,0,0,25,82,0,0,1,10,0,0,76,0,0,0,7,0,0,0,3574\n",
      "834,3,44,213,12,1528,25,0,301,0,1621,270,17,2,10,230,28,6,74,596,63,119,0,0,0,0,23,0,92,0,447,29,291,0,0,0,17,0,1,8,0,0,0,0,0,0,0,3096\n",
      "771,429,1032,46,0,1951,61,467,168,0,30,0,1,0,625,0,18,49,14,197,190,0,50,13,0,59,0,0,555,0,3,0,141,0,0,0,45,0,0,17,0,0,0,0,0,0,0,3068\n",
      "1653,0,270,134,0,931,60,81,294,2,0,85,0,427,2,4,37,6,221,94,0,11,125,86,37,0,578,0,213,0,6,15,66,0,0,0,256,0,0,2,0,0,10,0,0,0,0,4294\n",
      "1223,0,101,327,361,1377,1270,12,832,0,57,0,498,510,78,17,4,0,36,61,1,1,119,740,3,0,0,0,44,0,0,79,47,0,0,0,184,0,0,0,0,0,0,0,0,23,0,1995\n",
      "1353,274,322,83,0,1332,21,7,94,2,828,60,718,0,142,143,22,17,151,194,0,0,123,0,0,158,4,4,43,0,0,58,56,0,0,1,118,0,0,0,0,0,0,0,0,0,0,3672\n",
      "664,0,300,970,0,2394,949,192,232,0,3,0,0,36,12,5,0,0,4,92,0,1,50,44,0,0,79,8,118,0,9,57,75,0,0,3,455,0,0,0,13,0,0,0,0,340,0,2895\n",
      "350,40,59,876,436,352,47,6,212,0,4,103,1,139,0,2,345,164,67,3,3,0,38,0,0,0,0,3,22,0,0,376,2044,33,0,107,4,0,2,0,0,0,1,0,0,0,0,4161\n",
      "606,1,80,473,0,2120,35,0,77,0,17,0,124,0,621,263,102,125,224,59,0,1,60,0,2,11,0,0,225,0,0,71,49,0,0,45,65,0,0,2,0,0,8,0,0,0,0,4534\n",
      "1649,0,698,211,0,1057,586,696,198,0,0,165,0,6,59,217,34,0,0,236,2,0,803,0,0,1,13,65,358,0,0,19,36,0,0,0,73,0,0,34,0,0,706,0,0,0,0,2078\n",
      "785,15,265,1620,0,1371,9,109,0,11,254,2,0,0,10,0,174,1,591,46,12,1,595,0,0,47,0,0,294,0,0,115,25,0,0,0,39,0,0,0,1,0,0,0,0,0,0,3608\n",
      "2242,163,49,411,268,907,78,1,73,2,51,8,0,161,0,107,3,5,11,381,14,1,30,0,0,0,0,2,22,0,0,384,24,0,0,0,374,0,0,6,0,0,35,0,0,0,0,4187\n",
      "539,0,185,283,0,1077,662,0,89,0,262,177,5,1,294,5,91,644,125,3,2,0,100,5,31,5,2,0,3,0,1,47,134,0,0,0,1,0,0,345,0,0,0,0,0,0,0,4882\n",
      "498,0,15,430,7,2210,14,7,447,0,51,89,23,41,8,72,6,0,1098,64,3,16,28,0,80,130,0,0,106,0,5,229,122,0,0,12,0,0,0,412,0,0,0,0,0,0,0,3777\n",
      "2077,64,122,145,4,234,238,0,62,0,180,0,11,162,69,41,68,4,54,627,0,21,270,23,0,8,5,18,210,0,65,464,31,0,0,0,0,0,0,70,0,0,0,0,0,0,0,4653\n",
      "336,137,300,131,0,1477,0,336,175,43,23,73,97,0,49,12,62,3,1023,248,0,564,42,0,0,43,0,95,13,0,0,281,4,0,0,5,132,0,610,4,0,0,0,0,0,0,0,3682\n",
      "675,17,257,1364,4,1092,192,1,28,100,122,853,1,1,159,110,0,3,12,2,244,25,6,0,0,0,11,0,337,0,0,171,540,0,0,0,75,0,0,6,55,0,0,0,0,0,0,3537\n",
      "370,168,100,509,0,1800,68,88,94,21,0,206,37,1,554,0,68,210,9,123,47,0,300,0,0,10,18,1,269,0,0,0,1,0,0,0,7,3,32,0,0,0,0,0,0,0,0,4886\n",
      "1317,0,70,140,0,1820,91,11,239,0,2,0,4,2,100,0,15,0,435,677,58,0,0,0,0,0,0,92,568,0,0,308,672,0,0,1,21,0,0,0,2,0,5,0,0,0,0,3350\n",
      "579,386,234,538,0,504,276,4,510,23,388,19,3,1091,523,13,128,153,24,109,266,0,45,0,0,1500,39,6,41,14,0,0,3,4,0,0,99,0,2,2,0,49,0,0,0,83,0,2342\n",
      "1682,456,1,282,0,2567,178,1,24,0,149,0,17,2,94,6,1,1,1,34,0,0,119,21,0,219,0,0,161,0,13,43,17,0,0,0,16,0,191,0,0,0,0,0,0,0,0,3704\n",
      "141,0,216,386,3,2963,63,139,531,0,391,25,108,57,57,0,8,35,296,344,0,0,516,550,0,645,4,0,152,0,0,78,18,0,0,356,18,0,0,16,0,1,0,0,0,0,0,1883\n",
      "889,0,114,41,0,1047,86,0,237,33,295,0,1084,0,151,10,1,1,18,197,804,0,12,0,1,0,0,0,306,0,0,488,25,0,0,6,153,0,0,267,37,0,0,0,0,0,0,3697\n",
      "651,19,3,239,21,1139,124,0,237,1,153,13,107,180,89,2,1,0,808,311,0,11,754,107,0,1,0,124,94,0,1,294,519,0,0,0,1,0,0,10,0,0,21,0,0,0,0,3965\n",
      "1772,1,73,124,0,1448,29,5,216,0,75,223,23,2,1,45,2,46,169,172,3,0,324,468,572,36,0,3,120,0,0,17,0,0,0,0,32,0,0,0,0,0,840,0,0,0,0,3159\n",
      "404,69,667,359,18,2233,315,48,346,3,7,0,111,0,22,0,5,85,627,91,8,0,258,0,6,0,386,0,20,0,0,190,0,0,0,3,19,0,0,22,1,0,0,0,0,0,0,3677\n",
      "1213,0,0,691,5,802,146,342,122,3,8,82,27,6,1,0,0,30,86,22,0,3,57,134,426,67,0,36,31,0,194,11,118,0,0,0,189,0,0,0,9,0,0,0,0,0,0,5139\n",
      "512,0,163,736,33,644,504,5,1133,0,2,248,0,119,2,24,948,193,76,185,0,0,152,56,0,0,1,0,95,0,0,11,211,0,0,0,29,0,0,0,0,0,0,0,0,0,0,3918\n",
      "824,0,784,149,0,1054,315,8,274,0,706,0,234,2,2,2,105,59,107,136,0,118,22,19,0,59,140,359,29,0,152,11,0,0,0,0,9,0,0,2,0,0,0,0,0,0,0,4319\n",
      "1266,6,111,19,0,402,8,8,85,0,125,14,699,0,21,70,154,0,873,119,0,133,108,0,17,16,0,7,136,0,4,1,0,0,0,0,30,0,0,0,0,0,0,0,0,0,7,5561\n",
      "1285,9,291,151,2,585,881,144,255,110,140,5,2,0,113,4,1,304,257,11,118,0,304,0,0,0,6,7,149,11,0,53,351,0,0,16,316,0,370,0,0,0,0,0,0,0,0,3749\n",
      "642,47,275,1277,0,1960,56,31,844,36,14,61,648,1,0,0,5,0,282,149,0,13,59,0,0,3,0,0,535,0,0,439,52,0,0,0,55,0,0,0,0,0,0,0,0,0,0,2516\n",
      "837,1,45,474,2,2891,342,0,257,0,26,227,0,20,88,0,1,40,164,521,0,154,66,0,0,0,7,397,21,0,2,17,0,20,0,2,165,0,0,0,16,0,0,0,0,0,0,3197\n",
      "455,37,141,1268,17,1874,5,14,470,2,37,15,0,1,592,120,4,0,161,120,9,1,9,0,0,2,0,0,6,0,1,817,2,0,0,0,311,0,0,11,0,0,0,0,0,0,0,3498\n",
      "340,196,33,399,0,1463,1,1,291,63,32,2,0,0,193,7,12,48,81,151,3,71,0,0,0,1,0,0,8,0,381,574,362,0,0,0,365,0,0,0,0,0,0,0,0,0,0,4922\n",
      "619,0,195,195,0,162,40,45,1162,0,1769,57,254,0,849,0,406,32,7,327,0,90,116,0,0,93,3,0,103,28,0,24,0,0,0,53,48,0,0,0,0,0,0,0,0,0,0,3323\n",
      "1393,242,421,428,0,421,0,2,126,0,12,0,1560,106,3,417,1,3,79,730,0,187,46,0,0,0,0,1033,227,0,0,7,5,0,0,113,2,0,0,0,0,11,1,0,0,0,0,2424\n",
      "309,1,205,1287,36,407,27,11,354,0,44,24,393,123,116,0,0,37,335,3,0,262,403,0,0,73,0,1,41,0,0,104,192,0,0,0,55,0,0,113,0,0,0,3,0,0,0,5041\n",
      "806,1,364,21,14,2121,301,5,242,0,69,9,73,0,38,0,4,59,0,128,27,6,181,0,0,37,0,0,76,0,2,106,0,0,0,3,219,0,0,0,0,0,0,0,0,0,0,5088\n",
      "417,23,35,162,218,1829,15,72,661,1,535,39,71,14,1,54,75,85,83,29,378,271,114,34,0,2,0,15,576,0,105,149,459,0,0,0,194,0,0,0,0,0,30,0,0,0,0,3254\n",
      "476,0,731,456,2,753,64,6,320,169,21,326,90,0,82,1,9,0,190,63,113,2,0,228,0,52,0,0,5,0,1,20,7,0,0,0,135,0,0,0,2,0,0,0,0,0,0,5676\n",
      "654,0,350,359,9,3490,185,128,52,0,0,1,62,18,25,0,270,8,13,31,4,0,14,0,0,22,0,738,193,0,26,282,2,0,0,0,3,0,5,8,0,0,0,0,0,0,0,3048\n",
      "1968,0,158,87,136,1509,400,9,514,0,215,105,9,0,0,5,3,0,3,6,0,0,224,6,0,4,0,0,71,0,1,2,516,0,0,0,358,0,0,12,1,0,0,0,0,0,0,3678\n",
      "916,0,461,93,4,948,198,2,696,36,37,22,1,114,403,0,121,406,262,145,6,7,270,178,0,0,91,12,164,0,0,289,204,6,0,0,16,0,0,0,0,0,0,0,0,0,0,3892\n",
      "582,8,154,648,0,1592,86,0,328,16,72,0,2,0,149,172,0,38,411,1131,0,0,154,0,0,5,0,0,407,0,0,1163,31,0,0,0,1,2,0,0,0,0,8,0,0,0,0,2840\n",
      "2567,0,18,552,0,636,1,22,92,3,104,12,0,0,34,50,71,222,117,61,0,287,130,0,0,0,0,10,334,0,0,705,6,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3963\n",
      "2108,360,303,392,38,675,67,0,242,2,1,19,92,214,171,0,151,55,13,44,11,0,37,37,0,0,0,2,512,0,0,82,61,0,0,0,0,0,0,3,3,0,0,0,0,0,0,4305\n",
      "330,48,33,473,0,1585,3,22,544,0,14,360,303,0,98,5,0,0,158,3,14,68,310,17,0,27,0,427,81,344,2,61,0,0,0,0,248,0,0,23,0,0,5,0,0,0,0,4394\n",
      "1329,0,83,35,0,549,11,12,581,42,110,0,20,0,3,8,645,414,38,164,2,0,216,356,0,3,4,1185,81,0,0,245,2,0,0,1,239,0,0,4,0,1,0,0,0,0,0,3617\n",
      "1427,13,693,601,0,1213,386,6,625,132,239,0,83,0,1,1,1,14,24,102,0,0,2,0,12,139,0,16,737,420,0,91,0,0,0,2,19,0,0,0,0,0,7,0,0,0,0,2994\n",
      "342,0,443,126,0,1407,279,2,23,136,49,29,69,0,155,466,54,0,1524,380,0,0,15,30,0,0,0,0,539,0,0,31,0,0,0,23,87,0,0,3,0,0,0,0,0,0,0,3788\n",
      "1715,45,316,74,0,1104,621,3,3,585,4,11,19,2,164,0,78,0,5,4,0,0,329,0,35,186,3,0,109,144,0,632,21,0,0,0,345,0,0,0,428,1,0,0,0,0,0,3014\n",
      "1954,7,208,411,67,408,74,484,3,0,964,0,13,37,762,5,0,0,252,2,69,0,794,0,14,394,0,0,81,0,29,586,66,0,0,4,2,0,27,0,0,0,0,0,0,0,0,2283\n",
      "1653,6,734,542,0,1336,14,0,168,117,215,15,83,0,2,22,10,0,0,414,43,0,4,27,0,452,345,0,5,0,39,8,146,342,0,0,2,0,0,0,2,0,0,0,0,0,0,3254\n",
      "193,0,165,159,1,1135,17,0,299,8,267,14,404,47,74,4,168,140,0,333,0,3,37,0,0,0,0,0,24,0,34,118,0,0,0,0,1,0,113,21,0,0,0,0,0,0,0,6221\n",
      "634,256,1116,380,0,1302,276,124,625,0,69,2,34,0,0,10,6,84,349,5,34,134,38,0,0,0,0,0,8,0,95,12,41,0,0,1,27,0,0,1,0,0,1,0,0,0,0,4336\n",
      "3030,198,284,1115,0,882,108,1,994,0,148,60,309,0,2,0,1,204,64,0,1,210,170,7,0,0,0,33,400,0,60,11,7,0,0,0,0,0,0,0,20,5,0,0,0,0,0,1676\n",
      "1446,1,4,31,112,2389,128,8,749,1,365,10,0,0,15,0,4,5,87,347,166,165,405,0,45,157,0,26,98,0,31,5,31,0,0,0,2,0,0,0,0,5,0,0,0,0,0,3162\n",
      "286,184,262,1199,47,1230,254,72,153,0,236,1,4,0,149,59,3,0,19,0,124,0,221,3,1,0,0,430,152,0,71,311,234,0,0,4,251,0,0,0,2,0,0,0,0,0,0,4038\n",
      "1747,0,315,71,0,1212,70,811,219,7,153,4,0,0,50,1,83,74,24,639,1,0,10,0,0,1,4,0,2,43,1,333,0,52,0,1,62,0,0,0,0,0,0,0,0,0,0,4010\n",
      "332,2,90,180,118,2442,339,0,346,0,194,556,0,334,6,11,116,59,14,13,7,2,27,0,0,18,0,0,29,0,3,10,1,0,0,0,1,0,0,6,0,0,0,0,0,0,0,4744\n",
      "1975,0,384,214,0,1099,88,1,61,0,1262,2,0,301,115,4,0,38,44,466,0,0,279,22,42,0,3,33,120,1,11,147,0,401,0,0,578,0,1,0,0,0,26,0,0,0,0,2282\n",
      "1491,1,386,48,187,2005,279,50,344,0,20,14,22,84,565,45,11,8,0,257,0,1,759,1,0,139,0,16,44,0,0,98,0,0,0,0,2,10,0,0,0,0,0,41,0,0,0,3072\n",
      "1190,0,8,519,0,1760,28,0,410,0,46,59,255,27,16,0,3,0,405,292,18,0,216,1,0,52,90,12,395,4,13,109,304,0,0,0,12,0,0,6,0,0,52,0,0,0,0,3698\n",
      "262,0,14,280,19,1518,29,5,202,0,29,118,20,60,0,107,0,9,182,344,0,26,473,6,3,0,0,55,161,27,75,138,16,2,0,3,1620,0,0,5,0,0,0,0,0,0,0,4192\n",
      "211,128,564,598,15,406,596,17,220,0,9,323,446,6,100,1,5,39,50,2,0,1,47,17,405,1,17,0,184,0,0,310,0,0,0,18,152,0,0,278,0,0,0,0,0,0,0,4834\n",
      "619,0,143,1248,0,965,76,150,1133,0,437,697,24,0,400,0,0,28,272,317,6,0,832,0,50,144,0,1,64,0,10,296,84,0,0,0,137,0,0,0,0,0,0,0,0,0,0,1867\n",
      "1270,2,372,1320,0,658,18,0,26,1,699,0,199,199,319,38,111,209,34,11,0,0,223,27,0,638,0,100,175,0,0,40,0,0,0,0,93,0,0,25,0,0,0,0,0,0,0,3193\n",
      "2936,0,69,1476,0,500,369,0,254,0,56,17,88,0,353,0,11,0,32,306,16,0,153,1,0,0,1,104,29,0,27,157,1,0,0,0,24,0,0,0,0,0,0,0,0,3,23,2994\n",
      "518,0,113,218,0,2277,276,0,10,16,637,1,35,1,0,12,102,58,0,1,1,1,414,0,0,0,427,9,231,0,0,415,0,0,0,0,86,0,0,11,0,0,0,0,0,0,18,4112\n",
      "413,14,30,1246,0,927,543,151,11,23,437,114,6,12,32,0,0,16,2,3,1,0,240,32,21,0,0,14,1,0,1,7,0,0,0,0,5,0,22,6,0,0,0,0,41,0,256,5373\n",
      "2618,118,32,86,1,574,15,6,24,37,8,3,0,0,311,185,64,310,325,42,0,4,49,0,0,47,9,26,460,0,166,24,11,0,0,0,206,0,0,41,0,0,0,0,0,0,0,4198\n",
      "1221,0,534,223,0,919,60,148,661,2,266,36,12,0,23,0,18,8,1,26,0,75,895,0,1,725,26,268,111,0,0,376,46,0,0,0,47,0,0,0,1,48,0,0,0,0,0,3223\n",
      "534,1,305,520,0,3251,42,8,310,0,504,15,2,0,103,4,340,1,131,36,0,0,15,0,0,0,6,0,510,0,63,45,477,0,0,0,1,0,0,11,0,0,0,0,0,0,0,2765\n",
      "636,0,194,568,13,1510,201,0,38,2,258,127,41,22,117,4,110,244,229,401,97,735,322,0,21,0,0,0,198,16,0,19,60,0,0,0,39,0,0,0,0,168,0,0,0,0,0,3610\n",
      "880,74,793,282,21,1175,4,5,799,9,350,161,1,46,19,3,5,1,21,53,0,14,1249,15,0,193,0,14,231,0,0,78,2,0,0,0,29,0,0,0,0,2,0,0,0,0,0,3471\n",
      "2231,101,457,647,38,937,90,1,58,11,2,197,16,9,468,28,213,56,9,53,15,0,56,11,0,744,1,1,24,0,0,474,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,3048\n",
      "1744,69,18,1661,8,293,48,0,2,28,806,66,0,92,76,114,10,1,283,54,0,315,92,0,0,716,11,0,448,94,0,53,4,0,0,0,191,0,0,0,0,0,10,0,0,0,0,2693\n",
      "714,46,372,888,0,1356,78,24,49,0,27,6,0,10,624,15,556,261,74,60,0,130,281,0,0,96,28,90,228,0,0,903,13,0,0,44,238,0,0,0,0,0,0,0,0,0,0,2789\n",
      "803,0,440,198,0,692,150,0,25,0,208,267,735,1,420,10,4,28,352,68,80,0,2,0,330,104,0,0,125,0,20,124,2,0,0,4,0,0,0,0,0,0,0,0,0,0,1,4807\n",
      "1021,0,799,188,0,1135,2,0,1311,1,67,1,3,2,134,43,3,0,356,50,0,0,150,30,0,9,13,14,55,0,0,221,35,0,0,0,357,0,0,0,0,0,0,0,0,0,0,4000\n",
      "2491,0,576,160,0,990,263,34,121,0,25,49,46,0,0,344,0,0,19,15,0,26,197,1,0,152,0,1,139,0,67,7,7,0,0,0,289,0,0,0,0,0,0,0,0,0,0,3981\n",
      "1664,0,26,341,32,1197,337,0,239,12,6,0,2,93,91,0,1,0,368,52,0,0,118,0,0,26,152,201,916,0,0,24,128,0,0,0,7,0,124,0,0,0,4,0,0,0,0,3839\n",
      "1780,1,72,397,12,348,67,0,1311,0,4,0,3,0,400,118,236,44,0,0,85,1,3,143,0,719,0,0,381,0,5,5,7,0,0,0,32,0,0,1,5,0,0,0,0,0,0,3820\n",
      "1516,14,167,226,0,1873,10,0,62,18,124,0,112,2,43,542,13,20,178,13,0,0,228,178,51,5,0,0,374,0,54,43,36,0,0,4,99,0,0,9,0,0,0,0,0,0,0,3986\n",
      "1419,19,201,160,0,1740,1150,13,32,13,162,49,81,116,2,1,0,10,0,65,0,0,21,0,64,11,0,253,87,0,0,211,0,0,0,0,42,0,0,0,426,0,0,0,0,0,0,3652\n",
      "1643,0,98,170,4,1326,113,150,523,233,42,3,0,16,3,0,27,11,31,108,0,0,306,171,0,28,0,63,94,0,49,285,0,0,0,3,97,0,0,0,0,0,0,0,0,0,0,4403\n",
      "600,0,197,841,0,969,254,249,497,0,146,103,208,0,103,173,7,97,86,2,0,1,917,0,0,11,206,23,565,0,0,213,299,0,0,0,17,0,0,0,0,0,0,0,0,0,0,3216\n",
      "687,0,618,443,0,1188,443,405,909,6,206,414,148,0,0,0,21,207,67,111,0,16,209,129,0,6,0,0,152,0,0,489,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3123\n",
      "856,146,107,2011,2,1399,16,1,63,0,15,0,0,5,27,34,701,0,210,179,0,112,552,1,0,0,0,0,15,0,0,227,204,0,0,0,111,0,258,0,0,0,0,0,0,0,0,2748\n",
      "666,0,178,600,11,689,24,6,10,0,26,15,867,0,93,8,1,215,254,1,0,175,28,365,0,0,2,6,193,0,0,28,5,0,0,6,7,0,0,7,0,0,0,0,0,0,0,5514\n",
      "741,63,499,442,0,3143,496,35,20,0,0,1,180,22,33,37,1,11,124,27,5,2,24,0,0,0,0,0,199,0,0,44,12,0,0,0,467,0,0,222,0,0,0,0,0,0,0,3150\n",
      "1599,6,43,158,9,1533,16,302,139,5,0,137,14,0,543,0,181,0,45,7,0,3,13,12,81,0,0,507,998,0,3,264,14,0,0,0,149,0,262,0,4,0,0,0,0,0,0,2953\n",
      "730,9,0,176,0,3437,234,0,9,1,22,305,0,0,30,0,292,0,0,60,94,0,818,0,2,40,0,0,36,1,221,96,279,0,0,0,149,0,0,0,0,0,0,0,0,7,0,2952\n",
      "971,0,103,120,12,651,3,0,223,86,2,1,120,684,189,12,47,0,116,4,0,0,408,10,960,0,0,0,168,0,39,129,217,0,0,0,147,0,0,0,0,0,0,0,2,0,0,4576\n",
      "596,224,51,134,0,2384,242,292,416,42,17,92,1,6,135,1,76,2,0,151,16,0,5,0,0,312,34,66,425,0,31,8,219,0,0,450,185,0,55,19,0,0,1,0,0,0,0,3312\n",
      "1067,5,238,670,253,796,774,70,456,5,270,757,209,4,2,1,289,125,4,6,15,11,45,2,0,223,0,1,37,0,0,47,3,0,0,1,162,0,106,0,4,0,0,0,0,0,0,3342\n",
      "188,32,1599,1665,0,347,593,23,66,3,590,13,12,24,84,38,10,198,169,289,104,21,138,0,1,14,0,95,524,0,0,41,41,0,0,0,98,0,0,0,0,0,0,0,0,0,0,2980\n",
      "811,66,229,164,0,1616,182,38,159,0,18,63,1,0,63,1,38,176,207,1062,0,0,8,8,0,0,199,79,39,0,219,37,114,0,0,0,6,0,0,0,0,0,0,0,0,0,0,4397\n",
      "657,67,140,52,0,1639,15,148,239,0,891,50,15,83,3,42,24,585,20,17,75,66,422,0,0,109,172,274,13,151,0,10,0,0,0,0,399,0,0,34,0,0,0,0,0,0,0,3588\n",
      "1634,193,459,500,33,1594,90,7,151,0,19,3,642,17,598,0,0,146,29,14,0,38,25,1,0,34,0,2,41,0,54,1,15,0,0,0,131,0,164,1,0,0,0,0,0,0,0,3364\n",
      "1053,0,434,640,0,2345,187,42,270,0,76,43,0,110,52,0,11,5,20,37,68,93,7,0,0,2,0,0,19,0,25,239,416,0,0,1,341,0,7,105,0,0,0,0,0,0,0,3352\n",
      "1566,148,1,381,33,906,86,48,131,0,4,0,21,128,11,0,13,23,12,316,59,255,218,0,0,102,3,0,178,0,262,2,11,0,0,0,50,0,0,0,0,0,0,0,0,0,0,5032\n",
      "238,8,176,74,10,926,338,41,296,0,17,0,143,0,0,8,114,266,121,261,0,56,207,273,3,7,0,11,987,0,0,82,17,0,127,0,154,1,17,0,12,0,283,0,0,0,0,4726\n",
      "271,0,248,1006,10,685,9,218,200,0,3,75,788,0,169,1235,1,88,45,10,5,1,114,0,0,0,5,0,7,0,3,156,349,0,0,0,18,0,0,0,3,0,0,0,94,0,0,4184\n",
      "1090,1,398,267,0,1444,24,0,143,21,455,0,4,0,44,0,1,0,245,1,11,1,19,2,0,64,3,24,42,0,281,51,94,0,0,1,6,0,0,0,0,47,0,0,0,0,0,5216\n",
      "1050,493,1470,105,12,648,6,335,84,0,8,19,0,23,143,181,54,0,35,34,9,0,240,2,0,237,0,27,1,0,0,7,48,0,86,0,262,0,0,0,0,0,0,18,0,0,0,4363\n",
      "641,1,91,186,2,2168,405,93,176,64,16,81,3,5,50,0,23,142,46,39,144,0,5,1,0,149,1,3,6,0,53,0,0,0,0,0,114,0,0,0,23,0,0,0,0,0,0,5269\n",
      "1148,7,30,602,1,1035,368,0,387,18,180,47,85,61,327,105,108,848,1588,139,18,2,329,0,0,273,0,2,14,0,0,37,109,0,0,0,744,0,8,16,0,0,0,0,0,0,0,1364\n",
      "837,0,244,306,2,1325,33,6,654,0,155,81,135,285,24,11,64,2,396,329,152,0,71,382,0,15,0,0,23,0,0,541,39,0,0,0,0,940,0,321,0,0,0,0,0,0,0,2627\n",
      "410,0,1128,136,13,1181,153,44,43,90,313,1,441,283,28,15,255,3,368,244,0,610,72,0,0,9,0,67,129,334,0,48,1,0,0,32,30,0,0,1,11,0,16,0,0,0,0,3491\n",
      "2673,0,145,704,73,1328,246,58,315,44,70,0,0,14,25,4,310,8,11,429,0,4,222,0,0,0,0,0,122,0,0,30,205,0,0,0,851,0,0,0,0,0,0,0,0,0,0,2109\n",
      "471,0,59,25,17,1289,347,4,1155,414,162,0,64,450,341,0,17,2,540,38,347,349,184,0,0,1,85,82,9,0,0,829,3,0,0,3,652,0,0,0,0,0,0,0,0,0,0,2061\n",
      "493,0,300,208,1,1248,8,238,187,0,38,482,135,4,144,0,173,12,130,1296,5,0,480,0,0,0,279,0,38,7,0,160,183,0,0,405,128,18,46,21,0,0,0,0,0,0,0,3133\n",
      "746,25,312,226,0,1392,33,0,469,10,174,212,61,0,47,3,25,0,1,212,0,0,29,110,157,0,103,0,62,0,173,6,0,0,0,0,10,0,0,59,0,0,205,0,0,152,0,4986\n",
      "879,0,47,416,1,1464,335,0,254,0,0,66,29,15,191,0,116,88,35,31,409,40,1,0,0,0,0,0,237,0,165,145,11,0,0,0,121,0,0,1,0,0,0,0,0,0,0,4903\n",
      "1350,0,57,703,29,744,83,3,133,22,55,6,19,24,54,187,8,6,59,38,3,186,23,0,0,25,0,35,55,0,0,0,0,0,0,0,1293,0,0,0,27,0,0,0,0,0,0,4773\n",
      "1826,7,28,372,0,1970,157,0,224,18,14,162,38,0,241,12,5,34,81,70,0,11,1085,5,0,0,58,46,111,0,21,222,10,0,0,0,153,0,0,0,0,0,0,0,0,0,0,3019\n",
      "2550,4,44,45,52,616,289,151,488,179,350,85,305,1,88,30,471,4,241,59,5,0,34,0,155,0,26,1,54,0,11,247,0,0,0,0,0,0,0,0,1,248,2,0,0,0,0,3164\n",
      "297,0,173,326,0,272,165,0,601,77,302,0,2,0,62,435,490,632,9,1132,321,0,123,0,0,83,0,0,12,35,0,16,216,0,0,0,15,0,0,0,0,0,0,0,0,0,0,4204\n",
      "376,13,302,368,140,969,659,2,169,0,0,49,314,58,295,150,70,85,82,1,124,0,199,293,0,0,0,0,1,0,0,1,76,0,0,207,0,0,115,0,0,0,0,0,0,0,0,4882\n",
      "754,5,425,90,1,1455,9,532,84,3,4,41,2,0,990,30,35,579,200,3,0,0,69,0,0,0,0,0,370,0,0,178,23,0,0,1,1,0,0,0,1023,2,0,0,0,0,0,3091\n",
      "1191,18,11,405,0,810,40,461,605,406,217,0,185,10,30,14,250,124,4,513,14,109,10,9,1,0,0,0,441,0,0,102,0,0,0,0,140,0,0,0,0,0,0,0,0,0,0,3880\n",
      "276,150,394,131,0,839,0,0,93,367,0,47,151,221,71,22,289,0,25,1,6,22,217,32,0,14,145,0,394,0,26,8,95,2,0,0,289,0,0,14,0,0,0,0,0,0,0,5659\n",
      "1111,70,412,112,102,656,1063,176,93,0,2,16,0,0,270,0,40,1,130,26,92,0,30,84,0,0,0,0,1065,0,0,0,10,0,0,0,370,0,0,0,216,219,0,10,0,0,0,3624\n",
      "945,0,327,596,14,438,544,0,77,16,12,565,34,4,0,6,0,0,14,18,0,75,80,9,0,0,1,7,1,0,0,35,0,0,0,0,188,0,0,0,0,0,0,0,0,0,0,5994\n",
      "1285,0,870,146,0,1128,65,67,188,5,458,0,17,18,157,217,223,31,94,0,0,3,93,174,0,97,0,2,844,0,0,329,400,0,0,0,2,0,0,0,0,17,12,0,0,0,0,3058\n",
      "1221,0,146,1219,0,1414,407,1,246,6,51,88,1,11,8,29,21,6,3,350,69,0,34,72,0,0,0,0,8,0,0,1,386,0,0,0,1,2,0,0,0,0,0,0,0,0,0,4199\n",
      "1094,0,246,129,0,1689,322,279,218,78,54,5,189,44,64,76,50,8,700,154,3,5,1,0,2,64,172,16,292,0,0,163,11,0,0,0,3,0,11,0,5,0,0,0,0,0,129,3724\n",
      "645,1,308,407,0,3564,138,6,3,246,151,213,13,36,10,212,1,66,5,470,0,0,206,351,0,35,0,42,296,0,30,62,39,0,0,0,23,0,0,1,0,0,0,0,0,0,0,2420\n",
      "344,0,790,465,1,768,15,0,365,202,623,7,145,12,0,0,2,55,9,2,0,7,712,824,0,4,0,44,123,0,0,102,5,0,0,0,487,0,0,0,94,0,68,0,0,0,0,3725\n",
      "822,319,315,90,2,2118,571,0,265,5,952,0,0,275,17,36,163,36,216,245,69,0,736,0,0,26,0,1,344,2,226,44,48,0,0,0,2,0,35,0,8,0,2,0,191,0,0,1819\n",
      "2206,21,363,367,1,1084,466,58,172,105,94,130,5,106,9,0,7,14,8,17,75,0,8,1235,0,0,1,98,252,0,0,155,659,0,0,0,40,0,0,0,0,0,0,0,0,4,0,2240\n",
      "707,0,186,265,0,859,1486,204,216,0,558,0,21,30,17,32,0,21,1,274,12,0,241,13,29,0,10,9,19,0,6,2683,45,0,13,0,13,0,0,0,0,0,0,0,0,0,0,2030\n",
      "527,0,830,327,0,1421,162,25,153,24,85,31,1,12,8,51,17,219,7,16,0,0,944,0,0,1,37,0,12,0,0,199,1,0,0,0,39,0,0,0,0,0,0,0,0,0,0,4851\n",
      "383,60,43,1073,0,1130,1559,0,329,133,1,94,63,0,53,0,0,2,215,463,28,122,204,0,0,0,0,0,178,0,0,25,42,0,1,0,13,0,0,2,0,0,108,0,0,0,0,3676\n",
      "924,0,221,567,0,529,0,185,427,3,584,422,28,971,17,0,0,0,569,8,4,21,138,0,0,4,0,35,56,0,0,29,0,0,0,0,74,0,0,0,0,0,0,0,0,0,0,4184\n",
      "1208,0,35,876,85,1369,307,7,25,1,81,248,49,350,27,313,207,9,6,203,8,209,284,0,9,0,1,715,12,0,32,11,20,0,0,35,211,0,0,0,0,0,0,0,0,0,0,3047\n",
      "1147,36,444,178,0,1143,0,9,264,2,9,159,12,327,13,42,178,1563,2,271,156,224,134,4,0,0,522,0,2,0,0,1,0,0,0,0,139,0,0,0,0,0,0,0,0,16,0,3003\n",
      "920,0,4,677,3,660,261,3,0,5,498,6,7,58,2,194,18,2,47,658,0,0,480,26,0,6,0,101,130,0,0,30,548,0,0,0,12,0,0,0,0,5,0,12,0,0,0,4627\n",
      "1148,3,92,120,129,695,7,48,238,473,16,0,34,0,331,660,107,1,21,0,0,0,95,192,593,0,0,2,414,0,0,0,88,0,0,0,9,0,0,0,112,0,0,12,0,0,0,4360\n",
      "987,0,1022,32,28,398,837,301,298,25,31,0,0,12,27,65,0,12,156,1,467,0,2,0,0,0,0,0,324,0,0,984,259,0,0,0,390,0,0,0,0,0,0,0,0,0,0,3342\n",
      "944,0,77,128,442,1377,103,0,229,0,70,0,113,0,489,56,2,0,175,37,6,0,527,0,0,1,11,87,170,1515,0,0,140,0,0,0,424,0,1,27,24,0,0,35,0,0,0,2790\n",
      "703,0,174,751,316,1933,15,0,0,4,0,46,405,0,35,0,14,53,33,9,10,0,639,0,0,1195,47,0,39,0,0,197,5,0,0,0,529,0,0,0,0,0,0,0,0,0,0,2848\n",
      "1345,11,46,179,280,1583,570,4,7,0,2,0,146,92,15,3,315,58,88,42,48,0,66,0,0,0,600,0,48,0,2,4,203,0,0,2,0,0,3,0,0,0,1,0,0,0,0,4237\n",
      "594,0,557,1297,0,1118,0,380,114,2,22,81,3,1,6,0,282,400,74,52,1,8,29,78,0,142,91,0,299,0,194,4,57,0,0,0,128,0,27,0,0,0,7,0,0,0,0,3952\n",
      "1453,0,103,111,0,1689,541,3,291,2,367,0,362,2,24,11,524,0,11,4,1,53,208,2,0,1,0,0,254,0,42,59,16,0,0,2,175,0,0,49,9,0,0,0,0,0,0,3631\n",
      "2326,91,6,47,13,943,1,0,142,0,450,3,13,0,562,2,983,0,243,0,100,2,8,0,0,1,0,0,370,411,0,42,9,139,0,2,11,0,0,27,0,0,0,0,0,0,0,3053\n",
      "301,1,112,419,0,566,193,0,463,225,27,30,131,63,236,275,512,0,0,108,0,0,373,1,0,22,0,19,426,0,0,350,2,0,0,0,2,0,138,2,0,0,0,0,0,0,0,5003\n",
      "2169,4,63,184,0,760,587,26,709,0,10,29,0,0,82,0,3,0,2007,176,178,0,225,0,4,0,1,0,466,0,0,23,1,0,0,178,178,0,0,21,14,0,0,0,0,0,0,1902\n",
      "1578,0,54,819,2,1143,77,4,158,0,4,335,17,4,38,26,475,34,3,17,4,316,23,0,0,39,11,0,67,0,7,16,110,0,0,29,33,0,0,0,0,0,0,10,0,0,0,4547\n",
      "872,14,60,289,7,1575,28,1070,140,0,465,3,0,2,51,0,141,6,29,19,26,0,31,0,0,5,130,3,315,0,0,464,64,0,0,5,883,0,4,75,6,0,0,0,0,0,0,3218\n",
      "819,0,696,1519,4,1654,59,0,1018,0,139,48,156,0,195,89,397,15,134,285,43,34,0,3,8,0,0,0,274,0,7,10,41,1,0,6,2,0,0,0,0,0,0,0,0,0,0,2344\n",
      "1441,153,526,1565,0,1609,306,253,209,0,1,167,12,0,15,0,0,139,59,13,0,1,75,80,7,43,13,1,341,0,127,6,443,0,0,0,113,0,0,1,0,0,0,0,0,0,0,2281\n",
      "1108,11,119,443,0,827,61,13,161,0,163,26,48,145,108,2,11,7,121,543,706,201,104,14,0,570,0,0,151,0,3,41,54,0,0,1,66,0,0,0,0,0,79,0,0,7,4,4082\n",
      "1188,21,113,182,0,2158,12,63,881,0,0,38,0,14,40,0,21,8,7,94,131,0,209,42,0,4,0,5,527,0,0,27,8,0,0,93,457,0,5,0,0,0,0,0,0,0,0,3652\n",
      "774,108,144,1634,271,329,52,113,206,0,37,14,0,12,23,2,27,36,2,356,19,0,159,9,0,74,0,0,1,0,33,992,412,0,0,0,0,0,0,4,0,0,57,0,0,0,0,4100\n",
      "1366,12,107,1433,15,530,156,14,13,214,9,310,345,1,4,0,563,62,217,0,59,1,114,138,10,0,0,0,1635,12,0,839,37,0,0,0,319,0,0,0,6,0,0,0,0,0,0,1459\n",
      "2022,43,293,123,0,693,342,11,429,3,31,6,16,16,449,0,22,22,314,241,0,0,88,0,0,0,1,0,131,0,0,2,22,0,0,3,0,0,0,5,0,0,208,9,0,0,0,4455\n",
      "1811,0,245,376,0,1257,7,431,450,99,405,0,0,39,843,4,7,0,122,1,326,4,311,0,0,0,4,15,485,0,7,241,107,0,0,7,46,0,10,0,0,0,0,0,0,0,0,2340\n",
      "741,29,311,621,87,1690,0,66,821,4,811,160,85,165,41,207,4,1,3,278,5,188,104,1187,0,0,0,135,0,0,0,23,0,0,0,0,186,0,23,0,2,0,0,0,0,0,0,2022\n",
      "1657,0,574,268,325,1334,27,0,573,0,6,82,11,6,290,7,211,36,41,77,0,2,72,2,409,0,0,257,5,0,0,7,19,10,0,406,64,0,0,92,0,0,0,0,0,0,0,3130\n",
      "762,4,675,508,0,1660,18,21,60,0,0,4,0,592,56,281,2,118,824,4,0,278,317,1,15,0,285,141,518,0,4,311,1,0,0,107,108,0,2,0,0,0,0,0,0,0,0,2323\n",
      "328,0,417,597,4,988,119,0,625,15,38,0,28,0,382,44,358,224,3,0,679,0,0,103,0,0,18,0,82,0,6,39,865,0,0,0,42,0,0,62,0,0,0,0,0,0,0,3934\n",
      "1417,78,70,1352,0,1514,259,201,6,18,10,2,3,294,38,244,269,10,37,16,0,2,243,0,251,512,390,31,31,7,0,1,18,0,0,0,42,0,0,2,53,0,0,0,201,0,0,2378\n",
      "1398,0,335,617,25,1712,8,0,2,9,1,207,1,412,51,44,2,3,45,67,0,5,469,33,0,20,0,0,16,0,6,45,238,0,0,0,2,0,0,31,0,0,0,0,0,0,0,4196\n",
      "1005,136,148,516,0,1840,273,66,445,0,41,45,4,82,15,216,861,103,978,15,0,0,5,11,0,0,0,82,295,0,0,55,0,0,0,12,56,0,0,0,0,0,0,0,0,0,0,2695\n",
      "2703,6,1,732,4,690,186,0,308,194,488,12,81,51,8,0,69,127,462,3,0,384,0,0,0,0,0,0,5,0,0,233,105,0,0,31,258,0,153,198,0,0,0,0,0,0,0,2508\n",
      "463,0,204,373,3,1343,79,77,456,2,96,92,73,468,1,0,5,336,66,180,0,67,115,29,0,0,527,0,369,0,0,21,37,0,0,24,165,0,0,0,0,0,47,0,0,0,1490,2792\n",
      "615,23,102,696,0,910,8,27,156,0,8,0,0,672,10,0,2,4,93,0,0,0,40,277,0,96,0,1,415,0,28,10,23,0,0,0,1245,0,0,330,0,0,0,55,0,0,0,4154\n",
      "1357,112,32,477,11,677,35,16,163,5,33,37,31,0,99,10,126,399,16,0,214,0,96,0,0,4,0,11,201,0,76,7,7,0,0,0,322,0,3,1,0,0,0,0,0,0,0,5422\n",
      "2114,1,580,99,0,863,118,2,151,13,10,3,182,25,1,164,760,19,212,168,0,0,63,0,52,0,0,16,114,0,307,113,31,0,0,0,897,0,0,1,0,0,0,0,0,0,0,2921\n",
      "1018,0,396,485,26,615,118,285,73,13,27,0,394,7,1595,116,157,0,10,4,0,0,71,0,0,512,0,0,42,0,62,284,8,0,0,0,1108,0,0,0,99,0,0,0,0,0,0,2475\n",
      "1516,0,221,81,82,1713,493,636,19,6,3,21,5,0,321,0,61,0,9,24,33,0,12,16,0,0,0,1,145,0,12,370,152,0,0,6,146,0,0,34,0,0,0,0,0,0,0,3862\n",
      "432,2,222,595,369,1777,439,0,209,0,579,87,3,0,44,2,343,0,556,37,0,180,32,286,0,0,14,11,43,0,0,464,143,0,0,0,0,0,0,3,40,0,0,0,0,0,0,3088\n",
      "2786,20,100,37,0,845,453,2,286,16,70,1,0,13,102,26,1,5,0,14,0,0,36,176,0,0,12,0,295,0,252,118,147,0,0,194,27,0,3,0,0,46,0,0,0,0,0,3917\n",
      "586,5,63,63,3,975,146,13,65,178,40,148,546,2,126,0,0,163,124,1,0,9,51,0,0,80,0,1,171,0,0,233,4,0,0,8,4,0,0,0,0,0,7,0,0,0,0,6185\n",
      "816,1,489,140,4,1176,498,117,50,298,140,210,0,12,979,6,0,3,88,2,0,0,45,17,0,7,66,0,709,0,0,10,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,4093\n",
      "933,0,48,84,0,2237,724,18,336,0,47,0,0,563,148,141,49,7,0,347,23,240,115,0,0,0,0,351,49,0,3,64,671,0,0,0,6,0,0,2,0,0,7,0,0,0,0,2787\n",
      "447,150,98,1565,0,986,301,70,118,0,711,193,43,20,17,1,0,0,68,0,0,0,20,0,0,1,0,463,74,0,0,1,114,0,0,6,11,0,0,0,1,0,0,0,0,0,0,4521\n",
      "1398,0,34,110,99,1279,395,1,255,0,213,181,12,377,3,6,266,21,93,150,0,284,73,8,0,37,3,9,9,0,0,263,0,0,0,15,1,0,6,20,5,0,0,0,0,0,0,4374\n",
      "2109,0,129,946,0,1759,1,83,4,2,111,40,0,64,651,31,412,11,147,0,205,2,227,47,0,4,81,59,81,0,20,20,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2752\n",
      "1111,0,528,468,1,981,145,3,1137,42,17,8,129,0,23,0,0,2,59,160,280,5,10,0,0,185,0,0,385,0,0,104,81,0,0,0,370,0,0,0,0,0,0,0,0,0,0,3766\n",
      "2097,97,58,647,0,579,52,112,944,0,19,457,147,47,471,21,257,0,9,209,3,142,180,0,0,0,4,1,255,0,0,21,16,0,0,0,470,0,0,0,0,0,0,0,0,0,0,2685\n",
      "1051,0,84,65,11,1438,180,85,615,0,201,24,57,566,69,0,18,272,73,53,168,106,161,0,0,21,0,0,982,0,0,152,8,0,0,0,240,0,0,0,1,0,0,0,0,0,0,3299\n",
      "597,0,317,2091,158,1529,279,33,507,2,1401,0,0,0,21,0,10,104,30,79,234,1,112,0,0,0,1,0,141,0,0,65,63,0,0,0,0,0,11,0,0,0,0,0,0,0,0,2214\n",
      "490,0,29,60,0,638,118,9,762,0,537,40,96,171,1,6,142,1,526,396,0,0,758,6,27,40,0,188,83,0,0,7,0,0,0,0,156,0,0,0,0,0,0,283,0,0,0,4430\n",
      "2445,0,81,680,415,939,123,375,397,3,0,53,96,0,0,2,285,22,41,132,16,0,5,0,5,0,0,7,258,0,0,25,52,0,0,19,103,0,0,0,0,0,0,0,0,0,0,3421\n",
      "890,114,208,367,475,1095,59,0,66,150,4,8,120,10,615,374,2,0,160,55,2,127,184,15,0,0,0,0,350,0,13,7,5,0,0,0,763,0,0,0,0,0,0,0,0,0,0,3762\n",
      "725,120,7,250,226,1035,552,441,4,51,21,1,52,0,280,0,0,4,11,15,0,9,5,0,0,0,131,0,167,384,50,13,53,0,0,0,180,0,0,254,0,0,1,0,0,0,0,4958\n",
      "545,2,55,210,0,420,348,0,300,10,804,23,0,0,4,1,76,150,77,5,768,0,412,2,76,4,570,0,556,0,0,17,62,0,0,2,59,0,0,0,416,0,0,0,0,0,0,4026\n",
      "1941,0,313,741,0,574,25,3,388,4,565,61,22,12,24,0,20,205,0,24,134,1190,154,1,5,14,106,239,10,0,0,27,59,0,0,453,0,0,104,0,0,0,0,0,0,0,0,2582\n",
      "922,2,18,140,24,2011,71,167,19,0,637,71,325,502,253,185,35,226,51,22,0,310,83,1,0,0,0,0,51,2,4,210,509,0,1,0,7,0,0,0,0,0,0,8,0,0,0,3133\n",
      "229,0,49,806,77,1393,337,41,391,5,3,45,4,0,14,0,49,15,58,94,21,0,92,0,0,0,75,0,251,0,12,208,0,0,0,0,88,0,0,0,0,0,181,0,0,0,0,5462\n",
      "1131,0,344,334,0,1528,45,23,182,37,272,0,0,1,0,1748,1,0,2,175,204,0,60,31,0,0,153,0,648,0,0,42,61,0,0,76,44,0,0,2,0,0,0,0,0,0,0,2856\n",
      "417,626,375,141,0,1513,78,0,174,460,478,37,112,0,69,95,69,0,140,1050,0,0,126,39,0,27,14,0,32,0,0,194,0,0,0,0,329,0,0,6,0,0,0,0,0,0,0,3399\n",
      "1195,81,66,103,23,739,39,0,570,7,1045,151,0,10,140,110,7,24,532,1,0,10,436,190,0,46,0,109,91,0,1,449,329,0,0,0,246,0,0,0,5,0,0,0,0,0,0,3245\n",
      "882,0,231,992,8,848,210,42,645,0,1,150,0,167,99,42,155,252,100,4,0,0,1,561,2,3,45,0,121,0,0,29,63,0,0,0,55,627,0,0,0,0,0,0,0,0,0,3665\n",
      "399,0,5,206,0,2685,133,0,617,105,15,479,90,34,5,0,314,26,5,39,4,558,230,0,0,37,0,0,465,0,2,100,14,0,0,0,85,2,1,370,0,0,9,0,2,0,0,2964\n",
      "1096,0,119,191,2,1807,47,17,365,0,2,2,46,91,11,36,34,1,999,230,0,27,228,0,0,2,0,188,828,0,56,110,5,0,0,0,136,0,0,96,52,0,2,0,0,0,0,3174\n",
      "974,479,1491,7,133,553,55,1,104,9,0,4,0,0,252,6,1,100,242,17,969,0,50,0,0,146,111,2,161,45,145,553,0,0,0,0,151,0,0,0,0,0,0,0,0,0,0,3239\n",
      "1207,77,287,759,215,1312,371,30,222,9,908,71,222,97,2,0,209,0,17,115,0,69,690,0,0,0,1,0,118,0,0,845,43,19,0,0,11,0,0,2,0,0,0,0,0,0,0,2072\n",
      "1453,0,2,323,1,1403,44,10,85,64,10,10,0,407,7,0,3,193,3,1,8,4,129,0,0,205,2,0,534,0,0,376,0,0,0,60,2,0,1,0,2,0,3,0,0,0,0,4655\n",
      "999,6,17,290,256,1555,64,18,542,0,45,1,36,40,1,115,659,635,361,4,1,0,323,405,0,4,0,82,9,0,0,15,4,0,0,0,9,0,0,9,0,3,0,0,0,0,0,3492\n",
      "330,0,88,222,9,1092,517,2,21,69,424,0,60,0,469,42,631,0,126,164,156,262,74,0,0,0,0,0,461,0,68,6,318,0,0,0,1,0,0,0,93,0,0,0,0,0,0,4295\n",
      "481,0,316,431,0,576,197,8,487,129,645,90,8,2,568,20,0,1,29,23,0,152,8,173,0,0,0,0,153,0,2,8,76,0,0,0,120,0,0,0,0,0,0,0,0,0,0,5297\n",
      "1574,329,464,1217,0,1010,91,191,63,0,165,448,0,0,2,4,1,0,12,218,0,0,9,568,0,0,0,0,582,0,120,8,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,2900\n",
      "568,217,460,918,0,794,219,0,273,0,126,786,0,0,1,16,84,7,31,34,137,0,70,1,0,6,0,29,9,0,10,700,54,0,0,0,5,0,0,0,0,0,0,0,0,73,1,4371\n",
      "347,2,363,207,2,2514,488,4,27,42,99,0,0,98,11,7,0,0,472,5,78,23,70,1,1,2,10,0,16,0,13,232,23,0,0,0,2,4,0,0,0,0,0,60,0,0,0,4777\n",
      "591,0,300,351,0,742,31,0,737,2,770,2,1,4,16,0,57,0,21,29,434,0,584,286,17,29,57,98,209,0,126,1,0,0,0,0,576,0,6,0,0,0,0,0,2,0,0,3921\n",
      "642,139,150,1043,77,1074,0,636,56,169,0,1,22,10,30,0,6,0,0,11,89,0,3,36,0,117,265,0,566,0,830,59,2,0,0,3,106,0,0,0,0,0,0,0,0,0,0,3858\n",
      "507,16,816,39,49,900,16,102,1457,67,6,150,23,194,75,0,6,0,3,272,261,41,83,0,0,11,0,35,330,30,0,535,104,0,0,0,317,0,0,0,354,8,0,0,1,0,0,3192\n",
      "857,0,366,581,0,955,29,224,362,0,8,454,33,361,143,4,117,0,1071,312,758,0,23,188,0,0,0,2,176,16,204,68,29,0,0,51,68,0,0,19,0,0,0,0,0,0,2,2519\n",
      "545,1,851,421,0,1743,310,0,42,2,2,559,0,233,0,11,224,349,53,371,1,35,489,0,37,62,0,0,285,0,0,54,2,0,0,13,29,0,0,0,0,0,10,0,0,0,0,3266\n",
      "1846,0,136,121,0,1580,44,77,301,0,46,0,2,12,4,294,135,190,33,242,35,0,33,0,0,0,49,1168,78,0,0,5,0,0,0,39,1,0,0,0,0,0,0,0,0,0,0,3529\n",
      "1027,4,997,1038,17,1472,573,85,85,101,0,150,109,23,246,78,28,0,183,1,1,0,207,103,0,0,98,40,270,0,13,595,185,0,0,0,103,128,0,0,0,0,0,0,0,3,0,2037\n",
      "1711,1,231,1923,0,337,0,22,718,49,3,9,336,0,24,35,11,215,576,0,121,0,108,0,0,0,221,0,48,0,57,23,0,0,0,0,77,0,0,0,0,0,0,0,0,0,0,3144\n",
      "1727,0,30,1315,0,416,252,0,110,9,360,0,0,13,0,81,89,0,833,140,0,1,11,0,0,1,19,234,18,0,0,125,1,0,0,0,15,0,0,0,1,0,0,0,0,0,0,4199\n",
      "1367,0,490,933,0,791,0,0,424,3,81,9,16,45,120,0,3,43,257,1,0,440,1,14,0,1,13,0,176,0,0,152,36,98,0,0,390,0,6,0,39,0,0,0,0,0,0,4051\n",
      "936,5,85,102,85,2309,908,6,385,160,15,0,0,0,5,0,9,0,1,225,652,1,0,195,0,1,107,1,1,0,0,157,115,0,0,0,16,0,0,5,294,0,0,0,0,0,0,3219\n",
      "1959,65,7,258,0,1479,139,6,437,204,20,12,5,0,16,8,124,94,392,12,12,0,10,0,0,29,2,3,230,0,0,214,8,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4252\n",
      "1005,24,439,762,14,1262,302,78,23,8,48,7,26,0,20,162,846,6,146,2,0,91,132,1,0,20,1,4,122,0,0,65,4,0,0,0,142,0,0,1,1,0,360,0,0,0,4,3872\n",
      "316,11,777,128,0,733,125,274,154,0,28,245,19,0,1107,0,126,8,121,289,5,1,8,0,4,233,0,12,309,0,0,250,283,0,0,4,123,0,0,0,0,0,1,0,0,0,0,4306\n",
      "789,4,165,78,0,1833,45,0,843,119,197,16,3,51,52,3,37,374,165,1,2,42,34,0,45,0,23,16,245,0,0,11,59,0,172,41,376,0,0,0,0,11,0,163,0,0,0,3985\n",
      "2325,5,14,195,0,452,7,188,226,47,9,1268,1,333,6,1,0,174,782,59,367,52,1,0,0,197,0,0,65,0,0,0,1,0,0,0,47,0,0,0,7,0,0,0,0,6,4,3161\n",
      "1987,0,501,13,0,807,21,0,272,0,58,1,13,573,2,0,55,594,14,3,278,0,25,5,7,0,1,1,426,0,42,17,167,0,0,0,0,0,0,0,77,0,0,0,0,0,0,4040\n",
      "1832,627,5,826,0,2226,250,0,106,44,461,0,24,194,2,381,346,12,452,136,0,0,10,0,0,55,0,0,138,0,0,188,8,0,0,0,27,0,0,0,0,0,0,0,0,0,0,1650\n",
      "1011,3,73,1329,3,484,1851,2,49,0,189,1,8,30,51,3,28,19,22,0,0,19,21,3,0,0,15,3,166,1,2,11,0,0,0,3,747,0,0,0,0,0,0,0,0,0,0,3853\n",
      "617,0,0,38,141,1434,933,0,352,309,515,7,0,1,4,425,928,2,635,37,154,389,11,1,0,73,182,322,183,0,64,146,111,0,0,0,4,0,0,0,0,0,1,0,0,0,0,1981\n",
      "1823,0,713,364,113,218,2,0,24,4,46,12,1,104,20,3,193,1,50,43,21,0,11,0,1,7,1,0,125,0,0,0,91,0,0,0,234,0,0,21,0,0,0,0,0,0,0,5754\n",
      "1073,0,80,29,0,111,308,35,342,2,76,3,0,17,2,336,0,508,23,256,1,13,6,0,380,0,31,0,334,0,0,667,439,176,0,0,925,0,0,716,0,28,2,0,0,0,0,3081\n",
      "743,10,27,1566,0,1064,407,8,132,0,26,12,79,2,2,177,345,4,251,24,1,0,78,32,0,53,733,21,1,0,0,68,5,0,0,0,21,0,0,0,0,0,8,0,0,0,0,4100\n",
      "1499,49,14,727,0,1488,52,45,204,20,111,1,180,2,51,44,0,0,42,121,180,0,16,30,0,0,432,6,12,0,0,483,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,4188\n",
      "253,0,236,1202,0,1012,543,170,618,0,1148,2,0,1,91,56,0,4,21,1,29,0,159,0,0,95,2,1,22,0,0,0,12,0,0,10,43,0,0,0,2,0,2,0,0,0,0,4265\n",
      "1544,2,130,99,0,1290,343,334,338,137,54,15,16,47,523,45,115,19,11,184,3,15,81,0,0,0,0,0,292,0,5,36,25,0,0,6,106,0,0,78,0,0,0,0,0,0,0,4107\n",
      "955,0,17,345,0,1636,32,5,615,6,19,1,1,5,55,0,1,73,272,38,0,136,343,29,0,119,36,1,373,0,110,37,0,0,0,0,6,0,0,8,141,0,0,0,0,0,0,4585\n",
      "641,0,7,1007,0,1771,235,0,491,57,927,30,5,16,384,0,33,100,125,169,0,0,64,23,0,595,0,0,230,0,0,56,18,0,2,0,7,0,0,0,0,0,0,0,0,0,0,3007\n",
      "947,730,245,910,0,574,679,0,35,0,235,59,8,5,163,583,159,118,138,475,0,72,73,0,0,52,0,0,895,0,0,490,36,46,0,3,336,0,0,39,0,0,0,0,0,0,0,1895\n",
      "284,128,36,468,0,674,1482,40,17,0,45,10,98,2,3,104,66,0,160,205,0,33,1355,22,0,1,40,0,0,0,0,4,1,7,0,3,70,0,67,76,0,0,0,0,0,0,0,4499\n",
      "583,23,980,1188,1,1518,19,93,703,0,145,1,0,0,30,30,8,3,15,117,0,0,53,2,7,0,0,0,37,0,3,119,411,0,0,0,170,0,0,0,0,0,0,0,0,0,0,3741\n",
      "1157,1,121,230,2,351,3,141,26,40,25,58,29,181,70,897,59,621,287,0,0,0,240,231,555,11,3,9,508,0,78,5,79,2,0,0,170,0,10,0,0,0,9,0,0,0,0,3791\n",
      "1056,0,150,340,187,1508,3,2,154,67,1,1,1,3,149,0,25,0,223,362,8,18,37,163,0,1,5,0,46,0,126,770,1,0,0,0,189,0,0,3,0,0,0,0,0,0,0,4401\n",
      "2274,0,851,181,184,1875,9,4,347,0,94,8,0,0,9,43,10,1,0,47,3,1,308,0,0,21,0,3,29,0,0,25,18,0,0,0,9,0,0,0,2,0,3,0,0,0,0,3641\n",
      "623,0,14,386,26,794,495,12,701,360,433,6,7,2,611,4,4,45,61,18,29,0,1459,0,0,1,19,0,73,9,1065,95,6,0,0,89,346,0,0,0,0,0,0,0,7,0,0,2200\n",
      "184,0,28,842,0,836,132,56,597,0,95,31,11,16,195,21,0,75,0,4,252,0,13,28,0,3,10,0,97,0,8,5,98,0,0,0,175,0,0,0,0,13,253,8,0,0,0,5914\n",
      "848,0,477,585,12,655,0,19,1366,3,228,324,345,0,8,11,89,138,6,26,0,11,61,616,217,73,0,0,348,0,0,187,0,0,0,0,10,0,277,0,0,0,0,0,0,0,0,3060\n",
      "965,232,38,50,39,1440,113,303,531,29,26,0,0,75,20,19,0,0,1,6,0,0,7,1,0,0,31,0,209,0,0,75,0,0,0,0,432,0,0,0,0,0,61,0,1,0,0,5296\n",
      "1401,0,406,87,0,300,556,392,6,29,201,10,52,0,265,0,246,9,437,49,26,242,310,0,29,0,1,18,13,0,93,1181,13,0,0,180,92,269,0,0,0,0,0,32,0,0,0,3055\n",
      "695,0,621,257,0,1288,11,0,163,0,945,306,39,41,397,25,34,161,0,11,20,24,0,153,0,1,0,94,0,51,26,0,0,0,0,0,816,0,0,3,0,0,0,0,0,0,0,3818\n",
      "1265,0,696,192,212,722,8,305,12,111,43,291,3,796,29,0,20,12,326,306,0,17,1,0,0,4,2,371,225,0,3,13,11,0,0,0,6,0,0,0,22,0,0,0,0,0,0,3976\n",
      "687,0,631,164,0,830,400,82,1,0,110,19,84,218,68,7,8,131,121,4,11,34,125,31,3,0,1,3,705,0,45,24,5,0,0,0,261,0,0,0,0,0,0,0,0,0,0,5187\n",
      "2983,0,660,140,0,1742,277,36,6,99,49,113,76,45,70,0,1,127,142,1,0,0,1,1,0,74,49,130,154,0,0,13,85,0,0,0,134,0,1,2,1,0,0,0,0,0,0,2788\n",
      "505,16,139,265,5,1501,238,232,124,391,662,0,140,574,14,35,22,999,13,3,126,13,830,0,0,1,12,1,5,0,86,1,108,0,0,0,4,0,0,0,0,0,0,0,0,1,0,2934\n",
      "1204,0,2,989,0,827,362,1,118,241,488,172,76,0,2,0,2,8,197,0,44,8,68,6,0,0,0,6,239,0,20,61,1431,0,0,0,317,0,0,0,0,0,0,0,0,0,0,3111\n",
      "806,16,1439,69,55,436,200,13,117,219,335,1204,52,38,376,0,0,68,15,112,63,0,257,0,0,1,6,0,171,0,1,36,177,0,0,0,108,0,0,133,351,0,0,0,0,0,0,3126\n",
      "419,679,140,383,0,725,21,35,35,14,59,0,93,0,57,0,47,1,10,77,204,7,243,184,101,451,0,84,151,0,0,340,287,0,0,0,10,0,0,0,0,0,0,0,0,0,0,5143\n",
      "596,5,1691,320,1,1011,238,21,247,69,71,178,273,3,1,0,338,200,2,0,110,48,50,1,0,0,0,8,2,0,37,35,0,0,0,0,0,0,0,292,6,0,0,0,0,0,0,4146\n",
      "1341,0,1107,1457,43,876,212,136,133,1,6,21,3,38,26,3,216,0,30,280,0,0,107,12,4,126,8,0,482,0,0,365,2,0,0,0,15,0,0,0,0,0,0,0,0,0,0,2950\n",
      "613,1,284,293,0,1402,295,114,1214,0,23,49,0,13,1689,13,94,0,7,10,0,2,107,4,0,17,61,49,110,0,0,100,65,0,0,0,69,0,3,11,0,0,0,0,0,2,0,3286\n",
      "1818,1,333,394,1,945,465,0,38,100,1,7,36,527,32,0,361,2,2,3,120,139,110,5,8,2,0,0,544,0,493,425,0,0,0,5,101,0,0,5,219,0,0,0,0,0,0,2758\n",
      "1057,0,0,322,217,650,1,969,214,41,1006,0,2,0,7,0,12,1,0,166,0,0,17,7,0,19,5,1,95,2,1,44,0,0,0,30,0,0,0,0,2,0,0,0,0,0,0,5112\n",
      "422,0,250,79,0,1381,225,0,72,0,784,2,1,0,916,0,227,91,307,91,0,10,60,0,0,80,0,0,95,0,0,123,16,0,0,73,1183,0,0,1,0,124,0,0,0,6,0,3381\n",
      "1401,4,30,526,0,923,25,0,127,0,483,11,70,1089,1,3,174,11,4,2,49,0,81,297,0,4,18,0,100,0,35,8,1,0,0,0,46,0,0,0,7,0,0,0,0,0,0,4470\n",
      "2655,6,106,74,0,952,76,13,158,125,736,43,19,6,49,0,2,21,971,138,95,0,548,0,0,5,105,0,223,0,1,4,5,0,0,0,36,0,0,2,0,0,0,0,0,0,0,2826\n",
      "335,0,71,259,67,718,1,4,4,167,6,0,174,12,6,0,2,56,1,104,8,0,124,0,0,0,0,4,861,0,0,0,1,0,0,0,236,0,0,246,0,0,6,0,0,0,0,6527\n",
      "649,69,966,1227,0,508,2,30,550,0,302,159,3,49,195,26,19,180,7,49,2,0,324,32,0,0,0,0,5,0,0,147,87,0,0,0,5,0,0,0,0,0,0,6,0,0,0,4402\n",
      "1258,0,0,1119,0,2348,25,0,137,176,2,12,148,92,35,0,0,10,26,0,336,164,18,0,0,23,0,4,1318,0,102,1,49,0,0,0,10,0,0,2,0,0,0,0,0,0,0,2585\n",
      "\n"
     ]
    }
   ],
   "source": [
    "with open(resource_filename('deepbiome', 'tests/data/onefile_x.csv')) as f:\n",
    "    print(f.read())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example of the Y (regression)\n",
    "\n",
    "This is an example of the output file for regression problem."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4.997270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.004092</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5.485126</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5.489590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.500001</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         x1\n",
       "0  4.997270\n",
       "1  5.004092\n",
       "2  5.485126\n",
       "3  5.489590\n",
       "4  1.500001"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = pd.read_csv(resource_filename('deepbiome', 'tests/data/onefile_regression_y.csv'))\n",
    "y.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>2.609926</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>5.488959</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>3.498418</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>5.486107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>5.319623</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           x1\n",
       "995  2.609926\n",
       "996  5.488959\n",
       "997  3.498418\n",
       "998  5.486107\n",
       "999  5.319623"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example of the Y (classification)\n",
    "\n",
    "This is an example of the output file for classification problem. Below example file has 1000 samples in rows."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>V1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    V1\n",
       "0  1.0\n",
       "1  1.0\n",
       "2  0.0\n",
       "3  0.0\n",
       "4  1.0"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = pd.read_csv(resource_filename('deepbiome', 'tests/data/onefile_classification_y.csv'))\n",
    "y.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>V1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      V1\n",
       "995  1.0\n",
       "996  0.0\n",
       "997  1.0\n",
       "998  0.0\n",
       "999  1.0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exmple of the training index file for `k` fold cross-validation\n",
    "\n",
    "For each fold, we have to set the training and test set. If the index file is given, DeepBiome sets the training set and test set based on the index file for 5 fold cross-validation. Below is the example of the index file. Each column has the training indices for each fold. DeepBiome will only use the samples in this index set for training."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   0  1  2  3  4\n",
       "0  1  1  3  1  1\n",
       "1  2  2  4  2  2\n",
       "2  3  3  5  3  4\n",
       "3  6  4  7  4  5\n",
       "4  7  5  9  5  6"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "idxs = pd.read_csv(resource_filename('deepbiome', 'tests/data/onefile_idx.csv'), dtype=np.int)\n",
    "idxs.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>795</th>\n",
       "      <td>994</td>\n",
       "      <td>996</td>\n",
       "      <td>994</td>\n",
       "      <td>995</td>\n",
       "      <td>996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>796</th>\n",
       "      <td>995</td>\n",
       "      <td>997</td>\n",
       "      <td>995</td>\n",
       "      <td>996</td>\n",
       "      <td>997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>797</th>\n",
       "      <td>997</td>\n",
       "      <td>998</td>\n",
       "      <td>996</td>\n",
       "      <td>997</td>\n",
       "      <td>998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>798</th>\n",
       "      <td>999</td>\n",
       "      <td>999</td>\n",
       "      <td>998</td>\n",
       "      <td>998</td>\n",
       "      <td>999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>799</th>\n",
       "      <td>1000</td>\n",
       "      <td>1000</td>\n",
       "      <td>999</td>\n",
       "      <td>1000</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        0     1    2     3     4\n",
       "795   994   996  994   995   996\n",
       "796   995   997  995   996   997\n",
       "797   997   998  996   997   998\n",
       "798   999   999  998   998   999\n",
       "799  1000  1000  999  1000  1000"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "idxs.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below is the index set for 1st fold. From 1000 samples above, it uses 800 samples for training."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    1\n",
       "1    2\n",
       "2    3\n",
       "3    6\n",
       "4    7\n",
       "Name: 0, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "idxs.iloc[:,0].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "795     994\n",
       "796     995\n",
       "797     997\n",
       "798     999\n",
       "799    1000\n",
       "Name: 0, dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "idxs.iloc[:,0].tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Prepare the configuration\n",
    "\n",
    "For detailed configuration, we can build the configuration information for the network training by:\n",
    "1. the python dictionary format\n",
    "1. the configufation file (.cfg).\n",
    "\n",
    "In this notebook, we show the python dictionary format configuration.\n",
    "\n",
    "Please check the detailed information about each option in the [documantation](https://young-won.github.io/deepbiome/prerequisites.html#configuration)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### For preparing the configuration about the network information (`network_info`)\n",
    "\n",
    "To give the information about the training process, we provide a dictionary of configurations to the `netowrk_info` field.\n",
    "Your configuration for the network training should include the information about:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "network_info = {\n",
    "    'architecture_info': {\n",
    "        'batch_normalization': 'False',\n",
    "        'drop_out': '0',\n",
    "        'weight_initial': 'glorot_uniform',\n",
    "        'weight_l1_penalty':'0.',\n",
    "        'weight_decay': 'phylogenetic_tree',\n",
    "    },\n",
    "    'model_info': {\n",
    "        'lr': '0.01',\n",
    "        'decay': '0.001',\n",
    "        'loss': 'binary_crossentropy',\n",
    "        'metrics': 'binary_accuracy, sensitivity, specificity, gmeasure',\n",
    "        'taxa_selection_metrics': 'sensitivity, specificity, gmeasure, accuracy',\n",
    "        'network_class': 'DeepBiomeNetwork',\n",
    "        'optimizer': 'adam',\n",
    "        'reader_class': 'MicroBiomeClassificationReader',\n",
    "        'normalizer': 'normalize_minmax',\n",
    "    },\n",
    "    'training_info': {\n",
    "        'epochs': '10',\n",
    "        'batch_size': '50', \n",
    "        'callbacks': 'ModelCheckpoint',\n",
    "        'monitor': 'val_loss',\n",
    "        'mode' : 'min',\n",
    "        'min_delta': '1e-7',\n",
    "    },\n",
    "    'validation_info': {\n",
    "        'batch_size': 'None', \n",
    "        'validation_size': '0.2'\n",
    "    },\n",
    "    'test_info': {\n",
    "        'batch_size': 'None'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### For preparing the configuration about the path information (`path_info`)\n",
    "\n",
    "To give the information about the path of dataset, paths for saving the trained weights and the evaluation results, we provide a dictionary of configurations to the `path_info` field.\n",
    "Your configuration for the network training should include the information about:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "path_info = {\n",
    "    'data_info': {\n",
    "        'data_path': resource_filename('deepbiome', 'tests/data'),\n",
    "        'idx_path': resource_filename('deepbiome', 'tests/data/onefile_idx.csv'),\n",
    "        'tree_info_path': resource_filename('deepbiome', 'tests/data/genus48_dic.csv'),\n",
    "        'x_path': 'onefile_x.csv',\n",
    "        'y_path': 'classification_y.csv'\n",
    "    },\n",
    "    'model_info': {\n",
    "        'evaluation': 'eval.npy',\n",
    "        'history': 'hist.json',\n",
    "        'model_dir': './example_result/',\n",
    "        'weight': 'weight.h5'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Deepbiome Training\n",
    "\n",
    "Now we can train the DeepBiome network based on the configurations."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For logging, we used the python logging library."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "logging.basicConfig(format = '[%(name)-8s|%(levelname)s|%(filename)s:%(lineno)s] %(message)s',\n",
    "                    level=logging.DEBUG)\n",
    "log = logging.getLogger()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The deeobiome_train function provide the test evaluation, train evaluation and the deepbiome network instance.\n",
    "\n",
    "If we set `number_of_fold`, then DeepBiome performs cross-validation based on that value. If not, DeepBiome package performs cross-validation based on the index file. If both `number_of_fold` option and the index file are missing, then the library performs leave-one-out-cross-validation (LOOCV)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:109] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------1 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 1 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Phylum', 'Order', 'Number', 'Genus', 'Family', 'Class']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/resource_variable_ops.py:432: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Colocations handled automatically by placer.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[tensorflow|WARNING|deprecation.py:328] From /usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/resource_variable_ops.py:432: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Colocations handled automatically by placer.\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 1 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/math_ops.py:2862: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.cast instead.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[tensorflow|WARNING|deprecation.py:328] From /usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/math_ops.py:2862: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.cast instead.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 1ms/step - loss: 0.6730 - binary_accuracy: 0.6750 - sensitivity: 0.9231 - specificity: 0.0769 - gmeasure: 0.0000e+00 - val_loss: 0.6473 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.6375 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6197 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 134us/step - loss: 0.6286 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6163 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 135us/step - loss: 0.6244 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6161 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 134us/step - loss: 0.6246 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6168 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 131us/step - loss: 0.6235 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6163 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 0.6237 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6162 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 0.6240 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6161 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 135us/step - loss: 0.6237 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6163 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 133us/step - loss: 0.6236 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6163 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 3.9163124561309814!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_0.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_0.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 4us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.010535717010498047!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6220807433128357, 0.6862499713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 11us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008910179138183594!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6190990209579468, 0.6899999976158142, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 6.166831731796265\n",
      "[root    |INFO|deepbiome.py:193] 1 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------2 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 2 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Phylum', 'Order', 'Number', 'Genus', 'Family', 'Class']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 2 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 808us/step - loss: 0.6756 - binary_accuracy: 0.6938 - sensitivity: 0.9439 - specificity: 0.0769 - gmeasure: 0.0400 - val_loss: 0.6425 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 117us/step - loss: 0.6259 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5938 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 103us/step - loss: 0.5970 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5757 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 126us/step - loss: 0.5986 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5757 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 119us/step - loss: 0.5984 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5776 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 121us/step - loss: 0.5973 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5775 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 123us/step - loss: 0.5973 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5766 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 123us/step - loss: 0.5976 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5763 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 131us/step - loss: 0.5970 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5769 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 125us/step - loss: 0.5974 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5782 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 2.7948007583618164!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_1.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_1.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 2us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008229494094848633!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.5938067436218262, 0.7200000286102295, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 8us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.007140636444091797!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.5937846899032593, 0.7200000286102295, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.3258769512176514\n",
      "[root    |INFO|deepbiome.py:193] 2 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------3 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 3 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Phylum', 'Order', 'Number', 'Genus', 'Family', 'Class']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 3 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 794us/step - loss: 0.6793 - binary_accuracy: 0.6703 - sensitivity: 0.9231 - specificity: 0.0724 - gmeasure: 0.0000e+00 - val_loss: 0.6604 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 119us/step - loss: 0.6477 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6293 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 123us/step - loss: 0.6199 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6108 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 128us/step - loss: 0.6153 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6114 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 119us/step - loss: 0.6142 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6106 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 119us/step - loss: 0.6145 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6110 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 119us/step - loss: 0.6135 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6106 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 132us/step - loss: 0.6145 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6108 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 136us/step - loss: 0.6139 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6107 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 131us/step - loss: 0.6139 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6105 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 2.932007074356079!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_2.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_2.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 4us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.01062774658203125!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.612848699092865, 0.6974999904632568, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 13us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.010415315628051758!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6488159894943237, 0.6549999713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.6458282470703125\n",
      "[root    |INFO|deepbiome.py:193] 3 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------4 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 4 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Phylum', 'Order', 'Number', 'Genus', 'Family', 'Class']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 4 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 0s 759us/step - loss: 0.6717 - binary_accuracy: 0.6656 - sensitivity: 0.9389 - specificity: 0.0673 - gmeasure: 0.0326 - val_loss: 0.6461 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 133us/step - loss: 0.6300 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6216 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 135us/step - loss: 0.6223 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6224 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 134us/step - loss: 0.6237 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 134us/step - loss: 0.6229 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6210 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 134us/step - loss: 0.6225 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6209 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 131us/step - loss: 0.6223 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6209 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 133us/step - loss: 0.6218 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6203 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 131us/step - loss: 0.6222 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6198 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 127us/step - loss: 0.6212 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6191 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 3.3006534576416016!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_3.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_3.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008984804153442383!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6193788647651672, 0.6862499713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 10us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.007525920867919922!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6159566640853882, 0.6899999976158142, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.792734146118164\n",
      "[root    |INFO|deepbiome.py:193] 4 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------5 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 5 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Phylum', 'Order', 'Number', 'Genus', 'Family', 'Class']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 5 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 781us/step - loss: 0.6665 - binary_accuracy: 0.6484 - sensitivity: 0.9231 - specificity: 0.0769 - gmeasure: 0.0000e+00 - val_loss: 0.6375 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 0.6315 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6162 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 145us/step - loss: 0.6278 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6161 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 136us/step - loss: 0.6285 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6164 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6273 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6164 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 142us/step - loss: 0.6275 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6168 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 123us/step - loss: 0.6274 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6168 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 123us/step - loss: 0.6273 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6162 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 128us/step - loss: 0.6279 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6165 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 136us/step - loss: 0.6279 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6170 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 3.0827651023864746!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_4.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_4.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008535146713256836!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6255182027816772, 0.6825000047683716, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 10us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.00829458236694336!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6066884398460388, 0.7049999833106995, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.539252758026123\n",
      "[root    |INFO|deepbiome.py:193] 5 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:204] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:205] Train Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure']\n",
      "[root    |INFO|deepbiome.py:206]       mean : [0.61472665 0.69449999 1.         0.         0.        ]\n",
      "[root    |INFO|deepbiome.py:207]        std : [0.0112548  0.01370677 0.         0.         0.        ]\n",
      "[root    |INFO|deepbiome.py:208] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:209] Test Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure']\n",
      "[root    |INFO|deepbiome.py:210]       mean : [0.61686896 0.692      1.         0.         0.        ]\n",
      "[root    |INFO|deepbiome.py:211]        std : [0.01823702 0.02158705 0.         0.         0.        ]\n",
      "[root    |INFO|deepbiome.py:212] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:223] Total Computing Ended\n",
      "[root    |INFO|deepbiome.py:224] -----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "test_evaluation, train_evaluation, network = deepbiome.deepbiome_train(log, network_info, path_info, number_of_fold=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `deepbiome_train` saves the trained model weights, evaluation results and history based on the path information from the configuration.\n",
    "\n",
    "From the example above, we can check that `hist_*.json`, `weight_*.h5`, `test_eval.npy`, `train_eval.npy` files were saved."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['hist_0.json',\n",
       " 'weight_2.h5',\n",
       " 'test_eval.npy',\n",
       " 'weight_0.h5',\n",
       " 'train_eval.npy',\n",
       " 'hist_2.json',\n",
       " 'hist_4.json',\n",
       " 'weight_3.h5',\n",
       " 'hist_3.json',\n",
       " 'weight_1.h5',\n",
       " 'weight_4.h5',\n",
       " 'hist_1.json']"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.listdir(path_info['model_info']['model_dir'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lets check the history files."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fe618a0bf60>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "with open('./%s/hist_0.json' % path_info['model_info']['model_dir'], 'r') as f:\n",
    "    history = json.load(f)\n",
    "    \n",
    "plt.plot(history['val_loss'], label='Validation')\n",
    "plt.plot(history['loss'], label='Training')\n",
    "plt.legend()\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Test evauation and train evauation is the numpy array of the shape (number of folds, number of evaluation measures)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.61909902, 0.69      , 1.        , 0.        , 0.        ],\n",
       "       [0.59378469, 0.72000003, 1.        , 0.        , 0.        ],\n",
       "       [0.64881599, 0.65499997, 1.        , 0.        , 0.        ],\n",
       "       [0.61595666, 0.69      , 1.        , 0.        , 0.        ],\n",
       "       [0.60668844, 0.70499998, 1.        , 0.        , 0.        ]])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.62208074, 0.68624997, 1.        , 0.        , 0.        ],\n",
       "       [0.59380674, 0.72000003, 1.        , 0.        , 0.        ],\n",
       "       [0.6128487 , 0.69749999, 1.        , 0.        , 0.        ],\n",
       "       [0.61937886, 0.68624997, 1.        , 0.        , 0.        ],\n",
       "       [0.6255182 , 0.6825    , 1.        , 0.        , 0.        ]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_evaluation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Load the pre-trained network for training\n",
    "\n",
    "If you have a pre-trianed model, you warm_start next training using the pre-trained weights by setting the `warm_start` option in `training_info` to `True`. The file path of the pre-trained weights passed in the `warm_start_model` option. Below is the example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "warm_start_network_info = {\n",
    "    'architecture_info': {\n",
    "        'batch_normalization': 'False',\n",
    "        'drop_out': '0',\n",
    "        'weight_initial': 'glorot_uniform',\n",
    "        'weight_l1_penalty':'0.',\n",
    "        'weight_decay': 'phylogenetic_tree',\n",
    "    },\n",
    "    'model_info': {\n",
    "        'decay': '0.001',\n",
    "        'loss': 'binary_crossentropy',\n",
    "        'lr': '0.01',\n",
    "        'metrics': 'binary_accuracy, sensitivity, specificity, gmeasure',\n",
    "        'network_class': 'DeepBiomeNetwork',\n",
    "        'normalizer': 'normalize_minmax',\n",
    "        'optimizer': 'adam',\n",
    "        'reader_class': 'MicroBiomeClassificationReader',\n",
    "        'taxa_selection_metrics': 'sensitivity, specificity, gmeasure, accuracy',\n",
    "    },\n",
    "    'training_info': {\n",
    "        'warm_start':'True',\n",
    "        'warm_start_model':'./example_result/weight.h5',\n",
    "        'epochs': '10',\n",
    "        'batch_size': '50',\n",
    "        'callbacks': 'ModelCheckpoint',\n",
    "        'monitor': 'val_loss',\n",
    "        'mode' : 'min',\n",
    "        'min_delta': '1e-7',\n",
    "    },\n",
    "    'validation_info': {\n",
    "        'batch_size': 'None', \n",
    "        'validation_size': '0.2'\n",
    "    },\n",
    "    'test_info': {\n",
    "        'batch_size': 'None'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:109] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------1 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 1 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Phylum', 'Order', 'Number', 'Genus', 'Family', 'Class']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 1 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 793us/step - loss: 0.6252 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6164 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 128us/step - loss: 0.6239 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6162 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 135us/step - loss: 0.6237 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6163 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 133us/step - loss: 0.6245 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6164 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6260 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6161 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 136us/step - loss: 0.6240 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6165 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 129us/step - loss: 0.6239 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6166 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 0.6236 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6161 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.6236 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6163 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 129us/step - loss: 0.6240 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6164 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 2.6254405975341797!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_0.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_0.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 4us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.009372949600219727!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6222403645515442, 0.6862499713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 9us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.00844430923461914!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6191483736038208, 0.6899999976158142, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.3372349739074707\n",
      "[root    |INFO|deepbiome.py:193] 1 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------2 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 2 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Phylum', 'Order', 'Number', 'Genus', 'Family', 'Class']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 2 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 825us/step - loss: 0.5982 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5777 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 128us/step - loss: 0.5975 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5778 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 123us/step - loss: 0.5972 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5769 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.5981 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5758 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 134us/step - loss: 0.5984 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5778 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 130us/step - loss: 0.5970 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5770 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 130us/step - loss: 0.5975 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5764 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 126us/step - loss: 0.5970 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5768 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 129us/step - loss: 0.5974 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5765 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 125us/step - loss: 0.5970 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5776 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 2.6459200382232666!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_1.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_1.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008792638778686523!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.5930938124656677, 0.7200000286102295, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 10us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008256196975708008!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.5930044054985046, 0.7200000286102295, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.5971298217773438\n",
      "[root    |INFO|deepbiome.py:193] 2 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------3 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 3 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Phylum', 'Order', 'Number', 'Genus', 'Family', 'Class']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 3 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 819us/step - loss: 0.6140 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6105 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 127us/step - loss: 0.6137 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6105 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6138 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6105 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 130us/step - loss: 0.6138 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6105 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 133us/step - loss: 0.6135 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6106 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6138 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6105 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 0.6135 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6105 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 140us/step - loss: 0.6136 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6104 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 143us/step - loss: 0.6135 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6104 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6153 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6106 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 3.2950856685638428!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_2.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_2.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 4us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.009185075759887695!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6127722263336182, 0.6974999904632568, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 12us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.00878763198852539!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6484130024909973, 0.6549999713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 4.082108020782471\n",
      "[root    |INFO|deepbiome.py:193] 3 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------4 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 4 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Phylum', 'Order', 'Number', 'Genus', 'Family', 'Class']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 4 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 838us/step - loss: 0.6195 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6178 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 143us/step - loss: 0.6178 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6169 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 132us/step - loss: 0.6165 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6158 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.6144 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6141 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 0.6119 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6122 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 134us/step - loss: 0.6089 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6090 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.6050 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6054 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6031 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6012 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 147us/step - loss: 0.5971 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5977 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 0.5846 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5909 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 3.2301528453826904!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_3.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_3.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008327484130859375!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.5837578773498535, 0.6862499713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 10us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008339405059814453!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.5776816010475159, 0.6899999976158142, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.9530253410339355\n",
      "[root    |INFO|deepbiome.py:193] 4 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------5 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 5 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Phylum', 'Order', 'Number', 'Genus', 'Family', 'Class']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 5 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 785us/step - loss: 0.6283 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6167 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.6281 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6161 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 135us/step - loss: 0.6271 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6168 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.6276 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6169 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 145us/step - loss: 0.6274 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6167 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.6278 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6162 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 140us/step - loss: 0.6278 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6164 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 153us/step - loss: 0.6272 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6172 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.6273 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6168 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 134us/step - loss: 0.6272 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6164 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 2.7035248279571533!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_4.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_4.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 4us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.00986790657043457!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.625062108039856, 0.6825000047683716, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 11us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008738040924072266!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6071779131889343, 0.7049999833106995, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.774648666381836\n",
      "[root    |INFO|deepbiome.py:193] 5 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:204] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:205] Train Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure']\n",
      "[root    |INFO|deepbiome.py:206]       mean : [0.60738528 0.69449999 1.         0.         0.        ]\n",
      "[root    |INFO|deepbiome.py:207]        std : [0.01627675 0.01370677 0.         0.         0.        ]\n",
      "[root    |INFO|deepbiome.py:208] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:209] Test Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure']\n",
      "[root    |INFO|deepbiome.py:210]       mean : [0.60908506 0.692      1.         0.         0.        ]\n",
      "[root    |INFO|deepbiome.py:211]        std : [0.02406807 0.02158705 0.         0.         0.        ]\n",
      "[root    |INFO|deepbiome.py:212] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:223] Total Computing Ended\n",
      "[root    |INFO|deepbiome.py:224] -----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "test_evaluation, train_evaluation, network = deepbiome.deepbiome_train(log, warm_start_network_info, path_info, \n",
    "                                                                       number_of_fold=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's check the history plot again."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nXBQkIiISl/8PhT5C5kX7+3oAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fe5b87c3780>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "with open('./%s/hist_0.json' % path_info['model_info']['model_dir'], 'r') as f:\n",
    "    history = json.load(f)\n",
    "    \n",
    "plt.plot(history['val_loss'], label='Validation')\n",
    "plt.plot(history['loss'], label='Training')\n",
    "plt.legend()\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. Load the pre-trained network for testing\n",
    "\n",
    "To test the trained model, we can use the `deepbiome_test` function. \n",
    "\n",
    "If you use the index file (`idx_path`), this function provides the evaluation using the test index (index set not included in the index file) for each fold. If not, this function provides the evaluation using the whole samples. \n",
    "\n",
    "If `number_of_fold` is set to `k`, the function will test the model only with first `k` folds.\n",
    "\n",
    "We can use the testing metrics different with the training. In the example below, we additionally used `AUC` metric."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "test_network_info = {\n",
    "    'architecture_info': {\n",
    "        'batch_normalization': 'False',\n",
    "        'drop_out': '0',\n",
    "        'weight_initial': 'glorot_uniform',\n",
    "        'weight_l1_penalty':'0.',\n",
    "        'weight_decay': 'phylogenetic_tree',\n",
    "    },\n",
    "    'model_info': {\n",
    "        'lr': '0.01',\n",
    "        'decay': '0.001',\n",
    "        'loss': 'binary_crossentropy',\n",
    "        'metrics': 'binary_accuracy, sensitivity, specificity, gmeasure, auc',\n",
    "        'taxa_selection_metrics': 'sensitivity, specificity, gmeasure, accuracy',\n",
    "        'network_class': 'DeepBiomeNetwork',\n",
    "        'optimizer': 'adam',\n",
    "        'reader_class': 'MicroBiomeClassificationReader',\n",
    "        'normalizer': 'normalize_minmax',\n",
    "    },\n",
    "    'test_info': {\n",
    "        'batch_size': 'None'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "test_path_info = {\n",
    "    'data_info': {\n",
    "        'data_path': resource_filename('deepbiome', 'tests/data'),\n",
    "        'idx_path': resource_filename('deepbiome', 'tests/data/onefile_idx.csv'),\n",
    "        'tree_info_path': resource_filename('deepbiome', 'tests/data/genus48_dic.csv'),\n",
    "        'x_path': 'onefile_x.csv',\n",
    "        'y_path': 'classification_y.csv'\n",
    "    },\n",
    "    'model_info': {\n",
    "        'evaluation': 'eval.npy',\n",
    "        'model_dir': './example_result/',\n",
    "        'weight': 'weight.h5'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:282] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:314] Test Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure' 'auc']\n",
      "[root    |INFO|deepbiome.py:316] -------1 fold test start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:327] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:328] Build network for 1 fold testing\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Phylum', 'Order', 'Number', 'Genus', 'Family', 'Class']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |INFO|deepbiome.py:338] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:339] 1 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 562us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.3035414218902588!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6191483736038208, 0.6899999976158142, 1.0, 0.0, 0.0, 0.6737961769104004]\n",
      "[root    |INFO|deepbiome.py:344] \n",
      "[root    |INFO|deepbiome.py:345] Compute time : 0.9213871955871582\n",
      "[root    |INFO|deepbiome.py:346] 1 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:316] -------2 fold test start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:327] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:328] Build network for 2 fold testing\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Phylum', 'Order', 'Number', 'Genus', 'Family', 'Class']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |INFO|deepbiome.py:338] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:339] 2 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 389us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.2558145523071289!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.5930044054985046, 0.7200000286102295, 1.0, 0.0, 0.0, 0.5251116156578064]\n",
      "[root    |INFO|deepbiome.py:344] \n",
      "[root    |INFO|deepbiome.py:345] Compute time : 0.9202871322631836\n",
      "[root    |INFO|deepbiome.py:346] 2 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:316] -------3 fold test start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:327] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:328] Build network for 3 fold testing\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Phylum', 'Order', 'Number', 'Genus', 'Family', 'Class']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |INFO|deepbiome.py:338] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:339] 3 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 524us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.2629129886627197!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6484130024909973, 0.6549999713897705, 1.0, 0.0, 0.0, 0.4720655083656311]\n",
      "[root    |INFO|deepbiome.py:344] \n",
      "[root    |INFO|deepbiome.py:345] Compute time : 0.86598801612854\n",
      "[root    |INFO|deepbiome.py:346] 3 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:316] -------4 fold test start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:327] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:328] Build network for 4 fold testing\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Phylum', 'Order', 'Number', 'Genus', 'Family', 'Class']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |INFO|deepbiome.py:338] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:339] 4 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 405us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.21695566177368164!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.5776816010475159, 0.6899999976158142, 1.0, 0.0, 0.0, 0.8631370067596436]\n",
      "[root    |INFO|deepbiome.py:344] \n",
      "[root    |INFO|deepbiome.py:345] Compute time : 1.0743207931518555\n",
      "[root    |INFO|deepbiome.py:346] 4 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:316] -------5 fold test start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:327] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:328] Build network for 5 fold testing\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Phylum', 'Order', 'Number', 'Genus', 'Family', 'Class']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |INFO|deepbiome.py:338] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:339] 5 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 402us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.22886919975280762!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6071779131889343, 0.7049999833106995, 1.0, 0.0, 0.0, 0.4981367886066437]\n",
      "[root    |INFO|deepbiome.py:344] \n",
      "[root    |INFO|deepbiome.py:345] Compute time : 0.7832949161529541\n",
      "[root    |INFO|deepbiome.py:346] 5 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:355] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:356] Test Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure' 'auc']\n",
      "[root    |INFO|deepbiome.py:357]       mean : [0.60908506 0.692      1.         0.         0.         0.60644942]\n",
      "[root    |INFO|deepbiome.py:358]        std : [0.02406807 0.02158705 0.         0.         0.         0.14617155]\n",
      "[root    |INFO|deepbiome.py:359] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:360] Total Computing Ended\n",
      "[root    |INFO|deepbiome.py:361] -----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "evaluation = deepbiome.deepbiome_test(log, test_network_info, test_path_info, number_of_fold=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This function provides the evaluation result as a numpy array with a shape of (number of folds, number of evaluation measures)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                  loss binary_accuracy     sensitivity     specificity        gmeasure             auc\n",
      "Mean:           0.6091          0.6920          1.0000          0.0000          0.0000          0.6064\n",
      "Std :           0.0241          0.0216          0.0000          0.0000          0.0000          0.1462\n"
     ]
    }
   ],
   "source": [
    "print('      %s' % ''.join(['%16s'%'loss']+ ['%16s'%s.strip() for s in test_network_info['model_info']['metrics'].split(',')]))\n",
    "print('Mean: %s' % ''.join(['%16.4f'%v for v in np.mean(evaluation, axis=0)]))\n",
    "print('Std : %s' % ''.join(['%16.4f'%v for v in np.std(evaluation, axis=0)]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7. Load the pre-trained network for prediction\n",
    "\n",
    "If you want to predict using the pre-trained model, you can use the `deepbiome_prediction` function. If `number_of_fold` is setted as `k`, the function will predict only with first `k` folds sample's outputs. \n",
    "\n",
    "If `change_weight_for_each_fold` is set as `False`, the function will predict the output of every folds by same weight from the given path. If `change_weight_for_each_fold` is set as `True`, the function will predict the output of by each fold weight.\n",
    "\n",
    "If 'get_y=True', the function will provide a list of tuples (prediction, true output) as a output with the shape of `(n_samples, 2, n_classes)`. If 'get_y=False', the function will provide predictions only. The output will have the shape of `(n_samples, n_classes)`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 7.1 Prediction with fixed weight\n",
    "\n",
    "If we want to predict new data from one pre-trained model, we can use the option below. We fixed the weight `weight_0.h5` for predicting the whole samples from `onefile_x.csv` (without using index file)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "prediction_network_info = {\n",
    "    'architecture_info': {\n",
    "        'batch_normalization': 'False',\n",
    "        'drop_out': '0',\n",
    "        'weight_initial': 'glorot_uniform',\n",
    "        'weight_l1_penalty':'0.',\n",
    "        'weight_decay': 'phylogenetic_tree',\n",
    "    },\n",
    "    'model_info': {\n",
    "        'decay': '0.001',\n",
    "        'loss': 'binary_crossentropy',\n",
    "        'lr': '0.01',\n",
    "        'metrics': 'binary_accuracy, sensitivity, specificity, gmeasure, auc',\n",
    "        'network_class': 'DeepBiomeNetwork',\n",
    "        'normalizer': 'normalize_minmax',\n",
    "        'optimizer': 'adam',\n",
    "        'reader_class': 'MicroBiomeClassificationReader',\n",
    "        'taxa_selection_metrics': 'sensitivity, specificity, gmeasure, accuracy',\n",
    "    },\n",
    "    'test_info': {\n",
    "        'batch_size': 'None'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "prediction_path_info = {\n",
    "    'data_info': {\n",
    "        'data_path': resource_filename('deepbiome', 'tests/data'),\n",
    "        'tree_info_path': resource_filename('deepbiome', 'tests/data/genus48_dic.csv'),\n",
    "        'x_path': 'onefile_x.csv',\n",
    "        'y_path': 'classification_y.csv'\n",
    "    },\n",
    "    'model_info': {\n",
    "        'model_dir': './example_result/',\n",
    "        'weight': 'weight_0.h5'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:434] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:464] -------1 th repeatition prediction start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:482] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Phylum', 'Order', 'Number', 'Genus', 'Family', 'Class']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |INFO|deepbiome.py:492] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:190] Prediction start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "1000/1000 [==============================] - 0s 48us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:195] Prediction end with time 0.05126452445983887!\n",
      "[root    |INFO|deepbiome.py:496] Compute time : 0.580172061920166\n",
      "[root    |INFO|deepbiome.py:497] 1 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:502] Total Computing Ended\n",
      "[root    |INFO|deepbiome.py:503] -----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "prediction = deepbiome.deepbiome_prediction(log, prediction_network_info, prediction_path_info,\n",
    "                                            num_classes = 1, number_of_fold=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 1000, 1)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prediction.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.69513166],\n",
       "       [0.695127  ],\n",
       "       [0.69513667],\n",
       "       [0.6951368 ],\n",
       "       [0.69513714],\n",
       "       [0.69514227],\n",
       "       [0.695139  ],\n",
       "       [0.69511455],\n",
       "       [0.69517064],\n",
       "       [0.6951335 ]], dtype=float32)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prediction[0,:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 7.2 Prediction with each fold weight\n",
    "\n",
    "If we want to predict the cross-validation outputs, we can use the option belows.\n",
    "\n",
    "The example below shows how to predict the 5-fold cross-validation outputs. (If we use the leave-one-out-cross-validation (LOOCV) for training, we can predict the LOOCV outputs by same way.)\n",
    "We set `idx_path` for using the index file `onefile_idx.csv` to predict only the test set for each fold."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "prediction_network_info = {\n",
    "    'architecture_info': {\n",
    "        'batch_normalization': 'False',\n",
    "        'drop_out': '0',\n",
    "        'weight_initial': 'glorot_uniform',\n",
    "        'weight_l1_penalty':'0.',\n",
    "        'weight_decay': 'phylogenetic_tree',\n",
    "    },\n",
    "    'model_info': {\n",
    "        'decay': '0.001',\n",
    "        'loss': 'binary_crossentropy',\n",
    "        'lr': '0.01',\n",
    "        'metrics': 'binary_accuracy, sensitivity, specificity, gmeasure, auc',\n",
    "        'network_class': 'DeepBiomeNetwork',\n",
    "        'normalizer': 'normalize_minmax',\n",
    "        'optimizer': 'adam',\n",
    "        'reader_class': 'MicroBiomeClassificationReader',\n",
    "        'taxa_selection_metrics': 'sensitivity, specificity, gmeasure, accuracy',\n",
    "    },\n",
    "    'test_info': {\n",
    "        'batch_size': 'None'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "prediction_path_info = {\n",
    "    'data_info': {\n",
    "        'data_path': resource_filename('deepbiome', 'tests/data'),\n",
    "        'idx_path': resource_filename('deepbiome', 'tests/data/onefile_idx.csv'),\n",
    "        'tree_info_path': resource_filename('deepbiome', 'tests/data/genus48_dic.csv'),\n",
    "        'x_path': 'onefile_x.csv',\n",
    "        'y_path': 'classification_y.csv'\n",
    "    },\n",
    "    'model_info': {\n",
    "        'model_dir': './example_result/',\n",
    "        'weight': 'weight.h5'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To predict the CV outputs from each fold, we set `change_weight_for_each_fold = True`. Also, we set `get_y=True` to get the paired output of each prediction too."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:434] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:464] -------1 th repeatition prediction start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:482] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Phylum', 'Order', 'Number', 'Genus', 'Family', 'Class']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |INFO|deepbiome.py:492] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:190] Prediction start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 209us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:195] Prediction end with time 0.04508495330810547!\n",
      "[root    |INFO|deepbiome.py:496] Compute time : 0.6741178035736084\n",
      "[root    |INFO|deepbiome.py:497] 1 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:464] -------2 th repeatition prediction start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:482] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Phylum', 'Order', 'Number', 'Genus', 'Family', 'Class']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_2\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |INFO|deepbiome.py:492] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:190] Prediction start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 329us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:195] Prediction end with time 0.06964421272277832!\n",
      "[root    |INFO|deepbiome.py:496] Compute time : 0.7043318748474121\n",
      "[root    |INFO|deepbiome.py:497] 2 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:464] -------3 th repeatition prediction start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:482] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Phylum', 'Order', 'Number', 'Genus', 'Family', 'Class']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_3\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |INFO|deepbiome.py:492] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:190] Prediction start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 419us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:195] Prediction end with time 0.0874626636505127!\n",
      "[root    |INFO|deepbiome.py:496] Compute time : 0.7645041942596436\n",
      "[root    |INFO|deepbiome.py:497] 3 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:464] -------4 th repeatition prediction start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:482] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Phylum', 'Order', 'Number', 'Genus', 'Family', 'Class']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_4\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |INFO|deepbiome.py:492] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:190] Prediction start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 320us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:195] Prediction end with time 0.06793451309204102!\n",
      "[root    |INFO|deepbiome.py:496] Compute time : 0.9180960655212402\n",
      "[root    |INFO|deepbiome.py:497] 4 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:464] -------5 th repeatition prediction start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:482] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Phylum', 'Order', 'Number', 'Genus', 'Family', 'Class']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_5\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |INFO|deepbiome.py:492] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:190] Prediction start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 483us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:195] Prediction end with time 0.10036897659301758!\n",
      "[root    |INFO|deepbiome.py:496] Compute time : 0.8149518966674805\n",
      "[root    |INFO|deepbiome.py:497] 5 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:502] Total Computing Ended\n",
      "[root    |INFO|deepbiome.py:503] -----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "prediction = deepbiome.deepbiome_prediction(log, prediction_network_info, prediction_path_info,\n",
    "                                            num_classes = 1, number_of_fold=None, \n",
    "                                            change_weight_for_each_fold = True, \n",
    "                                            get_y=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We gathered the outputs from each fold. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "prediction = np.vstack(prediction)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since we set the option `get_y=True`, the output has the shape of `(n_samples, 2, n_classes)`. With this options, we can get the CV predictions and the true output of each predictions.\n",
    "\n",
    "Now, we can calculate the CV performance by the CV predictions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|<ipython-input-39-edc88a58497e>:4] Shape of the predict function output: (1000, 2, 1)\n",
      "[root    |INFO|<ipython-input-39-edc88a58497e>:5] Shape of the prediction: (1000, 1)\n",
      "[root    |INFO|<ipython-input-39-edc88a58497e>:6] Shape of the true_output for each prediction: (1000, 1)\n"
     ]
    }
   ],
   "source": [
    "predict_output = prediction[:,0]\n",
    "true_output = prediction[:,1]\n",
    "\n",
    "log.info('Shape of the predict function output: %s' % str(prediction.shape))\n",
    "log.info('Shape of the prediction: %s' % str(predict_output.shape))\n",
    "log.info('Shape of the true_output for each prediction: %s' % str(true_output.shape))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|<ipython-input-40-ecaee2413087>:1] CV accuracy:  0.692\n"
     ]
    }
   ],
   "source": [
    "log.info('CV accuracy: %6.3f' % np.mean((predict_output >= 0.5) ==  true_output))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 8. Load trained weight matrix\n",
    "\n",
    "The `deepbiome_get_trained_weight` function convert the trained weight `*.h5` saved from the `deepbiome_train` to a list of pandas dataframe.\n",
    "In this exampe, the list has numpy array of weights from 6 layers. (`[genus to family, family to order, order to Class, class to phylum, phylum to output]`)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Phylum', 'Order', 'Number', 'Genus', 'Family', 'Class']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|<ipython-input-41-9505ee8dcaa8>:3] 5\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "weight_path = '%s/%s' % (path_info['model_info']['model_dir'], 'weight_0.h5')\n",
    "trained_weight_list = deepbiome.deepbiome_get_trained_weight(log, network_info, path_info, num_classes=1, weight_path=weight_path)\n",
    "log.info(len(trained_weight_list))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First weight between the `genus` and `family` layers has the shape of `(number of genus = 48, number of family = 40)`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|<ipython-input-42-c71fa46ab178>:1] (48, 40)\n"
     ]
    }
   ],
   "source": [
    "log.info(trained_weight_list[0].shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Streptococcaceae</th>\n",
       "      <th>Cellulomonadaceae</th>\n",
       "      <th>Veillonellaceae</th>\n",
       "      <th>Actinomycetaceae</th>\n",
       "      <th>Flavobacteriaceae</th>\n",
       "      <th>Prevotellaceae</th>\n",
       "      <th>Porphyromonadaceae</th>\n",
       "      <th>Clostridiales_Incertae_Sedis_XI</th>\n",
       "      <th>Fusobacteriaceae</th>\n",
       "      <th>Propionibacteriaceae</th>\n",
       "      <th>...</th>\n",
       "      <th>Methylobacteriaceae</th>\n",
       "      <th>OD1_genera_incertae_sedis</th>\n",
       "      <th>Microbacteriaceae</th>\n",
       "      <th>Sphingomonadaceae</th>\n",
       "      <th>Bacteroidaceae</th>\n",
       "      <th>Bdellovibrionaceae</th>\n",
       "      <th>Chloroplast</th>\n",
       "      <th>Rhodobacteraceae</th>\n",
       "      <th>Ruminococcaceae</th>\n",
       "      <th>Pseudonocardiaceae</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Streptococcus</th>\n",
       "      <td>0.172069</td>\n",
       "      <td>0.001547</td>\n",
       "      <td>-0.001363</td>\n",
       "      <td>-0.001889</td>\n",
       "      <td>-0.001235</td>\n",
       "      <td>-0.001667</td>\n",
       "      <td>0.000381</td>\n",
       "      <td>-0.002236</td>\n",
       "      <td>0.000170</td>\n",
       "      <td>0.002562</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000540</td>\n",
       "      <td>-0.002448</td>\n",
       "      <td>-0.000203</td>\n",
       "      <td>0.001289</td>\n",
       "      <td>-0.002530</td>\n",
       "      <td>0.000524</td>\n",
       "      <td>0.000924</td>\n",
       "      <td>-0.002043</td>\n",
       "      <td>0.001208</td>\n",
       "      <td>0.000545</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tropheryma</th>\n",
       "      <td>0.001975</td>\n",
       "      <td>1.508482</td>\n",
       "      <td>0.000867</td>\n",
       "      <td>0.000327</td>\n",
       "      <td>-0.002156</td>\n",
       "      <td>0.001601</td>\n",
       "      <td>-0.002328</td>\n",
       "      <td>0.001799</td>\n",
       "      <td>-0.002421</td>\n",
       "      <td>-0.002006</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000760</td>\n",
       "      <td>-0.001898</td>\n",
       "      <td>0.002793</td>\n",
       "      <td>0.000259</td>\n",
       "      <td>-0.000082</td>\n",
       "      <td>0.001349</td>\n",
       "      <td>-0.002028</td>\n",
       "      <td>-0.002116</td>\n",
       "      <td>0.000409</td>\n",
       "      <td>0.000610</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Veillonella</th>\n",
       "      <td>0.000016</td>\n",
       "      <td>0.002123</td>\n",
       "      <td>-0.157524</td>\n",
       "      <td>-0.000034</td>\n",
       "      <td>-0.000314</td>\n",
       "      <td>-0.000869</td>\n",
       "      <td>-0.002449</td>\n",
       "      <td>0.002380</td>\n",
       "      <td>0.001851</td>\n",
       "      <td>0.002472</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000673</td>\n",
       "      <td>-0.001799</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>0.002139</td>\n",
       "      <td>-0.001468</td>\n",
       "      <td>-0.002272</td>\n",
       "      <td>0.002246</td>\n",
       "      <td>0.000785</td>\n",
       "      <td>-0.000263</td>\n",
       "      <td>0.000371</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Actinomyces</th>\n",
       "      <td>0.001120</td>\n",
       "      <td>-0.000271</td>\n",
       "      <td>0.000148</td>\n",
       "      <td>-0.169643</td>\n",
       "      <td>0.001400</td>\n",
       "      <td>-0.002606</td>\n",
       "      <td>-0.001805</td>\n",
       "      <td>-0.002600</td>\n",
       "      <td>-0.000809</td>\n",
       "      <td>0.002858</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002788</td>\n",
       "      <td>-0.001348</td>\n",
       "      <td>0.002038</td>\n",
       "      <td>0.002258</td>\n",
       "      <td>-0.002250</td>\n",
       "      <td>-0.001056</td>\n",
       "      <td>-0.000326</td>\n",
       "      <td>-0.000788</td>\n",
       "      <td>0.000549</td>\n",
       "      <td>0.000686</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Flavobacterium</th>\n",
       "      <td>0.000021</td>\n",
       "      <td>-0.001279</td>\n",
       "      <td>0.002156</td>\n",
       "      <td>-0.002358</td>\n",
       "      <td>0.181565</td>\n",
       "      <td>-0.002381</td>\n",
       "      <td>0.001716</td>\n",
       "      <td>-0.001905</td>\n",
       "      <td>0.000042</td>\n",
       "      <td>-0.002186</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001378</td>\n",
       "      <td>-0.002262</td>\n",
       "      <td>-0.002328</td>\n",
       "      <td>-0.001729</td>\n",
       "      <td>-0.002154</td>\n",
       "      <td>0.000878</td>\n",
       "      <td>0.001580</td>\n",
       "      <td>-0.001860</td>\n",
       "      <td>-0.002057</td>\n",
       "      <td>0.000381</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Prevotella</th>\n",
       "      <td>-0.000916</td>\n",
       "      <td>-0.000469</td>\n",
       "      <td>-0.002501</td>\n",
       "      <td>0.001615</td>\n",
       "      <td>-0.002104</td>\n",
       "      <td>-0.179244</td>\n",
       "      <td>-0.001971</td>\n",
       "      <td>-0.000581</td>\n",
       "      <td>0.001110</td>\n",
       "      <td>0.000258</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001044</td>\n",
       "      <td>0.001957</td>\n",
       "      <td>0.000539</td>\n",
       "      <td>-0.001032</td>\n",
       "      <td>0.002485</td>\n",
       "      <td>-0.001125</td>\n",
       "      <td>0.001721</td>\n",
       "      <td>0.000599</td>\n",
       "      <td>-0.001606</td>\n",
       "      <td>-0.000493</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Porphyromonas</th>\n",
       "      <td>-0.002328</td>\n",
       "      <td>-0.001680</td>\n",
       "      <td>-0.002273</td>\n",
       "      <td>0.000209</td>\n",
       "      <td>-0.001859</td>\n",
       "      <td>0.002094</td>\n",
       "      <td>0.038327</td>\n",
       "      <td>-0.001532</td>\n",
       "      <td>-0.002493</td>\n",
       "      <td>-0.001946</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000047</td>\n",
       "      <td>-0.002158</td>\n",
       "      <td>0.000369</td>\n",
       "      <td>0.000244</td>\n",
       "      <td>0.000376</td>\n",
       "      <td>0.002346</td>\n",
       "      <td>-0.000305</td>\n",
       "      <td>0.000968</td>\n",
       "      <td>-0.001732</td>\n",
       "      <td>-0.001632</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Parvimonas</th>\n",
       "      <td>0.000318</td>\n",
       "      <td>0.000117</td>\n",
       "      <td>-0.001808</td>\n",
       "      <td>0.002271</td>\n",
       "      <td>0.002539</td>\n",
       "      <td>-0.002039</td>\n",
       "      <td>0.002351</td>\n",
       "      <td>-0.162585</td>\n",
       "      <td>-0.002213</td>\n",
       "      <td>0.002023</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000086</td>\n",
       "      <td>-0.001566</td>\n",
       "      <td>-0.002288</td>\n",
       "      <td>0.001179</td>\n",
       "      <td>-0.000899</td>\n",
       "      <td>-0.002293</td>\n",
       "      <td>0.001261</td>\n",
       "      <td>-0.002186</td>\n",
       "      <td>-0.001226</td>\n",
       "      <td>0.001894</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fusobacterium</th>\n",
       "      <td>0.001435</td>\n",
       "      <td>-0.001188</td>\n",
       "      <td>-0.000377</td>\n",
       "      <td>0.001905</td>\n",
       "      <td>-0.000753</td>\n",
       "      <td>-0.001373</td>\n",
       "      <td>0.002199</td>\n",
       "      <td>0.000419</td>\n",
       "      <td>0.262781</td>\n",
       "      <td>-0.001575</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001689</td>\n",
       "      <td>0.000392</td>\n",
       "      <td>0.000478</td>\n",
       "      <td>0.000784</td>\n",
       "      <td>-0.001771</td>\n",
       "      <td>-0.002297</td>\n",
       "      <td>0.000193</td>\n",
       "      <td>0.002003</td>\n",
       "      <td>0.000826</td>\n",
       "      <td>-0.002314</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Propionibacterium</th>\n",
       "      <td>-0.002266</td>\n",
       "      <td>-0.001085</td>\n",
       "      <td>0.001049</td>\n",
       "      <td>-0.000446</td>\n",
       "      <td>-0.002043</td>\n",
       "      <td>0.001206</td>\n",
       "      <td>0.002456</td>\n",
       "      <td>-0.002075</td>\n",
       "      <td>-0.000741</td>\n",
       "      <td>-0.683013</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000145</td>\n",
       "      <td>0.001723</td>\n",
       "      <td>0.001494</td>\n",
       "      <td>0.000325</td>\n",
       "      <td>-0.001156</td>\n",
       "      <td>0.002516</td>\n",
       "      <td>-0.002552</td>\n",
       "      <td>-0.002047</td>\n",
       "      <td>-0.000838</td>\n",
       "      <td>-0.003063</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gemella</th>\n",
       "      <td>0.001326</td>\n",
       "      <td>-0.001609</td>\n",
       "      <td>0.001861</td>\n",
       "      <td>-0.001477</td>\n",
       "      <td>-0.001928</td>\n",
       "      <td>0.001307</td>\n",
       "      <td>0.000671</td>\n",
       "      <td>-0.000597</td>\n",
       "      <td>-0.001641</td>\n",
       "      <td>0.001252</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.002018</td>\n",
       "      <td>-0.001232</td>\n",
       "      <td>0.001649</td>\n",
       "      <td>-0.000901</td>\n",
       "      <td>-0.000825</td>\n",
       "      <td>-0.002104</td>\n",
       "      <td>0.000780</td>\n",
       "      <td>0.001071</td>\n",
       "      <td>-0.001807</td>\n",
       "      <td>-0.000364</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rothia</th>\n",
       "      <td>0.001120</td>\n",
       "      <td>-0.002610</td>\n",
       "      <td>-0.001817</td>\n",
       "      <td>-0.002249</td>\n",
       "      <td>0.001343</td>\n",
       "      <td>-0.001876</td>\n",
       "      <td>0.001133</td>\n",
       "      <td>-0.000717</td>\n",
       "      <td>-0.000578</td>\n",
       "      <td>-0.001362</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000578</td>\n",
       "      <td>-0.001676</td>\n",
       "      <td>0.001630</td>\n",
       "      <td>0.000188</td>\n",
       "      <td>0.002298</td>\n",
       "      <td>-0.000886</td>\n",
       "      <td>-0.001446</td>\n",
       "      <td>-0.002513</td>\n",
       "      <td>-0.000140</td>\n",
       "      <td>-0.001072</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Granulicatella</th>\n",
       "      <td>0.001908</td>\n",
       "      <td>-0.002067</td>\n",
       "      <td>0.001259</td>\n",
       "      <td>0.002403</td>\n",
       "      <td>-0.001058</td>\n",
       "      <td>0.002363</td>\n",
       "      <td>-0.002037</td>\n",
       "      <td>-0.001676</td>\n",
       "      <td>0.002382</td>\n",
       "      <td>0.000679</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001946</td>\n",
       "      <td>-0.000603</td>\n",
       "      <td>0.000398</td>\n",
       "      <td>-0.002361</td>\n",
       "      <td>0.000583</td>\n",
       "      <td>0.000766</td>\n",
       "      <td>0.000452</td>\n",
       "      <td>-0.000335</td>\n",
       "      <td>0.001551</td>\n",
       "      <td>-0.001360</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Neisseria</th>\n",
       "      <td>-0.000810</td>\n",
       "      <td>-0.002517</td>\n",
       "      <td>0.002218</td>\n",
       "      <td>0.001312</td>\n",
       "      <td>0.000769</td>\n",
       "      <td>0.000216</td>\n",
       "      <td>-0.001741</td>\n",
       "      <td>0.001989</td>\n",
       "      <td>0.001045</td>\n",
       "      <td>-0.002455</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000725</td>\n",
       "      <td>0.002365</td>\n",
       "      <td>0.001126</td>\n",
       "      <td>-0.000401</td>\n",
       "      <td>0.002192</td>\n",
       "      <td>-0.002414</td>\n",
       "      <td>-0.002106</td>\n",
       "      <td>0.001391</td>\n",
       "      <td>0.001602</td>\n",
       "      <td>-0.002419</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Lactobacillus</th>\n",
       "      <td>0.000956</td>\n",
       "      <td>0.000374</td>\n",
       "      <td>-0.001299</td>\n",
       "      <td>-0.001025</td>\n",
       "      <td>-0.000321</td>\n",
       "      <td>0.001471</td>\n",
       "      <td>-0.001220</td>\n",
       "      <td>-0.001565</td>\n",
       "      <td>-0.000946</td>\n",
       "      <td>-0.000366</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002681</td>\n",
       "      <td>0.001725</td>\n",
       "      <td>0.000297</td>\n",
       "      <td>-0.001492</td>\n",
       "      <td>-0.002581</td>\n",
       "      <td>-0.000860</td>\n",
       "      <td>0.000654</td>\n",
       "      <td>-0.002311</td>\n",
       "      <td>0.002377</td>\n",
       "      <td>-0.002220</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Megasphaera</th>\n",
       "      <td>0.000599</td>\n",
       "      <td>-0.000697</td>\n",
       "      <td>-0.055496</td>\n",
       "      <td>0.001718</td>\n",
       "      <td>-0.000735</td>\n",
       "      <td>0.000871</td>\n",
       "      <td>0.001405</td>\n",
       "      <td>0.001533</td>\n",
       "      <td>0.001118</td>\n",
       "      <td>0.001594</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.002375</td>\n",
       "      <td>-0.002042</td>\n",
       "      <td>0.001706</td>\n",
       "      <td>0.002411</td>\n",
       "      <td>-0.001062</td>\n",
       "      <td>-0.001466</td>\n",
       "      <td>-0.000395</td>\n",
       "      <td>0.001667</td>\n",
       "      <td>0.002545</td>\n",
       "      <td>-0.000571</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Catonella</th>\n",
       "      <td>0.000840</td>\n",
       "      <td>-0.001084</td>\n",
       "      <td>-0.002446</td>\n",
       "      <td>-0.001503</td>\n",
       "      <td>0.000046</td>\n",
       "      <td>0.000918</td>\n",
       "      <td>-0.002159</td>\n",
       "      <td>-0.001001</td>\n",
       "      <td>-0.001226</td>\n",
       "      <td>-0.002277</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001730</td>\n",
       "      <td>-0.001517</td>\n",
       "      <td>0.002343</td>\n",
       "      <td>-0.000523</td>\n",
       "      <td>-0.000426</td>\n",
       "      <td>-0.001950</td>\n",
       "      <td>0.001518</td>\n",
       "      <td>-0.001254</td>\n",
       "      <td>0.001667</td>\n",
       "      <td>0.002350</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Atopobium</th>\n",
       "      <td>-0.000865</td>\n",
       "      <td>-0.002826</td>\n",
       "      <td>0.001887</td>\n",
       "      <td>-0.001605</td>\n",
       "      <td>-0.000564</td>\n",
       "      <td>-0.000248</td>\n",
       "      <td>-0.002258</td>\n",
       "      <td>0.002226</td>\n",
       "      <td>-0.000621</td>\n",
       "      <td>-0.000057</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000654</td>\n",
       "      <td>0.000545</td>\n",
       "      <td>0.000709</td>\n",
       "      <td>0.001510</td>\n",
       "      <td>0.001505</td>\n",
       "      <td>0.001868</td>\n",
       "      <td>-0.001021</td>\n",
       "      <td>0.002028</td>\n",
       "      <td>0.000620</td>\n",
       "      <td>-0.000274</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Campylobacter</th>\n",
       "      <td>-0.001555</td>\n",
       "      <td>0.001791</td>\n",
       "      <td>0.001547</td>\n",
       "      <td>-0.000667</td>\n",
       "      <td>-0.002316</td>\n",
       "      <td>0.002267</td>\n",
       "      <td>0.002134</td>\n",
       "      <td>0.002511</td>\n",
       "      <td>-0.001003</td>\n",
       "      <td>-0.000825</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001752</td>\n",
       "      <td>-0.000800</td>\n",
       "      <td>0.001694</td>\n",
       "      <td>0.001717</td>\n",
       "      <td>0.001028</td>\n",
       "      <td>0.000048</td>\n",
       "      <td>0.000983</td>\n",
       "      <td>0.001120</td>\n",
       "      <td>0.001374</td>\n",
       "      <td>0.002420</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Capnocytophaga</th>\n",
       "      <td>0.001616</td>\n",
       "      <td>-0.002372</td>\n",
       "      <td>0.000749</td>\n",
       "      <td>0.002299</td>\n",
       "      <td>-0.272453</td>\n",
       "      <td>-0.002037</td>\n",
       "      <td>0.001631</td>\n",
       "      <td>-0.000693</td>\n",
       "      <td>-0.001428</td>\n",
       "      <td>0.002677</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002381</td>\n",
       "      <td>-0.002101</td>\n",
       "      <td>-0.000209</td>\n",
       "      <td>0.000329</td>\n",
       "      <td>-0.000968</td>\n",
       "      <td>0.001091</td>\n",
       "      <td>0.000670</td>\n",
       "      <td>0.002441</td>\n",
       "      <td>-0.000824</td>\n",
       "      <td>-0.001413</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Solobacterium</th>\n",
       "      <td>0.002452</td>\n",
       "      <td>-0.000480</td>\n",
       "      <td>-0.001819</td>\n",
       "      <td>0.001864</td>\n",
       "      <td>0.001017</td>\n",
       "      <td>0.000301</td>\n",
       "      <td>0.000367</td>\n",
       "      <td>0.001068</td>\n",
       "      <td>-0.000410</td>\n",
       "      <td>0.000108</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001741</td>\n",
       "      <td>-0.001763</td>\n",
       "      <td>-0.000534</td>\n",
       "      <td>0.000987</td>\n",
       "      <td>-0.002072</td>\n",
       "      <td>-0.000548</td>\n",
       "      <td>0.001091</td>\n",
       "      <td>0.002025</td>\n",
       "      <td>0.001542</td>\n",
       "      <td>-0.001888</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Moryella</th>\n",
       "      <td>0.001148</td>\n",
       "      <td>0.002715</td>\n",
       "      <td>-0.002401</td>\n",
       "      <td>-0.001213</td>\n",
       "      <td>0.001457</td>\n",
       "      <td>0.002475</td>\n",
       "      <td>0.002105</td>\n",
       "      <td>-0.002470</td>\n",
       "      <td>0.000691</td>\n",
       "      <td>-0.000007</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002552</td>\n",
       "      <td>0.000911</td>\n",
       "      <td>-0.000878</td>\n",
       "      <td>0.001431</td>\n",
       "      <td>0.001453</td>\n",
       "      <td>-0.000127</td>\n",
       "      <td>-0.002359</td>\n",
       "      <td>0.002311</td>\n",
       "      <td>0.001778</td>\n",
       "      <td>0.001550</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TM7_genera_incertae_sedis</th>\n",
       "      <td>-0.000785</td>\n",
       "      <td>0.001202</td>\n",
       "      <td>0.000469</td>\n",
       "      <td>0.000826</td>\n",
       "      <td>-0.001454</td>\n",
       "      <td>0.001543</td>\n",
       "      <td>-0.000919</td>\n",
       "      <td>-0.001185</td>\n",
       "      <td>0.000452</td>\n",
       "      <td>-0.001365</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001471</td>\n",
       "      <td>0.001858</td>\n",
       "      <td>-0.001660</td>\n",
       "      <td>0.001560</td>\n",
       "      <td>0.002626</td>\n",
       "      <td>-0.002462</td>\n",
       "      <td>0.000535</td>\n",
       "      <td>-0.002539</td>\n",
       "      <td>-0.001593</td>\n",
       "      <td>-0.001387</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Staphylococcus</th>\n",
       "      <td>-0.001824</td>\n",
       "      <td>0.000841</td>\n",
       "      <td>-0.002507</td>\n",
       "      <td>0.001223</td>\n",
       "      <td>-0.000626</td>\n",
       "      <td>0.002194</td>\n",
       "      <td>0.001467</td>\n",
       "      <td>-0.000590</td>\n",
       "      <td>0.001482</td>\n",
       "      <td>0.000891</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000203</td>\n",
       "      <td>0.001375</td>\n",
       "      <td>0.002342</td>\n",
       "      <td>-0.000359</td>\n",
       "      <td>-0.001748</td>\n",
       "      <td>-0.002063</td>\n",
       "      <td>-0.000535</td>\n",
       "      <td>-0.000173</td>\n",
       "      <td>-0.001967</td>\n",
       "      <td>-0.000722</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Filifactor</th>\n",
       "      <td>-0.001558</td>\n",
       "      <td>-0.002011</td>\n",
       "      <td>-0.002589</td>\n",
       "      <td>-0.001389</td>\n",
       "      <td>-0.002563</td>\n",
       "      <td>-0.002100</td>\n",
       "      <td>-0.001334</td>\n",
       "      <td>-0.001386</td>\n",
       "      <td>-0.000043</td>\n",
       "      <td>-0.001025</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002063</td>\n",
       "      <td>0.001347</td>\n",
       "      <td>-0.001411</td>\n",
       "      <td>-0.000011</td>\n",
       "      <td>-0.002223</td>\n",
       "      <td>-0.000443</td>\n",
       "      <td>0.001076</td>\n",
       "      <td>0.001971</td>\n",
       "      <td>0.000907</td>\n",
       "      <td>0.002763</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Oribacterium</th>\n",
       "      <td>-0.002307</td>\n",
       "      <td>0.001531</td>\n",
       "      <td>0.002270</td>\n",
       "      <td>-0.001278</td>\n",
       "      <td>-0.000012</td>\n",
       "      <td>-0.000493</td>\n",
       "      <td>-0.001392</td>\n",
       "      <td>-0.001573</td>\n",
       "      <td>0.001812</td>\n",
       "      <td>0.000720</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001947</td>\n",
       "      <td>0.000726</td>\n",
       "      <td>0.002445</td>\n",
       "      <td>-0.000490</td>\n",
       "      <td>0.000159</td>\n",
       "      <td>0.000600</td>\n",
       "      <td>-0.001332</td>\n",
       "      <td>0.002312</td>\n",
       "      <td>-0.001652</td>\n",
       "      <td>0.000014</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Burkholderia</th>\n",
       "      <td>0.000873</td>\n",
       "      <td>-0.000936</td>\n",
       "      <td>-0.000207</td>\n",
       "      <td>-0.001750</td>\n",
       "      <td>0.000898</td>\n",
       "      <td>-0.002229</td>\n",
       "      <td>0.000504</td>\n",
       "      <td>0.001750</td>\n",
       "      <td>0.001933</td>\n",
       "      <td>-0.002199</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002339</td>\n",
       "      <td>-0.000952</td>\n",
       "      <td>0.001364</td>\n",
       "      <td>0.000840</td>\n",
       "      <td>-0.000901</td>\n",
       "      <td>-0.000859</td>\n",
       "      <td>0.001767</td>\n",
       "      <td>0.000365</td>\n",
       "      <td>0.002373</td>\n",
       "      <td>-0.000837</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sneathia</th>\n",
       "      <td>-0.001337</td>\n",
       "      <td>-0.000452</td>\n",
       "      <td>-0.001015</td>\n",
       "      <td>-0.001839</td>\n",
       "      <td>0.001515</td>\n",
       "      <td>0.000653</td>\n",
       "      <td>-0.001941</td>\n",
       "      <td>0.000435</td>\n",
       "      <td>0.001620</td>\n",
       "      <td>0.002551</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001635</td>\n",
       "      <td>-0.000466</td>\n",
       "      <td>-0.000593</td>\n",
       "      <td>0.002319</td>\n",
       "      <td>-0.002169</td>\n",
       "      <td>-0.002469</td>\n",
       "      <td>0.000541</td>\n",
       "      <td>-0.001623</td>\n",
       "      <td>-0.002050</td>\n",
       "      <td>-0.002606</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Treponema</th>\n",
       "      <td>0.001085</td>\n",
       "      <td>-0.001350</td>\n",
       "      <td>-0.001990</td>\n",
       "      <td>0.001207</td>\n",
       "      <td>0.000694</td>\n",
       "      <td>0.000844</td>\n",
       "      <td>0.000435</td>\n",
       "      <td>-0.001667</td>\n",
       "      <td>-0.001897</td>\n",
       "      <td>-0.001011</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000598</td>\n",
       "      <td>0.001890</td>\n",
       "      <td>-0.001800</td>\n",
       "      <td>0.001014</td>\n",
       "      <td>0.000380</td>\n",
       "      <td>-0.002431</td>\n",
       "      <td>0.000744</td>\n",
       "      <td>0.001526</td>\n",
       "      <td>0.000912</td>\n",
       "      <td>-0.000175</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Moraxella</th>\n",
       "      <td>-0.001865</td>\n",
       "      <td>-0.000928</td>\n",
       "      <td>0.000939</td>\n",
       "      <td>-0.000168</td>\n",
       "      <td>-0.000811</td>\n",
       "      <td>0.001517</td>\n",
       "      <td>-0.000884</td>\n",
       "      <td>0.001348</td>\n",
       "      <td>0.002433</td>\n",
       "      <td>0.001871</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.002153</td>\n",
       "      <td>-0.000273</td>\n",
       "      <td>0.000248</td>\n",
       "      <td>-0.001785</td>\n",
       "      <td>0.000184</td>\n",
       "      <td>-0.001325</td>\n",
       "      <td>0.002098</td>\n",
       "      <td>-0.002123</td>\n",
       "      <td>0.000133</td>\n",
       "      <td>-0.001544</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Haemophilus</th>\n",
       "      <td>-0.001470</td>\n",
       "      <td>0.002014</td>\n",
       "      <td>-0.000379</td>\n",
       "      <td>0.000527</td>\n",
       "      <td>0.001708</td>\n",
       "      <td>-0.002371</td>\n",
       "      <td>-0.001546</td>\n",
       "      <td>-0.000687</td>\n",
       "      <td>-0.000935</td>\n",
       "      <td>0.001307</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000080</td>\n",
       "      <td>-0.001281</td>\n",
       "      <td>0.000516</td>\n",
       "      <td>-0.001845</td>\n",
       "      <td>0.000354</td>\n",
       "      <td>0.000885</td>\n",
       "      <td>0.002073</td>\n",
       "      <td>0.001542</td>\n",
       "      <td>-0.001350</td>\n",
       "      <td>-0.000804</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Selenomonas</th>\n",
       "      <td>0.000478</td>\n",
       "      <td>-0.001833</td>\n",
       "      <td>-0.064216</td>\n",
       "      <td>-0.001712</td>\n",
       "      <td>0.000021</td>\n",
       "      <td>-0.001049</td>\n",
       "      <td>0.001596</td>\n",
       "      <td>-0.000507</td>\n",
       "      <td>0.001324</td>\n",
       "      <td>-0.000484</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000401</td>\n",
       "      <td>0.000022</td>\n",
       "      <td>-0.001781</td>\n",
       "      <td>-0.001103</td>\n",
       "      <td>-0.001669</td>\n",
       "      <td>-0.002094</td>\n",
       "      <td>0.001018</td>\n",
       "      <td>0.001281</td>\n",
       "      <td>-0.002479</td>\n",
       "      <td>0.000518</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Corynebacterium</th>\n",
       "      <td>0.000386</td>\n",
       "      <td>-0.002319</td>\n",
       "      <td>0.001922</td>\n",
       "      <td>-0.001714</td>\n",
       "      <td>0.001298</td>\n",
       "      <td>-0.000353</td>\n",
       "      <td>0.002541</td>\n",
       "      <td>0.001527</td>\n",
       "      <td>-0.002091</td>\n",
       "      <td>-0.000316</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002215</td>\n",
       "      <td>0.002465</td>\n",
       "      <td>-0.001383</td>\n",
       "      <td>-0.000446</td>\n",
       "      <td>0.001440</td>\n",
       "      <td>0.002378</td>\n",
       "      <td>0.001616</td>\n",
       "      <td>0.002192</td>\n",
       "      <td>-0.002152</td>\n",
       "      <td>-0.000178</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rhizobium</th>\n",
       "      <td>-0.002413</td>\n",
       "      <td>-0.002552</td>\n",
       "      <td>0.001876</td>\n",
       "      <td>0.001265</td>\n",
       "      <td>0.000501</td>\n",
       "      <td>-0.000829</td>\n",
       "      <td>-0.002096</td>\n",
       "      <td>-0.001774</td>\n",
       "      <td>-0.001977</td>\n",
       "      <td>-0.000098</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000134</td>\n",
       "      <td>0.002508</td>\n",
       "      <td>-0.001670</td>\n",
       "      <td>-0.000537</td>\n",
       "      <td>-0.001279</td>\n",
       "      <td>-0.002455</td>\n",
       "      <td>-0.001460</td>\n",
       "      <td>0.000205</td>\n",
       "      <td>0.001540</td>\n",
       "      <td>0.002288</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bradyrhizobium</th>\n",
       "      <td>-0.002607</td>\n",
       "      <td>-0.002434</td>\n",
       "      <td>0.002339</td>\n",
       "      <td>-0.000335</td>\n",
       "      <td>0.000976</td>\n",
       "      <td>-0.001624</td>\n",
       "      <td>-0.000804</td>\n",
       "      <td>-0.000382</td>\n",
       "      <td>-0.001527</td>\n",
       "      <td>0.000408</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001796</td>\n",
       "      <td>-0.000839</td>\n",
       "      <td>0.001735</td>\n",
       "      <td>0.001205</td>\n",
       "      <td>-0.002328</td>\n",
       "      <td>-0.001207</td>\n",
       "      <td>0.002366</td>\n",
       "      <td>-0.001886</td>\n",
       "      <td>-0.000484</td>\n",
       "      <td>0.001684</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Methylobacterium</th>\n",
       "      <td>-0.000936</td>\n",
       "      <td>-0.001997</td>\n",
       "      <td>-0.002365</td>\n",
       "      <td>-0.000828</td>\n",
       "      <td>-0.001872</td>\n",
       "      <td>0.000913</td>\n",
       "      <td>0.000601</td>\n",
       "      <td>-0.001309</td>\n",
       "      <td>-0.001497</td>\n",
       "      <td>0.000149</td>\n",
       "      <td>...</td>\n",
       "      <td>0.081024</td>\n",
       "      <td>-0.000681</td>\n",
       "      <td>-0.000530</td>\n",
       "      <td>-0.000735</td>\n",
       "      <td>-0.000020</td>\n",
       "      <td>-0.002539</td>\n",
       "      <td>0.000387</td>\n",
       "      <td>-0.001349</td>\n",
       "      <td>-0.002513</td>\n",
       "      <td>0.000761</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OD1_genera_incertae_sedis</th>\n",
       "      <td>-0.001098</td>\n",
       "      <td>-0.000452</td>\n",
       "      <td>-0.002608</td>\n",
       "      <td>-0.000614</td>\n",
       "      <td>0.002431</td>\n",
       "      <td>0.001379</td>\n",
       "      <td>-0.001822</td>\n",
       "      <td>-0.001348</td>\n",
       "      <td>-0.001125</td>\n",
       "      <td>-0.001591</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001487</td>\n",
       "      <td>0.150908</td>\n",
       "      <td>-0.000603</td>\n",
       "      <td>0.000188</td>\n",
       "      <td>-0.000352</td>\n",
       "      <td>0.000837</td>\n",
       "      <td>-0.001986</td>\n",
       "      <td>-0.002377</td>\n",
       "      <td>0.000134</td>\n",
       "      <td>-0.000963</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Finegoldia</th>\n",
       "      <td>0.001706</td>\n",
       "      <td>-0.001954</td>\n",
       "      <td>0.001151</td>\n",
       "      <td>-0.002249</td>\n",
       "      <td>-0.000086</td>\n",
       "      <td>0.000054</td>\n",
       "      <td>0.002547</td>\n",
       "      <td>-0.118456</td>\n",
       "      <td>-0.000814</td>\n",
       "      <td>0.000581</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001559</td>\n",
       "      <td>0.002556</td>\n",
       "      <td>0.002492</td>\n",
       "      <td>-0.000689</td>\n",
       "      <td>-0.000563</td>\n",
       "      <td>0.001099</td>\n",
       "      <td>0.002511</td>\n",
       "      <td>-0.001572</td>\n",
       "      <td>0.001760</td>\n",
       "      <td>0.000836</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Microbacterium</th>\n",
       "      <td>0.002262</td>\n",
       "      <td>0.001097</td>\n",
       "      <td>0.002138</td>\n",
       "      <td>0.000901</td>\n",
       "      <td>-0.002405</td>\n",
       "      <td>0.000769</td>\n",
       "      <td>-0.001253</td>\n",
       "      <td>-0.000366</td>\n",
       "      <td>-0.001286</td>\n",
       "      <td>-0.001476</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.002190</td>\n",
       "      <td>-0.000421</td>\n",
       "      <td>-0.024598</td>\n",
       "      <td>-0.000209</td>\n",
       "      <td>-0.001017</td>\n",
       "      <td>-0.002093</td>\n",
       "      <td>-0.000664</td>\n",
       "      <td>0.001311</td>\n",
       "      <td>0.002114</td>\n",
       "      <td>0.000996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sphingomonas</th>\n",
       "      <td>0.000959</td>\n",
       "      <td>-0.002414</td>\n",
       "      <td>0.001018</td>\n",
       "      <td>0.001740</td>\n",
       "      <td>0.000139</td>\n",
       "      <td>0.002088</td>\n",
       "      <td>0.000960</td>\n",
       "      <td>0.001319</td>\n",
       "      <td>-0.000439</td>\n",
       "      <td>-0.000101</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001780</td>\n",
       "      <td>0.001246</td>\n",
       "      <td>0.000163</td>\n",
       "      <td>0.197294</td>\n",
       "      <td>-0.000916</td>\n",
       "      <td>-0.000567</td>\n",
       "      <td>-0.000943</td>\n",
       "      <td>-0.000521</td>\n",
       "      <td>-0.001450</td>\n",
       "      <td>-0.000694</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chryseobacterium</th>\n",
       "      <td>-0.000357</td>\n",
       "      <td>-0.000429</td>\n",
       "      <td>0.001007</td>\n",
       "      <td>-0.000133</td>\n",
       "      <td>0.089018</td>\n",
       "      <td>0.000061</td>\n",
       "      <td>0.001763</td>\n",
       "      <td>0.002422</td>\n",
       "      <td>0.002208</td>\n",
       "      <td>0.000694</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000854</td>\n",
       "      <td>-0.001051</td>\n",
       "      <td>0.001163</td>\n",
       "      <td>0.002329</td>\n",
       "      <td>-0.002581</td>\n",
       "      <td>0.000907</td>\n",
       "      <td>0.000289</td>\n",
       "      <td>0.000739</td>\n",
       "      <td>-0.000055</td>\n",
       "      <td>-0.000136</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bacteroides</th>\n",
       "      <td>-0.000235</td>\n",
       "      <td>0.001419</td>\n",
       "      <td>-0.002191</td>\n",
       "      <td>0.001079</td>\n",
       "      <td>0.001758</td>\n",
       "      <td>0.000348</td>\n",
       "      <td>-0.002259</td>\n",
       "      <td>0.002392</td>\n",
       "      <td>-0.001697</td>\n",
       "      <td>0.002065</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001145</td>\n",
       "      <td>-0.000819</td>\n",
       "      <td>-0.001688</td>\n",
       "      <td>-0.001548</td>\n",
       "      <td>0.227973</td>\n",
       "      <td>-0.002053</td>\n",
       "      <td>0.000735</td>\n",
       "      <td>-0.001778</td>\n",
       "      <td>-0.001107</td>\n",
       "      <td>-0.001962</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bdellovibrio</th>\n",
       "      <td>-0.002284</td>\n",
       "      <td>0.000185</td>\n",
       "      <td>0.001391</td>\n",
       "      <td>-0.000568</td>\n",
       "      <td>0.001450</td>\n",
       "      <td>0.001296</td>\n",
       "      <td>-0.000349</td>\n",
       "      <td>0.002242</td>\n",
       "      <td>-0.000061</td>\n",
       "      <td>0.000976</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000533</td>\n",
       "      <td>-0.000302</td>\n",
       "      <td>-0.000293</td>\n",
       "      <td>-0.000424</td>\n",
       "      <td>0.002566</td>\n",
       "      <td>-0.060480</td>\n",
       "      <td>-0.000256</td>\n",
       "      <td>0.002379</td>\n",
       "      <td>-0.000584</td>\n",
       "      <td>0.002012</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Streptophyta</th>\n",
       "      <td>-0.001093</td>\n",
       "      <td>0.000596</td>\n",
       "      <td>0.002145</td>\n",
       "      <td>0.002112</td>\n",
       "      <td>0.000834</td>\n",
       "      <td>0.002447</td>\n",
       "      <td>-0.001342</td>\n",
       "      <td>0.001398</td>\n",
       "      <td>0.001105</td>\n",
       "      <td>-0.002357</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000952</td>\n",
       "      <td>0.000977</td>\n",
       "      <td>0.000266</td>\n",
       "      <td>0.002135</td>\n",
       "      <td>-0.001397</td>\n",
       "      <td>0.000858</td>\n",
       "      <td>0.178340</td>\n",
       "      <td>0.000262</td>\n",
       "      <td>-0.002492</td>\n",
       "      <td>0.001966</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Lachnospiracea_incertae_sedis</th>\n",
       "      <td>-0.001125</td>\n",
       "      <td>-0.001970</td>\n",
       "      <td>-0.002479</td>\n",
       "      <td>-0.002238</td>\n",
       "      <td>0.000361</td>\n",
       "      <td>-0.001455</td>\n",
       "      <td>0.001548</td>\n",
       "      <td>0.001189</td>\n",
       "      <td>-0.001199</td>\n",
       "      <td>0.000873</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002167</td>\n",
       "      <td>-0.001816</td>\n",
       "      <td>0.000076</td>\n",
       "      <td>0.001439</td>\n",
       "      <td>0.000374</td>\n",
       "      <td>0.000721</td>\n",
       "      <td>-0.000182</td>\n",
       "      <td>-0.000554</td>\n",
       "      <td>-0.002449</td>\n",
       "      <td>-0.002402</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Paracoccus</th>\n",
       "      <td>0.000275</td>\n",
       "      <td>0.001846</td>\n",
       "      <td>-0.002086</td>\n",
       "      <td>0.002374</td>\n",
       "      <td>-0.001512</td>\n",
       "      <td>-0.000066</td>\n",
       "      <td>-0.000776</td>\n",
       "      <td>-0.001120</td>\n",
       "      <td>0.000686</td>\n",
       "      <td>-0.001377</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000794</td>\n",
       "      <td>0.002275</td>\n",
       "      <td>0.002521</td>\n",
       "      <td>0.002349</td>\n",
       "      <td>-0.002237</td>\n",
       "      <td>-0.000530</td>\n",
       "      <td>0.000985</td>\n",
       "      <td>-0.098313</td>\n",
       "      <td>-0.002534</td>\n",
       "      <td>-0.000312</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fastidiosipila</th>\n",
       "      <td>0.001725</td>\n",
       "      <td>-0.000284</td>\n",
       "      <td>-0.000692</td>\n",
       "      <td>-0.002321</td>\n",
       "      <td>-0.000459</td>\n",
       "      <td>0.001245</td>\n",
       "      <td>-0.000199</td>\n",
       "      <td>0.001249</td>\n",
       "      <td>-0.001881</td>\n",
       "      <td>0.002438</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001603</td>\n",
       "      <td>0.002335</td>\n",
       "      <td>0.000328</td>\n",
       "      <td>0.000527</td>\n",
       "      <td>0.000554</td>\n",
       "      <td>0.001362</td>\n",
       "      <td>-0.001950</td>\n",
       "      <td>0.000531</td>\n",
       "      <td>0.073993</td>\n",
       "      <td>0.000823</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pseudonocardia</th>\n",
       "      <td>-0.001075</td>\n",
       "      <td>-0.001802</td>\n",
       "      <td>-0.002417</td>\n",
       "      <td>0.000027</td>\n",
       "      <td>0.001480</td>\n",
       "      <td>-0.001138</td>\n",
       "      <td>-0.001850</td>\n",
       "      <td>-0.002416</td>\n",
       "      <td>0.001616</td>\n",
       "      <td>0.000058</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001214</td>\n",
       "      <td>0.002508</td>\n",
       "      <td>0.001006</td>\n",
       "      <td>0.001839</td>\n",
       "      <td>0.001985</td>\n",
       "      <td>0.001257</td>\n",
       "      <td>0.000271</td>\n",
       "      <td>0.001782</td>\n",
       "      <td>0.000232</td>\n",
       "      <td>0.099895</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>48 rows × 40 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                               Streptococcaceae  Cellulomonadaceae  \\\n",
       "Streptococcus                          0.172069           0.001547   \n",
       "Tropheryma                             0.001975           1.508482   \n",
       "Veillonella                            0.000016           0.002123   \n",
       "Actinomyces                            0.001120          -0.000271   \n",
       "Flavobacterium                         0.000021          -0.001279   \n",
       "Prevotella                            -0.000916          -0.000469   \n",
       "Porphyromonas                         -0.002328          -0.001680   \n",
       "Parvimonas                             0.000318           0.000117   \n",
       "Fusobacterium                          0.001435          -0.001188   \n",
       "Propionibacterium                     -0.002266          -0.001085   \n",
       "Gemella                                0.001326          -0.001609   \n",
       "Rothia                                 0.001120          -0.002610   \n",
       "Granulicatella                         0.001908          -0.002067   \n",
       "Neisseria                             -0.000810          -0.002517   \n",
       "Lactobacillus                          0.000956           0.000374   \n",
       "Megasphaera                            0.000599          -0.000697   \n",
       "Catonella                              0.000840          -0.001084   \n",
       "Atopobium                             -0.000865          -0.002826   \n",
       "Campylobacter                         -0.001555           0.001791   \n",
       "Capnocytophaga                         0.001616          -0.002372   \n",
       "Solobacterium                          0.002452          -0.000480   \n",
       "Moryella                               0.001148           0.002715   \n",
       "TM7_genera_incertae_sedis             -0.000785           0.001202   \n",
       "Staphylococcus                        -0.001824           0.000841   \n",
       "Filifactor                            -0.001558          -0.002011   \n",
       "Oribacterium                          -0.002307           0.001531   \n",
       "Burkholderia                           0.000873          -0.000936   \n",
       "Sneathia                              -0.001337          -0.000452   \n",
       "Treponema                              0.001085          -0.001350   \n",
       "Moraxella                             -0.001865          -0.000928   \n",
       "Haemophilus                           -0.001470           0.002014   \n",
       "Selenomonas                            0.000478          -0.001833   \n",
       "Corynebacterium                        0.000386          -0.002319   \n",
       "Rhizobium                             -0.002413          -0.002552   \n",
       "Bradyrhizobium                        -0.002607          -0.002434   \n",
       "Methylobacterium                      -0.000936          -0.001997   \n",
       "OD1_genera_incertae_sedis             -0.001098          -0.000452   \n",
       "Finegoldia                             0.001706          -0.001954   \n",
       "Microbacterium                         0.002262           0.001097   \n",
       "Sphingomonas                           0.000959          -0.002414   \n",
       "Chryseobacterium                      -0.000357          -0.000429   \n",
       "Bacteroides                           -0.000235           0.001419   \n",
       "Bdellovibrio                          -0.002284           0.000185   \n",
       "Streptophyta                          -0.001093           0.000596   \n",
       "Lachnospiracea_incertae_sedis         -0.001125          -0.001970   \n",
       "Paracoccus                             0.000275           0.001846   \n",
       "Fastidiosipila                         0.001725          -0.000284   \n",
       "Pseudonocardia                        -0.001075          -0.001802   \n",
       "\n",
       "                               Veillonellaceae  Actinomycetaceae  \\\n",
       "Streptococcus                        -0.001363         -0.001889   \n",
       "Tropheryma                            0.000867          0.000327   \n",
       "Veillonella                          -0.157524         -0.000034   \n",
       "Actinomyces                           0.000148         -0.169643   \n",
       "Flavobacterium                        0.002156         -0.002358   \n",
       "Prevotella                           -0.002501          0.001615   \n",
       "Porphyromonas                        -0.002273          0.000209   \n",
       "Parvimonas                           -0.001808          0.002271   \n",
       "Fusobacterium                        -0.000377          0.001905   \n",
       "Propionibacterium                     0.001049         -0.000446   \n",
       "Gemella                               0.001861         -0.001477   \n",
       "Rothia                               -0.001817         -0.002249   \n",
       "Granulicatella                        0.001259          0.002403   \n",
       "Neisseria                             0.002218          0.001312   \n",
       "Lactobacillus                        -0.001299         -0.001025   \n",
       "Megasphaera                          -0.055496          0.001718   \n",
       "Catonella                            -0.002446         -0.001503   \n",
       "Atopobium                             0.001887         -0.001605   \n",
       "Campylobacter                         0.001547         -0.000667   \n",
       "Capnocytophaga                        0.000749          0.002299   \n",
       "Solobacterium                        -0.001819          0.001864   \n",
       "Moryella                             -0.002401         -0.001213   \n",
       "TM7_genera_incertae_sedis             0.000469          0.000826   \n",
       "Staphylococcus                       -0.002507          0.001223   \n",
       "Filifactor                           -0.002589         -0.001389   \n",
       "Oribacterium                          0.002270         -0.001278   \n",
       "Burkholderia                         -0.000207         -0.001750   \n",
       "Sneathia                             -0.001015         -0.001839   \n",
       "Treponema                            -0.001990          0.001207   \n",
       "Moraxella                             0.000939         -0.000168   \n",
       "Haemophilus                          -0.000379          0.000527   \n",
       "Selenomonas                          -0.064216         -0.001712   \n",
       "Corynebacterium                       0.001922         -0.001714   \n",
       "Rhizobium                             0.001876          0.001265   \n",
       "Bradyrhizobium                        0.002339         -0.000335   \n",
       "Methylobacterium                     -0.002365         -0.000828   \n",
       "OD1_genera_incertae_sedis            -0.002608         -0.000614   \n",
       "Finegoldia                            0.001151         -0.002249   \n",
       "Microbacterium                        0.002138          0.000901   \n",
       "Sphingomonas                          0.001018          0.001740   \n",
       "Chryseobacterium                      0.001007         -0.000133   \n",
       "Bacteroides                          -0.002191          0.001079   \n",
       "Bdellovibrio                          0.001391         -0.000568   \n",
       "Streptophyta                          0.002145          0.002112   \n",
       "Lachnospiracea_incertae_sedis        -0.002479         -0.002238   \n",
       "Paracoccus                           -0.002086          0.002374   \n",
       "Fastidiosipila                       -0.000692         -0.002321   \n",
       "Pseudonocardia                       -0.002417          0.000027   \n",
       "\n",
       "                               Flavobacteriaceae  Prevotellaceae  \\\n",
       "Streptococcus                          -0.001235       -0.001667   \n",
       "Tropheryma                             -0.002156        0.001601   \n",
       "Veillonella                            -0.000314       -0.000869   \n",
       "Actinomyces                             0.001400       -0.002606   \n",
       "Flavobacterium                          0.181565       -0.002381   \n",
       "Prevotella                             -0.002104       -0.179244   \n",
       "Porphyromonas                          -0.001859        0.002094   \n",
       "Parvimonas                              0.002539       -0.002039   \n",
       "Fusobacterium                          -0.000753       -0.001373   \n",
       "Propionibacterium                      -0.002043        0.001206   \n",
       "Gemella                                -0.001928        0.001307   \n",
       "Rothia                                  0.001343       -0.001876   \n",
       "Granulicatella                         -0.001058        0.002363   \n",
       "Neisseria                               0.000769        0.000216   \n",
       "Lactobacillus                          -0.000321        0.001471   \n",
       "Megasphaera                            -0.000735        0.000871   \n",
       "Catonella                               0.000046        0.000918   \n",
       "Atopobium                              -0.000564       -0.000248   \n",
       "Campylobacter                          -0.002316        0.002267   \n",
       "Capnocytophaga                         -0.272453       -0.002037   \n",
       "Solobacterium                           0.001017        0.000301   \n",
       "Moryella                                0.001457        0.002475   \n",
       "TM7_genera_incertae_sedis              -0.001454        0.001543   \n",
       "Staphylococcus                         -0.000626        0.002194   \n",
       "Filifactor                             -0.002563       -0.002100   \n",
       "Oribacterium                           -0.000012       -0.000493   \n",
       "Burkholderia                            0.000898       -0.002229   \n",
       "Sneathia                                0.001515        0.000653   \n",
       "Treponema                               0.000694        0.000844   \n",
       "Moraxella                              -0.000811        0.001517   \n",
       "Haemophilus                             0.001708       -0.002371   \n",
       "Selenomonas                             0.000021       -0.001049   \n",
       "Corynebacterium                         0.001298       -0.000353   \n",
       "Rhizobium                               0.000501       -0.000829   \n",
       "Bradyrhizobium                          0.000976       -0.001624   \n",
       "Methylobacterium                       -0.001872        0.000913   \n",
       "OD1_genera_incertae_sedis               0.002431        0.001379   \n",
       "Finegoldia                             -0.000086        0.000054   \n",
       "Microbacterium                         -0.002405        0.000769   \n",
       "Sphingomonas                            0.000139        0.002088   \n",
       "Chryseobacterium                        0.089018        0.000061   \n",
       "Bacteroides                             0.001758        0.000348   \n",
       "Bdellovibrio                            0.001450        0.001296   \n",
       "Streptophyta                            0.000834        0.002447   \n",
       "Lachnospiracea_incertae_sedis           0.000361       -0.001455   \n",
       "Paracoccus                             -0.001512       -0.000066   \n",
       "Fastidiosipila                         -0.000459        0.001245   \n",
       "Pseudonocardia                          0.001480       -0.001138   \n",
       "\n",
       "                               Porphyromonadaceae  \\\n",
       "Streptococcus                            0.000381   \n",
       "Tropheryma                              -0.002328   \n",
       "Veillonella                             -0.002449   \n",
       "Actinomyces                             -0.001805   \n",
       "Flavobacterium                           0.001716   \n",
       "Prevotella                              -0.001971   \n",
       "Porphyromonas                            0.038327   \n",
       "Parvimonas                               0.002351   \n",
       "Fusobacterium                            0.002199   \n",
       "Propionibacterium                        0.002456   \n",
       "Gemella                                  0.000671   \n",
       "Rothia                                   0.001133   \n",
       "Granulicatella                          -0.002037   \n",
       "Neisseria                               -0.001741   \n",
       "Lactobacillus                           -0.001220   \n",
       "Megasphaera                              0.001405   \n",
       "Catonella                               -0.002159   \n",
       "Atopobium                               -0.002258   \n",
       "Campylobacter                            0.002134   \n",
       "Capnocytophaga                           0.001631   \n",
       "Solobacterium                            0.000367   \n",
       "Moryella                                 0.002105   \n",
       "TM7_genera_incertae_sedis               -0.000919   \n",
       "Staphylococcus                           0.001467   \n",
       "Filifactor                              -0.001334   \n",
       "Oribacterium                            -0.001392   \n",
       "Burkholderia                             0.000504   \n",
       "Sneathia                                -0.001941   \n",
       "Treponema                                0.000435   \n",
       "Moraxella                               -0.000884   \n",
       "Haemophilus                             -0.001546   \n",
       "Selenomonas                              0.001596   \n",
       "Corynebacterium                          0.002541   \n",
       "Rhizobium                               -0.002096   \n",
       "Bradyrhizobium                          -0.000804   \n",
       "Methylobacterium                         0.000601   \n",
       "OD1_genera_incertae_sedis               -0.001822   \n",
       "Finegoldia                               0.002547   \n",
       "Microbacterium                          -0.001253   \n",
       "Sphingomonas                             0.000960   \n",
       "Chryseobacterium                         0.001763   \n",
       "Bacteroides                             -0.002259   \n",
       "Bdellovibrio                            -0.000349   \n",
       "Streptophyta                            -0.001342   \n",
       "Lachnospiracea_incertae_sedis            0.001548   \n",
       "Paracoccus                              -0.000776   \n",
       "Fastidiosipila                          -0.000199   \n",
       "Pseudonocardia                          -0.001850   \n",
       "\n",
       "                               Clostridiales_Incertae_Sedis_XI  \\\n",
       "Streptococcus                                        -0.002236   \n",
       "Tropheryma                                            0.001799   \n",
       "Veillonella                                           0.002380   \n",
       "Actinomyces                                          -0.002600   \n",
       "Flavobacterium                                       -0.001905   \n",
       "Prevotella                                           -0.000581   \n",
       "Porphyromonas                                        -0.001532   \n",
       "Parvimonas                                           -0.162585   \n",
       "Fusobacterium                                         0.000419   \n",
       "Propionibacterium                                    -0.002075   \n",
       "Gemella                                              -0.000597   \n",
       "Rothia                                               -0.000717   \n",
       "Granulicatella                                       -0.001676   \n",
       "Neisseria                                             0.001989   \n",
       "Lactobacillus                                        -0.001565   \n",
       "Megasphaera                                           0.001533   \n",
       "Catonella                                            -0.001001   \n",
       "Atopobium                                             0.002226   \n",
       "Campylobacter                                         0.002511   \n",
       "Capnocytophaga                                       -0.000693   \n",
       "Solobacterium                                         0.001068   \n",
       "Moryella                                             -0.002470   \n",
       "TM7_genera_incertae_sedis                            -0.001185   \n",
       "Staphylococcus                                       -0.000590   \n",
       "Filifactor                                           -0.001386   \n",
       "Oribacterium                                         -0.001573   \n",
       "Burkholderia                                          0.001750   \n",
       "Sneathia                                              0.000435   \n",
       "Treponema                                            -0.001667   \n",
       "Moraxella                                             0.001348   \n",
       "Haemophilus                                          -0.000687   \n",
       "Selenomonas                                          -0.000507   \n",
       "Corynebacterium                                       0.001527   \n",
       "Rhizobium                                            -0.001774   \n",
       "Bradyrhizobium                                       -0.000382   \n",
       "Methylobacterium                                     -0.001309   \n",
       "OD1_genera_incertae_sedis                            -0.001348   \n",
       "Finegoldia                                           -0.118456   \n",
       "Microbacterium                                       -0.000366   \n",
       "Sphingomonas                                          0.001319   \n",
       "Chryseobacterium                                      0.002422   \n",
       "Bacteroides                                           0.002392   \n",
       "Bdellovibrio                                          0.002242   \n",
       "Streptophyta                                          0.001398   \n",
       "Lachnospiracea_incertae_sedis                         0.001189   \n",
       "Paracoccus                                           -0.001120   \n",
       "Fastidiosipila                                        0.001249   \n",
       "Pseudonocardia                                       -0.002416   \n",
       "\n",
       "                               Fusobacteriaceae  Propionibacteriaceae  ...  \\\n",
       "Streptococcus                          0.000170              0.002562  ...   \n",
       "Tropheryma                            -0.002421             -0.002006  ...   \n",
       "Veillonella                            0.001851              0.002472  ...   \n",
       "Actinomyces                           -0.000809              0.002858  ...   \n",
       "Flavobacterium                         0.000042             -0.002186  ...   \n",
       "Prevotella                             0.001110              0.000258  ...   \n",
       "Porphyromonas                         -0.002493             -0.001946  ...   \n",
       "Parvimonas                            -0.002213              0.002023  ...   \n",
       "Fusobacterium                          0.262781             -0.001575  ...   \n",
       "Propionibacterium                     -0.000741             -0.683013  ...   \n",
       "Gemella                               -0.001641              0.001252  ...   \n",
       "Rothia                                -0.000578             -0.001362  ...   \n",
       "Granulicatella                         0.002382              0.000679  ...   \n",
       "Neisseria                              0.001045             -0.002455  ...   \n",
       "Lactobacillus                         -0.000946             -0.000366  ...   \n",
       "Megasphaera                            0.001118              0.001594  ...   \n",
       "Catonella                             -0.001226             -0.002277  ...   \n",
       "Atopobium                             -0.000621             -0.000057  ...   \n",
       "Campylobacter                         -0.001003             -0.000825  ...   \n",
       "Capnocytophaga                        -0.001428              0.002677  ...   \n",
       "Solobacterium                         -0.000410              0.000108  ...   \n",
       "Moryella                               0.000691             -0.000007  ...   \n",
       "TM7_genera_incertae_sedis              0.000452             -0.001365  ...   \n",
       "Staphylococcus                         0.001482              0.000891  ...   \n",
       "Filifactor                            -0.000043             -0.001025  ...   \n",
       "Oribacterium                           0.001812              0.000720  ...   \n",
       "Burkholderia                           0.001933             -0.002199  ...   \n",
       "Sneathia                               0.001620              0.002551  ...   \n",
       "Treponema                             -0.001897             -0.001011  ...   \n",
       "Moraxella                              0.002433              0.001871  ...   \n",
       "Haemophilus                           -0.000935              0.001307  ...   \n",
       "Selenomonas                            0.001324             -0.000484  ...   \n",
       "Corynebacterium                       -0.002091             -0.000316  ...   \n",
       "Rhizobium                             -0.001977             -0.000098  ...   \n",
       "Bradyrhizobium                        -0.001527              0.000408  ...   \n",
       "Methylobacterium                      -0.001497              0.000149  ...   \n",
       "OD1_genera_incertae_sedis             -0.001125             -0.001591  ...   \n",
       "Finegoldia                            -0.000814              0.000581  ...   \n",
       "Microbacterium                        -0.001286             -0.001476  ...   \n",
       "Sphingomonas                          -0.000439             -0.000101  ...   \n",
       "Chryseobacterium                       0.002208              0.000694  ...   \n",
       "Bacteroides                           -0.001697              0.002065  ...   \n",
       "Bdellovibrio                          -0.000061              0.000976  ...   \n",
       "Streptophyta                           0.001105             -0.002357  ...   \n",
       "Lachnospiracea_incertae_sedis         -0.001199              0.000873  ...   \n",
       "Paracoccus                             0.000686             -0.001377  ...   \n",
       "Fastidiosipila                        -0.001881              0.002438  ...   \n",
       "Pseudonocardia                         0.001616              0.000058  ...   \n",
       "\n",
       "                               Methylobacteriaceae  OD1_genera_incertae_sedis  \\\n",
       "Streptococcus                             0.000540                  -0.002448   \n",
       "Tropheryma                               -0.000760                  -0.001898   \n",
       "Veillonella                               0.000673                  -0.001799   \n",
       "Actinomyces                               0.002788                  -0.001348   \n",
       "Flavobacterium                           -0.001378                  -0.002262   \n",
       "Prevotella                               -0.001044                   0.001957   \n",
       "Porphyromonas                             0.000047                  -0.002158   \n",
       "Parvimonas                                0.000086                  -0.001566   \n",
       "Fusobacterium                            -0.001689                   0.000392   \n",
       "Propionibacterium                         0.000145                   0.001723   \n",
       "Gemella                                  -0.002018                  -0.001232   \n",
       "Rothia                                   -0.000578                  -0.001676   \n",
       "Granulicatella                            0.001946                  -0.000603   \n",
       "Neisseria                                -0.000725                   0.002365   \n",
       "Lactobacillus                             0.002681                   0.001725   \n",
       "Megasphaera                              -0.002375                  -0.002042   \n",
       "Catonella                                 0.001730                  -0.001517   \n",
       "Atopobium                                 0.000654                   0.000545   \n",
       "Campylobacter                             0.001752                  -0.000800   \n",
       "Capnocytophaga                            0.002381                  -0.002101   \n",
       "Solobacterium                             0.001741                  -0.001763   \n",
       "Moryella                                  0.002552                   0.000911   \n",
       "TM7_genera_incertae_sedis                -0.001471                   0.001858   \n",
       "Staphylococcus                            0.000203                   0.001375   \n",
       "Filifactor                                0.002063                   0.001347   \n",
       "Oribacterium                              0.001947                   0.000726   \n",
       "Burkholderia                              0.002339                  -0.000952   \n",
       "Sneathia                                  0.001635                  -0.000466   \n",
       "Treponema                                 0.000598                   0.001890   \n",
       "Moraxella                                -0.002153                  -0.000273   \n",
       "Haemophilus                               0.000080                  -0.001281   \n",
       "Selenomonas                              -0.000401                   0.000022   \n",
       "Corynebacterium                           0.002215                   0.002465   \n",
       "Rhizobium                                -0.000134                   0.002508   \n",
       "Bradyrhizobium                           -0.001796                  -0.000839   \n",
       "Methylobacterium                          0.081024                  -0.000681   \n",
       "OD1_genera_incertae_sedis                 0.001487                   0.150908   \n",
       "Finegoldia                                0.001559                   0.002556   \n",
       "Microbacterium                           -0.002190                  -0.000421   \n",
       "Sphingomonas                              0.001780                   0.001246   \n",
       "Chryseobacterium                         -0.000854                  -0.001051   \n",
       "Bacteroides                               0.001145                  -0.000819   \n",
       "Bdellovibrio                              0.000533                  -0.000302   \n",
       "Streptophyta                              0.000952                   0.000977   \n",
       "Lachnospiracea_incertae_sedis             0.002167                  -0.001816   \n",
       "Paracoccus                               -0.000794                   0.002275   \n",
       "Fastidiosipila                           -0.001603                   0.002335   \n",
       "Pseudonocardia                           -0.001214                   0.002508   \n",
       "\n",
       "                               Microbacteriaceae  Sphingomonadaceae  \\\n",
       "Streptococcus                          -0.000203           0.001289   \n",
       "Tropheryma                              0.002793           0.000259   \n",
       "Veillonella                             0.000008           0.002139   \n",
       "Actinomyces                             0.002038           0.002258   \n",
       "Flavobacterium                         -0.002328          -0.001729   \n",
       "Prevotella                              0.000539          -0.001032   \n",
       "Porphyromonas                           0.000369           0.000244   \n",
       "Parvimonas                             -0.002288           0.001179   \n",
       "Fusobacterium                           0.000478           0.000784   \n",
       "Propionibacterium                       0.001494           0.000325   \n",
       "Gemella                                 0.001649          -0.000901   \n",
       "Rothia                                  0.001630           0.000188   \n",
       "Granulicatella                          0.000398          -0.002361   \n",
       "Neisseria                               0.001126          -0.000401   \n",
       "Lactobacillus                           0.000297          -0.001492   \n",
       "Megasphaera                             0.001706           0.002411   \n",
       "Catonella                               0.002343          -0.000523   \n",
       "Atopobium                               0.000709           0.001510   \n",
       "Campylobacter                           0.001694           0.001717   \n",
       "Capnocytophaga                         -0.000209           0.000329   \n",
       "Solobacterium                          -0.000534           0.000987   \n",
       "Moryella                               -0.000878           0.001431   \n",
       "TM7_genera_incertae_sedis              -0.001660           0.001560   \n",
       "Staphylococcus                          0.002342          -0.000359   \n",
       "Filifactor                             -0.001411          -0.000011   \n",
       "Oribacterium                            0.002445          -0.000490   \n",
       "Burkholderia                            0.001364           0.000840   \n",
       "Sneathia                               -0.000593           0.002319   \n",
       "Treponema                              -0.001800           0.001014   \n",
       "Moraxella                               0.000248          -0.001785   \n",
       "Haemophilus                             0.000516          -0.001845   \n",
       "Selenomonas                            -0.001781          -0.001103   \n",
       "Corynebacterium                        -0.001383          -0.000446   \n",
       "Rhizobium                              -0.001670          -0.000537   \n",
       "Bradyrhizobium                          0.001735           0.001205   \n",
       "Methylobacterium                       -0.000530          -0.000735   \n",
       "OD1_genera_incertae_sedis              -0.000603           0.000188   \n",
       "Finegoldia                              0.002492          -0.000689   \n",
       "Microbacterium                         -0.024598          -0.000209   \n",
       "Sphingomonas                            0.000163           0.197294   \n",
       "Chryseobacterium                        0.001163           0.002329   \n",
       "Bacteroides                            -0.001688          -0.001548   \n",
       "Bdellovibrio                           -0.000293          -0.000424   \n",
       "Streptophyta                            0.000266           0.002135   \n",
       "Lachnospiracea_incertae_sedis           0.000076           0.001439   \n",
       "Paracoccus                              0.002521           0.002349   \n",
       "Fastidiosipila                          0.000328           0.000527   \n",
       "Pseudonocardia                          0.001006           0.001839   \n",
       "\n",
       "                               Bacteroidaceae  Bdellovibrionaceae  \\\n",
       "Streptococcus                       -0.002530            0.000524   \n",
       "Tropheryma                          -0.000082            0.001349   \n",
       "Veillonella                         -0.001468           -0.002272   \n",
       "Actinomyces                         -0.002250           -0.001056   \n",
       "Flavobacterium                      -0.002154            0.000878   \n",
       "Prevotella                           0.002485           -0.001125   \n",
       "Porphyromonas                        0.000376            0.002346   \n",
       "Parvimonas                          -0.000899           -0.002293   \n",
       "Fusobacterium                       -0.001771           -0.002297   \n",
       "Propionibacterium                   -0.001156            0.002516   \n",
       "Gemella                             -0.000825           -0.002104   \n",
       "Rothia                               0.002298           -0.000886   \n",
       "Granulicatella                       0.000583            0.000766   \n",
       "Neisseria                            0.002192           -0.002414   \n",
       "Lactobacillus                       -0.002581           -0.000860   \n",
       "Megasphaera                         -0.001062           -0.001466   \n",
       "Catonella                           -0.000426           -0.001950   \n",
       "Atopobium                            0.001505            0.001868   \n",
       "Campylobacter                        0.001028            0.000048   \n",
       "Capnocytophaga                      -0.000968            0.001091   \n",
       "Solobacterium                       -0.002072           -0.000548   \n",
       "Moryella                             0.001453           -0.000127   \n",
       "TM7_genera_incertae_sedis            0.002626           -0.002462   \n",
       "Staphylococcus                      -0.001748           -0.002063   \n",
       "Filifactor                          -0.002223           -0.000443   \n",
       "Oribacterium                         0.000159            0.000600   \n",
       "Burkholderia                        -0.000901           -0.000859   \n",
       "Sneathia                            -0.002169           -0.002469   \n",
       "Treponema                            0.000380           -0.002431   \n",
       "Moraxella                            0.000184           -0.001325   \n",
       "Haemophilus                          0.000354            0.000885   \n",
       "Selenomonas                         -0.001669           -0.002094   \n",
       "Corynebacterium                      0.001440            0.002378   \n",
       "Rhizobium                           -0.001279           -0.002455   \n",
       "Bradyrhizobium                      -0.002328           -0.001207   \n",
       "Methylobacterium                    -0.000020           -0.002539   \n",
       "OD1_genera_incertae_sedis           -0.000352            0.000837   \n",
       "Finegoldia                          -0.000563            0.001099   \n",
       "Microbacterium                      -0.001017           -0.002093   \n",
       "Sphingomonas                        -0.000916           -0.000567   \n",
       "Chryseobacterium                    -0.002581            0.000907   \n",
       "Bacteroides                          0.227973           -0.002053   \n",
       "Bdellovibrio                         0.002566           -0.060480   \n",
       "Streptophyta                        -0.001397            0.000858   \n",
       "Lachnospiracea_incertae_sedis        0.000374            0.000721   \n",
       "Paracoccus                          -0.002237           -0.000530   \n",
       "Fastidiosipila                       0.000554            0.001362   \n",
       "Pseudonocardia                       0.001985            0.001257   \n",
       "\n",
       "                               Chloroplast  Rhodobacteraceae  Ruminococcaceae  \\\n",
       "Streptococcus                     0.000924         -0.002043         0.001208   \n",
       "Tropheryma                       -0.002028         -0.002116         0.000409   \n",
       "Veillonella                       0.002246          0.000785        -0.000263   \n",
       "Actinomyces                      -0.000326         -0.000788         0.000549   \n",
       "Flavobacterium                    0.001580         -0.001860        -0.002057   \n",
       "Prevotella                        0.001721          0.000599        -0.001606   \n",
       "Porphyromonas                    -0.000305          0.000968        -0.001732   \n",
       "Parvimonas                        0.001261         -0.002186        -0.001226   \n",
       "Fusobacterium                     0.000193          0.002003         0.000826   \n",
       "Propionibacterium                -0.002552         -0.002047        -0.000838   \n",
       "Gemella                           0.000780          0.001071        -0.001807   \n",
       "Rothia                           -0.001446         -0.002513        -0.000140   \n",
       "Granulicatella                    0.000452         -0.000335         0.001551   \n",
       "Neisseria                        -0.002106          0.001391         0.001602   \n",
       "Lactobacillus                     0.000654         -0.002311         0.002377   \n",
       "Megasphaera                      -0.000395          0.001667         0.002545   \n",
       "Catonella                         0.001518         -0.001254         0.001667   \n",
       "Atopobium                        -0.001021          0.002028         0.000620   \n",
       "Campylobacter                     0.000983          0.001120         0.001374   \n",
       "Capnocytophaga                    0.000670          0.002441        -0.000824   \n",
       "Solobacterium                     0.001091          0.002025         0.001542   \n",
       "Moryella                         -0.002359          0.002311         0.001778   \n",
       "TM7_genera_incertae_sedis         0.000535         -0.002539        -0.001593   \n",
       "Staphylococcus                   -0.000535         -0.000173        -0.001967   \n",
       "Filifactor                        0.001076          0.001971         0.000907   \n",
       "Oribacterium                     -0.001332          0.002312        -0.001652   \n",
       "Burkholderia                      0.001767          0.000365         0.002373   \n",
       "Sneathia                          0.000541         -0.001623        -0.002050   \n",
       "Treponema                         0.000744          0.001526         0.000912   \n",
       "Moraxella                         0.002098         -0.002123         0.000133   \n",
       "Haemophilus                       0.002073          0.001542        -0.001350   \n",
       "Selenomonas                       0.001018          0.001281        -0.002479   \n",
       "Corynebacterium                   0.001616          0.002192        -0.002152   \n",
       "Rhizobium                        -0.001460          0.000205         0.001540   \n",
       "Bradyrhizobium                    0.002366         -0.001886        -0.000484   \n",
       "Methylobacterium                  0.000387         -0.001349        -0.002513   \n",
       "OD1_genera_incertae_sedis        -0.001986         -0.002377         0.000134   \n",
       "Finegoldia                        0.002511         -0.001572         0.001760   \n",
       "Microbacterium                   -0.000664          0.001311         0.002114   \n",
       "Sphingomonas                     -0.000943         -0.000521        -0.001450   \n",
       "Chryseobacterium                  0.000289          0.000739        -0.000055   \n",
       "Bacteroides                       0.000735         -0.001778        -0.001107   \n",
       "Bdellovibrio                     -0.000256          0.002379        -0.000584   \n",
       "Streptophyta                      0.178340          0.000262        -0.002492   \n",
       "Lachnospiracea_incertae_sedis    -0.000182         -0.000554        -0.002449   \n",
       "Paracoccus                        0.000985         -0.098313        -0.002534   \n",
       "Fastidiosipila                   -0.001950          0.000531         0.073993   \n",
       "Pseudonocardia                    0.000271          0.001782         0.000232   \n",
       "\n",
       "                               Pseudonocardiaceae  \n",
       "Streptococcus                            0.000545  \n",
       "Tropheryma                               0.000610  \n",
       "Veillonella                              0.000371  \n",
       "Actinomyces                              0.000686  \n",
       "Flavobacterium                           0.000381  \n",
       "Prevotella                              -0.000493  \n",
       "Porphyromonas                           -0.001632  \n",
       "Parvimonas                               0.001894  \n",
       "Fusobacterium                           -0.002314  \n",
       "Propionibacterium                       -0.003063  \n",
       "Gemella                                 -0.000364  \n",
       "Rothia                                  -0.001072  \n",
       "Granulicatella                          -0.001360  \n",
       "Neisseria                               -0.002419  \n",
       "Lactobacillus                           -0.002220  \n",
       "Megasphaera                             -0.000571  \n",
       "Catonella                                0.002350  \n",
       "Atopobium                               -0.000274  \n",
       "Campylobacter                            0.002420  \n",
       "Capnocytophaga                          -0.001413  \n",
       "Solobacterium                           -0.001888  \n",
       "Moryella                                 0.001550  \n",
       "TM7_genera_incertae_sedis               -0.001387  \n",
       "Staphylococcus                          -0.000722  \n",
       "Filifactor                               0.002763  \n",
       "Oribacterium                             0.000014  \n",
       "Burkholderia                            -0.000837  \n",
       "Sneathia                                -0.002606  \n",
       "Treponema                               -0.000175  \n",
       "Moraxella                               -0.001544  \n",
       "Haemophilus                             -0.000804  \n",
       "Selenomonas                              0.000518  \n",
       "Corynebacterium                         -0.000178  \n",
       "Rhizobium                                0.002288  \n",
       "Bradyrhizobium                           0.001684  \n",
       "Methylobacterium                         0.000761  \n",
       "OD1_genera_incertae_sedis               -0.000963  \n",
       "Finegoldia                               0.000836  \n",
       "Microbacterium                           0.000996  \n",
       "Sphingomonas                            -0.000694  \n",
       "Chryseobacterium                        -0.000136  \n",
       "Bacteroides                             -0.001962  \n",
       "Bdellovibrio                             0.002012  \n",
       "Streptophyta                             0.001966  \n",
       "Lachnospiracea_incertae_sedis           -0.002402  \n",
       "Paracoccus                              -0.000312  \n",
       "Fastidiosipila                           0.000823  \n",
       "Pseudonocardia                           0.099895  \n",
       "\n",
       "[48 rows x 40 columns]"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trained_weight_list[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 9. Taxa selection performance\n",
    "\n",
    "If we know the true disease path, we can calculate the taxa selection performance by `deepbiome_taxa_selection_performance` funciton. First, we prepared the true weight list based on the true disease path. For each fold, we prepared 4 weights from the 5 layers (`[genus to family, family to order, order to Class, class to phylum]`). An example of the list of the true weights from each fold is as follow:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|<ipython-input-44-7f16305fbcb7>:2] (5, 4)\n"
     ]
    }
   ],
   "source": [
    "true_tree_weight_list = np.load(resource_filename('deepbiome', 'tests/data/true_weight_list.npy'), allow_pickle=True)\n",
    "log.info(true_tree_weight_list.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The first weight between the genus and family layers for first epoch has the shape below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|<ipython-input-45-7f1406e7d9a7>:1] (48, 40)\n"
     ]
    }
   ],
   "source": [
    "log.info(true_tree_weight_list[0][0].shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will calculate the taxa selection performance of the trained weight below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['./example_result//weight_0.h5',\n",
       " './example_result//weight_1.h5',\n",
       " './example_result//weight_2.h5',\n",
       " './example_result//weight_3.h5',\n",
       " './example_result//weight_4.h5']"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trained_weight_path_list = ['%s/weight_%d.h5' % (path_info['model_info']['model_dir'], i) for i in range(5)]\n",
    "trained_weight_path_list"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is the summary of the taxa selection accuracy of trained weights from each fold."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result//weight_0.h5 \n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result//weight_1.h5 \n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result//weight_2.h5 \n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result//weight_3.h5 \n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result//weight_4.h5 \n"
     ]
    }
   ],
   "source": [
    "summary = deepbiome.deepbiome_taxa_selection_performance(log, network_info, path_info, num_classes=1, \n",
    "                                                         true_tree_weight_list=true_tree_weight_list, \n",
    "                                                         trained_weight_path_list = trained_weight_path_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>PhyloTree</th>\n",
       "      <th>No. true taxa</th>\n",
       "      <th>No. total taxa</th>\n",
       "      <th>Sensitivity_mean</th>\n",
       "      <th>Sensitivity_std</th>\n",
       "      <th>Specificity_mean</th>\n",
       "      <th>Specificity_std</th>\n",
       "      <th>Gmeasure_mean</th>\n",
       "      <th>Gmeasure_std</th>\n",
       "      <th>Accuracy_mean</th>\n",
       "      <th>Accuracy_std</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>./example_result/</td>\n",
       "      <td>Genus</td>\n",
       "      <td>31</td>\n",
       "      <td>48</td>\n",
       "      <td>0.941935</td>\n",
       "      <td>0.037619</td>\n",
       "      <td>0.987401</td>\n",
       "      <td>0.007747</td>\n",
       "      <td>0.964211</td>\n",
       "      <td>0.020050</td>\n",
       "      <td>0.986667</td>\n",
       "      <td>0.007722</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td></td>\n",
       "      <td>Family</td>\n",
       "      <td>23</td>\n",
       "      <td>40</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.981048</td>\n",
       "      <td>0.001577</td>\n",
       "      <td>0.990478</td>\n",
       "      <td>0.000796</td>\n",
       "      <td>0.981522</td>\n",
       "      <td>0.001537</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td></td>\n",
       "      <td>Order</td>\n",
       "      <td>9</td>\n",
       "      <td>23</td>\n",
       "      <td>0.977778</td>\n",
       "      <td>0.044444</td>\n",
       "      <td>0.960733</td>\n",
       "      <td>0.004055</td>\n",
       "      <td>0.968941</td>\n",
       "      <td>0.021873</td>\n",
       "      <td>0.961125</td>\n",
       "      <td>0.003759</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td></td>\n",
       "      <td>Class</td>\n",
       "      <td>7</td>\n",
       "      <td>17</td>\n",
       "      <td>0.971429</td>\n",
       "      <td>0.057143</td>\n",
       "      <td>0.931507</td>\n",
       "      <td>0.014367</td>\n",
       "      <td>0.950693</td>\n",
       "      <td>0.026140</td>\n",
       "      <td>0.933333</td>\n",
       "      <td>0.012674</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Model PhyloTree No. true taxa No. total taxa  Sensitivity_mean  \\\n",
       "0  ./example_result/     Genus            31             48          0.941935   \n",
       "1                       Family            23             40          1.000000   \n",
       "2                        Order             9             23          0.977778   \n",
       "3                        Class             7             17          0.971429   \n",
       "\n",
       "   Sensitivity_std  Specificity_mean  Specificity_std  Gmeasure_mean  \\\n",
       "0         0.037619          0.987401         0.007747       0.964211   \n",
       "1         0.000000          0.981048         0.001577       0.990478   \n",
       "2         0.044444          0.960733         0.004055       0.968941   \n",
       "3         0.057143          0.931507         0.014367       0.950693   \n",
       "\n",
       "   Gmeasure_std  Accuracy_mean  Accuracy_std  \n",
       "0      0.020050       0.986667      0.007722  \n",
       "1      0.000796       0.981522      0.001537  \n",
       "2      0.021873       0.961125      0.003759  \n",
       "3      0.026140       0.933333      0.012674  "
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "summary"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 10. Draw phylogenetic tree\n",
    "\n",
    "The `deepbiome_get_trained_weight` function draw phylogenetic tree for the `DeepBiome` network. This function implemented `ete3` library (link TBD)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we turn on the `tree_weight_on` option, the function shows the amount and direction of the tree weights for each edge by circle size and color. For this option, we have to feed a list of pandas dataframe of the tree weights obtained from `deepbiome_get_trained_weight` function to `tree_weight` argument.\n",
    "In this example, we used the 5 lists of weights from 5-fold cross validation obtained from `deepbiome_get_trained_weight` function.\n",
    "For each layer, we first averaged 5 weights from 5 fold CV."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "tot_trained_weight_list = []\n",
    "for fold in range(5):\n",
    "    weight_path = '%s/%s' % (path_info['model_info']['model_dir'], 'weight_%d.h5' % fold)\n",
    "    trained_weight_list = deepbiome.deepbiome_get_trained_weight(log, network_info, path_info, num_classes=1,\n",
    "                                                                 weight_path=weight_path, verbose=False)\n",
    "    tot_trained_weight_list.append(trained_weight_list)\n",
    "    \n",
    "trained_weight_list = []\n",
    "for i in range(len(tot_trained_weight_list[0])):\n",
    "    level_weights = tot_trained_weight_list[0][i]\n",
    "    for j in range(1,len(tot_trained_weight_list)):\n",
    "        level_weights +=tot_trained_weight_list[j][i]\n",
    "    level_weights /= len(tot_trained_weight_list)\n",
    "    trained_weight_list.append(level_weights)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now, we can draw the phylogenetic tree with trained weights. For using the trained weights, __`tree_weight_classes`, the list of names for each level, should be same as the name of each level in the trained weight list.__\n",
    "We used `file_name='%%inline'` option to show the tree in the jupyter notebook. To specify the background color for each phylum, we turned on the `phylum_background_color_on` option and used `phylum_color` list."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "phylum_color = ['lightsteelblue', \n",
    "                 'moccasin',\n",
    "                 'darkseagreen',\n",
    "                 'khaki',\n",
    "                 'mediumturquoise',\n",
    "                 'lightblue',\n",
    "                 'thistle',\n",
    "                 'tan',\n",
    "                 'mistyrose',\n",
    "                ]\n",
    "\n",
    "img = deepbiome.deepbiome_draw_phylogenetic_tree(log, network_info, path_info, num_classes=1,\n",
    "                                                 file_name='%%inline', img_w=500, branch_vertical_margin=20, \n",
    "                                                 arc_start=0, arc_span=360, \n",
    "                                                 node_name_on=False, name_fsize=10, \n",
    "                                                 tree_weight_on=True, tree_weight=trained_weight_list, \n",
    "                                                 tree_weight_classes = ['Genus', 'Family', 'Order', 'Class', 'Phylum', 'Disease'],\n",
    "                                                 weight_opacity=0.8, weight_max_radios=10, \n",
    "                                                 phylum_background_color_on=True, phylum_color=phylum_color, phylum_color_legend=True,\n",
    "                                                 verbose=False)\n",
    "img"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can show the name of each leaf node in the phylogenetic tree by turn on the `node_name_on` option."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "img = deepbiome.deepbiome_draw_phylogenetic_tree(log, network_info, path_info, num_classes=1,\n",
    "                                                 file_name='%%inline', img_w=500,\n",
    "                                                 branch_vertical_margin=20, arc_start=0, arc_span=360,\n",
    "                                                 node_name_on=True, name_fsize=20, \n",
    "                                                 tree_weight_on=True, tree_weight=trained_weight_list,\n",
    "                                                 tree_weight_classes = ['Genus', 'Family', 'Order', 'Class', 'Phylum', 'Disease'],\n",
    "                                                 weight_opacity=0.8, weight_max_radios=20, \n",
    "                                                 phylum_background_color_on=True, phylum_color=phylum_color, phylum_color_legend=True, \n",
    "                                                 verbose=False)\n",
    "img"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "If we want to save the figure as `png` or `jpg`, we can change `file_name` option."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "img = deepbiome.deepbiome_draw_phylogenetic_tree(log, network_info, path_info, num_classes=1,\n",
    "                                                 file_name='tree.png', img_w=500,\n",
    "                                                 branch_vertical_margin=20, arc_start=0, arc_span=360,\n",
    "                                                 node_name_on=True, name_fsize=20, \n",
    "                                                 tree_weight_on=True, tree_weight=trained_weight_list,\n",
    "                                                 tree_weight_classes = ['Genus', 'Family', 'Order', 'Class', 'Phylum', 'Disease'],\n",
    "                                                 weight_opacity=0.8, weight_max_radios=20, \n",
    "                                                 phylum_background_color_on=True, phylum_color=phylum_color, phylum_color_legend=True, \n",
    "                                                 verbose=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can check that the tree image saved in `tree.png`."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nAABJRU5ErkJggg==\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7fe5d8659710>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "img = plt.imread('tree.png')\n",
    "plt.imshow(img)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 11. Using covariates\n",
    "\n",
    "We can use covariates for training the DeepBiome network."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below is an example of the input files for the continuous covariates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ages</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>59.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>45.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>42.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>50.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>69.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>37.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>66.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>75.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>32.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>72.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>65.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>58.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>41.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>49.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>49.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>70.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>64.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>33.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>74.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>56.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>37.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>51.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>34.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>46.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>44.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>60.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>46.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>37.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>58.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>970</th>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>971</th>\n",
       "      <td>78.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>972</th>\n",
       "      <td>32.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>973</th>\n",
       "      <td>62.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>974</th>\n",
       "      <td>47.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>975</th>\n",
       "      <td>47.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>976</th>\n",
       "      <td>65.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>977</th>\n",
       "      <td>68.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>978</th>\n",
       "      <td>45.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>979</th>\n",
       "      <td>43.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>980</th>\n",
       "      <td>31.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>981</th>\n",
       "      <td>45.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>982</th>\n",
       "      <td>64.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>983</th>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>984</th>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>985</th>\n",
       "      <td>59.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>986</th>\n",
       "      <td>78.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>987</th>\n",
       "      <td>49.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>988</th>\n",
       "      <td>33.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>989</th>\n",
       "      <td>60.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>990</th>\n",
       "      <td>48.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991</th>\n",
       "      <td>75.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>992</th>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>993</th>\n",
       "      <td>39.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>994</th>\n",
       "      <td>49.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>71.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>34.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>48.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>52.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     ages\n",
       "0    59.0\n",
       "1    45.0\n",
       "2    42.0\n",
       "3    50.0\n",
       "4    69.0\n",
       "5    37.0\n",
       "6    66.0\n",
       "7    75.0\n",
       "8    32.0\n",
       "9    72.0\n",
       "10   65.0\n",
       "11   58.0\n",
       "12   41.0\n",
       "13   49.0\n",
       "14   49.0\n",
       "15   70.0\n",
       "16   64.0\n",
       "17   33.0\n",
       "18   74.0\n",
       "19   56.0\n",
       "20   37.0\n",
       "21   38.0\n",
       "22   51.0\n",
       "23   34.0\n",
       "24   46.0\n",
       "25   44.0\n",
       "26   60.0\n",
       "27   46.0\n",
       "28   37.0\n",
       "29   58.0\n",
       "..    ...\n",
       "970  38.0\n",
       "971  78.0\n",
       "972  32.0\n",
       "973  62.0\n",
       "974  47.0\n",
       "975  47.0\n",
       "976  65.0\n",
       "977  68.0\n",
       "978  45.0\n",
       "979  43.0\n",
       "980  31.0\n",
       "981  45.0\n",
       "982  64.0\n",
       "983  36.0\n",
       "984  36.0\n",
       "985  59.0\n",
       "986  78.0\n",
       "987  49.0\n",
       "988  33.0\n",
       "989  60.0\n",
       "990  48.0\n",
       "991  75.0\n",
       "992  38.0\n",
       "993  39.0\n",
       "994  49.0\n",
       "995  71.0\n",
       "996  34.0\n",
       "997  48.0\n",
       "998  38.0\n",
       "999  52.0\n",
       "\n",
       "[1000 rows x 1 columns]"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_csv(resource_filename('deepbiome', 'tests/data/ages.csv'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below is an example of the input files for the categorical covariates. We assume that the file contains all of the catetogories for one-hot encoding."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>970</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>971</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>972</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>973</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>974</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>975</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>976</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>977</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>978</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>979</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>980</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>981</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>982</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>983</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>984</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>985</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>986</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>987</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>988</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>989</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>990</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>992</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>993</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>994</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     gender\n",
       "0         1\n",
       "1         0\n",
       "2         1\n",
       "3         1\n",
       "4         1\n",
       "5         0\n",
       "6         1\n",
       "7         1\n",
       "8         0\n",
       "9         0\n",
       "10        0\n",
       "11        1\n",
       "12        0\n",
       "13        1\n",
       "14        1\n",
       "15        1\n",
       "16        0\n",
       "17        0\n",
       "18        1\n",
       "19        1\n",
       "20        0\n",
       "21        0\n",
       "22        1\n",
       "23        0\n",
       "24        1\n",
       "25        0\n",
       "26        0\n",
       "27        0\n",
       "28        1\n",
       "29        1\n",
       "..      ...\n",
       "970       1\n",
       "971       1\n",
       "972       0\n",
       "973       1\n",
       "974       0\n",
       "975       1\n",
       "976       0\n",
       "977       1\n",
       "978       1\n",
       "979       1\n",
       "980       1\n",
       "981       1\n",
       "982       0\n",
       "983       0\n",
       "984       0\n",
       "985       1\n",
       "986       0\n",
       "987       0\n",
       "988       1\n",
       "989       0\n",
       "990       0\n",
       "991       1\n",
       "992       1\n",
       "993       1\n",
       "994       0\n",
       "995       0\n",
       "996       0\n",
       "997       1\n",
       "998       0\n",
       "999       1\n",
       "\n",
       "[1000 rows x 1 columns]"
      ]
     },
     "execution_count": 55,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_csv(resource_filename('deepbiome', 'tests/data/gender.csv'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ethnicity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>970</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>971</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>972</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>973</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>974</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>975</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>976</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>977</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>978</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>979</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>980</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>981</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>982</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>983</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>984</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>985</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>986</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>987</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>988</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>989</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>990</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>992</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>993</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>994</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     ethnicity\n",
       "0            4\n",
       "1            0\n",
       "2            0\n",
       "3            4\n",
       "4            4\n",
       "5            2\n",
       "6            3\n",
       "7            0\n",
       "8            2\n",
       "9            5\n",
       "10           2\n",
       "11           3\n",
       "12           5\n",
       "13           3\n",
       "14           0\n",
       "15           0\n",
       "16           4\n",
       "17           5\n",
       "18           1\n",
       "19           1\n",
       "20           4\n",
       "21           4\n",
       "22           1\n",
       "23           0\n",
       "24           1\n",
       "25           3\n",
       "26           1\n",
       "27           4\n",
       "28           4\n",
       "29           3\n",
       "..         ...\n",
       "970          1\n",
       "971          0\n",
       "972          0\n",
       "973          5\n",
       "974          3\n",
       "975          2\n",
       "976          1\n",
       "977          5\n",
       "978          4\n",
       "979          1\n",
       "980          0\n",
       "981          3\n",
       "982          3\n",
       "983          5\n",
       "984          5\n",
       "985          5\n",
       "986          3\n",
       "987          1\n",
       "988          2\n",
       "989          2\n",
       "990          0\n",
       "991          5\n",
       "992          3\n",
       "993          5\n",
       "994          5\n",
       "995          2\n",
       "996          2\n",
       "997          1\n",
       "998          0\n",
       "999          0\n",
       "\n",
       "[1000 rows x 1 columns]"
      ]
     },
     "execution_count": 56,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_csv(resource_filename('deepbiome', 'tests/data/ethnicity.csv'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For using the covariates, we have to set the `covariates_info` field in the configuration for the path informations. If we don't specify the `covariates_info`, than the DeepBiome will train the model without any covariates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "network_info_with_covariates = {\n",
    "    'architecture_info': {\n",
    "        'batch_normalization': 'False',\n",
    "        'drop_out': '0',\n",
    "        'weight_initial': 'glorot_uniform',\n",
    "        'weight_l1_penalty':'0.',\n",
    "        'weight_decay': 'phylogenetic_tree',\n",
    "    },\n",
    "    'model_info': {\n",
    "        'lr': '0.01',\n",
    "        'decay': '0.001',\n",
    "        'loss': 'binary_crossentropy',\n",
    "        'metrics': 'binary_accuracy, sensitivity, specificity, gmeasure',\n",
    "        'taxa_selection_metrics': 'sensitivity, specificity, gmeasure, accuracy',\n",
    "        'network_class': 'DeepBiomeNetwork',\n",
    "        'optimizer': 'adam',\n",
    "        'reader_class': 'MicroBiomeClassificationReader',\n",
    "        'normalizer': 'normalize_minmax',\n",
    "    },\n",
    "    'training_info': {\n",
    "        'epochs': '10',\n",
    "        'batch_size': '50', \n",
    "        'callbacks': 'ModelCheckpoint',\n",
    "        'monitor': 'val_loss',\n",
    "        'mode' : 'min',\n",
    "        'min_delta': '1e-7',\n",
    "    },\n",
    "    'validation_info': {\n",
    "        'batch_size': 'None', \n",
    "        'validation_size': '0.2'\n",
    "    },\n",
    "    'test_info': {\n",
    "        'batch_size': 'None'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "path_info_with_covariates = {\n",
    "    'data_info': {\n",
    "        'data_path': resource_filename('deepbiome', 'tests/data'),\n",
    "        'idx_path': resource_filename('deepbiome', 'tests/data/onefile_idx.csv'),\n",
    "        'tree_info_path': resource_filename('deepbiome', 'tests/data/genus48_dic.csv'),\n",
    "        'x_path': 'onefile_x.csv',\n",
    "        'y_path': 'classification_y.csv'\n",
    "    },\n",
    "    'model_info': {\n",
    "        'evaluation': 'eval.npy',\n",
    "        'history': 'hist.json',\n",
    "        'model_dir': './example_result/',\n",
    "        'weight': 'weight.h5'\n",
    "    },\n",
    "    'covariates_info':{\n",
    "        'continuous_variables':','.join([resource_filename('deepbiome', 'tests/data/ages.csv'),\n",
    "                                         resource_filename('deepbiome', 'tests/data/weights.csv')]),\n",
    "        'categorical_variables':','.join([resource_filename('deepbiome', 'tests/data/gender.csv'),\n",
    "                                         resource_filename('deepbiome', 'tests/data/ethnicity.csv')]),\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can use the same `deepbiome_train` function when we train the network with covariates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:109] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------1 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 1 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:529]     Phylum_with_covariates: 17\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Phylum', 'Order', 'Phylum_with_covariates', 'Number', 'Genus', 'Family', 'Class']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_4\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input (InputLayer)              (None, 48)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "l1_dense (Dense_with_tree)      (None, 40)           1960        input[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "l1_activation (Activation)      (None, 40)           0           l1_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l2_dense (Dense_with_tree)      (None, 23)           943         l1_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l2_activation (Activation)      (None, 23)           0           l2_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l3_dense (Dense_with_tree)      (None, 17)           408         l2_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l3_activation (Activation)      (None, 17)           0           l3_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l4_dense (Dense_with_tree)      (None, 9)            162         l3_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l4_activation (Activation)      (None, 9)            0           l4_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "covariates_input (InputLayer)   (None, 8)            0                                            \n",
      "__________________________________________________________________________________________________\n",
      "biome_covariates_concat (Concat (None, 17)           0           l4_activation[0][0]              \n",
      "                                                                 covariates_input[0][0]           \n",
      "__________________________________________________________________________________________________\n",
      "last_dense_h (Dense)            (None, 1)            18          biome_covariates_concat[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "p_hat (Activation)              (None, 1)            0           last_dense_h[0][0]               \n",
      "==================================================================================================\n",
      "Total params: 3,491\n",
      "Trainable params: 3,491\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 1 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 837us/step - loss: 11.0308 - binary_accuracy: 0.3156 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 126us/step - loss: 11.0308 - binary_accuracy: 0.3156 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 127us/step - loss: 11.0308 - binary_accuracy: 0.3156 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 128us/step - loss: 11.0308 - binary_accuracy: 0.3156 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 133us/step - loss: 11.0308 - binary_accuracy: 0.3156 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 132us/step - loss: 11.0308 - binary_accuracy: 0.3156 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 130us/step - loss: 11.0308 - binary_accuracy: 0.3156 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 11.0308 - binary_accuracy: 0.3156 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 128us/step - loss: 11.0308 - binary_accuracy: 0.3156 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 134us/step - loss: 11.0308 - binary_accuracy: 0.3156 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 3.102435827255249!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_0.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_0.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 4us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.00958395004272461!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [11.061043739318848, 0.3137499988079071, 0.0, 1.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 11us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008082866668701172!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [11.121485710144043, 0.3100000023841858, 0.0, 1.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.6776609420776367\n",
      "[root    |INFO|deepbiome.py:193] 1 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------2 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 2 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:529]     Phylum_with_covariates: 17\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Phylum', 'Order', 'Phylum_with_covariates', 'Number', 'Genus', 'Family', 'Class']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input (InputLayer)              (None, 48)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "l1_dense (Dense_with_tree)      (None, 40)           1960        input[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "l1_activation (Activation)      (None, 40)           0           l1_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l2_dense (Dense_with_tree)      (None, 23)           943         l1_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l2_activation (Activation)      (None, 23)           0           l2_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l3_dense (Dense_with_tree)      (None, 17)           408         l2_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l3_activation (Activation)      (None, 17)           0           l3_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l4_dense (Dense_with_tree)      (None, 9)            162         l3_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l4_activation (Activation)      (None, 9)            0           l4_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "covariates_input (InputLayer)   (None, 8)            0                                            \n",
      "__________________________________________________________________________________________________\n",
      "biome_covariates_concat (Concat (None, 17)           0           l4_activation[0][0]              \n",
      "                                                                 covariates_input[0][0]           \n",
      "__________________________________________________________________________________________________\n",
      "last_dense_h (Dense)            (None, 1)            18          biome_covariates_concat[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "p_hat (Activation)              (None, 1)            0           last_dense_h[0][0]               \n",
      "==================================================================================================\n",
      "Total params: 3,491\n",
      "Trainable params: 3,491\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 2 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 879us/step - loss: 11.5345 - binary_accuracy: 0.2844 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.8871 - val_binary_accuracy: 0.2625 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 130us/step - loss: 11.5345 - binary_accuracy: 0.2844 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.8871 - val_binary_accuracy: 0.2625 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 133us/step - loss: 11.5345 - binary_accuracy: 0.2844 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.8871 - val_binary_accuracy: 0.2625 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 11.5345 - binary_accuracy: 0.2844 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.8871 - val_binary_accuracy: 0.2625 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 142us/step - loss: 11.5345 - binary_accuracy: 0.2844 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.8871 - val_binary_accuracy: 0.2625 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 131us/step - loss: 11.5345 - binary_accuracy: 0.2844 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.8871 - val_binary_accuracy: 0.2625 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 134us/step - loss: 11.5345 - binary_accuracy: 0.2844 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.8871 - val_binary_accuracy: 0.2625 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 132us/step - loss: 11.5345 - binary_accuracy: 0.2844 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.8871 - val_binary_accuracy: 0.2625 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 133us/step - loss: 11.5345 - binary_accuracy: 0.2844 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.8871 - val_binary_accuracy: 0.2625 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 11.5345 - binary_accuracy: 0.2844 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.8871 - val_binary_accuracy: 0.2625 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 2.789111375808716!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_1.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_1.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008907556533813477!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [11.605029106140137, 0.2800000011920929, 0.0, 1.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 10us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008074760437011719!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [11.605029106140137, 0.2800000011920929, 0.0, 1.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.3124823570251465\n",
      "[root    |INFO|deepbiome.py:193] 2 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------3 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 3 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:529]     Phylum_with_covariates: 17\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Phylum', 'Order', 'Phylum_with_covariates', 'Number', 'Genus', 'Family', 'Class']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input (InputLayer)              (None, 48)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "l1_dense (Dense_with_tree)      (None, 40)           1960        input[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "l1_activation (Activation)      (None, 40)           0           l1_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l2_dense (Dense_with_tree)      (None, 23)           943         l1_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l2_activation (Activation)      (None, 23)           0           l2_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l3_dense (Dense_with_tree)      (None, 17)           408         l2_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l3_activation (Activation)      (None, 17)           0           l3_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l4_dense (Dense_with_tree)      (None, 9)            162         l3_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l4_activation (Activation)      (None, 9)            0           l4_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "covariates_input (InputLayer)   (None, 8)            0                                            \n",
      "__________________________________________________________________________________________________\n",
      "biome_covariates_concat (Concat (None, 17)           0           l4_activation[0][0]              \n",
      "                                                                 covariates_input[0][0]           \n",
      "__________________________________________________________________________________________________\n",
      "last_dense_h (Dense)            (None, 1)            18          biome_covariates_concat[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "p_hat (Activation)              (None, 1)            0           last_dense_h[0][0]               \n",
      "==================================================================================================\n",
      "Total params: 3,491\n",
      "Trainable params: 3,491\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 3 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 789us/step - loss: 2.0922 - binary_accuracy: 0.6016 - sensitivity: 0.7475 - specificity: 0.3025 - gmeasure: 0.4543 - val_loss: 1.7988 - val_binary_accuracy: 0.5875 - val_sensitivity: 0.6365 - val_specificity: 0.2676 - val_gmeasure: 0.3702\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 133us/step - loss: 1.6968 - binary_accuracy: 0.5891 - sensitivity: 0.7029 - specificity: 0.3340 - gmeasure: 0.4768 - val_loss: 1.4400 - val_binary_accuracy: 0.6062 - val_sensitivity: 0.6874 - val_specificity: 0.2127 - val_gmeasure: 0.3274\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 1.3282 - binary_accuracy: 0.6062 - sensitivity: 0.7481 - specificity: 0.3008 - gmeasure: 0.4541 - val_loss: 1.0837 - val_binary_accuracy: 0.5938 - val_sensitivity: 0.6673 - val_specificity: 0.2246 - val_gmeasure: 0.3341\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 133us/step - loss: 0.9808 - binary_accuracy: 0.6062 - sensitivity: 0.7493 - specificity: 0.2908 - gmeasure: 0.4493 - val_loss: 0.8089 - val_binary_accuracy: 0.6062 - val_sensitivity: 0.6874 - val_specificity: 0.2038 - val_gmeasure: 0.3268\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 0.7251 - binary_accuracy: 0.6328 - sensitivity: 0.8177 - specificity: 0.1974 - gmeasure: 0.3689 - val_loss: 0.6511 - val_binary_accuracy: 0.6625 - val_sensitivity: 0.8985 - val_specificity: 0.1026 - val_gmeasure: 0.1999\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 135us/step - loss: 0.6315 - binary_accuracy: 0.6922 - sensitivity: 0.9840 - specificity: 0.0200 - gmeasure: 0.0538 - val_loss: 0.6471 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 136us/step - loss: 0.6269 - binary_accuracy: 0.6953 - sensitivity: 0.9979 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6305 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 136us/step - loss: 0.6127 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6423 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 129us/step - loss: 0.6303 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6285 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 133us/step - loss: 0.6234 - binary_accuracy: 0.6953 - sensitivity: 0.9981 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6257 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 3.2341079711914062!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_2.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_2.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 4us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008728981018066406!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6302362680435181, 0.6974999904632568, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 12us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008752584457397461!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6931887865066528, 0.6549999713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.75136661529541\n",
      "[root    |INFO|deepbiome.py:193] 3 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------4 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 4 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:529]     Phylum_with_covariates: 17\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Phylum', 'Order', 'Phylum_with_covariates', 'Number', 'Genus', 'Family', 'Class']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input (InputLayer)              (None, 48)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "l1_dense (Dense_with_tree)      (None, 40)           1960        input[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "l1_activation (Activation)      (None, 40)           0           l1_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l2_dense (Dense_with_tree)      (None, 23)           943         l1_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l2_activation (Activation)      (None, 23)           0           l2_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l3_dense (Dense_with_tree)      (None, 17)           408         l2_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l3_activation (Activation)      (None, 17)           0           l3_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l4_dense (Dense_with_tree)      (None, 9)            162         l3_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l4_activation (Activation)      (None, 9)            0           l4_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "covariates_input (InputLayer)   (None, 8)            0                                            \n",
      "__________________________________________________________________________________________________\n",
      "biome_covariates_concat (Concat (None, 17)           0           l4_activation[0][0]              \n",
      "                                                                 covariates_input[0][0]           \n",
      "__________________________________________________________________________________________________\n",
      "last_dense_h (Dense)            (None, 1)            18          biome_covariates_concat[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "p_hat (Activation)              (None, 1)            0           last_dense_h[0][0]               \n",
      "==================================================================================================\n",
      "Total params: 3,491\n",
      "Trainable params: 3,491\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 4 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 839us/step - loss: 5.0069 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.9820 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 155us/step - loss: 5.0069 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.9820 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 136us/step - loss: 5.0069 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.9820 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 134us/step - loss: 5.0069 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.9820 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 140us/step - loss: 5.0069 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.9820 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 5.0069 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.9820 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 142us/step - loss: 5.0069 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.9820 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 5.0069 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.9820 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 5.0069 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.9820 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 5.0069 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 4.9820 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 2.90425443649292!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_3.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_3.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 4us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.012666940689086914!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [5.001923084259033, 0.6862499713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 12us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008844614028930664!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [4.942139148712158, 0.6899999976158142, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.453021287918091\n",
      "[root    |INFO|deepbiome.py:193] 4 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:147] -------5 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:158] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:159] Build network for 5 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:529]     Phylum_with_covariates: 17\n",
      "[root    |INFO|build_network.py:532] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:533] Phylogenetic_tree_dict info: ['Phylum', 'Order', 'Phylum_with_covariates', 'Number', 'Genus', 'Family', 'Class']\n",
      "[root    |INFO|build_network.py:534] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:544] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:557] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:566] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:567] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:568] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:650] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input (InputLayer)              (None, 48)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "l1_dense (Dense_with_tree)      (None, 40)           1960        input[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "l1_activation (Activation)      (None, 40)           0           l1_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l2_dense (Dense_with_tree)      (None, 23)           943         l1_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l2_activation (Activation)      (None, 23)           0           l2_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l3_dense (Dense_with_tree)      (None, 17)           408         l2_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l3_activation (Activation)      (None, 17)           0           l3_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l4_dense (Dense_with_tree)      (None, 9)            162         l3_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l4_activation (Activation)      (None, 9)            0           l4_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "covariates_input (InputLayer)   (None, 8)            0                                            \n",
      "__________________________________________________________________________________________________\n",
      "biome_covariates_concat (Concat (None, 17)           0           l4_activation[0][0]              \n",
      "                                                                 covariates_input[0][0]           \n",
      "__________________________________________________________________________________________________\n",
      "last_dense_h (Dense)            (None, 1)            18          biome_covariates_concat[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "p_hat (Activation)              (None, 1)            0           last_dense_h[0][0]               \n",
      "==================================================================================================\n",
      "Total params: 3,491\n",
      "Trainable params: 3,491\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:169] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:170] 5 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 817us/step - loss: 10.9553 - binary_accuracy: 0.3203 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 145us/step - loss: 10.9553 - binary_accuracy: 0.3203 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 136us/step - loss: 10.9553 - binary_accuracy: 0.3203 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 10.9553 - binary_accuracy: 0.3203 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 157us/step - loss: 10.9553 - binary_accuracy: 0.3203 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 135us/step - loss: 10.9553 - binary_accuracy: 0.3203 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 129us/step - loss: 10.9553 - binary_accuracy: 0.3203 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 136us/step - loss: 10.9553 - binary_accuracy: 0.3203 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 10.9553 - binary_accuracy: 0.3203 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 10.9553 - binary_accuracy: 0.3203 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 2.902122735977173!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |DEBUG|deepbiome.py:178] Save weight at ./example_result/weight_4.h5\n",
      "[root    |DEBUG|deepbiome.py:181] Save history at ./example_result/hist_4.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 4us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.009243249893188477!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [11.000598907470703, 0.3174999952316284, 0.0, 1.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 12us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008260250091552734!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [11.363256454467773, 0.29499998688697815, 0.0, 1.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:192] Compute time : 3.776646852493286\n",
      "[root    |INFO|deepbiome.py:193] 5 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:204] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:205] Train Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure']\n",
      "[root    |INFO|deepbiome.py:206]       mean : [7.85976622 0.45899999 0.4        0.6        0.        ]\n",
      "[root    |INFO|deepbiome.py:207]        std : [4.34910042 0.19062298 0.48989795 0.48989795 0.        ]\n",
      "[root    |INFO|deepbiome.py:208] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:209] Test Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure']\n",
      "[root    |INFO|deepbiome.py:210]       mean : [7.94501984 0.44599999 0.4        0.6        0.        ]\n",
      "[root    |INFO|deepbiome.py:211]        std : [4.39946112 0.1855101  0.48989795 0.48989795 0.        ]\n",
      "[root    |INFO|deepbiome.py:212] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:223] Total Computing Ended\n",
      "[root    |INFO|deepbiome.py:224] -----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "test_evaluation_with_cov, train_evaluation_with_cov, network_with_cov = deepbiome.deepbiome_train(log, network_info_with_covariates, \n",
    "                                                                                                  path_info_with_covariates,\n",
    "                                                                                                  number_of_fold=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The DeepBiome used the covariates at the latest hidden layer just before the last prediction layer (`biome_covariates_concat` layer in the above example)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input (InputLayer)              (None, 48)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "l1_dense (Dense_with_tree)      (None, 40)           1960        input[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "l1_activation (Activation)      (None, 40)           0           l1_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l2_dense (Dense_with_tree)      (None, 23)           943         l1_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l2_activation (Activation)      (None, 23)           0           l2_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l3_dense (Dense_with_tree)      (None, 17)           408         l2_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l3_activation (Activation)      (None, 17)           0           l3_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l4_dense (Dense_with_tree)      (None, 9)            162         l3_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l4_activation (Activation)      (None, 9)            0           l4_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "covariates_input (InputLayer)   (None, 8)            0                                            \n",
      "__________________________________________________________________________________________________\n",
      "biome_covariates_concat (Concat (None, 17)           0           l4_activation[0][0]              \n",
      "                                                                 covariates_input[0][0]           \n",
      "__________________________________________________________________________________________________\n",
      "last_dense_h (Dense)            (None, 1)            18          biome_covariates_concat[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "p_hat (Activation)              (None, 1)            0           last_dense_h[0][0]               \n",
      "==================================================================================================\n",
      "Total params: 3,491\n",
      "Trainable params: 3,491\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "network_with_cov.model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can analysis the effects of covariates by checking the trained weights of the last hidden layer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|<ipython-input-61-b8f281eeb9fd>:4] 5\n"
     ]
    }
   ],
   "source": [
    "weight_path = '%s/%s' % (prediction_path_info['model_info']['model_dir'], 'weight_0.h5')\n",
    "trained_weight_list = deepbiome.deepbiome_get_trained_weight(log, network_info_with_covariates, path_info_with_covariates,\n",
    "                                                             num_classes=1, weight_path=weight_path, verbose=False)\n",
    "log.info(len(trained_weight_list))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Firmicutes</th>\n",
       "      <td>-0.212716</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Actinobacteria</th>\n",
       "      <td>-0.155705</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bacteroidetes</th>\n",
       "      <td>0.256802</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fusobacteria</th>\n",
       "      <td>-0.147942</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Proteobacteria</th>\n",
       "      <td>-0.520855</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TM7</th>\n",
       "      <td>-0.330498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Spirochaetes</th>\n",
       "      <td>-0.493306</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OD1</th>\n",
       "      <td>0.753861</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cyanobacteria_Chloroplast</th>\n",
       "      <td>0.504374</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ages</th>\n",
       "      <td>-0.357479</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Weights</th>\n",
       "      <td>-0.282968</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gender_1</th>\n",
       "      <td>0.156479</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ethnicity_1</th>\n",
       "      <td>0.004094</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ethnicity_2</th>\n",
       "      <td>0.033449</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ethnicity_3</th>\n",
       "      <td>-0.179507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ethnicity_4</th>\n",
       "      <td>0.066022</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Ethnicity_5</th>\n",
       "      <td>0.201568</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  0\n",
       "Firmicutes                -0.212716\n",
       "Actinobacteria            -0.155705\n",
       "Bacteroidetes              0.256802\n",
       "Fusobacteria              -0.147942\n",
       "Proteobacteria            -0.520855\n",
       "TM7                       -0.330498\n",
       "Spirochaetes              -0.493306\n",
       "OD1                        0.753861\n",
       "Cyanobacteria_Chloroplast  0.504374\n",
       "Ages                      -0.357479\n",
       "Weights                   -0.282968\n",
       "Gender_1                   0.156479\n",
       "Ethnicity_1                0.004094\n",
       "Ethnicity_2                0.033449\n",
       "Ethnicity_3               -0.179507\n",
       "Ethnicity_4                0.066022\n",
       "Ethnicity_5                0.201568"
      ]
     },
     "execution_count": 62,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trained_weight_list[4]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below is the phylogenetic tree plot for the network using covariates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n5zlAo6uHm4cXg0ZMtDdzEQTBFoc/so8lH7zCXY+8hFgitveUsFgs7Pr9V/yDwojoZfs+FOSepLmp\nkR7R8TQ3NZKbdbzDY2OdXD4qhZSWwh2nQe8EzjccxdBkoK6qDp8gHxprG1m2cBkx/WPY/etuHnn7\nEeKHxpO+N526yjo0HhrmzpvbIR1iBsTw43s/dkjG1SLE3Y9ED0/C5WbEIgDH3NAvxaf/eYiXX/gb\n3y1beVXO5+TiFFc2UVzZ7BBZ3372DnPufazDcg7u3kJ0fD9cVK6X3rkLIxKJiDlV6z7jjj9x8vgx\nwnrE2N8XrFaCw3pyaO82SovyQSQiI/UwkdFx1FSVk5l+FH1zI0EhEWjcPDrxSq4/VAqJ3aDbZ006\nS9euHhu+3YDJYCLraBZWi5WKwgo2LdtE+r50fvv6NwoyCkgckciASQPQBeswNBnY8fMOJs2dRHBU\nMLnpuR3WQaVR4RPkQ25ax2VdCRRSBUl+kcztGcNMPy2RihZjfvUY2DeaXsFaXn3lpat7Yifn0Gyw\ncPhkhcPkfbd4Ibfe82iH5WzfuJqhY6Y4QKOuRdqRfXh4+iBYbeGsn79fzLYNq6gsL6G4MIddW9Zy\n15+eZujoyfQfOhZBEOg7YAQ11RWUFueTcmi3vZf6d4sXYjToO/NyrmlclKfnT5w26EqnQXcUgiBQ\nmleK0XB6AlRdVZ295aqL2oX1S9ZTmlfKb1//hnegN94B3jTVN3Hy8En8wv3IOJSBIAjom/TkZ+TT\nI7EHy/+7nLCYMAIjAx2iZ8yAGNL2pDlElqPQqb0YHxLD/ZFhjHCX4CHp3LyOV56+nbVrfmLbtq2d\nqsf1jCDAgYxSDCbH/C0s/fxdZs192CEtivfsPoh/z2ntWjQSm0xEffo2Pb7+CJHVsXkgHWXAsHFY\nrRYWLXyFA7s2c/L4MWbe+SByhYKInrGoNW5UVpTa968oK6bPgOHIZAr+99EbNDU28PGCFwEoLS6g\ntDgfo9HQSVdzbaM6Y1Kl3bS7KZ2Z7h3h549/ZtJc28jF5f9dTmjvUFZ/uprbn72dlR+txEPngcVs\noSCjgOBewai0KmIHxbLk9SUYDUayU7KZ9dgsFj62EIlEQkz/GNZ8toYefXrQUNPAgEmOb2cYMyCG\nHxb+YNe7s5CIJfTyCiLRXY2fxMTl1I1fDTZ9+zIuPUbTlJuHzN+fC7aac3JFSM+voqLWccbg288W\n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\nRK5CYII=\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 63,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "phylum_color = ['lightsteelblue', \n",
    "                'moccasin',\n",
    "                'darkseagreen',\n",
    "                'khaki',\n",
    "                'mediumturquoise',\n",
    "                'lightblue',\n",
    "                'thistle',\n",
    "                'tan',\n",
    "                'mistyrose',\n",
    "                'honeydew',\n",
    "                'peachpuff',\n",
    "                'peru',\n",
    "                'saddlebrown',\n",
    "                'orchid',\n",
    "                'lightgray',\n",
    "                'gray',\n",
    "                'azure',\n",
    "                'lightcyan'\n",
    "                ]\n",
    "\n",
    "img = deepbiome.deepbiome_draw_phylogenetic_tree(log, network_info_with_covariates, path_info_with_covariates, num_classes=1,\n",
    "                                                 file_name='%%inline', img_w=500, branch_vertical_margin=20, \n",
    "                                                 arc_start=0, arc_span=360, \n",
    "                                                 node_name_on=True, name_fsize=200, \n",
    "                                                 tree_weight_on=True, tree_weight=trained_weight_list, \n",
    "                                                 tree_weight_classes = ['Genus', 'Family', 'Order', 'Class', 'Phylum', 'Disease'],\n",
    "                                                 weight_opacity=0.8, weight_max_radios=100, \n",
    "                                                 phylum_background_color_on=True, phylum_color=phylum_color, phylum_color_legend=True,\n",
    "                                                 verbose=False)\n",
    "img"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
