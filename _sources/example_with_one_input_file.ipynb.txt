{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Example : k fold cross-validation with an input file \n",
    "\n",
    "DeepBiome package takes microbiome abundance data as input and uses the phylogenetic taxonomy to guide the decision of the optimal number of layers and neurons in the deep learning architecture.\n",
    "\n",
    "To use DeepBiome, you can experiment (1) __k times repetition__ or (2) __k fold cross-validation__.\n",
    "For each experiment, we asuume that the dataset is given by\n",
    "- __A list of k input files for k times repetition.__\n",
    "- __One input file for k fold cross-validation.__\n",
    "\n",
    "This notebook contains an example of (2) __k fold cross-validation__ for the deep neural netowrk using deepbiome."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Load library\n",
    "\n",
    "First, we load the DeepBiome package. The DeepBiome package is built on the tensorflow and keras library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import logging\n",
    "import json\n",
    "from pkg_resources import resource_filename\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from deepbiome import deepbiome"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Prepare the dataset\n",
    "\n",
    "In this example, we assume that we have __one input file for k times repetition.__\n",
    "\n",
    "DeepBiome needs 3 data files as follows:\n",
    "1. **the tree information**\n",
    "1. **the input file**\n",
    "1. **y**\n",
    "\n",
    "For `k` fold cross-validation, we can use an input file.\n",
    "In addition, we can set **the training index for each fold**. If we set the index file, DeepBiome build the training set for each fold based on each fold index in the index file. If not, DeepBiome will generate the index file locally.\n",
    "        \n",
    "Eath data should have the csv format as follow:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example of the tree information\n",
    "\n",
    "First we need a file about the phylogenetic tree information. This tree information file should have the format below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Genus</th>\n",
       "      <th>Family</th>\n",
       "      <th>Order</th>\n",
       "      <th>Class</th>\n",
       "      <th>Phylum</th>\n",
       "      <th>Domain</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Streptococcus</td>\n",
       "      <td>Streptococcaceae</td>\n",
       "      <td>Lactobacillales</td>\n",
       "      <td>Bacilli</td>\n",
       "      <td>Firmicutes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Tropheryma</td>\n",
       "      <td>Cellulomonadaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Veillonella</td>\n",
       "      <td>Veillonellaceae</td>\n",
       "      <td>Selenomonadales</td>\n",
       "      <td>Negativicutes</td>\n",
       "      <td>Firmicutes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Actinomyces</td>\n",
       "      <td>Actinomycetaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Flavobacterium</td>\n",
       "      <td>Flavobacteriaceae</td>\n",
       "      <td>Flavobacteriales</td>\n",
       "      <td>Flavobacteria</td>\n",
       "      <td>Bacteroidetes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Prevotella</td>\n",
       "      <td>Prevotellaceae</td>\n",
       "      <td>Bacteroidales</td>\n",
       "      <td>Bacteroidia</td>\n",
       "      <td>Bacteroidetes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Porphyromonas</td>\n",
       "      <td>Porphyromonadaceae</td>\n",
       "      <td>Bacteroidales</td>\n",
       "      <td>Bacteroidia</td>\n",
       "      <td>Bacteroidetes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Parvimonas</td>\n",
       "      <td>Clostridiales_Incertae_Sedis_XI</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Fusobacterium</td>\n",
       "      <td>Fusobacteriaceae</td>\n",
       "      <td>Fusobacteriales</td>\n",
       "      <td>Fusobacteria</td>\n",
       "      <td>Fusobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Propionibacterium</td>\n",
       "      <td>Propionibacteriaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Gemella</td>\n",
       "      <td>Bacillales_Incertae_Sedis_XI</td>\n",
       "      <td>Bacillales</td>\n",
       "      <td>Bacilli</td>\n",
       "      <td>Firmicutes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Rothia</td>\n",
       "      <td>Micrococcaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Granulicatella</td>\n",
       "      <td>Carnobacteriaceae</td>\n",
       "      <td>Lactobacillales</td>\n",
       "      <td>Bacilli</td>\n",
       "      <td>Firmicutes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Neisseria</td>\n",
       "      <td>Neisseriaceae</td>\n",
       "      <td>Neisseriales</td>\n",
       "      <td>Betaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Lactobacillus</td>\n",
       "      <td>Lactobacillaceae</td>\n",
       "      <td>Lactobacillales</td>\n",
       "      <td>Bacilli</td>\n",
       "      <td>Firmicutes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Megasphaera</td>\n",
       "      <td>Veillonellaceae</td>\n",
       "      <td>Selenomonadales</td>\n",
       "      <td>Negativicutes</td>\n",
       "      <td>Firmicutes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Catonella</td>\n",
       "      <td>Lachnospiraceae</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Atopobium</td>\n",
       "      <td>Coriobacteriaceae</td>\n",
       "      <td>Coriobacteriales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Campylobacter</td>\n",
       "      <td>Campylobacteraceae</td>\n",
       "      <td>Campylobacterales</td>\n",
       "      <td>Epsilonproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Capnocytophaga</td>\n",
       "      <td>Flavobacteriaceae</td>\n",
       "      <td>Flavobacteriales</td>\n",
       "      <td>Flavobacteria</td>\n",
       "      <td>Bacteroidetes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Solobacterium</td>\n",
       "      <td>Erysipelotrichaceae</td>\n",
       "      <td>Erysipelotrichales</td>\n",
       "      <td>Erysipelotrichia</td>\n",
       "      <td>Firmicutes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Moryella</td>\n",
       "      <td>Lachnospiraceae</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>TM7_genera_incertae_sedis</td>\n",
       "      <td>TM7_genera_incertae_sedis</td>\n",
       "      <td>TM7_genera_incertae_sedis</td>\n",
       "      <td>TM7_genera_incertae_sedis</td>\n",
       "      <td>TM7</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Staphylococcus</td>\n",
       "      <td>Staphylococcaceae</td>\n",
       "      <td>Bacillales</td>\n",
       "      <td>Bacilli</td>\n",
       "      <td>Firmicutes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Filifactor</td>\n",
       "      <td>Peptostreptococcaceae</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Oribacterium</td>\n",
       "      <td>Lachnospiraceae</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Burkholderia</td>\n",
       "      <td>Burkholderiaceae</td>\n",
       "      <td>Burkholderiales</td>\n",
       "      <td>Betaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Sneathia</td>\n",
       "      <td>Leptotrichiaceae</td>\n",
       "      <td>Fusobacteriales</td>\n",
       "      <td>Fusobacteria</td>\n",
       "      <td>Fusobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Treponema</td>\n",
       "      <td>Spirochaetaceae</td>\n",
       "      <td>Spirochaetales</td>\n",
       "      <td>Spirochaetes</td>\n",
       "      <td>Spirochaetes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Moraxella</td>\n",
       "      <td>Moraxellaceae</td>\n",
       "      <td>Pseudomonadales</td>\n",
       "      <td>Gammaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>Haemophilus</td>\n",
       "      <td>Pasteurellaceae</td>\n",
       "      <td>Pasteurellales</td>\n",
       "      <td>Gammaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>Selenomonas</td>\n",
       "      <td>Veillonellaceae</td>\n",
       "      <td>Selenomonadales</td>\n",
       "      <td>Negativicutes</td>\n",
       "      <td>Firmicutes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>Corynebacterium</td>\n",
       "      <td>Corynebacteriaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>Rhizobium</td>\n",
       "      <td>Rhizobiaceae</td>\n",
       "      <td>Rhizobiales</td>\n",
       "      <td>Alphaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>Bradyrhizobium</td>\n",
       "      <td>Bradyrhizobiaceae</td>\n",
       "      <td>Rhizobiales</td>\n",
       "      <td>Alphaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>Methylobacterium</td>\n",
       "      <td>Methylobacteriaceae</td>\n",
       "      <td>Rhizobiales</td>\n",
       "      <td>Alphaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>OD1_genera_incertae_sedis</td>\n",
       "      <td>OD1_genera_incertae_sedis</td>\n",
       "      <td>OD1_genera_incertae_sedis</td>\n",
       "      <td>OD1_genera_incertae_sedis</td>\n",
       "      <td>OD1</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>Finegoldia</td>\n",
       "      <td>Clostridiales_Incertae_Sedis_XI</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>Microbacterium</td>\n",
       "      <td>Microbacteriaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>Sphingomonas</td>\n",
       "      <td>Sphingomonadaceae</td>\n",
       "      <td>Sphingomonadales</td>\n",
       "      <td>Alphaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>Chryseobacterium</td>\n",
       "      <td>Flavobacteriaceae</td>\n",
       "      <td>Flavobacteriales</td>\n",
       "      <td>Flavobacteria</td>\n",
       "      <td>Bacteroidetes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>Bacteroides</td>\n",
       "      <td>Bacteroidaceae</td>\n",
       "      <td>Bacteroidales</td>\n",
       "      <td>Bacteroidia</td>\n",
       "      <td>Bacteroidetes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>Bdellovibrio</td>\n",
       "      <td>Bdellovibrionaceae</td>\n",
       "      <td>Bdellovibrionales</td>\n",
       "      <td>Deltaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>Streptophyta</td>\n",
       "      <td>Chloroplast</td>\n",
       "      <td>Chloroplast</td>\n",
       "      <td>Chloroplast</td>\n",
       "      <td>Cyanobacteria_Chloroplast</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>Lachnospiracea_incertae_sedis</td>\n",
       "      <td>Lachnospiraceae</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>Paracoccus</td>\n",
       "      <td>Rhodobacteraceae</td>\n",
       "      <td>Rhodobacterales</td>\n",
       "      <td>Alphaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>Fastidiosipila</td>\n",
       "      <td>Ruminococcaceae</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>Pseudonocardia</td>\n",
       "      <td>Pseudonocardiaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Bacteria</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            Genus                           Family  \\\n",
       "0                   Streptococcus                 Streptococcaceae   \n",
       "1                      Tropheryma                Cellulomonadaceae   \n",
       "2                     Veillonella                  Veillonellaceae   \n",
       "3                     Actinomyces                 Actinomycetaceae   \n",
       "4                  Flavobacterium                Flavobacteriaceae   \n",
       "5                      Prevotella                   Prevotellaceae   \n",
       "6                   Porphyromonas               Porphyromonadaceae   \n",
       "7                      Parvimonas  Clostridiales_Incertae_Sedis_XI   \n",
       "8                   Fusobacterium                 Fusobacteriaceae   \n",
       "9               Propionibacterium             Propionibacteriaceae   \n",
       "10                        Gemella     Bacillales_Incertae_Sedis_XI   \n",
       "11                         Rothia                   Micrococcaceae   \n",
       "12                 Granulicatella                Carnobacteriaceae   \n",
       "13                      Neisseria                    Neisseriaceae   \n",
       "14                  Lactobacillus                 Lactobacillaceae   \n",
       "15                    Megasphaera                  Veillonellaceae   \n",
       "16                      Catonella                  Lachnospiraceae   \n",
       "17                      Atopobium                Coriobacteriaceae   \n",
       "18                  Campylobacter               Campylobacteraceae   \n",
       "19                 Capnocytophaga                Flavobacteriaceae   \n",
       "20                  Solobacterium              Erysipelotrichaceae   \n",
       "21                       Moryella                  Lachnospiraceae   \n",
       "22      TM7_genera_incertae_sedis        TM7_genera_incertae_sedis   \n",
       "23                 Staphylococcus                Staphylococcaceae   \n",
       "24                     Filifactor            Peptostreptococcaceae   \n",
       "25                   Oribacterium                  Lachnospiraceae   \n",
       "26                   Burkholderia                 Burkholderiaceae   \n",
       "27                       Sneathia                 Leptotrichiaceae   \n",
       "28                      Treponema                  Spirochaetaceae   \n",
       "29                      Moraxella                    Moraxellaceae   \n",
       "30                    Haemophilus                  Pasteurellaceae   \n",
       "31                    Selenomonas                  Veillonellaceae   \n",
       "32                Corynebacterium               Corynebacteriaceae   \n",
       "33                      Rhizobium                     Rhizobiaceae   \n",
       "34                 Bradyrhizobium                Bradyrhizobiaceae   \n",
       "35               Methylobacterium              Methylobacteriaceae   \n",
       "36      OD1_genera_incertae_sedis        OD1_genera_incertae_sedis   \n",
       "37                     Finegoldia  Clostridiales_Incertae_Sedis_XI   \n",
       "38                 Microbacterium                Microbacteriaceae   \n",
       "39                   Sphingomonas                Sphingomonadaceae   \n",
       "40               Chryseobacterium                Flavobacteriaceae   \n",
       "41                    Bacteroides                   Bacteroidaceae   \n",
       "42                   Bdellovibrio               Bdellovibrionaceae   \n",
       "43                   Streptophyta                      Chloroplast   \n",
       "44  Lachnospiracea_incertae_sedis                  Lachnospiraceae   \n",
       "45                     Paracoccus                 Rhodobacteraceae   \n",
       "46                 Fastidiosipila                  Ruminococcaceae   \n",
       "47                 Pseudonocardia               Pseudonocardiaceae   \n",
       "\n",
       "                        Order                      Class  \\\n",
       "0             Lactobacillales                    Bacilli   \n",
       "1             Actinomycetales             Actinobacteria   \n",
       "2             Selenomonadales              Negativicutes   \n",
       "3             Actinomycetales             Actinobacteria   \n",
       "4            Flavobacteriales              Flavobacteria   \n",
       "5               Bacteroidales                Bacteroidia   \n",
       "6               Bacteroidales                Bacteroidia   \n",
       "7               Clostridiales                 Clostridia   \n",
       "8             Fusobacteriales               Fusobacteria   \n",
       "9             Actinomycetales             Actinobacteria   \n",
       "10                 Bacillales                    Bacilli   \n",
       "11            Actinomycetales             Actinobacteria   \n",
       "12            Lactobacillales                    Bacilli   \n",
       "13               Neisseriales         Betaproteobacteria   \n",
       "14            Lactobacillales                    Bacilli   \n",
       "15            Selenomonadales              Negativicutes   \n",
       "16              Clostridiales                 Clostridia   \n",
       "17           Coriobacteriales             Actinobacteria   \n",
       "18          Campylobacterales      Epsilonproteobacteria   \n",
       "19           Flavobacteriales              Flavobacteria   \n",
       "20         Erysipelotrichales           Erysipelotrichia   \n",
       "21              Clostridiales                 Clostridia   \n",
       "22  TM7_genera_incertae_sedis  TM7_genera_incertae_sedis   \n",
       "23                 Bacillales                    Bacilli   \n",
       "24              Clostridiales                 Clostridia   \n",
       "25              Clostridiales                 Clostridia   \n",
       "26            Burkholderiales         Betaproteobacteria   \n",
       "27            Fusobacteriales               Fusobacteria   \n",
       "28             Spirochaetales               Spirochaetes   \n",
       "29            Pseudomonadales        Gammaproteobacteria   \n",
       "30             Pasteurellales        Gammaproteobacteria   \n",
       "31            Selenomonadales              Negativicutes   \n",
       "32            Actinomycetales             Actinobacteria   \n",
       "33                Rhizobiales        Alphaproteobacteria   \n",
       "34                Rhizobiales        Alphaproteobacteria   \n",
       "35                Rhizobiales        Alphaproteobacteria   \n",
       "36  OD1_genera_incertae_sedis  OD1_genera_incertae_sedis   \n",
       "37              Clostridiales                 Clostridia   \n",
       "38            Actinomycetales             Actinobacteria   \n",
       "39           Sphingomonadales        Alphaproteobacteria   \n",
       "40           Flavobacteriales              Flavobacteria   \n",
       "41              Bacteroidales                Bacteroidia   \n",
       "42          Bdellovibrionales        Deltaproteobacteria   \n",
       "43                Chloroplast                Chloroplast   \n",
       "44              Clostridiales                 Clostridia   \n",
       "45            Rhodobacterales        Alphaproteobacteria   \n",
       "46              Clostridiales                 Clostridia   \n",
       "47            Actinomycetales             Actinobacteria   \n",
       "\n",
       "                       Phylum    Domain  \n",
       "0                  Firmicutes  Bacteria  \n",
       "1              Actinobacteria  Bacteria  \n",
       "2                  Firmicutes  Bacteria  \n",
       "3              Actinobacteria  Bacteria  \n",
       "4               Bacteroidetes  Bacteria  \n",
       "5               Bacteroidetes  Bacteria  \n",
       "6               Bacteroidetes  Bacteria  \n",
       "7                  Firmicutes  Bacteria  \n",
       "8                Fusobacteria  Bacteria  \n",
       "9              Actinobacteria  Bacteria  \n",
       "10                 Firmicutes  Bacteria  \n",
       "11             Actinobacteria  Bacteria  \n",
       "12                 Firmicutes  Bacteria  \n",
       "13             Proteobacteria  Bacteria  \n",
       "14                 Firmicutes  Bacteria  \n",
       "15                 Firmicutes  Bacteria  \n",
       "16                 Firmicutes  Bacteria  \n",
       "17             Actinobacteria  Bacteria  \n",
       "18             Proteobacteria  Bacteria  \n",
       "19              Bacteroidetes  Bacteria  \n",
       "20                 Firmicutes  Bacteria  \n",
       "21                 Firmicutes  Bacteria  \n",
       "22                        TM7  Bacteria  \n",
       "23                 Firmicutes  Bacteria  \n",
       "24                 Firmicutes  Bacteria  \n",
       "25                 Firmicutes  Bacteria  \n",
       "26             Proteobacteria  Bacteria  \n",
       "27               Fusobacteria  Bacteria  \n",
       "28               Spirochaetes  Bacteria  \n",
       "29             Proteobacteria  Bacteria  \n",
       "30             Proteobacteria  Bacteria  \n",
       "31                 Firmicutes  Bacteria  \n",
       "32             Actinobacteria  Bacteria  \n",
       "33             Proteobacteria  Bacteria  \n",
       "34             Proteobacteria  Bacteria  \n",
       "35             Proteobacteria  Bacteria  \n",
       "36                        OD1  Bacteria  \n",
       "37                 Firmicutes  Bacteria  \n",
       "38             Actinobacteria  Bacteria  \n",
       "39             Proteobacteria  Bacteria  \n",
       "40              Bacteroidetes  Bacteria  \n",
       "41              Bacteroidetes  Bacteria  \n",
       "42             Proteobacteria  Bacteria  \n",
       "43  Cyanobacteria_Chloroplast  Bacteria  \n",
       "44                 Firmicutes  Bacteria  \n",
       "45             Proteobacteria  Bacteria  \n",
       "46                 Firmicutes  Bacteria  \n",
       "47             Actinobacteria  Bacteria  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tree_information = pd.read_csv(resource_filename('deepbiome', 'tests/data/genus48_dic.csv'))\n",
    "tree_information"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example of the input file\n",
    "\n",
    "Below is an example of the input file.\n",
    "This example has 1000 samples' microbiome abandunce."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Streptococcus</th>\n",
       "      <th>Tropheryma</th>\n",
       "      <th>Veillonella</th>\n",
       "      <th>Actinomyces</th>\n",
       "      <th>Flavobacterium</th>\n",
       "      <th>Prevotella</th>\n",
       "      <th>Porphyromonas</th>\n",
       "      <th>Parvimonas</th>\n",
       "      <th>Fusobacterium</th>\n",
       "      <th>Propionibacterium</th>\n",
       "      <th>...</th>\n",
       "      <th>Microbacterium</th>\n",
       "      <th>Sphingomonas</th>\n",
       "      <th>Chryseobacterium</th>\n",
       "      <th>Bacteroides</th>\n",
       "      <th>Bdellovibrio</th>\n",
       "      <th>Streptophyta</th>\n",
       "      <th>Lachnospiracea_incertae_sedis</th>\n",
       "      <th>Paracoccus</th>\n",
       "      <th>Fastidiosipila</th>\n",
       "      <th>Pseudonocardia</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>841</td>\n",
       "      <td>0</td>\n",
       "      <td>813</td>\n",
       "      <td>505</td>\n",
       "      <td>5</td>\n",
       "      <td>3224</td>\n",
       "      <td>0</td>\n",
       "      <td>362</td>\n",
       "      <td>11</td>\n",
       "      <td>65</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>87</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2133</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1445</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>573</td>\n",
       "      <td>0</td>\n",
       "      <td>1278</td>\n",
       "      <td>82</td>\n",
       "      <td>85</td>\n",
       "      <td>69</td>\n",
       "      <td>154</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3638</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1259</td>\n",
       "      <td>0</td>\n",
       "      <td>805</td>\n",
       "      <td>650</td>\n",
       "      <td>0</td>\n",
       "      <td>1088</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>74</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>39</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>982</td>\n",
       "      <td>0</td>\n",
       "      <td>327</td>\n",
       "      <td>594</td>\n",
       "      <td>0</td>\n",
       "      <td>960</td>\n",
       "      <td>81</td>\n",
       "      <td>19</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>157</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1162</td>\n",
       "      <td>0</td>\n",
       "      <td>130</td>\n",
       "      <td>969</td>\n",
       "      <td>163</td>\n",
       "      <td>1515</td>\n",
       "      <td>167</td>\n",
       "      <td>4</td>\n",
       "      <td>162</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3945</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 48 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Streptococcus  Tropheryma  Veillonella  Actinomyces  Flavobacterium  \\\n",
       "0            841           0          813          505               5   \n",
       "1           1445           0            1          573               0   \n",
       "2           1259           0          805          650               0   \n",
       "3            982           0          327          594               0   \n",
       "4           1162           0          130          969             163   \n",
       "\n",
       "   Prevotella  Porphyromonas  Parvimonas  Fusobacterium  Propionibacterium  \\\n",
       "0        3224              0         362             11                 65   \n",
       "1        1278             82          85             69                154   \n",
       "2        1088              0           0             74                  0   \n",
       "3         960             81          19              9                  0   \n",
       "4        1515            167           4            162                  3   \n",
       "\n",
       "   ...  Microbacterium  Sphingomonas  Chryseobacterium  Bacteroides  \\\n",
       "0  ...               0            87                 0            0   \n",
       "1  ...               0             1                 2            0   \n",
       "2  ...               0             2                 8            1   \n",
       "3  ...             157             1                 0            4   \n",
       "4  ...               0             9                 0            0   \n",
       "\n",
       "   Bdellovibrio  Streptophyta  Lachnospiracea_incertae_sedis  Paracoccus  \\\n",
       "0             0             0                              0           0   \n",
       "1             0             0                              0           0   \n",
       "2            39             0                              0           0   \n",
       "3            60             0                              0           0   \n",
       "4             0             0                             60           0   \n",
       "\n",
       "   Fastidiosipila  Pseudonocardia  \n",
       "0               0            2133  \n",
       "1               0            3638  \n",
       "2               0            3445  \n",
       "3               0            3507  \n",
       "4               0            3945  \n",
       "\n",
       "[5 rows x 48 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = pd.read_csv(resource_filename('deepbiome', 'tests/data/onefile_x.csv'))\n",
    "x.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Streptococcus</th>\n",
       "      <th>Tropheryma</th>\n",
       "      <th>Veillonella</th>\n",
       "      <th>Actinomyces</th>\n",
       "      <th>Flavobacterium</th>\n",
       "      <th>Prevotella</th>\n",
       "      <th>Porphyromonas</th>\n",
       "      <th>Parvimonas</th>\n",
       "      <th>Fusobacterium</th>\n",
       "      <th>Propionibacterium</th>\n",
       "      <th>...</th>\n",
       "      <th>Microbacterium</th>\n",
       "      <th>Sphingomonas</th>\n",
       "      <th>Chryseobacterium</th>\n",
       "      <th>Bacteroides</th>\n",
       "      <th>Bdellovibrio</th>\n",
       "      <th>Streptophyta</th>\n",
       "      <th>Lachnospiracea_incertae_sedis</th>\n",
       "      <th>Paracoccus</th>\n",
       "      <th>Fastidiosipila</th>\n",
       "      <th>Pseudonocardia</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>1401</td>\n",
       "      <td>4</td>\n",
       "      <td>30</td>\n",
       "      <td>526</td>\n",
       "      <td>0</td>\n",
       "      <td>923</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>127</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4470</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>2655</td>\n",
       "      <td>6</td>\n",
       "      <td>106</td>\n",
       "      <td>74</td>\n",
       "      <td>0</td>\n",
       "      <td>952</td>\n",
       "      <td>76</td>\n",
       "      <td>13</td>\n",
       "      <td>158</td>\n",
       "      <td>125</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2826</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>335</td>\n",
       "      <td>0</td>\n",
       "      <td>71</td>\n",
       "      <td>259</td>\n",
       "      <td>67</td>\n",
       "      <td>718</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>167</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>246</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6527</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>649</td>\n",
       "      <td>69</td>\n",
       "      <td>966</td>\n",
       "      <td>1227</td>\n",
       "      <td>0</td>\n",
       "      <td>508</td>\n",
       "      <td>2</td>\n",
       "      <td>30</td>\n",
       "      <td>550</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4402</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>1258</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1119</td>\n",
       "      <td>0</td>\n",
       "      <td>2348</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>137</td>\n",
       "      <td>176</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2585</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 48 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Streptococcus  Tropheryma  Veillonella  Actinomyces  Flavobacterium  \\\n",
       "995           1401           4           30          526               0   \n",
       "996           2655           6          106           74               0   \n",
       "997            335           0           71          259              67   \n",
       "998            649          69          966         1227               0   \n",
       "999           1258           0            0         1119               0   \n",
       "\n",
       "     Prevotella  Porphyromonas  Parvimonas  Fusobacterium  Propionibacterium  \\\n",
       "995         923             25           0            127                  0   \n",
       "996         952             76          13            158                125   \n",
       "997         718              1           4              4                167   \n",
       "998         508              2          30            550                  0   \n",
       "999        2348             25           0            137                176   \n",
       "\n",
       "     ...  Microbacterium  Sphingomonas  Chryseobacterium  Bacteroides  \\\n",
       "995  ...               0             0                 7            0   \n",
       "996  ...               0             2                 0            0   \n",
       "997  ...               0           246                 0            0   \n",
       "998  ...               0             0                 0            0   \n",
       "999  ...               0             2                 0            0   \n",
       "\n",
       "     Bdellovibrio  Streptophyta  Lachnospiracea_incertae_sedis  Paracoccus  \\\n",
       "995             0             0                              0           0   \n",
       "996             0             0                              0           0   \n",
       "997             6             0                              0           0   \n",
       "998             0             6                              0           0   \n",
       "999             0             0                              0           0   \n",
       "\n",
       "     Fastidiosipila  Pseudonocardia  \n",
       "995               0            4470  \n",
       "996               0            2826  \n",
       "997               0            6527  \n",
       "998               0            4402  \n",
       "999               0            2585  \n",
       "\n",
       "[5 rows x 48 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example of the Y (regression)\n",
    "\n",
    "This is an example of the output file for regression problem."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4.997270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.004092</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5.485126</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5.489590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.500001</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         x1\n",
       "0  4.997270\n",
       "1  5.004092\n",
       "2  5.485126\n",
       "3  5.489590\n",
       "4  1.500001"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = pd.read_csv(resource_filename('deepbiome', 'tests/data/onefile_regression_y.csv'))\n",
    "y.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>2.609926</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>5.488959</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>3.498418</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>5.486107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>5.319623</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           x1\n",
       "995  2.609926\n",
       "996  5.488959\n",
       "997  3.498418\n",
       "998  5.486107\n",
       "999  5.319623"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For one repetition, the deepbiome will use the one column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    4.997270\n",
       "1    5.004092\n",
       "2    5.485126\n",
       "3    5.489590\n",
       "4    1.500001\n",
       "Name: x1, dtype: float64"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.iloc[:,0].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "995    2.609926\n",
       "996    5.488959\n",
       "997    3.498418\n",
       "998    5.486107\n",
       "999    5.319623\n",
       "Name: x1, dtype: float64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.iloc[:,0].tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example of the Y (classification)\n",
    "\n",
    "This is an example of the output file for classification problem. Below example file has 1000 samples in rows, 1000 repetition in columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>V1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    V1\n",
       "0  1.0\n",
       "1  1.0\n",
       "2  0.0\n",
       "3  0.0\n",
       "4  1.0"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = pd.read_csv(resource_filename('deepbiome', 'tests/data/onefile_classification_y.csv'))\n",
    "y.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>V1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      V1\n",
       "995  1.0\n",
       "996  0.0\n",
       "997  1.0\n",
       "998  0.0\n",
       "999  1.0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For one repetition, DeepBiome will use the one column."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    1.0\n",
       "1    1.0\n",
       "2    0.0\n",
       "3    0.0\n",
       "4    1.0\n",
       "Name: V1, dtype: float64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.iloc[:,0].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "995    1.0\n",
       "996    0.0\n",
       "997    1.0\n",
       "998    0.0\n",
       "999    1.0\n",
       "Name: V1, dtype: float64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.iloc[:,0].tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exmple of the training index file for `k` fold cross-validation\n",
    "\n",
    "For each fold, we have to set the training and test set. If the index file is given, DeepBiome sets the training set and test set based on the index file for 5 fold cross-validation. Below is the example of the index file. Each column has the training indices for each fold. DeepBiome will only use the samples in this index set for training."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   0  1  2  3  4\n",
       "0  0  0  2  0  0\n",
       "1  1  1  3  1  1\n",
       "2  2  2  4  2  3\n",
       "3  5  3  6  3  4\n",
       "4  6  4  8  4  5"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "idxs = pd.read_csv(resource_filename('deepbiome', 'tests/data/onefile_idx.csv'), dtype=np.int)\n",
    "idxs.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>795</th>\n",
       "      <td>993</td>\n",
       "      <td>995</td>\n",
       "      <td>993</td>\n",
       "      <td>994</td>\n",
       "      <td>995</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>796</th>\n",
       "      <td>994</td>\n",
       "      <td>996</td>\n",
       "      <td>994</td>\n",
       "      <td>995</td>\n",
       "      <td>996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>797</th>\n",
       "      <td>996</td>\n",
       "      <td>997</td>\n",
       "      <td>995</td>\n",
       "      <td>996</td>\n",
       "      <td>997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>798</th>\n",
       "      <td>998</td>\n",
       "      <td>998</td>\n",
       "      <td>997</td>\n",
       "      <td>997</td>\n",
       "      <td>998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>799</th>\n",
       "      <td>999</td>\n",
       "      <td>999</td>\n",
       "      <td>998</td>\n",
       "      <td>999</td>\n",
       "      <td>999</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       0    1    2    3    4\n",
       "795  993  995  993  994  995\n",
       "796  994  996  994  995  996\n",
       "797  996  997  995  996  997\n",
       "798  998  998  997  997  998\n",
       "799  999  999  998  999  999"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "idxs.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below is the index set for 1st fold. From 1000 samples above, it uses 800 samples for training."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    0\n",
       "1    1\n",
       "2    2\n",
       "3    5\n",
       "4    6\n",
       "Name: 0, dtype: int64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "idxs.iloc[:,0].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "795    993\n",
       "796    994\n",
       "797    996\n",
       "798    998\n",
       "799    999\n",
       "Name: 0, dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "idxs.iloc[:,0].tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Prepare the configuration\n",
    "\n",
    "For detailed configuration, we can build the configuration information for the network training by:\n",
    "1. the python dictionary format\n",
    "1. the configufation file (.cfg).\n",
    "\n",
    "In this notebook, we show the python dictionary format configuration.\n",
    "\n",
    "Please check the detailed information about each option in the [documantation](https://young-won.github.io/deepbiome/prerequisites.html#configuration)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### For preparing the configuration about the network information (`network_info`)\n",
    "\n",
    "To give the information about the training process, we provide a dictionary of configurations to the `netowrk_info` field.\n",
    "Your configuration for the network training should include the information about:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "network_info = {\n",
    "    'architecture_info': {\n",
    "        'batch_normalization': 'False',\n",
    "        'drop_out': '0',\n",
    "        'weight_initial': 'glorot_uniform',\n",
    "        'weight_l1_penalty':'0.01',\n",
    "        'weight_decay': 'phylogenetic_tree',\n",
    "    },\n",
    "    'model_info': {\n",
    "        'lr': '0.01',\n",
    "        'decay': '0.001',\n",
    "        'loss': 'binary_crossentropy',\n",
    "        'metrics': 'binary_accuracy, sensitivity, specificity, gmeasure, auc',\n",
    "        'texa_selection_metrics': 'accuracy, sensitivity, specificity, gmeasure',\n",
    "        'network_class': 'DeepBiomeNetwork',\n",
    "        'optimizer': 'adam',\n",
    "        'reader_class': 'MicroBiomeClassificationReader',\n",
    "        'normalizer': 'normalize_minmax',\n",
    "    },\n",
    "    'training_info': {\n",
    "        'batch_size': '50', \n",
    "        'epochs': '100'\n",
    "    },\n",
    "    'validation_info': {\n",
    "        'batch_size': 'None', \n",
    "        'validation_size': '0.2'\n",
    "    },\n",
    "    'test_info': {\n",
    "        'batch_size': 'None'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### For preparing the configuration about the path information (`path_info`)\n",
    "\n",
    "To give the information about the path of dataset, paths for saving the trained weights and the evaluation results, you have to provide a dictionary for configuration to the `path_info` feild.\n",
    "Your configuration for the path information should include the information about:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "path_info = {\n",
    "    'data_info': {\n",
    "        'data_path': resource_filename('deepbiome', 'tests/data'),\n",
    "        'idx_path': resource_filename('deepbiome', 'tests/data/onefile_idx.csv'),\n",
    "        'tree_info_path': resource_filename('deepbiome', 'tests/data/genus48_dic.csv'),\n",
    "        'x_path': 'onefile_x.csv',\n",
    "        'y_path': 'classification_y.csv'\n",
    "    },\n",
    "    'model_info': {\n",
    "        'evaluation': 'eval.npy',\n",
    "        'history': 'hist.json',\n",
    "        'model_dir': './example_result/',\n",
    "        'weight': 'weight.h5'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Deepbiome Training\n",
    "\n",
    "Now we can train the DeepBiome network based on the configurations."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For logging, we used the python logging library."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "logging.basicConfig(format = '[%(name)-8s|%(levelname)s|%(filename)s:%(lineno)s] %(message)s',\n",
    "                    level=logging.DEBUG)\n",
    "log = logging.getLogger()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The deeobiome_train function provide the test evaluation, train evaluation and the deepbiome network instance.\n",
    "\n",
    "If we set `number_of_fold`, then DeepBiome performs cross-validation based on that value. If not, DeepBiome package performs cross-validation based on the index file. If both `number_of_fold` option and the index file are missing, then the library performs leave-one-out-cross-validation (LOOCV)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:100] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:137] -------1 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:147] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:148] Build network for 1 simulation\n",
      "[root    |INFO|build_network.py:513] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:514] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:518] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:519] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:526]      Genus: 48\n",
      "[root    |INFO|build_network.py:526]     Family: 40\n",
      "[root    |INFO|build_network.py:526]      Order: 23\n",
      "[root    |INFO|build_network.py:526]      Class: 17\n",
      "[root    |INFO|build_network.py:526]     Phylum: 9\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:530] Phylogenetic_tree_dict info: ['Class', 'Order', 'Genus', 'Phylum', 'Family', 'Number']\n",
      "[root    |INFO|build_network.py:531] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:554] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:570] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:571] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:572] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/resource_variable_ops.py:432: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Colocations handled automatically by placer.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[tensorflow|WARNING|deprecation.py:328] From /usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/resource_variable_ops.py:432: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Colocations handled automatically by placer.\n",
      "[root    |INFO|build_network.py:648] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|deepbiome.py:157] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:158] 1 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:141] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/math_ops.py:2862: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.cast instead.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[tensorflow|WARNING|deprecation.py:328] From /usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/math_ops.py:2862: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.cast instead.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/100\n",
      "640/640 [==============================] - 1s 1ms/step - loss: 0.6514 - binary_accuracy: 0.6500 - sensitivity: 0.9295 - specificity: 0.0659 - gmeasure: 0.0206 - auc: 0.4973 - val_loss: 0.6110 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4696\n",
      "Epoch 2/100\n",
      "640/640 [==============================] - 0s 241us/step - loss: 0.6326 - binary_accuracy: 0.6828 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5566 - val_loss: 0.6112 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5507\n",
      "Epoch 3/100\n",
      "640/640 [==============================] - 0s 202us/step - loss: 0.6249 - binary_accuracy: 0.6828 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6458 - val_loss: 0.6127 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5947\n",
      "Epoch 4/100\n",
      "640/640 [==============================] - 0s 208us/step - loss: 0.6263 - binary_accuracy: 0.6828 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6683 - val_loss: 0.6143 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.6251\n",
      "Epoch 5/100\n",
      "640/640 [==============================] - 0s 222us/step - loss: 0.6253 - binary_accuracy: 0.6828 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.7046 - val_loss: 0.6112 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.6216\n",
      "Epoch 6/100\n",
      "640/640 [==============================] - 0s 232us/step - loss: 0.6248 - binary_accuracy: 0.6828 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.7147 - val_loss: 0.6112 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.6169\n",
      "Epoch 7/100\n",
      "640/640 [==============================] - 0s 222us/step - loss: 0.6254 - binary_accuracy: 0.6828 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.7202 - val_loss: 0.6121 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.6134\n",
      "Epoch 8/100\n",
      "640/640 [==============================] - 0s 216us/step - loss: 0.6238 - binary_accuracy: 0.6828 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.7316 - val_loss: 0.6100 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5999\n",
      "Epoch 9/100\n",
      "640/640 [==============================] - 0s 218us/step - loss: 0.6252 - binary_accuracy: 0.6828 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.7316 - val_loss: 0.6095 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5955\n",
      "Epoch 10/100\n",
      "640/640 [==============================] - 0s 232us/step - loss: 0.6215 - binary_accuracy: 0.6828 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.7324 - val_loss: 0.6052 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5943\n",
      "Epoch 11/100\n",
      "640/640 [==============================] - 0s 220us/step - loss: 0.6150 - binary_accuracy: 0.6828 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.7446 - val_loss: 0.5979 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.6042\n",
      "Epoch 12/100\n",
      "640/640 [==============================] - 0s 213us/step - loss: 0.6020 - binary_accuracy: 0.6828 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.7295 - val_loss: 0.5843 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.6185\n",
      "Epoch 13/100\n",
      "640/640 [==============================] - 0s 234us/step - loss: 0.5830 - binary_accuracy: 0.6828 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.7310 - val_loss: 0.5742 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5963\n",
      "Epoch 14/100\n",
      "640/640 [==============================] - 0s 227us/step - loss: 0.5594 - binary_accuracy: 0.6828 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.7434 - val_loss: 0.5720 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.6028\n",
      "Epoch 15/100\n",
      "640/640 [==============================] - 0s 229us/step - loss: 0.5479 - binary_accuracy: 0.6828 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.7572 - val_loss: 0.5721 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.6422\n",
      "Epoch 16/100\n",
      "640/640 [==============================] - 0s 222us/step - loss: 0.5378 - binary_accuracy: 0.6828 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.7665 - val_loss: 0.5614 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.6976\n",
      "Epoch 17/100\n",
      "640/640 [==============================] - 0s 235us/step - loss: 0.5343 - binary_accuracy: 0.6828 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.8129 - val_loss: 0.5447 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.7136\n",
      "Epoch 18/100\n",
      "640/640 [==============================] - 0s 237us/step - loss: 0.5160 - binary_accuracy: 0.6828 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.7930 - val_loss: 0.5333 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9858 - val_specificity: 0.1267 - val_gmeasure: 0.2980 - val_auc: 0.7166\n",
      "Epoch 19/100\n",
      "640/640 [==============================] - 0s 233us/step - loss: 0.5029 - binary_accuracy: 0.7094 - sensitivity: 0.9934 - specificity: 0.0960 - gmeasure: 0.2634 - auc: 0.8179 - val_loss: 0.5223 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9858 - val_specificity: 0.1267 - val_gmeasure: 0.2980 - val_auc: 0.7305\n",
      "Epoch 20/100\n",
      "640/640 [==============================] - 0s 233us/step - loss: 0.4878 - binary_accuracy: 0.7172 - sensitivity: 0.9824 - specificity: 0.1507 - gmeasure: 0.3761 - auc: 0.8316 - val_loss: 0.5158 - val_binary_accuracy: 0.7375 - val_sensitivity: 0.9358 - val_specificity: 0.1801 - val_gmeasure: 0.3992 - val_auc: 0.7579\n",
      "Epoch 21/100\n",
      "640/640 [==============================] - 0s 242us/step - loss: 0.4805 - binary_accuracy: 0.7281 - sensitivity: 0.9845 - specificity: 0.1822 - gmeasure: 0.4031 - auc: 0.8336 - val_loss: 0.5197 - val_binary_accuracy: 0.7375 - val_sensitivity: 0.8943 - val_specificity: 0.3131 - val_gmeasure: 0.5092 - val_auc: 0.7545\n",
      "Epoch 22/100\n",
      "640/640 [==============================] - 0s 239us/step - loss: 0.4803 - binary_accuracy: 0.7484 - sensitivity: 0.9624 - specificity: 0.2987 - gmeasure: 0.5055 - auc: 0.8363 - val_loss: 0.5122 - val_binary_accuracy: 0.7375 - val_sensitivity: 0.9358 - val_specificity: 0.1832 - val_gmeasure: 0.4064 - val_auc: 0.7800\n",
      "Epoch 23/100\n",
      "640/640 [==============================] - 0s 241us/step - loss: 0.4683 - binary_accuracy: 0.7703 - sensitivity: 0.9351 - specificity: 0.4282 - gmeasure: 0.6112 - auc: 0.8415 - val_loss: 0.5276 - val_binary_accuracy: 0.7312 - val_sensitivity: 0.9009 - val_specificity: 0.2775 - val_gmeasure: 0.4284 - val_auc: 0.7517\n",
      "Epoch 24/100\n",
      "640/640 [==============================] - 0s 244us/step - loss: 0.4630 - binary_accuracy: 0.7328 - sensitivity: 0.9619 - specificity: 0.2336 - gmeasure: 0.4591 - auc: 0.8320 - val_loss: 0.5054 - val_binary_accuracy: 0.7563 - val_sensitivity: 0.9009 - val_specificity: 0.3839 - val_gmeasure: 0.5711 - val_auc: 0.7879\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 25/100\n",
      "640/640 [==============================] - 0s 228us/step - loss: 0.4573 - binary_accuracy: 0.7516 - sensitivity: 0.9451 - specificity: 0.3370 - gmeasure: 0.5547 - auc: 0.8507 - val_loss: 0.5066 - val_binary_accuracy: 0.7563 - val_sensitivity: 0.9009 - val_specificity: 0.3839 - val_gmeasure: 0.5711 - val_auc: 0.7771\n",
      "Epoch 26/100\n",
      "640/640 [==============================] - 0s 214us/step - loss: 0.4517 - binary_accuracy: 0.7531 - sensitivity: 0.9504 - specificity: 0.3337 - gmeasure: 0.5563 - auc: 0.8561 - val_loss: 0.5053 - val_binary_accuracy: 0.7500 - val_sensitivity: 0.8867 - val_specificity: 0.4047 - val_gmeasure: 0.5892 - val_auc: 0.7894\n",
      "Epoch 27/100\n",
      "640/640 [==============================] - 0s 223us/step - loss: 0.4497 - binary_accuracy: 0.7688 - sensitivity: 0.9071 - specificity: 0.4917 - gmeasure: 0.6588 - auc: 0.8509 - val_loss: 0.5082 - val_binary_accuracy: 0.7625 - val_sensitivity: 0.9217 - val_specificity: 0.3131 - val_gmeasure: 0.5166 - val_auc: 0.7948\n",
      "Epoch 28/100\n",
      "640/640 [==============================] - 0s 235us/step - loss: 0.4447 - binary_accuracy: 0.7531 - sensitivity: 0.9520 - specificity: 0.3175 - gmeasure: 0.5381 - auc: 0.8538 - val_loss: 0.5046 - val_binary_accuracy: 0.7750 - val_sensitivity: 0.8445 - val_specificity: 0.5766 - val_gmeasure: 0.6948 - val_auc: 0.7879\n",
      "Epoch 29/100\n",
      "640/640 [==============================] - 0s 220us/step - loss: 0.4515 - binary_accuracy: 0.7563 - sensitivity: 0.8802 - specificity: 0.5025 - gmeasure: 0.6365 - auc: 0.8643 - val_loss: 0.5104 - val_binary_accuracy: 0.7812 - val_sensitivity: 0.9358 - val_specificity: 0.3309 - val_gmeasure: 0.5343 - val_auc: 0.7974\n",
      "Epoch 30/100\n",
      "640/640 [==============================] - 0s 224us/step - loss: 0.4443 - binary_accuracy: 0.7672 - sensitivity: 0.9199 - specificity: 0.4487 - gmeasure: 0.6356 - auc: 0.8609 - val_loss: 0.4964 - val_binary_accuracy: 0.7563 - val_sensitivity: 0.8867 - val_specificity: 0.4226 - val_gmeasure: 0.6028 - val_auc: 0.7922\n",
      "Epoch 31/100\n",
      "640/640 [==============================] - 0s 233us/step - loss: 0.4380 - binary_accuracy: 0.7734 - sensitivity: 0.9277 - specificity: 0.4441 - gmeasure: 0.6346 - auc: 0.8526 - val_loss: 0.5011 - val_binary_accuracy: 0.7688 - val_sensitivity: 0.8445 - val_specificity: 0.5588 - val_gmeasure: 0.6842 - val_auc: 0.8014\n",
      "Epoch 32/100\n",
      "640/640 [==============================] - 0s 234us/step - loss: 0.4385 - binary_accuracy: 0.7766 - sensitivity: 0.9159 - specificity: 0.4755 - gmeasure: 0.6460 - auc: 0.8650 - val_loss: 0.4980 - val_binary_accuracy: 0.7688 - val_sensitivity: 0.9141 - val_specificity: 0.3518 - val_gmeasure: 0.5574 - val_auc: 0.7976\n",
      "Epoch 33/100\n",
      "640/640 [==============================] - 0s 233us/step - loss: 0.4287 - binary_accuracy: 0.7734 - sensitivity: 0.9405 - specificity: 0.4063 - gmeasure: 0.6058 - auc: 0.8647 - val_loss: 0.5054 - val_binary_accuracy: 0.7688 - val_sensitivity: 0.8511 - val_specificity: 0.5409 - val_gmeasure: 0.6751 - val_auc: 0.7954\n",
      "Epoch 34/100\n",
      "640/640 [==============================] - 0s 242us/step - loss: 0.4305 - binary_accuracy: 0.7812 - sensitivity: 0.8614 - specificity: 0.5960 - gmeasure: 0.7041 - auc: 0.8614 - val_loss: 0.5096 - val_binary_accuracy: 0.7750 - val_sensitivity: 0.9217 - val_specificity: 0.3518 - val_gmeasure: 0.5599 - val_auc: 0.8066\n",
      "Epoch 35/100\n",
      "640/640 [==============================] - 0s 238us/step - loss: 0.4256 - binary_accuracy: 0.7844 - sensitivity: 0.9283 - specificity: 0.4875 - gmeasure: 0.6635 - auc: 0.8761 - val_loss: 0.5047 - val_binary_accuracy: 0.7625 - val_sensitivity: 0.8369 - val_specificity: 0.5588 - val_gmeasure: 0.6809 - val_auc: 0.8061\n",
      "Epoch 36/100\n",
      "640/640 [==============================] - 0s 220us/step - loss: 0.4233 - binary_accuracy: 0.8062 - sensitivity: 0.8970 - specificity: 0.6019 - gmeasure: 0.7240 - auc: 0.8682 - val_loss: 0.5126 - val_binary_accuracy: 0.7750 - val_sensitivity: 0.9217 - val_specificity: 0.3518 - val_gmeasure: 0.5599 - val_auc: 0.8005\n",
      "Epoch 37/100\n",
      "640/640 [==============================] - 0s 212us/step - loss: 0.4229 - binary_accuracy: 0.7828 - sensitivity: 0.9103 - specificity: 0.5097 - gmeasure: 0.6752 - auc: 0.8689 - val_loss: 0.5031 - val_binary_accuracy: 0.7625 - val_sensitivity: 0.8369 - val_specificity: 0.5588 - val_gmeasure: 0.6809 - val_auc: 0.7975\n",
      "Epoch 38/100\n",
      "640/640 [==============================] - 0s 238us/step - loss: 0.4141 - binary_accuracy: 0.8016 - sensitivity: 0.9247 - specificity: 0.5261 - gmeasure: 0.6934 - auc: 0.8777 - val_loss: 0.5053 - val_binary_accuracy: 0.7500 - val_sensitivity: 0.8716 - val_specificity: 0.4404 - val_gmeasure: 0.6102 - val_auc: 0.7972\n",
      "Epoch 39/100\n",
      "640/640 [==============================] - 0s 220us/step - loss: 0.4171 - binary_accuracy: 0.7953 - sensitivity: 0.8910 - specificity: 0.5991 - gmeasure: 0.7234 - auc: 0.8762 - val_loss: 0.5048 - val_binary_accuracy: 0.7688 - val_sensitivity: 0.8369 - val_specificity: 0.5735 - val_gmeasure: 0.6889 - val_auc: 0.8078\n",
      "Epoch 40/100\n",
      "640/640 [==============================] - 0s 228us/step - loss: 0.4177 - binary_accuracy: 0.7812 - sensitivity: 0.9415 - specificity: 0.4394 - gmeasure: 0.6248 - auc: 0.8841 - val_loss: 0.5086 - val_binary_accuracy: 0.7812 - val_sensitivity: 0.8294 - val_specificity: 0.6269 - val_gmeasure: 0.7180 - val_auc: 0.7991\n",
      "Epoch 41/100\n",
      "640/640 [==============================] - 0s 226us/step - loss: 0.4142 - binary_accuracy: 0.7969 - sensitivity: 0.8060 - specificity: 0.7865 - gmeasure: 0.7892 - auc: 0.8881 - val_loss: 0.5341 - val_binary_accuracy: 0.7812 - val_sensitivity: 0.9283 - val_specificity: 0.3518 - val_gmeasure: 0.5613 - val_auc: 0.8102\n",
      "Epoch 42/100\n",
      "640/640 [==============================] - 0s 226us/step - loss: 0.4358 - binary_accuracy: 0.7484 - sensitivity: 0.8804 - specificity: 0.4836 - gmeasure: 0.6149 - auc: 0.8800 - val_loss: 0.5225 - val_binary_accuracy: 0.6687 - val_sensitivity: 0.5680 - val_specificity: 0.7896 - val_gmeasure: 0.6660 - val_auc: 0.7821\n",
      "Epoch 43/100\n",
      "640/640 [==============================] - 0s 219us/step - loss: 0.4194 - binary_accuracy: 0.7875 - sensitivity: 0.8406 - specificity: 0.6650 - gmeasure: 0.7240 - auc: 0.8855 - val_loss: 0.5258 - val_binary_accuracy: 0.7812 - val_sensitivity: 0.9283 - val_specificity: 0.3518 - val_gmeasure: 0.5613 - val_auc: 0.8080\n",
      "Epoch 44/100\n",
      "640/640 [==============================] - 0s 236us/step - loss: 0.4042 - binary_accuracy: 0.7891 - sensitivity: 0.9226 - specificity: 0.4883 - gmeasure: 0.6520 - auc: 0.8840 - val_loss: 0.5047 - val_binary_accuracy: 0.7500 - val_sensitivity: 0.7311 - val_specificity: 0.7124 - val_gmeasure: 0.7168 - val_auc: 0.7970\n",
      "Epoch 45/100\n",
      "640/640 [==============================] - 0s 239us/step - loss: 0.4149 - binary_accuracy: 0.8047 - sensitivity: 0.8793 - specificity: 0.6355 - gmeasure: 0.7267 - auc: 0.8962 - val_loss: 0.5213 - val_binary_accuracy: 0.7812 - val_sensitivity: 0.9207 - val_specificity: 0.3726 - val_gmeasure: 0.5814 - val_auc: 0.8164\n",
      "Epoch 46/100\n",
      "640/640 [==============================] - 0s 238us/step - loss: 0.4044 - binary_accuracy: 0.8109 - sensitivity: 0.8868 - specificity: 0.6313 - gmeasure: 0.7346 - auc: 0.8858 - val_loss: 0.5087 - val_binary_accuracy: 0.7750 - val_sensitivity: 0.8085 - val_specificity: 0.6916 - val_gmeasure: 0.7429 - val_auc: 0.8117\n",
      "Epoch 47/100\n",
      "640/640 [==============================] - 0s 236us/step - loss: 0.4004 - binary_accuracy: 0.8234 - sensitivity: 0.9134 - specificity: 0.6220 - gmeasure: 0.7444 - auc: 0.8851 - val_loss: 0.5018 - val_binary_accuracy: 0.7875 - val_sensitivity: 0.8716 - val_specificity: 0.5409 - val_gmeasure: 0.6826 - val_auc: 0.8050\n",
      "Epoch 48/100\n",
      "640/640 [==============================] - 0s 241us/step - loss: 0.3951 - binary_accuracy: 0.8188 - sensitivity: 0.9210 - specificity: 0.6046 - gmeasure: 0.7438 - auc: 0.8953 - val_loss: 0.5062 - val_binary_accuracy: 0.7812 - val_sensitivity: 0.8439 - val_specificity: 0.5882 - val_gmeasure: 0.6995 - val_auc: 0.8113\n",
      "Epoch 49/100\n",
      "640/640 [==============================] - 0s 225us/step - loss: 0.3909 - binary_accuracy: 0.8188 - sensitivity: 0.9059 - specificity: 0.6124 - gmeasure: 0.7377 - auc: 0.8907 - val_loss: 0.5110 - val_binary_accuracy: 0.8000 - val_sensitivity: 0.8716 - val_specificity: 0.5735 - val_gmeasure: 0.7025 - val_auc: 0.8051\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 50/100\n",
      "640/640 [==============================] - 0s 231us/step - loss: 0.3895 - binary_accuracy: 0.8203 - sensitivity: 0.9182 - specificity: 0.6083 - gmeasure: 0.7436 - auc: 0.8934 - val_loss: 0.5101 - val_binary_accuracy: 0.7812 - val_sensitivity: 0.8300 - val_specificity: 0.6269 - val_gmeasure: 0.7187 - val_auc: 0.8132\n",
      "Epoch 51/100\n",
      "640/640 [==============================] - 0s 235us/step - loss: 0.3882 - binary_accuracy: 0.8250 - sensitivity: 0.8910 - specificity: 0.6684 - gmeasure: 0.7625 - auc: 0.8935 - val_loss: 0.5308 - val_binary_accuracy: 0.8000 - val_sensitivity: 0.9062 - val_specificity: 0.4907 - val_gmeasure: 0.6605 - val_auc: 0.8053\n",
      "Epoch 52/100\n",
      "640/640 [==============================] - 0s 230us/step - loss: 0.3901 - binary_accuracy: 0.8078 - sensitivity: 0.8744 - specificity: 0.6957 - gmeasure: 0.7744 - auc: 0.8994 - val_loss: 0.5126 - val_binary_accuracy: 0.7937 - val_sensitivity: 0.8570 - val_specificity: 0.5882 - val_gmeasure: 0.7040 - val_auc: 0.8071\n",
      "Epoch 53/100\n",
      "640/640 [==============================] - 0s 225us/step - loss: 0.3916 - binary_accuracy: 0.8094 - sensitivity: 0.9139 - specificity: 0.6145 - gmeasure: 0.7385 - auc: 0.8997 - val_loss: 0.5096 - val_binary_accuracy: 0.7688 - val_sensitivity: 0.8155 - val_specificity: 0.6269 - val_gmeasure: 0.7119 - val_auc: 0.8126\n",
      "Epoch 54/100\n",
      "640/640 [==============================] - 0s 237us/step - loss: 0.3820 - binary_accuracy: 0.8219 - sensitivity: 0.9020 - specificity: 0.6470 - gmeasure: 0.7590 - auc: 0.8968 - val_loss: 0.5086 - val_binary_accuracy: 0.7937 - val_sensitivity: 0.8570 - val_specificity: 0.5882 - val_gmeasure: 0.7040 - val_auc: 0.8168\n",
      "Epoch 55/100\n",
      "640/640 [==============================] - 0s 222us/step - loss: 0.3768 - binary_accuracy: 0.8375 - sensitivity: 0.9164 - specificity: 0.6763 - gmeasure: 0.7839 - auc: 0.9012 - val_loss: 0.5057 - val_binary_accuracy: 0.7812 - val_sensitivity: 0.8369 - val_specificity: 0.6061 - val_gmeasure: 0.7073 - val_auc: 0.8157\n",
      "Epoch 56/100\n",
      "640/640 [==============================] - 0s 227us/step - loss: 0.3756 - binary_accuracy: 0.8328 - sensitivity: 0.9019 - specificity: 0.6851 - gmeasure: 0.7798 - auc: 0.9094 - val_loss: 0.5269 - val_binary_accuracy: 0.8062 - val_sensitivity: 0.8986 - val_specificity: 0.5201 - val_gmeasure: 0.6752 - val_auc: 0.8100\n",
      "Epoch 57/100\n",
      "640/640 [==============================] - 0s 219us/step - loss: 0.3756 - binary_accuracy: 0.8344 - sensitivity: 0.9195 - specificity: 0.6578 - gmeasure: 0.7747 - auc: 0.9084 - val_loss: 0.5130 - val_binary_accuracy: 0.8062 - val_sensitivity: 0.8917 - val_specificity: 0.5380 - val_gmeasure: 0.6845 - val_auc: 0.8106\n",
      "Epoch 58/100\n",
      "640/640 [==============================] - 0s 203us/step - loss: 0.3674 - binary_accuracy: 0.8313 - sensitivity: 0.9140 - specificity: 0.6554 - gmeasure: 0.7656 - auc: 0.9136 - val_loss: 0.5051 - val_binary_accuracy: 0.8000 - val_sensitivity: 0.8570 - val_specificity: 0.6061 - val_gmeasure: 0.7148 - val_auc: 0.7962\n",
      "Epoch 59/100\n",
      "640/640 [==============================] - 0s 216us/step - loss: 0.3644 - binary_accuracy: 0.8328 - sensitivity: 0.9135 - specificity: 0.6513 - gmeasure: 0.7684 - auc: 0.9080 - val_loss: 0.5104 - val_binary_accuracy: 0.8000 - val_sensitivity: 0.8570 - val_specificity: 0.6061 - val_gmeasure: 0.7148 - val_auc: 0.7996\n",
      "Epoch 60/100\n",
      "640/640 [==============================] - 0s 218us/step - loss: 0.3605 - binary_accuracy: 0.8453 - sensitivity: 0.9161 - specificity: 0.6840 - gmeasure: 0.7878 - auc: 0.9085 - val_loss: 0.5120 - val_binary_accuracy: 0.8000 - val_sensitivity: 0.8771 - val_specificity: 0.5527 - val_gmeasure: 0.6866 - val_auc: 0.8099\n",
      "Epoch 61/100\n",
      "640/640 [==============================] - 0s 239us/step - loss: 0.3613 - binary_accuracy: 0.8422 - sensitivity: 0.8988 - specificity: 0.7275 - gmeasure: 0.8047 - auc: 0.9125 - val_loss: 0.5289 - val_binary_accuracy: 0.8125 - val_sensitivity: 0.8986 - val_specificity: 0.5380 - val_gmeasure: 0.6872 - val_auc: 0.8154\n",
      "Epoch 62/100\n",
      "640/640 [==============================] - 0s 222us/step - loss: 0.3528 - binary_accuracy: 0.8438 - sensitivity: 0.9351 - specificity: 0.6457 - gmeasure: 0.7728 - auc: 0.9139 - val_loss: 0.4996 - val_binary_accuracy: 0.7625 - val_sensitivity: 0.7516 - val_specificity: 0.6686 - val_gmeasure: 0.7079 - val_auc: 0.7992\n",
      "Epoch 63/100\n",
      "640/640 [==============================] - 0s 214us/step - loss: 0.3667 - binary_accuracy: 0.8391 - sensitivity: 0.9052 - specificity: 0.7087 - gmeasure: 0.7965 - auc: 0.9160 - val_loss: 0.5001 - val_binary_accuracy: 0.8062 - val_sensitivity: 0.8636 - val_specificity: 0.6061 - val_gmeasure: 0.7170 - val_auc: 0.8220\n",
      "Epoch 64/100\n",
      "640/640 [==============================] - 0s 232us/step - loss: 0.3559 - binary_accuracy: 0.8422 - sensitivity: 0.8898 - specificity: 0.7276 - gmeasure: 0.7962 - auc: 0.9158 - val_loss: 0.5403 - val_binary_accuracy: 0.8000 - val_sensitivity: 0.9207 - val_specificity: 0.4167 - val_gmeasure: 0.6112 - val_auc: 0.8133\n",
      "Epoch 65/100\n",
      "640/640 [==============================] - 0s 241us/step - loss: 0.3518 - binary_accuracy: 0.8391 - sensitivity: 0.9116 - specificity: 0.6760 - gmeasure: 0.7810 - auc: 0.9136 - val_loss: 0.5077 - val_binary_accuracy: 0.7812 - val_sensitivity: 0.8155 - val_specificity: 0.6686 - val_gmeasure: 0.7374 - val_auc: 0.8103\n",
      "Epoch 66/100\n",
      "640/640 [==============================] - 0s 224us/step - loss: 0.3483 - binary_accuracy: 0.8422 - sensitivity: 0.9101 - specificity: 0.6962 - gmeasure: 0.7940 - auc: 0.9150 - val_loss: 0.5012 - val_binary_accuracy: 0.8062 - val_sensitivity: 0.8771 - val_specificity: 0.5705 - val_gmeasure: 0.6975 - val_auc: 0.8112\n",
      "Epoch 67/100\n",
      "640/640 [==============================] - 0s 206us/step - loss: 0.3421 - binary_accuracy: 0.8578 - sensitivity: 0.9127 - specificity: 0.7378 - gmeasure: 0.8195 - auc: 0.9211 - val_loss: 0.5002 - val_binary_accuracy: 0.8062 - val_sensitivity: 0.8771 - val_specificity: 0.5705 - val_gmeasure: 0.6975 - val_auc: 0.8162\n",
      "Epoch 68/100\n",
      "640/640 [==============================] - 0s 213us/step - loss: 0.3455 - binary_accuracy: 0.8359 - sensitivity: 0.9044 - specificity: 0.6984 - gmeasure: 0.7855 - auc: 0.9257 - val_loss: 0.5056 - val_binary_accuracy: 0.8062 - val_sensitivity: 0.8431 - val_specificity: 0.6686 - val_gmeasure: 0.7498 - val_auc: 0.8169\n",
      "Epoch 69/100\n",
      "640/640 [==============================] - 0s 201us/step - loss: 0.3472 - binary_accuracy: 0.8391 - sensitivity: 0.9189 - specificity: 0.6494 - gmeasure: 0.7604 - auc: 0.9205 - val_loss: 0.4866 - val_binary_accuracy: 0.7812 - val_sensitivity: 0.7657 - val_specificity: 0.6894 - val_gmeasure: 0.7261 - val_auc: 0.8083\n",
      "Epoch 70/100\n",
      "640/640 [==============================] - 0s 220us/step - loss: 0.3373 - binary_accuracy: 0.8609 - sensitivity: 0.9173 - specificity: 0.7434 - gmeasure: 0.8229 - auc: 0.9267 - val_loss: 0.5179 - val_binary_accuracy: 0.8062 - val_sensitivity: 0.8771 - val_specificity: 0.5705 - val_gmeasure: 0.6975 - val_auc: 0.8170\n",
      "Epoch 71/100\n",
      "640/640 [==============================] - 0s 226us/step - loss: 0.3368 - binary_accuracy: 0.8594 - sensitivity: 0.9145 - specificity: 0.7401 - gmeasure: 0.8176 - auc: 0.9233 - val_loss: 0.4765 - val_binary_accuracy: 0.7875 - val_sensitivity: 0.8497 - val_specificity: 0.5914 - val_gmeasure: 0.7032 - val_auc: 0.8326\n",
      "Epoch 72/100\n",
      "640/640 [==============================] - 0s 223us/step - loss: 0.3311 - binary_accuracy: 0.8500 - sensitivity: 0.9280 - specificity: 0.6729 - gmeasure: 0.7854 - auc: 0.9262 - val_loss: 0.4914 - val_binary_accuracy: 0.7937 - val_sensitivity: 0.7862 - val_specificity: 0.6686 - val_gmeasure: 0.7236 - val_auc: 0.8308\n",
      "Epoch 73/100\n",
      "640/640 [==============================] - 0s 227us/step - loss: 0.3218 - binary_accuracy: 0.8672 - sensitivity: 0.9104 - specificity: 0.7724 - gmeasure: 0.8362 - auc: 0.9307 - val_loss: 0.5140 - val_binary_accuracy: 0.8250 - val_sensitivity: 0.9131 - val_specificity: 0.5411 - val_gmeasure: 0.6958 - val_auc: 0.8228\n",
      "Epoch 74/100\n",
      "640/640 [==============================] - 0s 225us/step - loss: 0.3256 - binary_accuracy: 0.8578 - sensitivity: 0.9092 - specificity: 0.7348 - gmeasure: 0.8114 - auc: 0.9312 - val_loss: 0.4880 - val_binary_accuracy: 0.8062 - val_sensitivity: 0.8771 - val_specificity: 0.5705 - val_gmeasure: 0.6975 - val_auc: 0.8329\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 75/100\n",
      "640/640 [==============================] - 0s 254us/step - loss: 0.3243 - binary_accuracy: 0.8594 - sensitivity: 0.9229 - specificity: 0.7147 - gmeasure: 0.8083 - auc: 0.9292 - val_loss: 0.4832 - val_binary_accuracy: 0.8000 - val_sensitivity: 0.8431 - val_specificity: 0.6477 - val_gmeasure: 0.7372 - val_auc: 0.8322\n",
      "Epoch 76/100\n",
      "640/640 [==============================] - 0s 229us/step - loss: 0.3130 - binary_accuracy: 0.8562 - sensitivity: 0.9149 - specificity: 0.7360 - gmeasure: 0.8188 - auc: 0.9348 - val_loss: 0.5090 - val_binary_accuracy: 0.8250 - val_sensitivity: 0.8986 - val_specificity: 0.5705 - val_gmeasure: 0.7067 - val_auc: 0.8208\n",
      "Epoch 77/100\n",
      "640/640 [==============================] - 0s 211us/step - loss: 0.3217 - binary_accuracy: 0.8578 - sensitivity: 0.9154 - specificity: 0.7228 - gmeasure: 0.8045 - auc: 0.9349 - val_loss: 0.4718 - val_binary_accuracy: 0.8188 - val_sensitivity: 0.8917 - val_specificity: 0.5705 - val_gmeasure: 0.7039 - val_auc: 0.8172\n",
      "Epoch 78/100\n",
      "640/640 [==============================] - 0s 224us/step - loss: 0.3094 - binary_accuracy: 0.8609 - sensitivity: 0.9288 - specificity: 0.7124 - gmeasure: 0.8107 - auc: 0.9363 - val_loss: 0.4896 - val_binary_accuracy: 0.8062 - val_sensitivity: 0.8702 - val_specificity: 0.5914 - val_gmeasure: 0.7114 - val_auc: 0.8442\n",
      "Epoch 79/100\n",
      "640/640 [==============================] - 0s 228us/step - loss: 0.3074 - binary_accuracy: 0.8656 - sensitivity: 0.9170 - specificity: 0.7477 - gmeasure: 0.8235 - auc: 0.9345 - val_loss: 0.4692 - val_binary_accuracy: 0.8062 - val_sensitivity: 0.8632 - val_specificity: 0.6122 - val_gmeasure: 0.7236 - val_auc: 0.8333\n",
      "Epoch 80/100\n",
      "640/640 [==============================] - 0s 209us/step - loss: 0.3111 - binary_accuracy: 0.8641 - sensitivity: 0.9124 - specificity: 0.7725 - gmeasure: 0.8356 - auc: 0.9388 - val_loss: 0.4648 - val_binary_accuracy: 0.8188 - val_sensitivity: 0.8841 - val_specificity: 0.5914 - val_gmeasure: 0.7172 - val_auc: 0.8305\n",
      "Epoch 81/100\n",
      "640/640 [==============================] - 0s 196us/step - loss: 0.3068 - binary_accuracy: 0.8625 - sensitivity: 0.9362 - specificity: 0.7079 - gmeasure: 0.8087 - auc: 0.9418 - val_loss: 0.4747 - val_binary_accuracy: 0.7937 - val_sensitivity: 0.7862 - val_specificity: 0.6686 - val_gmeasure: 0.7236 - val_auc: 0.8228\n",
      "Epoch 82/100\n",
      "640/640 [==============================] - 0s 244us/step - loss: 0.3005 - binary_accuracy: 0.8672 - sensitivity: 0.9228 - specificity: 0.7454 - gmeasure: 0.8275 - auc: 0.9397 - val_loss: 0.4749 - val_binary_accuracy: 0.8250 - val_sensitivity: 0.8910 - val_specificity: 0.5914 - val_gmeasure: 0.7201 - val_auc: 0.8256\n",
      "Epoch 83/100\n",
      "640/640 [==============================] - 0s 233us/step - loss: 0.2965 - binary_accuracy: 0.8734 - sensitivity: 0.9226 - specificity: 0.7683 - gmeasure: 0.8397 - auc: 0.9398 - val_loss: 0.4684 - val_binary_accuracy: 0.8125 - val_sensitivity: 0.8702 - val_specificity: 0.6122 - val_gmeasure: 0.7266 - val_auc: 0.8250\n",
      "Epoch 84/100\n",
      "640/640 [==============================] - 0s 229us/step - loss: 0.2973 - binary_accuracy: 0.8703 - sensitivity: 0.9182 - specificity: 0.7623 - gmeasure: 0.8339 - auc: 0.9406 - val_loss: 0.4571 - val_binary_accuracy: 0.8188 - val_sensitivity: 0.8841 - val_specificity: 0.5914 - val_gmeasure: 0.7172 - val_auc: 0.8521\n",
      "Epoch 85/100\n",
      "640/640 [==============================] - 0s 239us/step - loss: 0.2919 - binary_accuracy: 0.8813 - sensitivity: 0.9223 - specificity: 0.7929 - gmeasure: 0.8520 - auc: 0.9452 - val_loss: 0.4773 - val_binary_accuracy: 0.8250 - val_sensitivity: 0.8910 - val_specificity: 0.5914 - val_gmeasure: 0.7201 - val_auc: 0.8491\n",
      "Epoch 86/100\n",
      "640/640 [==============================] - 0s 234us/step - loss: 0.2913 - binary_accuracy: 0.8703 - sensitivity: 0.9064 - specificity: 0.7852 - gmeasure: 0.8385 - auc: 0.9432 - val_loss: 0.4964 - val_binary_accuracy: 0.8375 - val_sensitivity: 0.9207 - val_specificity: 0.5558 - val_gmeasure: 0.7078 - val_auc: 0.8535\n",
      "Epoch 87/100\n",
      "640/640 [==============================] - 0s 223us/step - loss: 0.2988 - binary_accuracy: 0.8656 - sensitivity: 0.9102 - specificity: 0.7824 - gmeasure: 0.8385 - auc: 0.9474 - val_loss: 0.4548 - val_binary_accuracy: 0.8250 - val_sensitivity: 0.8910 - val_specificity: 0.5914 - val_gmeasure: 0.7201 - val_auc: 0.8520\n",
      "Epoch 88/100\n",
      "640/640 [==============================] - 0s 197us/step - loss: 0.2877 - binary_accuracy: 0.8781 - sensitivity: 0.9346 - specificity: 0.7526 - gmeasure: 0.8347 - auc: 0.9442 - val_loss: 0.4553 - val_binary_accuracy: 0.8250 - val_sensitivity: 0.8841 - val_specificity: 0.6122 - val_gmeasure: 0.7324 - val_auc: 0.8550\n",
      "Epoch 89/100\n",
      "640/640 [==============================] - 0s 229us/step - loss: 0.2790 - binary_accuracy: 0.8797 - sensitivity: 0.9350 - specificity: 0.7677 - gmeasure: 0.8451 - auc: 0.9479 - val_loss: 0.4482 - val_binary_accuracy: 0.7937 - val_sensitivity: 0.7928 - val_specificity: 0.6477 - val_gmeasure: 0.7135 - val_auc: 0.8321\n",
      "Epoch 90/100\n",
      "640/640 [==============================] - 0s 221us/step - loss: 0.2891 - binary_accuracy: 0.8687 - sensitivity: 0.9216 - specificity: 0.7529 - gmeasure: 0.8274 - auc: 0.9457 - val_loss: 0.4548 - val_binary_accuracy: 0.8375 - val_sensitivity: 0.9062 - val_specificity: 0.5914 - val_gmeasure: 0.7270 - val_auc: 0.8581\n",
      "Epoch 91/100\n",
      "640/640 [==============================] - 0s 227us/step - loss: 0.2825 - binary_accuracy: 0.8781 - sensitivity: 0.9112 - specificity: 0.8156 - gmeasure: 0.8572 - auc: 0.9539 - val_loss: 0.4672 - val_binary_accuracy: 0.8313 - val_sensitivity: 0.9062 - val_specificity: 0.5705 - val_gmeasure: 0.7102 - val_auc: 0.8543\n",
      "Epoch 92/100\n",
      "640/640 [==============================] - 0s 239us/step - loss: 0.2805 - binary_accuracy: 0.8719 - sensitivity: 0.9031 - specificity: 0.7992 - gmeasure: 0.8468 - auc: 0.9431 - val_loss: 0.4746 - val_binary_accuracy: 0.8375 - val_sensitivity: 0.9131 - val_specificity: 0.5705 - val_gmeasure: 0.7130 - val_auc: 0.8543\n",
      "Epoch 93/100\n",
      "640/640 [==============================] - 0s 236us/step - loss: 0.2791 - binary_accuracy: 0.8813 - sensitivity: 0.9295 - specificity: 0.7751 - gmeasure: 0.8440 - auc: 0.9529 - val_loss: 0.4285 - val_binary_accuracy: 0.8188 - val_sensitivity: 0.8706 - val_specificity: 0.6269 - val_gmeasure: 0.7349 - val_auc: 0.8599\n",
      "Epoch 94/100\n",
      "640/640 [==============================] - 0s 222us/step - loss: 0.2713 - binary_accuracy: 0.8859 - sensitivity: 0.9320 - specificity: 0.7847 - gmeasure: 0.8514 - auc: 0.9491 - val_loss: 0.4496 - val_binary_accuracy: 0.8250 - val_sensitivity: 0.8775 - val_specificity: 0.6269 - val_gmeasure: 0.7378 - val_auc: 0.8519\n",
      "Epoch 95/100\n",
      "640/640 [==============================] - 0s 238us/step - loss: 0.2792 - binary_accuracy: 0.8781 - sensitivity: 0.9302 - specificity: 0.7723 - gmeasure: 0.8429 - auc: 0.9531 - val_loss: 0.4257 - val_binary_accuracy: 0.8125 - val_sensitivity: 0.7858 - val_specificity: 0.7511 - val_gmeasure: 0.7634 - val_auc: 0.8390\n",
      "Epoch 96/100\n",
      "640/640 [==============================] - 0s 233us/step - loss: 0.2714 - binary_accuracy: 0.8875 - sensitivity: 0.9306 - specificity: 0.7959 - gmeasure: 0.8587 - auc: 0.9541 - val_loss: 0.4375 - val_binary_accuracy: 0.8313 - val_sensitivity: 0.8841 - val_specificity: 0.6269 - val_gmeasure: 0.7402 - val_auc: 0.8590\n",
      "Epoch 97/100\n",
      "640/640 [==============================] - 0s 224us/step - loss: 0.2633 - binary_accuracy: 0.8984 - sensitivity: 0.9340 - specificity: 0.8168 - gmeasure: 0.8725 - auc: 0.9516 - val_loss: 0.4209 - val_binary_accuracy: 0.8188 - val_sensitivity: 0.8706 - val_specificity: 0.6269 - val_gmeasure: 0.7349 - val_auc: 0.8604\n",
      "Epoch 98/100\n",
      "640/640 [==============================] - 0s 200us/step - loss: 0.2626 - binary_accuracy: 0.8953 - sensitivity: 0.9361 - specificity: 0.8078 - gmeasure: 0.8680 - auc: 0.9551 - val_loss: 0.4397 - val_binary_accuracy: 0.8250 - val_sensitivity: 0.8775 - val_specificity: 0.6269 - val_gmeasure: 0.7378 - val_auc: 0.8684\n",
      "Epoch 99/100\n",
      "640/640 [==============================] - 0s 233us/step - loss: 0.2620 - binary_accuracy: 0.8813 - sensitivity: 0.9254 - specificity: 0.7839 - gmeasure: 0.8496 - auc: 0.9553 - val_loss: 0.4338 - val_binary_accuracy: 0.8562 - val_sensitivity: 0.9131 - val_specificity: 0.6269 - val_gmeasure: 0.7530 - val_auc: 0.8712\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 100/100\n",
      "640/640 [==============================] - 0s 224us/step - loss: 0.2581 - binary_accuracy: 0.9016 - sensitivity: 0.9440 - specificity: 0.8127 - gmeasure: 0.8740 - auc: 0.9590 - val_loss: 0.4237 - val_binary_accuracy: 0.8313 - val_sensitivity: 0.8706 - val_specificity: 0.6595 - val_gmeasure: 0.7528 - val_auc: 0.8746\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:151] Training end with time 17.63860583305359!\n",
      "[root    |INFO|build_network.py:79] Saved trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |DEBUG|deepbiome.py:166] Save weight at ./example_result/weight_0.h5\n",
      "[root    |DEBUG|deepbiome.py:169] Save history at ./example_result/hist_0.json\n",
      "[root    |INFO|build_network.py:177] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 11us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:182] Evaluation end with time 0.017470836639404297!\n",
      "[root    |INFO|build_network.py:183] Evaluation: [0.29080748558044434, 0.8774999976158142, 0.9016393423080444, 0.824701189994812, 0.8623126149177551, 0.944165050983429]\n",
      "[root    |INFO|build_network.py:177] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "201/201 [==============================] - 0s 28us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:182] Evaluation end with time 0.013396501541137695!\n",
      "[root    |INFO|build_network.py:183] Evaluation: [0.4595063328742981, 0.7860696315765381, 0.8057553768157959, 0.7419354915618896, 0.7731872200965881, 0.8563472032546997]\n",
      "[root    |INFO|deepbiome.py:179] Compute time : 20.946328163146973\n",
      "[root    |INFO|deepbiome.py:180] 1 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:137] -------2 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:147] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:148] Build network for 2 simulation\n",
      "[root    |INFO|build_network.py:513] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:514] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:518] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:519] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:526]      Genus: 48\n",
      "[root    |INFO|build_network.py:526]     Family: 40\n",
      "[root    |INFO|build_network.py:526]      Order: 23\n",
      "[root    |INFO|build_network.py:526]      Class: 17\n",
      "[root    |INFO|build_network.py:526]     Phylum: 9\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:530] Phylogenetic_tree_dict info: ['Class', 'Order', 'Genus', 'Phylum', 'Family', 'Number']\n",
      "[root    |INFO|build_network.py:531] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:554] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:570] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:571] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:572] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:648] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|deepbiome.py:157] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:158] 2 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:141] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/100\n",
      "640/640 [==============================] - 1s 873us/step - loss: 0.6680 - binary_accuracy: 0.6828 - sensitivity: 0.9615 - specificity: 0.0330 - gmeasure: 0.0356 - auc: 0.4846 - val_loss: 0.6180 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5978\n",
      "Epoch 2/100\n",
      "640/640 [==============================] - 0s 237us/step - loss: 0.6229 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.4893 - val_loss: 0.5677 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5776\n",
      "Epoch 3/100\n",
      "640/640 [==============================] - 0s 232us/step - loss: 0.6107 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.4903 - val_loss: 0.5650 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5910\n",
      "Epoch 4/100\n",
      "640/640 [==============================] - 0s 236us/step - loss: 0.6097 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.4966 - val_loss: 0.5678 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5999\n",
      "Epoch 5/100\n",
      "640/640 [==============================] - 0s 244us/step - loss: 0.6114 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5062 - val_loss: 0.5738 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.6121\n",
      "Epoch 6/100\n",
      "640/640 [==============================] - 0s 233us/step - loss: 0.6110 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5196 - val_loss: 0.5664 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.6080\n",
      "Epoch 7/100\n",
      "640/640 [==============================] - 0s 220us/step - loss: 0.6099 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5145 - val_loss: 0.5681 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.6104\n",
      "Epoch 8/100\n",
      "640/640 [==============================] - 0s 229us/step - loss: 0.6098 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5204 - val_loss: 0.5680 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5821\n",
      "Epoch 9/100\n",
      "640/640 [==============================] - 0s 215us/step - loss: 0.6102 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5174 - val_loss: 0.5667 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5734\n",
      "Epoch 10/100\n",
      "640/640 [==============================] - 0s 246us/step - loss: 0.6096 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5288 - val_loss: 0.5690 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5772\n",
      "Epoch 11/100\n",
      "640/640 [==============================] - 0s 231us/step - loss: 0.6097 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5400 - val_loss: 0.5691 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5785\n",
      "Epoch 12/100\n",
      "640/640 [==============================] - 0s 232us/step - loss: 0.6102 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5366 - val_loss: 0.5685 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5712\n",
      "Epoch 13/100\n",
      "640/640 [==============================] - 0s 230us/step - loss: 0.6099 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5499 - val_loss: 0.5681 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5571\n",
      "Epoch 14/100\n",
      "640/640 [==============================] - 0s 236us/step - loss: 0.6098 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5621 - val_loss: 0.5678 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5649\n",
      "Epoch 15/100\n",
      "640/640 [==============================] - 0s 225us/step - loss: 0.6098 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5767 - val_loss: 0.5678 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5379\n",
      "Epoch 16/100\n",
      "640/640 [==============================] - 0s 227us/step - loss: 0.6102 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5739 - val_loss: 0.5710 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5411\n",
      "Epoch 17/100\n",
      "640/640 [==============================] - 0s 230us/step - loss: 0.6098 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5729 - val_loss: 0.5682 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5339\n",
      "Epoch 18/100\n",
      "640/640 [==============================] - 0s 244us/step - loss: 0.6112 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5808 - val_loss: 0.5656 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5285\n",
      "Epoch 19/100\n",
      "640/640 [==============================] - 0s 249us/step - loss: 0.6096 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5873 - val_loss: 0.5691 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5229\n",
      "Epoch 20/100\n",
      "640/640 [==============================] - 0s 239us/step - loss: 0.6100 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5898 - val_loss: 0.5706 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5196\n",
      "Epoch 21/100\n",
      "640/640 [==============================] - 0s 226us/step - loss: 0.6100 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5974 - val_loss: 0.5665 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5150\n",
      "Epoch 22/100\n",
      "640/640 [==============================] - 0s 231us/step - loss: 0.6106 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5938 - val_loss: 0.5690 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5188\n",
      "Epoch 23/100\n",
      "640/640 [==============================] - 0s 237us/step - loss: 0.6105 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6054 - val_loss: 0.5666 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5086\n",
      "Epoch 24/100\n",
      "640/640 [==============================] - 0s 228us/step - loss: 0.6095 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5967 - val_loss: 0.5690 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5069\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 25/100\n",
      "640/640 [==============================] - 0s 237us/step - loss: 0.6104 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5997 - val_loss: 0.5667 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5017\n",
      "Epoch 26/100\n",
      "640/640 [==============================] - 0s 220us/step - loss: 0.6094 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6006 - val_loss: 0.5694 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4864\n",
      "Epoch 27/100\n",
      "640/640 [==============================] - 0s 214us/step - loss: 0.6099 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5986 - val_loss: 0.5677 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4905\n",
      "Epoch 28/100\n",
      "640/640 [==============================] - 0s 213us/step - loss: 0.6093 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5941 - val_loss: 0.5694 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4818\n",
      "Epoch 29/100\n",
      "640/640 [==============================] - 0s 253us/step - loss: 0.6092 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5940 - val_loss: 0.5686 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4826\n",
      "Epoch 30/100\n",
      "640/640 [==============================] - 0s 227us/step - loss: 0.6094 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6007 - val_loss: 0.5666 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4656\n",
      "Epoch 31/100\n",
      "640/640 [==============================] - 0s 233us/step - loss: 0.6095 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5916 - val_loss: 0.5686 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4704\n",
      "Epoch 32/100\n",
      "640/640 [==============================] - 0s 218us/step - loss: 0.6091 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5985 - val_loss: 0.5688 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4703\n",
      "Epoch 33/100\n",
      "640/640 [==============================] - 0s 230us/step - loss: 0.6089 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5977 - val_loss: 0.5679 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4670\n",
      "Epoch 34/100\n",
      "640/640 [==============================] - 0s 227us/step - loss: 0.6100 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5957 - val_loss: 0.5669 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4666\n",
      "Epoch 35/100\n",
      "640/640 [==============================] - 0s 241us/step - loss: 0.6097 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6051 - val_loss: 0.5715 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4731\n",
      "Epoch 36/100\n",
      "640/640 [==============================] - 0s 241us/step - loss: 0.6087 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5922 - val_loss: 0.5672 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4702\n",
      "Epoch 37/100\n",
      "640/640 [==============================] - 0s 217us/step - loss: 0.6121 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5989 - val_loss: 0.5639 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4642\n",
      "Epoch 38/100\n",
      "640/640 [==============================] - 0s 242us/step - loss: 0.6088 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5899 - val_loss: 0.5720 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4751\n",
      "Epoch 39/100\n",
      "640/640 [==============================] - 0s 216us/step - loss: 0.6089 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5908 - val_loss: 0.5703 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4704\n",
      "Epoch 40/100\n",
      "640/640 [==============================] - 0s 235us/step - loss: 0.6081 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5874 - val_loss: 0.5678 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4689\n",
      "Epoch 41/100\n",
      "640/640 [==============================] - 0s 236us/step - loss: 0.6078 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6017 - val_loss: 0.5668 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4699\n",
      "Epoch 42/100\n",
      "640/640 [==============================] - 0s 254us/step - loss: 0.6078 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6010 - val_loss: 0.5678 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4718\n",
      "Epoch 43/100\n",
      "640/640 [==============================] - 0s 259us/step - loss: 0.6078 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6044 - val_loss: 0.5677 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4717\n",
      "Epoch 44/100\n",
      "640/640 [==============================] - 0s 239us/step - loss: 0.6079 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5941 - val_loss: 0.5679 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4735\n",
      "Epoch 45/100\n",
      "640/640 [==============================] - 0s 232us/step - loss: 0.6076 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5874 - val_loss: 0.5698 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4752\n",
      "Epoch 46/100\n",
      "640/640 [==============================] - 0s 232us/step - loss: 0.6078 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5978 - val_loss: 0.5671 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4741\n",
      "Epoch 47/100\n",
      "640/640 [==============================] - 0s 223us/step - loss: 0.6067 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5990 - val_loss: 0.5683 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4739\n",
      "Epoch 48/100\n",
      "640/640 [==============================] - 0s 226us/step - loss: 0.6062 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5901 - val_loss: 0.5690 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4723\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 49/100\n",
      "640/640 [==============================] - 0s 197us/step - loss: 0.6062 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5911 - val_loss: 0.5682 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4734\n",
      "Epoch 50/100\n",
      "640/640 [==============================] - 0s 256us/step - loss: 0.6061 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5876 - val_loss: 0.5678 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4754\n",
      "Epoch 51/100\n",
      "640/640 [==============================] - 0s 229us/step - loss: 0.6069 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6035 - val_loss: 0.5661 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4713\n",
      "Epoch 52/100\n",
      "640/640 [==============================] - 0s 247us/step - loss: 0.6052 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6023 - val_loss: 0.5689 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4742\n",
      "Epoch 53/100\n",
      "640/640 [==============================] - 0s 234us/step - loss: 0.6059 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6024 - val_loss: 0.5705 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4764\n",
      "Epoch 54/100\n",
      "640/640 [==============================] - 0s 208us/step - loss: 0.6064 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6062 - val_loss: 0.5656 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4741\n",
      "Epoch 55/100\n",
      "640/640 [==============================] - 0s 226us/step - loss: 0.6044 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5942 - val_loss: 0.5687 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4736\n",
      "Epoch 56/100\n",
      "640/640 [==============================] - 0s 226us/step - loss: 0.6043 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5908 - val_loss: 0.5687 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4740\n",
      "Epoch 57/100\n",
      "640/640 [==============================] - 0s 232us/step - loss: 0.6046 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6027 - val_loss: 0.5688 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4746\n",
      "Epoch 58/100\n",
      "640/640 [==============================] - 0s 239us/step - loss: 0.6035 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6041 - val_loss: 0.5674 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4740\n",
      "Epoch 59/100\n",
      "640/640 [==============================] - 0s 225us/step - loss: 0.6035 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5948 - val_loss: 0.5673 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4766\n",
      "Epoch 60/100\n",
      "640/640 [==============================] - 0s 225us/step - loss: 0.6048 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5983 - val_loss: 0.5703 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4800\n",
      "Epoch 61/100\n",
      "640/640 [==============================] - 0s 235us/step - loss: 0.6030 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6007 - val_loss: 0.5665 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4766\n",
      "Epoch 62/100\n",
      "640/640 [==============================] - 0s 228us/step - loss: 0.6032 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6064 - val_loss: 0.5678 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4799\n",
      "Epoch 63/100\n",
      "640/640 [==============================] - 0s 232us/step - loss: 0.6021 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6098 - val_loss: 0.5710 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4817\n",
      "Epoch 64/100\n",
      "640/640 [==============================] - 0s 225us/step - loss: 0.6029 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6041 - val_loss: 0.5721 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4824\n",
      "Epoch 65/100\n",
      "640/640 [==============================] - 0s 240us/step - loss: 0.6027 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6004 - val_loss: 0.5664 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4815\n",
      "Epoch 66/100\n",
      "640/640 [==============================] - 0s 235us/step - loss: 0.6036 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6120 - val_loss: 0.5726 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4822\n",
      "Epoch 67/100\n",
      "640/640 [==============================] - 0s 230us/step - loss: 0.6009 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5998 - val_loss: 0.5678 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4814\n",
      "Epoch 68/100\n",
      "640/640 [==============================] - 0s 238us/step - loss: 0.6006 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6092 - val_loss: 0.5687 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4815\n",
      "Epoch 69/100\n",
      "640/640 [==============================] - 0s 237us/step - loss: 0.6014 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6064 - val_loss: 0.5719 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4837\n",
      "Epoch 70/100\n",
      "640/640 [==============================] - 0s 224us/step - loss: 0.6039 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6137 - val_loss: 0.5678 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4825\n",
      "Epoch 71/100\n",
      "640/640 [==============================] - 0s 233us/step - loss: 0.6013 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6039 - val_loss: 0.5748 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4861\n",
      "Epoch 72/100\n",
      "640/640 [==============================] - 0s 227us/step - loss: 0.5996 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6112 - val_loss: 0.5683 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4825\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 73/100\n",
      "640/640 [==============================] - 0s 226us/step - loss: 0.6004 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6081 - val_loss: 0.5702 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4826\n",
      "Epoch 74/100\n",
      "640/640 [==============================] - 0s 240us/step - loss: 0.5981 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6021 - val_loss: 0.5742 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4841\n",
      "Epoch 75/100\n",
      "640/640 [==============================] - 0s 221us/step - loss: 0.5985 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6149 - val_loss: 0.5702 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4857\n",
      "Epoch 76/100\n",
      "640/640 [==============================] - 0s 214us/step - loss: 0.5993 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6006 - val_loss: 0.5719 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4883\n",
      "Epoch 77/100\n",
      "640/640 [==============================] - 0s 230us/step - loss: 0.5979 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6136 - val_loss: 0.5706 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4886\n",
      "Epoch 78/100\n",
      "640/640 [==============================] - 0s 242us/step - loss: 0.5982 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6239 - val_loss: 0.5702 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4893\n",
      "Epoch 79/100\n",
      "640/640 [==============================] - 0s 238us/step - loss: 0.5967 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6143 - val_loss: 0.5762 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4883\n",
      "Epoch 80/100\n",
      "640/640 [==============================] - 0s 239us/step - loss: 0.5958 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6149 - val_loss: 0.5717 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4941\n",
      "Epoch 81/100\n",
      "640/640 [==============================] - 0s 226us/step - loss: 0.5959 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6196 - val_loss: 0.5713 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4944\n",
      "Epoch 82/100\n",
      "640/640 [==============================] - 0s 225us/step - loss: 0.5950 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6062 - val_loss: 0.5739 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4937\n",
      "Epoch 83/100\n",
      "640/640 [==============================] - 0s 230us/step - loss: 0.5981 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6220 - val_loss: 0.5788 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4929\n",
      "Epoch 84/100\n",
      "640/640 [==============================] - 0s 237us/step - loss: 0.5954 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6245 - val_loss: 0.5713 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4929\n",
      "Epoch 85/100\n",
      "640/640 [==============================] - 0s 235us/step - loss: 0.5944 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6193 - val_loss: 0.5752 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4956\n",
      "Epoch 86/100\n",
      "640/640 [==============================] - 0s 227us/step - loss: 0.5934 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6229 - val_loss: 0.5744 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4958\n",
      "Epoch 87/100\n",
      "640/640 [==============================] - 0s 235us/step - loss: 0.5932 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6278 - val_loss: 0.5745 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4966\n",
      "Epoch 88/100\n",
      "640/640 [==============================] - 0s 237us/step - loss: 0.5930 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6135 - val_loss: 0.5748 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4948\n",
      "Epoch 89/100\n",
      "640/640 [==============================] - 0s 225us/step - loss: 0.5929 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6148 - val_loss: 0.5759 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4962\n",
      "Epoch 90/100\n",
      "640/640 [==============================] - 0s 254us/step - loss: 0.5929 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6206 - val_loss: 0.5791 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4960\n",
      "Epoch 91/100\n",
      "640/640 [==============================] - 0s 248us/step - loss: 0.5918 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6221 - val_loss: 0.5761 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4973\n",
      "Epoch 92/100\n",
      "640/640 [==============================] - 0s 241us/step - loss: 0.5933 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6139 - val_loss: 0.5758 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4969\n",
      "Epoch 93/100\n",
      "640/640 [==============================] - 0s 235us/step - loss: 0.5920 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6288 - val_loss: 0.5814 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4970\n",
      "Epoch 94/100\n",
      "640/640 [==============================] - 0s 236us/step - loss: 0.5902 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6232 - val_loss: 0.5768 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4848\n",
      "Epoch 95/100\n",
      "640/640 [==============================] - 0s 245us/step - loss: 0.5905 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6266 - val_loss: 0.5790 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4857\n",
      "Epoch 96/100\n",
      "640/640 [==============================] - 0s 231us/step - loss: 0.5903 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6226 - val_loss: 0.5794 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4864\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 97/100\n",
      "640/640 [==============================] - 0s 232us/step - loss: 0.5902 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6315 - val_loss: 0.5806 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4854\n",
      "Epoch 98/100\n",
      "640/640 [==============================] - 0s 240us/step - loss: 0.5898 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6265 - val_loss: 0.5780 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4861\n",
      "Epoch 99/100\n",
      "640/640 [==============================] - 0s 235us/step - loss: 0.5893 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6309 - val_loss: 0.5827 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4850\n",
      "Epoch 100/100\n",
      "640/640 [==============================] - 0s 238us/step - loss: 0.5886 - binary_accuracy: 0.7016 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6214 - val_loss: 0.5819 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4845\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:151] Training end with time 17.24140453338623!\n",
      "[root    |INFO|build_network.py:79] Saved trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |DEBUG|deepbiome.py:166] Save weight at ./example_result/weight_1.h5\n",
      "[root    |DEBUG|deepbiome.py:169] Save history at ./example_result/hist_1.json\n",
      "[root    |INFO|build_network.py:177] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 9us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:182] Evaluation end with time 0.015735149383544922!\n",
      "[root    |INFO|build_network.py:183] Evaluation: [0.5864784121513367, 0.7112500071525574, 1.0, 0.0, 0.0, 0.6002137660980225]\n",
      "[root    |INFO|build_network.py:177] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "201/201 [==============================] - 0s 26us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:182] Evaluation end with time 0.01349329948425293!\n",
      "[root    |INFO|build_network.py:183] Evaluation: [0.5759527683258057, 0.7562189102172852, 1.0, 0.0, 0.0, 0.49046725034713745]\n",
      "[root    |INFO|deepbiome.py:179] Compute time : 18.8231201171875\n",
      "[root    |INFO|deepbiome.py:180] 2 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:137] -------3 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:147] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:148] Build network for 3 simulation\n",
      "[root    |INFO|build_network.py:513] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:514] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:518] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:519] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:526]      Genus: 48\n",
      "[root    |INFO|build_network.py:526]     Family: 40\n",
      "[root    |INFO|build_network.py:526]      Order: 23\n",
      "[root    |INFO|build_network.py:526]      Class: 17\n",
      "[root    |INFO|build_network.py:526]     Phylum: 9\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:530] Phylogenetic_tree_dict info: ['Class', 'Order', 'Genus', 'Phylum', 'Family', 'Number']\n",
      "[root    |INFO|build_network.py:531] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:554] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:570] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:571] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:572] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:648] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|deepbiome.py:157] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:158] 3 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:141] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/100\n",
      "640/640 [==============================] - 1s 975us/step - loss: 0.6694 - binary_accuracy: 0.6453 - sensitivity: 0.9304 - specificity: 0.0769 - gmeasure: 0.0237 - auc: 0.4645 - val_loss: 0.6437 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.3888\n",
      "Epoch 2/100\n",
      "640/640 [==============================] - 0s 260us/step - loss: 0.6278 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.4657 - val_loss: 0.6214 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.3909\n",
      "Epoch 3/100\n",
      "640/640 [==============================] - 0s 255us/step - loss: 0.6181 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.4737 - val_loss: 0.6224 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.3866\n",
      "Epoch 4/100\n",
      "640/640 [==============================] - 0s 241us/step - loss: 0.6184 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.4657 - val_loss: 0.6213 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4061\n",
      "Epoch 5/100\n",
      "640/640 [==============================] - 0s 247us/step - loss: 0.6175 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.4756 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4015\n",
      "Epoch 6/100\n",
      "640/640 [==============================] - 0s 231us/step - loss: 0.6175 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.4828 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.3973\n",
      "Epoch 7/100\n",
      "640/640 [==============================] - 0s 241us/step - loss: 0.6177 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.4889 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4038\n",
      "Epoch 8/100\n",
      "640/640 [==============================] - 0s 262us/step - loss: 0.6175 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5004 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.3805\n",
      "Epoch 9/100\n",
      "640/640 [==============================] - 0s 216us/step - loss: 0.6175 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.4902 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.3900\n",
      "Epoch 10/100\n",
      "640/640 [==============================] - 0s 237us/step - loss: 0.6175 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5030 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.3912\n",
      "Epoch 11/100\n",
      "640/640 [==============================] - 0s 241us/step - loss: 0.6177 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5069 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.3888\n",
      "Epoch 12/100\n",
      "640/640 [==============================] - 0s 233us/step - loss: 0.6177 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5171 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4165\n",
      "Epoch 13/100\n",
      "640/640 [==============================] - 0s 241us/step - loss: 0.6175 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5148 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4315\n",
      "Epoch 14/100\n",
      "640/640 [==============================] - 0s 218us/step - loss: 0.6179 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5164 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4669\n",
      "Epoch 15/100\n",
      "640/640 [==============================] - 0s 213us/step - loss: 0.6180 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5383 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5412\n",
      "Epoch 16/100\n",
      "640/640 [==============================] - 0s 242us/step - loss: 0.6183 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5437 - val_loss: 0.6214 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5466\n",
      "Epoch 17/100\n",
      "640/640 [==============================] - 0s 210us/step - loss: 0.6177 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5569 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5415\n",
      "Epoch 18/100\n",
      "640/640 [==============================] - 0s 214us/step - loss: 0.6176 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5601 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5376\n",
      "Epoch 19/100\n",
      "640/640 [==============================] - 0s 232us/step - loss: 0.6175 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5500 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5431\n",
      "Epoch 20/100\n",
      "640/640 [==============================] - 0s 240us/step - loss: 0.6185 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5568 - val_loss: 0.6217 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5402\n",
      "Epoch 21/100\n",
      "640/640 [==============================] - 0s 242us/step - loss: 0.6184 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5431 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5401\n",
      "Epoch 22/100\n",
      "640/640 [==============================] - 0s 229us/step - loss: 0.6181 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5638 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5250\n",
      "Epoch 23/100\n",
      "640/640 [==============================] - 0s 234us/step - loss: 0.6174 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5572 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5173\n",
      "Epoch 24/100\n",
      "640/640 [==============================] - 0s 212us/step - loss: 0.6174 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5567 - val_loss: 0.6215 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5390\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 25/100\n",
      "640/640 [==============================] - 0s 233us/step - loss: 0.6183 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5576 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5372\n",
      "Epoch 26/100\n",
      "640/640 [==============================] - 0s 245us/step - loss: 0.6176 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5638 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5170\n",
      "Epoch 27/100\n",
      "640/640 [==============================] - 0s 232us/step - loss: 0.6175 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5624 - val_loss: 0.6214 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5166\n",
      "Epoch 28/100\n",
      "640/640 [==============================] - 0s 235us/step - loss: 0.6178 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5620 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5271\n",
      "Epoch 29/100\n",
      "640/640 [==============================] - 0s 246us/step - loss: 0.6175 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5464 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5334\n",
      "Epoch 30/100\n",
      "640/640 [==============================] - 0s 247us/step - loss: 0.6175 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5557 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5247\n",
      "Epoch 31/100\n",
      "640/640 [==============================] - 0s 246us/step - loss: 0.6179 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5511 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5148\n",
      "Epoch 32/100\n",
      "640/640 [==============================] - 0s 239us/step - loss: 0.6174 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5569 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5152\n",
      "Epoch 33/100\n",
      "640/640 [==============================] - 0s 229us/step - loss: 0.6176 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5597 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5133\n",
      "Epoch 34/100\n",
      "640/640 [==============================] - 0s 253us/step - loss: 0.6175 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5675 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5151\n",
      "Epoch 35/100\n",
      "640/640 [==============================] - 0s 264us/step - loss: 0.6174 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5616 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5172\n",
      "Epoch 36/100\n",
      "640/640 [==============================] - 0s 238us/step - loss: 0.6175 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5610 - val_loss: 0.6213 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5162\n",
      "Epoch 37/100\n",
      "640/640 [==============================] - 0s 234us/step - loss: 0.6174 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5528 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5149\n",
      "Epoch 38/100\n",
      "640/640 [==============================] - 0s 238us/step - loss: 0.6181 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5464 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5107\n",
      "Epoch 39/100\n",
      "640/640 [==============================] - 0s 239us/step - loss: 0.6193 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5567 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5122\n",
      "Epoch 40/100\n",
      "640/640 [==============================] - 0s 236us/step - loss: 0.6179 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5561 - val_loss: 0.6214 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5133\n",
      "Epoch 41/100\n",
      "640/640 [==============================] - 0s 238us/step - loss: 0.6176 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5608 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5106\n",
      "Epoch 42/100\n",
      "640/640 [==============================] - 0s 242us/step - loss: 0.6173 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5612 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5113\n",
      "Epoch 43/100\n",
      "640/640 [==============================] - 0s 222us/step - loss: 0.6174 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5506 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5120\n",
      "Epoch 44/100\n",
      "640/640 [==============================] - 0s 241us/step - loss: 0.6175 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5600 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5122\n",
      "Epoch 45/100\n",
      "640/640 [==============================] - 0s 243us/step - loss: 0.6178 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5687 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5134\n",
      "Epoch 46/100\n",
      "640/640 [==============================] - 0s 256us/step - loss: 0.6180 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5718 - val_loss: 0.6213 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5169\n",
      "Epoch 47/100\n",
      "640/640 [==============================] - 0s 240us/step - loss: 0.6179 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5640 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5122\n",
      "Epoch 48/100\n",
      "640/640 [==============================] - 0s 241us/step - loss: 0.6174 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5714 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5139\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 49/100\n",
      "640/640 [==============================] - 0s 240us/step - loss: 0.6175 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5727 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5149\n",
      "Epoch 50/100\n",
      "640/640 [==============================] - 0s 250us/step - loss: 0.6172 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5625 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5149\n",
      "Epoch 51/100\n",
      "640/640 [==============================] - 0s 224us/step - loss: 0.6174 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5741 - val_loss: 0.6213 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5181\n",
      "Epoch 52/100\n",
      "640/640 [==============================] - 0s 238us/step - loss: 0.6176 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5708 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5152\n",
      "Epoch 53/100\n",
      "640/640 [==============================] - 0s 229us/step - loss: 0.6172 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5684 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5137\n",
      "Epoch 54/100\n",
      "640/640 [==============================] - 0s 242us/step - loss: 0.6172 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5709 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5139\n",
      "Epoch 55/100\n",
      "640/640 [==============================] - 0s 251us/step - loss: 0.6172 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5631 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5149\n",
      "Epoch 56/100\n",
      "640/640 [==============================] - 0s 237us/step - loss: 0.6170 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5833 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5150\n",
      "Epoch 57/100\n",
      "640/640 [==============================] - 0s 253us/step - loss: 0.6171 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5739 - val_loss: 0.6210 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5126\n",
      "Epoch 58/100\n",
      "640/640 [==============================] - 0s 230us/step - loss: 0.6168 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5682 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5153\n",
      "Epoch 59/100\n",
      "640/640 [==============================] - 0s 245us/step - loss: 0.6168 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5761 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5123\n",
      "Epoch 60/100\n",
      "640/640 [==============================] - 0s 253us/step - loss: 0.6171 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5679 - val_loss: 0.6215 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5127\n",
      "Epoch 61/100\n",
      "640/640 [==============================] - 0s 223us/step - loss: 0.6169 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5757 - val_loss: 0.6213 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5143\n",
      "Epoch 62/100\n",
      "640/640 [==============================] - 0s 226us/step - loss: 0.6169 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5736 - val_loss: 0.6210 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5134\n",
      "Epoch 63/100\n",
      "640/640 [==============================] - 0s 252us/step - loss: 0.6167 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5776 - val_loss: 0.6210 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5096\n",
      "Epoch 64/100\n",
      "640/640 [==============================] - 0s 253us/step - loss: 0.6164 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5827 - val_loss: 0.6210 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5098\n",
      "Epoch 65/100\n",
      "640/640 [==============================] - 0s 242us/step - loss: 0.6163 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5727 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5130\n",
      "Epoch 66/100\n",
      "640/640 [==============================] - 0s 226us/step - loss: 0.6166 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5744 - val_loss: 0.6210 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5132\n",
      "Epoch 67/100\n",
      "640/640 [==============================] - 0s 261us/step - loss: 0.6161 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5689 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5120\n",
      "Epoch 68/100\n",
      "640/640 [==============================] - 0s 230us/step - loss: 0.6164 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5772 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5088\n",
      "Epoch 69/100\n",
      "640/640 [==============================] - 0s 223us/step - loss: 0.6161 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5889 - val_loss: 0.6213 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5130\n",
      "Epoch 70/100\n",
      "640/640 [==============================] - 0s 245us/step - loss: 0.6161 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5742 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5127\n",
      "Epoch 71/100\n",
      "640/640 [==============================] - 0s 230us/step - loss: 0.6157 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5715 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5237\n",
      "Epoch 72/100\n",
      "640/640 [==============================] - 0s 250us/step - loss: 0.6157 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5647 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5258\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 73/100\n",
      "640/640 [==============================] - 0s 258us/step - loss: 0.6156 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5733 - val_loss: 0.6214 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5290\n",
      "Epoch 74/100\n",
      "640/640 [==============================] - 0s 244us/step - loss: 0.6152 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5715 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5208\n",
      "Epoch 75/100\n",
      "640/640 [==============================] - 0s 236us/step - loss: 0.6149 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5864 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5339\n",
      "Epoch 76/100\n",
      "640/640 [==============================] - 0s 244us/step - loss: 0.6149 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5923 - val_loss: 0.6214 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5352\n",
      "Epoch 77/100\n",
      "640/640 [==============================] - 0s 240us/step - loss: 0.6146 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5997 - val_loss: 0.6213 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5377\n",
      "Epoch 78/100\n",
      "640/640 [==============================] - 0s 246us/step - loss: 0.6143 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5921 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5407\n",
      "Epoch 79/100\n",
      "640/640 [==============================] - 0s 242us/step - loss: 0.6143 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5825 - val_loss: 0.6213 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5411\n",
      "Epoch 80/100\n",
      "640/640 [==============================] - 0s 218us/step - loss: 0.6143 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5900 - val_loss: 0.6218 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5374\n",
      "Epoch 81/100\n",
      "640/640 [==============================] - 0s 236us/step - loss: 0.6150 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5846 - val_loss: 0.6213 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5490\n",
      "Epoch 82/100\n",
      "640/640 [==============================] - 0s 247us/step - loss: 0.6138 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5888 - val_loss: 0.6214 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5631\n",
      "Epoch 83/100\n",
      "640/640 [==============================] - 0s 231us/step - loss: 0.6137 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5967 - val_loss: 0.6220 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5491\n",
      "Epoch 84/100\n",
      "640/640 [==============================] - 0s 246us/step - loss: 0.6132 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5990 - val_loss: 0.6215 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5625\n",
      "Epoch 85/100\n",
      "640/640 [==============================] - 0s 266us/step - loss: 0.6130 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5885 - val_loss: 0.6215 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5632\n",
      "Epoch 86/100\n",
      "640/640 [==============================] - 0s 226us/step - loss: 0.6122 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5989 - val_loss: 0.6220 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5575\n",
      "Epoch 87/100\n",
      "640/640 [==============================] - 0s 225us/step - loss: 0.6124 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5934 - val_loss: 0.6218 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5601\n",
      "Epoch 88/100\n",
      "640/640 [==============================] - 0s 219us/step - loss: 0.6119 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5994 - val_loss: 0.6219 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5550\n",
      "Epoch 89/100\n",
      "640/640 [==============================] - 0s 218us/step - loss: 0.6120 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5974 - val_loss: 0.6218 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5570\n",
      "Epoch 90/100\n",
      "640/640 [==============================] - 0s 211us/step - loss: 0.6112 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6007 - val_loss: 0.6223 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5563\n",
      "Epoch 91/100\n",
      "640/640 [==============================] - 0s 220us/step - loss: 0.6113 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6079 - val_loss: 0.6223 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5561\n",
      "Epoch 92/100\n",
      "640/640 [==============================] - 0s 233us/step - loss: 0.6108 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5999 - val_loss: 0.6220 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5576\n",
      "Epoch 93/100\n",
      "640/640 [==============================] - 0s 227us/step - loss: 0.6105 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6055 - val_loss: 0.6221 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5607\n",
      "Epoch 94/100\n",
      "640/640 [==============================] - 0s 244us/step - loss: 0.6104 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5939 - val_loss: 0.6219 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5600\n",
      "Epoch 95/100\n",
      "640/640 [==============================] - 0s 260us/step - loss: 0.6100 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6040 - val_loss: 0.6224 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5568\n",
      "Epoch 96/100\n",
      "640/640 [==============================] - 0s 214us/step - loss: 0.6096 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6027 - val_loss: 0.6225 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5486\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 97/100\n",
      "640/640 [==============================] - 0s 234us/step - loss: 0.6094 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6063 - val_loss: 0.6218 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5604\n",
      "Epoch 98/100\n",
      "640/640 [==============================] - 0s 228us/step - loss: 0.6089 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6091 - val_loss: 0.6219 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5559\n",
      "Epoch 99/100\n",
      "640/640 [==============================] - 0s 243us/step - loss: 0.6084 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6164 - val_loss: 0.6225 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5426\n",
      "Epoch 100/100\n",
      "640/640 [==============================] - 0s 229us/step - loss: 0.6082 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6027 - val_loss: 0.6225 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5581\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:151] Training end with time 17.580644845962524!\n",
      "[root    |INFO|build_network.py:79] Saved trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |DEBUG|deepbiome.py:166] Save weight at ./example_result/weight_2.h5\n",
      "[root    |DEBUG|deepbiome.py:169] Save history at ./example_result/hist_2.json\n",
      "[root    |INFO|build_network.py:177] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 9us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:182] Evaluation end with time 0.01749110221862793!\n",
      "[root    |INFO|build_network.py:183] Evaluation: [0.6108499765396118, 0.6912500262260437, 1.0, 0.0, 0.0, 0.6003397107124329]\n",
      "[root    |INFO|build_network.py:177] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 29us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:182] Evaluation end with time 0.013756275177001953!\n",
      "[root    |INFO|build_network.py:183] Evaluation: [0.6328535079956055, 0.6800000071525574, 1.0, 0.0, 0.0, 0.48609834909439087]\n",
      "[root    |INFO|deepbiome.py:179] Compute time : 19.31364417076111\n",
      "[root    |INFO|deepbiome.py:180] 3 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:183] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:185] Train Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure' 'auc']\n",
      "[root    |INFO|deepbiome.py:188]       mean : [0.49604529 0.76000001 0.96721311 0.2749004  0.28743754 0.71490618]\n",
      "[root    |INFO|deepbiome.py:189]        std : [0.14546571 0.08348527 0.04636766 0.38876787 0.40649807 0.16211051]\n",
      "[root    |INFO|deepbiome.py:190] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:192] Test Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure' 'auc']\n",
      "[root    |INFO|deepbiome.py:195]       mean : [0.5561042  0.74076285 0.93525179 0.24731183 0.25772907 0.61097093]\n",
      "[root    |INFO|deepbiome.py:196]        std : [0.072147   0.04466064 0.09156779 0.34975174 0.36448395 0.17351639]\n",
      "[root    |INFO|deepbiome.py:197] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:206] Total Computing Ended\n",
      "[root    |INFO|deepbiome.py:207] -----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "test_evaluation, train_evaluation, network = deepbiome.deepbiome_train(log, network_info, path_info, number_of_fold=3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `deepbiome_train` saves the trained model weights, evaluation results and history based on the path information from the configuration.\n",
    "\n",
    "From the example above, we can check that `hist_*.json`, `weight_*.h5`, `test_eval.npy`, `train_eval.npy` files were saved."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['hist_0.json',\n",
       " 'weight_2.h5',\n",
       " 'test_eval.npy',\n",
       " 'weight_0.h5',\n",
       " 'train_eval.npy',\n",
       " 'hist_2.json',\n",
       " 'weight_1.h5',\n",
       " 'hist_1.json']"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.listdir(path_info['model_info']['model_dir'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lets check the history files."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nd4e3mOQAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f5c38122b70>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "with open('./%s/hist_0.json' % path_info['model_info']['model_dir'], 'r') as f:\n",
    "    history = json.load(f)\n",
    "    \n",
    "plt.plot(history['val_loss'], label='Validation')\n",
    "plt.plot(history['loss'], label='Training')\n",
    "plt.legend()\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Test evauation and train evauation is the numpy array of the shape (number of fold, number of evaluation measures)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.45950633, 0.78606963, 0.80575538, 0.74193549, 0.77318722,\n",
       "        0.8563472 ],\n",
       "       [0.57595277, 0.75621891, 1.        , 0.        , 0.        ,\n",
       "        0.49046725],\n",
       "       [0.63285351, 0.68000001, 1.        , 0.        , 0.        ,\n",
       "        0.48609835]])"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.29080749, 0.8775    , 0.90163934, 0.82470119, 0.86231261,\n",
       "        0.94416505],\n",
       "       [0.58647841, 0.71125001, 1.        , 0.        , 0.        ,\n",
       "        0.60021377],\n",
       "       [0.61084998, 0.69125003, 1.        , 0.        , 0.        ,\n",
       "        0.60033971]])"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_evaluation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Load the pre-trained network for training\n",
    "\n",
    "If you have a pre-trianed model, you warm_start next training using the pre-trained weights by setting the `warm_start` option in `training_info` to `True`. The file path of the pre-trained weights passed in the `warm_start_model` option. Below is the example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "warm_start_network_info = {\n",
    "    'architecture_info': {\n",
    "        'batch_normalization': 'False',\n",
    "        'drop_out': '0',\n",
    "        'weight_initial': 'glorot_uniform',\n",
    "        'weight_l1_penalty':'0.01',\n",
    "        'weight_decay': 'phylogenetic_tree',\n",
    "    },\n",
    "    'model_info': {\n",
    "        'decay': '0.001',\n",
    "        'loss': 'binary_crossentropy',\n",
    "        'lr': '0.01',\n",
    "        'metrics': 'binary_accuracy, sensitivity, specificity, gmeasure, auc',\n",
    "        'network_class': 'DeepBiomeNetwork',\n",
    "        'normalizer': 'normalize_minmax',\n",
    "        'optimizer': 'adam',\n",
    "        'reader_class': 'MicroBiomeClassificationReader',\n",
    "        'texa_selection_metrics': 'accuracy, sensitivity, specificity, gmeasure'\n",
    "    },\n",
    "    'training_info': {\n",
    "        'warm_start':'True',\n",
    "        'warm_start_model':'./example_result/weight.h5',\n",
    "        'batch_size': '200',\n",
    "        'epochs': '100'\n",
    "    },\n",
    "    'validation_info': {\n",
    "        'batch_size': 'None', \n",
    "        'validation_size': '0.2'\n",
    "    },\n",
    "    'test_info': {\n",
    "        'batch_size': 'None'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:100] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:137] -------1 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:147] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:148] Build network for 1 simulation\n",
      "[root    |INFO|build_network.py:513] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:514] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:518] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:519] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:526]      Genus: 48\n",
      "[root    |INFO|build_network.py:526]     Family: 40\n",
      "[root    |INFO|build_network.py:526]      Order: 23\n",
      "[root    |INFO|build_network.py:526]      Class: 17\n",
      "[root    |INFO|build_network.py:526]     Phylum: 9\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:530] Phylogenetic_tree_dict info: ['Class', 'Order', 'Genus', 'Phylum', 'Family', 'Number']\n",
      "[root    |INFO|build_network.py:531] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:554] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:570] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:571] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:572] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:648] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|build_network.py:83] Load trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |INFO|deepbiome.py:157] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:158] 1 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:141] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/100\n",
      "640/640 [==============================] - 0s 759us/step - loss: 0.2672 - binary_accuracy: 0.8875 - sensitivity: 0.9295 - specificity: 0.7705 - gmeasure: 0.8456 - auc: 0.9500 - val_loss: 0.4331 - val_binary_accuracy: 0.8188 - val_sensitivity: 0.8571 - val_specificity: 0.7292 - val_gmeasure: 0.7906 - val_auc: 0.8825\n",
      "Epoch 2/100\n",
      "640/640 [==============================] - 0s 79us/step - loss: 0.2603 - binary_accuracy: 0.8844 - sensitivity: 0.9323 - specificity: 0.7828 - gmeasure: 0.8513 - auc: 0.9614 - val_loss: 0.4312 - val_binary_accuracy: 0.8500 - val_sensitivity: 0.9464 - val_specificity: 0.6250 - val_gmeasure: 0.7691 - val_auc: 0.8895\n",
      "Epoch 3/100\n",
      "640/640 [==============================] - 0s 95us/step - loss: 0.2568 - binary_accuracy: 0.8984 - sensitivity: 0.9403 - specificity: 0.7943 - gmeasure: 0.8628 - auc: 0.9480 - val_loss: 0.4400 - val_binary_accuracy: 0.8313 - val_sensitivity: 0.8929 - val_specificity: 0.6875 - val_gmeasure: 0.7835 - val_auc: 0.8812\n",
      "Epoch 4/100\n",
      "640/640 [==============================] - 0s 85us/step - loss: 0.2548 - binary_accuracy: 0.8859 - sensitivity: 0.9193 - specificity: 0.8130 - gmeasure: 0.8640 - auc: 0.9605 - val_loss: 0.4735 - val_binary_accuracy: 0.8500 - val_sensitivity: 0.9286 - val_specificity: 0.6667 - val_gmeasure: 0.7868 - val_auc: 0.8795\n",
      "Epoch 5/100\n",
      "640/640 [==============================] - 0s 82us/step - loss: 0.2514 - binary_accuracy: 0.8953 - sensitivity: 0.9296 - specificity: 0.8256 - gmeasure: 0.8754 - auc: 0.9632 - val_loss: 0.4299 - val_binary_accuracy: 0.8250 - val_sensitivity: 0.8929 - val_specificity: 0.6667 - val_gmeasure: 0.7715 - val_auc: 0.8851\n",
      "Epoch 6/100\n",
      "640/640 [==============================] - 0s 90us/step - loss: 0.2478 - binary_accuracy: 0.9016 - sensitivity: 0.9417 - specificity: 0.7789 - gmeasure: 0.8531 - auc: 0.9617 - val_loss: 0.4269 - val_binary_accuracy: 0.8313 - val_sensitivity: 0.9018 - val_specificity: 0.6667 - val_gmeasure: 0.7754 - val_auc: 0.8873\n",
      "Epoch 7/100\n",
      "640/640 [==============================] - 0s 84us/step - loss: 0.2543 - binary_accuracy: 0.8922 - sensitivity: 0.8937 - specificity: 0.8894 - gmeasure: 0.8898 - auc: 0.9645 - val_loss: 0.4491 - val_binary_accuracy: 0.8313 - val_sensitivity: 0.8929 - val_specificity: 0.6875 - val_gmeasure: 0.7835 - val_auc: 0.8845\n",
      "Epoch 8/100\n",
      "640/640 [==============================] - 0s 73us/step - loss: 0.2472 - binary_accuracy: 0.8938 - sensitivity: 0.9489 - specificity: 0.7935 - gmeasure: 0.8672 - auc: 0.9656 - val_loss: 0.4914 - val_binary_accuracy: 0.8625 - val_sensitivity: 0.9554 - val_specificity: 0.6458 - val_gmeasure: 0.7855 - val_auc: 0.8856\n",
      "Epoch 9/100\n",
      "640/640 [==============================] - 0s 81us/step - loss: 0.2496 - binary_accuracy: 0.8938 - sensitivity: 0.9472 - specificity: 0.7808 - gmeasure: 0.8589 - auc: 0.9529 - val_loss: 0.4162 - val_binary_accuracy: 0.8313 - val_sensitivity: 0.8661 - val_specificity: 0.7500 - val_gmeasure: 0.8059 - val_auc: 0.8900\n",
      "Epoch 10/100\n",
      "640/640 [==============================] - 0s 77us/step - loss: 0.2514 - binary_accuracy: 0.8969 - sensitivity: 0.9125 - specificity: 0.9148 - gmeasure: 0.9133 - auc: 0.9695 - val_loss: 0.4181 - val_binary_accuracy: 0.8438 - val_sensitivity: 0.9196 - val_specificity: 0.6667 - val_gmeasure: 0.7830 - val_auc: 0.8899\n",
      "Epoch 11/100\n",
      "640/640 [==============================] - 0s 80us/step - loss: 0.2439 - binary_accuracy: 0.9062 - sensitivity: 0.9631 - specificity: 0.8273 - gmeasure: 0.8922 - auc: 0.9682 - val_loss: 0.4467 - val_binary_accuracy: 0.8687 - val_sensitivity: 0.9554 - val_specificity: 0.6667 - val_gmeasure: 0.7981 - val_auc: 0.8898\n",
      "Epoch 12/100\n",
      "640/640 [==============================] - 0s 96us/step - loss: 0.2446 - binary_accuracy: 0.9000 - sensitivity: 0.9046 - specificity: 0.8590 - gmeasure: 0.8769 - auc: 0.9601 - val_loss: 0.4358 - val_binary_accuracy: 0.8438 - val_sensitivity: 0.9196 - val_specificity: 0.6667 - val_gmeasure: 0.7830 - val_auc: 0.8867\n",
      "Epoch 13/100\n",
      "640/640 [==============================] - 0s 95us/step - loss: 0.2413 - binary_accuracy: 0.9000 - sensitivity: 0.9540 - specificity: 0.7873 - gmeasure: 0.8664 - auc: 0.9620 - val_loss: 0.4711 - val_binary_accuracy: 0.8687 - val_sensitivity: 0.9554 - val_specificity: 0.6667 - val_gmeasure: 0.7981 - val_auc: 0.8874\n",
      "Epoch 14/100\n",
      "640/640 [==============================] - 0s 88us/step - loss: 0.2348 - binary_accuracy: 0.8984 - sensitivity: 0.9367 - specificity: 0.7945 - gmeasure: 0.8625 - auc: 0.9653 - val_loss: 0.4377 - val_binary_accuracy: 0.8313 - val_sensitivity: 0.8661 - val_specificity: 0.7500 - val_gmeasure: 0.8059 - val_auc: 0.8907\n",
      "Epoch 15/100\n",
      "640/640 [==============================] - 0s 82us/step - loss: 0.2451 - binary_accuracy: 0.8938 - sensitivity: 0.9103 - specificity: 0.8723 - gmeasure: 0.8906 - auc: 0.9682 - val_loss: 0.4234 - val_binary_accuracy: 0.8562 - val_sensitivity: 0.9375 - val_specificity: 0.6667 - val_gmeasure: 0.7906 - val_auc: 0.8951\n",
      "Epoch 16/100\n",
      "640/640 [==============================] - 0s 77us/step - loss: 0.2456 - binary_accuracy: 0.9000 - sensitivity: 0.9708 - specificity: 0.7789 - gmeasure: 0.8681 - auc: 0.9672 - val_loss: 0.4335 - val_binary_accuracy: 0.8500 - val_sensitivity: 0.9286 - val_specificity: 0.6667 - val_gmeasure: 0.7868 - val_auc: 0.8897\n",
      "Epoch 17/100\n",
      "640/640 [==============================] - 0s 81us/step - loss: 0.2511 - binary_accuracy: 0.9016 - sensitivity: 0.9172 - specificity: 0.9047 - gmeasure: 0.9092 - auc: 0.9651 - val_loss: 0.4685 - val_binary_accuracy: 0.8375 - val_sensitivity: 0.8750 - val_specificity: 0.7500 - val_gmeasure: 0.8101 - val_auc: 0.8861\n",
      "Epoch 18/100\n",
      "640/640 [==============================] - 0s 88us/step - loss: 0.2389 - binary_accuracy: 0.8938 - sensitivity: 0.9236 - specificity: 0.7823 - gmeasure: 0.8469 - auc: 0.9573 - val_loss: 0.4732 - val_binary_accuracy: 0.8687 - val_sensitivity: 0.9554 - val_specificity: 0.6667 - val_gmeasure: 0.7981 - val_auc: 0.8896\n",
      "Epoch 19/100\n",
      "640/640 [==============================] - 0s 100us/step - loss: 0.2348 - binary_accuracy: 0.9047 - sensitivity: 0.9515 - specificity: 0.8202 - gmeasure: 0.8814 - auc: 0.9707 - val_loss: 0.3965 - val_binary_accuracy: 0.8250 - val_sensitivity: 0.8661 - val_specificity: 0.7292 - val_gmeasure: 0.7947 - val_auc: 0.8977\n",
      "Epoch 20/100\n",
      "640/640 [==============================] - 0s 86us/step - loss: 0.2378 - binary_accuracy: 0.8984 - sensitivity: 0.9200 - specificity: 0.8546 - gmeasure: 0.8857 - auc: 0.9637 - val_loss: 0.4346 - val_binary_accuracy: 0.8438 - val_sensitivity: 0.9196 - val_specificity: 0.6667 - val_gmeasure: 0.7830 - val_auc: 0.8903\n",
      "Epoch 21/100\n",
      "640/640 [==============================] - 0s 87us/step - loss: 0.2270 - binary_accuracy: 0.9078 - sensitivity: 0.9425 - specificity: 0.8453 - gmeasure: 0.8921 - auc: 0.9699 - val_loss: 0.4541 - val_binary_accuracy: 0.8625 - val_sensitivity: 0.9464 - val_specificity: 0.6667 - val_gmeasure: 0.7943 - val_auc: 0.8880\n",
      "Epoch 22/100\n",
      "640/640 [==============================] - 0s 87us/step - loss: 0.2272 - binary_accuracy: 0.9047 - sensitivity: 0.9264 - specificity: 0.8220 - gmeasure: 0.8721 - auc: 0.9620 - val_loss: 0.4049 - val_binary_accuracy: 0.8500 - val_sensitivity: 0.9196 - val_specificity: 0.6875 - val_gmeasure: 0.7951 - val_auc: 0.8974\n",
      "Epoch 23/100\n",
      "640/640 [==============================] - 0s 94us/step - loss: 0.2278 - binary_accuracy: 0.9047 - sensitivity: 0.9295 - specificity: 0.8603 - gmeasure: 0.8925 - auc: 0.9618 - val_loss: 0.4213 - val_binary_accuracy: 0.8625 - val_sensitivity: 0.9464 - val_specificity: 0.6667 - val_gmeasure: 0.7943 - val_auc: 0.8979\n",
      "Epoch 24/100\n",
      "640/640 [==============================] - 0s 92us/step - loss: 0.2269 - binary_accuracy: 0.9047 - sensitivity: 0.9359 - specificity: 0.8348 - gmeasure: 0.8832 - auc: 0.9649 - val_loss: 0.4481 - val_binary_accuracy: 0.8500 - val_sensitivity: 0.9286 - val_specificity: 0.6667 - val_gmeasure: 0.7868 - val_auc: 0.8938\n",
      "Epoch 25/100\n",
      "640/640 [==============================] - 0s 92us/step - loss: 0.2239 - binary_accuracy: 0.9094 - sensitivity: 0.9534 - specificity: 0.8290 - gmeasure: 0.8888 - auc: 0.9692 - val_loss: 0.4560 - val_binary_accuracy: 0.8562 - val_sensitivity: 0.9286 - val_specificity: 0.6875 - val_gmeasure: 0.7990 - val_auc: 0.8902\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 26/100\n",
      "640/640 [==============================] - 0s 93us/step - loss: 0.2241 - binary_accuracy: 0.9047 - sensitivity: 0.9291 - specificity: 0.8642 - gmeasure: 0.8959 - auc: 0.9735 - val_loss: 0.4382 - val_binary_accuracy: 0.8625 - val_sensitivity: 0.9464 - val_specificity: 0.6667 - val_gmeasure: 0.7943 - val_auc: 0.8956\n",
      "Epoch 27/100\n",
      "640/640 [==============================] - 0s 86us/step - loss: 0.2250 - binary_accuracy: 0.9125 - sensitivity: 0.9722 - specificity: 0.7647 - gmeasure: 0.8608 - auc: 0.9653 - val_loss: 0.4316 - val_binary_accuracy: 0.8562 - val_sensitivity: 0.9286 - val_specificity: 0.6875 - val_gmeasure: 0.7990 - val_auc: 0.8962\n",
      "Epoch 28/100\n",
      "640/640 [==============================] - 0s 87us/step - loss: 0.2252 - binary_accuracy: 0.9062 - sensitivity: 0.9246 - specificity: 0.8834 - gmeasure: 0.9031 - auc: 0.9697 - val_loss: 0.4343 - val_binary_accuracy: 0.8500 - val_sensitivity: 0.9018 - val_specificity: 0.7292 - val_gmeasure: 0.8109 - val_auc: 0.8955\n",
      "Epoch 29/100\n",
      "640/640 [==============================] - 0s 87us/step - loss: 0.2185 - binary_accuracy: 0.9141 - sensitivity: 0.9473 - specificity: 0.8647 - gmeasure: 0.9050 - auc: 0.9700 - val_loss: 0.4625 - val_binary_accuracy: 0.8687 - val_sensitivity: 0.9732 - val_specificity: 0.6250 - val_gmeasure: 0.7799 - val_auc: 0.8987\n",
      "Epoch 30/100\n",
      "640/640 [==============================] - 0s 83us/step - loss: 0.2271 - binary_accuracy: 0.9109 - sensitivity: 0.9761 - specificity: 0.7969 - gmeasure: 0.8816 - auc: 0.9736 - val_loss: 0.4192 - val_binary_accuracy: 0.8438 - val_sensitivity: 0.9018 - val_specificity: 0.7083 - val_gmeasure: 0.7992 - val_auc: 0.8983\n",
      "Epoch 31/100\n",
      "640/640 [==============================] - 0s 90us/step - loss: 0.2200 - binary_accuracy: 0.9047 - sensitivity: 0.9006 - specificity: 0.8592 - gmeasure: 0.8796 - auc: 0.9608 - val_loss: 0.4497 - val_binary_accuracy: 0.8687 - val_sensitivity: 0.9554 - val_specificity: 0.6667 - val_gmeasure: 0.7981 - val_auc: 0.8964\n",
      "Epoch 32/100\n",
      "640/640 [==============================] - 0s 89us/step - loss: 0.2204 - binary_accuracy: 0.9109 - sensitivity: 0.9659 - specificity: 0.8149 - gmeasure: 0.8865 - auc: 0.9672 - val_loss: 0.4482 - val_binary_accuracy: 0.8625 - val_sensitivity: 0.9464 - val_specificity: 0.6667 - val_gmeasure: 0.7943 - val_auc: 0.8968\n",
      "Epoch 33/100\n",
      "640/640 [==============================] - 0s 90us/step - loss: 0.2109 - binary_accuracy: 0.9141 - sensitivity: 0.9382 - specificity: 0.8237 - gmeasure: 0.8787 - auc: 0.9674 - val_loss: 0.4284 - val_binary_accuracy: 0.8500 - val_sensitivity: 0.9018 - val_specificity: 0.7292 - val_gmeasure: 0.8109 - val_auc: 0.8972\n",
      "Epoch 34/100\n",
      "640/640 [==============================] - 0s 89us/step - loss: 0.2158 - binary_accuracy: 0.9109 - sensitivity: 0.9149 - specificity: 0.8945 - gmeasure: 0.9045 - auc: 0.9615 - val_loss: 0.4472 - val_binary_accuracy: 0.8625 - val_sensitivity: 0.9464 - val_specificity: 0.6667 - val_gmeasure: 0.7943 - val_auc: 0.8973\n",
      "Epoch 35/100\n",
      "640/640 [==============================] - 0s 94us/step - loss: 0.2125 - binary_accuracy: 0.9125 - sensitivity: 0.9596 - specificity: 0.8352 - gmeasure: 0.8948 - auc: 0.9691 - val_loss: 0.4353 - val_binary_accuracy: 0.8562 - val_sensitivity: 0.9286 - val_specificity: 0.6875 - val_gmeasure: 0.7990 - val_auc: 0.8983\n",
      "Epoch 36/100\n",
      "640/640 [==============================] - 0s 92us/step - loss: 0.2080 - binary_accuracy: 0.9125 - sensitivity: 0.9457 - specificity: 0.8540 - gmeasure: 0.8985 - auc: 0.9718 - val_loss: 0.4546 - val_binary_accuracy: 0.8500 - val_sensitivity: 0.9107 - val_specificity: 0.7083 - val_gmeasure: 0.8032 - val_auc: 0.8949\n",
      "Epoch 37/100\n",
      "640/640 [==============================] - 0s 106us/step - loss: 0.2086 - binary_accuracy: 0.9094 - sensitivity: 0.9510 - specificity: 0.8203 - gmeasure: 0.8819 - auc: 0.9744 - val_loss: 0.4429 - val_binary_accuracy: 0.8500 - val_sensitivity: 0.9107 - val_specificity: 0.7083 - val_gmeasure: 0.8032 - val_auc: 0.8964\n",
      "Epoch 38/100\n",
      "640/640 [==============================] - 0s 86us/step - loss: 0.2078 - binary_accuracy: 0.9094 - sensitivity: 0.8840 - specificity: 0.8648 - gmeasure: 0.8728 - auc: 0.9594 - val_loss: 0.4415 - val_binary_accuracy: 0.8750 - val_sensitivity: 0.9554 - val_specificity: 0.6875 - val_gmeasure: 0.8104 - val_auc: 0.9012\n",
      "Epoch 39/100\n",
      "640/640 [==============================] - 0s 92us/step - loss: 0.2155 - binary_accuracy: 0.9172 - sensitivity: 0.9686 - specificity: 0.8237 - gmeasure: 0.8923 - auc: 0.9709 - val_loss: 0.4293 - val_binary_accuracy: 0.8562 - val_sensitivity: 0.9286 - val_specificity: 0.6875 - val_gmeasure: 0.7990 - val_auc: 0.9014\n",
      "Epoch 40/100\n",
      "640/640 [==============================] - 0s 87us/step - loss: 0.2100 - binary_accuracy: 0.9094 - sensitivity: 0.9362 - specificity: 0.8627 - gmeasure: 0.8982 - auc: 0.9721 - val_loss: 0.4553 - val_binary_accuracy: 0.8500 - val_sensitivity: 0.9107 - val_specificity: 0.7083 - val_gmeasure: 0.8032 - val_auc: 0.8954\n",
      "Epoch 41/100\n",
      "640/640 [==============================] - 0s 94us/step - loss: 0.2064 - binary_accuracy: 0.9156 - sensitivity: 0.9597 - specificity: 0.8278 - gmeasure: 0.8905 - auc: 0.9762 - val_loss: 0.4563 - val_binary_accuracy: 0.8687 - val_sensitivity: 0.9464 - val_specificity: 0.6875 - val_gmeasure: 0.8066 - val_auc: 0.8981\n",
      "Epoch 42/100\n",
      "640/640 [==============================] - 0s 92us/step - loss: 0.2061 - binary_accuracy: 0.9109 - sensitivity: 0.9290 - specificity: 0.8988 - gmeasure: 0.9127 - auc: 0.9765 - val_loss: 0.4311 - val_binary_accuracy: 0.8500 - val_sensitivity: 0.9107 - val_specificity: 0.7083 - val_gmeasure: 0.8032 - val_auc: 0.9012\n",
      "Epoch 43/100\n",
      "640/640 [==============================] - 0s 90us/step - loss: 0.2070 - binary_accuracy: 0.9141 - sensitivity: 0.9554 - specificity: 0.8394 - gmeasure: 0.8952 - auc: 0.9733 - val_loss: 0.4365 - val_binary_accuracy: 0.8500 - val_sensitivity: 0.9196 - val_specificity: 0.6875 - val_gmeasure: 0.7951 - val_auc: 0.9007\n",
      "Epoch 44/100\n",
      "640/640 [==============================] - 0s 86us/step - loss: 0.2022 - binary_accuracy: 0.9172 - sensitivity: 0.9292 - specificity: 0.8843 - gmeasure: 0.9062 - auc: 0.9756 - val_loss: 0.4539 - val_binary_accuracy: 0.8500 - val_sensitivity: 0.9107 - val_specificity: 0.7083 - val_gmeasure: 0.8032 - val_auc: 0.8969\n",
      "Epoch 45/100\n",
      "640/640 [==============================] - 0s 91us/step - loss: 0.2000 - binary_accuracy: 0.9125 - sensitivity: 0.9438 - specificity: 0.8674 - gmeasure: 0.9046 - auc: 0.9723 - val_loss: 0.4587 - val_binary_accuracy: 0.8625 - val_sensitivity: 0.9375 - val_specificity: 0.6875 - val_gmeasure: 0.8028 - val_auc: 0.8997\n",
      "Epoch 46/100\n",
      "640/640 [==============================] - 0s 96us/step - loss: 0.2037 - binary_accuracy: 0.9094 - sensitivity: 0.9423 - specificity: 0.8665 - gmeasure: 0.9030 - auc: 0.9763 - val_loss: 0.4596 - val_binary_accuracy: 0.8500 - val_sensitivity: 0.9196 - val_specificity: 0.6875 - val_gmeasure: 0.7951 - val_auc: 0.8997\n",
      "Epoch 47/100\n",
      "640/640 [==============================] - 0s 83us/step - loss: 0.2100 - binary_accuracy: 0.9141 - sensitivity: 0.9627 - specificity: 0.7953 - gmeasure: 0.8744 - auc: 0.9672 - val_loss: 0.4334 - val_binary_accuracy: 0.8438 - val_sensitivity: 0.9018 - val_specificity: 0.7083 - val_gmeasure: 0.7992 - val_auc: 0.9014\n",
      "Epoch 48/100\n",
      "640/640 [==============================] - 0s 87us/step - loss: 0.2147 - binary_accuracy: 0.9094 - sensitivity: 0.9140 - specificity: 0.8769 - gmeasure: 0.8931 - auc: 0.9769 - val_loss: 0.4242 - val_binary_accuracy: 0.8438 - val_sensitivity: 0.9018 - val_specificity: 0.7083 - val_gmeasure: 0.7992 - val_auc: 0.9036\n",
      "Epoch 49/100\n",
      "640/640 [==============================] - 0s 99us/step - loss: 0.1957 - binary_accuracy: 0.9156 - sensitivity: 0.9557 - specificity: 0.8238 - gmeasure: 0.8869 - auc: 0.9767 - val_loss: 0.4423 - val_binary_accuracy: 0.8750 - val_sensitivity: 0.9643 - val_specificity: 0.6667 - val_gmeasure: 0.8018 - val_auc: 0.9029\n",
      "Epoch 50/100\n",
      "640/640 [==============================] - 0s 97us/step - loss: 0.1947 - binary_accuracy: 0.9234 - sensitivity: 0.9380 - specificity: 0.8508 - gmeasure: 0.8928 - auc: 0.9669 - val_loss: 0.4204 - val_binary_accuracy: 0.8500 - val_sensitivity: 0.9107 - val_specificity: 0.7083 - val_gmeasure: 0.8032 - val_auc: 0.9019\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 51/100\n",
      "640/640 [==============================] - 0s 91us/step - loss: 0.1947 - binary_accuracy: 0.9187 - sensitivity: 0.9471 - specificity: 0.8940 - gmeasure: 0.9200 - auc: 0.9797 - val_loss: 0.4426 - val_binary_accuracy: 0.8687 - val_sensitivity: 0.9554 - val_specificity: 0.6667 - val_gmeasure: 0.7981 - val_auc: 0.9014\n",
      "Epoch 52/100\n",
      "640/640 [==============================] - 0s 91us/step - loss: 0.1930 - binary_accuracy: 0.9281 - sensitivity: 0.9705 - specificity: 0.8608 - gmeasure: 0.9137 - auc: 0.9781 - val_loss: 0.4278 - val_binary_accuracy: 0.8500 - val_sensitivity: 0.9107 - val_specificity: 0.7083 - val_gmeasure: 0.8032 - val_auc: 0.9014\n",
      "Epoch 53/100\n",
      "640/640 [==============================] - 0s 91us/step - loss: 0.1937 - binary_accuracy: 0.9203 - sensitivity: 0.9463 - specificity: 0.9155 - gmeasure: 0.9305 - auc: 0.9793 - val_loss: 0.4204 - val_binary_accuracy: 0.8687 - val_sensitivity: 0.9554 - val_specificity: 0.6667 - val_gmeasure: 0.7981 - val_auc: 0.9053\n",
      "Epoch 54/100\n",
      "640/640 [==============================] - 0s 77us/step - loss: 0.1913 - binary_accuracy: 0.9266 - sensitivity: 0.9643 - specificity: 0.8262 - gmeasure: 0.8922 - auc: 0.9695 - val_loss: 0.4256 - val_binary_accuracy: 0.8500 - val_sensitivity: 0.9107 - val_specificity: 0.7083 - val_gmeasure: 0.8032 - val_auc: 0.9018\n",
      "Epoch 55/100\n",
      "640/640 [==============================] - 0s 86us/step - loss: 0.1897 - binary_accuracy: 0.9234 - sensitivity: 0.9422 - specificity: 0.8882 - gmeasure: 0.9147 - auc: 0.9778 - val_loss: 0.4378 - val_binary_accuracy: 0.8500 - val_sensitivity: 0.9107 - val_specificity: 0.7083 - val_gmeasure: 0.8032 - val_auc: 0.9042\n",
      "Epoch 56/100\n",
      "640/640 [==============================] - 0s 85us/step - loss: 0.1870 - binary_accuracy: 0.9266 - sensitivity: 0.9313 - specificity: 0.8977 - gmeasure: 0.9141 - auc: 0.9759 - val_loss: 0.4670 - val_binary_accuracy: 0.8750 - val_sensitivity: 0.9643 - val_specificity: 0.6667 - val_gmeasure: 0.8018 - val_auc: 0.9076\n",
      "Epoch 57/100\n",
      "640/640 [==============================] - 0s 83us/step - loss: 0.2106 - binary_accuracy: 0.9156 - sensitivity: 0.9745 - specificity: 0.7564 - gmeasure: 0.8573 - auc: 0.9693 - val_loss: 0.4064 - val_binary_accuracy: 0.8625 - val_sensitivity: 0.8929 - val_specificity: 0.7917 - val_gmeasure: 0.8407 - val_auc: 0.9060\n",
      "Epoch 58/100\n",
      "640/640 [==============================] - 0s 75us/step - loss: 0.2102 - binary_accuracy: 0.9156 - sensitivity: 0.9082 - specificity: 0.9578 - gmeasure: 0.9326 - auc: 0.9762 - val_loss: 0.4628 - val_binary_accuracy: 0.8687 - val_sensitivity: 0.9554 - val_specificity: 0.6667 - val_gmeasure: 0.7981 - val_auc: 0.9053\n",
      "Epoch 59/100\n",
      "640/640 [==============================] - 0s 76us/step - loss: 0.2096 - binary_accuracy: 0.9141 - sensitivity: 0.9817 - specificity: 0.7762 - gmeasure: 0.8728 - auc: 0.9787 - val_loss: 0.4532 - val_binary_accuracy: 0.8562 - val_sensitivity: 0.9196 - val_specificity: 0.7083 - val_gmeasure: 0.8071 - val_auc: 0.9005\n",
      "Epoch 60/100\n",
      "640/640 [==============================] - 0s 75us/step - loss: 0.2050 - binary_accuracy: 0.9187 - sensitivity: 0.9281 - specificity: 0.9433 - gmeasure: 0.9349 - auc: 0.9801 - val_loss: 0.4387 - val_binary_accuracy: 0.8687 - val_sensitivity: 0.9018 - val_specificity: 0.7917 - val_gmeasure: 0.8449 - val_auc: 0.9014\n",
      "Epoch 61/100\n",
      "640/640 [==============================] - 0s 72us/step - loss: 0.1886 - binary_accuracy: 0.9297 - sensitivity: 0.9563 - specificity: 0.8705 - gmeasure: 0.9111 - auc: 0.9788 - val_loss: 0.4640 - val_binary_accuracy: 0.8750 - val_sensitivity: 0.9643 - val_specificity: 0.6667 - val_gmeasure: 0.8018 - val_auc: 0.9090\n",
      "Epoch 62/100\n",
      "640/640 [==============================] - 0s 71us/step - loss: 0.1925 - binary_accuracy: 0.9219 - sensitivity: 0.9591 - specificity: 0.8747 - gmeasure: 0.9145 - auc: 0.9804 - val_loss: 0.4002 - val_binary_accuracy: 0.8438 - val_sensitivity: 0.8839 - val_specificity: 0.7500 - val_gmeasure: 0.8142 - val_auc: 0.9064\n",
      "Epoch 63/100\n",
      "640/640 [==============================] - 0s 85us/step - loss: 0.1864 - binary_accuracy: 0.9297 - sensitivity: 0.9370 - specificity: 0.8855 - gmeasure: 0.9104 - auc: 0.9728 - val_loss: 0.4516 - val_binary_accuracy: 0.8625 - val_sensitivity: 0.9464 - val_specificity: 0.6667 - val_gmeasure: 0.7943 - val_auc: 0.9068\n",
      "Epoch 64/100\n",
      "640/640 [==============================] - 0s 87us/step - loss: 0.1846 - binary_accuracy: 0.9297 - sensitivity: 0.9789 - specificity: 0.8412 - gmeasure: 0.9070 - auc: 0.9810 - val_loss: 0.4739 - val_binary_accuracy: 0.8625 - val_sensitivity: 0.9018 - val_specificity: 0.7708 - val_gmeasure: 0.8337 - val_auc: 0.8975\n",
      "Epoch 65/100\n",
      "640/640 [==============================] - 0s 82us/step - loss: 0.1918 - binary_accuracy: 0.9203 - sensitivity: 0.9101 - specificity: 0.9310 - gmeasure: 0.9203 - auc: 0.9778 - val_loss: 0.4750 - val_binary_accuracy: 0.8625 - val_sensitivity: 0.9464 - val_specificity: 0.6667 - val_gmeasure: 0.7943 - val_auc: 0.8994\n",
      "Epoch 66/100\n",
      "640/640 [==============================] - 0s 77us/step - loss: 0.1820 - binary_accuracy: 0.9297 - sensitivity: 0.9699 - specificity: 0.8563 - gmeasure: 0.9110 - auc: 0.9753 - val_loss: 0.4013 - val_binary_accuracy: 0.8500 - val_sensitivity: 0.9196 - val_specificity: 0.6875 - val_gmeasure: 0.7951 - val_auc: 0.9061\n",
      "Epoch 67/100\n",
      "640/640 [==============================] - 0s 64us/step - loss: 0.1822 - binary_accuracy: 0.9281 - sensitivity: 0.9526 - specificity: 0.9073 - gmeasure: 0.9293 - auc: 0.9831 - val_loss: 0.4393 - val_binary_accuracy: 0.8562 - val_sensitivity: 0.9286 - val_specificity: 0.6875 - val_gmeasure: 0.7990 - val_auc: 0.9014\n",
      "Epoch 68/100\n",
      "640/640 [==============================] - 0s 76us/step - loss: 0.1815 - binary_accuracy: 0.9234 - sensitivity: 0.9687 - specificity: 0.8222 - gmeasure: 0.8916 - auc: 0.9823 - val_loss: 0.4808 - val_binary_accuracy: 0.8500 - val_sensitivity: 0.9286 - val_specificity: 0.6667 - val_gmeasure: 0.7868 - val_auc: 0.8980\n",
      "Epoch 69/100\n",
      "640/640 [==============================] - 0s 71us/step - loss: 0.1765 - binary_accuracy: 0.9281 - sensitivity: 0.9481 - specificity: 0.8942 - gmeasure: 0.9205 - auc: 0.9803 - val_loss: 0.4377 - val_binary_accuracy: 0.8500 - val_sensitivity: 0.9286 - val_specificity: 0.6667 - val_gmeasure: 0.7868 - val_auc: 0.9014\n",
      "Epoch 70/100\n",
      "640/640 [==============================] - 0s 83us/step - loss: 0.1726 - binary_accuracy: 0.9344 - sensitivity: 0.9620 - specificity: 0.8611 - gmeasure: 0.9100 - auc: 0.9793 - val_loss: 0.4393 - val_binary_accuracy: 0.8625 - val_sensitivity: 0.9554 - val_specificity: 0.6458 - val_gmeasure: 0.7855 - val_auc: 0.9102\n",
      "Epoch 71/100\n",
      "640/640 [==============================] - 0s 79us/step - loss: 0.1729 - binary_accuracy: 0.9375 - sensitivity: 0.9626 - specificity: 0.9049 - gmeasure: 0.9329 - auc: 0.9813 - val_loss: 0.4150 - val_binary_accuracy: 0.8562 - val_sensitivity: 0.9196 - val_specificity: 0.7083 - val_gmeasure: 0.8071 - val_auc: 0.9055\n",
      "Epoch 72/100\n",
      "640/640 [==============================] - 0s 81us/step - loss: 0.1745 - binary_accuracy: 0.9391 - sensitivity: 0.9347 - specificity: 0.9061 - gmeasure: 0.9202 - auc: 0.9684 - val_loss: 0.4163 - val_binary_accuracy: 0.8687 - val_sensitivity: 0.9464 - val_specificity: 0.6875 - val_gmeasure: 0.8066 - val_auc: 0.9129\n",
      "Epoch 73/100\n",
      "640/640 [==============================] - 0s 78us/step - loss: 0.1730 - binary_accuracy: 0.9344 - sensitivity: 0.9739 - specificity: 0.8681 - gmeasure: 0.9193 - auc: 0.9815 - val_loss: 0.4226 - val_binary_accuracy: 0.8562 - val_sensitivity: 0.9286 - val_specificity: 0.6875 - val_gmeasure: 0.7990 - val_auc: 0.9070\n",
      "Epoch 74/100\n",
      "640/640 [==============================] - 0s 91us/step - loss: 0.1699 - binary_accuracy: 0.9391 - sensitivity: 0.9541 - specificity: 0.9125 - gmeasure: 0.9324 - auc: 0.9819 - val_loss: 0.4588 - val_binary_accuracy: 0.8625 - val_sensitivity: 0.9464 - val_specificity: 0.6667 - val_gmeasure: 0.7943 - val_auc: 0.9107\n",
      "Epoch 75/100\n",
      "640/640 [==============================] - 0s 102us/step - loss: 0.1740 - binary_accuracy: 0.9328 - sensitivity: 0.9777 - specificity: 0.8736 - gmeasure: 0.9227 - auc: 0.9840 - val_loss: 0.4135 - val_binary_accuracy: 0.8500 - val_sensitivity: 0.9196 - val_specificity: 0.6875 - val_gmeasure: 0.7951 - val_auc: 0.9076\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 76/100\n",
      "640/640 [==============================] - 0s 98us/step - loss: 0.1691 - binary_accuracy: 0.9375 - sensitivity: 0.9551 - specificity: 0.8975 - gmeasure: 0.9257 - auc: 0.9828 - val_loss: 0.4235 - val_binary_accuracy: 0.8562 - val_sensitivity: 0.9286 - val_specificity: 0.6875 - val_gmeasure: 0.7990 - val_auc: 0.9079\n",
      "Epoch 77/100\n",
      "640/640 [==============================] - 0s 77us/step - loss: 0.1680 - binary_accuracy: 0.9359 - sensitivity: 0.9703 - specificity: 0.8994 - gmeasure: 0.9331 - auc: 0.9840 - val_loss: 0.4327 - val_binary_accuracy: 0.8500 - val_sensitivity: 0.9286 - val_specificity: 0.6667 - val_gmeasure: 0.7868 - val_auc: 0.9066\n",
      "Epoch 78/100\n",
      "640/640 [==============================] - 0s 86us/step - loss: 0.1667 - binary_accuracy: 0.9391 - sensitivity: 0.9668 - specificity: 0.8785 - gmeasure: 0.9207 - auc: 0.9839 - val_loss: 0.4528 - val_binary_accuracy: 0.8438 - val_sensitivity: 0.9196 - val_specificity: 0.6667 - val_gmeasure: 0.7830 - val_auc: 0.9038\n",
      "Epoch 79/100\n",
      "640/640 [==============================] - 0s 81us/step - loss: 0.1646 - binary_accuracy: 0.9406 - sensitivity: 0.9651 - specificity: 0.8627 - gmeasure: 0.9104 - auc: 0.9787 - val_loss: 0.4035 - val_binary_accuracy: 0.8500 - val_sensitivity: 0.9196 - val_specificity: 0.6875 - val_gmeasure: 0.7951 - val_auc: 0.9102\n",
      "Epoch 80/100\n",
      "640/640 [==============================] - 0s 63us/step - loss: 0.1682 - binary_accuracy: 0.9422 - sensitivity: 0.9547 - specificity: 0.9104 - gmeasure: 0.9318 - auc: 0.9774 - val_loss: 0.3605 - val_binary_accuracy: 0.8438 - val_sensitivity: 0.9107 - val_specificity: 0.6875 - val_gmeasure: 0.7913 - val_auc: 0.9213\n",
      "Epoch 81/100\n",
      "640/640 [==============================] - 0s 72us/step - loss: 0.1670 - binary_accuracy: 0.9406 - sensitivity: 0.9486 - specificity: 0.9287 - gmeasure: 0.9381 - auc: 0.9798 - val_loss: 0.4366 - val_binary_accuracy: 0.8500 - val_sensitivity: 0.9286 - val_specificity: 0.6667 - val_gmeasure: 0.7868 - val_auc: 0.9094\n",
      "Epoch 82/100\n",
      "640/640 [==============================] - 0s 95us/step - loss: 0.1645 - binary_accuracy: 0.9406 - sensitivity: 0.9778 - specificity: 0.8844 - gmeasure: 0.9298 - auc: 0.9858 - val_loss: 0.4520 - val_binary_accuracy: 0.8687 - val_sensitivity: 0.9196 - val_specificity: 0.7500 - val_gmeasure: 0.8305 - val_auc: 0.9036\n",
      "Epoch 83/100\n",
      "640/640 [==============================] - 0s 69us/step - loss: 0.1668 - binary_accuracy: 0.9344 - sensitivity: 0.9245 - specificity: 0.9481 - gmeasure: 0.9358 - auc: 0.9812 - val_loss: 0.4250 - val_binary_accuracy: 0.8625 - val_sensitivity: 0.9464 - val_specificity: 0.6667 - val_gmeasure: 0.7943 - val_auc: 0.9185\n",
      "Epoch 84/100\n",
      "640/640 [==============================] - 0s 67us/step - loss: 0.1733 - binary_accuracy: 0.9187 - sensitivity: 0.9746 - specificity: 0.7848 - gmeasure: 0.8744 - auc: 0.9820 - val_loss: 0.4227 - val_binary_accuracy: 0.8750 - val_sensitivity: 0.9107 - val_specificity: 0.7917 - val_gmeasure: 0.8491 - val_auc: 0.9081\n",
      "Epoch 85/100\n",
      "640/640 [==============================] - 0s 73us/step - loss: 0.1723 - binary_accuracy: 0.9344 - sensitivity: 0.9208 - specificity: 0.9612 - gmeasure: 0.9406 - auc: 0.9857 - val_loss: 0.5234 - val_binary_accuracy: 0.8625 - val_sensitivity: 0.9643 - val_specificity: 0.6250 - val_gmeasure: 0.7763 - val_auc: 0.9085\n",
      "Epoch 86/100\n",
      "640/640 [==============================] - 0s 65us/step - loss: 0.1939 - binary_accuracy: 0.9187 - sensitivity: 0.9852 - specificity: 0.8258 - gmeasure: 0.9006 - auc: 0.9847 - val_loss: 0.3876 - val_binary_accuracy: 0.8500 - val_sensitivity: 0.9196 - val_specificity: 0.6875 - val_gmeasure: 0.7951 - val_auc: 0.9163\n",
      "Epoch 87/100\n",
      "640/640 [==============================] - 0s 70us/step - loss: 0.1592 - binary_accuracy: 0.9469 - sensitivity: 0.9593 - specificity: 0.9154 - gmeasure: 0.9367 - auc: 0.9816 - val_loss: 0.3858 - val_binary_accuracy: 0.8500 - val_sensitivity: 0.9196 - val_specificity: 0.6875 - val_gmeasure: 0.7951 - val_auc: 0.9198\n",
      "Epoch 88/100\n",
      "640/640 [==============================] - 0s 104us/step - loss: 0.1602 - binary_accuracy: 0.9406 - sensitivity: 0.9740 - specificity: 0.8731 - gmeasure: 0.9216 - auc: 0.9863 - val_loss: 0.4457 - val_binary_accuracy: 0.8500 - val_sensitivity: 0.9286 - val_specificity: 0.6667 - val_gmeasure: 0.7868 - val_auc: 0.9076\n",
      "Epoch 89/100\n",
      "640/640 [==============================] - 0s 80us/step - loss: 0.1672 - binary_accuracy: 0.9391 - sensitivity: 0.9412 - specificity: 0.9416 - gmeasure: 0.9409 - auc: 0.9807 - val_loss: 0.4576 - val_binary_accuracy: 0.8500 - val_sensitivity: 0.9286 - val_specificity: 0.6667 - val_gmeasure: 0.7868 - val_auc: 0.9081\n",
      "Epoch 90/100\n",
      "640/640 [==============================] - 0s 82us/step - loss: 0.1583 - binary_accuracy: 0.9344 - sensitivity: 0.9727 - specificity: 0.8790 - gmeasure: 0.9238 - auc: 0.9806 - val_loss: 0.4122 - val_binary_accuracy: 0.8500 - val_sensitivity: 0.9286 - val_specificity: 0.6667 - val_gmeasure: 0.7868 - val_auc: 0.9142\n",
      "Epoch 91/100\n",
      "640/640 [==============================] - 0s 68us/step - loss: 0.1518 - binary_accuracy: 0.9469 - sensitivity: 0.9582 - specificity: 0.9204 - gmeasure: 0.9390 - auc: 0.9824 - val_loss: 0.4118 - val_binary_accuracy: 0.8687 - val_sensitivity: 0.9286 - val_specificity: 0.7292 - val_gmeasure: 0.8229 - val_auc: 0.9114\n",
      "Epoch 92/100\n",
      "640/640 [==============================] - 0s 93us/step - loss: 0.1540 - binary_accuracy: 0.9453 - sensitivity: 0.9609 - specificity: 0.9030 - gmeasure: 0.9314 - auc: 0.9840 - val_loss: 0.4410 - val_binary_accuracy: 0.8500 - val_sensitivity: 0.9286 - val_specificity: 0.6667 - val_gmeasure: 0.7868 - val_auc: 0.9107\n",
      "Epoch 93/100\n",
      "640/640 [==============================] - 0s 73us/step - loss: 0.1546 - binary_accuracy: 0.9453 - sensitivity: 0.9636 - specificity: 0.9056 - gmeasure: 0.9332 - auc: 0.9873 - val_loss: 0.4101 - val_binary_accuracy: 0.8625 - val_sensitivity: 0.9286 - val_specificity: 0.7083 - val_gmeasure: 0.8110 - val_auc: 0.9130\n",
      "Epoch 94/100\n",
      "640/640 [==============================] - 0s 66us/step - loss: 0.1518 - binary_accuracy: 0.9484 - sensitivity: 0.9626 - specificity: 0.9399 - gmeasure: 0.9510 - auc: 0.9878 - val_loss: 0.4506 - val_binary_accuracy: 0.8625 - val_sensitivity: 0.9554 - val_specificity: 0.6458 - val_gmeasure: 0.7855 - val_auc: 0.9161\n",
      "Epoch 95/100\n",
      "640/640 [==============================] - 0s 73us/step - loss: 0.1541 - binary_accuracy: 0.9375 - sensitivity: 0.9741 - specificity: 0.8872 - gmeasure: 0.9288 - auc: 0.9875 - val_loss: 0.4272 - val_binary_accuracy: 0.8562 - val_sensitivity: 0.9286 - val_specificity: 0.6875 - val_gmeasure: 0.7990 - val_auc: 0.9137\n",
      "Epoch 96/100\n",
      "640/640 [==============================] - 0s 71us/step - loss: 0.1469 - binary_accuracy: 0.9500 - sensitivity: 0.9624 - specificity: 0.9186 - gmeasure: 0.9401 - auc: 0.9865 - val_loss: 0.4687 - val_binary_accuracy: 0.8500 - val_sensitivity: 0.9286 - val_specificity: 0.6667 - val_gmeasure: 0.7868 - val_auc: 0.9081\n",
      "Epoch 97/100\n",
      "640/640 [==============================] - 0s 85us/step - loss: 0.1541 - binary_accuracy: 0.9469 - sensitivity: 0.9778 - specificity: 0.9156 - gmeasure: 0.9458 - auc: 0.9880 - val_loss: 0.4116 - val_binary_accuracy: 0.8500 - val_sensitivity: 0.9286 - val_specificity: 0.6667 - val_gmeasure: 0.7868 - val_auc: 0.9159\n",
      "Epoch 98/100\n",
      "640/640 [==============================] - 0s 73us/step - loss: 0.1481 - binary_accuracy: 0.9469 - sensitivity: 0.9747 - specificity: 0.8821 - gmeasure: 0.9267 - auc: 0.9882 - val_loss: 0.3561 - val_binary_accuracy: 0.8625 - val_sensitivity: 0.9107 - val_specificity: 0.7500 - val_gmeasure: 0.8265 - val_auc: 0.9276\n",
      "Epoch 99/100\n",
      "640/640 [==============================] - 0s 68us/step - loss: 0.1600 - binary_accuracy: 0.9469 - sensitivity: 0.9492 - specificity: 0.9313 - gmeasure: 0.9396 - auc: 0.9805 - val_loss: 0.3866 - val_binary_accuracy: 0.8375 - val_sensitivity: 0.9107 - val_specificity: 0.6667 - val_gmeasure: 0.7792 - val_auc: 0.9237\n",
      "Epoch 100/100\n",
      "640/640 [==============================] - 0s 66us/step - loss: 0.1463 - binary_accuracy: 0.9516 - sensitivity: 0.9717 - specificity: 0.9083 - gmeasure: 0.9393 - auc: 0.9865 - val_loss: 0.4739 - val_binary_accuracy: 0.8687 - val_sensitivity: 0.9286 - val_specificity: 0.7292 - val_gmeasure: 0.8229 - val_auc: 0.9062\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:151] Training end with time 7.7927467823028564!\n",
      "[root    |INFO|build_network.py:79] Saved trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |DEBUG|deepbiome.py:166] Save weight at ./example_result/weight_0.h5\n",
      "[root    |DEBUG|deepbiome.py:169] Save history at ./example_result/hist_0.json\n",
      "[root    |INFO|build_network.py:177] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 8us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:182] Evaluation end with time 0.014286279678344727!\n",
      "[root    |INFO|build_network.py:183] Evaluation: [0.211964413523674, 0.9350000023841858, 0.9526411890983582, 0.8964143395423889, 0.9241002202033997, 0.9699598550796509]\n",
      "[root    |INFO|build_network.py:177] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "201/201 [==============================] - 0s 58us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:182] Evaluation end with time 0.020142793655395508!\n",
      "[root    |INFO|build_network.py:183] Evaluation: [0.5571370124816895, 0.8457711338996887, 0.8705036044120789, 0.7903226017951965, 0.8294448256492615, 0.891274094581604]\n",
      "[root    |INFO|deepbiome.py:179] Compute time : 9.707443475723267\n",
      "[root    |INFO|deepbiome.py:180] 1 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:137] -------2 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:147] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:148] Build network for 2 simulation\n",
      "[root    |INFO|build_network.py:513] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:514] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:518] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:519] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:526]      Genus: 48\n",
      "[root    |INFO|build_network.py:526]     Family: 40\n",
      "[root    |INFO|build_network.py:526]      Order: 23\n",
      "[root    |INFO|build_network.py:526]      Class: 17\n",
      "[root    |INFO|build_network.py:526]     Phylum: 9\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:530] Phylogenetic_tree_dict info: ['Class', 'Order', 'Genus', 'Phylum', 'Family', 'Number']\n",
      "[root    |INFO|build_network.py:531] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:554] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:570] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:571] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:572] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:648] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|build_network.py:83] Load trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |INFO|deepbiome.py:157] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:158] 2 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:141] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/100\n",
      "640/640 [==============================] - 0s 713us/step - loss: 0.5902 - binary_accuracy: 0.7078 - sensitivity: 0.9983 - specificity: 0.0231 - gmeasure: 0.1015 - auc: 0.6077 - val_loss: 0.5811 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4685\n",
      "Epoch 2/100\n",
      "640/640 [==============================] - 0s 75us/step - loss: 0.5876 - binary_accuracy: 0.7047 - sensitivity: 0.9982 - specificity: 0.0127 - gmeasure: 0.0564 - auc: 0.6332 - val_loss: 0.5816 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4679\n",
      "Epoch 3/100\n",
      "640/640 [==============================] - 0s 71us/step - loss: 0.5871 - binary_accuracy: 0.7047 - sensitivity: 0.9983 - specificity: 0.0293 - gmeasure: 0.1369 - auc: 0.6228 - val_loss: 0.5806 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4675\n",
      "Epoch 4/100\n",
      "640/640 [==============================] - 0s 73us/step - loss: 0.5876 - binary_accuracy: 0.7047 - sensitivity: 1.0000 - specificity: 0.0085 - gmeasure: 0.0651 - auc: 0.6470 - val_loss: 0.5819 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4669\n",
      "Epoch 5/100\n",
      "640/640 [==============================] - 0s 85us/step - loss: 0.5870 - binary_accuracy: 0.7031 - sensitivity: 0.9917 - specificity: 0.0290 - gmeasure: 0.1092 - auc: 0.6423 - val_loss: 0.5829 - val_binary_accuracy: 0.7437 - val_sensitivity: 0.9917 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4654\n",
      "Epoch 6/100\n",
      "640/640 [==============================] - 0s 81us/step - loss: 0.5865 - binary_accuracy: 0.7047 - sensitivity: 0.9982 - specificity: 0.0123 - gmeasure: 0.0773 - auc: 0.6445 - val_loss: 0.5833 - val_binary_accuracy: 0.7437 - val_sensitivity: 0.9917 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4669\n",
      "Epoch 7/100\n",
      "640/640 [==============================] - 0s 80us/step - loss: 0.5860 - binary_accuracy: 0.7047 - sensitivity: 0.9982 - specificity: 0.0126 - gmeasure: 0.0971 - auc: 0.6418 - val_loss: 0.5828 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4667\n",
      "Epoch 8/100\n",
      "640/640 [==============================] - 0s 79us/step - loss: 0.5874 - binary_accuracy: 0.7047 - sensitivity: 1.0000 - specificity: 0.0078 - gmeasure: 0.0623 - auc: 0.5998 - val_loss: 0.5832 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4660\n",
      "Epoch 9/100\n",
      "640/640 [==============================] - 0s 76us/step - loss: 0.5881 - binary_accuracy: 0.7031 - sensitivity: 1.0000 - specificity: 0.0038 - gmeasure: 0.0308 - auc: 0.6415 - val_loss: 0.5838 - val_binary_accuracy: 0.7500 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4654\n",
      "Epoch 10/100\n",
      "640/640 [==============================] - 0s 77us/step - loss: 0.5858 - binary_accuracy: 0.7031 - sensitivity: 0.9982 - specificity: 0.0086 - gmeasure: 0.0653 - auc: 0.6292 - val_loss: 0.5880 - val_binary_accuracy: 0.7312 - val_sensitivity: 0.9750 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4652\n",
      "Epoch 11/100\n",
      "640/640 [==============================] - 0s 78us/step - loss: 0.5866 - binary_accuracy: 0.7094 - sensitivity: 0.9968 - specificity: 0.0286 - gmeasure: 0.1442 - auc: 0.6451 - val_loss: 0.5906 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9667 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4646\n",
      "Epoch 12/100\n",
      "640/640 [==============================] - 0s 66us/step - loss: 0.5875 - binary_accuracy: 0.7125 - sensitivity: 0.9928 - specificity: 0.0461 - gmeasure: 0.1819 - auc: 0.6185 - val_loss: 0.5893 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9667 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4652\n",
      "Epoch 13/100\n",
      "640/640 [==============================] - 0s 67us/step - loss: 0.5861 - binary_accuracy: 0.7094 - sensitivity: 0.9965 - specificity: 0.0307 - gmeasure: 0.1390 - auc: 0.6200 - val_loss: 0.5860 - val_binary_accuracy: 0.7375 - val_sensitivity: 0.9833 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4658\n",
      "Epoch 14/100\n",
      "640/640 [==============================] - 0s 69us/step - loss: 0.5857 - binary_accuracy: 0.7094 - sensitivity: 0.9983 - specificity: 0.0253 - gmeasure: 0.1374 - auc: 0.6195 - val_loss: 0.5883 - val_binary_accuracy: 0.7312 - val_sensitivity: 0.9750 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4656\n",
      "Epoch 15/100\n",
      "640/640 [==============================] - 0s 77us/step - loss: 0.5849 - binary_accuracy: 0.7094 - sensitivity: 0.9982 - specificity: 0.0252 - gmeasure: 0.1340 - auc: 0.6351 - val_loss: 0.5877 - val_binary_accuracy: 0.7312 - val_sensitivity: 0.9750 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4658\n",
      "Epoch 16/100\n",
      "640/640 [==============================] - 0s 77us/step - loss: 0.5848 - binary_accuracy: 0.7094 - sensitivity: 0.9983 - specificity: 0.0247 - gmeasure: 0.1335 - auc: 0.5925 - val_loss: 0.5866 - val_binary_accuracy: 0.7437 - val_sensitivity: 0.9917 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4652\n",
      "Epoch 17/100\n",
      "640/640 [==============================] - 0s 74us/step - loss: 0.5850 - binary_accuracy: 0.7094 - sensitivity: 1.0000 - specificity: 0.0207 - gmeasure: 0.1239 - auc: 0.6309 - val_loss: 0.5869 - val_binary_accuracy: 0.7437 - val_sensitivity: 0.9917 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4654\n",
      "Epoch 18/100\n",
      "640/640 [==============================] - 0s 77us/step - loss: 0.5846 - binary_accuracy: 0.7109 - sensitivity: 1.0000 - specificity: 0.0431 - gmeasure: 0.1770 - auc: 0.6227 - val_loss: 0.5893 - val_binary_accuracy: 0.7312 - val_sensitivity: 0.9750 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4648\n",
      "Epoch 19/100\n",
      "640/640 [==============================] - 0s 76us/step - loss: 0.5848 - binary_accuracy: 0.7109 - sensitivity: 0.9982 - specificity: 0.0292 - gmeasure: 0.1473 - auc: 0.6376 - val_loss: 0.5880 - val_binary_accuracy: 0.7437 - val_sensitivity: 0.9917 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4644\n",
      "Epoch 20/100\n",
      "640/640 [==============================] - 0s 72us/step - loss: 0.5840 - binary_accuracy: 0.7125 - sensitivity: 1.0000 - specificity: 0.0289 - gmeasure: 0.1409 - auc: 0.6337 - val_loss: 0.5867 - val_binary_accuracy: 0.7437 - val_sensitivity: 0.9917 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4629\n",
      "Epoch 21/100\n",
      "640/640 [==============================] - 0s 77us/step - loss: 0.5864 - binary_accuracy: 0.7031 - sensitivity: 1.0000 - specificity: 0.0040 - gmeasure: 0.0318 - auc: 0.6583 - val_loss: 0.5877 - val_binary_accuracy: 0.7437 - val_sensitivity: 0.9917 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4619\n",
      "Epoch 22/100\n",
      "640/640 [==============================] - 0s 83us/step - loss: 0.5893 - binary_accuracy: 0.7031 - sensitivity: 1.0000 - specificity: 0.0034 - gmeasure: 0.0291 - auc: 0.6302 - val_loss: 0.5875 - val_binary_accuracy: 0.7437 - val_sensitivity: 0.9917 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4631\n",
      "Epoch 23/100\n",
      "640/640 [==============================] - 0s 80us/step - loss: 0.5844 - binary_accuracy: 0.7078 - sensitivity: 1.0000 - specificity: 0.0168 - gmeasure: 0.1104 - auc: 0.6593 - val_loss: 0.5882 - val_binary_accuracy: 0.7312 - val_sensitivity: 0.9750 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4638\n",
      "Epoch 24/100\n",
      "640/640 [==============================] - 0s 76us/step - loss: 0.5853 - binary_accuracy: 0.7078 - sensitivity: 1.0000 - specificity: 0.0181 - gmeasure: 0.0947 - auc: 0.6200 - val_loss: 0.5886 - val_binary_accuracy: 0.7312 - val_sensitivity: 0.9750 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4640\n",
      "Epoch 25/100\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "640/640 [==============================] - 0s 70us/step - loss: 0.5863 - binary_accuracy: 0.7125 - sensitivity: 1.0000 - specificity: 0.0315 - gmeasure: 0.1456 - auc: 0.6531 - val_loss: 0.5939 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9667 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4638\n",
      "Epoch 26/100\n",
      "640/640 [==============================] - 0s 81us/step - loss: 0.5855 - binary_accuracy: 0.7141 - sensitivity: 0.9946 - specificity: 0.0465 - gmeasure: 0.1841 - auc: 0.6124 - val_loss: 0.5908 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9667 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4633\n",
      "Epoch 27/100\n",
      "640/640 [==============================] - 0s 83us/step - loss: 0.5836 - binary_accuracy: 0.7125 - sensitivity: 0.9982 - specificity: 0.0331 - gmeasure: 0.1503 - auc: 0.6277 - val_loss: 0.5885 - val_binary_accuracy: 0.7312 - val_sensitivity: 0.9750 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4631\n",
      "Epoch 28/100\n",
      "640/640 [==============================] - 0s 85us/step - loss: 0.5840 - binary_accuracy: 0.7125 - sensitivity: 1.0000 - specificity: 0.0658 - gmeasure: 0.2019 - auc: 0.6534 - val_loss: 0.5889 - val_binary_accuracy: 0.7312 - val_sensitivity: 0.9750 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4646\n",
      "Epoch 29/100\n",
      "640/640 [==============================] - 0s 78us/step - loss: 0.5834 - binary_accuracy: 0.7125 - sensitivity: 0.9981 - specificity: 0.0341 - gmeasure: 0.1564 - auc: 0.6381 - val_loss: 0.5893 - val_binary_accuracy: 0.7312 - val_sensitivity: 0.9750 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4652\n",
      "Epoch 30/100\n",
      "640/640 [==============================] - 0s 83us/step - loss: 0.5833 - binary_accuracy: 0.7125 - sensitivity: 0.9983 - specificity: 0.0499 - gmeasure: 0.2194 - auc: 0.6573 - val_loss: 0.5893 - val_binary_accuracy: 0.7312 - val_sensitivity: 0.9750 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4663\n",
      "Epoch 31/100\n",
      "640/640 [==============================] - 0s 80us/step - loss: 0.5834 - binary_accuracy: 0.7109 - sensitivity: 0.9875 - specificity: 0.0710 - gmeasure: 0.2476 - auc: 0.6469 - val_loss: 0.5903 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9667 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4663\n",
      "Epoch 32/100\n",
      "640/640 [==============================] - 0s 81us/step - loss: 0.5829 - binary_accuracy: 0.7109 - sensitivity: 0.9945 - specificity: 0.0758 - gmeasure: 0.2521 - auc: 0.6790 - val_loss: 0.5904 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9667 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4654\n",
      "Epoch 33/100\n",
      "640/640 [==============================] - 0s 78us/step - loss: 0.5830 - binary_accuracy: 0.7125 - sensitivity: 0.9898 - specificity: 0.0367 - gmeasure: 0.1650 - auc: 0.6420 - val_loss: 0.5901 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9667 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4650\n",
      "Epoch 34/100\n",
      "640/640 [==============================] - 0s 86us/step - loss: 0.5838 - binary_accuracy: 0.7125 - sensitivity: 0.9898 - specificity: 0.0366 - gmeasure: 0.1563 - auc: 0.6544 - val_loss: 0.5907 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9667 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4660\n",
      "Epoch 35/100\n",
      "640/640 [==============================] - 0s 84us/step - loss: 0.5830 - binary_accuracy: 0.7109 - sensitivity: 0.9948 - specificity: 0.0380 - gmeasure: 0.1646 - auc: 0.6513 - val_loss: 0.5916 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9667 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4663\n",
      "Epoch 36/100\n",
      "640/640 [==============================] - 0s 87us/step - loss: 0.5827 - binary_accuracy: 0.7125 - sensitivity: 0.9792 - specificity: 0.0822 - gmeasure: 0.2780 - auc: 0.6410 - val_loss: 0.5945 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9667 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4685\n",
      "Epoch 37/100\n",
      "640/640 [==============================] - 0s 84us/step - loss: 0.5830 - binary_accuracy: 0.7078 - sensitivity: 0.9786 - specificity: 0.0827 - gmeasure: 0.2790 - auc: 0.6254 - val_loss: 0.5932 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9667 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4654\n",
      "Epoch 38/100\n",
      "640/640 [==============================] - 0s 87us/step - loss: 0.5823 - binary_accuracy: 0.7078 - sensitivity: 0.9787 - specificity: 0.0659 - gmeasure: 0.2135 - auc: 0.6574 - val_loss: 0.5931 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9667 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4642\n",
      "Epoch 39/100\n",
      "640/640 [==============================] - 0s 84us/step - loss: 0.5821 - binary_accuracy: 0.7141 - sensitivity: 0.9859 - specificity: 0.0945 - gmeasure: 0.3012 - auc: 0.6716 - val_loss: 0.5927 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9667 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4633\n",
      "Epoch 40/100\n",
      "640/640 [==============================] - 0s 85us/step - loss: 0.5825 - binary_accuracy: 0.7141 - sensitivity: 0.9871 - specificity: 0.0896 - gmeasure: 0.2933 - auc: 0.6707 - val_loss: 0.5928 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9667 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4623\n",
      "Epoch 41/100\n",
      "640/640 [==============================] - 0s 85us/step - loss: 0.5824 - binary_accuracy: 0.7141 - sensitivity: 0.9821 - specificity: 0.0756 - gmeasure: 0.2672 - auc: 0.6410 - val_loss: 0.5932 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9667 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4627\n",
      "Epoch 42/100\n",
      "640/640 [==============================] - 0s 82us/step - loss: 0.5822 - binary_accuracy: 0.7125 - sensitivity: 0.9914 - specificity: 0.0888 - gmeasure: 0.2796 - auc: 0.6720 - val_loss: 0.5943 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9667 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4644\n",
      "Epoch 43/100\n",
      "640/640 [==============================] - 0s 86us/step - loss: 0.5815 - binary_accuracy: 0.7125 - sensitivity: 0.9805 - specificity: 0.1138 - gmeasure: 0.3271 - auc: 0.6383 - val_loss: 0.5977 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9667 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4635\n",
      "Epoch 44/100\n",
      "640/640 [==============================] - 0s 82us/step - loss: 0.5845 - binary_accuracy: 0.7125 - sensitivity: 0.9769 - specificity: 0.1019 - gmeasure: 0.3151 - auc: 0.6514 - val_loss: 0.5969 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9667 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4633\n",
      "Epoch 45/100\n",
      "640/640 [==============================] - 0s 79us/step - loss: 0.5807 - binary_accuracy: 0.7141 - sensitivity: 0.9803 - specificity: 0.1148 - gmeasure: 0.3292 - auc: 0.6737 - val_loss: 0.5939 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9667 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4625\n",
      "Epoch 46/100\n",
      "640/640 [==============================] - 0s 75us/step - loss: 0.5840 - binary_accuracy: 0.7156 - sensitivity: 0.9946 - specificity: 0.0518 - gmeasure: 0.1956 - auc: 0.6670 - val_loss: 0.5943 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9667 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4619\n",
      "Epoch 47/100\n",
      "640/640 [==============================] - 0s 85us/step - loss: 0.5814 - binary_accuracy: 0.7094 - sensitivity: 0.9616 - specificity: 0.0831 - gmeasure: 0.2791 - auc: 0.6037 - val_loss: 0.6023 - val_binary_accuracy: 0.7125 - val_sensitivity: 0.9417 - val_specificity: 0.0250 - val_gmeasure: 0.1534 - val_auc: 0.4629\n",
      "Epoch 48/100\n",
      "640/640 [==============================] - 0s 87us/step - loss: 0.5869 - binary_accuracy: 0.7234 - sensitivity: 0.9627 - specificity: 0.1612 - gmeasure: 0.3895 - auc: 0.6673 - val_loss: 0.6062 - val_binary_accuracy: 0.7063 - val_sensitivity: 0.9333 - val_specificity: 0.0250 - val_gmeasure: 0.1528 - val_auc: 0.4627\n",
      "Epoch 49/100\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "640/640 [==============================] - 0s 86us/step - loss: 0.5879 - binary_accuracy: 0.7219 - sensitivity: 0.9631 - specificity: 0.1427 - gmeasure: 0.3662 - auc: 0.6220 - val_loss: 0.5981 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9667 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4585\n",
      "Epoch 50/100\n",
      "640/640 [==============================] - 0s 72us/step - loss: 0.5808 - binary_accuracy: 0.7109 - sensitivity: 0.9787 - specificity: 0.1306 - gmeasure: 0.3432 - auc: 0.6672 - val_loss: 0.5955 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9667 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4583\n",
      "Epoch 51/100\n",
      "640/640 [==============================] - 0s 73us/step - loss: 0.5830 - binary_accuracy: 0.7141 - sensitivity: 0.9828 - specificity: 0.0998 - gmeasure: 0.3020 - auc: 0.6286 - val_loss: 0.5961 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9667 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4588\n",
      "Epoch 52/100\n",
      "640/640 [==============================] - 0s 68us/step - loss: 0.5837 - binary_accuracy: 0.7141 - sensitivity: 0.9829 - specificity: 0.0569 - gmeasure: 0.2028 - auc: 0.6219 - val_loss: 0.5953 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9667 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4590\n",
      "Epoch 53/100\n",
      "640/640 [==============================] - 0s 71us/step - loss: 0.5816 - binary_accuracy: 0.7125 - sensitivity: 0.9755 - specificity: 0.0918 - gmeasure: 0.2955 - auc: 0.6434 - val_loss: 0.5961 - val_binary_accuracy: 0.7188 - val_sensitivity: 0.9583 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4604\n",
      "Epoch 54/100\n",
      "640/640 [==============================] - 0s 80us/step - loss: 0.5808 - binary_accuracy: 0.7094 - sensitivity: 0.9770 - specificity: 0.0884 - gmeasure: 0.2918 - auc: 0.6704 - val_loss: 0.5966 - val_binary_accuracy: 0.7188 - val_sensitivity: 0.9583 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4619\n",
      "Epoch 55/100\n",
      "640/640 [==============================] - 0s 77us/step - loss: 0.5817 - binary_accuracy: 0.7125 - sensitivity: 0.9703 - specificity: 0.0825 - gmeasure: 0.2381 - auc: 0.6393 - val_loss: 0.5991 - val_binary_accuracy: 0.7188 - val_sensitivity: 0.9583 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4619\n",
      "Epoch 56/100\n",
      "640/640 [==============================] - 0s 76us/step - loss: 0.5813 - binary_accuracy: 0.7125 - sensitivity: 0.9765 - specificity: 0.1032 - gmeasure: 0.3170 - auc: 0.5926 - val_loss: 0.5949 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9667 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4617\n",
      "Epoch 57/100\n",
      "640/640 [==============================] - 0s 76us/step - loss: 0.5805 - binary_accuracy: 0.7141 - sensitivity: 0.9838 - specificity: 0.0866 - gmeasure: 0.2890 - auc: 0.6688 - val_loss: 0.5942 - val_binary_accuracy: 0.7312 - val_sensitivity: 0.9750 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4625\n",
      "Epoch 58/100\n",
      "640/640 [==============================] - 0s 79us/step - loss: 0.5815 - binary_accuracy: 0.7141 - sensitivity: 0.9750 - specificity: 0.1089 - gmeasure: 0.3001 - auc: 0.6332 - val_loss: 0.5945 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9667 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4635\n",
      "Epoch 59/100\n",
      "640/640 [==============================] - 0s 84us/step - loss: 0.5803 - binary_accuracy: 0.7125 - sensitivity: 0.9820 - specificity: 0.0712 - gmeasure: 0.2268 - auc: 0.6534 - val_loss: 0.5943 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9667 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4642\n",
      "Epoch 60/100\n",
      "640/640 [==============================] - 0s 87us/step - loss: 0.5804 - binary_accuracy: 0.7141 - sensitivity: 0.9877 - specificity: 0.0784 - gmeasure: 0.2734 - auc: 0.6529 - val_loss: 0.5941 - val_binary_accuracy: 0.7312 - val_sensitivity: 0.9750 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4638\n",
      "Epoch 61/100\n",
      "640/640 [==============================] - 0s 87us/step - loss: 0.5804 - binary_accuracy: 0.7188 - sensitivity: 0.9832 - specificity: 0.0862 - gmeasure: 0.2873 - auc: 0.6322 - val_loss: 0.5957 - val_binary_accuracy: 0.7188 - val_sensitivity: 0.9583 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4644\n",
      "Epoch 62/100\n",
      "640/640 [==============================] - 0s 87us/step - loss: 0.5802 - binary_accuracy: 0.7125 - sensitivity: 0.9789 - specificity: 0.0925 - gmeasure: 0.2981 - auc: 0.6340 - val_loss: 0.6009 - val_binary_accuracy: 0.7125 - val_sensitivity: 0.9417 - val_specificity: 0.0250 - val_gmeasure: 0.1534 - val_auc: 0.4633\n",
      "Epoch 63/100\n",
      "640/640 [==============================] - 0s 87us/step - loss: 0.5847 - binary_accuracy: 0.7203 - sensitivity: 0.9686 - specificity: 0.1261 - gmeasure: 0.3471 - auc: 0.6517 - val_loss: 0.6009 - val_binary_accuracy: 0.7125 - val_sensitivity: 0.9417 - val_specificity: 0.0250 - val_gmeasure: 0.1534 - val_auc: 0.4640\n",
      "Epoch 64/100\n",
      "640/640 [==============================] - 0s 84us/step - loss: 0.5817 - binary_accuracy: 0.7125 - sensitivity: 0.9769 - specificity: 0.1007 - gmeasure: 0.3122 - auc: 0.6287 - val_loss: 0.5944 - val_binary_accuracy: 0.7312 - val_sensitivity: 0.9750 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4617\n",
      "Epoch 65/100\n",
      "640/640 [==============================] - 0s 93us/step - loss: 0.5811 - binary_accuracy: 0.7188 - sensitivity: 0.9869 - specificity: 0.0733 - gmeasure: 0.2642 - auc: 0.6368 - val_loss: 0.5943 - val_binary_accuracy: 0.7312 - val_sensitivity: 0.9750 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4621\n",
      "Epoch 66/100\n",
      "640/640 [==============================] - 0s 86us/step - loss: 0.5802 - binary_accuracy: 0.7109 - sensitivity: 0.9855 - specificity: 0.0577 - gmeasure: 0.2058 - auc: 0.6487 - val_loss: 0.5960 - val_binary_accuracy: 0.7188 - val_sensitivity: 0.9583 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4631\n",
      "Epoch 67/100\n",
      "640/640 [==============================] - 0s 85us/step - loss: 0.5799 - binary_accuracy: 0.7125 - sensitivity: 0.9728 - specificity: 0.0751 - gmeasure: 0.2332 - auc: 0.6205 - val_loss: 0.5959 - val_binary_accuracy: 0.7188 - val_sensitivity: 0.9583 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4629\n",
      "Epoch 68/100\n",
      "640/640 [==============================] - 0s 82us/step - loss: 0.5795 - binary_accuracy: 0.7156 - sensitivity: 0.9824 - specificity: 0.0921 - gmeasure: 0.2940 - auc: 0.6581 - val_loss: 0.5949 - val_binary_accuracy: 0.7188 - val_sensitivity: 0.9583 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4629\n",
      "Epoch 69/100\n",
      "640/640 [==============================] - 0s 87us/step - loss: 0.5789 - binary_accuracy: 0.7141 - sensitivity: 0.9824 - specificity: 0.0760 - gmeasure: 0.2327 - auc: 0.6479 - val_loss: 0.5977 - val_binary_accuracy: 0.7188 - val_sensitivity: 0.9583 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4638\n",
      "Epoch 70/100\n",
      "640/640 [==============================] - 0s 93us/step - loss: 0.5822 - binary_accuracy: 0.7141 - sensitivity: 0.9663 - specificity: 0.0990 - gmeasure: 0.2498 - auc: 0.5938 - val_loss: 0.6022 - val_binary_accuracy: 0.7063 - val_sensitivity: 0.9333 - val_specificity: 0.0250 - val_gmeasure: 0.1528 - val_auc: 0.4627\n",
      "Epoch 71/100\n",
      "640/640 [==============================] - 0s 82us/step - loss: 0.5822 - binary_accuracy: 0.7141 - sensitivity: 0.9649 - specificity: 0.1372 - gmeasure: 0.3616 - auc: 0.6045 - val_loss: 0.5965 - val_binary_accuracy: 0.7188 - val_sensitivity: 0.9583 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4638\n",
      "Epoch 72/100\n",
      "640/640 [==============================] - 0s 83us/step - loss: 0.5786 - binary_accuracy: 0.7156 - sensitivity: 0.9780 - specificity: 0.0731 - gmeasure: 0.2286 - auc: 0.6601 - val_loss: 0.5931 - val_binary_accuracy: 0.7312 - val_sensitivity: 0.9750 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4635\n",
      "Epoch 73/100\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "640/640 [==============================] - 0s 89us/step - loss: 0.5829 - binary_accuracy: 0.7141 - sensitivity: 0.9945 - specificity: 0.0460 - gmeasure: 0.1846 - auc: 0.6509 - val_loss: 0.5930 - val_binary_accuracy: 0.7312 - val_sensitivity: 0.9750 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4654\n",
      "Epoch 74/100\n",
      "640/640 [==============================] - 0s 83us/step - loss: 0.5810 - binary_accuracy: 0.7172 - sensitivity: 0.9946 - specificity: 0.0954 - gmeasure: 0.2944 - auc: 0.6331 - val_loss: 0.5933 - val_binary_accuracy: 0.7312 - val_sensitivity: 0.9750 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4665\n",
      "Epoch 75/100\n",
      "640/640 [==============================] - 0s 91us/step - loss: 0.5789 - binary_accuracy: 0.7172 - sensitivity: 0.9858 - specificity: 0.1007 - gmeasure: 0.3107 - auc: 0.6643 - val_loss: 0.5940 - val_binary_accuracy: 0.7188 - val_sensitivity: 0.9583 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4669\n",
      "Epoch 76/100\n",
      "640/640 [==============================] - 0s 84us/step - loss: 0.5793 - binary_accuracy: 0.7172 - sensitivity: 0.9860 - specificity: 0.1040 - gmeasure: 0.3160 - auc: 0.6688 - val_loss: 0.5923 - val_binary_accuracy: 0.7312 - val_sensitivity: 0.9750 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4681\n",
      "Epoch 77/100\n",
      "640/640 [==============================] - 0s 86us/step - loss: 0.5786 - binary_accuracy: 0.7188 - sensitivity: 0.9894 - specificity: 0.0704 - gmeasure: 0.2252 - auc: 0.6293 - val_loss: 0.5934 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9667 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4673\n",
      "Epoch 78/100\n",
      "640/640 [==============================] - 0s 95us/step - loss: 0.5787 - binary_accuracy: 0.7141 - sensitivity: 0.9553 - specificity: 0.0789 - gmeasure: 0.2407 - auc: 0.5903 - val_loss: 0.5954 - val_binary_accuracy: 0.7125 - val_sensitivity: 0.9500 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4673\n",
      "Epoch 79/100\n",
      "640/640 [==============================] - 0s 87us/step - loss: 0.5790 - binary_accuracy: 0.7172 - sensitivity: 0.9818 - specificity: 0.1031 - gmeasure: 0.3166 - auc: 0.6774 - val_loss: 0.5931 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9667 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4679\n",
      "Epoch 80/100\n",
      "640/640 [==============================] - 0s 83us/step - loss: 0.5780 - binary_accuracy: 0.7172 - sensitivity: 0.9858 - specificity: 0.1109 - gmeasure: 0.3241 - auc: 0.6635 - val_loss: 0.5926 - val_binary_accuracy: 0.7312 - val_sensitivity: 0.9750 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4679\n",
      "Epoch 81/100\n",
      "640/640 [==============================] - 0s 79us/step - loss: 0.5797 - binary_accuracy: 0.7203 - sensitivity: 0.9914 - specificity: 0.0921 - gmeasure: 0.3015 - auc: 0.6503 - val_loss: 0.5929 - val_binary_accuracy: 0.7312 - val_sensitivity: 0.9750 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4685\n",
      "Epoch 82/100\n",
      "640/640 [==============================] - 0s 84us/step - loss: 0.5780 - binary_accuracy: 0.7203 - sensitivity: 0.9911 - specificity: 0.1055 - gmeasure: 0.3165 - auc: 0.6484 - val_loss: 0.5949 - val_binary_accuracy: 0.7188 - val_sensitivity: 0.9583 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4677\n",
      "Epoch 83/100\n",
      "640/640 [==============================] - 0s 83us/step - loss: 0.5790 - binary_accuracy: 0.7141 - sensitivity: 0.9576 - specificity: 0.1116 - gmeasure: 0.3237 - auc: 0.6468 - val_loss: 0.6007 - val_binary_accuracy: 0.7063 - val_sensitivity: 0.9333 - val_specificity: 0.0250 - val_gmeasure: 0.1528 - val_auc: 0.4688\n",
      "Epoch 84/100\n",
      "640/640 [==============================] - 0s 86us/step - loss: 0.5813 - binary_accuracy: 0.7172 - sensitivity: 0.9699 - specificity: 0.1137 - gmeasure: 0.2839 - auc: 0.6238 - val_loss: 0.5989 - val_binary_accuracy: 0.7063 - val_sensitivity: 0.9417 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4679\n",
      "Epoch 85/100\n",
      "640/640 [==============================] - 0s 85us/step - loss: 0.5780 - binary_accuracy: 0.7156 - sensitivity: 0.9663 - specificity: 0.1007 - gmeasure: 0.2674 - auc: 0.6519 - val_loss: 0.5948 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9667 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4663\n",
      "Epoch 86/100\n",
      "640/640 [==============================] - 0s 89us/step - loss: 0.5790 - binary_accuracy: 0.7188 - sensitivity: 0.9892 - specificity: 0.1141 - gmeasure: 0.2870 - auc: 0.6418 - val_loss: 0.5954 - val_binary_accuracy: 0.7312 - val_sensitivity: 0.9750 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4646\n",
      "Epoch 87/100\n",
      "640/640 [==============================] - 0s 85us/step - loss: 0.5812 - binary_accuracy: 0.7188 - sensitivity: 0.9947 - specificity: 0.0586 - gmeasure: 0.2059 - auc: 0.6539 - val_loss: 0.5946 - val_binary_accuracy: 0.7312 - val_sensitivity: 0.9750 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4652\n",
      "Epoch 88/100\n",
      "640/640 [==============================] - 0s 83us/step - loss: 0.5783 - binary_accuracy: 0.7188 - sensitivity: 0.9741 - specificity: 0.1091 - gmeasure: 0.3240 - auc: 0.6402 - val_loss: 0.5975 - val_binary_accuracy: 0.7125 - val_sensitivity: 0.9500 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4656\n",
      "Epoch 89/100\n",
      "640/640 [==============================] - 0s 80us/step - loss: 0.5779 - binary_accuracy: 0.7172 - sensitivity: 0.9678 - specificity: 0.1224 - gmeasure: 0.3382 - auc: 0.6488 - val_loss: 0.5954 - val_binary_accuracy: 0.7188 - val_sensitivity: 0.9583 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4656\n",
      "Epoch 90/100\n",
      "640/640 [==============================] - 0s 81us/step - loss: 0.5777 - binary_accuracy: 0.7172 - sensitivity: 0.9781 - specificity: 0.1058 - gmeasure: 0.3178 - auc: 0.6330 - val_loss: 0.5946 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9667 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4660\n",
      "Epoch 91/100\n",
      "640/640 [==============================] - 0s 83us/step - loss: 0.5776 - binary_accuracy: 0.7172 - sensitivity: 0.9777 - specificity: 0.0909 - gmeasure: 0.2919 - auc: 0.6319 - val_loss: 0.5961 - val_binary_accuracy: 0.7125 - val_sensitivity: 0.9500 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4656\n",
      "Epoch 92/100\n",
      "640/640 [==============================] - 0s 89us/step - loss: 0.5802 - binary_accuracy: 0.7172 - sensitivity: 0.9673 - specificity: 0.1774 - gmeasure: 0.3983 - auc: 0.6618 - val_loss: 0.5985 - val_binary_accuracy: 0.7125 - val_sensitivity: 0.9500 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4658\n",
      "Epoch 93/100\n",
      "640/640 [==============================] - 0s 79us/step - loss: 0.5790 - binary_accuracy: 0.7172 - sensitivity: 0.9802 - specificity: 0.0895 - gmeasure: 0.2540 - auc: 0.6703 - val_loss: 0.5939 - val_binary_accuracy: 0.7312 - val_sensitivity: 0.9750 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4650\n",
      "Epoch 94/100\n",
      "640/640 [==============================] - 0s 72us/step - loss: 0.5795 - binary_accuracy: 0.7203 - sensitivity: 0.9965 - specificity: 0.1091 - gmeasure: 0.3107 - auc: 0.6609 - val_loss: 0.5944 - val_binary_accuracy: 0.7312 - val_sensitivity: 0.9750 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4646\n",
      "Epoch 95/100\n",
      "640/640 [==============================] - 0s 79us/step - loss: 0.5791 - binary_accuracy: 0.7188 - sensitivity: 0.9866 - specificity: 0.0618 - gmeasure: 0.2115 - auc: 0.6878 - val_loss: 0.5948 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9667 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4640\n",
      "Epoch 96/100\n",
      "640/640 [==============================] - 0s 79us/step - loss: 0.5768 - binary_accuracy: 0.7172 - sensitivity: 0.9839 - specificity: 0.1143 - gmeasure: 0.3159 - auc: 0.6576 - val_loss: 0.5962 - val_binary_accuracy: 0.7188 - val_sensitivity: 0.9583 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4642\n",
      "Epoch 97/100\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "640/640 [==============================] - 0s 94us/step - loss: 0.5766 - binary_accuracy: 0.7172 - sensitivity: 0.9821 - specificity: 0.1030 - gmeasure: 0.3147 - auc: 0.6396 - val_loss: 0.5962 - val_binary_accuracy: 0.7188 - val_sensitivity: 0.9583 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4663\n",
      "Epoch 98/100\n",
      "640/640 [==============================] - 0s 82us/step - loss: 0.5766 - binary_accuracy: 0.7172 - sensitivity: 0.9823 - specificity: 0.1024 - gmeasure: 0.3132 - auc: 0.6479 - val_loss: 0.5949 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9667 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4681\n",
      "Epoch 99/100\n",
      "640/640 [==============================] - 0s 80us/step - loss: 0.5765 - binary_accuracy: 0.7156 - sensitivity: 0.9819 - specificity: 0.0978 - gmeasure: 0.3089 - auc: 0.6765 - val_loss: 0.5946 - val_binary_accuracy: 0.7250 - val_sensitivity: 0.9667 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4708\n",
      "Epoch 100/100\n",
      "640/640 [==============================] - 0s 83us/step - loss: 0.5765 - binary_accuracy: 0.7156 - sensitivity: 0.9820 - specificity: 0.1077 - gmeasure: 0.3238 - auc: 0.6714 - val_loss: 0.5953 - val_binary_accuracy: 0.7188 - val_sensitivity: 0.9583 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.4719\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:151] Training end with time 7.451347351074219!\n",
      "[root    |INFO|build_network.py:79] Saved trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |DEBUG|deepbiome.py:166] Save weight at ./example_result/weight_1.h5\n",
      "[root    |DEBUG|deepbiome.py:169] Save history at ./example_result/hist_1.json\n",
      "[root    |INFO|build_network.py:177] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 9us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:182] Evaluation end with time 0.015420198440551758!\n",
      "[root    |INFO|build_network.py:183] Evaluation: [0.5800250172615051, 0.7174999713897705, 0.9736379384994507, 0.08658009022474289, 0.2903406023979187, 0.6202877163887024]\n",
      "[root    |INFO|build_network.py:177] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "201/201 [==============================] - 0s 25us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:182] Evaluation end with time 0.013490915298461914!\n",
      "[root    |INFO|build_network.py:183] Evaluation: [0.5820791721343994, 0.7611940503120422, 0.9868420958518982, 0.06122449040412903, 0.24580256640911102, 0.5089957118034363]\n",
      "[root    |INFO|deepbiome.py:179] Compute time : 9.264056921005249\n",
      "[root    |INFO|deepbiome.py:180] 2 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:137] -------3 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:147] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:148] Build network for 3 simulation\n",
      "[root    |INFO|build_network.py:513] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:514] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:518] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:519] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:526]      Genus: 48\n",
      "[root    |INFO|build_network.py:526]     Family: 40\n",
      "[root    |INFO|build_network.py:526]      Order: 23\n",
      "[root    |INFO|build_network.py:526]      Class: 17\n",
      "[root    |INFO|build_network.py:526]     Phylum: 9\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:530] Phylogenetic_tree_dict info: ['Class', 'Order', 'Genus', 'Phylum', 'Family', 'Number']\n",
      "[root    |INFO|build_network.py:531] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:554] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:570] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:571] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:572] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:648] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|build_network.py:83] Load trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |INFO|deepbiome.py:157] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:158] 3 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:141] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/100\n",
      "640/640 [==============================] - 1s 866us/step - loss: 0.6088 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6146 - val_loss: 0.6219 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5613\n",
      "Epoch 2/100\n",
      "640/640 [==============================] - 0s 86us/step - loss: 0.6074 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6026 - val_loss: 0.6239 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5595\n",
      "Epoch 3/100\n",
      "640/640 [==============================] - 0s 81us/step - loss: 0.6087 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5842 - val_loss: 0.6253 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5602\n",
      "Epoch 4/100\n",
      "640/640 [==============================] - 0s 82us/step - loss: 0.6086 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6008 - val_loss: 0.6237 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5604\n",
      "Epoch 5/100\n",
      "640/640 [==============================] - 0s 96us/step - loss: 0.6080 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6169 - val_loss: 0.6224 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5606\n",
      "Epoch 6/100\n",
      "640/640 [==============================] - 0s 103us/step - loss: 0.6072 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6106 - val_loss: 0.6222 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5600\n",
      "Epoch 7/100\n",
      "640/640 [==============================] - 0s 90us/step - loss: 0.6070 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6072 - val_loss: 0.6221 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5616\n",
      "Epoch 8/100\n",
      "640/640 [==============================] - 0s 78us/step - loss: 0.6068 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6155 - val_loss: 0.6220 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5625\n",
      "Epoch 9/100\n",
      "640/640 [==============================] - 0s 84us/step - loss: 0.6072 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6150 - val_loss: 0.6219 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5631\n",
      "Epoch 10/100\n",
      "640/640 [==============================] - 0s 87us/step - loss: 0.6067 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6135 - val_loss: 0.6220 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5625\n",
      "Epoch 11/100\n",
      "640/640 [==============================] - 0s 82us/step - loss: 0.6061 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5906 - val_loss: 0.6227 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5624\n",
      "Epoch 12/100\n",
      "640/640 [==============================] - 0s 84us/step - loss: 0.6060 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6068 - val_loss: 0.6235 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5616\n",
      "Epoch 13/100\n",
      "640/640 [==============================] - 0s 89us/step - loss: 0.6061 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6355 - val_loss: 0.6235 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5616\n",
      "Epoch 14/100\n",
      "640/640 [==============================] - 0s 83us/step - loss: 0.6058 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6313 - val_loss: 0.6230 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5615\n",
      "Epoch 15/100\n",
      "640/640 [==============================] - 0s 87us/step - loss: 0.6056 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6291 - val_loss: 0.6226 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5615\n",
      "Epoch 16/100\n",
      "640/640 [==============================] - 0s 87us/step - loss: 0.6054 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6279 - val_loss: 0.6228 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5600\n",
      "Epoch 17/100\n",
      "640/640 [==============================] - 0s 100us/step - loss: 0.6059 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5955 - val_loss: 0.6230 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5615\n",
      "Epoch 18/100\n",
      "640/640 [==============================] - 0s 86us/step - loss: 0.6054 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6271 - val_loss: 0.6231 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5622\n",
      "Epoch 19/100\n",
      "640/640 [==============================] - 0s 81us/step - loss: 0.6048 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6305 - val_loss: 0.6235 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5629\n",
      "Epoch 20/100\n",
      "640/640 [==============================] - 0s 97us/step - loss: 0.6043 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5743 - val_loss: 0.6237 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5642\n",
      "Epoch 21/100\n",
      "640/640 [==============================] - 0s 93us/step - loss: 0.6041 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6047 - val_loss: 0.6241 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5640\n",
      "Epoch 22/100\n",
      "640/640 [==============================] - 0s 82us/step - loss: 0.6041 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6517 - val_loss: 0.6252 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5629\n",
      "Epoch 23/100\n",
      "640/640 [==============================] - 0s 87us/step - loss: 0.6050 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5785 - val_loss: 0.6255 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5636\n",
      "Epoch 24/100\n",
      "640/640 [==============================] - 0s 87us/step - loss: 0.6040 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5885 - val_loss: 0.6233 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5640\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 25/100\n",
      "640/640 [==============================] - 0s 85us/step - loss: 0.6057 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6161 - val_loss: 0.6229 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5629\n",
      "Epoch 26/100\n",
      "640/640 [==============================] - 0s 80us/step - loss: 0.6039 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6143 - val_loss: 0.6225 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5647\n",
      "Epoch 27/100\n",
      "640/640 [==============================] - 0s 81us/step - loss: 0.6028 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6307 - val_loss: 0.6230 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5644\n",
      "Epoch 28/100\n",
      "640/640 [==============================] - 0s 93us/step - loss: 0.6034 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6509 - val_loss: 0.6239 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5664\n",
      "Epoch 29/100\n",
      "640/640 [==============================] - 0s 83us/step - loss: 0.6028 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6249 - val_loss: 0.6225 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5664\n",
      "Epoch 30/100\n",
      "640/640 [==============================] - 0s 88us/step - loss: 0.6033 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6348 - val_loss: 0.6232 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5656\n",
      "Epoch 31/100\n",
      "640/640 [==============================] - 0s 82us/step - loss: 0.6043 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6076 - val_loss: 0.6228 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5658\n",
      "Epoch 32/100\n",
      "640/640 [==============================] - 0s 89us/step - loss: 0.6035 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6284 - val_loss: 0.6224 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5660\n",
      "Epoch 33/100\n",
      "640/640 [==============================] - 0s 88us/step - loss: 0.6027 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6391 - val_loss: 0.6224 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5656\n",
      "Epoch 34/100\n",
      "640/640 [==============================] - 0s 82us/step - loss: 0.6020 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6509 - val_loss: 0.6226 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5667\n",
      "Epoch 35/100\n",
      "640/640 [==============================] - 0s 81us/step - loss: 0.6021 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5968 - val_loss: 0.6236 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5658\n",
      "Epoch 36/100\n",
      "640/640 [==============================] - 0s 78us/step - loss: 0.6016 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5880 - val_loss: 0.6225 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5658\n",
      "Epoch 37/100\n",
      "640/640 [==============================] - 0s 85us/step - loss: 0.6012 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6044 - val_loss: 0.6223 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5660\n",
      "Epoch 38/100\n",
      "640/640 [==============================] - 0s 77us/step - loss: 0.6012 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6060 - val_loss: 0.6224 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5665\n",
      "Epoch 39/100\n",
      "640/640 [==============================] - 0s 85us/step - loss: 0.6007 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5958 - val_loss: 0.6231 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5662\n",
      "Epoch 40/100\n",
      "640/640 [==============================] - 0s 88us/step - loss: 0.6007 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6159 - val_loss: 0.6253 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5660\n",
      "Epoch 41/100\n",
      "640/640 [==============================] - 0s 77us/step - loss: 0.6023 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6304 - val_loss: 0.6267 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5665\n",
      "Epoch 42/100\n",
      "640/640 [==============================] - 0s 77us/step - loss: 0.6022 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6076 - val_loss: 0.6245 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5662\n",
      "Epoch 43/100\n",
      "640/640 [==============================] - 0s 83us/step - loss: 0.6012 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6566 - val_loss: 0.6226 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5673\n",
      "Epoch 44/100\n",
      "640/640 [==============================] - 0s 75us/step - loss: 0.6000 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6040 - val_loss: 0.6222 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5685\n",
      "Epoch 45/100\n",
      "640/640 [==============================] - 0s 80us/step - loss: 0.5998 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6056 - val_loss: 0.6220 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5689\n",
      "Epoch 46/100\n",
      "640/640 [==============================] - 0s 80us/step - loss: 0.6003 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6311 - val_loss: 0.6221 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5682\n",
      "Epoch 47/100\n",
      "640/640 [==============================] - 0s 73us/step - loss: 0.6014 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6513 - val_loss: 0.6219 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5689\n",
      "Epoch 48/100\n",
      "640/640 [==============================] - 0s 90us/step - loss: 0.6001 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6249 - val_loss: 0.6222 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5696\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 49/100\n",
      "640/640 [==============================] - 0s 79us/step - loss: 0.5999 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6318 - val_loss: 0.6249 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5691\n",
      "Epoch 50/100\n",
      "640/640 [==============================] - 0s 83us/step - loss: 0.6003 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6371 - val_loss: 0.6235 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5689\n",
      "Epoch 51/100\n",
      "640/640 [==============================] - 0s 84us/step - loss: 0.5989 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6364 - val_loss: 0.6220 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5687\n",
      "Epoch 52/100\n",
      "640/640 [==============================] - 0s 84us/step - loss: 0.5985 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5990 - val_loss: 0.6215 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5685\n",
      "Epoch 53/100\n",
      "640/640 [==============================] - 0s 84us/step - loss: 0.5995 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6397 - val_loss: 0.6213 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5691\n",
      "Epoch 54/100\n",
      "640/640 [==============================] - 0s 83us/step - loss: 0.5983 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6269 - val_loss: 0.6225 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5700\n",
      "Epoch 55/100\n",
      "640/640 [==============================] - 0s 83us/step - loss: 0.5983 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6152 - val_loss: 0.6234 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5700\n",
      "Epoch 56/100\n",
      "640/640 [==============================] - 0s 85us/step - loss: 0.5986 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6146 - val_loss: 0.6218 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5705\n",
      "Epoch 57/100\n",
      "640/640 [==============================] - 0s 87us/step - loss: 0.5978 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6201 - val_loss: 0.6210 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5707\n",
      "Epoch 58/100\n",
      "640/640 [==============================] - 0s 85us/step - loss: 0.5980 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6452 - val_loss: 0.6210 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5715\n",
      "Epoch 59/100\n",
      "640/640 [==============================] - 0s 90us/step - loss: 0.5984 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.5892 - val_loss: 0.6209 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5716\n",
      "Epoch 60/100\n",
      "640/640 [==============================] - 0s 79us/step - loss: 0.5967 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6240 - val_loss: 0.6227 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5716\n",
      "Epoch 61/100\n",
      "640/640 [==============================] - 0s 101us/step - loss: 0.5976 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6205 - val_loss: 0.6230 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5716\n",
      "Epoch 62/100\n",
      "640/640 [==============================] - 0s 86us/step - loss: 0.5973 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6165 - val_loss: 0.6215 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5716\n",
      "Epoch 63/100\n",
      "640/640 [==============================] - 0s 86us/step - loss: 0.5966 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6548 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5715\n",
      "Epoch 64/100\n",
      "640/640 [==============================] - 0s 97us/step - loss: 0.5962 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6256 - val_loss: 0.6213 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5715\n",
      "Epoch 65/100\n",
      "640/640 [==============================] - 0s 82us/step - loss: 0.5961 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6173 - val_loss: 0.6213 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5727\n",
      "Epoch 66/100\n",
      "640/640 [==============================] - 0s 87us/step - loss: 0.5959 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6325 - val_loss: 0.6210 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5727\n",
      "Epoch 67/100\n",
      "640/640 [==============================] - 0s 88us/step - loss: 0.5957 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6364 - val_loss: 0.6210 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5736\n",
      "Epoch 68/100\n",
      "640/640 [==============================] - 0s 98us/step - loss: 0.5955 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6418 - val_loss: 0.6209 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5747\n",
      "Epoch 69/100\n",
      "640/640 [==============================] - 0s 88us/step - loss: 0.5953 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6653 - val_loss: 0.6214 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5760\n",
      "Epoch 70/100\n",
      "640/640 [==============================] - 0s 86us/step - loss: 0.5954 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6515 - val_loss: 0.6210 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5745\n",
      "Epoch 71/100\n",
      "640/640 [==============================] - 0s 92us/step - loss: 0.5950 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6281 - val_loss: 0.6208 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5760\n",
      "Epoch 72/100\n",
      "640/640 [==============================] - 0s 83us/step - loss: 0.5958 - binary_accuracy: 0.6938 - sensitivity: 1.0000 - specificity: 0.0039 - gmeasure: 0.0312 - auc: 0.6393 - val_loss: 0.6216 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5756\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 73/100\n",
      "640/640 [==============================] - 0s 84us/step - loss: 0.5962 - binary_accuracy: 0.6938 - sensitivity: 1.0000 - specificity: 0.0045 - gmeasure: 0.0334 - auc: 0.6520 - val_loss: 0.6206 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5762\n",
      "Epoch 74/100\n",
      "640/640 [==============================] - 0s 85us/step - loss: 0.5948 - binary_accuracy: 0.6938 - sensitivity: 1.0000 - specificity: 0.0036 - gmeasure: 0.0299 - auc: 0.6280 - val_loss: 0.6207 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5773\n",
      "Epoch 75/100\n",
      "640/640 [==============================] - 0s 87us/step - loss: 0.5943 - binary_accuracy: 0.6938 - sensitivity: 1.0000 - specificity: 0.0045 - gmeasure: 0.0334 - auc: 0.6129 - val_loss: 0.6239 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5791\n",
      "Epoch 76/100\n",
      "640/640 [==============================] - 0s 85us/step - loss: 0.5952 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6602 - val_loss: 0.6248 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5791\n",
      "Epoch 77/100\n",
      "640/640 [==============================] - 0s 88us/step - loss: 0.5959 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6481 - val_loss: 0.6238 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5784\n",
      "Epoch 78/100\n",
      "640/640 [==============================] - 0s 90us/step - loss: 0.5945 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6265 - val_loss: 0.6221 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5782\n",
      "Epoch 79/100\n",
      "640/640 [==============================] - 0s 86us/step - loss: 0.5928 - binary_accuracy: 0.6922 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - auc: 0.6368 - val_loss: 0.6207 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5769\n",
      "Epoch 80/100\n",
      "640/640 [==============================] - 0s 84us/step - loss: 0.5951 - binary_accuracy: 0.6969 - sensitivity: 0.9983 - specificity: 0.0154 - gmeasure: 0.0873 - auc: 0.6679 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5760\n",
      "Epoch 81/100\n",
      "640/640 [==============================] - 0s 84us/step - loss: 0.5947 - binary_accuracy: 0.6984 - sensitivity: 1.0000 - specificity: 0.0172 - gmeasure: 0.0929 - auc: 0.6292 - val_loss: 0.6214 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5771\n",
      "Epoch 82/100\n",
      "640/640 [==============================] - 0s 84us/step - loss: 0.5927 - binary_accuracy: 0.6938 - sensitivity: 1.0000 - specificity: 0.0040 - gmeasure: 0.0315 - auc: 0.6761 - val_loss: 0.6219 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5782\n",
      "Epoch 83/100\n",
      "640/640 [==============================] - 0s 84us/step - loss: 0.5928 - binary_accuracy: 0.6938 - sensitivity: 1.0000 - specificity: 0.0037 - gmeasure: 0.0303 - auc: 0.6181 - val_loss: 0.6219 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5778\n",
      "Epoch 84/100\n",
      "640/640 [==============================] - 0s 81us/step - loss: 0.5927 - binary_accuracy: 0.6938 - sensitivity: 1.0000 - specificity: 0.0037 - gmeasure: 0.0303 - auc: 0.6205 - val_loss: 0.6218 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5780\n",
      "Epoch 85/100\n",
      "640/640 [==============================] - 0s 81us/step - loss: 0.5925 - binary_accuracy: 0.6938 - sensitivity: 1.0000 - specificity: 0.0034 - gmeasure: 0.0293 - auc: 0.6495 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5782\n",
      "Epoch 86/100\n",
      "640/640 [==============================] - 0s 81us/step - loss: 0.5919 - binary_accuracy: 0.6938 - sensitivity: 1.0000 - specificity: 0.0156 - gmeasure: 0.0625 - auc: 0.6786 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5795\n",
      "Epoch 87/100\n",
      "640/640 [==============================] - 0s 85us/step - loss: 0.5916 - binary_accuracy: 0.6938 - sensitivity: 1.0000 - specificity: 0.0040 - gmeasure: 0.0318 - auc: 0.6372 - val_loss: 0.6206 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5782\n",
      "Epoch 88/100\n",
      "640/640 [==============================] - 0s 79us/step - loss: 0.5918 - binary_accuracy: 0.6984 - sensitivity: 0.9982 - specificity: 0.0341 - gmeasure: 0.1541 - auc: 0.6816 - val_loss: 0.6209 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5778\n",
      "Epoch 89/100\n",
      "640/640 [==============================] - 0s 83us/step - loss: 0.5919 - binary_accuracy: 0.6984 - sensitivity: 0.9964 - specificity: 0.0384 - gmeasure: 0.1892 - auc: 0.6451 - val_loss: 0.6209 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5780\n",
      "Epoch 90/100\n",
      "640/640 [==============================] - 0s 84us/step - loss: 0.5912 - binary_accuracy: 0.7000 - sensitivity: 0.9982 - specificity: 0.0249 - gmeasure: 0.1363 - auc: 0.6407 - val_loss: 0.6210 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5784\n",
      "Epoch 91/100\n",
      "640/640 [==============================] - 0s 97us/step - loss: 0.5907 - binary_accuracy: 0.7000 - sensitivity: 0.9981 - specificity: 0.0269 - gmeasure: 0.1132 - auc: 0.6622 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5787\n",
      "Epoch 92/100\n",
      "640/640 [==============================] - 0s 89us/step - loss: 0.5906 - binary_accuracy: 0.6984 - sensitivity: 1.0000 - specificity: 0.0306 - gmeasure: 0.1451 - auc: 0.6477 - val_loss: 0.6219 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5798\n",
      "Epoch 93/100\n",
      "640/640 [==============================] - 0s 87us/step - loss: 0.5907 - binary_accuracy: 0.6938 - sensitivity: 1.0000 - specificity: 0.0042 - gmeasure: 0.0323 - auc: 0.6276 - val_loss: 0.6213 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5800\n",
      "Epoch 94/100\n",
      "640/640 [==============================] - 0s 86us/step - loss: 0.5901 - binary_accuracy: 0.6984 - sensitivity: 0.9964 - specificity: 0.0245 - gmeasure: 0.1103 - auc: 0.6475 - val_loss: 0.6210 - val_binary_accuracy: 0.6812 - val_sensitivity: 0.9909 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5791\n",
      "Epoch 95/100\n",
      "640/640 [==============================] - 0s 92us/step - loss: 0.5908 - binary_accuracy: 0.6984 - sensitivity: 0.9945 - specificity: 0.0290 - gmeasure: 0.1407 - auc: 0.6167 - val_loss: 0.6209 - val_binary_accuracy: 0.6812 - val_sensitivity: 0.9909 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5800\n",
      "Epoch 96/100\n",
      "640/640 [==============================] - 0s 85us/step - loss: 0.5902 - binary_accuracy: 0.6984 - sensitivity: 0.9962 - specificity: 0.0235 - gmeasure: 0.1264 - auc: 0.6253 - val_loss: 0.6213 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5813\n",
      "Epoch 97/100\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "640/640 [==============================] - 0s 86us/step - loss: 0.5894 - binary_accuracy: 0.7000 - sensitivity: 0.9982 - specificity: 0.0489 - gmeasure: 0.1819 - auc: 0.6906 - val_loss: 0.6209 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5795\n",
      "Epoch 98/100\n",
      "640/640 [==============================] - 0s 84us/step - loss: 0.5895 - binary_accuracy: 0.6984 - sensitivity: 0.9885 - specificity: 0.0250 - gmeasure: 0.1365 - auc: 0.6220 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 0.9909 - val_specificity: 0.0200 - val_gmeasure: 0.1408 - val_auc: 0.5785\n",
      "Epoch 99/100\n",
      "640/640 [==============================] - 0s 86us/step - loss: 0.5897 - binary_accuracy: 0.6984 - sensitivity: 0.9947 - specificity: 0.0595 - gmeasure: 0.1995 - auc: 0.6882 - val_loss: 0.6211 - val_binary_accuracy: 0.6812 - val_sensitivity: 0.9909 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5782\n",
      "Epoch 100/100\n",
      "640/640 [==============================] - 0s 87us/step - loss: 0.5888 - binary_accuracy: 0.6984 - sensitivity: 0.9964 - specificity: 0.0382 - gmeasure: 0.1858 - auc: 0.6698 - val_loss: 0.6215 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00 - val_auc: 0.5785\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:151] Training end with time 7.964810848236084!\n",
      "[root    |INFO|build_network.py:79] Saved trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |DEBUG|deepbiome.py:166] Save weight at ./example_result/weight_2.h5\n",
      "[root    |DEBUG|deepbiome.py:169] Save history at ./example_result/hist_2.json\n",
      "[root    |INFO|build_network.py:177] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 10us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:182] Evaluation end with time 0.017737150192260742!\n",
      "[root    |INFO|build_network.py:183] Evaluation: [0.5949158668518066, 0.6974999904632568, 0.9981916546821594, 0.024291498586535454, 0.15571631491184235, 0.6360375285148621]\n",
      "[root    |INFO|build_network.py:177] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 25us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:182] Evaluation end with time 0.011327505111694336!\n",
      "[root    |INFO|build_network.py:183] Evaluation: [0.6639898419380188, 0.6700000166893005, 0.9852941036224365, 0.0, 0.0, 0.47277113795280457]\n",
      "[root    |INFO|deepbiome.py:179] Compute time : 9.810555696487427\n",
      "[root    |INFO|deepbiome.py:180] 3 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:183] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:185] Train Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure' 'auc']\n",
      "[root    |INFO|deepbiome.py:188]       mean : [0.46230177 0.78333332 0.97482359 0.33576198 0.45671905 0.74209503]\n",
      "[root    |INFO|deepbiome.py:189]        std : [0.1771196  0.10755491 0.01861479 0.39725581 0.33502716 0.161253  ]\n",
      "[root    |INFO|deepbiome.py:190] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:192] Test Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure' 'auc']\n",
      "[root    |INFO|deepbiome.py:195]       mean : [0.60106868 0.7589884  0.9475466  0.28384903 0.3584158  0.62434698]\n",
      "[root    |INFO|deepbiome.py:196]        std : [0.04564232 0.07177521 0.05448129 0.35900206 0.34785628 0.18932444]\n",
      "[root    |INFO|deepbiome.py:197] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:206] Total Computing Ended\n",
      "[root    |INFO|deepbiome.py:207] -----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "test_evaluation, train_evaluation, network = deepbiome.deepbiome_train(log, warm_start_network_info, path_info, \n",
    "                                                                       number_of_fold=3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's check the history plot again."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nAAAASUVORK5CYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f5c38122ba8>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "with open('./%s/hist_0.json' % path_info['model_info']['model_dir'], 'r') as f:\n",
    "    history = json.load(f)\n",
    "    \n",
    "plt.plot(history['val_loss'], label='Validation')\n",
    "plt.plot(history['loss'], label='Training')\n",
    "plt.legend()\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. Load the pre-trained network for testing\n",
    "\n",
    "To test the trained model, we can use the `deepbiome_test` function. If you use the index file, this function provides the evaluation using test index (index set not included in the index file) for each fold. If not, this function provides the evaluation using the whole samples. If `number_of_fold` is set to `k`, the function will test the model only with first `k` folds."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "test_network_info = {\n",
    "    'architecture_info': {\n",
    "        'batch_normalization': 'False',\n",
    "        'drop_out': '0',\n",
    "        'weight_initial': 'glorot_uniform',\n",
    "        'weight_l1_penalty':'0.01',\n",
    "        'weight_decay': 'phylogenetic_tree',\n",
    "    },\n",
    "    'model_info': {\n",
    "        'lr': '0.01',\n",
    "        'decay': '0.001',\n",
    "        'loss': 'binary_crossentropy',\n",
    "        'metrics': 'binary_accuracy, sensitivity, specificity, gmeasure, auc',\n",
    "        'texa_selection_metrics': 'accuracy, sensitivity, specificity, gmeasure',\n",
    "        'network_class': 'DeepBiomeNetwork',\n",
    "        'optimizer': 'adam',\n",
    "        'reader_class': 'MicroBiomeClassificationReader',\n",
    "        'normalizer': 'normalize_minmax',\n",
    "    },\n",
    "    'test_info': {\n",
    "        'batch_size': 'None'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "test_path_info = {\n",
    "    'data_info': {\n",
    "        'data_path': resource_filename('deepbiome', 'tests/data'),\n",
    "        'idx_path': resource_filename('deepbiome', 'tests/data/onefile_idx.csv'),\n",
    "        'tree_info_path': resource_filename('deepbiome', 'tests/data/genus48_dic.csv'),\n",
    "        'x_path': 'onefile_x.csv',\n",
    "        'y_path': 'classification_y.csv'\n",
    "    },\n",
    "    'model_info': {\n",
    "        'evaluation': 'eval.npy',\n",
    "        'model_dir': './example_result/',\n",
    "        'weight': 'weight.h5'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:262] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:294] Test Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure' 'auc']\n",
      "[root    |INFO|deepbiome.py:296] -------1 fold test start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:306] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:307] Build network for 1 fold testing\n",
      "[root    |INFO|build_network.py:513] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:514] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:518] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:519] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:526]      Genus: 48\n",
      "[root    |INFO|build_network.py:526]     Family: 40\n",
      "[root    |INFO|build_network.py:526]      Order: 23\n",
      "[root    |INFO|build_network.py:526]      Class: 17\n",
      "[root    |INFO|build_network.py:526]     Phylum: 9\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:530] Phylogenetic_tree_dict info: ['Class', 'Order', 'Genus', 'Phylum', 'Family', 'Number']\n",
      "[root    |INFO|build_network.py:531] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:554] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:570] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:571] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:572] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:648] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|deepbiome.py:316] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:317] 1 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:177] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "201/201 [==============================] - 0s 486us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:182] Evaluation end with time 0.267392635345459!\n",
      "[root    |INFO|build_network.py:183] Evaluation: [0.5571370124816895, 0.8457711338996887, 0.8705036044120789, 0.7903226017951965, 0.8294448256492615, 0.891274094581604]\n",
      "[root    |INFO|deepbiome.py:320] \n",
      "[root    |INFO|deepbiome.py:322] Compute time : 1.864792823791504\n",
      "[root    |INFO|deepbiome.py:323] 1 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:296] -------2 fold test start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:306] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:307] Build network for 2 fold testing\n",
      "[root    |INFO|build_network.py:513] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:514] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:518] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:519] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:526]      Genus: 48\n",
      "[root    |INFO|build_network.py:526]     Family: 40\n",
      "[root    |INFO|build_network.py:526]      Order: 23\n",
      "[root    |INFO|build_network.py:526]      Class: 17\n",
      "[root    |INFO|build_network.py:526]     Phylum: 9\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:530] Phylogenetic_tree_dict info: ['Class', 'Order', 'Genus', 'Phylum', 'Family', 'Number']\n",
      "[root    |INFO|build_network.py:531] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:554] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:570] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:571] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:572] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:648] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|deepbiome.py:316] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:317] 2 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:177] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "201/201 [==============================] - 0s 466us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:182] Evaluation end with time 0.2770264148712158!\n",
      "[root    |INFO|build_network.py:183] Evaluation: [0.5820791721343994, 0.7611940503120422, 0.9868420958518982, 0.06122449040412903, 0.24580256640911102, 0.5089957118034363]\n",
      "[root    |INFO|deepbiome.py:320] \n",
      "[root    |INFO|deepbiome.py:322] Compute time : 2.0720319747924805\n",
      "[root    |INFO|deepbiome.py:323] 2 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:296] -------3 fold test start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:306] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:307] Build network for 3 fold testing\n",
      "[root    |INFO|build_network.py:513] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:514] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:518] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:519] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:526]      Genus: 48\n",
      "[root    |INFO|build_network.py:526]     Family: 40\n",
      "[root    |INFO|build_network.py:526]      Order: 23\n",
      "[root    |INFO|build_network.py:526]      Class: 17\n",
      "[root    |INFO|build_network.py:526]     Phylum: 9\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:530] Phylogenetic_tree_dict info: ['Class', 'Order', 'Genus', 'Phylum', 'Family', 'Number']\n",
      "[root    |INFO|build_network.py:531] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:554] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:570] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:571] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:572] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:648] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|deepbiome.py:316] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:317] 3 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:177] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 538us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:182] Evaluation end with time 0.28798818588256836!\n",
      "[root    |INFO|build_network.py:183] Evaluation: [0.6639898419380188, 0.6700000166893005, 0.9852941036224365, 0.0, 0.0, 0.47277113795280457]\n",
      "[root    |INFO|deepbiome.py:320] \n",
      "[root    |INFO|deepbiome.py:322] Compute time : 2.053978443145752\n",
      "[root    |INFO|deepbiome.py:323] 3 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:326] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:328] Test Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure' 'auc']\n",
      "[root    |INFO|deepbiome.py:331]       mean : [0.60106868 0.7589884  0.9475466  0.28384903 0.3584158  0.62434698]\n",
      "[root    |INFO|deepbiome.py:332]        std : [0.04564232 0.07177521 0.05448129 0.35900206 0.34785628 0.18932444]\n",
      "[root    |INFO|deepbiome.py:333] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:336] Total Computing Ended\n",
      "[root    |INFO|deepbiome.py:337] -----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "evaluation = deepbiome.deepbiome_test(log, test_network_info, test_path_info, number_of_fold=3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This function provide the evaluation result as a numpy array with a shape of (number of fold, number of evaluation measures)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                  loss binary_accuracy     sensitivity     specificity        gmeasure             auc\n",
      "Mean:           0.6011          0.7590          0.9475          0.2838          0.3584          0.6243\n",
      "Std :           0.0456          0.0718          0.0545          0.3590          0.3479          0.1893\n"
     ]
    }
   ],
   "source": [
    "print('      %s' % ''.join(['%16s'%'loss']+ ['%16s'%s.strip() for s in network_info['model_info']['metrics'].split(',')]))\n",
    "print('Mean: %s' % ''.join(['%16.4f'%v for v in np.mean(evaluation, axis=0)]))\n",
    "print('Std : %s' % ''.join(['%16.4f'%v for v in np.std(evaluation, axis=0)]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7. Load the pre-trained network for prediction\n",
    "\n",
    "If you want to predict using the pre-trained model, you can use the `deepbiome_prediction` function. If `number_of_fold` is setted as `k`, the function will predict only with first `k` folds sample's outputs."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "prediction_network_info = {\n",
    "    'architecture_info': {\n",
    "        'batch_normalization': 'False',\n",
    "        'drop_out': '0',\n",
    "        'weight_initial': 'glorot_uniform',\n",
    "        'weight_l1_penalty':'0.01',\n",
    "        'weight_decay': 'phylogenetic_tree',\n",
    "    },\n",
    "    'model_info': {\n",
    "        'decay': '0.001',\n",
    "        'loss': 'binary_crossentropy',\n",
    "        'lr': '0.01',\n",
    "        'metrics': 'binary_accuracy, sensitivity, specificity, gmeasure, auc',\n",
    "        'network_class': 'DeepBiomeNetwork',\n",
    "        'normalizer': 'normalize_minmax',\n",
    "        'optimizer': 'adam',\n",
    "        'reader_class': 'MicroBiomeClassificationReader',\n",
    "        'texa_selection_metrics': 'accuracy, sensitivity, specificity, gmeasure'\n",
    "    },\n",
    "    'test_info': {\n",
    "        'batch_size': 'None'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "prediction_path_info = {\n",
    "    'data_info': {\n",
    "        'data_path': resource_filename('deepbiome', 'tests/data'),\n",
    "        'tree_info_path': resource_filename('deepbiome', 'tests/data/genus48_dic.csv'),\n",
    "        'x_path': 'onefile_x.csv',\n",
    "        'y_path': 'classification_y.csv'\n",
    "    },\n",
    "    'model_info': {\n",
    "        'model_dir': './example_result/',\n",
    "        'weight': 'weight_0.h5'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:393] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:420] -------1 th repeatition prediction start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:429] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:430] Build network for 1 fold testing\n",
      "[root    |INFO|build_network.py:513] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:514] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:518] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:519] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:526]      Genus: 48\n",
      "[root    |INFO|build_network.py:526]     Family: 40\n",
      "[root    |INFO|build_network.py:526]      Order: 23\n",
      "[root    |INFO|build_network.py:526]      Class: 17\n",
      "[root    |INFO|build_network.py:526]     Phylum: 9\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:530] Phylogenetic_tree_dict info: ['Class', 'Order', 'Genus', 'Phylum', 'Family', 'Number']\n",
      "[root    |INFO|build_network.py:531] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:554] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:570] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:571] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:572] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:648] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|deepbiome.py:440] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:197] Prediction start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "1000/1000 [==============================] - 0s 31us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:202] Prediction end with time 0.03356122970581055!\n",
      "[root    |INFO|deepbiome.py:444] Compute time : 1.3081865310668945\n",
      "[root    |INFO|deepbiome.py:445] 1 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:420] -------2 th repeatition prediction start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:429] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:430] Build network for 2 fold testing\n",
      "[root    |INFO|build_network.py:513] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:514] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:518] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:519] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:526]      Genus: 48\n",
      "[root    |INFO|build_network.py:526]     Family: 40\n",
      "[root    |INFO|build_network.py:526]      Order: 23\n",
      "[root    |INFO|build_network.py:526]      Class: 17\n",
      "[root    |INFO|build_network.py:526]     Phylum: 9\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:530] Phylogenetic_tree_dict info: ['Class', 'Order', 'Genus', 'Phylum', 'Family', 'Number']\n",
      "[root    |INFO|build_network.py:531] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:554] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:570] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:571] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:572] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:648] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|deepbiome.py:440] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:197] Prediction start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "1000/1000 [==============================] - 0s 44us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:202] Prediction end with time 0.04675102233886719!\n",
      "[root    |INFO|deepbiome.py:444] Compute time : 1.3035345077514648\n",
      "[root    |INFO|deepbiome.py:445] 2 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:420] -------3 th repeatition prediction start!----------------------------------\n",
      "[root    |INFO|readers.py:58] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:59] Construct Dataset\n",
      "[root    |INFO|readers.py:60] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:61] Load data\n",
      "[root    |INFO|deepbiome.py:429] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:430] Build network for 3 fold testing\n",
      "[root    |INFO|build_network.py:513] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:514] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:518] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:519] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:526]      Genus: 48\n",
      "[root    |INFO|build_network.py:526]     Family: 40\n",
      "[root    |INFO|build_network.py:526]      Order: 23\n",
      "[root    |INFO|build_network.py:526]      Class: 17\n",
      "[root    |INFO|build_network.py:526]     Phylum: 9\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:530] Phylogenetic_tree_dict info: ['Class', 'Order', 'Genus', 'Phylum', 'Family', 'Number']\n",
      "[root    |INFO|build_network.py:531] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:541] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:554] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:570] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:571] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:572] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:648] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:57] Build Network\n",
      "[root    |INFO|build_network.py:58] Optimizer = adam\n",
      "[root    |INFO|build_network.py:59] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:60] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|deepbiome.py:440] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:197] Prediction start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "1000/1000 [==============================] - 0s 50us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:202] Prediction end with time 0.05387568473815918!\n",
      "[root    |INFO|deepbiome.py:444] Compute time : 1.3053226470947266\n",
      "[root    |INFO|deepbiome.py:445] 3 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:449] Total Computing Ended\n",
      "[root    |INFO|deepbiome.py:450] -----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "prediction = deepbiome.deepbiome_prediction(log, prediction_network_info, prediction_path_info,\n",
    "                                            num_classes = 1, number_of_fold=3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(3, 1000, 1)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prediction.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.72311175],\n",
       "       [0.9747908 ],\n",
       "       [0.07443932],\n",
       "       [0.07443932],\n",
       "       [1.        ],\n",
       "       [1.        ],\n",
       "       [0.1007489 ],\n",
       "       [0.07443932],\n",
       "       [0.9979558 ],\n",
       "       [0.999997  ]], dtype=float32)"
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prediction[0,:10]"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}