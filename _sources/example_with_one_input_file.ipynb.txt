{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Example : k fold cross-validation with an input file \n",
    "\n",
    "DeepBiome package takes microbiome abundance data as input and uses the phylogenetic taxonomy to guide the decision of the optimal number of layers and neurons in the deep learning architecture.\n",
    "\n",
    "To use DeepBiome, you can experiment (1) __k times repetition__ or (2) __k fold cross-validation__.\n",
    "For each experiment, we asuume that the dataset is given by\n",
    "- __A list of k input files for k times repetition.__\n",
    "- __One input file for k fold cross-validation.__\n",
    "\n",
    "This notebook contains an example of (2) __k fold cross-validation__ for the deep neural netowrk using deepbiome."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 1. Load library\n",
    "\n",
    "First, we load the DeepBiome package. The DeepBiome package is built on the tensorflow and keras library"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "Using TensorFlow backend.\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "import logging\n",
    "import json\n",
    "from pkg_resources import resource_filename\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "from deepbiome import deepbiome"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 2. Prepare the dataset\n",
    "\n",
    "In this example, we assume that we have __one input file for k times repetition.__\n",
    "\n",
    "DeepBiome needs 3 data files as follows:\n",
    "1. **the tree information**\n",
    "1. **the input file**\n",
    "1. **y**\n",
    "\n",
    "In addition, we can set **the training index for each fold**. If we set the index file, DeepBiome builds the training set for each fold based on each fold index in the index file. If not, DeepBiome will generate the index file locally.\n",
    "        \n",
    "Each data should have the csv format as follow:"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example of the tree information\n",
    "\n",
    "First we need a file about the phylogenetic tree information. This tree information file should have the format below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Genus</th>\n",
       "      <th>Family</th>\n",
       "      <th>Order</th>\n",
       "      <th>Class</th>\n",
       "      <th>Phylum</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Streptococcus</td>\n",
       "      <td>Streptococcaceae</td>\n",
       "      <td>Lactobacillales</td>\n",
       "      <td>Bacilli</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Tropheryma</td>\n",
       "      <td>Cellulomonadaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Veillonella</td>\n",
       "      <td>Veillonellaceae</td>\n",
       "      <td>Selenomonadales</td>\n",
       "      <td>Negativicutes</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Actinomyces</td>\n",
       "      <td>Actinomycetaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Flavobacterium</td>\n",
       "      <td>Flavobacteriaceae</td>\n",
       "      <td>Flavobacteriales</td>\n",
       "      <td>Flavobacteria</td>\n",
       "      <td>Bacteroidetes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Prevotella</td>\n",
       "      <td>Prevotellaceae</td>\n",
       "      <td>Bacteroidales</td>\n",
       "      <td>Bacteroidia</td>\n",
       "      <td>Bacteroidetes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Porphyromonas</td>\n",
       "      <td>Porphyromonadaceae</td>\n",
       "      <td>Bacteroidales</td>\n",
       "      <td>Bacteroidia</td>\n",
       "      <td>Bacteroidetes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Parvimonas</td>\n",
       "      <td>Clostridiales_Incertae_Sedis_XI</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Fusobacterium</td>\n",
       "      <td>Fusobacteriaceae</td>\n",
       "      <td>Fusobacteriales</td>\n",
       "      <td>Fusobacteria</td>\n",
       "      <td>Fusobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Propionibacterium</td>\n",
       "      <td>Propionibacteriaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Gemella</td>\n",
       "      <td>Bacillales_Incertae_Sedis_XI</td>\n",
       "      <td>Bacillales</td>\n",
       "      <td>Bacilli</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Rothia</td>\n",
       "      <td>Micrococcaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Granulicatella</td>\n",
       "      <td>Carnobacteriaceae</td>\n",
       "      <td>Lactobacillales</td>\n",
       "      <td>Bacilli</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Neisseria</td>\n",
       "      <td>Neisseriaceae</td>\n",
       "      <td>Neisseriales</td>\n",
       "      <td>Betaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Lactobacillus</td>\n",
       "      <td>Lactobacillaceae</td>\n",
       "      <td>Lactobacillales</td>\n",
       "      <td>Bacilli</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Megasphaera</td>\n",
       "      <td>Veillonellaceae</td>\n",
       "      <td>Selenomonadales</td>\n",
       "      <td>Negativicutes</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Catonella</td>\n",
       "      <td>Lachnospiraceae</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>Atopobium</td>\n",
       "      <td>Coriobacteriaceae</td>\n",
       "      <td>Coriobacteriales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>Campylobacter</td>\n",
       "      <td>Campylobacteraceae</td>\n",
       "      <td>Campylobacterales</td>\n",
       "      <td>Epsilonproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>Capnocytophaga</td>\n",
       "      <td>Flavobacteriaceae</td>\n",
       "      <td>Flavobacteriales</td>\n",
       "      <td>Flavobacteria</td>\n",
       "      <td>Bacteroidetes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>Solobacterium</td>\n",
       "      <td>Erysipelotrichaceae</td>\n",
       "      <td>Erysipelotrichales</td>\n",
       "      <td>Erysipelotrichia</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>Moryella</td>\n",
       "      <td>Lachnospiraceae</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>TM7_genera_incertae_sedis</td>\n",
       "      <td>TM7_genera_incertae_sedis</td>\n",
       "      <td>TM7_genera_incertae_sedis</td>\n",
       "      <td>TM7_genera_incertae_sedis</td>\n",
       "      <td>TM7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>Staphylococcus</td>\n",
       "      <td>Staphylococcaceae</td>\n",
       "      <td>Bacillales</td>\n",
       "      <td>Bacilli</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>Filifactor</td>\n",
       "      <td>Peptostreptococcaceae</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>Oribacterium</td>\n",
       "      <td>Lachnospiraceae</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>Burkholderia</td>\n",
       "      <td>Burkholderiaceae</td>\n",
       "      <td>Burkholderiales</td>\n",
       "      <td>Betaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>Sneathia</td>\n",
       "      <td>Leptotrichiaceae</td>\n",
       "      <td>Fusobacteriales</td>\n",
       "      <td>Fusobacteria</td>\n",
       "      <td>Fusobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>Treponema</td>\n",
       "      <td>Spirochaetaceae</td>\n",
       "      <td>Spirochaetales</td>\n",
       "      <td>Spirochaetes</td>\n",
       "      <td>Spirochaetes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>Moraxella</td>\n",
       "      <td>Moraxellaceae</td>\n",
       "      <td>Pseudomonadales</td>\n",
       "      <td>Gammaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>30</th>\n",
       "      <td>Haemophilus</td>\n",
       "      <td>Pasteurellaceae</td>\n",
       "      <td>Pasteurellales</td>\n",
       "      <td>Gammaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>31</th>\n",
       "      <td>Selenomonas</td>\n",
       "      <td>Veillonellaceae</td>\n",
       "      <td>Selenomonadales</td>\n",
       "      <td>Negativicutes</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>32</th>\n",
       "      <td>Corynebacterium</td>\n",
       "      <td>Corynebacteriaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>33</th>\n",
       "      <td>Rhizobium</td>\n",
       "      <td>Rhizobiaceae</td>\n",
       "      <td>Rhizobiales</td>\n",
       "      <td>Alphaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>34</th>\n",
       "      <td>Bradyrhizobium</td>\n",
       "      <td>Bradyrhizobiaceae</td>\n",
       "      <td>Rhizobiales</td>\n",
       "      <td>Alphaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>35</th>\n",
       "      <td>Methylobacterium</td>\n",
       "      <td>Methylobacteriaceae</td>\n",
       "      <td>Rhizobiales</td>\n",
       "      <td>Alphaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>36</th>\n",
       "      <td>OD1_genera_incertae_sedis</td>\n",
       "      <td>OD1_genera_incertae_sedis</td>\n",
       "      <td>OD1_genera_incertae_sedis</td>\n",
       "      <td>OD1_genera_incertae_sedis</td>\n",
       "      <td>OD1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>37</th>\n",
       "      <td>Finegoldia</td>\n",
       "      <td>Clostridiales_Incertae_Sedis_XI</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>38</th>\n",
       "      <td>Microbacterium</td>\n",
       "      <td>Microbacteriaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>39</th>\n",
       "      <td>Sphingomonas</td>\n",
       "      <td>Sphingomonadaceae</td>\n",
       "      <td>Sphingomonadales</td>\n",
       "      <td>Alphaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>40</th>\n",
       "      <td>Chryseobacterium</td>\n",
       "      <td>Flavobacteriaceae</td>\n",
       "      <td>Flavobacteriales</td>\n",
       "      <td>Flavobacteria</td>\n",
       "      <td>Bacteroidetes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>41</th>\n",
       "      <td>Bacteroides</td>\n",
       "      <td>Bacteroidaceae</td>\n",
       "      <td>Bacteroidales</td>\n",
       "      <td>Bacteroidia</td>\n",
       "      <td>Bacteroidetes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>42</th>\n",
       "      <td>Bdellovibrio</td>\n",
       "      <td>Bdellovibrionaceae</td>\n",
       "      <td>Bdellovibrionales</td>\n",
       "      <td>Deltaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>43</th>\n",
       "      <td>Streptophyta</td>\n",
       "      <td>Chloroplast</td>\n",
       "      <td>Chloroplast</td>\n",
       "      <td>Chloroplast</td>\n",
       "      <td>Cyanobacteria_Chloroplast</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>Lachnospiracea_incertae_sedis</td>\n",
       "      <td>Lachnospiraceae</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>45</th>\n",
       "      <td>Paracoccus</td>\n",
       "      <td>Rhodobacteraceae</td>\n",
       "      <td>Rhodobacterales</td>\n",
       "      <td>Alphaproteobacteria</td>\n",
       "      <td>Proteobacteria</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>Fastidiosipila</td>\n",
       "      <td>Ruminococcaceae</td>\n",
       "      <td>Clostridiales</td>\n",
       "      <td>Clostridia</td>\n",
       "      <td>Firmicutes</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>Pseudonocardia</td>\n",
       "      <td>Pseudonocardiaceae</td>\n",
       "      <td>Actinomycetales</td>\n",
       "      <td>Actinobacteria</td>\n",
       "      <td>Actinobacteria</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            Genus                           Family  \\\n",
       "0                   Streptococcus                 Streptococcaceae   \n",
       "1                      Tropheryma                Cellulomonadaceae   \n",
       "2                     Veillonella                  Veillonellaceae   \n",
       "3                     Actinomyces                 Actinomycetaceae   \n",
       "4                  Flavobacterium                Flavobacteriaceae   \n",
       "5                      Prevotella                   Prevotellaceae   \n",
       "6                   Porphyromonas               Porphyromonadaceae   \n",
       "7                      Parvimonas  Clostridiales_Incertae_Sedis_XI   \n",
       "8                   Fusobacterium                 Fusobacteriaceae   \n",
       "9               Propionibacterium             Propionibacteriaceae   \n",
       "10                        Gemella     Bacillales_Incertae_Sedis_XI   \n",
       "11                         Rothia                   Micrococcaceae   \n",
       "12                 Granulicatella                Carnobacteriaceae   \n",
       "13                      Neisseria                    Neisseriaceae   \n",
       "14                  Lactobacillus                 Lactobacillaceae   \n",
       "15                    Megasphaera                  Veillonellaceae   \n",
       "16                      Catonella                  Lachnospiraceae   \n",
       "17                      Atopobium                Coriobacteriaceae   \n",
       "18                  Campylobacter               Campylobacteraceae   \n",
       "19                 Capnocytophaga                Flavobacteriaceae   \n",
       "20                  Solobacterium              Erysipelotrichaceae   \n",
       "21                       Moryella                  Lachnospiraceae   \n",
       "22      TM7_genera_incertae_sedis        TM7_genera_incertae_sedis   \n",
       "23                 Staphylococcus                Staphylococcaceae   \n",
       "24                     Filifactor            Peptostreptococcaceae   \n",
       "25                   Oribacterium                  Lachnospiraceae   \n",
       "26                   Burkholderia                 Burkholderiaceae   \n",
       "27                       Sneathia                 Leptotrichiaceae   \n",
       "28                      Treponema                  Spirochaetaceae   \n",
       "29                      Moraxella                    Moraxellaceae   \n",
       "30                    Haemophilus                  Pasteurellaceae   \n",
       "31                    Selenomonas                  Veillonellaceae   \n",
       "32                Corynebacterium               Corynebacteriaceae   \n",
       "33                      Rhizobium                     Rhizobiaceae   \n",
       "34                 Bradyrhizobium                Bradyrhizobiaceae   \n",
       "35               Methylobacterium              Methylobacteriaceae   \n",
       "36      OD1_genera_incertae_sedis        OD1_genera_incertae_sedis   \n",
       "37                     Finegoldia  Clostridiales_Incertae_Sedis_XI   \n",
       "38                 Microbacterium                Microbacteriaceae   \n",
       "39                   Sphingomonas                Sphingomonadaceae   \n",
       "40               Chryseobacterium                Flavobacteriaceae   \n",
       "41                    Bacteroides                   Bacteroidaceae   \n",
       "42                   Bdellovibrio               Bdellovibrionaceae   \n",
       "43                   Streptophyta                      Chloroplast   \n",
       "44  Lachnospiracea_incertae_sedis                  Lachnospiraceae   \n",
       "45                     Paracoccus                 Rhodobacteraceae   \n",
       "46                 Fastidiosipila                  Ruminococcaceae   \n",
       "47                 Pseudonocardia               Pseudonocardiaceae   \n",
       "\n",
       "                        Order                      Class  \\\n",
       "0             Lactobacillales                    Bacilli   \n",
       "1             Actinomycetales             Actinobacteria   \n",
       "2             Selenomonadales              Negativicutes   \n",
       "3             Actinomycetales             Actinobacteria   \n",
       "4            Flavobacteriales              Flavobacteria   \n",
       "5               Bacteroidales                Bacteroidia   \n",
       "6               Bacteroidales                Bacteroidia   \n",
       "7               Clostridiales                 Clostridia   \n",
       "8             Fusobacteriales               Fusobacteria   \n",
       "9             Actinomycetales             Actinobacteria   \n",
       "10                 Bacillales                    Bacilli   \n",
       "11            Actinomycetales             Actinobacteria   \n",
       "12            Lactobacillales                    Bacilli   \n",
       "13               Neisseriales         Betaproteobacteria   \n",
       "14            Lactobacillales                    Bacilli   \n",
       "15            Selenomonadales              Negativicutes   \n",
       "16              Clostridiales                 Clostridia   \n",
       "17           Coriobacteriales             Actinobacteria   \n",
       "18          Campylobacterales      Epsilonproteobacteria   \n",
       "19           Flavobacteriales              Flavobacteria   \n",
       "20         Erysipelotrichales           Erysipelotrichia   \n",
       "21              Clostridiales                 Clostridia   \n",
       "22  TM7_genera_incertae_sedis  TM7_genera_incertae_sedis   \n",
       "23                 Bacillales                    Bacilli   \n",
       "24              Clostridiales                 Clostridia   \n",
       "25              Clostridiales                 Clostridia   \n",
       "26            Burkholderiales         Betaproteobacteria   \n",
       "27            Fusobacteriales               Fusobacteria   \n",
       "28             Spirochaetales               Spirochaetes   \n",
       "29            Pseudomonadales        Gammaproteobacteria   \n",
       "30             Pasteurellales        Gammaproteobacteria   \n",
       "31            Selenomonadales              Negativicutes   \n",
       "32            Actinomycetales             Actinobacteria   \n",
       "33                Rhizobiales        Alphaproteobacteria   \n",
       "34                Rhizobiales        Alphaproteobacteria   \n",
       "35                Rhizobiales        Alphaproteobacteria   \n",
       "36  OD1_genera_incertae_sedis  OD1_genera_incertae_sedis   \n",
       "37              Clostridiales                 Clostridia   \n",
       "38            Actinomycetales             Actinobacteria   \n",
       "39           Sphingomonadales        Alphaproteobacteria   \n",
       "40           Flavobacteriales              Flavobacteria   \n",
       "41              Bacteroidales                Bacteroidia   \n",
       "42          Bdellovibrionales        Deltaproteobacteria   \n",
       "43                Chloroplast                Chloroplast   \n",
       "44              Clostridiales                 Clostridia   \n",
       "45            Rhodobacterales        Alphaproteobacteria   \n",
       "46              Clostridiales                 Clostridia   \n",
       "47            Actinomycetales             Actinobacteria   \n",
       "\n",
       "                       Phylum  \n",
       "0                  Firmicutes  \n",
       "1              Actinobacteria  \n",
       "2                  Firmicutes  \n",
       "3              Actinobacteria  \n",
       "4               Bacteroidetes  \n",
       "5               Bacteroidetes  \n",
       "6               Bacteroidetes  \n",
       "7                  Firmicutes  \n",
       "8                Fusobacteria  \n",
       "9              Actinobacteria  \n",
       "10                 Firmicutes  \n",
       "11             Actinobacteria  \n",
       "12                 Firmicutes  \n",
       "13             Proteobacteria  \n",
       "14                 Firmicutes  \n",
       "15                 Firmicutes  \n",
       "16                 Firmicutes  \n",
       "17             Actinobacteria  \n",
       "18             Proteobacteria  \n",
       "19              Bacteroidetes  \n",
       "20                 Firmicutes  \n",
       "21                 Firmicutes  \n",
       "22                        TM7  \n",
       "23                 Firmicutes  \n",
       "24                 Firmicutes  \n",
       "25                 Firmicutes  \n",
       "26             Proteobacteria  \n",
       "27               Fusobacteria  \n",
       "28               Spirochaetes  \n",
       "29             Proteobacteria  \n",
       "30             Proteobacteria  \n",
       "31                 Firmicutes  \n",
       "32             Actinobacteria  \n",
       "33             Proteobacteria  \n",
       "34             Proteobacteria  \n",
       "35             Proteobacteria  \n",
       "36                        OD1  \n",
       "37                 Firmicutes  \n",
       "38             Actinobacteria  \n",
       "39             Proteobacteria  \n",
       "40              Bacteroidetes  \n",
       "41              Bacteroidetes  \n",
       "42             Proteobacteria  \n",
       "43  Cyanobacteria_Chloroplast  \n",
       "44                 Firmicutes  \n",
       "45             Proteobacteria  \n",
       "46                 Firmicutes  \n",
       "47             Actinobacteria  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "tree_information = pd.read_csv(resource_filename('deepbiome', 'tests/data/genus48_dic.csv'))\n",
    "tree_information"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This file has `.csv` format below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Genus,Family,Order,Class,Phylum\n",
      "Streptococcus,Streptococcaceae,Lactobacillales,Bacilli,Firmicutes\n",
      "Tropheryma,Cellulomonadaceae,Actinomycetales,Actinobacteria,Actinobacteria\n",
      "Veillonella,Veillonellaceae,Selenomonadales,Negativicutes,Firmicutes\n",
      "Actinomyces,Actinomycetaceae,Actinomycetales,Actinobacteria,Actinobacteria\n",
      "Flavobacterium,Flavobacteriaceae,Flavobacteriales,Flavobacteria,Bacteroidetes\n",
      "Prevotella,Prevotellaceae,Bacteroidales,Bacteroidia,Bacteroidetes\n",
      "Porphyromonas,Porphyromonadaceae,Bacteroidales,Bacteroidia,Bacteroidetes\n",
      "Parvimonas,Clostridiales_Incertae_Sedis_XI,Clostridiales,Clostridia,Firmicutes\n",
      "Fusobacterium,Fusobacteriaceae,Fusobacteriales,Fusobacteria,Fusobacteria\n",
      "Propionibacterium,Propionibacteriaceae,Actinomycetales,Actinobacteria,Actinobacteria\n",
      "Gemella,Bacillales_Incertae_Sedis_XI,Bacillales,Bacilli,Firmicutes\n",
      "Rothia,Micrococcaceae,Actinomycetales,Actinobacteria,Actinobacteria\n",
      "Granulicatella,Carnobacteriaceae,Lactobacillales,Bacilli,Firmicutes\n",
      "Neisseria,Neisseriaceae,Neisseriales,Betaproteobacteria,Proteobacteria\n",
      "Lactobacillus,Lactobacillaceae,Lactobacillales,Bacilli,Firmicutes\n",
      "Megasphaera,Veillonellaceae,Selenomonadales,Negativicutes,Firmicutes\n",
      "Catonella,Lachnospiraceae,Clostridiales,Clostridia,Firmicutes\n",
      "Atopobium,Coriobacteriaceae,Coriobacteriales,Actinobacteria,Actinobacteria\n",
      "Campylobacter,Campylobacteraceae,Campylobacterales,Epsilonproteobacteria,Proteobacteria\n",
      "Capnocytophaga,Flavobacteriaceae,Flavobacteriales,Flavobacteria,Bacteroidetes\n",
      "Solobacterium,Erysipelotrichaceae,Erysipelotrichales,Erysipelotrichia,Firmicutes\n",
      "Moryella,Lachnospiraceae,Clostridiales,Clostridia,Firmicutes\n",
      "TM7_genera_incertae_sedis,TM7_genera_incertae_sedis,TM7_genera_incertae_sedis,TM7_genera_incertae_sedis,TM7\n",
      "Staphylococcus,Staphylococcaceae,Bacillales,Bacilli,Firmicutes\n",
      "Filifactor,Peptostreptococcaceae,Clostridiales,Clostridia,Firmicutes\n",
      "Oribacterium,Lachnospiraceae,Clostridiales,Clostridia,Firmicutes\n",
      "Burkholderia,Burkholderiaceae,Burkholderiales,Betaproteobacteria,Proteobacteria\n",
      "Sneathia,Leptotrichiaceae,Fusobacteriales,Fusobacteria,Fusobacteria\n",
      "Treponema,Spirochaetaceae,Spirochaetales,Spirochaetes,Spirochaetes\n",
      "Moraxella,Moraxellaceae,Pseudomonadales,Gammaproteobacteria,Proteobacteria\n",
      "Haemophilus,Pasteurellaceae,Pasteurellales,Gammaproteobacteria,Proteobacteria\n",
      "Selenomonas,Veillonellaceae,Selenomonadales,Negativicutes,Firmicutes\n",
      "Corynebacterium,Corynebacteriaceae,Actinomycetales,Actinobacteria,Actinobacteria\n",
      "Rhizobium,Rhizobiaceae,Rhizobiales,Alphaproteobacteria,Proteobacteria\n",
      "Bradyrhizobium,Bradyrhizobiaceae,Rhizobiales,Alphaproteobacteria,Proteobacteria\n",
      "Methylobacterium,Methylobacteriaceae,Rhizobiales,Alphaproteobacteria,Proteobacteria\n",
      "OD1_genera_incertae_sedis,OD1_genera_incertae_sedis,OD1_genera_incertae_sedis,OD1_genera_incertae_sedis,OD1\n",
      "Finegoldia,Clostridiales_Incertae_Sedis_XI,Clostridiales,Clostridia,Firmicutes\n",
      "Microbacterium,Microbacteriaceae,Actinomycetales,Actinobacteria,Actinobacteria\n",
      "Sphingomonas,Sphingomonadaceae,Sphingomonadales,Alphaproteobacteria,Proteobacteria\n",
      "Chryseobacterium,Flavobacteriaceae,Flavobacteriales,Flavobacteria,Bacteroidetes\n",
      "Bacteroides,Bacteroidaceae,Bacteroidales,Bacteroidia,Bacteroidetes\n",
      "Bdellovibrio,Bdellovibrionaceae,Bdellovibrionales,Deltaproteobacteria,Proteobacteria\n",
      "Streptophyta,Chloroplast,Chloroplast,Chloroplast,Cyanobacteria_Chloroplast\n",
      "Lachnospiracea_incertae_sedis,Lachnospiraceae,Clostridiales,Clostridia,Firmicutes\n",
      "Paracoccus,Rhodobacteraceae,Rhodobacterales,Alphaproteobacteria,Proteobacteria\n",
      "Fastidiosipila,Ruminococcaceae,Clostridiales,Clostridia,Firmicutes\n",
      "Pseudonocardia,Pseudonocardiaceae,Actinomycetales,Actinobacteria,Actinobacteria\n",
      "\n"
     ]
    }
   ],
   "source": [
    "with open(resource_filename('deepbiome', 'tests/data/genus48_dic.csv')) as f:\n",
    "    print(f.read())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example of the input file\n",
    "\n",
    "Below is an example of the input file.\n",
    "This example has 1000 samples' microbiome abandunce. __The order of the microbiome should be same as the order of the microbiome in the Genus level in the tree information above.__"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Streptococcus</th>\n",
       "      <th>Tropheryma</th>\n",
       "      <th>Veillonella</th>\n",
       "      <th>Actinomyces</th>\n",
       "      <th>Flavobacterium</th>\n",
       "      <th>Prevotella</th>\n",
       "      <th>Porphyromonas</th>\n",
       "      <th>Parvimonas</th>\n",
       "      <th>Fusobacterium</th>\n",
       "      <th>Propionibacterium</th>\n",
       "      <th>...</th>\n",
       "      <th>Microbacterium</th>\n",
       "      <th>Sphingomonas</th>\n",
       "      <th>Chryseobacterium</th>\n",
       "      <th>Bacteroides</th>\n",
       "      <th>Bdellovibrio</th>\n",
       "      <th>Streptophyta</th>\n",
       "      <th>Lachnospiracea_incertae_sedis</th>\n",
       "      <th>Paracoccus</th>\n",
       "      <th>Fastidiosipila</th>\n",
       "      <th>Pseudonocardia</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>841</td>\n",
       "      <td>0</td>\n",
       "      <td>813</td>\n",
       "      <td>505</td>\n",
       "      <td>5</td>\n",
       "      <td>3224</td>\n",
       "      <td>0</td>\n",
       "      <td>362</td>\n",
       "      <td>11</td>\n",
       "      <td>65</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>87</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2133</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1445</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>573</td>\n",
       "      <td>0</td>\n",
       "      <td>1278</td>\n",
       "      <td>82</td>\n",
       "      <td>85</td>\n",
       "      <td>69</td>\n",
       "      <td>154</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3638</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1259</td>\n",
       "      <td>0</td>\n",
       "      <td>805</td>\n",
       "      <td>650</td>\n",
       "      <td>0</td>\n",
       "      <td>1088</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>74</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>39</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3445</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>982</td>\n",
       "      <td>0</td>\n",
       "      <td>327</td>\n",
       "      <td>594</td>\n",
       "      <td>0</td>\n",
       "      <td>960</td>\n",
       "      <td>81</td>\n",
       "      <td>19</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>157</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3507</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1162</td>\n",
       "      <td>0</td>\n",
       "      <td>130</td>\n",
       "      <td>969</td>\n",
       "      <td>163</td>\n",
       "      <td>1515</td>\n",
       "      <td>167</td>\n",
       "      <td>4</td>\n",
       "      <td>162</td>\n",
       "      <td>3</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>9</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>60</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>3945</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 48 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   Streptococcus  Tropheryma  Veillonella  Actinomyces  Flavobacterium  \\\n",
       "0            841           0          813          505               5   \n",
       "1           1445           0            1          573               0   \n",
       "2           1259           0          805          650               0   \n",
       "3            982           0          327          594               0   \n",
       "4           1162           0          130          969             163   \n",
       "\n",
       "   Prevotella  Porphyromonas  Parvimonas  Fusobacterium  Propionibacterium  \\\n",
       "0        3224              0         362             11                 65   \n",
       "1        1278             82          85             69                154   \n",
       "2        1088              0           0             74                  0   \n",
       "3         960             81          19              9                  0   \n",
       "4        1515            167           4            162                  3   \n",
       "\n",
       "   ...  Microbacterium  Sphingomonas  Chryseobacterium  Bacteroides  \\\n",
       "0  ...               0            87                 0            0   \n",
       "1  ...               0             1                 2            0   \n",
       "2  ...               0             2                 8            1   \n",
       "3  ...             157             1                 0            4   \n",
       "4  ...               0             9                 0            0   \n",
       "\n",
       "   Bdellovibrio  Streptophyta  Lachnospiracea_incertae_sedis  Paracoccus  \\\n",
       "0             0             0                              0           0   \n",
       "1             0             0                              0           0   \n",
       "2            39             0                              0           0   \n",
       "3            60             0                              0           0   \n",
       "4             0             0                             60           0   \n",
       "\n",
       "   Fastidiosipila  Pseudonocardia  \n",
       "0               0            2133  \n",
       "1               0            3638  \n",
       "2               0            3445  \n",
       "3               0            3507  \n",
       "4               0            3945  \n",
       "\n",
       "[5 rows x 48 columns]"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x = pd.read_csv(resource_filename('deepbiome', 'tests/data/onefile_x.csv'))\n",
    "x.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Streptococcus</th>\n",
       "      <th>Tropheryma</th>\n",
       "      <th>Veillonella</th>\n",
       "      <th>Actinomyces</th>\n",
       "      <th>Flavobacterium</th>\n",
       "      <th>Prevotella</th>\n",
       "      <th>Porphyromonas</th>\n",
       "      <th>Parvimonas</th>\n",
       "      <th>Fusobacterium</th>\n",
       "      <th>Propionibacterium</th>\n",
       "      <th>...</th>\n",
       "      <th>Microbacterium</th>\n",
       "      <th>Sphingomonas</th>\n",
       "      <th>Chryseobacterium</th>\n",
       "      <th>Bacteroides</th>\n",
       "      <th>Bdellovibrio</th>\n",
       "      <th>Streptophyta</th>\n",
       "      <th>Lachnospiracea_incertae_sedis</th>\n",
       "      <th>Paracoccus</th>\n",
       "      <th>Fastidiosipila</th>\n",
       "      <th>Pseudonocardia</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>1401</td>\n",
       "      <td>4</td>\n",
       "      <td>30</td>\n",
       "      <td>526</td>\n",
       "      <td>0</td>\n",
       "      <td>923</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>127</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4470</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>2655</td>\n",
       "      <td>6</td>\n",
       "      <td>106</td>\n",
       "      <td>74</td>\n",
       "      <td>0</td>\n",
       "      <td>952</td>\n",
       "      <td>76</td>\n",
       "      <td>13</td>\n",
       "      <td>158</td>\n",
       "      <td>125</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2826</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>335</td>\n",
       "      <td>0</td>\n",
       "      <td>71</td>\n",
       "      <td>259</td>\n",
       "      <td>67</td>\n",
       "      <td>718</td>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>4</td>\n",
       "      <td>167</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>246</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6527</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>649</td>\n",
       "      <td>69</td>\n",
       "      <td>966</td>\n",
       "      <td>1227</td>\n",
       "      <td>0</td>\n",
       "      <td>508</td>\n",
       "      <td>2</td>\n",
       "      <td>30</td>\n",
       "      <td>550</td>\n",
       "      <td>0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>4402</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>1258</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1119</td>\n",
       "      <td>0</td>\n",
       "      <td>2348</td>\n",
       "      <td>25</td>\n",
       "      <td>0</td>\n",
       "      <td>137</td>\n",
       "      <td>176</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2585</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 48 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     Streptococcus  Tropheryma  Veillonella  Actinomyces  Flavobacterium  \\\n",
       "995           1401           4           30          526               0   \n",
       "996           2655           6          106           74               0   \n",
       "997            335           0           71          259              67   \n",
       "998            649          69          966         1227               0   \n",
       "999           1258           0            0         1119               0   \n",
       "\n",
       "     Prevotella  Porphyromonas  Parvimonas  Fusobacterium  Propionibacterium  \\\n",
       "995         923             25           0            127                  0   \n",
       "996         952             76          13            158                125   \n",
       "997         718              1           4              4                167   \n",
       "998         508              2          30            550                  0   \n",
       "999        2348             25           0            137                176   \n",
       "\n",
       "     ...  Microbacterium  Sphingomonas  Chryseobacterium  Bacteroides  \\\n",
       "995  ...               0             0                 7            0   \n",
       "996  ...               0             2                 0            0   \n",
       "997  ...               0           246                 0            0   \n",
       "998  ...               0             0                 0            0   \n",
       "999  ...               0             2                 0            0   \n",
       "\n",
       "     Bdellovibrio  Streptophyta  Lachnospiracea_incertae_sedis  Paracoccus  \\\n",
       "995             0             0                              0           0   \n",
       "996             0             0                              0           0   \n",
       "997             6             0                              0           0   \n",
       "998             0             6                              0           0   \n",
       "999             0             0                              0           0   \n",
       "\n",
       "     Fastidiosipila  Pseudonocardia  \n",
       "995               0            4470  \n",
       "996               0            2826  \n",
       "997               0            6527  \n",
       "998               0            4402  \n",
       "999               0            2585  \n",
       "\n",
       "[5 rows x 48 columns]"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "x.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This file has `.csv` format below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\"Streptococcus\",\"Tropheryma\",\"Veillonella\",\"Actinomyces\",\"Flavobacterium\",\"Prevotella\",\"Porphyromonas\",\"Parvimonas\",\"Fusobacterium\",\"Propionibacterium\",\"Gemella\",\"Rothia\",\"Granulicatella\",\"Neisseria\",\"Lactobacillus\",\"Megasphaera\",\"Catonella\",\"Atopobium\",\"Campylobacter\",\"Capnocytophaga\",\"Solobacterium\",\"Moryella\",\"TM7_genera_incertae_sedis\",\"Staphylococcus\",\"Filifactor\",\"Oribacterium\",\"Burkholderia\",\"Sneathia\",\"Treponema\",\"Moraxella\",\"Haemophilus\",\"Selenomonas\",\"Corynebacterium\",\"Rhizobium\",\"Bradyrhizobium\",\"Methylobacterium\",\"OD1_genera_incertae_sedis\",\"Finegoldia\",\"Microbacterium\",\"Sphingomonas\",\"Chryseobacterium\",\"Bacteroides\",\"Bdellovibrio\",\"Streptophyta\",\"Lachnospiracea_incertae_sedis\",\"Paracoccus\",\"Fastidiosipila\",\"Pseudonocardia\"\n",
      "841,0,813,505,5,3224,0,362,11,65,156,1,55,0,1,20,382,1,333,24,80,43,309,2,3,4,0,1,32,0,2,4,382,0,0,96,23,0,0,87,0,0,0,0,0,0,0,2133\n",
      "1445,0,1,573,0,1278,82,85,69,154,436,3,0,61,440,0,394,83,33,123,0,49,414,0,0,37,0,0,42,0,0,384,27,0,0,0,146,0,0,1,2,0,0,0,0,0,0,3638\n",
      "1259,0,805,650,0,1088,0,0,74,0,155,228,430,765,0,0,11,102,68,90,77,83,322,10,0,7,0,122,76,0,1,25,0,0,0,44,13,0,0,2,8,1,39,0,0,0,0,3445\n",
      "982,0,327,594,0,960,81,19,9,0,45,457,1049,0,3,450,19,170,388,147,0,0,41,63,0,1,0,0,121,0,0,1,0,0,0,0,344,0,157,1,0,4,60,0,0,0,0,3507\n",
      "1162,0,130,969,163,1515,167,4,162,3,12,0,48,73,93,259,52,0,201,85,14,14,434,2,0,0,0,0,187,0,0,188,45,0,0,0,4,0,0,9,0,0,0,0,60,0,0,3945\n",
      "1956,37,41,661,47,1555,374,7,142,19,61,226,0,30,52,0,6,480,142,148,9,575,12,0,0,0,0,3,168,0,56,50,0,0,0,98,989,0,0,12,0,0,0,0,0,0,0,2044\n",
      "1037,14,83,1595,132,305,103,174,1195,0,410,224,1,320,26,0,476,0,7,37,46,61,20,0,0,0,0,0,226,0,239,8,1,0,0,0,0,188,0,20,4,0,4,0,0,0,0,3044\n",
      "641,0,172,179,0,1312,84,9,81,376,128,223,160,0,532,155,89,355,1,282,0,0,25,0,0,43,0,9,311,0,0,0,0,0,0,0,845,0,0,8,0,0,0,0,0,0,0,3980\n",
      "852,146,504,99,2,376,116,152,67,0,120,3,23,2,34,0,127,75,240,60,42,0,9,0,15,0,62,0,13,0,197,187,396,0,0,20,51,0,0,3,0,0,0,0,0,0,0,6007\n",
      "901,3,187,1214,0,1508,675,0,107,49,318,2,393,5,3,65,4,285,79,11,0,0,4,3,0,0,1,0,729,0,0,173,0,0,0,0,254,0,0,0,0,0,1,0,29,0,0,2997\n",
      "677,60,635,45,268,2461,466,9,338,0,97,63,45,82,128,1,139,4,323,6,0,0,58,0,0,0,0,0,36,0,646,29,0,0,0,0,120,0,0,41,0,0,0,0,0,0,0,3223\n",
      "413,0,355,1258,0,583,48,107,250,5,102,204,287,4,0,18,2,145,454,11,0,79,104,25,164,1,0,100,55,0,1,33,206,0,0,10,81,0,0,0,0,0,0,0,0,0,0,4895\n",
      "351,99,17,268,0,912,4,96,847,472,67,8,440,16,0,0,247,0,165,83,0,0,0,0,4,0,0,0,275,0,21,1968,3,0,0,0,173,0,0,1,37,0,0,0,0,0,53,3373\n",
      "1829,0,32,77,0,1971,8,6,319,1,8,140,302,165,177,0,166,27,857,19,0,0,155,0,0,579,127,112,54,0,1,19,0,0,0,0,143,0,0,8,51,0,0,0,0,0,0,2647\n",
      "1089,0,4,30,0,847,51,42,48,0,211,1,24,0,81,1,687,494,758,27,0,0,123,7,0,0,0,1,310,0,6,4,780,0,0,4,1,0,0,0,0,0,2,0,0,0,0,4367\n",
      "1761,0,60,517,4,576,63,0,169,0,12,437,0,7,130,0,2,7,47,346,115,0,539,0,2,0,0,0,515,0,0,68,5,0,0,0,315,0,0,16,0,0,0,0,0,0,0,4287\n",
      "938,0,601,794,0,1836,52,6,10,0,1104,8,219,168,174,3,0,12,425,885,0,15,268,34,0,141,2,0,8,0,0,5,8,0,0,0,2,0,0,0,0,0,0,0,0,0,0,2282\n",
      "882,8,110,975,0,1042,11,3,211,0,15,22,56,0,47,140,5,4,194,109,0,403,129,6,0,10,0,3,19,0,1,591,2,2,0,6,0,0,0,1,0,0,0,0,0,0,0,4993\n",
      "1395,0,76,60,0,916,2,466,353,13,1,159,369,0,92,2,14,528,103,133,100,4,17,0,0,0,0,0,7,0,0,6,48,0,0,44,578,0,0,0,0,0,0,0,0,0,0,4514\n",
      "1150,3,168,1265,0,1328,14,0,432,14,140,0,1,179,77,0,92,55,33,123,0,8,844,0,0,82,34,113,14,0,0,99,26,0,0,0,14,14,0,24,49,0,0,0,0,0,0,3605\n",
      "352,0,20,48,0,1035,269,1,1,53,122,1,0,0,107,0,12,414,253,483,335,3,117,0,0,1,21,37,7,0,8,13,15,0,0,186,0,0,0,18,0,57,0,0,0,0,0,6011\n",
      "1120,0,124,1198,0,2161,795,1,483,0,0,5,8,16,78,7,22,3,62,203,0,0,148,0,0,68,0,2,22,0,0,23,148,0,0,0,127,0,0,2,0,0,0,0,0,0,0,3174\n",
      "406,5,6,1191,0,2582,239,155,81,0,2,183,4,7,483,0,190,0,10,8,0,0,447,4,226,0,59,4,146,0,22,225,0,0,0,0,34,0,0,1,0,0,0,0,0,0,0,3280\n",
      "439,133,130,108,0,1511,50,180,33,0,110,86,539,0,88,145,7,11,745,487,0,40,176,43,8,103,0,6,193,0,4,306,6,0,0,0,2,1,0,0,0,0,0,0,0,0,0,4310\n",
      "513,0,130,583,2,781,3,34,201,84,3,1358,59,3,343,117,148,278,0,335,0,51,80,47,0,5,63,775,35,0,16,562,0,0,0,0,62,0,0,5,0,0,18,1,0,2,0,3303\n",
      "229,0,126,179,0,1581,61,26,1018,25,27,73,289,25,9,2,4,150,32,130,0,84,78,102,0,29,1,11,143,0,1,15,0,0,0,471,179,0,0,398,0,0,0,0,0,0,0,4502\n",
      "1378,3,327,351,3,1129,103,35,140,245,23,1,251,0,13,1128,0,0,81,16,0,0,193,31,0,0,0,255,273,0,1,15,8,0,0,0,29,0,6,0,0,0,1,0,0,0,2,3959\n",
      "701,0,402,918,0,1518,116,234,881,252,144,14,4,0,18,374,22,8,0,363,1,0,37,0,0,0,0,0,187,0,0,7,5,0,0,0,0,0,0,2,120,0,0,1,0,0,0,3671\n",
      "1116,1,630,232,0,1291,318,93,423,0,166,122,432,0,13,0,6,54,5,3,0,11,2019,0,0,51,0,0,88,0,0,91,1,0,0,34,0,0,0,0,0,0,0,1,0,0,0,2799\n",
      "1356,813,40,210,0,1337,628,0,134,0,145,203,247,1,28,5,25,0,1,373,58,0,93,2,0,80,260,0,18,0,0,196,0,2,0,0,0,0,4,0,4,0,0,0,0,0,0,3737\n",
      "470,0,167,18,41,882,318,820,189,38,521,65,58,132,25,257,43,6,973,46,132,114,17,48,0,0,51,0,4,0,0,131,76,0,0,0,106,0,0,0,2,0,0,0,0,0,0,4250\n",
      "487,16,412,945,1,535,1,0,122,0,530,392,1,182,167,1,1,44,374,61,73,9,33,0,8,0,0,9,484,0,52,66,4,0,0,0,571,0,0,1,0,0,21,0,0,0,0,4397\n",
      "994,0,1190,98,0,917,16,9,357,0,101,15,0,0,48,2,8,0,25,40,0,286,27,0,0,75,243,0,1610,0,0,387,75,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3477\n",
      "383,6,1452,690,4,775,2,58,287,0,833,0,83,1,5,0,50,400,28,120,0,16,6,0,3,274,0,0,313,0,0,0,0,0,0,4,27,0,0,0,0,0,72,0,0,0,0,4108\n",
      "179,101,59,491,0,1902,59,0,150,0,11,75,131,461,112,0,0,462,0,6,0,225,78,50,96,21,1,1,35,0,0,0,79,162,172,0,250,0,0,0,19,0,0,0,0,0,0,4612\n",
      "822,0,168,475,0,1640,600,6,247,13,138,2,51,2,64,169,24,55,360,126,0,841,94,158,0,0,0,27,448,0,0,190,0,0,0,0,5,0,0,0,22,0,0,0,0,0,0,3253\n",
      "525,50,142,278,1,1005,148,26,905,5,256,9,1536,37,6,116,48,13,116,14,23,0,0,0,0,1,1,1,8,0,0,48,7,0,0,0,289,0,0,0,0,0,0,9,0,0,0,4377\n",
      "660,14,132,252,64,597,0,206,13,23,12,233,160,0,212,21,281,160,45,102,4,133,44,0,0,88,53,0,204,0,20,127,13,0,0,0,1,0,0,0,0,0,0,0,0,0,0,6126\n",
      "480,22,72,170,222,1481,6,2,585,211,448,503,11,48,14,527,832,0,9,192,341,272,2,0,0,50,2,0,52,0,0,86,192,0,0,0,14,0,0,0,0,0,0,1,0,0,0,3153\n",
      "741,23,189,143,3,2487,35,201,312,0,3,233,0,1,150,12,495,0,1,102,285,0,507,26,7,62,0,1,41,0,0,0,588,0,0,29,18,0,0,0,0,0,0,0,0,0,0,3305\n",
      "623,168,18,1993,0,1829,157,0,146,0,177,1,86,8,1232,0,6,0,5,14,3,0,59,0,5,0,122,8,25,0,2,202,265,0,0,0,201,0,0,0,12,0,0,0,0,0,0,2633\n",
      "835,0,79,117,17,1140,559,59,350,262,242,178,6,178,0,0,59,133,27,62,39,20,5,0,69,3,0,13,449,0,0,0,0,0,0,0,178,0,13,0,0,0,0,0,0,0,0,4908\n",
      "2196,0,614,328,0,1809,467,70,470,3,131,0,2,1,1,4,3,172,417,14,14,0,231,0,0,1,4,47,258,0,0,73,133,0,0,0,0,0,3,5,0,0,0,0,0,0,0,2529\n",
      "618,0,73,740,0,1253,21,115,508,8,124,15,221,0,88,14,33,304,733,10,258,177,305,0,0,46,0,0,342,0,13,512,0,0,0,0,117,0,0,0,0,0,0,0,0,0,0,3352\n",
      "835,7,94,769,1,1235,65,97,629,0,115,436,42,0,265,31,70,15,396,99,0,611,66,26,0,0,32,1,86,0,0,395,935,0,0,0,18,0,0,140,0,0,0,0,0,0,0,2489\n",
      "587,24,12,1374,0,2272,96,109,789,26,238,1,1,46,1,2,10,6,120,80,19,0,13,10,0,5,0,8,175,0,0,83,0,0,0,0,17,0,3,0,0,0,0,0,0,0,0,3873\n",
      "750,0,261,235,5,592,30,0,704,579,0,12,61,2,64,576,0,100,0,44,26,0,343,0,0,13,12,4,32,0,0,451,16,0,0,440,186,0,0,22,12,7,1,0,0,21,0,4399\n",
      "940,1,12,2219,2,447,203,35,451,10,76,22,183,5,78,16,0,0,194,394,68,0,14,0,0,305,7,0,567,0,1,183,410,0,0,1,27,0,0,0,0,0,0,0,0,0,0,3129\n",
      "516,2,300,127,0,831,494,18,798,0,0,589,342,53,86,922,140,5,118,207,0,2,37,31,5,77,144,0,113,0,169,34,195,0,0,0,5,0,0,60,37,216,0,0,0,0,0,3327\n",
      "449,8,130,731,8,1533,220,0,147,3,253,248,6,20,77,50,9,0,6,255,0,0,138,0,0,0,10,390,43,0,0,56,3,0,0,0,278,0,0,0,0,0,141,1,0,0,0,4787\n",
      "429,0,0,460,0,937,899,222,58,0,38,62,3,6,657,0,130,20,81,552,41,4,184,72,38,3,12,0,489,0,14,317,307,0,0,0,101,0,0,0,0,0,0,0,0,0,0,3864\n",
      "1453,368,215,377,2,1464,1,22,346,0,473,114,16,0,1,24,47,0,458,349,208,0,79,117,6,199,0,28,542,0,11,46,3,0,0,0,290,0,0,1,0,0,0,0,0,0,0,2740\n",
      "946,200,7,506,183,366,5,124,152,571,302,47,70,5,6,55,5,42,272,470,13,367,3,161,31,0,0,2,599,21,0,3,0,0,0,0,263,0,0,104,0,0,0,7,0,0,0,4092\n",
      "2039,1,288,1033,302,562,313,1,50,0,4,3,2,3,41,209,151,0,637,1031,43,5,0,0,0,1,6,101,318,0,1,20,0,0,0,0,13,0,0,7,0,0,0,0,0,0,0,2815\n",
      "707,81,332,103,436,1272,0,87,1262,0,102,69,12,22,2,2,436,507,425,177,0,0,425,0,0,0,0,0,90,2,207,272,487,0,0,477,4,0,0,0,0,0,1,0,0,0,0,2001\n",
      "534,0,94,1573,0,1752,75,0,830,7,35,0,3,5,135,16,502,65,121,4,0,0,17,1,0,314,0,262,16,0,2,274,47,0,0,162,5,4,0,3,0,185,0,0,0,0,0,2957\n",
      "1160,9,122,189,14,1479,305,158,291,9,39,4,301,0,376,0,85,0,532,32,6,621,990,0,71,61,1,4,24,0,0,160,104,0,0,0,33,0,0,58,0,0,0,27,0,7,0,2728\n",
      "564,2,31,423,0,2131,604,1,224,2,4,69,0,0,371,0,62,573,3,0,0,0,52,0,0,0,0,42,210,0,1,258,27,0,0,0,0,0,0,312,10,0,0,0,0,15,0,4009\n",
      "779,0,11,47,0,1710,568,2,188,0,255,4,2,88,75,95,786,421,698,72,7,0,31,0,21,137,0,10,354,8,0,379,103,0,0,0,126,0,0,0,0,0,0,0,0,0,0,3023\n",
      "1015,353,145,58,127,1030,47,0,39,0,410,64,22,104,212,1,260,51,86,30,8,146,78,2,0,22,22,0,19,0,43,982,382,0,0,10,0,0,26,0,154,0,0,61,0,0,0,3991\n",
      "1123,0,188,483,0,649,72,19,386,43,4,35,3,150,10,66,46,4,36,0,169,445,0,0,57,2,9,132,1286,0,0,38,12,0,0,16,22,0,0,15,0,0,0,0,0,0,0,4480\n",
      "902,0,336,744,0,1350,10,0,109,397,0,968,53,0,0,1,18,0,560,0,12,0,256,92,237,8,272,4,81,78,34,11,78,0,0,0,13,0,0,0,22,5,0,0,0,0,0,3349\n",
      "1586,0,11,473,0,2151,138,373,6,0,13,482,175,16,1,222,8,13,32,362,0,2,29,0,29,86,0,0,12,0,84,582,24,0,0,0,201,0,0,0,0,3,29,0,0,0,0,2857\n",
      "965,0,142,930,0,510,332,282,9,0,109,1,51,2,120,0,0,542,439,0,0,0,148,247,0,0,0,304,146,0,123,0,0,0,0,0,97,0,0,0,0,0,0,0,0,0,0,4501\n",
      "922,0,900,203,0,1362,21,384,26,0,523,16,42,10,42,3,29,3,9,204,0,0,13,2,57,65,0,6,108,0,140,33,43,0,0,0,70,0,0,0,0,0,0,0,0,0,0,4764\n",
      "826,0,61,84,6,1248,112,7,365,1071,193,45,0,0,1698,0,2,15,0,692,5,88,0,17,40,18,19,0,433,0,0,1,28,0,0,0,36,0,0,43,0,0,0,0,0,0,0,2847\n",
      "1138,0,504,573,3,1529,346,72,166,0,190,0,131,38,18,0,261,142,10,17,149,0,726,0,20,12,4,0,32,0,0,58,0,0,0,2,37,0,0,0,0,0,0,0,0,0,0,3822\n",
      "1610,0,17,35,0,721,597,2,588,24,32,6,187,15,31,0,15,3,531,190,34,75,10,0,0,6,0,0,250,0,0,177,44,0,0,0,78,0,0,0,0,0,25,0,0,0,0,4697\n",
      "1351,0,202,492,34,1607,639,28,197,0,55,0,155,0,174,0,10,0,158,494,47,70,32,227,0,0,0,0,445,0,0,120,1,0,0,0,42,0,0,12,0,0,0,0,0,0,0,3408\n",
      "1255,0,181,78,0,855,33,0,394,0,300,2,18,54,163,4,146,1,171,173,0,3,183,1093,0,274,288,0,336,0,0,201,13,0,0,12,24,1,0,0,0,0,0,0,0,0,0,3744\n",
      "1430,253,2,485,0,54,99,0,122,21,40,0,12,0,0,0,5,116,469,17,969,0,31,173,0,41,39,0,661,0,288,0,934,0,0,43,46,0,0,20,0,0,0,0,0,0,0,3630\n",
      "266,0,60,414,0,668,88,55,71,0,88,38,3,72,0,4,499,101,78,7,8,558,0,40,0,44,154,109,241,0,292,494,23,0,0,0,850,0,0,0,0,0,0,0,0,0,0,4675\n",
      "974,402,252,441,0,1557,40,0,188,1,231,0,2,57,1,0,655,462,468,143,239,0,60,0,0,0,0,0,56,0,0,35,10,4,0,0,254,0,0,0,0,0,0,0,0,0,173,3295\n",
      "710,503,53,94,0,1490,2,5,269,1,24,0,12,0,97,108,285,152,329,2,59,8,99,40,0,0,0,0,91,11,183,374,2,0,20,0,0,0,0,0,461,0,0,0,0,0,0,4516\n",
      "2075,309,141,83,19,1424,184,27,97,85,180,0,10,70,34,4,266,0,488,145,0,17,78,1,0,0,53,243,177,0,0,12,130,0,0,0,76,0,0,3,4,0,0,0,0,0,0,3565\n",
      "1319,3,1019,4,0,1102,1136,18,436,0,85,139,129,0,132,6,2,1,0,1,0,244,73,1,0,9,0,0,4,0,0,0,67,0,0,0,0,0,94,0,0,0,0,0,0,0,0,3976\n",
      "262,0,46,421,0,1027,501,62,377,1114,5,18,0,15,56,0,447,313,0,734,69,0,14,16,0,2,2,79,222,0,0,60,11,0,0,241,12,0,5,0,0,0,0,0,0,6,0,3863\n",
      "964,0,132,214,32,1532,130,11,1138,0,20,0,0,0,166,0,359,25,110,11,0,221,111,0,0,0,15,0,11,3,1,98,154,0,0,0,6,0,0,1,0,0,70,0,0,0,0,4465\n",
      "1813,0,110,549,20,428,1,177,131,111,0,0,5,0,3,0,0,0,318,4,7,0,52,0,0,305,0,23,441,5,124,8,829,0,0,5,10,0,4,25,0,0,0,0,0,0,0,4492\n",
      "942,3,424,292,0,658,191,37,147,0,419,50,1,542,13,0,11,6,1090,4,45,1,122,95,4,0,242,349,148,0,537,113,0,0,11,0,12,0,0,0,0,0,0,7,0,0,0,3484\n",
      "298,0,672,366,0,1176,3,8,304,253,18,432,31,0,2,50,299,6,3,32,1,618,16,258,0,0,0,0,182,0,0,1893,13,0,0,75,30,0,0,1,0,0,0,0,0,0,0,2960\n",
      "412,0,33,663,0,678,300,308,347,46,122,220,1,0,143,1,7,0,68,40,3,4,521,0,0,0,0,0,12,0,407,120,0,0,0,0,389,0,0,17,44,0,14,0,0,3,0,5077\n",
      "931,6,138,452,0,511,47,0,60,21,0,0,317,4,0,5,31,177,4,22,14,0,40,0,0,72,50,0,645,0,0,308,11,0,0,0,36,0,0,0,0,176,1,0,0,0,0,5921\n",
      "1836,605,11,72,0,2037,155,50,505,34,255,0,0,0,100,0,643,52,164,46,0,0,62,0,83,22,0,0,81,0,0,374,0,4,0,0,41,0,0,11,0,0,0,0,0,0,0,2757\n",
      "1304,2,37,119,76,1263,278,148,18,0,202,3,62,28,330,0,117,33,271,0,0,0,302,0,0,496,0,0,394,0,0,135,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,4381\n",
      "1283,90,350,408,0,764,453,4,66,0,30,0,0,60,0,12,5,30,59,225,0,25,45,0,2,0,105,5,361,0,300,259,244,0,0,115,17,0,0,7,0,0,0,0,0,0,0,4676\n",
      "675,72,166,372,27,1507,8,73,720,0,4,1,0,0,8,19,108,0,746,44,0,0,140,0,0,100,0,0,191,104,1,604,3,0,134,47,126,0,0,1008,34,0,0,0,50,0,0,2908\n",
      "2130,168,163,154,244,1733,192,19,3,57,58,1,97,0,104,34,2,8,1195,23,288,114,77,214,0,27,19,0,10,0,0,479,0,0,0,0,159,0,0,155,0,0,0,0,0,0,0,2073\n",
      "488,0,608,808,0,621,0,35,427,0,319,522,0,0,320,13,292,0,67,21,0,1,520,0,0,18,0,0,281,0,19,8,0,0,10,0,17,0,0,0,0,0,30,0,0,0,0,4555\n",
      "793,60,872,436,28,1153,0,28,18,1,0,4,145,50,216,0,4,1,93,318,44,30,22,81,0,0,0,467,72,4,0,3,0,0,0,53,99,0,0,0,413,0,0,0,0,0,0,4492\n",
      "556,0,343,804,4,1317,60,39,644,1,94,148,0,0,50,0,2,530,45,70,0,0,135,0,0,325,6,0,25,0,13,166,82,0,0,0,0,0,83,0,18,0,0,0,0,0,0,4440\n",
      "422,1433,55,365,0,513,45,9,251,10,17,31,3,400,387,0,3,88,338,4,0,95,7,8,192,180,3,6,118,0,0,369,30,0,0,240,886,0,69,11,0,0,0,0,0,5,0,3407\n",
      "818,0,411,362,332,654,174,47,137,0,223,515,15,312,614,0,255,117,58,275,0,99,159,0,0,0,83,506,380,0,1,371,48,0,0,83,108,0,0,0,7,1,0,0,0,0,0,2835\n",
      "875,0,323,50,13,1542,11,84,40,3,937,0,19,0,453,149,138,1,199,391,129,2,6,0,132,0,0,1251,75,0,0,10,0,0,0,0,2,0,15,39,0,0,1,0,0,0,0,3110\n",
      "1029,224,830,561,109,1795,17,182,40,11,1,8,2,47,88,0,516,0,4,18,5,62,0,713,0,148,0,15,204,0,3,489,1100,0,0,2,122,0,2,0,0,0,0,0,0,0,0,1653\n",
      "635,59,392,622,0,2423,4,11,294,148,60,27,164,15,38,0,7,56,572,127,5,0,922,107,5,2,0,0,232,0,172,220,62,0,0,14,0,0,0,0,0,0,0,0,0,0,0,2605\n",
      "673,13,268,526,0,2855,549,0,245,2,1,30,3,0,2,24,15,1,108,2,0,0,352,0,0,244,22,1,22,0,0,18,8,0,0,23,108,4,0,0,0,0,0,0,0,0,0,3881\n",
      "1239,7,60,1294,1,643,16,129,799,0,86,11,10,0,398,11,91,1,28,101,4,271,1,316,0,0,0,6,70,0,0,14,0,0,0,4,3,0,0,0,0,0,0,0,0,0,0,4386\n",
      "1470,0,334,281,0,975,2,225,12,0,22,631,23,0,127,7,12,334,2,36,0,0,644,27,12,5,1,0,683,0,1,276,26,0,0,5,75,0,0,1,0,0,18,0,0,0,0,3733\n",
      "641,1,135,649,0,1211,849,10,496,5,8,0,0,0,10,3,5,11,10,999,137,39,375,0,0,0,19,0,7,1,364,88,72,5,0,0,2,0,1,0,0,0,2,0,0,0,0,3845\n",
      "1163,0,786,861,0,785,86,599,291,0,239,205,3,0,47,0,37,2,4,141,158,0,240,40,0,0,7,9,39,0,0,57,20,1,0,0,364,0,0,0,0,0,0,0,0,0,0,3816\n",
      "568,2,523,348,0,1221,22,75,361,20,3,172,280,117,59,90,583,0,203,35,0,6,6,243,0,553,0,0,742,0,0,19,0,0,0,4,110,0,0,163,0,0,7,0,0,0,0,3465\n",
      "493,0,96,79,0,2091,238,72,258,0,422,146,0,36,8,104,1,5,42,49,0,1,138,0,40,0,0,2,419,0,0,56,506,0,0,0,4,0,0,7,0,0,5,0,0,0,0,4682\n",
      "395,0,46,1373,0,1394,55,0,48,34,48,0,24,124,123,336,40,23,17,1,638,0,63,7,0,0,0,0,5,0,0,109,243,0,0,0,3,0,0,2,0,0,0,0,0,0,0,4849\n",
      "694,0,6,414,0,1196,168,122,22,0,83,83,180,0,21,21,28,7,142,75,8,116,5,8,0,5,41,3,816,0,0,5,279,0,0,253,44,0,0,0,48,0,0,0,0,13,0,5094\n",
      "855,110,367,662,0,1401,4,107,29,2,20,7,101,0,108,29,358,2,53,18,7,9,639,2,0,1,4,0,202,0,0,53,8,0,0,0,244,0,0,14,0,0,0,0,0,0,0,4584\n",
      "600,0,1,148,0,1042,423,3,15,3,30,995,47,0,744,1,0,0,263,53,0,115,206,0,0,0,0,0,22,0,0,0,12,0,0,0,22,0,0,0,0,0,0,0,0,0,0,5255\n",
      "312,0,93,1111,0,1802,227,30,0,0,6,25,9,0,60,47,178,0,270,864,1,1,383,0,0,50,0,73,199,0,0,17,419,0,0,0,83,0,0,0,0,0,0,0,0,0,0,3740\n",
      "523,0,98,197,497,2342,15,0,662,0,52,222,10,12,23,37,203,0,423,444,1,0,61,39,0,18,109,2,148,0,1,32,15,0,0,0,14,0,0,177,0,0,0,0,0,0,0,3623\n",
      "297,0,175,232,0,484,0,170,35,0,358,31,2,0,2,0,6,0,104,22,168,150,42,1,0,57,0,2,409,0,1,511,551,0,0,0,16,0,53,6,0,0,13,0,0,0,0,6102\n",
      "936,26,35,73,1,958,4,0,1274,0,219,5,170,1,17,1,103,437,168,124,105,437,141,0,0,3,0,139,361,0,0,229,2,0,0,0,36,0,0,0,0,0,0,0,0,0,0,3995\n",
      "2003,0,304,329,0,852,121,9,209,5,95,135,693,0,216,0,33,6,2,1,0,2,416,38,0,111,3,0,122,0,0,43,134,0,0,0,1,0,0,0,0,0,0,17,0,0,0,4100\n",
      "724,190,18,877,0,1560,1002,725,429,75,0,0,49,17,103,0,25,0,15,52,0,0,638,0,0,24,0,0,267,15,0,146,2,0,0,1,0,33,0,0,0,0,0,0,0,0,0,3013\n",
      "646,4,332,674,0,861,381,6,897,4,145,149,38,36,108,3,1072,1,16,0,0,0,84,0,0,7,0,261,491,0,24,273,2,0,0,23,0,0,0,0,23,10,7,0,0,0,0,3422\n",
      "261,0,11,213,24,2144,35,337,178,45,423,0,127,13,72,0,0,0,2,11,196,0,13,0,0,0,0,111,261,0,0,597,284,0,0,47,10,0,0,0,1,0,0,0,2,0,0,4582\n",
      "1387,5,154,44,0,893,0,80,234,117,418,196,0,1,269,0,203,75,45,0,10,0,142,12,0,16,5,0,58,2,266,159,0,0,0,160,2,261,0,0,0,0,0,0,0,0,0,4786\n",
      "1154,31,13,1332,0,654,504,13,127,428,191,39,15,0,1,0,0,0,62,23,0,0,1,1,0,0,1,0,307,0,0,336,366,0,0,0,236,0,0,0,0,0,0,0,0,0,0,4165\n",
      "1315,5,309,698,0,759,31,8,110,26,69,245,622,232,74,0,22,0,17,7,4,0,6,6,0,2,1,272,443,0,0,93,61,0,0,0,22,0,0,0,0,0,1,0,0,0,0,4540\n",
      "1196,49,1,675,0,1126,412,5,24,15,674,157,36,0,1,1,0,0,161,79,958,3,203,0,0,0,8,0,3,2,14,242,0,0,0,0,157,0,0,1,0,184,0,0,0,0,0,3613\n",
      "267,0,228,584,58,634,450,0,240,0,137,2,202,0,48,58,20,61,75,151,2,0,424,0,0,10,35,85,16,0,805,0,846,0,0,3,4,0,0,0,0,0,49,0,0,0,0,4506\n",
      "1589,7,101,23,0,3168,54,1,20,43,124,129,14,16,107,27,0,0,2,20,0,0,25,0,0,8,0,31,2,0,0,111,131,0,0,0,0,0,0,0,0,0,0,1,0,0,0,4246\n",
      "2039,17,76,177,0,1770,15,851,320,0,366,52,314,0,39,0,208,0,9,71,17,166,26,1,0,0,8,75,133,0,0,4,0,0,0,0,121,0,0,0,0,3,8,0,0,0,0,3114\n",
      "1040,21,1246,901,412,789,809,0,76,0,0,158,7,79,55,0,31,0,157,2,118,51,191,0,11,2,0,15,188,0,678,46,1,0,0,0,162,0,0,24,2,1,0,0,0,0,0,2727\n",
      "341,70,337,88,2,322,415,2,494,4,97,107,148,0,217,781,0,27,161,421,35,0,722,5,4,0,0,31,3,0,19,281,1,0,0,0,1203,0,0,0,2,0,0,0,0,0,0,3660\n",
      "633,0,505,43,220,993,55,326,270,2,375,14,68,258,88,51,28,1,4,153,12,429,386,0,0,48,294,31,129,0,2,38,147,0,0,0,293,0,13,0,0,0,0,0,0,0,0,4091\n",
      "667,109,472,85,2,998,125,66,479,161,0,9,217,0,0,0,46,1,18,37,0,0,4,6,0,48,7,81,390,0,12,52,0,0,30,0,0,0,0,0,0,0,0,0,0,0,0,5878\n",
      "1427,0,210,376,49,1506,10,33,4,10,29,350,21,62,254,14,78,0,2,211,3,0,10,35,1188,18,0,12,34,0,25,330,261,0,0,1,4,0,0,244,7,0,0,0,0,0,0,3182\n",
      "704,0,771,390,0,2541,82,27,212,13,498,244,17,161,0,12,38,0,22,533,58,62,504,0,303,30,0,1,70,0,5,11,5,5,0,0,1,0,0,0,0,0,0,33,0,0,0,2647\n",
      "1450,3,99,303,4,385,267,83,182,55,44,0,329,11,80,1,294,130,22,3,0,6,205,0,0,1,18,8,88,25,0,6,29,0,260,0,17,0,0,420,0,0,0,0,0,0,0,5172\n",
      "431,1,118,195,227,1150,579,18,77,0,16,4,275,196,0,44,16,1011,788,13,0,0,20,8,0,4,0,1,130,0,0,32,303,327,0,0,70,0,93,3,0,0,64,0,0,0,0,3786\n",
      "150,0,757,821,1,535,48,0,108,0,132,7,288,431,1,1,56,68,122,300,14,0,276,0,0,34,6,0,438,0,2,2,0,0,0,0,63,0,0,0,0,0,0,0,0,0,0,5339\n",
      "648,0,239,947,0,935,4,0,189,12,217,0,33,0,3,0,808,6,99,612,0,29,12,0,0,11,5,94,10,0,0,23,0,0,0,0,32,0,0,2,0,0,1,0,0,0,0,5029\n",
      "2104,63,4,505,0,1186,420,95,320,54,69,157,258,307,332,162,1,20,0,111,42,16,85,78,24,0,1,1,277,0,0,39,281,0,0,0,1,0,0,0,2,0,1,0,0,0,0,2984\n",
      "684,0,895,53,159,500,199,0,264,2,342,0,12,5,1,0,329,202,446,78,66,0,419,0,0,0,0,1,726,0,91,256,121,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4149\n",
      "1041,96,176,378,0,2298,56,670,253,0,1,740,43,89,117,245,12,1,23,39,0,2,171,21,1,0,0,0,72,7,0,827,73,0,0,37,75,0,0,0,0,0,0,0,0,0,0,2436\n",
      "864,711,350,1101,0,2048,80,7,25,1,245,19,228,0,2,0,134,0,50,14,5,0,307,13,0,33,0,360,5,0,5,85,116,182,3,77,0,0,0,0,0,0,0,18,0,0,0,2912\n",
      "974,22,88,247,8,1109,115,13,131,0,17,130,6,40,686,0,95,296,32,9,0,284,81,338,0,0,328,0,109,0,25,78,1,0,0,0,65,0,0,1,0,0,0,0,0,0,0,4672\n",
      "37,0,344,263,0,647,73,0,12,16,424,0,47,0,113,1,402,112,14,0,225,2,47,0,1,107,88,0,1064,0,0,1066,1129,0,25,9,336,0,0,0,0,0,4,0,0,0,0,3392\n",
      "1616,9,104,493,98,676,83,0,101,126,4,0,81,0,101,0,428,0,248,181,70,16,3,7,0,0,52,0,91,3,8,219,495,0,0,0,0,0,0,0,96,0,2,0,13,0,0,4576\n",
      "765,349,441,285,78,2028,418,1,313,0,147,0,153,1,1,183,85,0,274,572,0,202,29,131,0,51,0,53,44,0,0,11,0,389,0,0,18,0,0,0,0,0,0,0,0,0,0,2978\n",
      "2120,0,23,538,0,786,130,1,535,0,67,103,19,2,0,196,14,0,212,119,14,0,242,0,43,1,12,126,191,0,0,38,161,0,0,0,0,0,0,138,0,0,0,0,0,0,0,4169\n",
      "161,206,261,787,5,1441,79,1059,14,92,22,17,17,4,98,96,14,24,131,278,15,0,0,40,3,0,7,0,227,49,52,85,25,0,0,0,4,0,0,0,0,0,0,23,0,11,0,4653\n",
      "369,0,1,240,0,2111,33,0,331,1,5,41,0,151,0,365,559,61,478,257,232,0,78,29,0,0,0,0,457,0,27,0,71,0,0,80,73,0,0,0,0,0,0,0,0,0,0,3950\n",
      "156,310,43,232,81,1570,164,10,212,0,29,6,494,25,5,255,0,89,10,1,21,9,225,0,0,0,0,6,149,0,0,1303,102,0,0,0,72,0,0,4,0,0,0,0,0,8,0,4409\n",
      "650,0,19,576,0,2185,18,89,265,0,50,14,16,61,48,0,76,0,24,751,0,77,81,192,0,0,0,0,362,0,0,167,395,0,0,2,0,0,0,12,0,0,0,1,0,5,0,3864\n",
      "2143,25,33,336,0,2094,40,1,109,0,485,26,54,0,126,251,58,30,115,89,14,0,11,479,0,60,1,75,287,0,0,385,24,0,0,0,487,0,0,0,0,0,64,0,0,0,0,2098\n",
      "773,1,562,611,7,2419,251,101,312,6,476,15,69,0,584,267,7,22,4,30,0,0,8,0,13,82,0,0,25,0,74,12,3,0,0,0,359,0,0,3,14,0,688,0,0,0,0,2202\n",
      "1238,0,8,54,0,1887,58,0,433,83,0,1435,3,104,286,0,7,14,154,4,49,1,50,2,441,0,0,102,58,0,0,98,3,0,0,0,11,0,0,24,0,0,0,407,0,0,557,2429\n",
      "870,1,147,97,27,724,130,15,274,27,199,36,2,0,933,128,24,0,202,40,10,0,23,16,0,0,0,23,905,0,81,0,518,0,0,483,66,0,0,9,0,0,0,0,0,0,0,3990\n",
      "660,225,201,1088,32,2427,395,0,92,0,16,244,61,401,5,1,91,145,122,18,0,16,50,1,0,373,0,2,326,0,34,529,167,0,0,9,2,0,0,0,0,0,3,0,0,0,0,2264\n",
      "268,0,101,450,0,595,59,0,9,2,651,177,31,10,37,72,3,153,26,2,7,68,84,0,8,255,0,0,352,0,0,322,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,6256\n",
      "1318,0,13,235,0,551,208,29,31,0,0,471,68,25,325,2,40,425,167,33,42,0,641,0,1,1,2,75,50,1,0,300,63,0,0,0,1,0,901,75,25,0,0,0,26,0,0,3855\n",
      "1801,0,35,42,1,772,1560,0,324,2,184,10,2,0,380,0,0,1,16,2,0,8,67,0,37,3,0,0,408,0,2,2,15,0,0,0,711,0,0,0,0,0,0,0,0,0,1,3614\n",
      "596,11,297,29,0,1242,102,45,11,572,18,153,0,0,87,20,107,39,7,0,0,0,166,0,0,356,0,0,89,0,162,4,163,0,0,0,184,0,0,5,0,0,19,0,0,0,0,5516\n",
      "409,0,171,481,1,2338,9,363,514,406,30,0,6,1,209,14,230,0,31,5,1,176,55,0,32,190,176,0,216,0,0,304,511,0,0,0,56,0,0,0,0,0,0,0,0,0,0,3065\n",
      "356,0,75,353,178,321,409,751,116,177,583,1,0,0,59,32,95,858,103,64,244,0,71,0,0,0,0,0,244,9,18,74,508,0,0,0,116,0,0,1,0,1,7,0,0,0,0,4176\n",
      "866,50,183,151,255,859,300,26,476,0,167,3,1,43,1,32,6,16,91,70,0,30,15,299,0,0,0,1,793,0,22,64,171,0,0,0,29,0,0,0,0,0,0,0,0,0,0,4980\n",
      "2345,285,104,216,259,1750,718,12,402,108,190,185,129,29,433,243,56,35,61,59,128,20,0,1,0,0,4,0,118,0,0,69,0,0,0,0,291,0,0,0,0,0,0,1,0,0,0,1749\n",
      "1044,0,81,413,0,254,1,474,35,50,154,151,39,60,194,0,107,0,6,1416,0,298,338,0,0,8,0,0,78,0,0,17,0,0,1,0,100,0,0,1,105,0,0,0,0,0,0,4575\n",
      "682,0,129,152,0,708,55,735,164,0,230,0,1735,3,379,11,42,12,0,0,0,15,9,1,41,88,127,2,28,0,8,11,1,0,0,1,1,0,0,3,0,0,0,0,17,0,0,4610\n",
      "1411,0,200,382,129,1289,0,1,7,2,544,135,6,0,35,0,1,47,2,360,0,62,139,9,0,0,570,247,3,0,0,10,14,0,0,0,4,0,0,0,0,0,0,0,0,0,17,4374\n",
      "435,0,510,381,0,2236,1,96,944,0,118,5,4,80,105,0,2,0,177,0,0,49,32,6,0,1,0,0,685,0,0,2,0,0,0,0,0,0,0,4,42,0,24,0,0,0,0,4061\n",
      "868,317,1,602,0,2364,20,0,308,50,366,2,0,1,45,6,9,0,320,465,0,0,95,104,0,0,0,1,120,0,9,104,66,0,0,0,0,0,0,64,0,0,0,0,0,0,0,3693\n",
      "1218,0,126,170,0,1544,94,25,224,19,100,31,0,277,397,4,618,4,102,12,0,0,103,29,0,85,0,78,112,0,1,0,41,0,0,0,0,0,0,0,0,14,0,0,0,0,0,4572\n",
      "1467,0,78,82,5,2945,320,12,805,230,160,53,0,28,41,27,41,44,9,51,2,197,12,0,0,5,0,0,127,0,0,16,116,0,0,0,1,0,2,0,0,0,207,0,0,0,0,2917\n",
      "797,0,1507,113,0,1109,180,0,211,0,121,98,414,0,11,4,13,7,11,73,6,5,385,43,0,0,38,0,0,0,7,114,12,0,0,0,16,0,0,3,0,0,229,0,0,0,0,4473\n",
      "230,230,446,687,72,899,18,18,35,580,493,4,518,0,36,0,0,42,400,737,3,0,0,2,0,0,38,1,46,375,0,81,102,0,0,1,81,0,0,0,38,0,0,0,0,0,0,3787\n",
      "177,52,0,555,0,1451,94,0,116,616,826,63,24,7,46,551,109,178,39,70,0,0,14,0,46,277,188,0,183,7,0,587,2,0,0,0,302,0,50,2,0,0,0,0,0,0,0,3368\n",
      "1749,0,112,202,0,2169,366,5,15,56,119,116,182,20,92,0,460,3,3,24,0,0,488,3,0,290,5,0,459,0,0,255,5,0,0,0,15,0,0,0,0,0,0,0,0,0,0,2787\n",
      "206,0,1130,223,4,1004,4,0,112,0,292,648,163,139,12,0,15,29,307,60,0,2,0,0,1,225,0,0,956,0,0,131,0,0,0,0,501,0,0,0,0,0,0,0,0,0,0,3836\n",
      "639,47,320,453,0,792,16,0,436,2,88,37,1,3,20,38,37,0,3,930,0,0,19,0,0,0,30,57,211,0,0,1213,275,0,0,12,1,0,0,19,0,0,0,0,0,0,0,4301\n",
      "189,35,87,1938,0,1890,98,67,65,0,584,73,3,240,1,58,8,3,249,15,156,5,4,6,0,48,0,0,26,0,0,295,12,0,133,5,33,0,0,0,0,0,0,0,0,0,0,3674\n",
      "571,0,1233,321,75,2339,14,87,227,0,185,274,0,15,2,6,297,0,54,3,28,0,107,0,0,20,0,0,259,0,0,19,29,0,0,7,26,0,0,11,0,0,0,0,0,0,0,3791\n",
      "1707,0,533,1448,0,707,1,0,9,0,11,740,3,2,46,23,22,167,653,12,0,0,68,0,0,0,0,1,375,0,0,23,39,0,0,193,0,0,0,1,0,0,0,0,0,0,0,3216\n",
      "91,55,380,480,0,1016,162,327,1271,497,23,22,239,0,31,0,21,1,22,3,1,1,0,321,0,305,0,0,700,0,0,59,77,0,0,166,9,0,0,1,0,0,0,0,0,0,0,3719\n",
      "418,9,46,911,86,541,1,41,490,0,758,0,321,23,20,1,78,84,65,338,0,1,3,41,2,634,1,7,224,0,0,93,1,0,0,0,140,0,0,19,2,0,0,0,0,0,0,4601\n",
      "609,0,453,1582,8,522,3,8,401,5,3,5,45,6,17,141,25,111,0,512,1,734,773,0,58,6,0,0,809,0,0,140,1,0,0,0,82,0,0,0,0,0,3,0,0,0,0,2937\n",
      "2642,38,69,692,1,917,73,86,223,9,15,83,98,59,532,1,0,29,19,109,2,0,46,0,0,37,0,0,446,0,73,19,1097,0,0,0,28,1,0,0,0,0,0,0,0,0,0,2556\n",
      "722,0,558,1078,112,829,448,48,1421,0,0,0,1,30,211,136,6,6,20,1,0,72,0,0,22,30,0,2,69,0,2,17,29,2,0,0,47,0,0,2,59,0,1,0,0,0,0,4019\n",
      "1312,189,7,579,0,2032,48,78,282,67,214,8,263,356,128,3,479,9,55,283,1,65,7,117,0,183,0,4,41,0,283,44,3,0,2,0,7,0,0,0,0,0,0,0,0,0,0,2851\n",
      "1065,136,0,1121,1,526,2,0,44,517,188,43,21,1,239,38,0,220,100,0,25,5,233,0,104,46,0,0,13,0,23,71,335,0,0,0,2,0,0,2,0,0,0,0,0,0,0,4879\n",
      "1512,15,63,643,22,1321,0,16,293,0,15,4,188,0,287,0,192,0,66,41,0,0,65,10,0,0,200,2,19,0,0,929,393,0,0,0,136,0,24,2,0,0,82,0,0,0,0,3460\n",
      "652,142,374,254,28,1077,145,1,286,0,12,7,0,0,31,0,20,191,35,1,342,81,34,0,0,3,3,0,58,0,18,5,2,0,0,0,67,0,29,0,0,0,1,0,0,0,0,6101\n",
      "1374,53,303,1283,352,1923,127,19,36,0,225,3,226,51,17,0,41,28,9,14,13,2,30,0,0,4,8,0,254,26,26,21,0,0,0,0,180,0,0,0,2,0,0,0,0,0,0,3350\n",
      "578,58,138,875,20,730,38,89,1694,0,170,0,0,483,0,0,280,6,235,119,0,0,0,359,0,2,0,0,324,0,0,98,22,0,0,0,3,0,0,0,0,0,41,0,0,0,0,3638\n",
      "418,0,25,1094,0,2274,14,46,300,0,14,71,15,3,251,63,155,71,557,6,0,0,342,0,0,0,0,219,623,0,0,121,119,0,0,1,421,0,39,0,1,0,0,0,109,0,0,2628\n",
      "561,0,8,419,0,858,188,239,112,22,221,188,646,0,3,205,362,6,232,44,21,9,222,0,0,0,0,2,149,0,0,269,20,0,0,0,277,0,0,0,0,0,0,0,0,0,0,4717\n",
      "533,141,2,24,0,766,20,28,135,9,31,0,17,133,466,378,6,0,93,238,0,192,13,0,19,2,207,634,978,0,0,192,43,0,6,0,102,0,0,0,0,0,0,0,0,0,0,4592\n",
      "266,0,46,293,8,2097,281,5,732,30,20,1572,2,39,12,1,567,4,33,208,0,0,209,0,0,0,0,69,40,0,0,22,1,0,0,0,5,0,0,200,0,0,0,4,0,0,0,3234\n",
      "1281,0,6,921,104,886,460,179,340,3,0,193,27,45,484,0,0,9,118,179,4,0,378,0,0,0,0,0,128,0,183,223,807,0,0,0,181,0,0,0,0,0,0,0,0,0,0,2861\n",
      "337,0,694,341,11,416,257,332,115,9,226,12,3,139,138,32,77,0,2,3,1,72,42,0,0,3,4,0,3,0,216,6,0,0,0,90,928,0,0,8,0,0,0,0,0,0,0,5483\n",
      "1131,0,1027,294,1,741,0,86,633,224,119,76,51,42,78,11,1,0,244,10,0,0,104,1,0,839,0,3,468,0,8,56,296,0,0,285,11,0,0,17,0,0,0,1,0,0,0,3142\n",
      "589,0,2,338,0,797,3,757,112,74,1,165,0,1,0,0,241,4,50,33,0,2,295,4,0,152,9,38,43,0,0,695,1,0,0,0,0,0,0,206,0,0,0,0,0,0,0,5388\n",
      "904,437,11,536,1,545,106,0,425,2,30,6,4,5,34,0,124,0,583,1,0,134,383,202,0,0,0,0,247,0,0,0,4,0,0,343,18,0,0,0,0,0,0,0,0,0,0,4915\n",
      "661,0,25,895,0,1051,57,119,602,0,9,132,448,12,83,0,107,14,259,38,0,0,179,89,12,8,0,12,394,0,40,179,806,0,0,0,16,0,1,0,0,0,0,0,0,0,0,3752\n",
      "1322,14,1216,1191,0,824,0,3,477,0,24,17,304,10,150,284,25,2,203,9,13,0,67,0,0,9,125,38,256,0,0,317,4,0,0,0,79,0,0,138,0,0,0,0,0,0,0,2879\n",
      "1034,0,106,45,0,842,23,4,347,0,37,4,44,1,77,0,72,101,687,131,547,16,282,0,3,3,956,1,71,0,0,181,0,0,0,12,96,0,0,0,0,0,35,0,0,0,0,4242\n",
      "521,0,247,68,1,618,14,1190,2232,437,57,34,6,0,0,0,126,81,1,316,20,3,118,0,61,104,0,0,30,0,0,18,334,0,0,108,6,0,0,1,0,0,0,0,0,0,0,3248\n",
      "798,0,21,242,0,1383,25,0,364,0,44,0,43,172,358,25,475,1,7,106,0,1081,347,1,0,0,2,2,5,42,0,127,1,0,0,18,31,0,0,0,11,0,0,0,0,0,0,4268\n",
      "931,2,151,750,0,843,5,4,782,21,3,143,2,17,17,0,0,0,28,41,43,75,1,0,0,10,49,0,443,0,0,856,2,39,0,11,2,0,0,6,0,0,0,0,0,0,0,4723\n",
      "373,0,128,1089,9,1176,23,139,305,12,13,2,9,0,80,0,14,55,211,8,17,256,44,3,0,0,1,0,1848,0,870,2,0,0,0,5,1,0,0,0,0,0,13,0,0,0,0,3294\n",
      "1378,24,11,877,89,1897,18,468,816,1,75,75,0,3,73,0,270,58,50,155,0,13,542,2,0,17,0,19,228,0,17,196,1,0,0,0,395,0,12,12,0,1,0,89,0,0,0,2118\n",
      "233,0,106,593,0,784,49,22,287,0,547,284,11,16,37,91,64,0,68,114,253,71,961,8,5,3,65,15,263,0,0,1,46,0,0,43,84,0,0,585,14,0,99,0,0,1,0,4177\n",
      "949,0,69,81,8,2254,127,14,14,179,93,0,514,10,441,1,37,379,0,0,0,0,0,0,0,1,0,0,16,605,354,150,281,598,322,0,4,421,0,0,0,0,3,0,0,0,0,2075\n",
      "1778,19,221,431,95,1309,282,0,663,0,0,344,51,35,727,0,24,137,192,0,0,0,85,0,0,3,0,0,139,0,0,6,0,13,0,65,125,0,0,4,0,0,0,0,0,0,0,3252\n",
      "700,88,234,1016,33,2054,40,106,72,0,27,1,40,65,106,0,133,2,0,60,485,389,468,2,0,16,80,0,73,0,0,807,26,0,0,0,61,0,0,0,0,0,0,0,0,0,0,2816\n",
      "505,1,80,3103,0,1203,17,184,160,0,285,0,371,36,8,0,113,1,225,0,0,0,91,0,67,52,11,0,323,0,226,8,0,0,0,0,0,0,0,52,0,0,0,0,0,0,0,2878\n",
      "1585,4,766,116,0,1511,8,0,0,0,9,29,107,353,27,0,428,0,121,2,224,0,202,0,2,6,1,0,263,0,0,159,11,0,0,0,3,0,0,102,0,0,0,0,0,0,0,3961\n",
      "620,0,393,239,0,1113,914,0,64,198,429,10,442,373,15,0,0,0,36,912,204,0,10,128,1,0,2,0,240,0,0,69,7,0,0,0,8,0,0,0,0,0,0,0,0,0,0,3573\n",
      "442,491,1591,408,0,1027,77,0,0,0,372,28,2,206,0,0,883,15,99,126,0,0,573,139,3,0,0,0,272,0,103,23,98,0,0,0,3,0,0,7,0,0,0,0,0,0,0,3012\n",
      "1449,8,157,82,0,496,2,6,1153,3,0,450,7,2,184,0,0,49,40,10,5,2,115,8,0,33,0,0,480,0,12,26,250,0,0,0,231,0,0,115,0,0,2,0,0,0,0,4623\n",
      "739,356,688,211,0,766,155,268,870,0,123,12,182,0,3,1,309,0,7,2,0,0,486,14,0,119,11,0,34,0,0,97,68,0,0,0,71,0,0,0,0,0,0,0,0,0,0,4408\n",
      "1214,0,125,344,195,422,44,0,1212,173,36,111,74,63,153,0,145,9,143,8,13,15,139,0,0,245,27,0,726,0,0,0,4,0,0,0,33,0,0,0,3,0,0,1,0,0,0,4323\n",
      "1497,733,24,810,0,1038,61,107,200,30,21,0,105,980,9,214,84,0,0,25,0,19,205,0,0,111,161,0,111,0,0,257,6,0,0,4,3,0,0,0,0,0,11,0,0,0,0,3174\n",
      "2074,1,843,544,0,1354,7,0,27,0,270,248,37,0,0,0,0,0,90,529,0,0,1,0,0,80,0,3,167,0,0,7,187,0,0,0,58,0,0,4,0,0,0,0,0,0,0,3469\n",
      "1332,0,495,615,0,1983,94,5,40,10,275,2,0,211,2,0,84,82,1034,42,0,4,36,0,1,0,2,0,1,270,3,953,125,0,0,0,26,0,63,0,0,0,1,0,0,0,0,2209\n",
      "751,0,727,1252,28,1183,292,713,302,0,456,28,27,0,172,23,8,31,5,23,1,1,596,37,37,2,0,0,229,0,4,142,36,0,0,0,6,0,0,13,0,0,0,0,8,0,362,2505\n",
      "1084,0,1902,687,0,504,186,621,253,2,210,0,127,211,0,1344,102,29,0,126,0,3,3,141,0,2,3,6,43,0,2,0,4,0,0,0,2,0,0,174,0,0,0,0,0,0,0,2229\n",
      "864,0,692,318,0,1083,7,41,329,362,0,73,140,2,160,0,0,0,2,4,2,0,7,0,0,0,4,128,236,0,0,0,4,0,86,495,3,0,0,10,6,0,16,0,0,4,0,4922\n",
      "918,19,0,239,0,1056,7,375,357,0,28,369,780,0,0,288,1,38,7,0,18,0,193,312,20,4,0,0,250,0,3,3,0,0,0,0,6,0,0,0,0,0,0,0,0,0,0,4709\n",
      "748,0,296,345,0,1768,36,0,16,0,616,0,759,45,114,146,60,2,466,523,1,22,228,66,3,18,750,0,50,0,0,94,31,0,0,7,24,0,0,2,1,0,9,0,0,0,0,2754\n",
      "1018,1,312,626,0,1478,229,10,205,64,49,71,0,268,195,0,810,39,53,41,131,0,208,128,0,0,0,10,191,0,0,132,66,0,0,0,0,0,0,1,0,0,0,0,1,0,0,3663\n",
      "1166,0,115,549,0,1842,0,148,221,169,433,30,314,4,22,0,42,32,74,194,16,0,21,0,0,0,0,0,256,0,0,203,183,236,0,0,0,0,0,1,0,0,0,0,0,0,0,3729\n",
      "408,0,14,855,0,377,703,286,126,234,0,7,343,151,85,0,19,126,321,697,535,3,0,0,45,1246,1,23,133,0,0,13,13,0,0,188,0,0,66,6,2,0,0,0,0,0,0,2974\n",
      "1507,0,715,90,0,1082,13,73,243,95,590,101,20,1112,237,194,0,27,316,381,0,71,27,0,0,0,0,0,203,0,0,38,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2865\n",
      "513,0,399,657,0,1207,241,424,355,0,596,123,7,95,0,60,45,0,158,0,784,0,568,31,0,22,97,1,162,0,2,96,97,0,16,6,0,0,16,0,0,0,0,15,0,0,0,3207\n",
      "2163,88,284,338,66,807,212,2,752,36,648,43,95,5,0,4,2,119,0,3,0,28,0,0,0,16,0,195,8,0,0,84,315,0,0,0,331,0,0,0,0,243,0,0,0,0,0,3113\n",
      "615,40,166,67,51,2187,17,6,242,14,0,61,0,2,14,10,3,2,320,51,61,0,145,0,0,0,62,0,51,0,30,16,6,0,0,0,126,0,0,0,0,84,5,261,0,0,0,5285\n",
      "619,875,82,526,19,698,209,0,314,0,113,0,127,1319,0,17,32,0,57,484,1,1,119,0,0,372,57,0,29,0,4,633,6,0,0,0,0,323,0,11,6,0,0,0,2,0,0,2945\n",
      "480,105,730,809,105,504,47,0,245,132,110,1189,3,1,119,176,262,263,2,66,0,81,48,1,0,0,177,1,343,0,3,264,8,0,0,13,129,0,0,0,1,0,0,0,0,0,0,3583\n",
      "1126,289,172,307,0,1998,134,0,12,1,66,20,119,14,60,0,0,17,48,3,0,508,34,1,0,32,0,26,106,0,25,12,30,0,0,0,114,0,0,6,0,0,0,0,5,0,0,4715\n",
      "1298,0,51,566,323,651,154,0,13,0,25,911,0,0,380,0,0,17,41,1694,0,161,28,2,5,0,205,0,1,0,14,296,160,0,0,0,10,0,0,13,0,0,0,0,0,0,0,2981\n",
      "607,2,7,233,0,2334,174,5,218,0,658,11,17,0,0,103,0,1,129,168,15,0,2,0,0,15,24,0,231,412,0,140,46,0,0,0,66,0,0,0,0,0,0,0,0,0,0,4382\n",
      "928,451,492,15,57,324,7,328,1159,0,3,7,2,0,71,7,4,158,0,70,0,0,133,0,4,1,323,0,85,0,43,73,283,0,0,0,1404,0,0,2,1,0,0,0,0,44,0,3521\n",
      "1360,0,1,118,154,894,36,564,201,24,113,105,2,5,242,32,90,51,121,284,205,74,286,216,218,0,46,54,388,7,17,1030,118,1,0,0,319,0,0,0,0,0,0,0,0,0,0,2624\n",
      "2852,0,36,578,12,376,130,176,55,0,38,1,2,65,28,0,37,0,44,61,0,5,6,4,0,0,13,14,670,0,1,101,36,0,0,525,26,0,0,1,0,0,0,0,0,0,0,4107\n",
      "1422,0,10,473,12,1085,103,21,5,1,435,0,73,9,63,179,1,4,74,149,68,94,109,13,0,20,25,0,91,0,0,118,58,0,56,17,897,0,0,0,0,0,0,0,0,26,0,4289\n",
      "2535,38,585,204,0,537,27,0,178,0,7,13,1,15,408,6,87,296,0,0,0,67,47,224,86,502,0,85,950,0,0,0,97,0,0,0,4,0,0,66,0,155,0,0,0,0,0,2780\n",
      "574,0,93,904,121,627,25,12,414,12,700,48,50,0,1045,1,66,9,14,3,9,6,40,0,186,0,0,66,0,0,0,390,0,0,0,30,112,0,19,0,2,0,0,0,0,0,0,4422\n",
      "200,46,172,135,0,2691,33,84,552,6,217,128,0,7,24,0,0,480,360,40,0,0,575,7,0,0,0,457,454,0,0,557,3,0,0,4,84,0,0,0,1,7,0,0,0,0,0,2676\n",
      "1003,0,440,265,6,225,204,51,320,35,121,3,110,15,1526,9,120,9,527,218,12,13,51,8,0,0,0,0,242,0,62,19,30,0,0,0,147,0,0,126,0,0,0,0,0,0,0,4083\n",
      "920,0,16,749,2,1117,637,53,183,0,20,0,405,1,363,0,1,0,61,61,0,3,2,1328,28,7,0,101,551,0,0,8,48,0,0,1,427,11,0,0,0,3,0,0,0,0,0,2893\n",
      "713,12,90,221,0,401,3,7,254,12,14,2,120,317,12,37,19,27,31,524,0,0,20,0,3,1,54,0,471,0,2,175,15,0,0,1,3,0,0,0,3,0,718,0,1,0,0,5717\n",
      "656,125,21,438,0,1332,72,0,89,1,306,23,26,9,30,2,1,0,2,322,773,6,716,43,0,18,0,2,69,269,71,468,1284,0,0,134,1,115,0,0,0,0,0,0,0,0,0,2576\n",
      "1637,0,91,687,0,2201,3,5,18,0,3,336,0,12,88,1,50,0,93,222,0,0,4,0,24,1,11,3,202,0,7,253,0,9,0,0,1,0,0,0,0,179,0,0,0,0,8,3851\n",
      "1271,5,178,893,0,719,61,72,342,0,61,99,58,0,7,37,3,155,12,46,0,8,86,150,0,3,125,0,13,0,55,101,201,0,0,0,1,0,0,0,531,0,0,0,0,0,0,4707\n",
      "1719,0,803,60,23,842,722,487,69,320,28,4,0,0,3,48,221,6,116,131,0,0,153,344,109,2,231,3,91,0,0,65,107,0,0,1,0,0,1,22,0,41,0,0,0,0,0,3228\n",
      "626,22,1,127,5,808,3,28,62,0,275,238,0,0,5,165,55,0,600,116,221,0,256,0,0,429,35,0,181,0,4,164,30,0,0,15,58,0,0,0,5,0,0,0,0,0,0,5466\n",
      "1289,0,0,818,0,1478,24,0,1219,0,249,0,415,1,9,0,7,0,26,168,0,67,681,143,0,5,3,5,267,0,23,349,4,0,0,0,1,0,0,2,2,0,0,0,0,0,0,2745\n",
      "296,0,473,404,139,2737,145,533,714,1,4,0,1,7,474,1,0,3,109,22,126,2,67,4,0,0,684,0,2,0,0,2,24,8,0,0,1,0,0,0,0,0,1,0,0,0,0,3016\n",
      "1014,68,12,773,129,1979,129,0,338,64,4,0,101,0,102,0,358,24,222,4,0,0,5,0,0,28,2,0,161,4,0,483,390,0,0,211,0,0,0,0,0,0,0,0,0,0,0,3395\n",
      "670,0,485,466,0,470,668,14,166,0,522,917,101,0,112,1,90,72,14,831,0,0,9,0,0,5,25,143,43,0,1,229,7,0,0,1,135,0,0,0,46,0,0,0,5,0,0,3752\n",
      "1558,1,89,253,0,865,220,0,547,1,14,0,28,0,81,5,4,280,2,232,0,32,801,0,0,65,0,0,1633,0,0,141,6,0,0,0,9,0,0,9,0,46,1,0,0,0,0,3077\n",
      "390,0,169,948,0,972,237,405,519,0,74,149,15,0,0,553,1,280,715,137,3,0,69,110,103,1,7,0,39,0,50,0,536,0,0,0,5,0,6,0,21,0,0,0,0,0,0,3486\n",
      "1011,5,1017,145,0,1484,3,19,415,42,87,27,59,195,0,59,45,1,14,0,0,0,112,0,57,94,0,146,122,0,408,77,425,0,0,0,3,0,0,0,0,0,0,0,0,0,0,3928\n",
      "683,0,775,1010,0,920,618,82,413,0,23,200,57,0,155,0,3,66,10,9,0,0,1,0,0,0,0,0,345,0,0,42,191,0,0,0,5,0,0,0,24,0,0,114,0,0,0,4254\n",
      "829,0,142,74,0,1363,21,55,267,76,30,12,374,908,970,0,103,65,3,559,852,2,144,0,0,35,0,0,124,0,272,143,4,0,0,0,13,0,0,0,0,0,105,0,1,0,0,2454\n",
      "1422,63,72,628,7,1572,38,43,42,118,85,478,0,0,5,627,77,6,100,250,0,0,0,29,0,8,0,0,844,0,0,136,155,0,0,0,41,3,0,6,0,0,0,0,0,0,0,3145\n",
      "1755,571,120,16,0,980,20,676,207,0,138,290,45,10,95,1,3,16,571,29,0,9,82,0,0,70,0,9,645,1,7,25,397,0,35,6,4,0,0,21,1,0,0,0,0,0,0,3145\n",
      "1391,0,226,493,14,1631,29,550,56,0,49,409,8,2,10,35,0,12,24,93,0,13,94,0,0,0,0,647,418,0,49,47,18,0,0,0,3,0,0,1,0,0,0,0,0,29,0,3649\n",
      "1321,5,41,1402,0,2246,6,112,370,12,24,73,3,3,525,1,93,89,24,598,0,286,584,11,18,11,1,19,199,0,11,0,298,0,0,10,31,0,0,0,58,0,3,0,0,0,0,1512\n",
      "1179,0,42,480,0,1437,210,0,27,178,5,353,25,0,1,103,7,68,126,32,0,1,313,0,0,43,14,5,246,1,0,181,41,0,0,0,477,0,72,0,0,0,0,0,0,0,0,4333\n",
      "1604,2,19,70,0,473,159,0,649,0,155,5,0,0,15,2,4,3,14,86,0,5,36,0,0,1,0,0,42,0,21,249,30,0,0,0,519,0,0,300,0,0,0,0,0,0,0,5537\n",
      "554,0,205,79,41,1768,107,4,51,0,72,453,0,0,116,0,0,852,1152,35,0,0,10,0,2,1,0,1,11,6,0,141,113,0,0,0,179,0,0,132,16,0,0,0,0,0,0,3899\n",
      "479,0,165,295,0,829,11,58,310,163,60,111,0,66,5,174,101,8,56,10,0,0,591,0,13,6,0,4,223,0,0,76,111,0,48,0,5,0,18,0,0,0,0,0,0,0,0,6004\n",
      "1061,0,165,342,0,1452,17,2,8,0,12,36,0,57,346,0,35,0,83,31,31,0,103,1007,0,0,1,1,45,0,61,608,3,12,0,0,23,0,0,0,0,0,0,0,0,92,0,4366\n",
      "203,0,620,223,0,3086,448,60,268,0,72,48,115,0,3,2,52,75,635,7,30,11,117,62,0,0,0,253,325,0,0,8,691,0,0,88,1,0,0,0,0,0,0,170,0,0,0,2327\n",
      "930,479,78,193,2,896,49,39,46,8,172,86,14,71,61,10,3,7,101,3,4,0,846,21,0,0,0,14,751,0,0,377,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,4707\n",
      "855,286,861,291,127,1157,194,0,61,81,184,0,13,0,62,109,0,0,119,338,0,181,321,0,0,0,77,0,163,0,21,37,21,0,0,0,97,0,1,0,0,67,0,0,0,0,0,4276\n",
      "306,3,315,327,20,1200,1156,0,586,258,325,9,256,56,82,0,2,54,27,101,0,7,123,0,51,2,1,4,746,0,18,3,11,0,0,0,1,0,0,0,3,0,9,0,0,4,0,3934\n",
      "1068,34,22,469,0,1756,135,0,407,32,385,9,8,59,0,2,1,5,10,11,5,0,83,66,0,0,0,0,29,0,831,2,0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,4554\n",
      "336,3,875,836,43,847,384,0,379,0,1,1020,20,0,505,21,111,8,0,149,0,0,37,0,35,75,0,0,286,0,19,571,15,0,0,58,0,0,0,10,0,0,0,0,0,0,0,3356\n",
      "2123,0,1960,30,7,630,89,0,194,0,16,1,2,93,0,4,0,0,442,78,1,0,65,0,0,1,51,0,144,0,7,508,114,2,0,42,0,0,1,0,0,0,0,48,0,0,0,3347\n",
      "1347,88,1320,460,9,561,38,0,314,4,186,8,14,0,70,29,98,855,42,2,0,62,125,5,0,83,0,103,57,0,0,6,0,0,0,0,524,0,26,0,33,0,0,0,0,0,0,3531\n",
      "906,33,7,463,1,1108,19,21,0,332,30,0,10,4,295,0,56,63,103,1,10,0,0,43,0,27,186,157,168,0,132,116,11,0,0,0,228,0,0,0,0,0,1480,0,0,0,0,3990\n",
      "622,0,5,133,0,246,1,50,1678,0,1,33,107,256,22,0,25,1,15,48,4,32,1370,1,0,0,650,0,291,0,5,4,0,0,0,1,3,0,15,0,28,1458,0,112,0,0,0,2783\n",
      "1252,57,239,21,1,1367,27,349,392,88,71,8,10,2,0,10,414,475,43,53,0,0,923,9,53,0,0,25,0,0,0,204,10,0,0,0,3,0,0,2,0,0,0,0,0,0,0,3892\n",
      "1602,0,116,65,1,1050,230,0,1440,0,4,3,159,13,0,0,1,0,0,1149,0,25,373,1,0,169,0,330,74,0,4,8,1,0,0,0,2,0,0,0,0,0,0,20,0,0,0,3160\n",
      "1154,0,11,283,0,2135,275,340,8,50,0,28,265,43,73,0,159,0,130,63,5,62,939,6,345,140,0,0,18,0,1,227,59,0,0,2,52,0,0,0,0,0,0,0,0,294,0,2833\n",
      "2506,0,362,1352,0,950,1,137,239,0,0,29,133,0,9,0,269,1,84,11,2,4,540,0,0,0,0,127,44,0,31,102,33,0,0,0,46,0,0,0,0,0,0,0,0,0,0,2988\n",
      "1006,4,294,110,0,1161,34,87,1060,15,0,0,583,151,50,388,5,1,218,55,0,2,123,0,57,8,110,10,22,0,1,607,0,0,10,49,289,0,79,4,0,0,217,0,0,47,0,3143\n",
      "826,82,4,419,2,763,0,0,37,9,73,10,28,17,0,0,21,16,2,255,0,38,1027,0,12,21,0,0,487,0,3,191,311,0,0,6,651,0,0,3,0,0,2363,21,0,0,0,2302\n",
      "1125,0,278,201,0,1810,167,0,830,139,103,71,1,47,274,69,252,1,170,5,0,211,116,126,0,0,1,1,30,7,19,98,59,0,0,0,1110,0,0,0,0,0,0,0,0,0,0,2679\n",
      "807,0,307,274,1,1080,4,192,123,19,10,0,309,0,115,29,184,6,874,20,0,0,219,0,0,316,19,0,163,0,0,691,0,0,0,0,14,0,74,92,0,0,0,0,0,0,0,4058\n",
      "842,0,604,685,23,673,960,54,18,0,76,134,36,5,0,0,9,35,115,229,8,0,9,0,0,662,0,10,186,0,0,3,0,0,0,103,652,0,129,0,37,0,45,0,0,0,0,3658\n",
      "1216,0,3,1205,0,1130,276,6,569,1,3,6,0,158,260,2,11,67,46,0,0,539,120,373,0,0,0,0,4,0,0,29,152,0,0,2,1036,0,3,0,0,0,33,0,0,0,0,2750\n",
      "374,2,915,570,3,899,144,12,161,272,122,2,0,0,225,0,267,0,424,170,18,25,185,83,0,0,0,0,1639,0,21,46,0,0,0,0,49,0,0,5,0,0,0,0,0,0,0,3367\n",
      "1270,0,155,164,0,994,19,0,253,0,134,0,172,143,0,5,0,329,71,451,0,0,158,12,0,0,0,4,305,0,0,0,0,0,100,0,130,0,0,1,139,0,0,0,0,0,0,4991\n",
      "1744,7,111,494,123,378,40,0,541,6,799,419,0,0,124,42,0,2,58,89,40,7,36,0,0,0,0,2,64,0,56,15,9,0,0,0,487,0,5,0,0,0,0,0,0,0,0,4302\n",
      "563,69,137,420,493,693,14,0,58,396,364,0,35,76,17,0,31,5,154,752,111,19,268,0,0,0,0,5,6,0,454,111,76,0,0,0,1,0,0,0,0,0,17,0,0,0,0,4655\n",
      "1609,78,384,71,0,919,5,22,829,17,639,77,0,123,21,0,38,2,76,22,17,253,159,0,0,0,25,196,307,0,41,175,374,0,0,0,3,0,4,0,0,0,0,0,0,0,0,3514\n",
      "3410,17,85,151,127,633,186,31,109,0,3,13,0,21,3,63,80,1,5,0,815,524,200,0,104,29,0,0,416,167,112,1,0,0,0,44,9,0,0,0,1,0,0,0,33,0,0,2607\n",
      "2025,0,144,728,0,598,203,25,28,0,25,235,158,1,130,1,123,28,628,6,892,2,69,4,0,0,0,0,391,0,8,167,54,0,0,0,9,0,0,13,4,0,1,0,0,0,0,3300\n",
      "665,0,44,232,111,426,1128,40,51,76,51,801,255,63,1056,113,24,103,0,4,26,0,1505,354,0,9,0,55,129,0,2,24,24,0,0,0,121,0,81,0,0,0,0,12,0,0,0,2415\n",
      "614,0,64,228,0,916,144,67,306,18,0,88,19,0,93,6,58,4,137,27,0,0,50,5,54,15,0,331,1344,601,154,223,169,0,0,0,367,0,0,1,2,0,0,163,0,0,0,3732\n",
      "1440,0,158,248,0,1675,16,2,52,0,642,3,5,141,42,8,180,6,673,364,0,40,41,0,0,4,0,395,73,0,34,60,0,106,0,130,110,0,0,0,0,0,0,0,0,0,0,3352\n",
      "1203,22,126,433,94,1666,550,85,141,0,419,46,90,7,103,0,8,120,188,0,271,33,0,1,201,89,1,0,329,0,26,359,0,0,6,1,2,1,0,79,0,0,0,0,0,0,0,3300\n",
      "112,0,295,1016,0,1814,1,114,816,0,93,363,99,113,27,0,158,1,304,20,0,0,0,75,0,0,0,0,29,0,53,256,1064,1,0,3,0,0,0,81,0,0,0,0,1,0,0,3091\n",
      "496,0,7,10,0,1633,57,14,1017,0,529,1300,9,0,369,217,302,17,209,243,0,9,55,11,0,0,0,158,24,0,2,0,1030,0,0,0,8,0,0,0,0,0,0,0,0,0,0,2274\n",
      "1265,0,131,379,16,1632,27,0,307,0,227,11,106,0,254,0,419,4,13,21,0,2,105,17,0,0,0,0,1015,0,0,10,58,0,0,0,1,0,0,2,7,0,0,0,0,0,0,3971\n",
      "790,16,847,419,3,1454,82,26,1017,1,13,33,0,0,13,0,79,186,50,50,11,67,163,0,9,0,2,23,110,0,7,4,310,0,0,0,13,0,0,0,0,0,1,0,0,0,0,4201\n",
      "718,0,3,431,0,971,235,133,1,1,8,286,238,1147,125,12,57,734,150,194,0,0,344,12,0,1,0,0,447,0,0,20,418,30,0,0,141,0,0,0,0,0,0,0,0,0,0,3143\n",
      "1468,0,48,772,90,923,146,297,213,0,32,1,22,60,13,0,161,324,252,0,0,0,46,20,0,14,0,390,0,0,0,18,0,0,0,0,325,0,0,54,0,0,193,0,0,0,0,4118\n",
      "645,0,501,852,59,688,318,163,315,15,263,14,33,0,236,56,86,0,9,1,0,2,158,107,0,655,0,45,38,0,0,19,6,0,0,0,122,0,0,5,0,1,1,0,0,0,0,4587\n",
      "907,1,192,730,0,1783,144,14,900,7,46,323,27,0,171,0,19,49,426,3,1,1,31,0,0,446,221,6,266,0,0,180,4,0,0,378,27,0,0,0,0,0,0,50,0,0,0,2647\n",
      "434,63,90,1013,345,974,546,0,332,32,98,0,2,100,415,20,16,0,35,63,1,1,1231,1,0,0,0,0,13,0,15,97,313,0,0,0,0,0,0,0,0,0,54,0,0,0,0,3696\n",
      "1509,0,224,261,0,1710,639,0,153,201,872,15,0,10,20,0,48,0,1,26,4,0,0,0,0,0,51,0,323,0,0,9,3,0,0,5,1,0,0,0,0,0,0,0,0,0,0,3915\n",
      "790,484,57,60,474,1181,6,0,190,529,971,136,29,0,298,2,6,2,372,496,0,1,267,48,4,6,0,0,95,0,0,155,208,0,0,24,85,0,0,0,0,0,0,0,0,0,0,3024\n",
      "1099,15,14,66,0,2675,200,9,398,3,31,160,43,20,35,72,236,8,240,345,27,221,92,31,0,1,2,39,70,0,55,1,265,0,114,0,76,0,0,0,0,59,0,0,0,0,0,3278\n",
      "612,269,103,621,0,2229,46,239,17,0,0,114,6,136,231,98,10,2,370,17,13,459,80,8,0,127,0,0,2,0,63,6,61,0,0,231,2,12,2,0,0,0,0,0,0,0,0,3814\n",
      "440,0,612,929,6,1449,27,15,59,0,752,535,122,1,2,45,0,194,444,449,222,0,232,460,2,5,0,2,639,1,0,360,60,36,0,1,217,0,0,94,0,27,0,0,0,0,0,1561\n",
      "2452,22,178,909,0,400,88,12,100,11,51,103,0,156,57,672,335,24,33,39,12,147,374,1,26,0,0,414,27,0,0,61,289,0,0,0,46,0,0,0,0,0,0,0,0,0,0,2961\n",
      "1591,0,5,126,3,1245,175,4,472,2,2,4,0,0,491,22,4,26,0,55,0,0,5,0,46,8,0,43,60,0,0,56,227,0,0,60,670,0,0,53,181,0,0,0,0,0,0,4364\n",
      "1074,7,1387,215,5,715,15,37,313,0,131,0,318,0,25,1,7,0,117,5,31,0,551,2,0,112,0,39,369,0,2,410,3,0,0,0,3,0,0,0,25,1,0,0,0,0,0,4080\n",
      "915,2,237,280,0,1429,604,0,988,47,530,2,0,106,10,0,685,0,34,0,0,529,571,0,0,0,3,4,455,2,0,82,0,0,0,0,13,0,0,0,45,0,0,0,0,0,0,2427\n",
      "488,0,113,241,29,1266,47,14,182,0,7,102,61,101,20,6,70,169,364,116,0,1,19,97,0,0,0,5,52,0,38,1108,3,0,0,1,3,0,2,2,68,0,0,0,0,0,0,5205\n",
      "539,45,1105,1636,0,287,8,1,645,0,358,7,34,6,285,22,1,0,22,224,0,1,99,2,0,5,0,0,194,0,0,1,474,0,0,5,44,0,0,0,0,0,0,0,0,1,0,3949\n",
      "662,32,173,1973,223,684,11,13,525,0,231,4,33,1,349,101,1,20,215,27,0,56,668,26,0,0,99,0,25,0,194,201,0,1,7,0,0,0,0,0,0,0,0,0,0,0,0,3445\n",
      "753,0,29,842,44,595,39,0,345,0,24,31,0,15,174,9,499,1,1,3,218,2,35,11,272,0,0,0,176,0,0,9,87,0,0,89,13,0,0,0,0,0,0,0,0,0,0,5684\n",
      "1620,0,71,142,0,1413,828,27,433,0,781,15,0,443,23,0,0,6,128,325,28,0,157,0,2,11,0,0,148,0,5,58,136,0,0,1,12,0,211,0,0,0,0,0,0,0,0,2976\n",
      "199,1,114,971,0,1558,337,0,788,0,53,44,7,237,42,6,23,125,343,417,3,44,27,0,2,15,0,0,31,0,0,1,338,0,0,56,28,0,0,0,0,0,0,73,0,0,9,4108\n",
      "1094,0,118,477,0,1522,106,1,878,83,133,39,4,0,54,0,97,19,3,0,2,406,156,0,0,105,0,0,672,0,0,50,9,0,0,227,22,0,0,0,1,0,0,20,0,4,0,3698\n",
      "1073,0,1083,137,6,1352,81,9,78,0,52,0,0,282,13,0,404,45,58,0,0,0,310,10,0,1,0,37,436,0,0,211,200,0,0,0,0,0,0,9,0,1,0,0,0,0,0,4112\n",
      "831,0,198,97,151,1117,337,0,117,0,90,56,307,1,75,0,1,28,170,0,0,0,554,0,11,2,0,0,201,0,0,101,27,0,165,0,21,0,0,0,0,0,0,0,0,0,0,5342\n",
      "900,110,418,455,5,2035,150,49,73,0,0,178,203,0,0,0,80,4,405,110,0,221,12,22,0,0,0,779,59,0,2,777,15,0,0,0,12,0,1,0,25,0,0,0,0,0,0,2900\n",
      "636,0,608,49,7,1144,160,116,1700,48,585,37,15,0,282,7,141,77,130,2,1,0,388,17,0,9,0,69,37,0,76,133,108,0,0,8,0,0,4,0,0,0,0,0,4,0,0,3402\n",
      "1365,0,33,496,0,349,157,0,1269,2,7,4,165,202,133,0,191,9,221,0,0,0,1259,0,0,2,2,28,71,0,0,4,1460,0,0,0,23,0,0,0,60,0,1,0,0,0,0,2487\n",
      "1149,108,285,926,1,789,16,110,49,8,8,1,5,42,739,0,4,103,0,568,6,0,4,0,0,273,0,4,192,0,15,55,40,0,0,1,13,0,0,0,0,0,0,0,0,0,0,4486\n",
      "1148,15,463,463,3,1166,382,0,425,2,0,0,69,2,47,69,0,10,37,1,0,0,134,0,0,6,2,12,59,0,0,1061,7,0,0,0,33,0,0,0,0,0,0,0,0,0,0,4384\n",
      "1670,46,4,348,0,1462,42,15,110,13,1,22,230,15,16,0,1,116,31,34,521,0,210,258,0,4,144,499,340,0,83,26,0,0,0,0,0,0,4,12,0,0,0,0,0,0,0,3723\n",
      "604,0,112,266,0,917,218,7,315,1,23,922,463,0,36,1,224,0,1,40,0,83,279,42,0,0,29,0,267,0,301,645,102,0,0,1,0,0,8,16,0,0,9,0,0,0,0,4068\n",
      "1923,32,32,343,8,858,96,0,472,0,16,12,64,1,47,1,0,1,3,1398,570,175,0,0,0,0,0,1,17,0,0,44,51,0,0,30,671,0,3,3,0,108,0,1,0,0,0,3019\n",
      "465,0,852,688,0,1633,102,240,375,0,4,72,90,355,34,51,19,0,1,19,0,53,450,0,0,0,17,0,6,4,0,120,34,0,0,0,1059,0,0,0,0,0,0,0,0,14,0,3243\n",
      "886,0,186,79,1,360,0,116,256,0,316,417,87,477,11,156,108,67,93,248,0,0,13,14,0,16,3,70,18,0,0,455,91,0,0,0,183,0,0,0,0,0,0,0,0,0,0,5273\n",
      "963,0,150,776,51,977,266,0,474,0,66,9,13,5,391,0,4,13,0,5,3,244,52,0,1,0,0,0,92,144,0,12,53,0,0,0,8,0,5,0,0,0,0,0,0,0,0,5223\n",
      "2492,106,29,363,0,793,144,18,229,0,156,35,1,0,5,12,2,148,60,369,1,151,41,0,2,137,0,247,801,0,0,200,15,0,0,0,58,0,1,0,2,3,0,0,0,0,0,3379\n",
      "327,11,4,48,3,1783,949,366,38,0,20,490,95,0,25,15,40,52,9,159,0,0,3,160,0,0,32,0,208,1,11,40,16,0,0,2,44,0,13,0,0,0,73,0,0,0,0,4963\n",
      "337,0,1,455,15,1740,12,0,264,1,46,76,0,72,142,0,1,0,369,790,805,132,27,0,0,81,0,12,0,0,1,448,76,0,0,0,323,0,0,0,0,0,0,0,0,0,0,3774\n",
      "785,64,1035,215,7,1787,237,0,145,118,8,100,0,9,35,18,0,34,24,143,5,0,329,109,0,0,0,0,421,0,31,351,1,0,0,366,8,0,15,0,0,0,0,0,0,0,0,3600\n",
      "312,0,83,810,0,300,37,14,152,0,154,46,0,144,24,10,1,40,375,6,0,0,42,29,0,84,0,1,37,0,0,26,343,98,0,0,93,0,0,0,0,0,120,0,0,0,0,6619\n",
      "1111,14,439,97,1,1043,2,53,1658,35,67,56,0,18,0,0,10,29,6,60,0,0,18,1,0,0,0,0,25,0,41,46,297,0,0,0,59,0,376,2,0,0,1,0,0,0,0,4435\n",
      "1682,0,104,7,0,1791,927,0,33,0,11,0,0,57,6,24,2,73,0,242,64,72,396,0,5,0,16,2,767,0,0,1101,63,0,0,0,324,0,1,74,0,0,0,0,0,0,0,2156\n",
      "1599,348,367,93,0,1423,380,251,169,2,9,0,31,0,30,0,1,0,41,27,1,27,398,2,0,46,0,0,310,0,0,296,1,0,0,0,55,0,0,1,0,0,2,51,0,0,0,4039\n",
      "627,0,216,303,0,469,320,180,349,3,0,0,180,1,0,1,156,0,3,533,0,118,26,0,0,0,0,0,1017,0,178,54,64,0,0,0,0,0,0,0,213,0,0,0,0,0,0,4989\n",
      "630,0,440,447,117,300,86,24,237,269,127,49,106,4,372,87,0,23,1672,142,24,0,1043,68,0,4,9,0,15,0,0,319,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3380\n",
      "1299,144,273,341,0,824,560,1,185,2,423,39,1,86,5,0,12,33,10,9,2,48,68,0,0,277,7,0,73,0,413,66,35,0,0,3,1,0,0,0,0,0,0,0,0,0,0,4760\n",
      "410,0,207,198,0,2825,32,8,495,0,75,201,1,195,22,0,315,0,182,32,0,1,561,1,126,2,0,0,180,0,0,1,0,0,0,0,5,23,1,7,0,0,0,0,0,0,0,3894\n",
      "1807,0,42,30,4,1057,420,35,269,5,54,0,201,10,52,0,49,63,360,0,625,9,10,0,0,3,0,5,84,0,0,14,73,30,0,0,0,0,0,0,0,1,0,0,0,0,0,4688\n",
      "935,7,282,174,250,712,442,5,168,2,92,0,6,152,13,327,12,0,292,0,1,406,0,12,0,0,0,0,945,0,0,730,0,0,0,0,38,0,0,0,0,0,6,93,0,0,0,3898\n",
      "869,13,0,815,0,2231,0,18,91,41,0,4,143,0,7,0,4,0,98,353,0,1,0,0,24,0,0,249,335,0,217,13,4,0,0,21,212,0,0,0,0,0,0,0,0,0,0,4237\n",
      "770,110,63,30,2,655,28,0,112,0,8,190,16,96,76,0,16,0,7,191,0,201,308,0,4,18,26,0,369,0,0,262,26,0,0,0,127,0,136,0,0,0,0,0,0,0,0,6153\n",
      "833,0,628,267,41,951,189,0,348,0,43,1,2,0,128,12,0,7,24,0,4,159,17,0,0,0,0,0,41,0,322,10,0,0,0,0,55,0,0,0,0,0,0,0,0,0,0,5918\n",
      "293,436,29,1513,30,1895,38,0,41,19,11,264,46,48,96,0,140,0,45,88,0,34,24,159,106,5,0,0,421,0,4,697,61,0,0,0,0,0,0,28,35,0,0,0,0,0,0,3394\n",
      "967,0,5,387,662,2190,347,3,330,0,36,4,0,215,30,0,34,131,85,4,202,0,0,0,0,384,0,0,191,22,0,112,0,0,0,0,100,0,1,1,0,0,0,0,0,0,0,3557\n",
      "161,0,12,645,2,571,163,0,227,0,28,37,16,1,417,39,1,39,685,138,0,6,142,0,1,0,2,57,753,0,20,318,0,0,0,7,17,6,0,17,0,1,0,0,0,0,2,5469\n",
      "406,0,6,796,24,1886,22,8,153,30,885,12,19,2,345,627,274,0,415,72,0,21,172,46,33,0,21,107,17,0,0,345,185,173,0,0,0,0,1,46,0,0,15,0,0,0,0,2836\n",
      "522,1,98,78,29,1206,142,873,569,0,13,1,10,36,45,94,126,1,0,119,0,0,347,0,0,0,0,399,113,0,0,255,0,0,0,0,50,0,0,0,0,0,0,0,0,0,0,4873\n",
      "1126,0,516,125,35,2657,88,0,43,0,95,9,3,2,258,279,0,0,70,2,0,0,0,22,0,172,0,17,335,0,0,283,2,0,0,0,2,0,0,1,0,0,2,0,0,0,0,3856\n",
      "1210,0,116,724,17,827,44,248,818,0,176,375,29,0,8,37,40,2,57,151,62,0,564,16,0,2,0,1036,50,0,140,0,0,0,0,35,222,0,36,0,0,0,0,0,0,0,0,2958\n",
      "1885,7,628,651,50,1447,66,28,174,0,62,30,81,0,14,88,348,75,69,324,0,76,47,60,0,1,0,26,28,0,348,1,184,0,0,0,25,0,0,0,0,0,0,0,0,0,58,3119\n",
      "656,7,72,51,9,2707,481,12,175,6,20,17,21,283,33,563,0,1,33,20,13,0,5,261,0,0,1,4,268,0,0,240,28,4,0,0,103,0,0,4,0,0,0,0,0,0,0,3902\n",
      "1192,8,318,254,193,716,1288,2,32,0,12,3,0,63,61,0,55,7,1,138,0,0,45,7,0,19,528,0,17,0,314,61,3,56,0,0,98,0,0,0,0,0,0,0,0,0,0,4509\n",
      "394,0,95,400,2,2224,92,4,401,4,602,0,2,0,130,0,96,0,29,44,119,3,592,48,3,0,4,0,126,0,38,1,76,0,90,0,3,0,0,0,0,0,0,0,0,0,0,4378\n",
      "818,0,23,498,0,967,294,218,40,15,10,15,0,21,21,1,39,0,0,24,0,0,120,7,0,2,568,0,652,0,249,501,0,0,0,487,23,0,0,0,0,0,0,0,0,0,0,4387\n",
      "756,0,107,548,0,911,10,0,364,249,0,140,145,11,467,0,281,403,993,80,0,51,1,0,0,3,1,0,9,0,0,120,0,0,0,4,119,0,0,36,1,0,0,0,0,0,0,4190\n",
      "1690,0,5,112,0,1214,57,33,42,0,212,7,89,103,27,0,11,0,37,100,1,0,5,149,5,0,0,0,278,0,42,11,5,4,0,0,153,0,0,2,0,282,0,3,0,0,0,5321\n",
      "887,0,115,246,20,1021,12,111,103,72,52,123,0,1,263,0,135,1,556,275,250,150,661,0,0,39,487,4,71,0,1,396,519,0,0,0,681,0,99,1,0,2,0,0,0,0,0,2646\n",
      "704,16,682,532,33,929,0,2,274,12,17,0,113,23,7,9,1,195,46,1,0,0,13,0,85,2,0,0,446,0,1,191,296,0,0,0,1024,0,0,69,81,0,0,0,0,0,0,4196\n",
      "2505,0,86,46,3,1043,119,27,180,251,2,23,340,0,333,0,4,135,42,0,0,335,10,0,443,7,0,0,110,0,4,30,465,0,0,0,32,0,0,0,180,0,0,0,0,0,0,3245\n",
      "327,8,336,587,0,899,0,5,56,0,30,0,44,1,6,0,70,78,224,85,0,0,79,49,0,1,0,0,469,154,72,116,24,2,0,1,581,0,0,0,0,0,0,0,0,0,0,5696\n",
      "517,0,103,869,39,1600,40,46,100,6,119,3,7,253,145,6,36,0,4,212,0,0,17,0,0,69,0,5,7,363,0,21,413,0,0,0,262,0,0,0,0,0,0,0,0,0,0,4738\n",
      "753,0,401,300,0,954,4,237,482,0,824,480,210,0,2,324,2,0,0,6,37,21,93,186,5,0,0,0,117,0,4,503,6,0,0,0,252,0,0,0,12,0,0,0,0,0,0,3785\n",
      "729,26,497,44,10,968,16,281,270,1,315,12,3,460,19,52,59,690,46,297,8,2,154,0,944,384,0,5,147,0,0,71,1,0,0,0,343,0,0,19,0,0,36,0,0,0,1,3090\n",
      "1223,0,204,171,0,1401,437,38,281,91,284,0,55,0,4,71,138,88,2,78,0,10,10,166,0,0,0,0,66,0,0,13,21,0,0,0,132,0,0,0,0,0,5,0,0,0,0,5011\n",
      "1148,30,266,678,0,1222,526,569,1289,0,20,53,0,0,62,39,44,0,642,0,0,0,435,0,0,0,0,1,64,0,0,385,183,0,0,0,74,0,0,2,0,0,0,0,0,0,0,2268\n",
      "1087,0,97,443,0,2190,142,273,148,30,57,0,21,89,502,0,214,3,18,240,134,153,12,0,0,0,0,0,103,0,0,23,0,0,0,0,8,0,7,0,0,0,0,0,0,0,0,4006\n",
      "1384,75,1734,589,0,1332,152,1,211,697,4,3,111,58,3,40,0,0,27,67,16,39,3,0,4,79,0,8,82,0,0,84,17,0,0,0,122,0,0,0,8,0,0,0,0,0,0,3050\n",
      "661,0,981,139,0,871,27,201,66,0,389,87,198,0,286,2,190,3,13,0,0,47,471,7,0,100,676,0,113,0,0,11,5,0,0,0,152,0,0,2,0,0,0,0,0,0,0,4302\n",
      "1501,14,1029,137,29,1546,245,1,92,8,22,134,65,0,70,0,152,24,2,11,0,0,8,0,79,0,0,97,196,0,0,9,571,0,0,0,18,0,0,0,0,0,0,0,0,0,0,3940\n",
      "1423,167,74,206,0,350,244,1,140,41,10,0,19,0,9,1,482,62,82,9,91,773,73,0,0,807,0,49,11,0,14,6,0,0,0,135,353,0,0,0,0,0,733,0,0,0,0,3635\n",
      "183,0,124,272,52,1898,361,2,135,0,1,0,104,0,57,17,2,1180,322,424,0,0,84,2,0,0,0,0,258,3,7,261,112,0,0,0,188,0,0,0,0,0,0,0,0,0,0,3951\n",
      "545,8,64,1109,182,691,763,0,242,102,437,1,0,0,2,1,1222,77,606,12,1,62,123,0,0,0,0,1,496,29,0,71,34,0,0,0,134,0,278,0,0,0,0,0,0,0,0,2707\n",
      "647,0,26,435,16,3785,979,355,80,0,7,363,7,0,4,0,58,2,254,186,0,0,39,0,0,54,0,0,120,0,3,5,2,0,0,0,84,0,0,25,0,0,0,0,0,0,8,2456\n",
      "3960,45,122,388,6,921,153,41,4,11,124,0,3,64,675,1,0,0,57,35,3,0,12,0,0,0,0,14,246,0,4,5,6,0,0,0,172,0,0,0,0,0,0,0,0,0,0,2928\n",
      "1047,0,9,206,37,1013,435,134,360,228,4,0,162,0,95,159,833,35,2,301,0,0,212,0,0,478,0,0,15,0,0,30,2,7,0,0,465,0,0,214,14,0,0,0,6,0,7,3490\n",
      "1907,54,45,29,2,2607,546,1,75,0,152,198,1,92,0,0,13,4,14,2,0,0,40,253,25,5,30,0,99,0,2,6,281,0,0,192,135,0,0,0,0,0,56,0,0,0,0,3134\n",
      "1123,0,158,68,58,1290,95,66,311,734,1,298,0,2,13,1,2,0,514,0,43,0,485,0,0,53,1,0,9,0,32,8,88,0,0,0,11,0,0,0,0,0,0,0,0,0,0,4536\n",
      "1087,0,63,807,1,1786,19,3,282,1,28,268,0,0,39,1,1,190,144,20,0,37,55,0,0,1,0,0,27,0,0,20,956,0,0,0,12,0,0,0,0,0,0,0,0,0,0,4152\n",
      "477,2,196,601,12,411,249,2,540,201,140,537,21,0,906,0,0,6,449,0,0,2,136,209,0,117,0,96,1,0,0,327,1,0,0,3,49,0,0,0,0,0,0,0,0,0,0,4309\n",
      "176,0,7,775,0,2240,1,1,454,0,0,1,0,80,0,115,378,0,397,98,0,34,126,0,0,3,0,0,766,0,0,142,10,0,0,0,3,0,0,0,0,0,0,0,0,0,0,4193\n",
      "713,97,160,215,0,1594,120,3,484,19,12,129,148,2,0,0,351,1,1,0,12,77,52,20,0,0,101,0,246,0,0,71,0,0,0,33,86,0,0,0,0,0,126,14,0,0,0,5113\n",
      "820,2,382,1016,0,1176,167,42,116,76,89,31,760,0,0,106,529,0,62,273,0,0,24,0,0,0,0,20,36,0,0,296,68,0,0,0,81,0,0,1,3,0,4,0,0,0,0,3820\n",
      "1655,0,294,246,285,1009,38,59,75,0,203,29,0,1,18,16,424,294,186,259,12,0,11,44,0,44,0,0,104,0,0,9,0,0,0,25,65,0,0,0,0,0,0,0,0,0,0,4595\n",
      "1236,0,454,681,0,1265,87,0,17,3,3,27,3,112,210,0,13,131,81,1011,0,134,7,13,0,5,0,6,205,0,294,336,56,0,0,16,145,0,0,179,75,0,354,0,0,0,0,2841\n",
      "689,30,204,35,301,915,45,0,161,0,461,1,359,79,122,18,39,0,93,7,803,1,367,4,0,596,0,0,52,0,1,51,183,0,0,0,4,0,0,2,0,0,5,0,0,0,0,4372\n",
      "1305,0,1082,33,15,1163,15,0,923,861,35,23,75,38,79,0,276,40,2,221,187,46,38,0,0,0,2,24,211,0,0,224,30,0,0,75,0,0,0,0,0,21,0,0,0,0,0,2956\n",
      "710,0,764,260,0,2348,0,27,189,9,68,12,58,0,163,18,309,8,130,20,0,0,75,0,209,42,0,0,48,19,0,378,12,0,0,0,8,0,0,0,0,92,0,0,0,0,0,4024\n",
      "2452,0,92,267,321,1345,630,0,558,0,111,81,114,0,17,0,92,252,156,74,0,0,50,0,0,5,0,0,425,0,1,18,322,0,0,8,21,0,0,0,0,0,6,0,0,0,0,2582\n",
      "1650,0,185,219,0,1482,44,106,330,0,1,57,0,1,1,95,243,1,0,52,1,43,21,0,0,0,7,39,931,0,2,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,246,4241\n",
      "902,154,2,181,0,1013,1,1,1486,4,47,75,10,6,14,0,12,312,66,599,0,825,6,0,0,134,0,172,7,0,18,4,15,0,0,29,99,0,0,6,0,0,0,0,0,0,0,3800\n",
      "582,70,416,126,146,633,170,0,10,0,165,0,7,24,1162,3,32,15,29,444,147,1,195,0,0,18,0,131,89,0,0,11,12,0,0,140,1,0,3,0,0,0,6,0,0,0,0,5212\n",
      "650,76,352,73,20,1164,56,320,21,0,5,52,0,0,387,0,79,0,4,1677,5,93,185,0,0,215,0,128,194,0,0,111,227,0,0,0,41,0,0,0,0,0,0,0,0,0,0,3865\n",
      "302,0,304,470,6,1895,301,1,226,0,39,3,199,5,38,568,194,63,227,51,628,0,135,0,0,0,123,0,64,0,214,90,414,0,0,0,318,0,0,146,538,0,0,27,0,0,0,2411\n",
      "391,0,18,960,1,537,39,0,44,28,615,0,29,0,0,147,71,0,5,55,186,0,408,31,32,0,0,0,89,0,529,378,6,0,1,23,0,0,0,0,65,0,2,0,0,0,0,5310\n",
      "1105,61,315,230,0,767,102,0,201,132,371,115,65,50,35,0,0,109,177,0,0,297,412,183,0,0,1,0,34,0,1,354,80,0,0,0,539,0,0,5,0,0,0,0,0,0,0,4259\n",
      "365,47,40,394,88,3011,10,257,179,194,0,34,1,688,268,508,0,17,245,17,33,0,47,1,19,0,39,0,35,412,0,14,0,0,0,15,14,1,0,0,0,0,0,0,0,1,0,3006\n",
      "558,25,254,961,36,681,3,144,124,5,141,234,63,8,526,0,152,2,250,15,247,0,116,0,0,1,0,0,187,1134,0,2,25,0,95,0,69,0,0,0,0,60,0,0,0,0,0,3882\n",
      "343,0,573,605,8,1269,0,144,206,50,18,106,728,5,304,32,20,44,31,147,0,0,185,0,0,0,1,0,334,159,140,63,333,0,0,0,39,1,0,0,0,594,0,0,0,0,0,3518\n",
      "2667,0,17,516,221,567,115,0,789,54,206,886,88,0,143,34,130,207,30,19,1,6,27,2,0,15,0,0,496,0,0,65,0,0,0,2,112,0,0,0,0,0,0,0,0,0,0,2585\n",
      "946,0,143,636,0,1350,5,0,167,224,16,41,67,58,0,13,129,8,14,362,15,0,124,1,0,3,1,21,237,0,21,173,0,0,0,0,405,0,0,0,0,1,1,0,0,23,0,4795\n",
      "174,0,519,362,0,1349,130,16,190,13,15,0,25,33,4,12,28,20,130,66,0,169,57,152,0,0,0,292,790,0,0,108,162,0,0,0,130,0,0,0,3,0,0,0,0,0,0,5051\n",
      "1936,0,245,924,0,322,607,11,2,61,68,212,11,2,749,35,203,4,7,59,3,0,15,0,0,0,0,0,212,0,167,15,64,0,0,13,746,0,7,73,0,0,0,0,0,0,0,3227\n",
      "322,1,4,1274,0,746,221,10,805,0,20,26,0,25,113,0,11,24,274,89,89,242,110,5,0,92,0,32,27,0,0,2,17,0,0,0,67,0,16,492,0,0,0,0,0,0,0,4844\n",
      "1967,0,227,381,8,667,234,27,0,0,57,126,60,9,121,0,0,168,69,5,80,1,78,0,0,0,0,106,172,0,0,476,25,0,0,0,10,0,0,0,2,0,0,0,0,0,0,4924\n",
      "418,0,301,729,456,912,55,30,132,274,211,495,0,10,349,28,314,35,12,0,0,99,368,0,0,0,11,0,24,0,30,14,54,0,0,0,6,0,0,456,0,0,1,0,0,0,0,4176\n",
      "859,120,42,57,12,406,119,167,96,0,68,127,12,4,66,0,294,662,41,0,2,2,0,76,15,811,506,15,213,0,16,261,3,0,0,4,46,0,0,0,0,0,0,0,0,0,0,4878\n",
      "547,0,10,29,6,1856,104,0,38,11,143,82,502,122,660,43,55,4,92,43,11,189,228,0,0,0,103,2,519,0,0,38,69,0,0,0,50,0,0,0,0,0,0,0,0,0,0,4444\n",
      "2291,5,190,792,4,663,95,374,430,0,371,20,7,3,169,0,522,0,42,98,0,4,0,34,0,6,0,2,319,7,0,190,774,0,0,0,0,0,0,4,1,209,0,0,954,0,0,1420\n",
      "794,0,647,1016,0,1829,121,11,36,0,142,0,15,5,46,5,4,4,42,150,4,0,93,4,0,1,1,5,32,0,7,237,189,0,0,9,52,0,0,0,0,0,0,0,0,0,0,4499\n",
      "1770,159,10,407,0,1199,9,91,1083,0,82,1,127,1,58,28,1246,122,3,4,9,162,136,0,6,0,40,62,497,0,0,15,2,1,0,0,259,0,0,0,0,0,12,0,0,0,0,2399\n",
      "1523,0,12,664,0,965,24,171,15,593,15,56,0,90,261,13,0,3,96,91,15,3,262,0,0,51,0,15,14,0,0,15,32,0,0,0,101,0,0,383,0,0,0,0,0,0,0,4517\n",
      "652,4,459,887,2,798,77,75,258,4,268,0,0,0,206,1,8,319,18,314,45,0,13,0,0,145,54,0,502,0,14,706,13,3,0,0,99,0,0,0,0,0,0,0,0,0,0,4056\n",
      "1829,0,88,137,0,1534,27,1,145,0,81,40,7,1,843,6,272,0,224,13,12,0,490,5,0,1,0,1,722,0,0,432,47,31,0,0,50,0,0,14,0,78,0,0,0,0,0,2869\n",
      "2285,127,255,755,0,1430,2,91,30,1,122,0,222,127,6,4,133,3,192,50,0,0,83,0,0,91,31,1,6,0,0,4,0,0,0,0,23,0,0,0,0,0,57,0,0,0,0,3869\n",
      "862,0,1019,136,17,1287,36,240,98,88,149,429,148,306,0,0,1,36,443,1,60,0,89,21,4,236,148,3,367,0,0,185,12,0,0,4,91,0,0,3,93,2,0,0,0,0,0,3386\n",
      "990,51,84,230,0,2364,165,11,74,0,64,568,178,3,16,0,7,7,334,141,0,192,277,1,0,60,0,0,554,0,0,134,13,0,0,0,8,0,0,0,0,0,39,0,0,0,0,3435\n",
      "2315,5,480,752,0,1054,1,15,549,0,0,0,379,4,2,121,62,1,138,2,4,0,190,0,0,1,0,0,126,0,0,3,6,0,0,0,47,0,0,164,0,0,0,0,0,0,0,3579\n",
      "158,0,611,788,16,337,1062,18,39,89,4,174,1,0,4,396,30,0,275,225,59,0,260,105,0,0,972,183,109,0,0,140,147,0,0,2,9,0,0,0,0,0,0,0,5,0,0,3782\n",
      "998,14,145,318,82,1385,888,0,56,0,0,302,13,45,188,17,0,2,19,1,0,0,1,0,8,179,37,1,315,0,0,923,81,0,0,0,18,0,0,0,0,0,47,0,0,0,0,3917\n",
      "100,0,28,0,0,1177,42,248,93,23,147,261,14,77,29,0,10,22,120,16,0,3,295,901,5,0,121,0,247,0,32,49,57,0,0,0,475,0,719,0,0,0,0,3,0,0,0,4686\n",
      "2587,2,82,117,16,1381,88,0,166,67,364,64,0,3,3,363,118,1,32,0,0,0,75,0,0,0,0,105,628,0,7,0,2,0,0,0,39,0,0,0,40,1109,134,0,0,0,0,2407\n",
      "1136,0,703,493,0,776,119,3,4,91,0,38,0,246,114,96,115,0,298,39,0,0,157,19,0,1,4,1,864,0,0,3,211,0,0,0,83,0,0,0,2,0,0,0,0,0,0,4384\n",
      "247,28,177,76,19,1907,350,1,714,69,90,78,0,497,225,36,116,2,72,93,11,0,7,0,10,0,0,0,74,0,0,346,22,0,0,0,12,0,0,0,0,0,0,0,0,5,0,4716\n",
      "271,0,171,673,2,918,22,243,17,0,1,318,101,10,172,171,830,1,126,6,0,23,332,0,0,24,0,0,35,0,1217,61,267,0,0,0,35,0,0,15,0,0,0,0,0,0,0,3938\n",
      "1030,28,375,64,0,2046,221,2,433,0,299,120,178,157,555,14,128,326,29,111,0,0,3,0,0,1,4,0,610,0,22,19,13,0,0,0,65,0,0,0,0,0,0,0,0,0,0,3147\n",
      "421,194,32,90,0,1604,252,0,1063,113,13,0,40,295,478,41,26,0,249,4,0,0,148,0,0,2,0,0,392,0,74,4,15,0,0,0,15,0,0,0,0,0,0,0,0,0,0,4435\n",
      "658,1,16,636,0,1035,524,30,229,190,741,53,76,390,7,0,194,1,54,89,0,0,4,180,2,5,13,0,214,315,0,58,4,0,0,6,27,0,54,0,0,0,0,0,0,0,0,4194\n",
      "603,0,362,129,0,2403,91,23,22,0,261,1,108,0,93,0,72,51,3,395,0,7,14,18,0,13,0,0,40,0,0,1172,2,0,0,117,37,0,0,0,0,92,0,0,0,0,0,3871\n",
      "427,81,92,260,61,2507,285,0,38,0,269,33,931,44,0,1,58,37,22,172,1,113,82,6,0,0,0,0,584,0,0,13,216,0,0,0,8,0,0,6,0,0,0,0,0,0,0,3653\n",
      "1222,0,861,678,0,677,140,13,753,0,131,16,3,70,18,7,30,0,106,101,4,42,1,0,0,0,21,49,671,0,0,100,1,0,0,35,624,0,0,184,0,0,0,0,0,0,0,3442\n",
      "1977,10,325,1564,0,493,1292,0,570,0,46,5,141,42,256,0,191,47,196,105,0,0,7,0,0,32,40,0,7,0,315,2,2,0,0,0,28,0,0,0,1,0,0,0,0,0,0,2306\n",
      "351,10,123,9,0,2318,0,0,292,2,1196,0,0,1,1,0,298,0,1,58,0,0,99,1,0,0,1,0,457,0,0,135,164,0,0,0,81,0,0,1,0,0,0,0,0,0,0,4401\n",
      "922,0,382,1982,2,299,358,0,125,246,20,0,9,18,178,5,0,45,593,15,0,0,28,0,0,11,314,0,315,0,830,17,140,0,0,11,0,0,0,0,0,0,0,0,0,0,0,3135\n",
      "1951,0,147,381,111,1403,379,4,190,65,311,18,1,0,5,86,116,91,134,37,10,0,68,0,0,45,0,2,271,0,8,380,1,0,0,0,0,0,0,16,4,0,0,0,0,1,0,3764\n",
      "1059,0,379,348,0,420,7,90,1789,1,119,5,65,227,355,0,50,6,749,89,137,0,55,0,0,1,0,1,28,8,0,3,231,0,0,0,159,0,2,0,0,0,0,0,0,0,0,3617\n",
      "1257,237,27,224,5,406,394,0,203,0,0,0,244,9,1172,36,144,0,31,8,68,244,13,0,0,0,1,0,476,0,1,464,226,1,0,2,53,0,0,0,0,0,0,0,0,0,0,4054\n",
      "481,264,251,55,0,1560,143,356,5,5,6,0,16,12,840,0,315,4,15,193,0,0,131,1,0,45,28,0,124,0,15,401,0,0,0,0,417,0,0,0,19,0,38,0,0,173,0,4087\n",
      "788,2,190,100,0,1660,461,15,187,0,320,2,71,0,11,0,100,5,2,118,0,0,3,1,0,1,0,0,470,0,0,54,0,0,0,0,120,0,110,0,0,0,5,0,0,0,0,5204\n",
      "1266,0,367,63,1,1334,12,72,10,15,323,183,11,61,223,15,208,899,89,1,28,0,52,0,3,57,0,0,717,0,0,8,565,0,0,94,7,0,0,1,0,0,0,0,0,0,0,3315\n",
      "564,799,30,801,0,1179,603,423,26,0,3,27,0,100,8,0,77,0,158,231,3,23,920,53,0,34,0,0,176,0,0,977,9,4,0,306,0,0,0,0,0,0,0,0,0,0,0,2466\n",
      "1252,1,319,34,26,761,1,24,53,190,557,20,200,0,214,7,54,329,891,225,0,0,509,462,56,2,8,0,55,0,0,0,295,0,0,71,28,0,0,0,0,0,0,0,0,0,0,3356\n",
      "1010,0,153,366,197,1196,56,0,294,0,539,186,10,2,403,26,257,132,41,216,43,360,209,165,0,26,10,28,91,0,0,265,235,0,0,0,138,0,0,1,0,0,0,0,0,0,0,3345\n",
      "820,13,1225,34,0,1058,243,200,861,0,257,48,322,2,207,0,1,16,177,4,33,0,43,0,16,0,0,0,281,0,0,193,70,0,0,5,87,0,0,55,0,0,0,0,0,0,0,3729\n",
      "1372,3,355,1289,0,615,761,62,115,0,73,14,263,453,3,56,35,35,279,121,0,0,7,183,8,25,0,5,291,0,157,71,137,0,0,2,254,0,0,5,0,0,0,0,0,0,0,2951\n",
      "1029,0,246,175,190,508,295,34,248,1,131,15,185,1769,0,174,375,40,31,1,2,0,557,0,0,0,1,8,224,0,105,130,314,0,0,0,14,0,0,0,0,0,0,0,0,0,0,3198\n",
      "686,0,120,957,409,1118,35,0,277,1,296,29,0,10,1174,106,65,96,66,17,0,0,11,0,0,7,41,229,459,0,0,424,81,25,0,0,528,0,0,0,4,0,0,0,0,0,0,2729\n",
      "1519,6,519,747,1,469,36,0,431,3,59,163,0,0,31,265,260,7,51,524,0,4,362,0,0,0,0,4,289,0,0,14,10,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4226\n",
      "1343,0,573,205,46,1060,789,22,564,0,119,154,121,92,53,4,364,12,46,36,4,147,0,1,0,1,0,0,84,0,4,49,639,0,0,70,222,0,0,1,35,0,7,0,0,0,0,3133\n",
      "1458,0,234,128,0,494,182,1,1556,36,16,5,197,6,443,131,37,84,14,43,6,2,130,0,0,0,0,0,2,501,0,0,44,0,0,0,508,0,0,1,0,1,0,0,22,0,0,3718\n",
      "937,8,367,123,7,1930,298,1,652,173,0,10,157,14,95,0,98,157,261,38,4,228,4,49,175,18,1,83,59,0,0,3,168,0,4,0,106,0,0,76,6,0,0,1,0,0,0,3689\n",
      "664,0,155,480,179,1162,740,8,632,0,271,21,8,0,0,3,12,5,150,92,210,0,259,2,0,88,1,0,44,0,445,131,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4216\n",
      "289,78,763,184,264,1229,62,13,259,3,14,14,248,49,1,0,117,48,245,8,0,360,127,203,2,0,1,2,123,40,24,81,25,0,0,0,10,0,0,0,1333,0,0,0,0,0,0,3781\n",
      "861,0,66,78,0,2330,46,160,126,176,132,13,39,31,12,7,0,99,7,0,60,45,110,3,0,13,0,2,3,0,152,515,1391,0,0,267,60,0,0,8,0,0,0,0,0,0,0,3188\n",
      "410,6,477,38,0,2080,101,0,1401,27,359,23,0,26,87,4,25,9,0,0,1,0,257,0,0,0,0,0,306,0,0,251,0,0,0,0,402,0,0,0,0,0,0,0,0,0,0,3710\n",
      "1862,0,323,1605,24,1327,276,69,174,0,25,134,0,12,98,0,6,0,31,114,0,105,2,0,0,0,0,0,43,0,111,532,236,0,0,0,48,0,0,0,0,0,12,0,0,0,1,2830\n",
      "1017,0,228,724,1,1419,639,112,295,0,698,8,130,0,0,0,233,5,875,134,0,12,122,0,0,0,3,0,8,0,0,77,14,0,0,1,0,0,0,32,0,0,0,0,0,0,0,3213\n",
      "483,0,125,590,0,2091,248,279,703,1,95,6,0,16,462,1,74,5,279,112,0,243,231,7,0,3,1,74,165,0,370,16,254,0,0,0,2,14,0,0,0,1,0,1,0,0,0,3048\n",
      "743,12,88,1038,94,2390,73,5,265,73,24,274,1,0,55,303,121,11,80,9,6,0,511,145,0,0,0,14,3,0,34,6,732,0,0,0,10,0,9,0,0,0,0,0,0,0,0,2871\n",
      "865,16,130,241,0,1572,1489,156,174,14,169,12,68,88,8,0,2,0,491,307,44,55,497,7,0,5,0,0,5,0,37,2,1,0,0,34,513,0,0,0,0,0,0,0,0,0,0,2998\n",
      "1014,0,1,335,519,367,11,408,197,22,22,113,0,11,5,13,235,10,122,52,0,0,339,2,0,4,0,3,96,0,115,293,0,0,0,27,1,0,0,0,0,0,4,2,0,0,0,5657\n",
      "194,0,40,220,0,2262,43,226,2,0,10,26,54,213,7,262,0,0,393,44,0,49,142,0,0,0,0,45,43,0,0,362,367,0,0,11,118,0,0,0,0,0,0,0,0,0,0,4867\n",
      "1890,8,131,371,12,802,134,34,750,120,703,13,0,28,82,5,0,45,5,204,0,89,120,0,0,0,11,0,294,0,714,3,0,0,0,0,4,0,1,0,3,0,0,0,0,0,2,3422\n",
      "552,0,89,442,0,1793,653,12,185,18,60,88,1,23,167,0,45,42,11,264,0,11,150,32,0,0,1,13,43,0,0,1,231,0,0,3,16,0,0,3,0,0,0,0,0,0,0,5051\n",
      "447,0,728,119,0,2153,38,48,763,1,6,1,0,155,5,19,33,390,349,44,1,0,30,0,21,0,0,50,313,746,1,113,2,0,0,0,0,0,10,0,1,0,0,0,0,0,0,3413\n",
      "550,0,9,314,0,1472,2,0,463,79,0,67,4,0,10,781,56,2,369,21,0,17,182,0,0,13,0,0,154,0,13,67,612,0,0,1,110,0,0,0,0,0,0,0,10,0,0,4622\n",
      "1007,6,654,606,11,1194,3,499,49,8,14,1,53,88,15,136,16,0,39,0,1,0,10,0,0,24,253,1,254,0,0,831,25,0,0,0,3,0,10,0,0,0,545,0,0,0,0,3644\n",
      "2113,26,113,472,98,1645,204,41,30,15,78,0,843,0,0,29,0,0,140,5,6,6,929,1927,0,0,8,0,8,0,0,11,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1253\n",
      "920,0,200,1708,75,864,41,13,91,0,223,265,39,6,1,6,193,578,340,2,13,7,46,11,0,0,0,3,168,0,0,5,0,0,0,51,227,0,1,5,0,0,0,0,0,0,0,3898\n",
      "1443,0,55,142,0,1063,0,15,745,0,45,16,520,73,220,47,2,0,0,9,37,13,86,0,73,0,8,15,25,0,0,95,0,0,0,0,535,0,0,31,0,0,0,0,0,0,0,4687\n",
      "1886,71,415,110,18,1597,52,5,149,0,17,15,187,90,38,249,22,11,142,813,0,185,203,0,0,431,0,0,875,0,8,36,0,0,0,0,183,0,0,197,0,0,0,0,0,0,0,1995\n",
      "589,176,302,120,0,2187,25,212,295,380,75,0,358,68,64,1,0,3,110,605,0,0,0,0,0,0,0,112,33,0,0,3,75,0,0,83,24,0,0,0,0,0,58,0,0,0,0,4042\n",
      "1467,0,130,140,31,1986,0,141,237,0,245,12,0,86,272,0,104,2,401,17,289,121,3,124,0,19,0,0,637,0,0,22,0,0,0,0,0,0,1,4,0,0,13,0,0,0,0,3496\n",
      "684,3,179,493,0,1245,0,3,710,5,427,2,85,4,0,109,12,0,374,313,5,17,96,0,6,12,230,0,1099,0,65,296,27,0,0,0,441,0,0,0,0,0,0,0,0,0,0,3058\n",
      "224,27,0,940,0,858,55,0,644,161,298,0,1,0,227,1763,32,0,27,3,2,4,165,0,0,0,0,151,760,0,0,13,165,0,0,0,154,0,0,3,6,0,0,0,0,0,0,3317\n",
      "1586,0,0,70,85,1868,191,20,126,192,152,0,1,0,22,11,11,166,423,23,0,0,206,5,0,2,7,0,72,0,123,12,103,0,0,0,16,0,0,2,0,0,0,0,0,0,0,4505\n",
      "1639,0,7,381,5,1999,213,0,259,4,0,15,5,64,15,43,24,22,175,8,0,0,45,3,0,25,4,6,244,0,0,258,270,0,0,1,154,0,0,0,3,0,0,0,0,0,0,4109\n",
      "1121,0,53,111,0,1676,105,0,356,4,55,0,526,53,1322,14,25,139,551,7,250,0,78,3,0,0,61,8,6,0,0,22,147,0,0,0,36,0,0,0,0,0,0,0,0,0,0,3271\n",
      "1002,18,27,261,0,1353,51,253,112,138,368,29,6,11,83,414,5,4,4,138,97,0,190,16,0,31,0,15,17,0,1,192,17,199,0,0,1,0,1,0,0,0,0,0,0,0,0,4946\n",
      "781,0,25,513,0,500,200,29,152,237,525,889,15,0,2,0,93,54,3,639,0,191,199,0,0,47,0,0,10,0,0,2,109,0,0,6,0,0,0,0,0,0,0,0,0,0,0,4779\n",
      "569,0,1222,186,0,1389,43,53,31,0,40,0,1,0,118,0,0,0,14,287,1,0,9,0,0,6,0,0,102,298,0,367,21,0,0,0,245,0,0,12,0,3,0,0,0,0,0,4983\n",
      "1563,1,198,719,0,1408,14,9,5,9,112,686,0,0,602,238,26,0,554,15,3,0,14,7,0,15,0,1,453,124,0,345,0,0,0,34,24,0,0,3,0,0,0,0,0,0,0,2818\n",
      "961,0,162,575,0,1630,2,1175,131,13,34,0,170,184,770,0,14,30,1,59,0,0,120,0,3,142,166,6,28,0,4,0,428,0,0,0,125,0,0,0,0,0,0,0,0,0,0,3067\n",
      "143,0,42,1745,3,1036,63,0,118,108,13,39,49,54,53,21,99,0,32,0,46,0,537,351,22,0,4,0,14,0,4,900,1,0,0,0,3,1,0,0,0,0,0,0,0,0,0,4499\n",
      "2159,3,38,400,0,966,223,22,355,0,2,0,16,211,0,1,88,30,102,330,8,109,645,100,59,0,0,0,115,5,3,12,65,0,0,751,1,0,0,0,1,0,0,0,0,0,0,3180\n",
      "1260,0,7,61,0,1219,436,46,205,23,78,29,265,153,0,195,56,118,204,0,1,3,151,0,1,0,0,0,696,0,1,206,5,0,0,3,331,0,0,0,18,0,0,0,0,0,0,4229\n",
      "1028,0,0,421,5,393,213,0,794,87,106,3,23,22,0,1,427,112,13,361,10,0,204,1,0,1097,0,42,47,0,0,112,0,0,0,0,11,0,0,22,248,93,0,0,0,0,0,4104\n",
      "3366,7,333,266,0,525,259,89,1,0,66,209,319,124,254,0,91,0,134,8,158,6,439,235,0,0,0,0,95,0,0,15,183,0,0,277,84,0,0,6,0,0,0,0,0,0,0,2451\n",
      "2147,0,182,321,296,1817,15,3,188,0,1,355,115,0,287,2,0,187,10,21,35,0,106,0,147,232,0,3,125,0,25,31,0,0,0,0,128,0,132,4,57,0,0,0,0,0,0,3028\n",
      "1064,1,33,232,0,1082,825,63,762,287,145,195,281,10,5,1,54,0,170,192,77,1,6,0,3,0,280,0,57,0,26,251,250,0,0,0,0,0,0,347,0,0,0,0,0,0,0,3300\n",
      "657,536,257,809,0,662,170,376,475,0,7,1,496,474,0,4,8,3,94,121,1,0,96,224,0,19,15,126,15,0,0,227,0,0,0,0,199,0,0,0,1,0,0,0,0,0,0,3927\n",
      "1012,0,34,204,0,1049,370,42,596,7,2,0,257,630,1,8,0,216,112,2,0,9,995,0,0,127,31,83,0,0,0,124,3,0,0,0,488,0,0,0,0,0,0,0,0,0,0,3598\n",
      "1251,135,683,81,0,1248,67,0,83,56,78,0,192,13,65,451,0,86,122,203,0,515,69,0,2,54,3,50,564,0,265,13,1,0,0,0,498,0,0,0,0,0,0,0,0,0,0,3152\n",
      "1464,0,620,187,0,809,88,3,79,18,692,2,2,50,47,117,259,4,39,95,1,3,0,1,0,0,7,274,4,0,168,16,45,0,0,0,917,0,0,188,0,0,0,46,0,0,0,3755\n",
      "586,0,148,498,3,929,113,35,183,98,740,77,0,0,8,0,0,1711,276,2,0,91,9,0,16,0,0,0,895,0,0,2,389,0,0,0,35,0,0,0,99,0,214,0,0,0,0,2843\n",
      "698,15,841,1055,16,1355,2,386,6,1,0,107,55,26,32,80,4,113,60,17,166,10,277,9,0,2,105,0,4,0,0,41,29,0,0,0,138,0,0,2,3,0,0,0,0,0,0,4345\n",
      "1482,19,194,343,34,1140,98,0,566,0,126,0,67,132,2,1,182,31,95,299,0,24,606,0,1,0,0,112,491,0,0,24,1,0,0,0,1521,0,0,0,0,0,0,0,0,0,0,2409\n",
      "786,0,261,206,0,3129,43,30,43,0,22,276,83,6,38,0,32,0,43,95,0,116,15,0,0,0,0,15,51,0,0,142,53,0,0,0,25,0,0,65,146,0,1,0,0,0,0,4278\n",
      "572,0,837,197,0,611,236,42,269,571,147,197,67,258,14,0,4,2,251,931,0,0,3,10,0,0,145,1,141,0,47,0,157,0,0,0,69,0,0,0,0,0,0,161,0,0,0,4060\n",
      "955,0,321,654,1,1307,205,33,166,0,79,0,400,69,174,84,17,105,442,217,10,0,24,0,0,167,0,0,58,0,0,93,32,0,0,0,3,0,22,36,0,0,0,0,0,0,0,4326\n",
      "1452,0,309,489,0,486,113,254,211,207,22,7,691,169,161,920,431,3,173,0,0,42,285,10,0,3,0,0,162,0,61,301,377,0,0,96,0,0,0,13,0,0,0,0,0,0,3,2549\n",
      "491,0,255,555,1,1029,0,0,651,680,330,16,0,91,39,0,357,233,185,922,3,40,23,0,2,0,0,0,1181,0,54,74,37,0,0,0,4,0,0,7,0,0,151,0,0,0,0,2589\n",
      "1153,5,293,780,2,1155,18,0,83,11,209,253,3,2,380,234,32,2,479,732,1,6,787,10,0,176,0,69,140,211,5,4,0,0,0,0,33,0,0,0,0,0,1,0,0,0,0,2731\n",
      "1517,0,869,48,0,558,14,0,127,0,1,2,1,145,710,1,6,305,12,624,0,0,38,2,7,0,13,90,55,0,0,46,2,0,0,0,0,0,0,2,0,0,0,0,0,30,0,4775\n",
      "902,17,204,159,0,2635,464,1,329,0,103,19,89,0,0,0,86,362,33,88,131,0,209,72,0,5,3,483,30,0,0,2,0,0,0,9,25,0,0,0,0,0,0,0,0,0,0,3540\n",
      "2241,0,11,950,0,958,1,3,23,0,259,466,377,0,6,0,82,677,5,260,0,0,361,128,15,73,209,1,164,0,2,64,0,1,0,0,277,0,0,0,0,0,0,0,0,0,67,2319\n",
      "459,0,536,601,16,1470,420,291,518,3,340,0,85,0,0,459,63,98,60,7,0,0,98,8,0,0,460,46,157,0,1,1206,1,0,0,351,0,0,0,0,0,0,0,0,0,0,0,2246\n",
      "527,0,41,635,0,1624,529,26,161,40,51,50,147,76,191,6,17,6,24,665,0,11,828,8,0,0,0,0,182,0,0,103,4,0,0,254,757,3,0,758,0,0,0,7,0,0,0,2269\n",
      "812,96,36,589,0,1609,169,0,190,0,102,0,4,0,16,468,187,1,10,164,0,33,462,25,1,22,86,0,62,0,163,985,1,0,0,0,38,0,0,0,164,0,0,0,0,0,0,3505\n",
      "1436,0,78,230,0,2178,203,105,46,45,53,12,133,63,45,44,15,31,28,89,0,275,60,3,0,49,50,0,121,0,0,221,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4355\n",
      "1586,678,165,142,161,1427,5,0,39,0,205,38,0,183,108,1,36,105,85,75,89,158,110,0,0,164,0,0,21,0,91,333,2,0,0,0,2,4,0,0,0,0,0,0,0,0,0,3987\n",
      "874,0,176,381,83,1015,1520,10,62,0,678,27,37,45,28,72,81,74,311,93,0,0,293,6,0,0,0,0,14,0,111,1234,19,0,0,40,1,0,0,0,0,0,0,0,0,332,0,2383\n",
      "1495,0,83,1219,20,1102,1,0,787,113,35,5,4,20,289,0,22,26,315,639,0,92,121,73,4,0,7,22,302,0,29,6,99,0,0,0,29,0,0,0,0,0,8,0,0,0,0,3033\n",
      "1066,5,324,71,129,600,546,1,356,321,204,68,3,656,37,313,129,273,127,21,1,4,458,0,0,0,1,0,248,0,0,165,23,0,0,18,83,0,9,0,0,0,102,0,0,0,0,3638\n",
      "466,2,378,343,0,1591,346,825,250,0,2,196,478,51,0,27,0,157,140,4,0,0,5,8,20,10,0,0,113,0,0,0,69,0,0,824,1,0,0,51,408,8,0,0,0,0,0,3227\n",
      "537,0,122,370,2,484,340,0,488,6,30,0,39,387,46,187,116,0,207,299,25,97,594,0,0,0,14,2,234,118,5,27,227,0,0,0,94,0,0,279,0,0,0,0,0,0,0,4624\n",
      "2098,12,332,1625,59,2034,831,17,140,0,2,13,15,10,87,0,4,0,0,58,226,6,5,11,0,34,39,0,279,0,125,72,1,0,0,0,1,0,0,0,62,0,0,0,0,0,0,1802\n",
      "1297,0,302,252,0,897,95,0,66,0,119,393,143,328,23,236,172,356,321,83,0,0,1,0,0,10,0,0,792,0,0,91,22,15,0,0,0,0,0,96,0,0,0,0,0,0,0,3890\n",
      "1511,250,498,371,0,1544,184,232,338,0,135,0,60,149,453,0,21,40,87,275,0,0,92,0,0,0,0,0,11,0,0,91,0,9,0,44,2,0,0,13,109,0,27,0,0,0,0,3454\n",
      "667,0,937,126,15,1508,79,6,462,222,26,112,137,0,35,0,0,200,582,2,0,4,545,136,0,0,0,24,24,0,2,209,32,0,0,0,463,0,0,0,0,0,0,8,0,0,0,3437\n",
      "185,4,479,507,0,681,114,134,1176,0,0,0,245,0,134,6,247,0,188,186,0,0,1061,54,0,180,3,0,32,0,75,8,37,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4264\n",
      "1386,0,313,199,2,1334,84,63,84,47,188,222,152,6,113,0,3,4,137,8,8,0,282,0,0,115,0,142,411,0,4,1082,47,0,0,0,25,91,0,0,0,0,0,0,0,0,0,3448\n",
      "2408,30,81,781,0,967,399,7,372,0,34,0,0,8,179,23,57,371,155,223,0,3,28,0,58,0,0,0,947,22,0,15,0,0,0,13,13,0,0,247,0,0,2,0,0,8,0,2549\n",
      "2304,5,70,46,0,1625,19,1,218,21,403,19,81,106,32,0,0,0,0,0,0,124,475,0,26,162,1,356,508,0,0,168,8,0,0,0,6,0,0,0,0,0,0,0,0,0,0,3216\n",
      "1452,0,172,169,10,2880,306,0,612,0,276,7,132,0,579,78,136,77,157,22,0,11,71,14,9,318,1,27,201,0,0,82,0,0,0,0,286,0,0,2,1,0,0,0,0,0,0,1912\n",
      "523,0,295,1654,0,1613,75,339,399,0,48,0,113,19,202,0,168,364,31,210,0,2,332,0,0,1,49,0,518,0,1,30,22,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2992\n",
      "2657,0,246,68,0,2889,46,68,3,0,21,5,11,1,0,1,87,0,3,30,0,18,260,2,3,8,0,0,168,0,0,578,30,0,0,0,141,0,0,0,0,0,0,0,0,0,0,2656\n",
      "1948,0,45,175,0,1215,2,30,124,211,33,199,75,28,105,1,36,171,72,259,5,12,163,0,0,13,27,0,29,156,0,1271,160,0,0,0,159,0,0,0,8,0,0,0,0,0,0,3268\n",
      "1567,0,351,589,0,1250,57,3,273,54,10,21,0,33,37,0,409,1,91,90,5,516,124,1,0,11,30,0,24,0,88,78,0,75,0,0,0,0,0,0,0,0,0,0,0,8,0,4204\n",
      "1065,131,346,181,0,829,4,0,32,0,106,194,319,15,69,50,274,291,229,7,1,0,313,3,0,2,0,0,121,0,0,1,1,0,0,862,36,0,0,1,0,0,0,0,0,0,0,4517\n",
      "2441,0,98,672,0,816,8,77,66,8,375,344,18,276,40,7,64,10,4,11,23,0,165,5,85,11,0,53,375,0,326,53,62,0,0,0,337,0,0,0,0,0,21,0,0,0,0,3149\n",
      "1931,0,45,207,15,1140,53,0,35,552,188,175,41,89,37,18,12,46,113,35,137,0,136,9,0,42,3,0,313,0,29,83,552,0,0,0,0,0,0,0,4,0,0,0,0,0,0,3960\n",
      "139,0,323,115,0,1220,755,1,1148,0,27,39,90,1,90,18,0,1,183,150,7,3,854,27,0,22,0,538,13,0,0,26,2,0,0,0,216,0,0,0,0,0,0,0,0,0,0,3992\n",
      "1242,0,537,620,0,1299,52,334,64,124,1,15,58,97,758,4,286,0,29,153,0,277,1,0,4,10,72,226,189,0,0,391,45,0,4,0,26,0,0,0,0,0,244,0,0,0,0,2838\n",
      "1548,0,87,95,0,1142,787,85,288,36,14,56,370,0,41,2,0,123,68,21,0,0,198,0,0,477,0,14,41,0,0,1576,9,0,0,0,48,0,0,1,0,0,0,0,0,0,0,2873\n",
      "38,0,1421,41,321,1357,31,20,1480,0,77,4,559,1,201,0,348,0,89,0,0,1,3,80,14,131,10,50,76,0,0,102,229,0,0,262,35,0,15,1,0,1,0,0,0,0,0,3002\n",
      "1245,58,147,96,0,1985,56,74,35,0,158,33,0,86,850,0,6,1,1244,6,57,0,21,0,118,0,4,12,205,0,90,48,0,0,0,0,21,0,0,0,0,0,6,0,0,0,0,3338\n",
      "924,37,175,80,4,742,103,220,1450,0,122,19,175,20,279,0,0,63,119,0,1,1,2,121,0,0,0,0,233,0,0,6,3,0,0,541,29,0,11,0,9,441,0,0,0,0,0,4070\n",
      "1851,0,46,169,0,1270,10,296,476,1,41,2,25,3,613,271,0,12,3,9,9,0,162,0,0,6,0,59,340,0,4,64,249,0,0,14,4,0,0,6,0,35,0,17,0,0,0,3933\n",
      "460,23,116,494,0,1172,43,186,618,466,3,0,126,0,169,12,147,9,120,499,0,0,155,12,0,6,75,503,26,0,5,539,9,0,0,0,273,0,0,0,0,0,0,0,0,0,0,3734\n",
      "704,0,89,255,4,1494,0,6,10,19,2,234,87,28,2,117,5,86,170,222,675,0,549,0,35,161,9,378,7,0,0,34,41,0,0,49,6,0,0,0,0,0,0,2,0,0,0,4520\n",
      "1258,26,21,262,186,958,20,12,231,0,0,0,38,49,726,538,7,28,15,170,195,0,309,0,0,0,0,0,539,0,0,226,0,0,0,0,0,0,0,0,8,0,0,0,0,0,22,4156\n",
      "1060,114,267,609,7,443,281,7,51,5,31,0,128,207,25,30,35,2,22,19,1,6,297,0,196,1,1,10,635,1,0,131,64,0,0,34,472,0,0,0,0,0,0,0,0,0,0,4808\n",
      "487,4,5,105,18,2828,0,0,754,0,46,15,13,6,10,84,1090,163,550,146,0,65,353,1,0,3,0,0,14,0,0,120,6,0,0,0,7,0,0,1,0,0,0,0,0,0,0,3106\n",
      "647,0,12,241,0,1464,0,5,3,179,0,4,0,0,219,80,0,0,173,2,0,28,250,0,0,0,98,67,353,0,0,167,203,0,0,26,75,0,0,183,0,0,28,0,0,0,0,5493\n",
      "978,1,507,174,0,1414,34,5,193,1004,23,1,99,0,334,31,1,43,1,0,0,230,450,0,73,1,0,0,139,0,0,48,1,0,0,0,65,0,0,0,0,0,0,0,0,0,0,4150\n",
      "762,80,185,661,0,1172,422,98,81,1,3,32,0,1,7,28,26,298,1,1,0,1,212,1731,0,94,0,1,306,0,0,222,8,0,0,0,4,0,12,0,0,426,0,0,0,0,0,3124\n",
      "578,0,70,154,0,1604,123,13,598,0,644,201,204,0,105,0,0,0,0,228,155,0,1675,118,56,0,80,159,300,0,1,150,0,0,0,0,0,0,0,0,39,0,0,0,0,0,0,2745\n",
      "509,0,124,519,0,558,119,84,318,0,151,106,120,124,1,0,3,510,1153,869,14,0,140,1,1,0,0,0,29,3,37,217,11,0,0,0,149,0,0,588,0,0,0,0,0,0,0,3542\n",
      "795,329,122,469,12,1015,282,0,577,0,35,513,52,0,862,85,44,68,3,306,0,46,30,0,194,1,307,7,116,12,0,396,392,0,0,0,46,0,0,1,0,0,0,0,0,0,0,2883\n",
      "1674,0,409,1255,3,788,558,320,533,0,0,5,33,242,39,0,334,0,0,4,0,114,622,0,0,0,0,78,8,0,17,36,317,0,0,27,39,0,1,0,0,0,7,0,0,0,0,2537\n",
      "344,0,29,543,0,574,0,0,544,0,10,1,13,71,22,49,0,7,2,274,0,0,357,27,0,199,0,1,804,0,0,391,4,17,0,0,2425,0,0,0,473,0,144,0,0,0,0,2675\n",
      "2628,0,162,292,22,1374,65,336,158,1,61,1,7,0,80,12,119,93,52,9,31,75,52,48,0,5,3,0,590,0,0,60,28,0,0,0,196,0,0,0,0,0,0,0,0,0,0,3440\n",
      "1236,0,637,524,0,300,3,131,193,0,126,3,41,2,90,14,492,373,386,871,0,678,101,0,0,286,0,303,174,0,12,214,164,0,0,3,10,0,0,27,0,1,0,0,0,0,0,2605\n",
      "712,0,282,194,6,1394,118,205,128,0,94,4,11,330,53,22,88,0,98,12,0,26,865,446,1,103,4,0,351,0,9,0,7,0,0,0,0,0,0,1,0,0,0,0,0,0,0,4436\n",
      "696,0,176,389,209,893,334,352,103,0,55,0,39,12,306,7,52,124,114,27,74,1,2,0,0,0,0,0,32,0,0,377,14,0,0,4,43,0,14,0,0,0,2,0,0,0,0,5549\n",
      "1715,4,598,636,355,1199,0,122,676,0,124,97,1,252,8,30,0,0,531,7,0,0,305,36,0,0,130,0,0,0,0,162,88,0,0,0,80,0,0,0,0,107,19,0,0,0,0,2718\n",
      "412,176,211,200,0,1735,90,37,884,8,34,156,20,0,1434,0,0,121,93,11,6,0,7,1,15,1,73,0,400,0,5,114,0,0,0,6,4,0,0,0,0,0,0,0,0,0,0,3746\n",
      "697,25,32,335,0,2095,14,20,312,192,72,300,128,1,5,111,0,487,46,11,1,0,277,0,0,0,13,14,3,0,1,132,709,0,0,41,55,0,32,0,0,0,0,0,0,0,0,3839\n",
      "584,14,709,456,293,2864,81,0,219,0,25,133,5,0,121,0,59,0,68,153,1,46,226,1,0,17,0,9,9,0,3,0,8,0,0,0,1,0,0,0,0,0,0,0,0,0,0,3895\n",
      "585,0,703,236,16,1151,1,0,277,0,2,546,631,0,119,34,1448,21,115,0,0,0,44,3,0,0,0,30,15,0,0,37,86,0,0,7,136,0,0,0,0,0,0,0,0,0,0,3757\n",
      "751,0,122,276,0,1347,7,1,304,0,1,16,13,0,0,24,232,0,528,167,0,3,32,484,0,2,243,0,136,60,226,0,0,0,0,0,10,0,0,0,0,0,0,0,0,0,0,5015\n",
      "650,0,139,204,0,1737,43,0,168,0,460,0,5,1,244,136,505,2,152,8,0,54,78,0,0,4,32,0,28,0,17,27,82,0,0,0,72,0,0,30,0,0,0,0,0,0,0,5122\n",
      "1388,0,282,1640,0,627,233,110,39,0,27,0,0,9,15,12,0,13,20,43,2,231,304,212,0,0,0,1,0,0,3,0,0,0,0,0,187,0,0,2,0,0,0,0,0,0,0,4600\n",
      "474,31,72,283,775,1763,72,17,111,135,300,1,336,1,258,6,0,0,157,84,0,0,23,0,63,0,0,15,10,0,260,71,204,0,0,19,193,0,0,15,2,0,0,0,0,0,0,4249\n",
      "1416,0,457,521,6,881,0,514,180,0,104,21,81,391,52,125,95,0,2,0,20,0,601,0,0,6,0,0,1084,0,1,15,0,0,0,27,15,0,0,84,0,0,0,0,8,14,2,3277\n",
      "846,1,210,756,0,1352,0,0,653,3,67,7,83,0,9,65,5,0,68,5,0,0,151,0,0,384,1,0,519,0,0,660,157,0,0,75,4,0,0,60,0,0,0,0,0,0,0,3859\n",
      "1939,0,242,255,133,1423,18,1,64,22,509,7,26,82,4,41,282,3,2,196,52,23,22,136,3,62,58,0,607,0,50,22,7,0,0,0,7,0,0,1,6,0,0,0,0,0,0,3695\n",
      "1139,0,135,460,0,661,2,3,1140,0,23,11,74,15,2,65,110,0,800,0,29,2,17,156,0,0,0,0,1,0,0,108,65,0,0,0,4,0,0,0,0,6,25,0,0,0,0,4947\n",
      "1040,143,491,582,0,1348,92,28,8,0,1491,5,10,70,274,0,6,0,317,17,245,108,215,0,0,0,317,47,433,0,4,3,1,0,0,0,0,0,0,56,0,0,0,0,0,0,0,2649\n",
      "1328,0,67,357,24,895,333,0,25,8,28,92,1,0,566,0,1370,0,544,999,7,28,40,0,57,60,299,0,81,0,5,1,3,20,0,0,314,0,2,19,6,0,0,0,0,0,0,2421\n",
      "596,0,121,284,4,1226,48,42,754,0,9,825,0,32,100,124,130,0,8,18,5,84,181,3,0,547,3,0,517,0,169,8,0,0,0,0,7,1,0,0,0,7,0,0,0,0,0,4147\n",
      "1385,14,137,130,0,916,80,35,75,2,420,4,0,17,261,0,49,288,0,161,313,0,7,8,0,188,0,0,454,0,1517,5,153,0,0,0,283,0,0,8,0,0,34,0,0,0,0,3056\n",
      "1981,0,525,546,2,1176,79,26,71,48,43,0,0,45,49,3,0,21,16,117,0,0,315,0,5,0,0,3,55,0,4,372,41,1,0,0,1,0,0,0,0,0,0,0,0,0,0,4455\n",
      "2193,9,490,119,0,1573,95,2,135,0,113,26,331,0,136,10,67,22,88,212,0,0,128,0,0,2,89,34,75,0,0,498,0,0,0,0,93,0,0,0,6,0,0,0,0,0,0,3454\n",
      "830,0,178,278,0,1276,128,3,163,2,390,1120,82,15,1,68,487,133,11,21,4,5,119,3,1,1,1,0,29,0,0,168,284,0,0,0,1,0,0,97,0,0,0,0,0,5,0,4096\n",
      "780,87,26,877,238,1790,29,39,172,0,15,0,53,70,62,2,62,89,92,43,428,21,4,80,0,11,0,0,271,0,0,2386,211,0,0,0,15,0,0,2,0,0,0,0,0,0,0,2045\n",
      "417,2,1241,84,149,1151,345,61,158,0,90,129,63,145,45,6,28,295,9,69,0,16,1,0,0,0,5,0,597,0,5,356,35,0,0,0,13,21,9,0,69,0,109,1,0,0,273,4003\n",
      "264,0,241,284,322,1291,167,1,130,535,36,40,44,51,144,0,0,2,111,86,1,165,49,78,0,0,197,0,885,0,50,3,36,0,0,0,4,0,0,0,0,0,0,0,0,0,0,4783\n",
      "1109,2,138,1077,760,2069,640,168,5,0,16,0,0,0,1,123,451,0,3,1,1,2,144,0,79,1,0,0,28,0,0,14,50,0,0,0,5,0,0,14,0,0,0,0,0,0,0,3099\n",
      "1904,1,168,117,0,974,74,611,87,221,118,136,432,994,171,0,8,19,21,0,0,1,33,15,0,0,0,6,55,0,0,305,258,81,0,0,8,0,3,0,0,0,0,0,0,0,0,3179\n",
      "1068,4,213,243,1,1129,0,4,910,193,0,14,155,11,964,0,1,0,25,14,170,2,394,41,0,231,0,218,23,0,0,443,270,0,0,3,859,0,0,0,0,0,35,0,0,3,0,2359\n",
      "1927,0,8,538,0,1094,165,1218,58,107,7,414,1,108,3,414,7,5,24,45,2,115,0,152,0,1,0,3,12,31,4,303,358,0,0,0,58,0,0,35,0,0,0,0,23,0,0,2760\n",
      "1312,5,243,1086,0,922,5,162,38,30,2,375,17,20,173,7,89,183,274,6,0,31,9,146,0,457,0,0,76,0,0,21,153,68,0,0,1463,0,0,2,1,0,0,0,0,0,0,2624\n",
      "2308,0,141,120,9,1281,37,113,210,0,214,39,0,269,441,206,4,35,12,77,0,143,233,0,38,0,1,8,923,0,0,106,10,0,0,5,3,0,0,0,0,0,0,0,0,0,0,3014\n",
      "870,144,314,1615,0,751,89,0,132,113,9,0,0,0,222,108,0,29,70,4,0,0,24,0,0,75,120,5,620,0,7,374,14,0,0,0,104,0,0,73,0,0,0,0,0,0,0,4114\n",
      "144,117,0,91,0,1494,367,3,84,98,688,547,2,5,0,19,0,330,9,1,0,186,0,0,0,0,139,0,375,0,0,15,61,0,0,21,56,0,5,0,0,0,0,0,0,67,0,5076\n",
      "274,65,97,444,24,1993,45,152,146,947,1119,68,1,118,0,4,86,1,2,245,14,0,101,52,0,0,1,0,77,0,41,407,29,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3447\n",
      "672,2,134,1181,3,1844,67,0,770,2,527,2,117,92,50,32,81,0,5,153,10,441,122,44,0,0,0,0,49,24,0,0,110,0,0,0,6,0,2,0,0,1,0,0,0,0,0,3457\n",
      "503,109,791,415,0,836,99,463,14,0,11,15,148,43,2,6,144,0,163,0,99,1,58,104,0,0,110,0,539,0,0,15,362,0,28,1,56,0,501,0,0,0,0,0,0,0,0,4364\n",
      "619,0,612,459,72,2116,13,10,285,0,212,0,2,1,0,10,27,44,870,231,2,0,42,0,0,0,0,0,155,0,156,371,15,0,0,0,20,0,0,6,0,0,0,1,569,0,0,3080\n",
      "214,165,3,43,0,559,1180,770,316,0,46,5,1,438,788,0,76,32,189,133,0,52,1,260,0,287,363,0,75,0,6,197,553,0,0,1,1,0,0,1,0,0,0,0,0,0,0,3245\n",
      "516,0,157,359,6,1105,0,4,267,65,0,5,2,0,1135,7,8,124,118,154,0,41,16,0,0,21,0,0,100,0,0,12,32,0,0,0,710,0,0,2,0,0,2,0,0,0,0,5032\n",
      "1742,8,178,149,5,663,154,294,138,0,733,641,572,0,8,0,5,56,1,0,143,60,289,165,1,0,0,0,27,1,875,190,1,0,0,0,188,0,0,0,0,0,0,0,0,0,0,2713\n",
      "403,11,528,66,9,1232,2,18,40,0,486,272,19,725,33,163,212,51,237,819,197,0,23,0,0,1,34,0,1,0,0,7,784,0,0,85,14,0,0,361,0,244,0,0,0,0,0,2923\n",
      "1032,0,79,923,2,1913,41,1,27,0,76,7,0,0,96,0,2,2,270,180,1,0,108,102,0,28,5,0,4,0,21,192,3,0,0,0,134,364,0,5,0,15,0,0,0,0,0,4367\n",
      "686,0,4,514,142,809,71,317,1,822,3,40,6,3,121,0,106,993,7,24,0,126,141,23,144,2,0,38,194,0,10,227,234,0,0,60,71,0,0,295,0,0,0,0,0,0,0,3766\n",
      "790,0,311,722,5,1335,501,0,355,98,0,165,9,0,0,12,680,417,252,36,0,1,99,145,360,0,0,0,127,0,3,339,21,0,0,0,6,0,0,2,112,0,0,0,0,0,0,3097\n",
      "485,0,260,340,0,1539,278,59,1134,20,69,0,8,1,24,0,69,0,413,313,0,40,2,0,0,192,0,44,5,30,15,107,0,0,10,89,0,0,0,2,0,0,0,0,0,0,0,4452\n",
      "958,0,400,47,0,757,142,26,940,27,8,21,7,7,115,0,13,7,18,586,866,188,298,23,1,1,0,0,254,0,2,241,7,0,0,0,0,0,0,25,0,34,0,108,0,0,0,3873\n",
      "918,0,0,201,0,1001,96,438,398,0,53,0,44,1082,46,4,67,4,0,521,69,0,130,69,16,7,12,56,413,4,0,147,51,0,0,1,9,0,0,0,105,9,0,0,0,0,0,4029\n",
      "411,0,167,924,52,1156,262,6,36,0,0,341,0,0,5,0,3,0,22,2,13,1,9,0,0,0,0,3,54,0,97,7,0,0,0,15,0,124,0,1,0,0,0,0,0,0,0,6289\n",
      "339,0,15,411,0,2186,29,0,157,442,1430,0,1,1,79,362,20,5,232,22,0,102,269,761,0,7,0,7,635,0,1,0,43,0,0,0,146,0,0,23,5,0,0,0,0,0,0,2270\n",
      "833,0,5,668,102,1104,242,158,4,0,0,0,94,61,511,45,105,14,15,509,0,0,518,377,0,0,0,189,142,0,0,663,19,0,0,0,168,0,0,0,0,0,0,0,0,0,0,3454\n",
      "495,175,45,225,346,686,4,0,296,216,871,208,6,8,6,1,152,57,2,32,472,75,392,2,5,0,0,0,47,0,0,1,56,0,0,47,36,0,103,0,0,0,0,0,0,0,0,4933\n",
      "1712,401,927,98,602,1047,122,300,75,8,134,2,80,60,107,17,12,243,10,3,1,1,629,21,142,0,0,0,84,0,1,122,0,0,0,0,17,0,0,0,0,0,0,0,0,0,0,3022\n",
      "868,2,301,1600,0,1426,90,0,326,0,33,10,0,0,51,0,2,32,0,278,2,0,251,195,0,5,0,281,464,29,0,0,0,0,0,13,1,0,0,0,0,0,0,102,0,0,0,3638\n",
      "801,46,396,36,25,614,317,2,336,0,135,761,22,153,601,0,1,490,1,6,0,270,1,228,6,0,0,0,47,0,1,13,328,0,0,0,223,0,0,0,0,0,27,0,0,0,0,4113\n",
      "1346,0,2,1381,0,263,8,55,1540,245,8,0,0,0,397,77,95,28,1,72,0,0,194,1,0,11,3,0,160,0,4,3,31,0,17,0,1,1434,0,0,0,0,0,0,0,0,0,2623\n",
      "1284,23,18,841,0,400,3,114,156,0,8,28,128,13,982,14,1165,22,65,2,0,3,0,0,40,0,415,1,242,0,0,79,0,0,0,1098,222,0,71,0,0,0,0,0,0,11,0,2552\n",
      "607,0,576,56,84,2713,226,1,139,414,253,30,73,37,278,297,0,43,96,1,0,0,30,0,0,0,5,4,16,0,12,277,25,0,0,54,6,0,0,0,0,0,0,0,0,0,0,3647\n",
      "1352,294,105,144,5,1227,135,83,564,70,44,0,85,20,0,43,19,172,121,531,18,47,9,3,214,109,0,0,19,0,0,551,3,0,0,0,3,0,49,0,0,0,0,0,412,0,0,3549\n",
      "821,1,16,373,627,1000,0,107,17,0,32,223,20,256,234,3,0,0,201,483,0,0,98,4,0,0,0,0,454,0,79,204,71,0,0,0,71,0,6,0,0,0,0,0,0,0,0,4599\n",
      "1738,0,212,220,0,2270,46,1,115,7,0,132,11,0,2,0,0,6,58,624,65,0,85,1,0,0,41,14,236,0,0,14,0,0,0,4,3,0,0,0,47,779,7,0,0,0,0,3262\n",
      "1392,0,549,401,3,1178,0,29,543,21,14,19,407,43,0,960,519,605,82,9,0,0,173,0,0,0,0,0,9,11,0,63,1,0,0,0,7,0,0,211,10,0,0,0,0,0,0,2741\n",
      "1431,3,135,770,1,1706,83,78,49,0,15,2,132,358,755,38,0,162,241,113,0,10,11,117,0,38,8,149,117,0,0,852,4,60,0,0,0,0,6,18,68,5,0,0,0,0,0,2465\n",
      "737,0,630,579,59,882,176,67,257,8,108,170,53,101,91,0,10,0,3,153,49,568,609,42,0,0,0,0,17,45,1,1,2,7,0,0,157,0,0,1,0,0,0,0,0,0,0,4417\n",
      "856,0,61,112,0,926,31,13,244,719,41,318,13,226,30,1,0,76,2,45,1,0,119,21,0,43,3,55,33,0,2,193,88,0,0,0,284,0,226,104,5,0,0,0,0,0,0,5109\n",
      "1278,0,202,11,0,466,585,34,42,15,3,766,0,0,51,74,8,6,88,213,0,77,412,1,0,0,0,35,1026,254,0,340,0,0,0,22,43,0,0,0,0,2,0,0,0,0,0,3946\n",
      "1416,0,262,206,2,1344,79,0,267,0,0,9,265,0,381,4,1,0,92,66,18,454,37,4,0,36,0,31,64,0,45,47,0,0,0,1,47,278,1,0,0,0,0,0,0,0,0,4543\n",
      "474,257,445,354,1,782,362,883,517,192,0,179,16,11,284,0,502,0,14,112,0,3,171,0,0,262,0,0,152,0,0,27,10,0,0,0,0,0,0,18,0,0,0,0,0,0,0,3972\n",
      "1770,1,457,176,0,1569,22,43,6,76,91,37,41,0,405,3,1,4,121,1,0,0,837,1,1,0,206,2,147,0,0,10,1,0,0,1,232,0,0,0,1,0,0,0,0,6,0,3731\n",
      "985,0,117,12,0,2989,45,101,259,0,143,0,12,91,170,35,316,11,194,73,0,6,220,1,116,145,19,1,26,0,0,284,289,0,0,0,99,0,0,0,0,0,0,0,0,0,0,3241\n",
      "515,0,14,793,0,934,34,148,52,40,257,5,4,1,172,0,25,18,316,232,749,0,20,2,0,151,0,0,238,4,3,443,100,0,0,0,12,0,0,0,0,0,0,23,0,0,0,4695\n",
      "781,2,203,80,303,2262,13,289,211,2,11,0,11,1,12,257,0,0,119,23,7,4,1,1,0,0,0,0,174,0,6,129,8,0,0,63,727,0,0,0,1,0,0,0,0,0,0,4299\n",
      "1298,0,201,1111,0,1798,494,37,246,26,516,117,22,106,103,8,64,109,200,59,0,23,381,8,0,0,0,0,6,0,0,47,9,0,0,0,6,0,0,0,0,0,0,158,0,0,0,2847\n",
      "567,9,3,691,8,2506,363,0,690,0,0,55,47,53,7,58,758,86,35,10,64,6,22,270,7,16,0,0,108,0,1,4,232,40,0,0,142,0,1,0,0,2,0,0,0,0,0,3139\n",
      "739,7,2126,10,1,1043,1,1,299,0,15,5,15,21,13,0,40,315,11,0,73,68,1,0,0,0,1,0,218,0,44,0,1,0,0,0,67,0,0,28,0,0,0,0,0,0,0,4837\n",
      "872,66,22,547,0,1893,6,0,145,0,596,0,73,0,6,106,8,88,16,0,2,6,1,0,5,85,5,0,318,0,0,647,0,0,0,9,7,0,0,17,0,1,0,37,0,0,0,4416\n",
      "713,0,49,735,0,1435,32,116,2,27,10,1,1,0,27,4,201,2,9,278,163,254,0,1,7,211,0,0,776,0,0,366,2,0,0,0,34,0,0,3,0,0,401,0,0,0,0,4140\n",
      "771,0,12,39,28,1187,196,0,134,55,335,625,2,3,410,90,229,0,707,8,1,1,157,24,87,0,5,0,113,0,0,785,21,0,0,4,120,0,0,2,194,174,125,0,0,0,0,3356\n",
      "1481,14,179,39,2,2218,67,5,161,566,172,135,51,0,3,111,12,63,5,2,4,0,262,4,26,2,1,0,0,0,0,59,0,0,0,51,0,0,25,1,0,0,0,0,0,0,0,4279\n",
      "1519,0,16,895,3,1688,8,0,17,0,18,1,18,0,162,33,428,0,755,0,0,0,9,0,0,242,0,0,178,0,109,82,0,0,7,0,24,0,0,150,0,0,0,0,0,0,0,3638\n",
      "433,15,551,1771,0,1665,82,24,39,1,38,0,12,203,1,2,4,15,346,2,0,299,296,127,57,0,0,0,27,0,0,7,26,0,0,0,147,0,0,13,0,0,0,114,0,0,0,3683\n",
      "453,6,855,102,6,401,14,39,165,111,14,0,30,196,873,741,12,2,91,466,11,268,383,38,0,0,0,350,4,0,296,0,3,0,0,56,2,150,155,0,1,0,1,0,0,0,0,3705\n",
      "333,0,74,306,0,1686,314,0,18,0,188,5,93,260,757,7,52,120,331,368,48,105,0,12,311,2,19,0,81,0,27,771,3,0,1,0,856,0,0,0,0,0,6,0,0,4,0,2842\n",
      "556,0,522,390,116,2173,423,5,8,0,10,1,435,0,59,0,0,19,160,250,32,5,125,25,0,0,0,0,4,0,286,84,95,0,0,39,67,0,0,0,0,1,0,0,0,0,0,4110\n",
      "414,49,474,719,0,511,227,2,582,348,0,3,63,36,27,542,109,1,26,374,30,71,0,37,0,42,0,88,79,0,0,1186,90,0,0,0,136,0,0,0,0,0,100,0,0,0,0,3634\n",
      "1373,4,568,563,271,1931,108,0,91,10,87,8,45,52,20,34,4,160,13,49,39,0,6,1,0,13,23,0,4,55,35,393,4,0,0,135,130,0,0,0,0,0,123,0,0,0,0,3648\n",
      "301,899,12,416,0,2128,742,514,4,0,122,300,45,10,24,1,514,322,563,72,0,191,62,0,0,0,0,0,553,0,39,0,0,0,0,6,356,0,0,15,0,0,0,0,0,0,0,1789\n",
      "1567,0,90,89,0,1502,234,3,84,0,97,1,54,31,66,0,262,0,47,260,0,0,2,0,0,0,8,0,261,0,0,372,295,0,0,2,3,0,0,0,0,35,0,0,0,0,0,4635\n",
      "600,0,2,134,66,1859,237,1349,369,15,117,2,16,167,40,88,122,1,170,8,302,0,224,145,2,1,204,0,0,0,13,57,0,0,0,42,69,0,0,65,0,0,0,0,0,0,0,3514\n",
      "1194,5,60,625,2,767,28,6,993,0,2,21,20,78,57,95,36,1,5,0,0,12,649,0,1,0,1,9,214,563,0,76,35,60,0,0,3,0,0,0,1,45,0,90,0,0,0,4246\n",
      "1132,0,55,319,13,1916,347,0,1433,5,0,0,4,0,8,28,4,39,92,0,4,0,304,0,0,4,0,0,67,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4226\n",
      "1612,0,567,31,15,1688,122,5,914,44,17,10,1,0,0,5,1,40,308,39,4,15,191,3,0,130,0,206,0,0,0,1037,4,0,0,0,16,0,0,0,0,0,0,0,0,0,0,2975\n",
      "590,0,1063,572,0,1369,49,0,464,19,0,10,0,3,7,135,15,8,631,6,2,71,113,0,0,41,0,214,98,36,0,0,254,0,0,0,110,0,0,9,40,0,0,0,0,0,0,4071\n",
      "893,0,808,66,0,1693,68,0,49,3,5,1,0,0,1098,3,0,0,1,1245,0,102,121,0,319,0,0,0,27,0,0,95,0,0,0,0,3,0,0,0,0,13,44,0,0,3,0,3340\n",
      "1506,107,458,203,0,927,291,0,7,27,325,66,182,260,333,12,22,239,41,27,0,4,14,0,0,0,1,1,876,0,0,19,111,2,0,3,4,0,3,8,0,0,0,0,0,0,0,3921\n",
      "1477,337,68,64,0,883,349,1,433,0,97,8,2,0,148,0,6,44,737,89,14,21,343,0,0,34,16,197,188,0,225,10,6,0,0,165,273,0,0,0,0,0,486,0,0,0,0,3279\n",
      "1104,0,400,477,0,2141,778,11,175,1,0,33,13,8,8,334,0,8,375,79,0,19,1,26,0,0,2,34,1,0,0,264,0,0,0,0,242,0,0,0,0,0,7,0,0,0,0,3459\n",
      "558,0,71,135,115,1696,64,5,13,51,0,58,0,409,4,0,362,326,34,18,14,0,362,24,0,0,9,0,39,1,5,130,2838,0,0,0,0,0,0,0,0,0,8,0,0,0,0,2651\n",
      "1975,0,260,521,0,1104,9,33,865,0,152,117,19,102,191,75,259,8,675,0,0,15,116,5,0,0,137,37,242,1,0,559,8,0,26,0,58,0,0,1,0,0,249,0,0,0,0,2181\n",
      "1645,0,69,57,0,1124,171,2,10,9,85,14,48,214,23,0,260,36,41,236,0,101,21,2,0,49,47,25,765,0,6,469,2020,1,0,1,223,0,0,0,0,0,0,0,0,0,0,2226\n",
      "613,1,118,702,61,1103,84,23,903,0,267,36,0,19,128,15,4,35,168,343,0,0,576,38,0,28,0,261,21,1,246,52,21,0,0,6,0,0,0,49,0,1433,0,0,0,0,0,2645\n",
      "1087,0,13,196,4,779,0,22,111,73,182,0,111,0,90,11,28,0,5,0,0,86,37,215,88,4,411,0,158,0,1,986,34,0,0,0,1,0,0,0,51,0,0,0,0,0,0,5216\n",
      "362,0,765,207,0,947,1,31,1,23,483,0,31,1,133,93,371,2,326,142,123,0,821,59,0,14,0,17,1029,0,323,128,0,0,0,373,46,0,32,0,2,0,0,0,0,0,0,3114\n",
      "452,0,884,58,31,2294,4,7,352,0,2,2,113,0,122,40,401,0,0,63,0,6,123,14,0,20,16,31,839,0,5,715,0,0,0,0,17,0,0,1,0,0,3,0,0,0,0,3385\n",
      "492,0,7,314,0,525,108,14,158,0,36,0,32,0,77,90,746,427,275,329,0,0,1349,7,0,791,52,66,124,0,0,2,2,0,0,2,83,0,0,0,0,0,0,0,0,0,0,3892\n",
      "1667,32,88,1600,1,919,3,0,2,190,427,0,0,2,18,0,2,94,64,131,0,0,2,2,0,0,0,0,207,14,417,550,1,0,0,0,95,0,0,6,0,0,0,0,0,0,0,3466\n",
      "416,2,131,438,12,453,33,2,291,7,21,48,346,18,219,4,20,786,189,37,4,3,0,1,0,0,0,1010,827,0,89,633,198,0,0,3,2,0,0,2,0,0,0,73,0,0,0,3682\n",
      "909,0,24,963,62,507,2,274,32,0,0,10,1,9,18,125,172,356,7,0,0,0,96,0,0,397,0,0,6,1,15,33,241,0,0,20,90,0,0,11,0,0,0,0,0,0,0,5619\n",
      "907,0,217,226,0,2147,64,1,88,2,3,0,743,19,3,3,0,18,417,1,0,0,65,0,0,465,35,0,109,0,9,182,8,0,0,0,169,0,0,0,0,0,2,0,0,0,0,4097\n",
      "1136,0,733,122,0,984,3,17,166,31,34,64,3,577,21,0,447,44,401,146,0,0,16,0,0,0,493,35,474,0,0,59,152,0,0,2,54,0,0,144,0,0,0,0,0,0,0,3642\n",
      "406,546,178,890,0,1139,9,7,536,2,82,66,0,13,21,16,3,0,6,11,742,42,4,356,0,42,69,21,14,0,206,176,119,0,0,0,151,0,0,214,0,0,0,0,0,0,0,3913\n",
      "796,2,130,562,2,2172,328,33,249,48,0,49,0,18,299,7,3,48,12,399,0,0,339,0,4,0,0,120,184,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,4192\n",
      "1220,0,6,251,3,1346,40,1,82,0,29,5,1,0,274,0,1,271,10,539,94,30,42,4,331,0,0,25,234,74,2,318,0,0,0,3,293,0,0,0,0,0,84,0,0,0,0,4387\n",
      "566,0,311,516,54,2134,9,0,464,0,410,86,0,3,0,1,1,334,358,3,75,112,1029,0,15,0,12,0,61,0,100,55,55,0,0,0,0,75,0,0,0,0,0,0,0,0,0,3161\n",
      "1459,655,158,840,88,755,5,3,85,167,16,11,10,349,0,30,1059,0,59,1,108,248,154,0,0,0,0,24,985,0,3,537,12,0,0,0,9,0,0,37,0,0,0,0,0,2,0,2131\n",
      "3792,189,164,134,18,579,32,30,169,7,289,2,1272,0,1,6,0,0,2,0,0,0,49,2,0,49,234,39,216,0,0,52,16,4,0,0,4,0,0,4,0,1,0,0,0,0,0,2644\n",
      "927,0,69,321,0,2055,67,0,488,64,12,0,124,1,639,1,26,27,1,255,0,1,124,0,0,46,0,0,87,0,1709,424,139,0,0,0,0,0,0,92,186,1,0,0,0,0,0,2114\n",
      "620,50,7,194,0,1378,238,2,729,734,86,0,0,11,9,39,410,184,81,355,222,0,391,0,0,0,0,17,30,0,0,77,149,0,0,104,433,0,146,4,0,0,0,0,150,0,0,3150\n",
      "588,14,542,753,0,496,48,67,392,95,137,330,205,454,161,0,0,10,158,25,12,18,26,22,0,0,1,0,595,0,0,599,7,0,0,0,28,0,0,139,0,0,0,0,0,0,0,4078\n",
      "699,0,493,733,0,1161,0,0,231,32,234,38,12,2,513,3,5,32,1353,1,6,13,0,0,0,0,116,24,44,26,0,633,3,0,0,0,124,0,0,138,0,0,0,0,0,0,0,3331\n",
      "658,228,329,144,130,543,289,41,127,0,552,71,6,6,31,0,123,0,109,10,0,2,780,0,1,36,0,74,572,0,0,131,41,0,0,0,0,0,0,0,0,0,0,0,0,81,0,4885\n",
      "1887,0,84,241,0,1164,450,0,102,0,0,13,2,0,183,45,0,0,266,4,0,0,0,0,89,0,0,0,196,0,1,68,53,0,0,0,207,0,0,0,0,0,0,0,0,0,0,4945\n",
      "986,35,125,227,56,2076,285,5,35,340,94,6,1,2,322,0,255,399,72,80,0,154,36,0,0,0,32,3,390,0,0,0,287,0,0,19,155,6,347,121,7,0,3,0,0,0,0,3039\n",
      "1893,0,93,27,0,1110,556,3,86,37,415,13,137,0,280,0,12,19,625,111,81,77,274,0,47,0,0,5,489,0,0,127,33,0,0,0,75,0,0,22,0,0,0,0,0,0,0,3353\n",
      "3284,0,190,93,0,1281,240,20,788,2,128,94,28,3,93,0,19,26,3,1,0,142,935,2,17,8,0,24,353,0,0,314,1,0,0,0,22,0,0,2,0,0,0,0,0,0,0,1887\n",
      "1466,56,283,271,0,1237,45,23,1231,0,24,1,186,495,47,456,459,4,0,68,0,0,82,53,0,61,1,6,142,0,207,331,1,0,0,0,49,0,0,0,4,31,0,91,1,0,0,2588\n",
      "575,0,527,951,540,1564,512,140,225,30,64,5,0,292,20,31,8,8,41,27,1,70,713,60,0,1,162,0,160,0,0,4,18,0,2,0,209,0,0,0,0,0,56,0,0,0,0,2984\n",
      "348,5,20,383,0,2484,145,36,1552,7,20,34,358,4,63,4,0,1,38,9,1,33,17,16,0,2,16,4,900,0,506,87,0,0,634,0,82,0,0,0,39,0,0,12,0,0,0,2140\n",
      "688,23,34,472,0,1130,199,0,95,55,4,336,519,107,83,910,100,199,443,0,0,1,98,0,7,16,37,9,367,0,0,107,299,0,0,0,39,0,0,114,0,0,0,0,0,0,0,3509\n",
      "1064,34,497,480,0,917,189,0,135,0,72,70,94,177,36,3,288,0,561,65,1,119,38,17,0,0,0,44,14,0,0,983,0,0,0,0,193,0,0,0,550,12,0,159,0,0,0,3188\n",
      "281,7,248,68,0,1303,7,21,1307,0,55,34,407,188,32,0,272,2,188,242,0,3,467,0,0,109,0,0,739,0,0,47,0,0,10,0,5,0,0,0,2,0,0,0,0,0,0,3956\n",
      "698,34,61,443,15,1225,526,21,209,1,53,0,972,9,2,70,78,0,27,13,0,1,21,9,0,42,55,46,36,366,3,1536,6,0,0,308,830,0,0,0,1,0,0,0,0,0,0,2283\n",
      "941,3,92,478,85,1584,118,66,366,0,163,0,4,0,6,8,4,745,3,40,0,0,0,0,0,0,17,0,278,0,0,227,92,0,0,0,0,0,191,808,0,0,0,0,0,0,0,3681\n",
      "1036,0,336,1014,390,1206,8,175,448,11,552,760,110,4,27,26,10,0,1159,61,14,277,7,0,0,0,0,63,20,0,16,89,16,0,0,3,94,0,0,0,5,0,0,0,0,0,0,2063\n",
      "1644,143,417,92,0,1004,0,0,212,0,4,6,52,0,1,16,1508,2,0,71,1,321,144,209,1,33,0,0,7,0,0,31,0,0,0,0,761,0,0,0,0,31,0,0,0,0,0,3289\n",
      "848,0,495,336,0,897,93,14,402,10,41,0,537,32,122,0,55,2,678,95,0,3,124,4,0,0,0,0,58,0,15,1,5,0,0,1,145,0,0,0,0,0,0,0,0,0,0,4987\n",
      "574,0,317,214,274,1495,4,42,136,44,270,248,0,17,54,2,565,226,423,561,0,97,94,0,0,0,0,1,4,0,0,47,128,0,0,0,0,0,0,0,363,0,0,0,0,0,0,3800\n",
      "425,0,70,509,0,630,1010,4,42,0,564,28,464,0,883,47,30,161,16,1,15,43,150,0,0,11,0,0,299,0,38,9,16,0,0,138,0,0,0,0,0,0,0,0,0,0,11,4386\n",
      "224,14,81,992,26,1298,11,3,447,23,3,0,0,10,61,290,5,38,226,612,12,160,2,0,0,103,0,0,6,0,0,60,0,0,0,0,220,0,0,0,9,0,0,0,0,0,0,5064\n",
      "365,41,430,90,13,2312,737,105,81,0,118,287,0,44,80,7,20,0,105,228,0,0,348,507,1,2,573,0,5,0,0,80,88,0,0,1,115,0,0,0,0,0,0,0,0,0,0,3217\n",
      "502,0,575,76,0,2389,9,0,6,18,179,0,3,282,17,0,288,74,212,400,89,2,33,0,0,0,112,229,244,0,36,91,1,0,0,0,214,0,0,574,0,0,0,0,0,19,0,3326\n",
      "1114,0,29,287,0,997,247,0,119,0,10,58,178,1,155,62,21,259,106,16,0,0,10,0,0,89,0,17,2707,0,16,9,486,0,0,0,12,0,0,0,0,0,1,0,0,0,0,2994\n",
      "1347,94,98,386,30,1258,42,3,583,4,114,5,2,407,50,0,5,2,62,0,0,0,721,58,0,0,2,3,54,0,0,29,23,0,0,0,413,0,0,0,5,0,0,0,0,0,0,4200\n",
      "1773,0,1120,908,0,1288,537,0,398,0,59,0,0,0,12,0,374,3,41,553,2,18,82,0,0,0,14,0,43,0,0,49,108,0,0,0,2,0,0,1,0,0,0,0,0,0,0,2615\n",
      "218,7,1069,72,0,2185,50,10,761,28,1,0,76,14,55,35,5,0,199,163,500,8,0,0,0,6,0,0,414,0,0,508,0,0,0,0,43,0,0,4,1,55,17,0,0,0,0,3496\n",
      "374,0,739,61,102,1229,18,157,313,0,33,0,4,3,480,183,25,3,135,7,0,379,185,0,0,156,43,0,143,0,0,33,0,0,0,0,116,0,0,1,0,0,416,0,0,0,0,4662\n",
      "1292,13,139,600,0,942,49,14,160,19,27,802,0,1,0,0,96,0,0,251,0,0,88,0,12,0,1,4,721,0,132,245,278,0,0,5,0,0,0,91,0,1,0,0,0,0,0,4017\n",
      "1139,0,162,109,248,1633,35,174,69,0,43,15,3,252,5,3,82,3,3,0,158,12,268,20,160,0,1,0,761,7,20,1048,38,0,0,47,215,0,0,0,0,0,36,0,0,0,0,3231\n",
      "305,2,831,444,0,829,271,0,100,0,2,16,32,102,32,23,177,0,40,1,37,0,773,0,1,214,7,0,119,40,0,0,0,0,0,0,8,0,0,11,0,1,0,0,0,8,0,5574\n",
      "1332,0,75,457,0,1422,5,6,400,336,92,11,117,24,9,3,32,21,22,72,2,0,19,0,24,61,0,6,421,0,0,38,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,4991\n",
      "1153,62,423,313,130,335,569,51,527,16,59,1,339,0,98,3,590,0,52,129,0,78,308,8,0,131,0,1,74,0,107,124,97,0,0,0,0,0,0,2,0,0,0,0,0,0,0,4220\n",
      "1211,0,696,262,223,667,40,0,20,0,192,11,0,0,41,134,3,82,349,98,0,0,226,0,0,10,0,99,167,0,0,194,44,0,0,0,39,0,626,18,0,7,0,0,0,0,0,4541\n",
      "516,29,4,758,0,257,9,6,229,0,142,129,12,0,331,1,101,3,12,0,29,27,12,2,10,0,0,2299,20,0,0,71,0,0,0,10,1,0,0,0,0,0,0,0,0,0,0,4980\n",
      "1419,1,80,366,0,1020,277,37,61,47,88,9,0,0,215,123,3,102,54,1,2,0,136,8,202,9,0,11,226,36,0,32,1200,543,0,161,0,0,0,0,0,0,0,0,0,0,0,3531\n",
      "1633,0,469,187,458,863,107,549,23,6,85,23,2,123,1,52,662,19,62,231,0,44,689,0,0,4,0,26,865,0,0,18,30,0,0,0,2,10,60,0,82,0,0,0,0,0,0,2615\n",
      "1190,0,1,795,0,2127,0,7,264,0,1,3,22,0,6,4,763,83,253,90,0,16,136,0,0,309,0,0,363,0,0,334,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3233\n",
      "218,1,288,945,1,1264,91,0,7,16,557,584,1,94,11,0,1,0,314,15,84,30,54,112,0,11,0,44,248,0,0,675,27,0,0,0,55,0,0,13,0,0,0,0,0,0,0,4239\n",
      "1554,148,19,489,0,807,155,0,741,1,384,22,0,320,175,29,0,0,75,9,0,372,4,2,0,0,8,0,127,0,136,66,50,0,0,0,104,0,0,0,37,0,51,0,0,0,0,4115\n",
      "1282,217,48,193,5,1234,59,0,575,0,154,711,204,56,0,2,323,2,11,7,0,1,1306,4,0,365,1,1,397,0,64,11,173,0,0,0,60,0,0,0,0,0,0,0,0,0,0,2534\n",
      "422,0,1009,401,0,853,124,4,214,2,830,41,23,1,369,301,5,0,417,9,86,0,460,0,5,336,0,0,52,0,0,746,0,0,0,0,49,0,0,0,0,0,0,0,99,0,0,3142\n",
      "620,0,36,376,0,1487,173,0,30,135,522,7,88,1,13,3,0,147,395,41,137,0,235,15,0,22,0,5,380,0,0,2,42,0,0,54,226,0,0,694,0,0,0,0,0,0,0,4114\n",
      "1481,0,2,129,13,1399,301,6,334,40,133,701,6,19,4,8,615,99,204,52,25,3,109,0,1267,2,0,0,193,4,18,222,1,0,0,0,85,0,0,11,0,0,0,0,0,0,0,2514\n",
      "667,0,104,1446,1,1492,299,20,435,0,39,11,22,1,57,51,329,4,11,32,0,0,6,2,0,0,46,23,27,0,0,35,2,0,0,0,1151,0,0,0,0,2,0,0,0,0,0,3685\n",
      "3059,0,239,96,0,766,524,0,449,0,10,0,28,148,14,6,218,153,766,1,1,0,671,0,0,0,0,0,7,0,10,92,12,0,0,0,180,0,0,0,0,0,0,0,0,0,0,2550\n",
      "308,6,310,704,41,1370,32,0,135,0,29,71,4,0,388,3,91,0,239,291,3,0,34,1,0,21,0,0,630,0,0,0,2,0,1430,0,78,0,0,0,0,0,0,0,0,0,0,3779\n",
      "477,0,1432,677,0,2066,2,0,46,0,17,9,0,24,102,0,314,5,269,944,666,156,23,95,6,4,21,0,17,0,0,5,39,0,0,0,294,0,0,0,0,0,0,0,0,0,222,2068\n",
      "2427,0,392,921,0,657,159,8,182,3,65,0,16,80,9,105,162,0,41,366,0,0,5,1,0,0,0,11,388,46,0,37,5,0,0,0,118,0,0,0,0,0,0,0,0,0,0,3796\n",
      "1718,1,54,496,105,996,0,772,658,0,8,13,21,1,583,660,24,10,114,17,52,0,88,0,0,1,2,3,31,0,0,307,42,0,0,0,133,0,0,1,0,0,5,0,0,0,0,3084\n",
      "767,1,19,9,198,1551,85,0,663,18,10,69,38,18,205,46,73,88,327,12,0,0,242,1,1,7,0,0,47,0,0,1075,2,0,0,0,2,0,0,0,0,37,0,0,0,0,0,4389\n",
      "89,0,886,744,11,1267,426,35,26,0,492,227,120,340,63,1,346,540,14,0,0,31,0,0,0,1,0,0,52,0,0,624,3,0,0,87,115,0,0,0,0,0,0,0,0,0,0,3460\n",
      "1278,4,633,31,0,721,112,3,93,0,188,3,192,0,0,282,1076,1,180,446,0,0,511,10,1,0,0,92,578,0,69,6,104,0,0,0,11,0,225,0,0,0,0,0,0,0,0,3150\n",
      "919,0,57,44,114,1197,0,0,79,4,19,370,30,60,15,0,1,0,90,393,352,1,1831,442,7,0,0,175,25,0,0,25,82,0,0,1,10,0,0,76,0,0,0,7,0,0,0,3574\n",
      "834,3,44,213,12,1528,25,0,301,0,1621,270,17,2,10,230,28,6,74,596,63,119,0,0,0,0,23,0,92,0,447,29,291,0,0,0,17,0,1,8,0,0,0,0,0,0,0,3096\n",
      "771,429,1032,46,0,1951,61,467,168,0,30,0,1,0,625,0,18,49,14,197,190,0,50,13,0,59,0,0,555,0,3,0,141,0,0,0,45,0,0,17,0,0,0,0,0,0,0,3068\n",
      "1653,0,270,134,0,931,60,81,294,2,0,85,0,427,2,4,37,6,221,94,0,11,125,86,37,0,578,0,213,0,6,15,66,0,0,0,256,0,0,2,0,0,10,0,0,0,0,4294\n",
      "1223,0,101,327,361,1377,1270,12,832,0,57,0,498,510,78,17,4,0,36,61,1,1,119,740,3,0,0,0,44,0,0,79,47,0,0,0,184,0,0,0,0,0,0,0,0,23,0,1995\n",
      "1353,274,322,83,0,1332,21,7,94,2,828,60,718,0,142,143,22,17,151,194,0,0,123,0,0,158,4,4,43,0,0,58,56,0,0,1,118,0,0,0,0,0,0,0,0,0,0,3672\n",
      "664,0,300,970,0,2394,949,192,232,0,3,0,0,36,12,5,0,0,4,92,0,1,50,44,0,0,79,8,118,0,9,57,75,0,0,3,455,0,0,0,13,0,0,0,0,340,0,2895\n",
      "350,40,59,876,436,352,47,6,212,0,4,103,1,139,0,2,345,164,67,3,3,0,38,0,0,0,0,3,22,0,0,376,2044,33,0,107,4,0,2,0,0,0,1,0,0,0,0,4161\n",
      "606,1,80,473,0,2120,35,0,77,0,17,0,124,0,621,263,102,125,224,59,0,1,60,0,2,11,0,0,225,0,0,71,49,0,0,45,65,0,0,2,0,0,8,0,0,0,0,4534\n",
      "1649,0,698,211,0,1057,586,696,198,0,0,165,0,6,59,217,34,0,0,236,2,0,803,0,0,1,13,65,358,0,0,19,36,0,0,0,73,0,0,34,0,0,706,0,0,0,0,2078\n",
      "785,15,265,1620,0,1371,9,109,0,11,254,2,0,0,10,0,174,1,591,46,12,1,595,0,0,47,0,0,294,0,0,115,25,0,0,0,39,0,0,0,1,0,0,0,0,0,0,3608\n",
      "2242,163,49,411,268,907,78,1,73,2,51,8,0,161,0,107,3,5,11,381,14,1,30,0,0,0,0,2,22,0,0,384,24,0,0,0,374,0,0,6,0,0,35,0,0,0,0,4187\n",
      "539,0,185,283,0,1077,662,0,89,0,262,177,5,1,294,5,91,644,125,3,2,0,100,5,31,5,2,0,3,0,1,47,134,0,0,0,1,0,0,345,0,0,0,0,0,0,0,4882\n",
      "498,0,15,430,7,2210,14,7,447,0,51,89,23,41,8,72,6,0,1098,64,3,16,28,0,80,130,0,0,106,0,5,229,122,0,0,12,0,0,0,412,0,0,0,0,0,0,0,3777\n",
      "2077,64,122,145,4,234,238,0,62,0,180,0,11,162,69,41,68,4,54,627,0,21,270,23,0,8,5,18,210,0,65,464,31,0,0,0,0,0,0,70,0,0,0,0,0,0,0,4653\n",
      "336,137,300,131,0,1477,0,336,175,43,23,73,97,0,49,12,62,3,1023,248,0,564,42,0,0,43,0,95,13,0,0,281,4,0,0,5,132,0,610,4,0,0,0,0,0,0,0,3682\n",
      "675,17,257,1364,4,1092,192,1,28,100,122,853,1,1,159,110,0,3,12,2,244,25,6,0,0,0,11,0,337,0,0,171,540,0,0,0,75,0,0,6,55,0,0,0,0,0,0,3537\n",
      "370,168,100,509,0,1800,68,88,94,21,0,206,37,1,554,0,68,210,9,123,47,0,300,0,0,10,18,1,269,0,0,0,1,0,0,0,7,3,32,0,0,0,0,0,0,0,0,4886\n",
      "1317,0,70,140,0,1820,91,11,239,0,2,0,4,2,100,0,15,0,435,677,58,0,0,0,0,0,0,92,568,0,0,308,672,0,0,1,21,0,0,0,2,0,5,0,0,0,0,3350\n",
      "579,386,234,538,0,504,276,4,510,23,388,19,3,1091,523,13,128,153,24,109,266,0,45,0,0,1500,39,6,41,14,0,0,3,4,0,0,99,0,2,2,0,49,0,0,0,83,0,2342\n",
      "1682,456,1,282,0,2567,178,1,24,0,149,0,17,2,94,6,1,1,1,34,0,0,119,21,0,219,0,0,161,0,13,43,17,0,0,0,16,0,191,0,0,0,0,0,0,0,0,3704\n",
      "141,0,216,386,3,2963,63,139,531,0,391,25,108,57,57,0,8,35,296,344,0,0,516,550,0,645,4,0,152,0,0,78,18,0,0,356,18,0,0,16,0,1,0,0,0,0,0,1883\n",
      "889,0,114,41,0,1047,86,0,237,33,295,0,1084,0,151,10,1,1,18,197,804,0,12,0,1,0,0,0,306,0,0,488,25,0,0,6,153,0,0,267,37,0,0,0,0,0,0,3697\n",
      "651,19,3,239,21,1139,124,0,237,1,153,13,107,180,89,2,1,0,808,311,0,11,754,107,0,1,0,124,94,0,1,294,519,0,0,0,1,0,0,10,0,0,21,0,0,0,0,3965\n",
      "1772,1,73,124,0,1448,29,5,216,0,75,223,23,2,1,45,2,46,169,172,3,0,324,468,572,36,0,3,120,0,0,17,0,0,0,0,32,0,0,0,0,0,840,0,0,0,0,3159\n",
      "404,69,667,359,18,2233,315,48,346,3,7,0,111,0,22,0,5,85,627,91,8,0,258,0,6,0,386,0,20,0,0,190,0,0,0,3,19,0,0,22,1,0,0,0,0,0,0,3677\n",
      "1213,0,0,691,5,802,146,342,122,3,8,82,27,6,1,0,0,30,86,22,0,3,57,134,426,67,0,36,31,0,194,11,118,0,0,0,189,0,0,0,9,0,0,0,0,0,0,5139\n",
      "512,0,163,736,33,644,504,5,1133,0,2,248,0,119,2,24,948,193,76,185,0,0,152,56,0,0,1,0,95,0,0,11,211,0,0,0,29,0,0,0,0,0,0,0,0,0,0,3918\n",
      "824,0,784,149,0,1054,315,8,274,0,706,0,234,2,2,2,105,59,107,136,0,118,22,19,0,59,140,359,29,0,152,11,0,0,0,0,9,0,0,2,0,0,0,0,0,0,0,4319\n",
      "1266,6,111,19,0,402,8,8,85,0,125,14,699,0,21,70,154,0,873,119,0,133,108,0,17,16,0,7,136,0,4,1,0,0,0,0,30,0,0,0,0,0,0,0,0,0,7,5561\n",
      "1285,9,291,151,2,585,881,144,255,110,140,5,2,0,113,4,1,304,257,11,118,0,304,0,0,0,6,7,149,11,0,53,351,0,0,16,316,0,370,0,0,0,0,0,0,0,0,3749\n",
      "642,47,275,1277,0,1960,56,31,844,36,14,61,648,1,0,0,5,0,282,149,0,13,59,0,0,3,0,0,535,0,0,439,52,0,0,0,55,0,0,0,0,0,0,0,0,0,0,2516\n",
      "837,1,45,474,2,2891,342,0,257,0,26,227,0,20,88,0,1,40,164,521,0,154,66,0,0,0,7,397,21,0,2,17,0,20,0,2,165,0,0,0,16,0,0,0,0,0,0,3197\n",
      "455,37,141,1268,17,1874,5,14,470,2,37,15,0,1,592,120,4,0,161,120,9,1,9,0,0,2,0,0,6,0,1,817,2,0,0,0,311,0,0,11,0,0,0,0,0,0,0,3498\n",
      "340,196,33,399,0,1463,1,1,291,63,32,2,0,0,193,7,12,48,81,151,3,71,0,0,0,1,0,0,8,0,381,574,362,0,0,0,365,0,0,0,0,0,0,0,0,0,0,4922\n",
      "619,0,195,195,0,162,40,45,1162,0,1769,57,254,0,849,0,406,32,7,327,0,90,116,0,0,93,3,0,103,28,0,24,0,0,0,53,48,0,0,0,0,0,0,0,0,0,0,3323\n",
      "1393,242,421,428,0,421,0,2,126,0,12,0,1560,106,3,417,1,3,79,730,0,187,46,0,0,0,0,1033,227,0,0,7,5,0,0,113,2,0,0,0,0,11,1,0,0,0,0,2424\n",
      "309,1,205,1287,36,407,27,11,354,0,44,24,393,123,116,0,0,37,335,3,0,262,403,0,0,73,0,1,41,0,0,104,192,0,0,0,55,0,0,113,0,0,0,3,0,0,0,5041\n",
      "806,1,364,21,14,2121,301,5,242,0,69,9,73,0,38,0,4,59,0,128,27,6,181,0,0,37,0,0,76,0,2,106,0,0,0,3,219,0,0,0,0,0,0,0,0,0,0,5088\n",
      "417,23,35,162,218,1829,15,72,661,1,535,39,71,14,1,54,75,85,83,29,378,271,114,34,0,2,0,15,576,0,105,149,459,0,0,0,194,0,0,0,0,0,30,0,0,0,0,3254\n",
      "476,0,731,456,2,753,64,6,320,169,21,326,90,0,82,1,9,0,190,63,113,2,0,228,0,52,0,0,5,0,1,20,7,0,0,0,135,0,0,0,2,0,0,0,0,0,0,5676\n",
      "654,0,350,359,9,3490,185,128,52,0,0,1,62,18,25,0,270,8,13,31,4,0,14,0,0,22,0,738,193,0,26,282,2,0,0,0,3,0,5,8,0,0,0,0,0,0,0,3048\n",
      "1968,0,158,87,136,1509,400,9,514,0,215,105,9,0,0,5,3,0,3,6,0,0,224,6,0,4,0,0,71,0,1,2,516,0,0,0,358,0,0,12,1,0,0,0,0,0,0,3678\n",
      "916,0,461,93,4,948,198,2,696,36,37,22,1,114,403,0,121,406,262,145,6,7,270,178,0,0,91,12,164,0,0,289,204,6,0,0,16,0,0,0,0,0,0,0,0,0,0,3892\n",
      "582,8,154,648,0,1592,86,0,328,16,72,0,2,0,149,172,0,38,411,1131,0,0,154,0,0,5,0,0,407,0,0,1163,31,0,0,0,1,2,0,0,0,0,8,0,0,0,0,2840\n",
      "2567,0,18,552,0,636,1,22,92,3,104,12,0,0,34,50,71,222,117,61,0,287,130,0,0,0,0,10,334,0,0,705,6,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3963\n",
      "2108,360,303,392,38,675,67,0,242,2,1,19,92,214,171,0,151,55,13,44,11,0,37,37,0,0,0,2,512,0,0,82,61,0,0,0,0,0,0,3,3,0,0,0,0,0,0,4305\n",
      "330,48,33,473,0,1585,3,22,544,0,14,360,303,0,98,5,0,0,158,3,14,68,310,17,0,27,0,427,81,344,2,61,0,0,0,0,248,0,0,23,0,0,5,0,0,0,0,4394\n",
      "1329,0,83,35,0,549,11,12,581,42,110,0,20,0,3,8,645,414,38,164,2,0,216,356,0,3,4,1185,81,0,0,245,2,0,0,1,239,0,0,4,0,1,0,0,0,0,0,3617\n",
      "1427,13,693,601,0,1213,386,6,625,132,239,0,83,0,1,1,1,14,24,102,0,0,2,0,12,139,0,16,737,420,0,91,0,0,0,2,19,0,0,0,0,0,7,0,0,0,0,2994\n",
      "342,0,443,126,0,1407,279,2,23,136,49,29,69,0,155,466,54,0,1524,380,0,0,15,30,0,0,0,0,539,0,0,31,0,0,0,23,87,0,0,3,0,0,0,0,0,0,0,3788\n",
      "1715,45,316,74,0,1104,621,3,3,585,4,11,19,2,164,0,78,0,5,4,0,0,329,0,35,186,3,0,109,144,0,632,21,0,0,0,345,0,0,0,428,1,0,0,0,0,0,3014\n",
      "1954,7,208,411,67,408,74,484,3,0,964,0,13,37,762,5,0,0,252,2,69,0,794,0,14,394,0,0,81,0,29,586,66,0,0,4,2,0,27,0,0,0,0,0,0,0,0,2283\n",
      "1653,6,734,542,0,1336,14,0,168,117,215,15,83,0,2,22,10,0,0,414,43,0,4,27,0,452,345,0,5,0,39,8,146,342,0,0,2,0,0,0,2,0,0,0,0,0,0,3254\n",
      "193,0,165,159,1,1135,17,0,299,8,267,14,404,47,74,4,168,140,0,333,0,3,37,0,0,0,0,0,24,0,34,118,0,0,0,0,1,0,113,21,0,0,0,0,0,0,0,6221\n",
      "634,256,1116,380,0,1302,276,124,625,0,69,2,34,0,0,10,6,84,349,5,34,134,38,0,0,0,0,0,8,0,95,12,41,0,0,1,27,0,0,1,0,0,1,0,0,0,0,4336\n",
      "3030,198,284,1115,0,882,108,1,994,0,148,60,309,0,2,0,1,204,64,0,1,210,170,7,0,0,0,33,400,0,60,11,7,0,0,0,0,0,0,0,20,5,0,0,0,0,0,1676\n",
      "1446,1,4,31,112,2389,128,8,749,1,365,10,0,0,15,0,4,5,87,347,166,165,405,0,45,157,0,26,98,0,31,5,31,0,0,0,2,0,0,0,0,5,0,0,0,0,0,3162\n",
      "286,184,262,1199,47,1230,254,72,153,0,236,1,4,0,149,59,3,0,19,0,124,0,221,3,1,0,0,430,152,0,71,311,234,0,0,4,251,0,0,0,2,0,0,0,0,0,0,4038\n",
      "1747,0,315,71,0,1212,70,811,219,7,153,4,0,0,50,1,83,74,24,639,1,0,10,0,0,1,4,0,2,43,1,333,0,52,0,1,62,0,0,0,0,0,0,0,0,0,0,4010\n",
      "332,2,90,180,118,2442,339,0,346,0,194,556,0,334,6,11,116,59,14,13,7,2,27,0,0,18,0,0,29,0,3,10,1,0,0,0,1,0,0,6,0,0,0,0,0,0,0,4744\n",
      "1975,0,384,214,0,1099,88,1,61,0,1262,2,0,301,115,4,0,38,44,466,0,0,279,22,42,0,3,33,120,1,11,147,0,401,0,0,578,0,1,0,0,0,26,0,0,0,0,2282\n",
      "1491,1,386,48,187,2005,279,50,344,0,20,14,22,84,565,45,11,8,0,257,0,1,759,1,0,139,0,16,44,0,0,98,0,0,0,0,2,10,0,0,0,0,0,41,0,0,0,3072\n",
      "1190,0,8,519,0,1760,28,0,410,0,46,59,255,27,16,0,3,0,405,292,18,0,216,1,0,52,90,12,395,4,13,109,304,0,0,0,12,0,0,6,0,0,52,0,0,0,0,3698\n",
      "262,0,14,280,19,1518,29,5,202,0,29,118,20,60,0,107,0,9,182,344,0,26,473,6,3,0,0,55,161,27,75,138,16,2,0,3,1620,0,0,5,0,0,0,0,0,0,0,4192\n",
      "211,128,564,598,15,406,596,17,220,0,9,323,446,6,100,1,5,39,50,2,0,1,47,17,405,1,17,0,184,0,0,310,0,0,0,18,152,0,0,278,0,0,0,0,0,0,0,4834\n",
      "619,0,143,1248,0,965,76,150,1133,0,437,697,24,0,400,0,0,28,272,317,6,0,832,0,50,144,0,1,64,0,10,296,84,0,0,0,137,0,0,0,0,0,0,0,0,0,0,1867\n",
      "1270,2,372,1320,0,658,18,0,26,1,699,0,199,199,319,38,111,209,34,11,0,0,223,27,0,638,0,100,175,0,0,40,0,0,0,0,93,0,0,25,0,0,0,0,0,0,0,3193\n",
      "2936,0,69,1476,0,500,369,0,254,0,56,17,88,0,353,0,11,0,32,306,16,0,153,1,0,0,1,104,29,0,27,157,1,0,0,0,24,0,0,0,0,0,0,0,0,3,23,2994\n",
      "518,0,113,218,0,2277,276,0,10,16,637,1,35,1,0,12,102,58,0,1,1,1,414,0,0,0,427,9,231,0,0,415,0,0,0,0,86,0,0,11,0,0,0,0,0,0,18,4112\n",
      "413,14,30,1246,0,927,543,151,11,23,437,114,6,12,32,0,0,16,2,3,1,0,240,32,21,0,0,14,1,0,1,7,0,0,0,0,5,0,22,6,0,0,0,0,41,0,256,5373\n",
      "2618,118,32,86,1,574,15,6,24,37,8,3,0,0,311,185,64,310,325,42,0,4,49,0,0,47,9,26,460,0,166,24,11,0,0,0,206,0,0,41,0,0,0,0,0,0,0,4198\n",
      "1221,0,534,223,0,919,60,148,661,2,266,36,12,0,23,0,18,8,1,26,0,75,895,0,1,725,26,268,111,0,0,376,46,0,0,0,47,0,0,0,1,48,0,0,0,0,0,3223\n",
      "534,1,305,520,0,3251,42,8,310,0,504,15,2,0,103,4,340,1,131,36,0,0,15,0,0,0,6,0,510,0,63,45,477,0,0,0,1,0,0,11,0,0,0,0,0,0,0,2765\n",
      "636,0,194,568,13,1510,201,0,38,2,258,127,41,22,117,4,110,244,229,401,97,735,322,0,21,0,0,0,198,16,0,19,60,0,0,0,39,0,0,0,0,168,0,0,0,0,0,3610\n",
      "880,74,793,282,21,1175,4,5,799,9,350,161,1,46,19,3,5,1,21,53,0,14,1249,15,0,193,0,14,231,0,0,78,2,0,0,0,29,0,0,0,0,2,0,0,0,0,0,3471\n",
      "2231,101,457,647,38,937,90,1,58,11,2,197,16,9,468,28,213,56,9,53,15,0,56,11,0,744,1,1,24,0,0,474,2,0,0,0,2,0,0,0,0,0,0,0,0,0,0,3048\n",
      "1744,69,18,1661,8,293,48,0,2,28,806,66,0,92,76,114,10,1,283,54,0,315,92,0,0,716,11,0,448,94,0,53,4,0,0,0,191,0,0,0,0,0,10,0,0,0,0,2693\n",
      "714,46,372,888,0,1356,78,24,49,0,27,6,0,10,624,15,556,261,74,60,0,130,281,0,0,96,28,90,228,0,0,903,13,0,0,44,238,0,0,0,0,0,0,0,0,0,0,2789\n",
      "803,0,440,198,0,692,150,0,25,0,208,267,735,1,420,10,4,28,352,68,80,0,2,0,330,104,0,0,125,0,20,124,2,0,0,4,0,0,0,0,0,0,0,0,0,0,1,4807\n",
      "1021,0,799,188,0,1135,2,0,1311,1,67,1,3,2,134,43,3,0,356,50,0,0,150,30,0,9,13,14,55,0,0,221,35,0,0,0,357,0,0,0,0,0,0,0,0,0,0,4000\n",
      "2491,0,576,160,0,990,263,34,121,0,25,49,46,0,0,344,0,0,19,15,0,26,197,1,0,152,0,1,139,0,67,7,7,0,0,0,289,0,0,0,0,0,0,0,0,0,0,3981\n",
      "1664,0,26,341,32,1197,337,0,239,12,6,0,2,93,91,0,1,0,368,52,0,0,118,0,0,26,152,201,916,0,0,24,128,0,0,0,7,0,124,0,0,0,4,0,0,0,0,3839\n",
      "1780,1,72,397,12,348,67,0,1311,0,4,0,3,0,400,118,236,44,0,0,85,1,3,143,0,719,0,0,381,0,5,5,7,0,0,0,32,0,0,1,5,0,0,0,0,0,0,3820\n",
      "1516,14,167,226,0,1873,10,0,62,18,124,0,112,2,43,542,13,20,178,13,0,0,228,178,51,5,0,0,374,0,54,43,36,0,0,4,99,0,0,9,0,0,0,0,0,0,0,3986\n",
      "1419,19,201,160,0,1740,1150,13,32,13,162,49,81,116,2,1,0,10,0,65,0,0,21,0,64,11,0,253,87,0,0,211,0,0,0,0,42,0,0,0,426,0,0,0,0,0,0,3652\n",
      "1643,0,98,170,4,1326,113,150,523,233,42,3,0,16,3,0,27,11,31,108,0,0,306,171,0,28,0,63,94,0,49,285,0,0,0,3,97,0,0,0,0,0,0,0,0,0,0,4403\n",
      "600,0,197,841,0,969,254,249,497,0,146,103,208,0,103,173,7,97,86,2,0,1,917,0,0,11,206,23,565,0,0,213,299,0,0,0,17,0,0,0,0,0,0,0,0,0,0,3216\n",
      "687,0,618,443,0,1188,443,405,909,6,206,414,148,0,0,0,21,207,67,111,0,16,209,129,0,6,0,0,152,0,0,489,0,0,0,0,0,0,0,3,0,0,0,0,0,0,0,3123\n",
      "856,146,107,2011,2,1399,16,1,63,0,15,0,0,5,27,34,701,0,210,179,0,112,552,1,0,0,0,0,15,0,0,227,204,0,0,0,111,0,258,0,0,0,0,0,0,0,0,2748\n",
      "666,0,178,600,11,689,24,6,10,0,26,15,867,0,93,8,1,215,254,1,0,175,28,365,0,0,2,6,193,0,0,28,5,0,0,6,7,0,0,7,0,0,0,0,0,0,0,5514\n",
      "741,63,499,442,0,3143,496,35,20,0,0,1,180,22,33,37,1,11,124,27,5,2,24,0,0,0,0,0,199,0,0,44,12,0,0,0,467,0,0,222,0,0,0,0,0,0,0,3150\n",
      "1599,6,43,158,9,1533,16,302,139,5,0,137,14,0,543,0,181,0,45,7,0,3,13,12,81,0,0,507,998,0,3,264,14,0,0,0,149,0,262,0,4,0,0,0,0,0,0,2953\n",
      "730,9,0,176,0,3437,234,0,9,1,22,305,0,0,30,0,292,0,0,60,94,0,818,0,2,40,0,0,36,1,221,96,279,0,0,0,149,0,0,0,0,0,0,0,0,7,0,2952\n",
      "971,0,103,120,12,651,3,0,223,86,2,1,120,684,189,12,47,0,116,4,0,0,408,10,960,0,0,0,168,0,39,129,217,0,0,0,147,0,0,0,0,0,0,0,2,0,0,4576\n",
      "596,224,51,134,0,2384,242,292,416,42,17,92,1,6,135,1,76,2,0,151,16,0,5,0,0,312,34,66,425,0,31,8,219,0,0,450,185,0,55,19,0,0,1,0,0,0,0,3312\n",
      "1067,5,238,670,253,796,774,70,456,5,270,757,209,4,2,1,289,125,4,6,15,11,45,2,0,223,0,1,37,0,0,47,3,0,0,1,162,0,106,0,4,0,0,0,0,0,0,3342\n",
      "188,32,1599,1665,0,347,593,23,66,3,590,13,12,24,84,38,10,198,169,289,104,21,138,0,1,14,0,95,524,0,0,41,41,0,0,0,98,0,0,0,0,0,0,0,0,0,0,2980\n",
      "811,66,229,164,0,1616,182,38,159,0,18,63,1,0,63,1,38,176,207,1062,0,0,8,8,0,0,199,79,39,0,219,37,114,0,0,0,6,0,0,0,0,0,0,0,0,0,0,4397\n",
      "657,67,140,52,0,1639,15,148,239,0,891,50,15,83,3,42,24,585,20,17,75,66,422,0,0,109,172,274,13,151,0,10,0,0,0,0,399,0,0,34,0,0,0,0,0,0,0,3588\n",
      "1634,193,459,500,33,1594,90,7,151,0,19,3,642,17,598,0,0,146,29,14,0,38,25,1,0,34,0,2,41,0,54,1,15,0,0,0,131,0,164,1,0,0,0,0,0,0,0,3364\n",
      "1053,0,434,640,0,2345,187,42,270,0,76,43,0,110,52,0,11,5,20,37,68,93,7,0,0,2,0,0,19,0,25,239,416,0,0,1,341,0,7,105,0,0,0,0,0,0,0,3352\n",
      "1566,148,1,381,33,906,86,48,131,0,4,0,21,128,11,0,13,23,12,316,59,255,218,0,0,102,3,0,178,0,262,2,11,0,0,0,50,0,0,0,0,0,0,0,0,0,0,5032\n",
      "238,8,176,74,10,926,338,41,296,0,17,0,143,0,0,8,114,266,121,261,0,56,207,273,3,7,0,11,987,0,0,82,17,0,127,0,154,1,17,0,12,0,283,0,0,0,0,4726\n",
      "271,0,248,1006,10,685,9,218,200,0,3,75,788,0,169,1235,1,88,45,10,5,1,114,0,0,0,5,0,7,0,3,156,349,0,0,0,18,0,0,0,3,0,0,0,94,0,0,4184\n",
      "1090,1,398,267,0,1444,24,0,143,21,455,0,4,0,44,0,1,0,245,1,11,1,19,2,0,64,3,24,42,0,281,51,94,0,0,1,6,0,0,0,0,47,0,0,0,0,0,5216\n",
      "1050,493,1470,105,12,648,6,335,84,0,8,19,0,23,143,181,54,0,35,34,9,0,240,2,0,237,0,27,1,0,0,7,48,0,86,0,262,0,0,0,0,0,0,18,0,0,0,4363\n",
      "641,1,91,186,2,2168,405,93,176,64,16,81,3,5,50,0,23,142,46,39,144,0,5,1,0,149,1,3,6,0,53,0,0,0,0,0,114,0,0,0,23,0,0,0,0,0,0,5269\n",
      "1148,7,30,602,1,1035,368,0,387,18,180,47,85,61,327,105,108,848,1588,139,18,2,329,0,0,273,0,2,14,0,0,37,109,0,0,0,744,0,8,16,0,0,0,0,0,0,0,1364\n",
      "837,0,244,306,2,1325,33,6,654,0,155,81,135,285,24,11,64,2,396,329,152,0,71,382,0,15,0,0,23,0,0,541,39,0,0,0,0,940,0,321,0,0,0,0,0,0,0,2627\n",
      "410,0,1128,136,13,1181,153,44,43,90,313,1,441,283,28,15,255,3,368,244,0,610,72,0,0,9,0,67,129,334,0,48,1,0,0,32,30,0,0,1,11,0,16,0,0,0,0,3491\n",
      "2673,0,145,704,73,1328,246,58,315,44,70,0,0,14,25,4,310,8,11,429,0,4,222,0,0,0,0,0,122,0,0,30,205,0,0,0,851,0,0,0,0,0,0,0,0,0,0,2109\n",
      "471,0,59,25,17,1289,347,4,1155,414,162,0,64,450,341,0,17,2,540,38,347,349,184,0,0,1,85,82,9,0,0,829,3,0,0,3,652,0,0,0,0,0,0,0,0,0,0,2061\n",
      "493,0,300,208,1,1248,8,238,187,0,38,482,135,4,144,0,173,12,130,1296,5,0,480,0,0,0,279,0,38,7,0,160,183,0,0,405,128,18,46,21,0,0,0,0,0,0,0,3133\n",
      "746,25,312,226,0,1392,33,0,469,10,174,212,61,0,47,3,25,0,1,212,0,0,29,110,157,0,103,0,62,0,173,6,0,0,0,0,10,0,0,59,0,0,205,0,0,152,0,4986\n",
      "879,0,47,416,1,1464,335,0,254,0,0,66,29,15,191,0,116,88,35,31,409,40,1,0,0,0,0,0,237,0,165,145,11,0,0,0,121,0,0,1,0,0,0,0,0,0,0,4903\n",
      "1350,0,57,703,29,744,83,3,133,22,55,6,19,24,54,187,8,6,59,38,3,186,23,0,0,25,0,35,55,0,0,0,0,0,0,0,1293,0,0,0,27,0,0,0,0,0,0,4773\n",
      "1826,7,28,372,0,1970,157,0,224,18,14,162,38,0,241,12,5,34,81,70,0,11,1085,5,0,0,58,46,111,0,21,222,10,0,0,0,153,0,0,0,0,0,0,0,0,0,0,3019\n",
      "2550,4,44,45,52,616,289,151,488,179,350,85,305,1,88,30,471,4,241,59,5,0,34,0,155,0,26,1,54,0,11,247,0,0,0,0,0,0,0,0,1,248,2,0,0,0,0,3164\n",
      "297,0,173,326,0,272,165,0,601,77,302,0,2,0,62,435,490,632,9,1132,321,0,123,0,0,83,0,0,12,35,0,16,216,0,0,0,15,0,0,0,0,0,0,0,0,0,0,4204\n",
      "376,13,302,368,140,969,659,2,169,0,0,49,314,58,295,150,70,85,82,1,124,0,199,293,0,0,0,0,1,0,0,1,76,0,0,207,0,0,115,0,0,0,0,0,0,0,0,4882\n",
      "754,5,425,90,1,1455,9,532,84,3,4,41,2,0,990,30,35,579,200,3,0,0,69,0,0,0,0,0,370,0,0,178,23,0,0,1,1,0,0,0,1023,2,0,0,0,0,0,3091\n",
      "1191,18,11,405,0,810,40,461,605,406,217,0,185,10,30,14,250,124,4,513,14,109,10,9,1,0,0,0,441,0,0,102,0,0,0,0,140,0,0,0,0,0,0,0,0,0,0,3880\n",
      "276,150,394,131,0,839,0,0,93,367,0,47,151,221,71,22,289,0,25,1,6,22,217,32,0,14,145,0,394,0,26,8,95,2,0,0,289,0,0,14,0,0,0,0,0,0,0,5659\n",
      "1111,70,412,112,102,656,1063,176,93,0,2,16,0,0,270,0,40,1,130,26,92,0,30,84,0,0,0,0,1065,0,0,0,10,0,0,0,370,0,0,0,216,219,0,10,0,0,0,3624\n",
      "945,0,327,596,14,438,544,0,77,16,12,565,34,4,0,6,0,0,14,18,0,75,80,9,0,0,1,7,1,0,0,35,0,0,0,0,188,0,0,0,0,0,0,0,0,0,0,5994\n",
      "1285,0,870,146,0,1128,65,67,188,5,458,0,17,18,157,217,223,31,94,0,0,3,93,174,0,97,0,2,844,0,0,329,400,0,0,0,2,0,0,0,0,17,12,0,0,0,0,3058\n",
      "1221,0,146,1219,0,1414,407,1,246,6,51,88,1,11,8,29,21,6,3,350,69,0,34,72,0,0,0,0,8,0,0,1,386,0,0,0,1,2,0,0,0,0,0,0,0,0,0,4199\n",
      "1094,0,246,129,0,1689,322,279,218,78,54,5,189,44,64,76,50,8,700,154,3,5,1,0,2,64,172,16,292,0,0,163,11,0,0,0,3,0,11,0,5,0,0,0,0,0,129,3724\n",
      "645,1,308,407,0,3564,138,6,3,246,151,213,13,36,10,212,1,66,5,470,0,0,206,351,0,35,0,42,296,0,30,62,39,0,0,0,23,0,0,1,0,0,0,0,0,0,0,2420\n",
      "344,0,790,465,1,768,15,0,365,202,623,7,145,12,0,0,2,55,9,2,0,7,712,824,0,4,0,44,123,0,0,102,5,0,0,0,487,0,0,0,94,0,68,0,0,0,0,3725\n",
      "822,319,315,90,2,2118,571,0,265,5,952,0,0,275,17,36,163,36,216,245,69,0,736,0,0,26,0,1,344,2,226,44,48,0,0,0,2,0,35,0,8,0,2,0,191,0,0,1819\n",
      "2206,21,363,367,1,1084,466,58,172,105,94,130,5,106,9,0,7,14,8,17,75,0,8,1235,0,0,1,98,252,0,0,155,659,0,0,0,40,0,0,0,0,0,0,0,0,4,0,2240\n",
      "707,0,186,265,0,859,1486,204,216,0,558,0,21,30,17,32,0,21,1,274,12,0,241,13,29,0,10,9,19,0,6,2683,45,0,13,0,13,0,0,0,0,0,0,0,0,0,0,2030\n",
      "527,0,830,327,0,1421,162,25,153,24,85,31,1,12,8,51,17,219,7,16,0,0,944,0,0,1,37,0,12,0,0,199,1,0,0,0,39,0,0,0,0,0,0,0,0,0,0,4851\n",
      "383,60,43,1073,0,1130,1559,0,329,133,1,94,63,0,53,0,0,2,215,463,28,122,204,0,0,0,0,0,178,0,0,25,42,0,1,0,13,0,0,2,0,0,108,0,0,0,0,3676\n",
      "924,0,221,567,0,529,0,185,427,3,584,422,28,971,17,0,0,0,569,8,4,21,138,0,0,4,0,35,56,0,0,29,0,0,0,0,74,0,0,0,0,0,0,0,0,0,0,4184\n",
      "1208,0,35,876,85,1369,307,7,25,1,81,248,49,350,27,313,207,9,6,203,8,209,284,0,9,0,1,715,12,0,32,11,20,0,0,35,211,0,0,0,0,0,0,0,0,0,0,3047\n",
      "1147,36,444,178,0,1143,0,9,264,2,9,159,12,327,13,42,178,1563,2,271,156,224,134,4,0,0,522,0,2,0,0,1,0,0,0,0,139,0,0,0,0,0,0,0,0,16,0,3003\n",
      "920,0,4,677,3,660,261,3,0,5,498,6,7,58,2,194,18,2,47,658,0,0,480,26,0,6,0,101,130,0,0,30,548,0,0,0,12,0,0,0,0,5,0,12,0,0,0,4627\n",
      "1148,3,92,120,129,695,7,48,238,473,16,0,34,0,331,660,107,1,21,0,0,0,95,192,593,0,0,2,414,0,0,0,88,0,0,0,9,0,0,0,112,0,0,12,0,0,0,4360\n",
      "987,0,1022,32,28,398,837,301,298,25,31,0,0,12,27,65,0,12,156,1,467,0,2,0,0,0,0,0,324,0,0,984,259,0,0,0,390,0,0,0,0,0,0,0,0,0,0,3342\n",
      "944,0,77,128,442,1377,103,0,229,0,70,0,113,0,489,56,2,0,175,37,6,0,527,0,0,1,11,87,170,1515,0,0,140,0,0,0,424,0,1,27,24,0,0,35,0,0,0,2790\n",
      "703,0,174,751,316,1933,15,0,0,4,0,46,405,0,35,0,14,53,33,9,10,0,639,0,0,1195,47,0,39,0,0,197,5,0,0,0,529,0,0,0,0,0,0,0,0,0,0,2848\n",
      "1345,11,46,179,280,1583,570,4,7,0,2,0,146,92,15,3,315,58,88,42,48,0,66,0,0,0,600,0,48,0,2,4,203,0,0,2,0,0,3,0,0,0,1,0,0,0,0,4237\n",
      "594,0,557,1297,0,1118,0,380,114,2,22,81,3,1,6,0,282,400,74,52,1,8,29,78,0,142,91,0,299,0,194,4,57,0,0,0,128,0,27,0,0,0,7,0,0,0,0,3952\n",
      "1453,0,103,111,0,1689,541,3,291,2,367,0,362,2,24,11,524,0,11,4,1,53,208,2,0,1,0,0,254,0,42,59,16,0,0,2,175,0,0,49,9,0,0,0,0,0,0,3631\n",
      "2326,91,6,47,13,943,1,0,142,0,450,3,13,0,562,2,983,0,243,0,100,2,8,0,0,1,0,0,370,411,0,42,9,139,0,2,11,0,0,27,0,0,0,0,0,0,0,3053\n",
      "301,1,112,419,0,566,193,0,463,225,27,30,131,63,236,275,512,0,0,108,0,0,373,1,0,22,0,19,426,0,0,350,2,0,0,0,2,0,138,2,0,0,0,0,0,0,0,5003\n",
      "2169,4,63,184,0,760,587,26,709,0,10,29,0,0,82,0,3,0,2007,176,178,0,225,0,4,0,1,0,466,0,0,23,1,0,0,178,178,0,0,21,14,0,0,0,0,0,0,1902\n",
      "1578,0,54,819,2,1143,77,4,158,0,4,335,17,4,38,26,475,34,3,17,4,316,23,0,0,39,11,0,67,0,7,16,110,0,0,29,33,0,0,0,0,0,0,10,0,0,0,4547\n",
      "872,14,60,289,7,1575,28,1070,140,0,465,3,0,2,51,0,141,6,29,19,26,0,31,0,0,5,130,3,315,0,0,464,64,0,0,5,883,0,4,75,6,0,0,0,0,0,0,3218\n",
      "819,0,696,1519,4,1654,59,0,1018,0,139,48,156,0,195,89,397,15,134,285,43,34,0,3,8,0,0,0,274,0,7,10,41,1,0,6,2,0,0,0,0,0,0,0,0,0,0,2344\n",
      "1441,153,526,1565,0,1609,306,253,209,0,1,167,12,0,15,0,0,139,59,13,0,1,75,80,7,43,13,1,341,0,127,6,443,0,0,0,113,0,0,1,0,0,0,0,0,0,0,2281\n",
      "1108,11,119,443,0,827,61,13,161,0,163,26,48,145,108,2,11,7,121,543,706,201,104,14,0,570,0,0,151,0,3,41,54,0,0,1,66,0,0,0,0,0,79,0,0,7,4,4082\n",
      "1188,21,113,182,0,2158,12,63,881,0,0,38,0,14,40,0,21,8,7,94,131,0,209,42,0,4,0,5,527,0,0,27,8,0,0,93,457,0,5,0,0,0,0,0,0,0,0,3652\n",
      "774,108,144,1634,271,329,52,113,206,0,37,14,0,12,23,2,27,36,2,356,19,0,159,9,0,74,0,0,1,0,33,992,412,0,0,0,0,0,0,4,0,0,57,0,0,0,0,4100\n",
      "1366,12,107,1433,15,530,156,14,13,214,9,310,345,1,4,0,563,62,217,0,59,1,114,138,10,0,0,0,1635,12,0,839,37,0,0,0,319,0,0,0,6,0,0,0,0,0,0,1459\n",
      "2022,43,293,123,0,693,342,11,429,3,31,6,16,16,449,0,22,22,314,241,0,0,88,0,0,0,1,0,131,0,0,2,22,0,0,3,0,0,0,5,0,0,208,9,0,0,0,4455\n",
      "1811,0,245,376,0,1257,7,431,450,99,405,0,0,39,843,4,7,0,122,1,326,4,311,0,0,0,4,15,485,0,7,241,107,0,0,7,46,0,10,0,0,0,0,0,0,0,0,2340\n",
      "741,29,311,621,87,1690,0,66,821,4,811,160,85,165,41,207,4,1,3,278,5,188,104,1187,0,0,0,135,0,0,0,23,0,0,0,0,186,0,23,0,2,0,0,0,0,0,0,2022\n",
      "1657,0,574,268,325,1334,27,0,573,0,6,82,11,6,290,7,211,36,41,77,0,2,72,2,409,0,0,257,5,0,0,7,19,10,0,406,64,0,0,92,0,0,0,0,0,0,0,3130\n",
      "762,4,675,508,0,1660,18,21,60,0,0,4,0,592,56,281,2,118,824,4,0,278,317,1,15,0,285,141,518,0,4,311,1,0,0,107,108,0,2,0,0,0,0,0,0,0,0,2323\n",
      "328,0,417,597,4,988,119,0,625,15,38,0,28,0,382,44,358,224,3,0,679,0,0,103,0,0,18,0,82,0,6,39,865,0,0,0,42,0,0,62,0,0,0,0,0,0,0,3934\n",
      "1417,78,70,1352,0,1514,259,201,6,18,10,2,3,294,38,244,269,10,37,16,0,2,243,0,251,512,390,31,31,7,0,1,18,0,0,0,42,0,0,2,53,0,0,0,201,0,0,2378\n",
      "1398,0,335,617,25,1712,8,0,2,9,1,207,1,412,51,44,2,3,45,67,0,5,469,33,0,20,0,0,16,0,6,45,238,0,0,0,2,0,0,31,0,0,0,0,0,0,0,4196\n",
      "1005,136,148,516,0,1840,273,66,445,0,41,45,4,82,15,216,861,103,978,15,0,0,5,11,0,0,0,82,295,0,0,55,0,0,0,12,56,0,0,0,0,0,0,0,0,0,0,2695\n",
      "2703,6,1,732,4,690,186,0,308,194,488,12,81,51,8,0,69,127,462,3,0,384,0,0,0,0,0,0,5,0,0,233,105,0,0,31,258,0,153,198,0,0,0,0,0,0,0,2508\n",
      "463,0,204,373,3,1343,79,77,456,2,96,92,73,468,1,0,5,336,66,180,0,67,115,29,0,0,527,0,369,0,0,21,37,0,0,24,165,0,0,0,0,0,47,0,0,0,1490,2792\n",
      "615,23,102,696,0,910,8,27,156,0,8,0,0,672,10,0,2,4,93,0,0,0,40,277,0,96,0,1,415,0,28,10,23,0,0,0,1245,0,0,330,0,0,0,55,0,0,0,4154\n",
      "1357,112,32,477,11,677,35,16,163,5,33,37,31,0,99,10,126,399,16,0,214,0,96,0,0,4,0,11,201,0,76,7,7,0,0,0,322,0,3,1,0,0,0,0,0,0,0,5422\n",
      "2114,1,580,99,0,863,118,2,151,13,10,3,182,25,1,164,760,19,212,168,0,0,63,0,52,0,0,16,114,0,307,113,31,0,0,0,897,0,0,1,0,0,0,0,0,0,0,2921\n",
      "1018,0,396,485,26,615,118,285,73,13,27,0,394,7,1595,116,157,0,10,4,0,0,71,0,0,512,0,0,42,0,62,284,8,0,0,0,1108,0,0,0,99,0,0,0,0,0,0,2475\n",
      "1516,0,221,81,82,1713,493,636,19,6,3,21,5,0,321,0,61,0,9,24,33,0,12,16,0,0,0,1,145,0,12,370,152,0,0,6,146,0,0,34,0,0,0,0,0,0,0,3862\n",
      "432,2,222,595,369,1777,439,0,209,0,579,87,3,0,44,2,343,0,556,37,0,180,32,286,0,0,14,11,43,0,0,464,143,0,0,0,0,0,0,3,40,0,0,0,0,0,0,3088\n",
      "2786,20,100,37,0,845,453,2,286,16,70,1,0,13,102,26,1,5,0,14,0,0,36,176,0,0,12,0,295,0,252,118,147,0,0,194,27,0,3,0,0,46,0,0,0,0,0,3917\n",
      "586,5,63,63,3,975,146,13,65,178,40,148,546,2,126,0,0,163,124,1,0,9,51,0,0,80,0,1,171,0,0,233,4,0,0,8,4,0,0,0,0,0,7,0,0,0,0,6185\n",
      "816,1,489,140,4,1176,498,117,50,298,140,210,0,12,979,6,0,3,88,2,0,0,45,17,0,7,66,0,709,0,0,10,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,4093\n",
      "933,0,48,84,0,2237,724,18,336,0,47,0,0,563,148,141,49,7,0,347,23,240,115,0,0,0,0,351,49,0,3,64,671,0,0,0,6,0,0,2,0,0,7,0,0,0,0,2787\n",
      "447,150,98,1565,0,986,301,70,118,0,711,193,43,20,17,1,0,0,68,0,0,0,20,0,0,1,0,463,74,0,0,1,114,0,0,6,11,0,0,0,1,0,0,0,0,0,0,4521\n",
      "1398,0,34,110,99,1279,395,1,255,0,213,181,12,377,3,6,266,21,93,150,0,284,73,8,0,37,3,9,9,0,0,263,0,0,0,15,1,0,6,20,5,0,0,0,0,0,0,4374\n",
      "2109,0,129,946,0,1759,1,83,4,2,111,40,0,64,651,31,412,11,147,0,205,2,227,47,0,4,81,59,81,0,20,20,0,0,0,0,0,0,0,0,0,0,0,2,0,0,0,2752\n",
      "1111,0,528,468,1,981,145,3,1137,42,17,8,129,0,23,0,0,2,59,160,280,5,10,0,0,185,0,0,385,0,0,104,81,0,0,0,370,0,0,0,0,0,0,0,0,0,0,3766\n",
      "2097,97,58,647,0,579,52,112,944,0,19,457,147,47,471,21,257,0,9,209,3,142,180,0,0,0,4,1,255,0,0,21,16,0,0,0,470,0,0,0,0,0,0,0,0,0,0,2685\n",
      "1051,0,84,65,11,1438,180,85,615,0,201,24,57,566,69,0,18,272,73,53,168,106,161,0,0,21,0,0,982,0,0,152,8,0,0,0,240,0,0,0,1,0,0,0,0,0,0,3299\n",
      "597,0,317,2091,158,1529,279,33,507,2,1401,0,0,0,21,0,10,104,30,79,234,1,112,0,0,0,1,0,141,0,0,65,63,0,0,0,0,0,11,0,0,0,0,0,0,0,0,2214\n",
      "490,0,29,60,0,638,118,9,762,0,537,40,96,171,1,6,142,1,526,396,0,0,758,6,27,40,0,188,83,0,0,7,0,0,0,0,156,0,0,0,0,0,0,283,0,0,0,4430\n",
      "2445,0,81,680,415,939,123,375,397,3,0,53,96,0,0,2,285,22,41,132,16,0,5,0,5,0,0,7,258,0,0,25,52,0,0,19,103,0,0,0,0,0,0,0,0,0,0,3421\n",
      "890,114,208,367,475,1095,59,0,66,150,4,8,120,10,615,374,2,0,160,55,2,127,184,15,0,0,0,0,350,0,13,7,5,0,0,0,763,0,0,0,0,0,0,0,0,0,0,3762\n",
      "725,120,7,250,226,1035,552,441,4,51,21,1,52,0,280,0,0,4,11,15,0,9,5,0,0,0,131,0,167,384,50,13,53,0,0,0,180,0,0,254,0,0,1,0,0,0,0,4958\n",
      "545,2,55,210,0,420,348,0,300,10,804,23,0,0,4,1,76,150,77,5,768,0,412,2,76,4,570,0,556,0,0,17,62,0,0,2,59,0,0,0,416,0,0,0,0,0,0,4026\n",
      "1941,0,313,741,0,574,25,3,388,4,565,61,22,12,24,0,20,205,0,24,134,1190,154,1,5,14,106,239,10,0,0,27,59,0,0,453,0,0,104,0,0,0,0,0,0,0,0,2582\n",
      "922,2,18,140,24,2011,71,167,19,0,637,71,325,502,253,185,35,226,51,22,0,310,83,1,0,0,0,0,51,2,4,210,509,0,1,0,7,0,0,0,0,0,0,8,0,0,0,3133\n",
      "229,0,49,806,77,1393,337,41,391,5,3,45,4,0,14,0,49,15,58,94,21,0,92,0,0,0,75,0,251,0,12,208,0,0,0,0,88,0,0,0,0,0,181,0,0,0,0,5462\n",
      "1131,0,344,334,0,1528,45,23,182,37,272,0,0,1,0,1748,1,0,2,175,204,0,60,31,0,0,153,0,648,0,0,42,61,0,0,76,44,0,0,2,0,0,0,0,0,0,0,2856\n",
      "417,626,375,141,0,1513,78,0,174,460,478,37,112,0,69,95,69,0,140,1050,0,0,126,39,0,27,14,0,32,0,0,194,0,0,0,0,329,0,0,6,0,0,0,0,0,0,0,3399\n",
      "1195,81,66,103,23,739,39,0,570,7,1045,151,0,10,140,110,7,24,532,1,0,10,436,190,0,46,0,109,91,0,1,449,329,0,0,0,246,0,0,0,5,0,0,0,0,0,0,3245\n",
      "882,0,231,992,8,848,210,42,645,0,1,150,0,167,99,42,155,252,100,4,0,0,1,561,2,3,45,0,121,0,0,29,63,0,0,0,55,627,0,0,0,0,0,0,0,0,0,3665\n",
      "399,0,5,206,0,2685,133,0,617,105,15,479,90,34,5,0,314,26,5,39,4,558,230,0,0,37,0,0,465,0,2,100,14,0,0,0,85,2,1,370,0,0,9,0,2,0,0,2964\n",
      "1096,0,119,191,2,1807,47,17,365,0,2,2,46,91,11,36,34,1,999,230,0,27,228,0,0,2,0,188,828,0,56,110,5,0,0,0,136,0,0,96,52,0,2,0,0,0,0,3174\n",
      "974,479,1491,7,133,553,55,1,104,9,0,4,0,0,252,6,1,100,242,17,969,0,50,0,0,146,111,2,161,45,145,553,0,0,0,0,151,0,0,0,0,0,0,0,0,0,0,3239\n",
      "1207,77,287,759,215,1312,371,30,222,9,908,71,222,97,2,0,209,0,17,115,0,69,690,0,0,0,1,0,118,0,0,845,43,19,0,0,11,0,0,2,0,0,0,0,0,0,0,2072\n",
      "1453,0,2,323,1,1403,44,10,85,64,10,10,0,407,7,0,3,193,3,1,8,4,129,0,0,205,2,0,534,0,0,376,0,0,0,60,2,0,1,0,2,0,3,0,0,0,0,4655\n",
      "999,6,17,290,256,1555,64,18,542,0,45,1,36,40,1,115,659,635,361,4,1,0,323,405,0,4,0,82,9,0,0,15,4,0,0,0,9,0,0,9,0,3,0,0,0,0,0,3492\n",
      "330,0,88,222,9,1092,517,2,21,69,424,0,60,0,469,42,631,0,126,164,156,262,74,0,0,0,0,0,461,0,68,6,318,0,0,0,1,0,0,0,93,0,0,0,0,0,0,4295\n",
      "481,0,316,431,0,576,197,8,487,129,645,90,8,2,568,20,0,1,29,23,0,152,8,173,0,0,0,0,153,0,2,8,76,0,0,0,120,0,0,0,0,0,0,0,0,0,0,5297\n",
      "1574,329,464,1217,0,1010,91,191,63,0,165,448,0,0,2,4,1,0,12,218,0,0,9,568,0,0,0,0,582,0,120,8,0,0,0,0,24,0,0,0,0,0,0,0,0,0,0,2900\n",
      "568,217,460,918,0,794,219,0,273,0,126,786,0,0,1,16,84,7,31,34,137,0,70,1,0,6,0,29,9,0,10,700,54,0,0,0,5,0,0,0,0,0,0,0,0,73,1,4371\n",
      "347,2,363,207,2,2514,488,4,27,42,99,0,0,98,11,7,0,0,472,5,78,23,70,1,1,2,10,0,16,0,13,232,23,0,0,0,2,4,0,0,0,0,0,60,0,0,0,4777\n",
      "591,0,300,351,0,742,31,0,737,2,770,2,1,4,16,0,57,0,21,29,434,0,584,286,17,29,57,98,209,0,126,1,0,0,0,0,576,0,6,0,0,0,0,0,2,0,0,3921\n",
      "642,139,150,1043,77,1074,0,636,56,169,0,1,22,10,30,0,6,0,0,11,89,0,3,36,0,117,265,0,566,0,830,59,2,0,0,3,106,0,0,0,0,0,0,0,0,0,0,3858\n",
      "507,16,816,39,49,900,16,102,1457,67,6,150,23,194,75,0,6,0,3,272,261,41,83,0,0,11,0,35,330,30,0,535,104,0,0,0,317,0,0,0,354,8,0,0,1,0,0,3192\n",
      "857,0,366,581,0,955,29,224,362,0,8,454,33,361,143,4,117,0,1071,312,758,0,23,188,0,0,0,2,176,16,204,68,29,0,0,51,68,0,0,19,0,0,0,0,0,0,2,2519\n",
      "545,1,851,421,0,1743,310,0,42,2,2,559,0,233,0,11,224,349,53,371,1,35,489,0,37,62,0,0,285,0,0,54,2,0,0,13,29,0,0,0,0,0,10,0,0,0,0,3266\n",
      "1846,0,136,121,0,1580,44,77,301,0,46,0,2,12,4,294,135,190,33,242,35,0,33,0,0,0,49,1168,78,0,0,5,0,0,0,39,1,0,0,0,0,0,0,0,0,0,0,3529\n",
      "1027,4,997,1038,17,1472,573,85,85,101,0,150,109,23,246,78,28,0,183,1,1,0,207,103,0,0,98,40,270,0,13,595,185,0,0,0,103,128,0,0,0,0,0,0,0,3,0,2037\n",
      "1711,1,231,1923,0,337,0,22,718,49,3,9,336,0,24,35,11,215,576,0,121,0,108,0,0,0,221,0,48,0,57,23,0,0,0,0,77,0,0,0,0,0,0,0,0,0,0,3144\n",
      "1727,0,30,1315,0,416,252,0,110,9,360,0,0,13,0,81,89,0,833,140,0,1,11,0,0,1,19,234,18,0,0,125,1,0,0,0,15,0,0,0,1,0,0,0,0,0,0,4199\n",
      "1367,0,490,933,0,791,0,0,424,3,81,9,16,45,120,0,3,43,257,1,0,440,1,14,0,1,13,0,176,0,0,152,36,98,0,0,390,0,6,0,39,0,0,0,0,0,0,4051\n",
      "936,5,85,102,85,2309,908,6,385,160,15,0,0,0,5,0,9,0,1,225,652,1,0,195,0,1,107,1,1,0,0,157,115,0,0,0,16,0,0,5,294,0,0,0,0,0,0,3219\n",
      "1959,65,7,258,0,1479,139,6,437,204,20,12,5,0,16,8,124,94,392,12,12,0,10,0,0,29,2,3,230,0,0,214,8,0,0,3,0,0,0,0,0,0,0,0,0,0,0,4252\n",
      "1005,24,439,762,14,1262,302,78,23,8,48,7,26,0,20,162,846,6,146,2,0,91,132,1,0,20,1,4,122,0,0,65,4,0,0,0,142,0,0,1,1,0,360,0,0,0,4,3872\n",
      "316,11,777,128,0,733,125,274,154,0,28,245,19,0,1107,0,126,8,121,289,5,1,8,0,4,233,0,12,309,0,0,250,283,0,0,4,123,0,0,0,0,0,1,0,0,0,0,4306\n",
      "789,4,165,78,0,1833,45,0,843,119,197,16,3,51,52,3,37,374,165,1,2,42,34,0,45,0,23,16,245,0,0,11,59,0,172,41,376,0,0,0,0,11,0,163,0,0,0,3985\n",
      "2325,5,14,195,0,452,7,188,226,47,9,1268,1,333,6,1,0,174,782,59,367,52,1,0,0,197,0,0,65,0,0,0,1,0,0,0,47,0,0,0,7,0,0,0,0,6,4,3161\n",
      "1987,0,501,13,0,807,21,0,272,0,58,1,13,573,2,0,55,594,14,3,278,0,25,5,7,0,1,1,426,0,42,17,167,0,0,0,0,0,0,0,77,0,0,0,0,0,0,4040\n",
      "1832,627,5,826,0,2226,250,0,106,44,461,0,24,194,2,381,346,12,452,136,0,0,10,0,0,55,0,0,138,0,0,188,8,0,0,0,27,0,0,0,0,0,0,0,0,0,0,1650\n",
      "1011,3,73,1329,3,484,1851,2,49,0,189,1,8,30,51,3,28,19,22,0,0,19,21,3,0,0,15,3,166,1,2,11,0,0,0,3,747,0,0,0,0,0,0,0,0,0,0,3853\n",
      "617,0,0,38,141,1434,933,0,352,309,515,7,0,1,4,425,928,2,635,37,154,389,11,1,0,73,182,322,183,0,64,146,111,0,0,0,4,0,0,0,0,0,1,0,0,0,0,1981\n",
      "1823,0,713,364,113,218,2,0,24,4,46,12,1,104,20,3,193,1,50,43,21,0,11,0,1,7,1,0,125,0,0,0,91,0,0,0,234,0,0,21,0,0,0,0,0,0,0,5754\n",
      "1073,0,80,29,0,111,308,35,342,2,76,3,0,17,2,336,0,508,23,256,1,13,6,0,380,0,31,0,334,0,0,667,439,176,0,0,925,0,0,716,0,28,2,0,0,0,0,3081\n",
      "743,10,27,1566,0,1064,407,8,132,0,26,12,79,2,2,177,345,4,251,24,1,0,78,32,0,53,733,21,1,0,0,68,5,0,0,0,21,0,0,0,0,0,8,0,0,0,0,4100\n",
      "1499,49,14,727,0,1488,52,45,204,20,111,1,180,2,51,44,0,0,42,121,180,0,16,30,0,0,432,6,12,0,0,483,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,4188\n",
      "253,0,236,1202,0,1012,543,170,618,0,1148,2,0,1,91,56,0,4,21,1,29,0,159,0,0,95,2,1,22,0,0,0,12,0,0,10,43,0,0,0,2,0,2,0,0,0,0,4265\n",
      "1544,2,130,99,0,1290,343,334,338,137,54,15,16,47,523,45,115,19,11,184,3,15,81,0,0,0,0,0,292,0,5,36,25,0,0,6,106,0,0,78,0,0,0,0,0,0,0,4107\n",
      "955,0,17,345,0,1636,32,5,615,6,19,1,1,5,55,0,1,73,272,38,0,136,343,29,0,119,36,1,373,0,110,37,0,0,0,0,6,0,0,8,141,0,0,0,0,0,0,4585\n",
      "641,0,7,1007,0,1771,235,0,491,57,927,30,5,16,384,0,33,100,125,169,0,0,64,23,0,595,0,0,230,0,0,56,18,0,2,0,7,0,0,0,0,0,0,0,0,0,0,3007\n",
      "947,730,245,910,0,574,679,0,35,0,235,59,8,5,163,583,159,118,138,475,0,72,73,0,0,52,0,0,895,0,0,490,36,46,0,3,336,0,0,39,0,0,0,0,0,0,0,1895\n",
      "284,128,36,468,0,674,1482,40,17,0,45,10,98,2,3,104,66,0,160,205,0,33,1355,22,0,1,40,0,0,0,0,4,1,7,0,3,70,0,67,76,0,0,0,0,0,0,0,4499\n",
      "583,23,980,1188,1,1518,19,93,703,0,145,1,0,0,30,30,8,3,15,117,0,0,53,2,7,0,0,0,37,0,3,119,411,0,0,0,170,0,0,0,0,0,0,0,0,0,0,3741\n",
      "1157,1,121,230,2,351,3,141,26,40,25,58,29,181,70,897,59,621,287,0,0,0,240,231,555,11,3,9,508,0,78,5,79,2,0,0,170,0,10,0,0,0,9,0,0,0,0,3791\n",
      "1056,0,150,340,187,1508,3,2,154,67,1,1,1,3,149,0,25,0,223,362,8,18,37,163,0,1,5,0,46,0,126,770,1,0,0,0,189,0,0,3,0,0,0,0,0,0,0,4401\n",
      "2274,0,851,181,184,1875,9,4,347,0,94,8,0,0,9,43,10,1,0,47,3,1,308,0,0,21,0,3,29,0,0,25,18,0,0,0,9,0,0,0,2,0,3,0,0,0,0,3641\n",
      "623,0,14,386,26,794,495,12,701,360,433,6,7,2,611,4,4,45,61,18,29,0,1459,0,0,1,19,0,73,9,1065,95,6,0,0,89,346,0,0,0,0,0,0,0,7,0,0,2200\n",
      "184,0,28,842,0,836,132,56,597,0,95,31,11,16,195,21,0,75,0,4,252,0,13,28,0,3,10,0,97,0,8,5,98,0,0,0,175,0,0,0,0,13,253,8,0,0,0,5914\n",
      "848,0,477,585,12,655,0,19,1366,3,228,324,345,0,8,11,89,138,6,26,0,11,61,616,217,73,0,0,348,0,0,187,0,0,0,0,10,0,277,0,0,0,0,0,0,0,0,3060\n",
      "965,232,38,50,39,1440,113,303,531,29,26,0,0,75,20,19,0,0,1,6,0,0,7,1,0,0,31,0,209,0,0,75,0,0,0,0,432,0,0,0,0,0,61,0,1,0,0,5296\n",
      "1401,0,406,87,0,300,556,392,6,29,201,10,52,0,265,0,246,9,437,49,26,242,310,0,29,0,1,18,13,0,93,1181,13,0,0,180,92,269,0,0,0,0,0,32,0,0,0,3055\n",
      "695,0,621,257,0,1288,11,0,163,0,945,306,39,41,397,25,34,161,0,11,20,24,0,153,0,1,0,94,0,51,26,0,0,0,0,0,816,0,0,3,0,0,0,0,0,0,0,3818\n",
      "1265,0,696,192,212,722,8,305,12,111,43,291,3,796,29,0,20,12,326,306,0,17,1,0,0,4,2,371,225,0,3,13,11,0,0,0,6,0,0,0,22,0,0,0,0,0,0,3976\n",
      "687,0,631,164,0,830,400,82,1,0,110,19,84,218,68,7,8,131,121,4,11,34,125,31,3,0,1,3,705,0,45,24,5,0,0,0,261,0,0,0,0,0,0,0,0,0,0,5187\n",
      "2983,0,660,140,0,1742,277,36,6,99,49,113,76,45,70,0,1,127,142,1,0,0,1,1,0,74,49,130,154,0,0,13,85,0,0,0,134,0,1,2,1,0,0,0,0,0,0,2788\n",
      "505,16,139,265,5,1501,238,232,124,391,662,0,140,574,14,35,22,999,13,3,126,13,830,0,0,1,12,1,5,0,86,1,108,0,0,0,4,0,0,0,0,0,0,0,0,1,0,2934\n",
      "1204,0,2,989,0,827,362,1,118,241,488,172,76,0,2,0,2,8,197,0,44,8,68,6,0,0,0,6,239,0,20,61,1431,0,0,0,317,0,0,0,0,0,0,0,0,0,0,3111\n",
      "806,16,1439,69,55,436,200,13,117,219,335,1204,52,38,376,0,0,68,15,112,63,0,257,0,0,1,6,0,171,0,1,36,177,0,0,0,108,0,0,133,351,0,0,0,0,0,0,3126\n",
      "419,679,140,383,0,725,21,35,35,14,59,0,93,0,57,0,47,1,10,77,204,7,243,184,101,451,0,84,151,0,0,340,287,0,0,0,10,0,0,0,0,0,0,0,0,0,0,5143\n",
      "596,5,1691,320,1,1011,238,21,247,69,71,178,273,3,1,0,338,200,2,0,110,48,50,1,0,0,0,8,2,0,37,35,0,0,0,0,0,0,0,292,6,0,0,0,0,0,0,4146\n",
      "1341,0,1107,1457,43,876,212,136,133,1,6,21,3,38,26,3,216,0,30,280,0,0,107,12,4,126,8,0,482,0,0,365,2,0,0,0,15,0,0,0,0,0,0,0,0,0,0,2950\n",
      "613,1,284,293,0,1402,295,114,1214,0,23,49,0,13,1689,13,94,0,7,10,0,2,107,4,0,17,61,49,110,0,0,100,65,0,0,0,69,0,3,11,0,0,0,0,0,2,0,3286\n",
      "1818,1,333,394,1,945,465,0,38,100,1,7,36,527,32,0,361,2,2,3,120,139,110,5,8,2,0,0,544,0,493,425,0,0,0,5,101,0,0,5,219,0,0,0,0,0,0,2758\n",
      "1057,0,0,322,217,650,1,969,214,41,1006,0,2,0,7,0,12,1,0,166,0,0,17,7,0,19,5,1,95,2,1,44,0,0,0,30,0,0,0,0,2,0,0,0,0,0,0,5112\n",
      "422,0,250,79,0,1381,225,0,72,0,784,2,1,0,916,0,227,91,307,91,0,10,60,0,0,80,0,0,95,0,0,123,16,0,0,73,1183,0,0,1,0,124,0,0,0,6,0,3381\n",
      "1401,4,30,526,0,923,25,0,127,0,483,11,70,1089,1,3,174,11,4,2,49,0,81,297,0,4,18,0,100,0,35,8,1,0,0,0,46,0,0,0,7,0,0,0,0,0,0,4470\n",
      "2655,6,106,74,0,952,76,13,158,125,736,43,19,6,49,0,2,21,971,138,95,0,548,0,0,5,105,0,223,0,1,4,5,0,0,0,36,0,0,2,0,0,0,0,0,0,0,2826\n",
      "335,0,71,259,67,718,1,4,4,167,6,0,174,12,6,0,2,56,1,104,8,0,124,0,0,0,0,4,861,0,0,0,1,0,0,0,236,0,0,246,0,0,6,0,0,0,0,6527\n",
      "649,69,966,1227,0,508,2,30,550,0,302,159,3,49,195,26,19,180,7,49,2,0,324,32,0,0,0,0,5,0,0,147,87,0,0,0,5,0,0,0,0,0,0,6,0,0,0,4402\n",
      "1258,0,0,1119,0,2348,25,0,137,176,2,12,148,92,35,0,0,10,26,0,336,164,18,0,0,23,0,4,1318,0,102,1,49,0,0,0,10,0,0,2,0,0,0,0,0,0,0,2585\n",
      "\n"
     ]
    }
   ],
   "source": [
    "with open(resource_filename('deepbiome', 'tests/data/onefile_x.csv')) as f:\n",
    "    print(f.read())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example of the Y (regression)\n",
    "\n",
    "This is an example of the output file for regression problem."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4.997270</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>5.004092</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5.485126</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5.489590</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.500001</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         x1\n",
       "0  4.997270\n",
       "1  5.004092\n",
       "2  5.485126\n",
       "3  5.489590\n",
       "4  1.500001"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = pd.read_csv(resource_filename('deepbiome', 'tests/data/onefile_regression_y.csv'))\n",
    "y.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>x1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>2.609926</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>5.488959</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>3.498418</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>5.486107</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>5.319623</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "           x1\n",
       "995  2.609926\n",
       "996  5.488959\n",
       "997  3.498418\n",
       "998  5.486107\n",
       "999  5.319623"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Example of the Y (classification)\n",
    "\n",
    "This is an example of the output file for classification problem. Below example file has 1000 samples in rows."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>V1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    V1\n",
       "0  1.0\n",
       "1  1.0\n",
       "2  0.0\n",
       "3  0.0\n",
       "4  1.0"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y = pd.read_csv(resource_filename('deepbiome', 'tests/data/onefile_classification_y.csv'))\n",
    "y.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>V1</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>1.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      V1\n",
       "995  1.0\n",
       "996  0.0\n",
       "997  1.0\n",
       "998  0.0\n",
       "999  1.0"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Exmple of the training index file for `k` fold cross-validation\n",
    "\n",
    "For each fold, we have to set the training and test set. If the index file is given, DeepBiome sets the training set and test set based on the index file for 5 fold cross-validation. Below is the example of the index file. Each column has the training indices for each fold. DeepBiome will only use the samples in this index set for training."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>5</td>\n",
       "      <td>3</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>6</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>4</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>7</td>\n",
       "      <td>5</td>\n",
       "      <td>9</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   0  1  2  3  4\n",
       "0  1  1  3  1  1\n",
       "1  2  2  4  2  2\n",
       "2  3  3  5  3  4\n",
       "3  6  4  7  4  5\n",
       "4  7  5  9  5  6"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "idxs = pd.read_csv(resource_filename('deepbiome', 'tests/data/onefile_idx.csv'), dtype=np.int)\n",
    "idxs.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>795</th>\n",
       "      <td>994</td>\n",
       "      <td>996</td>\n",
       "      <td>994</td>\n",
       "      <td>995</td>\n",
       "      <td>996</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>796</th>\n",
       "      <td>995</td>\n",
       "      <td>997</td>\n",
       "      <td>995</td>\n",
       "      <td>996</td>\n",
       "      <td>997</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>797</th>\n",
       "      <td>997</td>\n",
       "      <td>998</td>\n",
       "      <td>996</td>\n",
       "      <td>997</td>\n",
       "      <td>998</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>798</th>\n",
       "      <td>999</td>\n",
       "      <td>999</td>\n",
       "      <td>998</td>\n",
       "      <td>998</td>\n",
       "      <td>999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>799</th>\n",
       "      <td>1000</td>\n",
       "      <td>1000</td>\n",
       "      <td>999</td>\n",
       "      <td>1000</td>\n",
       "      <td>1000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        0     1    2     3     4\n",
       "795   994   996  994   995   996\n",
       "796   995   997  995   996   997\n",
       "797   997   998  996   997   998\n",
       "798   999   999  998   998   999\n",
       "799  1000  1000  999  1000  1000"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "idxs.tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below is the index set for 1st fold. From 1000 samples above, it uses 800 samples for training."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    1\n",
       "1    2\n",
       "2    3\n",
       "3    6\n",
       "4    7\n",
       "Name: 0, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "idxs.iloc[:,0].head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "795     994\n",
       "796     995\n",
       "797     997\n",
       "798     999\n",
       "799    1000\n",
       "Name: 0, dtype: int64"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "idxs.iloc[:,0].tail()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 3. Prepare the configuration\n",
    "\n",
    "For detailed configuration, we can build the configuration information for the network training by:\n",
    "1. the python dictionary format\n",
    "1. the configufation file (.cfg).\n",
    "\n",
    "In this notebook, we show the python dictionary format configuration.\n",
    "\n",
    "Please check the detailed information about each option in the [documantation](https://young-won.github.io/deepbiome/prerequisites.html#configuration)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### For preparing the configuration about the network information (`network_info`)\n",
    "\n",
    "To give the information about the training process, we provide a dictionary of configurations to the `netowrk_info` field.\n",
    "Your configuration for the network training should include the information about:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "network_info = {\n",
    "    'architecture_info': {\n",
    "        'batch_normalization': 'False',\n",
    "        'drop_out': '0',\n",
    "        'weight_initial': 'glorot_uniform',\n",
    "        'weight_l1_penalty':'0.',\n",
    "        'weight_decay': 'phylogenetic_tree',\n",
    "    },\n",
    "    'model_info': {\n",
    "        'lr': '0.01',\n",
    "        'decay': '0.001',\n",
    "        'loss': 'binary_crossentropy',\n",
    "        'metrics': 'binary_accuracy, sensitivity, specificity, gmeasure',\n",
    "        'taxa_selection_metrics': 'sensitivity, specificity, gmeasure, accuracy',\n",
    "        'network_class': 'DeepBiomeNetwork',\n",
    "        'optimizer': 'adam',\n",
    "        'reader_class': 'MicroBiomeClassificationReader',\n",
    "        'normalizer': 'normalize_minmax',\n",
    "    },\n",
    "    'training_info': {\n",
    "        'epochs': '10',\n",
    "        'batch_size': '50', \n",
    "        'callbacks': 'ModelCheckpoint',\n",
    "        'monitor': 'val_loss',\n",
    "        'mode' : 'min',\n",
    "        'min_delta': '1e-7',\n",
    "    },\n",
    "    'validation_info': {\n",
    "        'batch_size': 'None', \n",
    "        'validation_size': '0.2'\n",
    "    },\n",
    "    'test_info': {\n",
    "        'batch_size': 'None'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### For preparing the configuration about the path information (`path_info`)\n",
    "\n",
    "To give the information about the path of dataset, paths for saving the trained weights and the evaluation results, we provide a dictionary of configurations to the `path_info` field.\n",
    "Your configuration for the network training should include the information about:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "path_info = {\n",
    "    'data_info': {\n",
    "        'data_path': resource_filename('deepbiome', 'tests/data'),\n",
    "        'idx_path': resource_filename('deepbiome', 'tests/data/onefile_idx.csv'),\n",
    "        'tree_info_path': resource_filename('deepbiome', 'tests/data/genus48_dic.csv'),\n",
    "        'x_path': 'onefile_x.csv',\n",
    "        'y_path': 'classification_y.csv'\n",
    "    },\n",
    "    'model_info': {\n",
    "        'evaluation': 'eval.npy',\n",
    "        'history': 'hist.json',\n",
    "        'model_dir': './example_result/',\n",
    "        'weight': 'weight.h5'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 4. Deepbiome Training\n",
    "\n",
    "Now we can train the DeepBiome network based on the configurations."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For logging, we used the python logging library."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "logging.basicConfig(format = '[%(name)-8s|%(levelname)s|%(filename)s:%(lineno)s] %(message)s',\n",
    "                    level=logging.DEBUG)\n",
    "log = logging.getLogger()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The deeobiome_train function provide the test evaluation, train evaluation and the deepbiome network instance.\n",
    "\n",
    "If we set `number_of_fold`, then DeepBiome performs cross-validation based on that value. If not, DeepBiome package performs cross-validation based on the index file. If both `number_of_fold` option and the index file are missing, then the library performs leave-one-out-cross-validation (LOOCV)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:105] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:143] -------1 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:153] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:154] Build network for 1 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:527] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:528] Phylogenetic_tree_dict info: ['Family', 'Number', 'Genus', 'Phylum', 'Order', 'Class']\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:552] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:561] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:562] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/resource_variable_ops.py:432: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Colocations handled automatically by placer.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[tensorflow|WARNING|deprecation.py:328] From /usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/resource_variable_ops.py:432: colocate_with (from tensorflow.python.framework.ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Colocations handled automatically by placer.\n",
      "[root    |INFO|build_network.py:644] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:164] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:165] 1 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "WARNING:tensorflow:From /usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/math_ops.py:2862: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.cast instead.\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[tensorflow|WARNING|deprecation.py:328] From /usr/local/lib/python3.5/dist-packages/tensorflow/python/ops/math_ops.py:2862: to_int32 (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n",
      "Instructions for updating:\n",
      "Use tf.cast instead.\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 1ms/step - loss: 0.6656 - binary_accuracy: 0.6812 - sensitivity: 0.9706 - specificity: 0.0529 - gmeasure: 0.0501 - val_loss: 0.6344 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.6294 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6162 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 134us/step - loss: 0.6256 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6162 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 136us/step - loss: 0.6233 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6163 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 0.6238 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6173 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.6241 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6164 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 0.6241 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6167 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.6240 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6160 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 140us/step - loss: 0.6243 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6166 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 132us/step - loss: 0.6237 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6162 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 3.8066020011901855!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |DEBUG|deepbiome.py:173] Save weight at ./example_result/weight_0.h5\n",
      "[root    |DEBUG|deepbiome.py:176] Save history at ./example_result/hist_0.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.00856328010559082!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6220536231994629, 0.6862499713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 11us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008417606353759766!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6190621256828308, 0.6899999976158142, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:187] Compute time : 5.4697675704956055\n",
      "[root    |INFO|deepbiome.py:188] 1 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:143] -------2 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:153] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:154] Build network for 2 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:527] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:528] Phylogenetic_tree_dict info: ['Family', 'Number', 'Genus', 'Phylum', 'Order', 'Class']\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:552] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:561] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:562] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:644] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:164] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:165] 2 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 812us/step - loss: 0.6643 - binary_accuracy: 0.7141 - sensitivity: 0.9478 - specificity: 0.0629 - gmeasure: 0.0394 - val_loss: 0.6224 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 133us/step - loss: 0.6105 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5761 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 142us/step - loss: 0.6010 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5758 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 133us/step - loss: 0.5967 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5773 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.5972 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5789 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 130us/step - loss: 0.5978 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5785 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.5977 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5761 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 135us/step - loss: 0.5975 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5765 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.5972 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5774 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 135us/step - loss: 0.5978 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5781 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 3.056375026702881!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |DEBUG|deepbiome.py:173] Save weight at ./example_result/weight_1.h5\n",
      "[root    |DEBUG|deepbiome.py:176] Save history at ./example_result/hist_1.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.007775068283081055!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.5933214426040649, 0.7200000286102295, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 11us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.00768589973449707!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.5932823419570923, 0.7200000286102295, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:187] Compute time : 3.575425148010254\n",
      "[root    |INFO|deepbiome.py:188] 2 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:143] -------3 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:153] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:154] Build network for 3 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:527] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:528] Phylogenetic_tree_dict info: ['Family', 'Number', 'Genus', 'Phylum', 'Order', 'Class']\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:552] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:561] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:562] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:644] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:164] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:165] 3 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 828us/step - loss: 0.6615 - binary_accuracy: 0.6750 - sensitivity: 0.9301 - specificity: 0.0724 - gmeasure: 0.0225 - val_loss: 0.6264 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 136us/step - loss: 0.6189 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6119 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 133us/step - loss: 0.6163 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6112 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 135us/step - loss: 0.6130 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6111 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 134us/step - loss: 0.6139 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6116 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 131us/step - loss: 0.6140 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6109 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 0.6143 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6110 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 0.6140 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6109 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 135us/step - loss: 0.6141 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6111 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 140us/step - loss: 0.6137 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6108 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 3.1961677074432373!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |DEBUG|deepbiome.py:173] Save weight at ./example_result/weight_2.h5\n",
      "[root    |DEBUG|deepbiome.py:176] Save history at ./example_result/hist_2.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008580684661865234!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6129634976387024, 0.6974999904632568, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 11us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008562803268432617!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6491227746009827, 0.6549999713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:187] Compute time : 4.004520893096924\n",
      "[root    |INFO|deepbiome.py:188] 3 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:143] -------4 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:153] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:154] Build network for 4 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:527] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:528] Phylogenetic_tree_dict info: ['Family', 'Number', 'Genus', 'Phylum', 'Order', 'Class']\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:552] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:561] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:562] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:644] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:164] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:165] 4 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 789us/step - loss: 0.6687 - binary_accuracy: 0.6484 - sensitivity: 0.9231 - specificity: 0.0769 - gmeasure: 0.0000e+00 - val_loss: 0.6375 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 140us/step - loss: 0.6267 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 0.6217 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6218 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 133us/step - loss: 0.6234 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6213 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 0.6252 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6220 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 129us/step - loss: 0.6224 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 132us/step - loss: 0.6225 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 129us/step - loss: 0.6227 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 132us/step - loss: 0.6224 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 136us/step - loss: 0.6226 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6213 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 3.0860776901245117!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |DEBUG|deepbiome.py:173] Save weight at ./example_result/weight_3.h5\n",
      "[root    |DEBUG|deepbiome.py:176] Save history at ./example_result/hist_3.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.007544755935668945!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.622069776058197, 0.6862499713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 10us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.006879329681396484!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6191190481185913, 0.6899999976158142, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:187] Compute time : 3.586787700653076\n",
      "[root    |INFO|deepbiome.py:188] 4 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:143] -------5 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:153] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:154] Build network for 5 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:527] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:528] Phylogenetic_tree_dict info: ['Family', 'Number', 'Genus', 'Phylum', 'Order', 'Class']\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:552] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:561] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:562] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:644] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:164] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:165] 5 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 818us/step - loss: 0.6632 - binary_accuracy: 0.6641 - sensitivity: 0.9447 - specificity: 0.0556 - gmeasure: 0.0347 - val_loss: 0.6246 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.6341 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6172 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6284 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6179 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6277 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6173 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6270 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6164 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 134us/step - loss: 0.6274 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6163 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 132us/step - loss: 0.6282 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6167 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 131us/step - loss: 0.6271 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6161 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.6275 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6161 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 142us/step - loss: 0.6275 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6163 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 3.274052143096924!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |DEBUG|deepbiome.py:173] Save weight at ./example_result/weight_4.h5\n",
      "[root    |DEBUG|deepbiome.py:176] Save history at ./example_result/hist_4.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.009055852890014648!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.625038206577301, 0.6825000047683716, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 11us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008618593215942383!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6071662306785583, 0.7049999833106995, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:187] Compute time : 3.7708871364593506\n",
      "[root    |INFO|deepbiome.py:188] 5 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:191] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:193] Train Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure']\n",
      "[root    |INFO|deepbiome.py:196]       mean : [0.61508931 0.69449999 1.         0.         0.        ]\n",
      "[root    |INFO|deepbiome.py:197]        std : [0.01161523 0.01370677 0.         0.         0.        ]\n",
      "[root    |INFO|deepbiome.py:198] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:200] Test Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure']\n",
      "[root    |INFO|deepbiome.py:203]       mean : [0.6175505 0.692     1.        0.        0.       ]\n",
      "[root    |INFO|deepbiome.py:204]        std : [0.01843003 0.02158705 0.         0.         0.        ]\n",
      "[root    |INFO|deepbiome.py:205] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:214] Total Computing Ended\n",
      "[root    |INFO|deepbiome.py:215] -----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "test_evaluation, train_evaluation, network = deepbiome.deepbiome_train(log, network_info, path_info, number_of_fold=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The `deepbiome_train` saves the trained model weights, evaluation results and history based on the path information from the configuration.\n",
    "\n",
    "From the example above, we can check that `hist_*.json`, `weight_*.h5`, `test_eval.npy`, `train_eval.npy` files were saved."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['hist_0.json',\n",
       " 'weight_2.h5',\n",
       " 'test_eval.npy',\n",
       " 'weight_0.h5',\n",
       " 'train_eval.npy',\n",
       " 'hist_2.json',\n",
       " 'hist_4.json',\n",
       " 'weight_3.h5',\n",
       " 'hist_3.json',\n",
       " 'weight_1.h5',\n",
       " 'weight_4.h5',\n",
       " 'hist_1.json']"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "os.listdir(path_info['model_info']['model_dir'])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Lets check the history files."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f23f0196208>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "with open('./%s/hist_0.json' % path_info['model_info']['model_dir'], 'r') as f:\n",
    "    history = json.load(f)\n",
    "    \n",
    "plt.plot(history['val_loss'], label='Validation')\n",
    "plt.plot(history['loss'], label='Training')\n",
    "plt.legend()\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Test evauation and train evauation is the numpy array of the shape (number of folds, number of evaluation measures)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.61906213, 0.69      , 1.        , 0.        , 0.        ],\n",
       "       [0.59328234, 0.72000003, 1.        , 0.        , 0.        ],\n",
       "       [0.64912277, 0.65499997, 1.        , 0.        , 0.        ],\n",
       "       [0.61911905, 0.69      , 1.        , 0.        , 0.        ],\n",
       "       [0.60716623, 0.70499998, 1.        , 0.        , 0.        ]])"
      ]
     },
     "execution_count": 21,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "test_evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.62205362, 0.68624997, 1.        , 0.        , 0.        ],\n",
       "       [0.59332144, 0.72000003, 1.        , 0.        , 0.        ],\n",
       "       [0.6129635 , 0.69749999, 1.        , 0.        , 0.        ],\n",
       "       [0.62206978, 0.68624997, 1.        , 0.        , 0.        ],\n",
       "       [0.62503821, 0.6825    , 1.        , 0.        , 0.        ]])"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "train_evaluation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 5. Load the pre-trained network for training\n",
    "\n",
    "If you have a pre-trianed model, you warm_start next training using the pre-trained weights by setting the `warm_start` option in `training_info` to `True`. The file path of the pre-trained weights passed in the `warm_start_model` option. Below is the example:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "warm_start_network_info = {\n",
    "    'architecture_info': {\n",
    "        'batch_normalization': 'False',\n",
    "        'drop_out': '0',\n",
    "        'weight_initial': 'glorot_uniform',\n",
    "        'weight_l1_penalty':'0.',\n",
    "        'weight_decay': 'phylogenetic_tree',\n",
    "    },\n",
    "    'model_info': {\n",
    "        'decay': '0.001',\n",
    "        'loss': 'binary_crossentropy',\n",
    "        'lr': '0.01',\n",
    "        'metrics': 'binary_accuracy, sensitivity, specificity, gmeasure',\n",
    "        'network_class': 'DeepBiomeNetwork',\n",
    "        'normalizer': 'normalize_minmax',\n",
    "        'optimizer': 'adam',\n",
    "        'reader_class': 'MicroBiomeClassificationReader',\n",
    "        'taxa_selection_metrics': 'sensitivity, specificity, gmeasure, accuracy',\n",
    "    },\n",
    "    'training_info': {\n",
    "        'warm_start':'True',\n",
    "        'warm_start_model':'./example_result/weight.h5',\n",
    "        'epochs': '10',\n",
    "        'batch_size': '50',\n",
    "        'callbacks': 'ModelCheckpoint',\n",
    "        'monitor': 'val_loss',\n",
    "        'mode' : 'min',\n",
    "        'min_delta': '1e-7',\n",
    "    },\n",
    "    'validation_info': {\n",
    "        'batch_size': 'None', \n",
    "        'validation_size': '0.2'\n",
    "    },\n",
    "    'test_info': {\n",
    "        'batch_size': 'None'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:105] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:143] -------1 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:153] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:154] Build network for 1 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:527] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:528] Phylogenetic_tree_dict info: ['Family', 'Number', 'Genus', 'Phylum', 'Order', 'Class']\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:552] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:561] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:562] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:644] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |INFO|deepbiome.py:164] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:165] 1 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 892us/step - loss: 0.6250 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6163 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 142us/step - loss: 0.6236 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6163 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.6234 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6159 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.6252 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6159 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6224 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6164 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 0.6234 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6164 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6231 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6154 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 145us/step - loss: 0.6222 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6149 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 0.6220 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6143 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 136us/step - loss: 0.6216 - binary_accuracy: 0.6844 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6135 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 3.1692304611206055!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |DEBUG|deepbiome.py:173] Save weight at ./example_result/weight_0.h5\n",
      "[root    |DEBUG|deepbiome.py:176] Save history at ./example_result/hist_0.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 4us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.00912928581237793!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6191209554672241, 0.6862499713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 10us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.00820779800415039!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6175422668457031, 0.6899999976158142, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:187] Compute time : 3.968101978302002\n",
      "[root    |INFO|deepbiome.py:188] 1 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:143] -------2 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:153] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:154] Build network for 2 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:527] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:528] Phylogenetic_tree_dict info: ['Family', 'Number', 'Genus', 'Phylum', 'Order', 'Class']\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:552] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:561] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:562] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:644] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |INFO|deepbiome.py:164] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:165] 2 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 829us/step - loss: 0.5979 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5766 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 142us/step - loss: 0.5975 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5769 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 140us/step - loss: 0.5972 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5778 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 136us/step - loss: 0.5976 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5770 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 0.5974 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5776 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 140us/step - loss: 0.5975 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5766 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.5977 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5764 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.5984 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5799 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 135us/step - loss: 0.5975 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5765 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 132us/step - loss: 0.5988 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5761 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 2.788219928741455!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |DEBUG|deepbiome.py:173] Save weight at ./example_result/weight_1.h5\n",
      "[root    |DEBUG|deepbiome.py:176] Save history at ./example_result/hist_1.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.00928497314453125!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.5930259227752686, 0.7200000286102295, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 9us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008110761642456055!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.5930126309394836, 0.7200000286102295, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:187] Compute time : 3.68731951713562\n",
      "[root    |INFO|deepbiome.py:188] 2 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:143] -------3 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:153] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:154] Build network for 3 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:527] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:528] Phylogenetic_tree_dict info: ['Family', 'Number', 'Genus', 'Phylum', 'Order', 'Class']\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:552] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:561] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:562] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:644] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |INFO|deepbiome.py:164] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:165] 3 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 830us/step - loss: 0.6164 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6108 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6137 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6108 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 143us/step - loss: 0.6139 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6109 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.6151 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6115 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 135us/step - loss: 0.6137 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6108 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 133us/step - loss: 0.6136 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6108 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 125us/step - loss: 0.6142 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6108 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 122us/step - loss: 0.6138 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6108 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 132us/step - loss: 0.6135 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6109 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 132us/step - loss: 0.6136 - binary_accuracy: 0.6969 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6108 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 3.0692005157470703!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |DEBUG|deepbiome.py:173] Save weight at ./example_result/weight_2.h5\n",
      "[root    |DEBUG|deepbiome.py:176] Save history at ./example_result/hist_2.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.00844264030456543!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6129232048988342, 0.6974999904632568, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 11us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.00893092155456543!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6492912173271179, 0.6549999713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:187] Compute time : 3.7430260181427\n",
      "[root    |INFO|deepbiome.py:188] 3 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:143] -------4 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:153] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:154] Build network for 4 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:527] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:528] Phylogenetic_tree_dict info: ['Family', 'Number', 'Genus', 'Phylum', 'Order', 'Class']\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:552] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:561] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:562] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:644] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |INFO|deepbiome.py:164] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:165] 4 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 833us/step - loss: 0.6237 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 133us/step - loss: 0.6231 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 140us/step - loss: 0.6226 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 146us/step - loss: 0.6230 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 0.6226 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 145us/step - loss: 0.6224 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6212 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 145us/step - loss: 0.6224 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 135us/step - loss: 0.6226 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.6225 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 0.6229 - binary_accuracy: 0.6859 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6211 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 2.882859468460083!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |DEBUG|deepbiome.py:173] Save weight at ./example_result/weight_3.h5\n",
      "[root    |DEBUG|deepbiome.py:176] Save history at ./example_result/hist_3.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.009296894073486328!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6220885515213013, 0.6862499713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 10us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008175849914550781!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6191012859344482, 0.6899999976158142, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:187] Compute time : 3.550508737564087\n",
      "[root    |INFO|deepbiome.py:188] 4 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:143] -------5 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:153] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:154] Build network for 5 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:527] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:528] Phylogenetic_tree_dict info: ['Family', 'Number', 'Genus', 'Phylum', 'Order', 'Class']\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:552] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:561] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:562] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:644] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |INFO|deepbiome.py:164] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:165] 5 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 834us/step - loss: 0.6305 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6165 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.6315 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6182 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 0.6281 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6165 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 0.6273 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6161 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 134us/step - loss: 0.6273 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6167 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 133us/step - loss: 0.6270 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6165 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 135us/step - loss: 0.6270 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6162 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 132us/step - loss: 0.6270 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6162 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 125us/step - loss: 0.6274 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6166 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 127us/step - loss: 0.6268 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6157 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 2.8331711292266846!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |DEBUG|deepbiome.py:173] Save weight at ./example_result/weight_4.h5\n",
      "[root    |DEBUG|deepbiome.py:176] Save history at ./example_result/hist_4.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 4us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.009704828262329102!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6242516040802002, 0.6825000047683716, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 12us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.009012222290039062!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6066065430641174, 0.7049999833106995, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:187] Compute time : 3.8955934047698975\n",
      "[root    |INFO|deepbiome.py:188] 5 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:191] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:193] Train Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure']\n",
      "[root    |INFO|deepbiome.py:196]       mean : [0.61428205 0.69449999 1.         0.         0.        ]\n",
      "[root    |INFO|deepbiome.py:197]        std : [0.01129086 0.01370677 0.         0.         0.        ]\n",
      "[root    |INFO|deepbiome.py:198] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:200] Test Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure']\n",
      "[root    |INFO|deepbiome.py:203]       mean : [0.61711079 0.692      1.         0.         0.        ]\n",
      "[root    |INFO|deepbiome.py:204]        std : [0.01860531 0.02158705 0.         0.         0.        ]\n",
      "[root    |INFO|deepbiome.py:205] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:214] Total Computing Ended\n",
      "[root    |INFO|deepbiome.py:215] -----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "test_evaluation, train_evaluation, network = deepbiome.deepbiome_train(log, warm_start_network_info, path_info, \n",
    "                                                                       number_of_fold=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Let's check the history plot again."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\nYII=\n",
      "text/plain": [
       "<matplotlib.figure.Figure at 0x7f23e84948d0>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "with open('./%s/hist_0.json' % path_info['model_info']['model_dir'], 'r') as f:\n",
    "    history = json.load(f)\n",
    "    \n",
    "plt.plot(history['val_loss'], label='Validation')\n",
    "plt.plot(history['loss'], label='Training')\n",
    "plt.legend()\n",
    "plt.xlabel('Epochs')\n",
    "plt.ylabel('Loss')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 6. Load the pre-trained network for testing\n",
    "\n",
    "To test the trained model, we can use the `deepbiome_test` function. \n",
    "\n",
    "If you use the index file (`idx_path`), this function provides the evaluation using the test index (index set not included in the index file) for each fold. If not, this function provides the evaluation using the whole samples. \n",
    "\n",
    "If `number_of_fold` is set to `k`, the function will test the model only with first `k` folds.\n",
    "\n",
    "We can use the testing metrics different with the training. In the example below, we additionally used `AUC` metric."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "test_network_info = {\n",
    "    'architecture_info': {\n",
    "        'batch_normalization': 'False',\n",
    "        'drop_out': '0',\n",
    "        'weight_initial': 'glorot_uniform',\n",
    "        'weight_l1_penalty':'0.',\n",
    "        'weight_decay': 'phylogenetic_tree',\n",
    "    },\n",
    "    'model_info': {\n",
    "        'lr': '0.01',\n",
    "        'decay': '0.001',\n",
    "        'loss': 'binary_crossentropy',\n",
    "        'metrics': 'binary_accuracy, sensitivity, specificity, gmeasure, auc',\n",
    "        'taxa_selection_metrics': 'sensitivity, specificity, gmeasure, accuracy',\n",
    "        'network_class': 'DeepBiomeNetwork',\n",
    "        'optimizer': 'adam',\n",
    "        'reader_class': 'MicroBiomeClassificationReader',\n",
    "        'normalizer': 'normalize_minmax',\n",
    "    },\n",
    "    'test_info': {\n",
    "        'batch_size': 'None'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "test_path_info = {\n",
    "    'data_info': {\n",
    "        'data_path': resource_filename('deepbiome', 'tests/data'),\n",
    "        'idx_path': resource_filename('deepbiome', 'tests/data/onefile_idx.csv'),\n",
    "        'tree_info_path': resource_filename('deepbiome', 'tests/data/genus48_dic.csv'),\n",
    "        'x_path': 'onefile_x.csv',\n",
    "        'y_path': 'classification_y.csv'\n",
    "    },\n",
    "    'model_info': {\n",
    "        'evaluation': 'eval.npy',\n",
    "        'model_dir': './example_result/',\n",
    "        'weight': 'weight.h5'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:270] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:302] Test Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure' 'auc']\n",
      "[root    |INFO|deepbiome.py:304] -------1 fold test start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:314] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:315] Build network for 1 fold testing\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:527] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:528] Phylogenetic_tree_dict info: ['Family', 'Number', 'Genus', 'Phylum', 'Order', 'Class']\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:552] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:561] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:562] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:644] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|deepbiome.py:324] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:325] 1 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 501us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.2890446186065674!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6175422668457031, 0.6899999976158142, 1.0, 0.0, 0.0, 0.6119097471237183]\n",
      "[root    |INFO|deepbiome.py:328] \n",
      "[root    |INFO|deepbiome.py:330] Compute time : 0.8955996036529541\n",
      "[root    |INFO|deepbiome.py:331] 1 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:304] -------2 fold test start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:314] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:315] Build network for 2 fold testing\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:527] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:528] Phylogenetic_tree_dict info: ['Family', 'Number', 'Genus', 'Phylum', 'Order', 'Class']\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:552] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:561] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:562] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:644] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|deepbiome.py:324] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:325] 2 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 570us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.30713725090026855!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.5930126309394836, 0.7200000286102295, 1.0, 0.0, 0.0, 0.4676339328289032]\n",
      "[root    |INFO|deepbiome.py:328] \n",
      "[root    |INFO|deepbiome.py:330] Compute time : 0.928109884262085\n",
      "[root    |INFO|deepbiome.py:331] 2 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:304] -------3 fold test start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:314] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:315] Build network for 3 fold testing\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:527] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:528] Phylogenetic_tree_dict info: ['Family', 'Number', 'Genus', 'Phylum', 'Order', 'Class']\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:552] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:561] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:562] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:644] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|deepbiome.py:324] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:325] 3 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 559us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.3006868362426758!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6492912173271179, 0.6549999713897705, 1.0, 0.0, 0.0, 0.503208339214325]\n",
      "[root    |INFO|deepbiome.py:328] \n",
      "[root    |INFO|deepbiome.py:330] Compute time : 0.9007182121276855\n",
      "[root    |INFO|deepbiome.py:331] 3 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:304] -------4 fold test start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:314] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:315] Build network for 4 fold testing\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:527] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:528] Phylogenetic_tree_dict info: ['Family', 'Number', 'Genus', 'Phylum', 'Order', 'Class']\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:552] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:561] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:562] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:644] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|deepbiome.py:324] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:325] 4 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 583us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.3135414123535156!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6191012859344482, 0.6899999976158142, 1.0, 0.0, 0.0, 0.5568606853485107]\n",
      "[root    |INFO|deepbiome.py:328] \n",
      "[root    |INFO|deepbiome.py:330] Compute time : 1.1899607181549072\n",
      "[root    |INFO|deepbiome.py:331] 4 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:304] -------5 fold test start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:314] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:315] Build network for 5 fold testing\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:527] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:528] Phylogenetic_tree_dict info: ['Family', 'Number', 'Genus', 'Phylum', 'Order', 'Class']\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:552] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:561] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:562] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:644] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|deepbiome.py:324] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:325] 5 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 575us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.311753511428833!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6066065430641174, 0.7049999833106995, 1.0, 0.0, 0.0, 0.5784950256347656]\n",
      "[root    |INFO|deepbiome.py:328] \n",
      "[root    |INFO|deepbiome.py:330] Compute time : 0.9292402267456055\n",
      "[root    |INFO|deepbiome.py:331] 5 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:334] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:336] Test Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure' 'auc']\n",
      "[root    |INFO|deepbiome.py:339]       mean : [0.61711079 0.692      1.         0.         0.         0.54362155]\n",
      "[root    |INFO|deepbiome.py:340]        std : [0.01860531 0.02158705 0.         0.         0.         0.05188845]\n",
      "[root    |INFO|deepbiome.py:341] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:344] Total Computing Ended\n",
      "[root    |INFO|deepbiome.py:345] -----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "evaluation = deepbiome.deepbiome_test(log, test_network_info, test_path_info, number_of_fold=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This function provides the evaluation result as a numpy array with a shape of (number of folds, number of evaluation measures)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "                  loss binary_accuracy     sensitivity     specificity        gmeasure             auc\n",
      "Mean:           0.6171          0.6920          1.0000          0.0000          0.0000          0.5436\n",
      "Std :           0.0186          0.0216          0.0000          0.0000          0.0000          0.0519\n"
     ]
    }
   ],
   "source": [
    "print('      %s' % ''.join(['%16s'%'loss']+ ['%16s'%s.strip() for s in test_network_info['model_info']['metrics'].split(',')]))\n",
    "print('Mean: %s' % ''.join(['%16.4f'%v for v in np.mean(evaluation, axis=0)]))\n",
    "print('Std : %s' % ''.join(['%16.4f'%v for v in np.std(evaluation, axis=0)]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 7. Load the pre-trained network for prediction\n",
    "\n",
    "If you want to predict using the pre-trained model, you can use the `deepbiome_prediction` function. If `number_of_fold` is setted as `k`, the function will predict only with first `k` folds sample's outputs. \n",
    "\n",
    "If `change_weight_for_each_fold` is set as `False`, the function will predict the output of every folds by same weight from the given path. If `change_weight_for_each_fold` is set as `True`, the function will predict the output of by each fold weight.\n",
    "\n",
    "If 'get_y=True', the function will provide a list of tuples (prediction, true output) as a output with the shape of `(n_samples, 2, n_classes)`. If 'get_y=False', the function will provide predictions only. The output will have the shape of `(n_samples, n_classes)`."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 7.1 Prediction with fixed weight\n",
    "\n",
    "If we want to predict new data from one pre-trained model, we can use the option below. We fixed the weight `weight_0.h5` for predicting the whole samples from `onefile_x.csv` (without using index file)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "prediction_network_info = {\n",
    "    'architecture_info': {\n",
    "        'batch_normalization': 'False',\n",
    "        'drop_out': '0',\n",
    "        'weight_initial': 'glorot_uniform',\n",
    "        'weight_l1_penalty':'0.',\n",
    "        'weight_decay': 'phylogenetic_tree',\n",
    "    },\n",
    "    'model_info': {\n",
    "        'decay': '0.001',\n",
    "        'loss': 'binary_crossentropy',\n",
    "        'lr': '0.01',\n",
    "        'metrics': 'binary_accuracy, sensitivity, specificity, gmeasure, auc',\n",
    "        'network_class': 'DeepBiomeNetwork',\n",
    "        'normalizer': 'normalize_minmax',\n",
    "        'optimizer': 'adam',\n",
    "        'reader_class': 'MicroBiomeClassificationReader',\n",
    "        'taxa_selection_metrics': 'sensitivity, specificity, gmeasure, accuracy',\n",
    "    },\n",
    "    'test_info': {\n",
    "        'batch_size': 'None'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "prediction_path_info = {\n",
    "    'data_info': {\n",
    "        'data_path': resource_filename('deepbiome', 'tests/data'),\n",
    "        'tree_info_path': resource_filename('deepbiome', 'tests/data/genus48_dic.csv'),\n",
    "        'x_path': 'onefile_x.csv',\n",
    "        'y_path': 'classification_y.csv'\n",
    "    },\n",
    "    'model_info': {\n",
    "        'model_dir': './example_result/',\n",
    "        'weight': 'weight_0.h5'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:414] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:444] -------1 th repeatition prediction start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:462] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:527] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:528] Phylogenetic_tree_dict info: ['Family', 'Number', 'Genus', 'Phylum', 'Order', 'Class']\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:552] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:561] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:562] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:644] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|deepbiome.py:472] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:190] Prediction start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "1000/1000 [==============================] - 0s 51us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:195] Prediction end with time 0.05431079864501953!\n",
      "[root    |INFO|deepbiome.py:476] Compute time : 0.7900290489196777\n",
      "[root    |INFO|deepbiome.py:477] 1 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:482] Total Computing Ended\n",
      "[root    |INFO|deepbiome.py:483] -----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "prediction = deepbiome.deepbiome_prediction(log, prediction_network_info, prediction_path_info,\n",
    "                                            num_classes = 1, number_of_fold=None)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1, 1000, 1)"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prediction.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0.68767333],\n",
       "       [0.6847593 ],\n",
       "       [0.69167304],\n",
       "       [0.6907062 ],\n",
       "       [0.692378  ],\n",
       "       [0.6909707 ],\n",
       "       [0.6942852 ],\n",
       "       [0.67324674],\n",
       "       [0.6900267 ],\n",
       "       [0.69109344]], dtype=float32)"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prediction[0,:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### 7.2 Prediction with each fold weight\n",
    "\n",
    "If we want to predict the cross-validation outputs, we can use the option belows.\n",
    "\n",
    "The example below shows how to predict the 5-fold cross-validation outputs. (If we use the leave-one-out-cross-validation (LOOCV) for training, we can predict the LOOCV outputs by same way.)\n",
    "We set `idx_path` for using the index file `onefile_idx.csv` to predict only the test set for each fold."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "prediction_network_info = {\n",
    "    'architecture_info': {\n",
    "        'batch_normalization': 'False',\n",
    "        'drop_out': '0',\n",
    "        'weight_initial': 'glorot_uniform',\n",
    "        'weight_l1_penalty':'0.',\n",
    "        'weight_decay': 'phylogenetic_tree',\n",
    "    },\n",
    "    'model_info': {\n",
    "        'decay': '0.001',\n",
    "        'loss': 'binary_crossentropy',\n",
    "        'lr': '0.01',\n",
    "        'metrics': 'binary_accuracy, sensitivity, specificity, gmeasure, auc',\n",
    "        'network_class': 'DeepBiomeNetwork',\n",
    "        'normalizer': 'normalize_minmax',\n",
    "        'optimizer': 'adam',\n",
    "        'reader_class': 'MicroBiomeClassificationReader',\n",
    "        'taxa_selection_metrics': 'sensitivity, specificity, gmeasure, accuracy',\n",
    "    },\n",
    "    'test_info': {\n",
    "        'batch_size': 'None'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "prediction_path_info = {\n",
    "    'data_info': {\n",
    "        'data_path': resource_filename('deepbiome', 'tests/data'),\n",
    "        'idx_path': resource_filename('deepbiome', 'tests/data/onefile_idx.csv'),\n",
    "        'tree_info_path': resource_filename('deepbiome', 'tests/data/genus48_dic.csv'),\n",
    "        'x_path': 'onefile_x.csv',\n",
    "        'y_path': 'classification_y.csv'\n",
    "    },\n",
    "    'model_info': {\n",
    "        'model_dir': './example_result/',\n",
    "        'weight': 'weight.h5'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To predict the CV outputs from each fold, we set `change_weight_for_each_fold = True`. Also, we set `get_y=True` to get the paired output of each prediction too."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:414] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:444] -------1 th repeatition prediction start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:462] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:527] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:528] Phylogenetic_tree_dict info: ['Family', 'Number', 'Genus', 'Phylum', 'Order', 'Class']\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:552] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:561] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:562] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:644] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|deepbiome.py:472] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:190] Prediction start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 244us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:195] Prediction end with time 0.051938772201538086!\n",
      "[root    |INFO|deepbiome.py:476] Compute time : 0.8077380657196045\n",
      "[root    |INFO|deepbiome.py:477] 1 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:444] -------2 th repeatition prediction start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:462] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:527] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:528] Phylogenetic_tree_dict info: ['Family', 'Number', 'Genus', 'Phylum', 'Order', 'Class']\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:552] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:561] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:562] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:644] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_2\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|deepbiome.py:472] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:190] Prediction start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 341us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:195] Prediction end with time 0.07185721397399902!\n",
      "[root    |INFO|deepbiome.py:476] Compute time : 0.6983919143676758\n",
      "[root    |INFO|deepbiome.py:477] 2 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:444] -------3 th repeatition prediction start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:462] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:527] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:528] Phylogenetic_tree_dict info: ['Family', 'Number', 'Genus', 'Phylum', 'Order', 'Class']\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:552] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:561] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:562] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:644] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_3\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|deepbiome.py:472] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:190] Prediction start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 390us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:195] Prediction end with time 0.08189272880554199!\n",
      "[root    |INFO|deepbiome.py:476] Compute time : 0.8404061794281006\n",
      "[root    |INFO|deepbiome.py:477] 3 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:444] -------4 th repeatition prediction start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:462] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:527] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:528] Phylogenetic_tree_dict info: ['Family', 'Number', 'Genus', 'Phylum', 'Order', 'Class']\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:552] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:561] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:562] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:644] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_4\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|deepbiome.py:472] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:190] Prediction start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 532us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:195] Prediction end with time 0.11005210876464844!\n",
      "[root    |INFO|deepbiome.py:476] Compute time : 1.0676665306091309\n",
      "[root    |INFO|deepbiome.py:477] 4 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:444] -------5 th repeatition prediction start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:462] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:527] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:528] Phylogenetic_tree_dict info: ['Family', 'Number', 'Genus', 'Phylum', 'Order', 'Class']\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:552] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:561] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:562] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_5\"\n",
      "_________________________________________________________________\n",
      "Layer (type)                 Output Shape              Param #   \n",
      "=================================================================\n",
      "input (InputLayer)           (None, 48)                0         \n",
      "_________________________________________________________________\n",
      "l1_dense (Dense_with_tree)   (None, 40)                1960      \n",
      "_________________________________________________________________\n",
      "l1_activation (Activation)   (None, 40)                0         \n",
      "_________________________________________________________________\n",
      "l2_dense (Dense_with_tree)   (None, 23)                943       \n",
      "_________________________________________________________________\n",
      "l2_activation (Activation)   (None, 23)                0         \n",
      "_________________________________________________________________\n",
      "l3_dense (Dense_with_tree)   (None, 17)                408       \n",
      "_________________________________________________________________\n",
      "l3_activation (Activation)   (None, 17)                0         \n",
      "_________________________________________________________________\n",
      "l4_dense (Dense_with_tree)   (None, 9)                 162       \n",
      "_________________________________________________________________\n",
      "l4_activation (Activation)   (None, 9)                 0         \n",
      "_________________________________________________________________\n",
      "last_dense_h (Dense)         (None, 1)                 10        \n",
      "_________________________________________________________________"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:644] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "p_hat (Activation)           (None, 1)                 0         \n",
      "=================================================================\n",
      "Total params: 3,483\n",
      "Trainable params: 3,483\n",
      "Non-trainable params: 0\n",
      "_________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure, auc\n",
      "[root    |INFO|deepbiome.py:472] -----------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:190] Prediction start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 645us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:195] Prediction end with time 0.13255953788757324!\n",
      "[root    |INFO|deepbiome.py:476] Compute time : 0.9484987258911133\n",
      "[root    |INFO|deepbiome.py:477] 5 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:482] Total Computing Ended\n",
      "[root    |INFO|deepbiome.py:483] -----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "prediction = deepbiome.deepbiome_prediction(log, prediction_network_info, prediction_path_info,\n",
    "                                            num_classes = 1, number_of_fold=None, \n",
    "                                            change_weight_for_each_fold = True, \n",
    "                                            get_y=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We gathered the outputs from each fold. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "prediction = np.vstack(prediction)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since we set the option `get_y=True`, the output has the shape of `(n_samples, 2, n_classes)`. With this options, we can get the CV predictions and the true output of each predictions.\n",
    "\n",
    "Now, we can calculate the CV performance by the CV predictions."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|<ipython-input-39-edc88a58497e>:4] Shape of the predict function output: (1000, 2, 1)\n",
      "[root    |INFO|<ipython-input-39-edc88a58497e>:5] Shape of the prediction: (1000, 1)\n",
      "[root    |INFO|<ipython-input-39-edc88a58497e>:6] Shape of the true_output for each prediction: (1000, 1)\n"
     ]
    }
   ],
   "source": [
    "predict_output = prediction[:,0]\n",
    "true_output = prediction[:,1]\n",
    "\n",
    "log.info('Shape of the predict function output: %s' % str(prediction.shape))\n",
    "log.info('Shape of the prediction: %s' % str(predict_output.shape))\n",
    "log.info('Shape of the true_output for each prediction: %s' % str(true_output.shape))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|<ipython-input-40-ecaee2413087>:1] CV accuracy:  0.692\n"
     ]
    }
   ],
   "source": [
    "log.info('CV accuracy: %6.3f' % np.mean((predict_output >= 0.5) ==  true_output))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 8. Load trained weight matrix\n",
    "\n",
    "The `deepbiome_get_trained_weight` function convert the trained weight `*.h5` saved from the `deepbiome_train` to a list of pandas dataframe.\n",
    "In this exampe, the list has numpy array of weights from 6 layers. (`[genus to family, family to order, order to Class, class to phylum, phylum to output]`)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|<ipython-input-41-d6c43d8a172c>:3] 5\n"
     ]
    }
   ],
   "source": [
    "weight_path = '%s/%s' % (prediction_path_info['model_info']['model_dir'], 'weight_0.h5')\n",
    "trained_weight_list = deepbiome.deepbiome_get_trained_weight(log, network_info, path_info, num_classes=1, weight_path=weight_path)\n",
    "log.info(len(trained_weight_list))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First weight between the `genus` and `family` layers has the shape of `(number of genus = 48, number of family = 40)`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|<ipython-input-42-c71fa46ab178>:1] (48, 40)\n"
     ]
    }
   ],
   "source": [
    "log.info(trained_weight_list[0].shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Streptococcaceae</th>\n",
       "      <th>Cellulomonadaceae</th>\n",
       "      <th>Veillonellaceae</th>\n",
       "      <th>Actinomycetaceae</th>\n",
       "      <th>Flavobacteriaceae</th>\n",
       "      <th>Prevotellaceae</th>\n",
       "      <th>Porphyromonadaceae</th>\n",
       "      <th>Clostridiales_Incertae_Sedis_XI</th>\n",
       "      <th>Fusobacteriaceae</th>\n",
       "      <th>Propionibacteriaceae</th>\n",
       "      <th>...</th>\n",
       "      <th>Methylobacteriaceae</th>\n",
       "      <th>OD1_genera_incertae_sedis</th>\n",
       "      <th>Microbacteriaceae</th>\n",
       "      <th>Sphingomonadaceae</th>\n",
       "      <th>Bacteroidaceae</th>\n",
       "      <th>Bdellovibrionaceae</th>\n",
       "      <th>Chloroplast</th>\n",
       "      <th>Rhodobacteraceae</th>\n",
       "      <th>Ruminococcaceae</th>\n",
       "      <th>Pseudonocardiaceae</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Streptococcus</th>\n",
       "      <td>-0.202814</td>\n",
       "      <td>0.001717</td>\n",
       "      <td>0.001832</td>\n",
       "      <td>0.004435</td>\n",
       "      <td>-0.002121</td>\n",
       "      <td>0.000218</td>\n",
       "      <td>-0.000822</td>\n",
       "      <td>0.002332</td>\n",
       "      <td>0.003229</td>\n",
       "      <td>-0.004078</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001454</td>\n",
       "      <td>-0.002215</td>\n",
       "      <td>-0.002341</td>\n",
       "      <td>0.006854</td>\n",
       "      <td>0.001291</td>\n",
       "      <td>-0.000453</td>\n",
       "      <td>0.000119</td>\n",
       "      <td>-0.000395</td>\n",
       "      <td>0.001017</td>\n",
       "      <td>0.000939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tropheryma</th>\n",
       "      <td>0.002322</td>\n",
       "      <td>0.042933</td>\n",
       "      <td>0.000935</td>\n",
       "      <td>0.012188</td>\n",
       "      <td>0.000814</td>\n",
       "      <td>0.004179</td>\n",
       "      <td>-0.000029</td>\n",
       "      <td>0.002146</td>\n",
       "      <td>0.004282</td>\n",
       "      <td>-0.012615</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001889</td>\n",
       "      <td>-0.001770</td>\n",
       "      <td>-0.006998</td>\n",
       "      <td>0.017381</td>\n",
       "      <td>0.000431</td>\n",
       "      <td>0.001709</td>\n",
       "      <td>-0.000627</td>\n",
       "      <td>-0.001180</td>\n",
       "      <td>0.000498</td>\n",
       "      <td>-0.001376</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Veillonella</th>\n",
       "      <td>-0.002253</td>\n",
       "      <td>0.002096</td>\n",
       "      <td>0.058374</td>\n",
       "      <td>0.004825</td>\n",
       "      <td>0.000648</td>\n",
       "      <td>0.000314</td>\n",
       "      <td>0.000566</td>\n",
       "      <td>-0.001787</td>\n",
       "      <td>0.000664</td>\n",
       "      <td>-0.005658</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000444</td>\n",
       "      <td>0.000697</td>\n",
       "      <td>-0.002642</td>\n",
       "      <td>0.006234</td>\n",
       "      <td>0.002422</td>\n",
       "      <td>0.001871</td>\n",
       "      <td>-0.000835</td>\n",
       "      <td>0.000868</td>\n",
       "      <td>-0.000093</td>\n",
       "      <td>-0.000283</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Actinomyces</th>\n",
       "      <td>0.001193</td>\n",
       "      <td>0.001837</td>\n",
       "      <td>-0.001486</td>\n",
       "      <td>1.138382</td>\n",
       "      <td>-0.001572</td>\n",
       "      <td>0.000013</td>\n",
       "      <td>-0.001030</td>\n",
       "      <td>0.000116</td>\n",
       "      <td>-0.000325</td>\n",
       "      <td>-0.006020</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001218</td>\n",
       "      <td>0.002385</td>\n",
       "      <td>-0.001926</td>\n",
       "      <td>0.011310</td>\n",
       "      <td>-0.001754</td>\n",
       "      <td>0.002041</td>\n",
       "      <td>0.000506</td>\n",
       "      <td>0.001746</td>\n",
       "      <td>0.000935</td>\n",
       "      <td>0.000509</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Flavobacterium</th>\n",
       "      <td>-0.001268</td>\n",
       "      <td>-0.000707</td>\n",
       "      <td>0.001044</td>\n",
       "      <td>0.001266</td>\n",
       "      <td>-0.122806</td>\n",
       "      <td>0.002065</td>\n",
       "      <td>0.001603</td>\n",
       "      <td>0.002006</td>\n",
       "      <td>-0.000700</td>\n",
       "      <td>0.000484</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001275</td>\n",
       "      <td>0.002390</td>\n",
       "      <td>0.000723</td>\n",
       "      <td>0.000027</td>\n",
       "      <td>-0.001304</td>\n",
       "      <td>-0.002183</td>\n",
       "      <td>-0.002288</td>\n",
       "      <td>-0.000473</td>\n",
       "      <td>0.000207</td>\n",
       "      <td>-0.000386</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Prevotella</th>\n",
       "      <td>-0.001116</td>\n",
       "      <td>-0.001917</td>\n",
       "      <td>-0.000378</td>\n",
       "      <td>0.000084</td>\n",
       "      <td>-0.001331</td>\n",
       "      <td>0.344086</td>\n",
       "      <td>-0.002202</td>\n",
       "      <td>0.000737</td>\n",
       "      <td>-0.000126</td>\n",
       "      <td>-0.002018</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001078</td>\n",
       "      <td>0.000523</td>\n",
       "      <td>0.001951</td>\n",
       "      <td>0.000851</td>\n",
       "      <td>-0.001642</td>\n",
       "      <td>-0.000811</td>\n",
       "      <td>0.001375</td>\n",
       "      <td>0.001720</td>\n",
       "      <td>0.002224</td>\n",
       "      <td>0.002091</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Porphyromonas</th>\n",
       "      <td>-0.000578</td>\n",
       "      <td>0.000957</td>\n",
       "      <td>-0.000059</td>\n",
       "      <td>-0.006170</td>\n",
       "      <td>0.002248</td>\n",
       "      <td>-0.000138</td>\n",
       "      <td>-0.061989</td>\n",
       "      <td>0.001631</td>\n",
       "      <td>-0.002642</td>\n",
       "      <td>0.008407</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000651</td>\n",
       "      <td>-0.000976</td>\n",
       "      <td>0.003772</td>\n",
       "      <td>-0.008769</td>\n",
       "      <td>-0.000380</td>\n",
       "      <td>0.000280</td>\n",
       "      <td>-0.001862</td>\n",
       "      <td>-0.001252</td>\n",
       "      <td>-0.002199</td>\n",
       "      <td>-0.002171</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Parvimonas</th>\n",
       "      <td>0.002190</td>\n",
       "      <td>-0.002063</td>\n",
       "      <td>0.000746</td>\n",
       "      <td>0.001165</td>\n",
       "      <td>0.001718</td>\n",
       "      <td>-0.001649</td>\n",
       "      <td>-0.000474</td>\n",
       "      <td>0.268519</td>\n",
       "      <td>0.000239</td>\n",
       "      <td>-0.001063</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000286</td>\n",
       "      <td>-0.002061</td>\n",
       "      <td>-0.000948</td>\n",
       "      <td>0.000268</td>\n",
       "      <td>-0.000772</td>\n",
       "      <td>0.002566</td>\n",
       "      <td>-0.001124</td>\n",
       "      <td>-0.001606</td>\n",
       "      <td>0.001382</td>\n",
       "      <td>-0.001013</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fusobacterium</th>\n",
       "      <td>0.000659</td>\n",
       "      <td>-0.000011</td>\n",
       "      <td>0.001903</td>\n",
       "      <td>0.003095</td>\n",
       "      <td>0.001006</td>\n",
       "      <td>-0.000912</td>\n",
       "      <td>-0.001593</td>\n",
       "      <td>0.002070</td>\n",
       "      <td>0.362426</td>\n",
       "      <td>-0.000714</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001585</td>\n",
       "      <td>0.002327</td>\n",
       "      <td>-0.000729</td>\n",
       "      <td>0.000687</td>\n",
       "      <td>-0.001742</td>\n",
       "      <td>-0.002152</td>\n",
       "      <td>-0.002223</td>\n",
       "      <td>0.001762</td>\n",
       "      <td>0.000823</td>\n",
       "      <td>0.001576</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Propionibacterium</th>\n",
       "      <td>-0.000363</td>\n",
       "      <td>-0.002106</td>\n",
       "      <td>-0.000374</td>\n",
       "      <td>-0.011376</td>\n",
       "      <td>0.000717</td>\n",
       "      <td>-0.004349</td>\n",
       "      <td>-0.001759</td>\n",
       "      <td>-0.001709</td>\n",
       "      <td>-0.000245</td>\n",
       "      <td>2.306910</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.003019</td>\n",
       "      <td>-0.000814</td>\n",
       "      <td>0.009808</td>\n",
       "      <td>-0.015403</td>\n",
       "      <td>0.001907</td>\n",
       "      <td>0.002377</td>\n",
       "      <td>0.001609</td>\n",
       "      <td>-0.002072</td>\n",
       "      <td>0.002019</td>\n",
       "      <td>-0.001346</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gemella</th>\n",
       "      <td>-0.000545</td>\n",
       "      <td>0.000978</td>\n",
       "      <td>0.001712</td>\n",
       "      <td>-0.002678</td>\n",
       "      <td>-0.001694</td>\n",
       "      <td>-0.000157</td>\n",
       "      <td>-0.000541</td>\n",
       "      <td>0.000678</td>\n",
       "      <td>-0.002396</td>\n",
       "      <td>-0.000663</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001376</td>\n",
       "      <td>-0.002285</td>\n",
       "      <td>-0.001444</td>\n",
       "      <td>-0.002603</td>\n",
       "      <td>0.000179</td>\n",
       "      <td>0.000049</td>\n",
       "      <td>-0.002097</td>\n",
       "      <td>0.000665</td>\n",
       "      <td>0.000311</td>\n",
       "      <td>0.000977</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rothia</th>\n",
       "      <td>0.002052</td>\n",
       "      <td>-0.001993</td>\n",
       "      <td>-0.001575</td>\n",
       "      <td>-0.013858</td>\n",
       "      <td>-0.002309</td>\n",
       "      <td>-0.003692</td>\n",
       "      <td>0.000338</td>\n",
       "      <td>-0.003293</td>\n",
       "      <td>-0.004974</td>\n",
       "      <td>0.019094</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000323</td>\n",
       "      <td>0.000209</td>\n",
       "      <td>0.009027</td>\n",
       "      <td>-0.017854</td>\n",
       "      <td>0.002264</td>\n",
       "      <td>-0.002280</td>\n",
       "      <td>-0.002253</td>\n",
       "      <td>0.000541</td>\n",
       "      <td>-0.001911</td>\n",
       "      <td>0.000628</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Granulicatella</th>\n",
       "      <td>-0.002405</td>\n",
       "      <td>-0.001239</td>\n",
       "      <td>0.002014</td>\n",
       "      <td>0.001303</td>\n",
       "      <td>-0.002615</td>\n",
       "      <td>0.002234</td>\n",
       "      <td>0.002039</td>\n",
       "      <td>0.002567</td>\n",
       "      <td>0.001664</td>\n",
       "      <td>-0.003615</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001618</td>\n",
       "      <td>-0.001523</td>\n",
       "      <td>-0.003983</td>\n",
       "      <td>0.004906</td>\n",
       "      <td>-0.000834</td>\n",
       "      <td>0.001030</td>\n",
       "      <td>0.000617</td>\n",
       "      <td>0.000987</td>\n",
       "      <td>0.002214</td>\n",
       "      <td>0.000155</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Neisseria</th>\n",
       "      <td>-0.000405</td>\n",
       "      <td>0.001275</td>\n",
       "      <td>0.000188</td>\n",
       "      <td>-0.005453</td>\n",
       "      <td>0.000401</td>\n",
       "      <td>-0.002396</td>\n",
       "      <td>-0.001101</td>\n",
       "      <td>-0.002246</td>\n",
       "      <td>-0.001482</td>\n",
       "      <td>0.003335</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001535</td>\n",
       "      <td>0.001097</td>\n",
       "      <td>0.000174</td>\n",
       "      <td>-0.003391</td>\n",
       "      <td>-0.000666</td>\n",
       "      <td>0.000372</td>\n",
       "      <td>-0.001612</td>\n",
       "      <td>-0.002367</td>\n",
       "      <td>0.000029</td>\n",
       "      <td>-0.001042</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Lactobacillus</th>\n",
       "      <td>-0.000084</td>\n",
       "      <td>0.000320</td>\n",
       "      <td>0.001917</td>\n",
       "      <td>0.001616</td>\n",
       "      <td>0.000261</td>\n",
       "      <td>0.000116</td>\n",
       "      <td>-0.002030</td>\n",
       "      <td>-0.000361</td>\n",
       "      <td>-0.000190</td>\n",
       "      <td>0.002160</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002335</td>\n",
       "      <td>0.001054</td>\n",
       "      <td>-0.001735</td>\n",
       "      <td>0.002141</td>\n",
       "      <td>0.002136</td>\n",
       "      <td>-0.000736</td>\n",
       "      <td>-0.001960</td>\n",
       "      <td>-0.000892</td>\n",
       "      <td>-0.000348</td>\n",
       "      <td>0.002562</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Megasphaera</th>\n",
       "      <td>0.000965</td>\n",
       "      <td>-0.001938</td>\n",
       "      <td>-0.229280</td>\n",
       "      <td>-0.006574</td>\n",
       "      <td>0.000898</td>\n",
       "      <td>0.001427</td>\n",
       "      <td>-0.002363</td>\n",
       "      <td>-0.000153</td>\n",
       "      <td>-0.001935</td>\n",
       "      <td>0.007819</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000766</td>\n",
       "      <td>0.001315</td>\n",
       "      <td>0.003838</td>\n",
       "      <td>-0.007425</td>\n",
       "      <td>-0.001217</td>\n",
       "      <td>0.001092</td>\n",
       "      <td>0.001725</td>\n",
       "      <td>-0.000442</td>\n",
       "      <td>-0.001860</td>\n",
       "      <td>0.000489</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Catonella</th>\n",
       "      <td>0.002182</td>\n",
       "      <td>-0.001198</td>\n",
       "      <td>0.000570</td>\n",
       "      <td>0.003375</td>\n",
       "      <td>-0.000641</td>\n",
       "      <td>0.001987</td>\n",
       "      <td>0.002078</td>\n",
       "      <td>0.000949</td>\n",
       "      <td>0.001813</td>\n",
       "      <td>-0.005091</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001299</td>\n",
       "      <td>0.002149</td>\n",
       "      <td>-0.003586</td>\n",
       "      <td>0.006469</td>\n",
       "      <td>0.002475</td>\n",
       "      <td>0.002295</td>\n",
       "      <td>-0.001325</td>\n",
       "      <td>0.001621</td>\n",
       "      <td>-0.002543</td>\n",
       "      <td>0.001077</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Atopobium</th>\n",
       "      <td>0.002418</td>\n",
       "      <td>0.000317</td>\n",
       "      <td>-0.000662</td>\n",
       "      <td>-0.003194</td>\n",
       "      <td>0.000745</td>\n",
       "      <td>-0.001786</td>\n",
       "      <td>-0.000438</td>\n",
       "      <td>-0.002239</td>\n",
       "      <td>-0.000953</td>\n",
       "      <td>0.005788</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001347</td>\n",
       "      <td>0.002371</td>\n",
       "      <td>0.001542</td>\n",
       "      <td>-0.006437</td>\n",
       "      <td>-0.000040</td>\n",
       "      <td>-0.002008</td>\n",
       "      <td>-0.000311</td>\n",
       "      <td>-0.000517</td>\n",
       "      <td>-0.002360</td>\n",
       "      <td>-0.000080</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Campylobacter</th>\n",
       "      <td>-0.001173</td>\n",
       "      <td>0.002543</td>\n",
       "      <td>0.000823</td>\n",
       "      <td>-0.002618</td>\n",
       "      <td>-0.001196</td>\n",
       "      <td>0.001280</td>\n",
       "      <td>0.001990</td>\n",
       "      <td>-0.000602</td>\n",
       "      <td>0.001958</td>\n",
       "      <td>-0.000205</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001984</td>\n",
       "      <td>-0.001302</td>\n",
       "      <td>0.002822</td>\n",
       "      <td>-0.001559</td>\n",
       "      <td>-0.001494</td>\n",
       "      <td>0.002357</td>\n",
       "      <td>0.002216</td>\n",
       "      <td>0.000905</td>\n",
       "      <td>-0.001082</td>\n",
       "      <td>0.002206</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Capnocytophaga</th>\n",
       "      <td>0.000397</td>\n",
       "      <td>0.001226</td>\n",
       "      <td>-0.002116</td>\n",
       "      <td>0.003080</td>\n",
       "      <td>0.016027</td>\n",
       "      <td>-0.001524</td>\n",
       "      <td>-0.001927</td>\n",
       "      <td>-0.001172</td>\n",
       "      <td>-0.000230</td>\n",
       "      <td>-0.001098</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000008</td>\n",
       "      <td>-0.002484</td>\n",
       "      <td>-0.002455</td>\n",
       "      <td>0.005585</td>\n",
       "      <td>-0.000318</td>\n",
       "      <td>0.002594</td>\n",
       "      <td>-0.000899</td>\n",
       "      <td>-0.000698</td>\n",
       "      <td>0.001311</td>\n",
       "      <td>-0.001751</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Solobacterium</th>\n",
       "      <td>0.000868</td>\n",
       "      <td>0.001165</td>\n",
       "      <td>-0.001516</td>\n",
       "      <td>0.003135</td>\n",
       "      <td>0.001165</td>\n",
       "      <td>0.001442</td>\n",
       "      <td>0.002372</td>\n",
       "      <td>0.002269</td>\n",
       "      <td>-0.001758</td>\n",
       "      <td>-0.000179</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001710</td>\n",
       "      <td>0.001770</td>\n",
       "      <td>0.001280</td>\n",
       "      <td>0.003640</td>\n",
       "      <td>-0.002249</td>\n",
       "      <td>-0.000908</td>\n",
       "      <td>-0.001051</td>\n",
       "      <td>0.001998</td>\n",
       "      <td>0.000967</td>\n",
       "      <td>-0.000758</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Moryella</th>\n",
       "      <td>-0.000090</td>\n",
       "      <td>-0.001466</td>\n",
       "      <td>-0.001937</td>\n",
       "      <td>0.010386</td>\n",
       "      <td>0.001832</td>\n",
       "      <td>0.001088</td>\n",
       "      <td>0.002592</td>\n",
       "      <td>0.001465</td>\n",
       "      <td>0.001148</td>\n",
       "      <td>-0.009181</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002092</td>\n",
       "      <td>-0.001502</td>\n",
       "      <td>-0.008747</td>\n",
       "      <td>0.017520</td>\n",
       "      <td>-0.001423</td>\n",
       "      <td>0.000215</td>\n",
       "      <td>-0.000926</td>\n",
       "      <td>-0.000935</td>\n",
       "      <td>-0.001598</td>\n",
       "      <td>0.000601</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TM7_genera_incertae_sedis</th>\n",
       "      <td>-0.000656</td>\n",
       "      <td>-0.001921</td>\n",
       "      <td>0.001399</td>\n",
       "      <td>-0.006514</td>\n",
       "      <td>0.001644</td>\n",
       "      <td>-0.001117</td>\n",
       "      <td>-0.000304</td>\n",
       "      <td>-0.000272</td>\n",
       "      <td>-0.002511</td>\n",
       "      <td>0.005579</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001176</td>\n",
       "      <td>-0.001216</td>\n",
       "      <td>0.002562</td>\n",
       "      <td>-0.004350</td>\n",
       "      <td>0.002542</td>\n",
       "      <td>0.001194</td>\n",
       "      <td>-0.002605</td>\n",
       "      <td>-0.001057</td>\n",
       "      <td>-0.002084</td>\n",
       "      <td>0.001542</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Staphylococcus</th>\n",
       "      <td>0.000637</td>\n",
       "      <td>-0.000047</td>\n",
       "      <td>-0.002106</td>\n",
       "      <td>0.000086</td>\n",
       "      <td>0.001349</td>\n",
       "      <td>-0.000042</td>\n",
       "      <td>0.000739</td>\n",
       "      <td>0.001903</td>\n",
       "      <td>0.002226</td>\n",
       "      <td>0.000367</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000474</td>\n",
       "      <td>-0.002010</td>\n",
       "      <td>-0.000448</td>\n",
       "      <td>-0.000182</td>\n",
       "      <td>0.000701</td>\n",
       "      <td>-0.000169</td>\n",
       "      <td>0.000990</td>\n",
       "      <td>0.000618</td>\n",
       "      <td>-0.000168</td>\n",
       "      <td>0.000820</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Filifactor</th>\n",
       "      <td>-0.000579</td>\n",
       "      <td>-0.001241</td>\n",
       "      <td>0.001623</td>\n",
       "      <td>0.007200</td>\n",
       "      <td>-0.001603</td>\n",
       "      <td>0.000963</td>\n",
       "      <td>0.000288</td>\n",
       "      <td>0.000139</td>\n",
       "      <td>0.002120</td>\n",
       "      <td>-0.006440</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000507</td>\n",
       "      <td>-0.001445</td>\n",
       "      <td>-0.003028</td>\n",
       "      <td>0.010664</td>\n",
       "      <td>-0.000623</td>\n",
       "      <td>-0.001204</td>\n",
       "      <td>0.000031</td>\n",
       "      <td>-0.001381</td>\n",
       "      <td>0.001905</td>\n",
       "      <td>-0.000440</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Oribacterium</th>\n",
       "      <td>0.000546</td>\n",
       "      <td>-0.000533</td>\n",
       "      <td>0.000227</td>\n",
       "      <td>0.013246</td>\n",
       "      <td>0.000934</td>\n",
       "      <td>0.005391</td>\n",
       "      <td>-0.001741</td>\n",
       "      <td>0.003280</td>\n",
       "      <td>0.005232</td>\n",
       "      <td>-0.013997</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000664</td>\n",
       "      <td>-0.002262</td>\n",
       "      <td>-0.010860</td>\n",
       "      <td>0.018463</td>\n",
       "      <td>-0.001179</td>\n",
       "      <td>-0.001863</td>\n",
       "      <td>-0.001162</td>\n",
       "      <td>-0.002555</td>\n",
       "      <td>0.001609</td>\n",
       "      <td>0.000809</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Burkholderia</th>\n",
       "      <td>-0.001600</td>\n",
       "      <td>0.002314</td>\n",
       "      <td>0.001400</td>\n",
       "      <td>-0.000166</td>\n",
       "      <td>-0.000118</td>\n",
       "      <td>0.001423</td>\n",
       "      <td>0.002558</td>\n",
       "      <td>-0.000340</td>\n",
       "      <td>0.000650</td>\n",
       "      <td>0.004321</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000200</td>\n",
       "      <td>-0.000590</td>\n",
       "      <td>0.001792</td>\n",
       "      <td>-0.004851</td>\n",
       "      <td>-0.000813</td>\n",
       "      <td>-0.000468</td>\n",
       "      <td>-0.002416</td>\n",
       "      <td>0.000135</td>\n",
       "      <td>0.002570</td>\n",
       "      <td>-0.000678</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sneathia</th>\n",
       "      <td>0.001968</td>\n",
       "      <td>0.000892</td>\n",
       "      <td>-0.001791</td>\n",
       "      <td>-0.002265</td>\n",
       "      <td>0.001604</td>\n",
       "      <td>0.000628</td>\n",
       "      <td>0.000324</td>\n",
       "      <td>0.000346</td>\n",
       "      <td>-0.002485</td>\n",
       "      <td>0.001876</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001437</td>\n",
       "      <td>-0.000316</td>\n",
       "      <td>0.002516</td>\n",
       "      <td>-0.001286</td>\n",
       "      <td>-0.000662</td>\n",
       "      <td>-0.001539</td>\n",
       "      <td>0.001669</td>\n",
       "      <td>0.002037</td>\n",
       "      <td>0.000398</td>\n",
       "      <td>-0.001446</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Treponema</th>\n",
       "      <td>-0.001762</td>\n",
       "      <td>0.002347</td>\n",
       "      <td>0.001824</td>\n",
       "      <td>0.002217</td>\n",
       "      <td>-0.000941</td>\n",
       "      <td>-0.000977</td>\n",
       "      <td>-0.001956</td>\n",
       "      <td>0.000305</td>\n",
       "      <td>-0.001584</td>\n",
       "      <td>-0.001709</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001608</td>\n",
       "      <td>-0.002477</td>\n",
       "      <td>0.000911</td>\n",
       "      <td>0.001160</td>\n",
       "      <td>0.002192</td>\n",
       "      <td>0.001642</td>\n",
       "      <td>0.000621</td>\n",
       "      <td>-0.001147</td>\n",
       "      <td>-0.000879</td>\n",
       "      <td>-0.000846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Moraxella</th>\n",
       "      <td>-0.001659</td>\n",
       "      <td>-0.001529</td>\n",
       "      <td>-0.000861</td>\n",
       "      <td>-0.000563</td>\n",
       "      <td>0.001747</td>\n",
       "      <td>0.001947</td>\n",
       "      <td>-0.001260</td>\n",
       "      <td>-0.000592</td>\n",
       "      <td>-0.000191</td>\n",
       "      <td>0.001297</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001809</td>\n",
       "      <td>0.000064</td>\n",
       "      <td>0.002874</td>\n",
       "      <td>-0.006020</td>\n",
       "      <td>0.001728</td>\n",
       "      <td>0.000690</td>\n",
       "      <td>0.002302</td>\n",
       "      <td>-0.001036</td>\n",
       "      <td>-0.000683</td>\n",
       "      <td>0.000977</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Haemophilus</th>\n",
       "      <td>0.000828</td>\n",
       "      <td>-0.000216</td>\n",
       "      <td>0.001771</td>\n",
       "      <td>-0.000824</td>\n",
       "      <td>0.001298</td>\n",
       "      <td>-0.001070</td>\n",
       "      <td>-0.001842</td>\n",
       "      <td>-0.000975</td>\n",
       "      <td>-0.001639</td>\n",
       "      <td>-0.004486</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000257</td>\n",
       "      <td>0.002383</td>\n",
       "      <td>0.000710</td>\n",
       "      <td>0.002492</td>\n",
       "      <td>0.002199</td>\n",
       "      <td>0.001748</td>\n",
       "      <td>0.001484</td>\n",
       "      <td>0.000587</td>\n",
       "      <td>-0.001630</td>\n",
       "      <td>-0.000196</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Selenomonas</th>\n",
       "      <td>0.001404</td>\n",
       "      <td>0.000183</td>\n",
       "      <td>-0.045508</td>\n",
       "      <td>0.003757</td>\n",
       "      <td>0.000716</td>\n",
       "      <td>0.000044</td>\n",
       "      <td>-0.000426</td>\n",
       "      <td>0.001801</td>\n",
       "      <td>-0.001001</td>\n",
       "      <td>-0.007211</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001123</td>\n",
       "      <td>-0.001860</td>\n",
       "      <td>-0.004629</td>\n",
       "      <td>0.011795</td>\n",
       "      <td>0.000236</td>\n",
       "      <td>-0.002508</td>\n",
       "      <td>-0.001486</td>\n",
       "      <td>-0.000543</td>\n",
       "      <td>0.002183</td>\n",
       "      <td>0.001498</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Corynebacterium</th>\n",
       "      <td>0.000616</td>\n",
       "      <td>0.000052</td>\n",
       "      <td>0.002050</td>\n",
       "      <td>-0.003704</td>\n",
       "      <td>0.000252</td>\n",
       "      <td>0.001181</td>\n",
       "      <td>0.000359</td>\n",
       "      <td>-0.002712</td>\n",
       "      <td>-0.001925</td>\n",
       "      <td>0.003963</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000322</td>\n",
       "      <td>-0.000346</td>\n",
       "      <td>0.000984</td>\n",
       "      <td>-0.005727</td>\n",
       "      <td>0.000871</td>\n",
       "      <td>0.002052</td>\n",
       "      <td>-0.002315</td>\n",
       "      <td>-0.000126</td>\n",
       "      <td>-0.002515</td>\n",
       "      <td>0.002106</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rhizobium</th>\n",
       "      <td>-0.000410</td>\n",
       "      <td>-0.000933</td>\n",
       "      <td>0.000743</td>\n",
       "      <td>0.001872</td>\n",
       "      <td>-0.002067</td>\n",
       "      <td>0.001411</td>\n",
       "      <td>-0.000762</td>\n",
       "      <td>-0.002129</td>\n",
       "      <td>0.000721</td>\n",
       "      <td>0.000173</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000618</td>\n",
       "      <td>-0.000981</td>\n",
       "      <td>-0.002580</td>\n",
       "      <td>0.001557</td>\n",
       "      <td>-0.001178</td>\n",
       "      <td>0.002336</td>\n",
       "      <td>-0.001794</td>\n",
       "      <td>0.002246</td>\n",
       "      <td>-0.001686</td>\n",
       "      <td>-0.000595</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bradyrhizobium</th>\n",
       "      <td>-0.000557</td>\n",
       "      <td>0.002371</td>\n",
       "      <td>-0.001689</td>\n",
       "      <td>-0.004388</td>\n",
       "      <td>0.002522</td>\n",
       "      <td>0.000391</td>\n",
       "      <td>0.000273</td>\n",
       "      <td>-0.001835</td>\n",
       "      <td>0.000541</td>\n",
       "      <td>0.002334</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001451</td>\n",
       "      <td>-0.001352</td>\n",
       "      <td>0.002459</td>\n",
       "      <td>-0.007010</td>\n",
       "      <td>-0.001412</td>\n",
       "      <td>0.002604</td>\n",
       "      <td>-0.002196</td>\n",
       "      <td>-0.001627</td>\n",
       "      <td>0.002363</td>\n",
       "      <td>-0.001423</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Methylobacterium</th>\n",
       "      <td>0.000032</td>\n",
       "      <td>-0.002293</td>\n",
       "      <td>-0.000442</td>\n",
       "      <td>-0.004775</td>\n",
       "      <td>0.001185</td>\n",
       "      <td>-0.002225</td>\n",
       "      <td>0.000480</td>\n",
       "      <td>0.001732</td>\n",
       "      <td>0.001224</td>\n",
       "      <td>0.001325</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.259964</td>\n",
       "      <td>0.000630</td>\n",
       "      <td>0.000602</td>\n",
       "      <td>-0.004674</td>\n",
       "      <td>0.000172</td>\n",
       "      <td>0.002509</td>\n",
       "      <td>0.001724</td>\n",
       "      <td>0.002507</td>\n",
       "      <td>0.001646</td>\n",
       "      <td>-0.000213</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OD1_genera_incertae_sedis</th>\n",
       "      <td>0.001643</td>\n",
       "      <td>-0.000032</td>\n",
       "      <td>-0.001715</td>\n",
       "      <td>0.002280</td>\n",
       "      <td>0.000009</td>\n",
       "      <td>0.000217</td>\n",
       "      <td>-0.002416</td>\n",
       "      <td>0.002212</td>\n",
       "      <td>0.000252</td>\n",
       "      <td>-0.001022</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000302</td>\n",
       "      <td>0.073756</td>\n",
       "      <td>-0.000470</td>\n",
       "      <td>0.003416</td>\n",
       "      <td>-0.001082</td>\n",
       "      <td>0.000930</td>\n",
       "      <td>-0.001994</td>\n",
       "      <td>-0.002053</td>\n",
       "      <td>-0.000746</td>\n",
       "      <td>0.001659</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Finegoldia</th>\n",
       "      <td>-0.002374</td>\n",
       "      <td>-0.000644</td>\n",
       "      <td>0.001644</td>\n",
       "      <td>0.000141</td>\n",
       "      <td>0.001330</td>\n",
       "      <td>-0.000278</td>\n",
       "      <td>-0.002125</td>\n",
       "      <td>-0.388885</td>\n",
       "      <td>-0.001063</td>\n",
       "      <td>-0.001711</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001270</td>\n",
       "      <td>-0.001400</td>\n",
       "      <td>-0.000303</td>\n",
       "      <td>-0.000293</td>\n",
       "      <td>-0.000235</td>\n",
       "      <td>0.001198</td>\n",
       "      <td>0.001882</td>\n",
       "      <td>-0.002435</td>\n",
       "      <td>-0.000019</td>\n",
       "      <td>-0.002344</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Microbacterium</th>\n",
       "      <td>0.001702</td>\n",
       "      <td>0.001113</td>\n",
       "      <td>-0.001693</td>\n",
       "      <td>-0.001733</td>\n",
       "      <td>0.002489</td>\n",
       "      <td>-0.002558</td>\n",
       "      <td>-0.002490</td>\n",
       "      <td>-0.002197</td>\n",
       "      <td>-0.000187</td>\n",
       "      <td>0.004839</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001009</td>\n",
       "      <td>0.000788</td>\n",
       "      <td>0.739722</td>\n",
       "      <td>-0.006155</td>\n",
       "      <td>0.001879</td>\n",
       "      <td>0.001988</td>\n",
       "      <td>0.000969</td>\n",
       "      <td>0.002134</td>\n",
       "      <td>-0.002174</td>\n",
       "      <td>0.000613</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sphingomonas</th>\n",
       "      <td>0.001664</td>\n",
       "      <td>0.002105</td>\n",
       "      <td>-0.000319</td>\n",
       "      <td>-0.003776</td>\n",
       "      <td>-0.002516</td>\n",
       "      <td>-0.002968</td>\n",
       "      <td>-0.002161</td>\n",
       "      <td>0.002150</td>\n",
       "      <td>-0.002830</td>\n",
       "      <td>0.002143</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000689</td>\n",
       "      <td>0.001356</td>\n",
       "      <td>0.003841</td>\n",
       "      <td>-0.559028</td>\n",
       "      <td>0.002418</td>\n",
       "      <td>0.000438</td>\n",
       "      <td>-0.001339</td>\n",
       "      <td>0.002318</td>\n",
       "      <td>-0.000582</td>\n",
       "      <td>-0.001829</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Chryseobacterium</th>\n",
       "      <td>-0.000378</td>\n",
       "      <td>-0.001745</td>\n",
       "      <td>0.000808</td>\n",
       "      <td>0.001535</td>\n",
       "      <td>-0.086684</td>\n",
       "      <td>0.000183</td>\n",
       "      <td>0.000213</td>\n",
       "      <td>-0.000351</td>\n",
       "      <td>-0.002589</td>\n",
       "      <td>0.000963</td>\n",
       "      <td>...</td>\n",
       "      <td>0.002198</td>\n",
       "      <td>-0.001952</td>\n",
       "      <td>-0.000289</td>\n",
       "      <td>-0.001106</td>\n",
       "      <td>-0.000382</td>\n",
       "      <td>0.000638</td>\n",
       "      <td>-0.000003</td>\n",
       "      <td>-0.001215</td>\n",
       "      <td>0.001141</td>\n",
       "      <td>0.001069</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bacteroides</th>\n",
       "      <td>-0.001807</td>\n",
       "      <td>-0.000085</td>\n",
       "      <td>0.000718</td>\n",
       "      <td>-0.004147</td>\n",
       "      <td>0.001330</td>\n",
       "      <td>-0.002638</td>\n",
       "      <td>-0.000142</td>\n",
       "      <td>-0.000691</td>\n",
       "      <td>0.000267</td>\n",
       "      <td>0.005671</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000751</td>\n",
       "      <td>-0.000874</td>\n",
       "      <td>0.004452</td>\n",
       "      <td>-0.008847</td>\n",
       "      <td>-0.245011</td>\n",
       "      <td>0.000862</td>\n",
       "      <td>-0.001540</td>\n",
       "      <td>0.001754</td>\n",
       "      <td>-0.000828</td>\n",
       "      <td>-0.002447</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bdellovibrio</th>\n",
       "      <td>0.000316</td>\n",
       "      <td>-0.000816</td>\n",
       "      <td>-0.002124</td>\n",
       "      <td>-0.001073</td>\n",
       "      <td>0.001623</td>\n",
       "      <td>0.000517</td>\n",
       "      <td>0.000060</td>\n",
       "      <td>0.001311</td>\n",
       "      <td>0.001062</td>\n",
       "      <td>-0.000199</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000634</td>\n",
       "      <td>0.000887</td>\n",
       "      <td>-0.000942</td>\n",
       "      <td>0.001057</td>\n",
       "      <td>0.000711</td>\n",
       "      <td>0.500066</td>\n",
       "      <td>-0.002022</td>\n",
       "      <td>0.002361</td>\n",
       "      <td>-0.002546</td>\n",
       "      <td>0.001664</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Streptophyta</th>\n",
       "      <td>0.002349</td>\n",
       "      <td>0.002219</td>\n",
       "      <td>-0.001067</td>\n",
       "      <td>-0.000059</td>\n",
       "      <td>-0.001909</td>\n",
       "      <td>-0.000439</td>\n",
       "      <td>0.000701</td>\n",
       "      <td>0.002003</td>\n",
       "      <td>-0.001233</td>\n",
       "      <td>0.001018</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000692</td>\n",
       "      <td>-0.000657</td>\n",
       "      <td>0.001451</td>\n",
       "      <td>-0.002229</td>\n",
       "      <td>-0.002097</td>\n",
       "      <td>0.000307</td>\n",
       "      <td>-0.177160</td>\n",
       "      <td>-0.000054</td>\n",
       "      <td>0.000118</td>\n",
       "      <td>0.000620</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Lachnospiracea_incertae_sedis</th>\n",
       "      <td>0.001437</td>\n",
       "      <td>-0.002564</td>\n",
       "      <td>-0.000053</td>\n",
       "      <td>0.001262</td>\n",
       "      <td>0.002136</td>\n",
       "      <td>-0.000443</td>\n",
       "      <td>0.000088</td>\n",
       "      <td>-0.000449</td>\n",
       "      <td>-0.000038</td>\n",
       "      <td>-0.002047</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.000303</td>\n",
       "      <td>0.000113</td>\n",
       "      <td>-0.001481</td>\n",
       "      <td>0.008584</td>\n",
       "      <td>0.000611</td>\n",
       "      <td>0.000441</td>\n",
       "      <td>-0.000069</td>\n",
       "      <td>-0.002427</td>\n",
       "      <td>0.000043</td>\n",
       "      <td>-0.001067</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Paracoccus</th>\n",
       "      <td>0.001647</td>\n",
       "      <td>0.002138</td>\n",
       "      <td>-0.001413</td>\n",
       "      <td>-0.000931</td>\n",
       "      <td>-0.002353</td>\n",
       "      <td>-0.000311</td>\n",
       "      <td>-0.001752</td>\n",
       "      <td>0.002457</td>\n",
       "      <td>0.001964</td>\n",
       "      <td>0.002947</td>\n",
       "      <td>...</td>\n",
       "      <td>0.000201</td>\n",
       "      <td>-0.001955</td>\n",
       "      <td>-0.000999</td>\n",
       "      <td>-0.000114</td>\n",
       "      <td>0.002175</td>\n",
       "      <td>0.001254</td>\n",
       "      <td>0.000410</td>\n",
       "      <td>-0.099903</td>\n",
       "      <td>0.001522</td>\n",
       "      <td>-0.000144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fastidiosipila</th>\n",
       "      <td>-0.001346</td>\n",
       "      <td>-0.000632</td>\n",
       "      <td>0.000901</td>\n",
       "      <td>0.002895</td>\n",
       "      <td>0.000107</td>\n",
       "      <td>-0.001395</td>\n",
       "      <td>-0.001864</td>\n",
       "      <td>-0.000694</td>\n",
       "      <td>0.001215</td>\n",
       "      <td>-0.003643</td>\n",
       "      <td>...</td>\n",
       "      <td>-0.001750</td>\n",
       "      <td>0.001387</td>\n",
       "      <td>0.000995</td>\n",
       "      <td>0.004954</td>\n",
       "      <td>0.001509</td>\n",
       "      <td>0.001189</td>\n",
       "      <td>-0.001760</td>\n",
       "      <td>0.001826</td>\n",
       "      <td>0.147483</td>\n",
       "      <td>0.000021</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Pseudonocardia</th>\n",
       "      <td>0.000658</td>\n",
       "      <td>0.000710</td>\n",
       "      <td>-0.001742</td>\n",
       "      <td>-0.000295</td>\n",
       "      <td>0.001683</td>\n",
       "      <td>-0.001210</td>\n",
       "      <td>0.000986</td>\n",
       "      <td>0.000144</td>\n",
       "      <td>0.000920</td>\n",
       "      <td>0.001924</td>\n",
       "      <td>...</td>\n",
       "      <td>0.001016</td>\n",
       "      <td>-0.000063</td>\n",
       "      <td>0.002898</td>\n",
       "      <td>0.000620</td>\n",
       "      <td>-0.002006</td>\n",
       "      <td>0.000840</td>\n",
       "      <td>0.002136</td>\n",
       "      <td>0.000086</td>\n",
       "      <td>-0.001778</td>\n",
       "      <td>0.045367</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>48 rows × 40 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                               Streptococcaceae  Cellulomonadaceae  \\\n",
       "Streptococcus                         -0.202814           0.001717   \n",
       "Tropheryma                             0.002322           0.042933   \n",
       "Veillonella                           -0.002253           0.002096   \n",
       "Actinomyces                            0.001193           0.001837   \n",
       "Flavobacterium                        -0.001268          -0.000707   \n",
       "Prevotella                            -0.001116          -0.001917   \n",
       "Porphyromonas                         -0.000578           0.000957   \n",
       "Parvimonas                             0.002190          -0.002063   \n",
       "Fusobacterium                          0.000659          -0.000011   \n",
       "Propionibacterium                     -0.000363          -0.002106   \n",
       "Gemella                               -0.000545           0.000978   \n",
       "Rothia                                 0.002052          -0.001993   \n",
       "Granulicatella                        -0.002405          -0.001239   \n",
       "Neisseria                             -0.000405           0.001275   \n",
       "Lactobacillus                         -0.000084           0.000320   \n",
       "Megasphaera                            0.000965          -0.001938   \n",
       "Catonella                              0.002182          -0.001198   \n",
       "Atopobium                              0.002418           0.000317   \n",
       "Campylobacter                         -0.001173           0.002543   \n",
       "Capnocytophaga                         0.000397           0.001226   \n",
       "Solobacterium                          0.000868           0.001165   \n",
       "Moryella                              -0.000090          -0.001466   \n",
       "TM7_genera_incertae_sedis             -0.000656          -0.001921   \n",
       "Staphylococcus                         0.000637          -0.000047   \n",
       "Filifactor                            -0.000579          -0.001241   \n",
       "Oribacterium                           0.000546          -0.000533   \n",
       "Burkholderia                          -0.001600           0.002314   \n",
       "Sneathia                               0.001968           0.000892   \n",
       "Treponema                             -0.001762           0.002347   \n",
       "Moraxella                             -0.001659          -0.001529   \n",
       "Haemophilus                            0.000828          -0.000216   \n",
       "Selenomonas                            0.001404           0.000183   \n",
       "Corynebacterium                        0.000616           0.000052   \n",
       "Rhizobium                             -0.000410          -0.000933   \n",
       "Bradyrhizobium                        -0.000557           0.002371   \n",
       "Methylobacterium                       0.000032          -0.002293   \n",
       "OD1_genera_incertae_sedis              0.001643          -0.000032   \n",
       "Finegoldia                            -0.002374          -0.000644   \n",
       "Microbacterium                         0.001702           0.001113   \n",
       "Sphingomonas                           0.001664           0.002105   \n",
       "Chryseobacterium                      -0.000378          -0.001745   \n",
       "Bacteroides                           -0.001807          -0.000085   \n",
       "Bdellovibrio                           0.000316          -0.000816   \n",
       "Streptophyta                           0.002349           0.002219   \n",
       "Lachnospiracea_incertae_sedis          0.001437          -0.002564   \n",
       "Paracoccus                             0.001647           0.002138   \n",
       "Fastidiosipila                        -0.001346          -0.000632   \n",
       "Pseudonocardia                         0.000658           0.000710   \n",
       "\n",
       "                               Veillonellaceae  Actinomycetaceae  \\\n",
       "Streptococcus                         0.001832          0.004435   \n",
       "Tropheryma                            0.000935          0.012188   \n",
       "Veillonella                           0.058374          0.004825   \n",
       "Actinomyces                          -0.001486          1.138382   \n",
       "Flavobacterium                        0.001044          0.001266   \n",
       "Prevotella                           -0.000378          0.000084   \n",
       "Porphyromonas                        -0.000059         -0.006170   \n",
       "Parvimonas                            0.000746          0.001165   \n",
       "Fusobacterium                         0.001903          0.003095   \n",
       "Propionibacterium                    -0.000374         -0.011376   \n",
       "Gemella                               0.001712         -0.002678   \n",
       "Rothia                               -0.001575         -0.013858   \n",
       "Granulicatella                        0.002014          0.001303   \n",
       "Neisseria                             0.000188         -0.005453   \n",
       "Lactobacillus                         0.001917          0.001616   \n",
       "Megasphaera                          -0.229280         -0.006574   \n",
       "Catonella                             0.000570          0.003375   \n",
       "Atopobium                            -0.000662         -0.003194   \n",
       "Campylobacter                         0.000823         -0.002618   \n",
       "Capnocytophaga                       -0.002116          0.003080   \n",
       "Solobacterium                        -0.001516          0.003135   \n",
       "Moryella                             -0.001937          0.010386   \n",
       "TM7_genera_incertae_sedis             0.001399         -0.006514   \n",
       "Staphylococcus                       -0.002106          0.000086   \n",
       "Filifactor                            0.001623          0.007200   \n",
       "Oribacterium                          0.000227          0.013246   \n",
       "Burkholderia                          0.001400         -0.000166   \n",
       "Sneathia                             -0.001791         -0.002265   \n",
       "Treponema                             0.001824          0.002217   \n",
       "Moraxella                            -0.000861         -0.000563   \n",
       "Haemophilus                           0.001771         -0.000824   \n",
       "Selenomonas                          -0.045508          0.003757   \n",
       "Corynebacterium                       0.002050         -0.003704   \n",
       "Rhizobium                             0.000743          0.001872   \n",
       "Bradyrhizobium                       -0.001689         -0.004388   \n",
       "Methylobacterium                     -0.000442         -0.004775   \n",
       "OD1_genera_incertae_sedis            -0.001715          0.002280   \n",
       "Finegoldia                            0.001644          0.000141   \n",
       "Microbacterium                       -0.001693         -0.001733   \n",
       "Sphingomonas                         -0.000319         -0.003776   \n",
       "Chryseobacterium                      0.000808          0.001535   \n",
       "Bacteroides                           0.000718         -0.004147   \n",
       "Bdellovibrio                         -0.002124         -0.001073   \n",
       "Streptophyta                         -0.001067         -0.000059   \n",
       "Lachnospiracea_incertae_sedis        -0.000053          0.001262   \n",
       "Paracoccus                           -0.001413         -0.000931   \n",
       "Fastidiosipila                        0.000901          0.002895   \n",
       "Pseudonocardia                       -0.001742         -0.000295   \n",
       "\n",
       "                               Flavobacteriaceae  Prevotellaceae  \\\n",
       "Streptococcus                          -0.002121        0.000218   \n",
       "Tropheryma                              0.000814        0.004179   \n",
       "Veillonella                             0.000648        0.000314   \n",
       "Actinomyces                            -0.001572        0.000013   \n",
       "Flavobacterium                         -0.122806        0.002065   \n",
       "Prevotella                             -0.001331        0.344086   \n",
       "Porphyromonas                           0.002248       -0.000138   \n",
       "Parvimonas                              0.001718       -0.001649   \n",
       "Fusobacterium                           0.001006       -0.000912   \n",
       "Propionibacterium                       0.000717       -0.004349   \n",
       "Gemella                                -0.001694       -0.000157   \n",
       "Rothia                                 -0.002309       -0.003692   \n",
       "Granulicatella                         -0.002615        0.002234   \n",
       "Neisseria                               0.000401       -0.002396   \n",
       "Lactobacillus                           0.000261        0.000116   \n",
       "Megasphaera                             0.000898        0.001427   \n",
       "Catonella                              -0.000641        0.001987   \n",
       "Atopobium                               0.000745       -0.001786   \n",
       "Campylobacter                          -0.001196        0.001280   \n",
       "Capnocytophaga                          0.016027       -0.001524   \n",
       "Solobacterium                           0.001165        0.001442   \n",
       "Moryella                                0.001832        0.001088   \n",
       "TM7_genera_incertae_sedis               0.001644       -0.001117   \n",
       "Staphylococcus                          0.001349       -0.000042   \n",
       "Filifactor                             -0.001603        0.000963   \n",
       "Oribacterium                            0.000934        0.005391   \n",
       "Burkholderia                           -0.000118        0.001423   \n",
       "Sneathia                                0.001604        0.000628   \n",
       "Treponema                              -0.000941       -0.000977   \n",
       "Moraxella                               0.001747        0.001947   \n",
       "Haemophilus                             0.001298       -0.001070   \n",
       "Selenomonas                             0.000716        0.000044   \n",
       "Corynebacterium                         0.000252        0.001181   \n",
       "Rhizobium                              -0.002067        0.001411   \n",
       "Bradyrhizobium                          0.002522        0.000391   \n",
       "Methylobacterium                        0.001185       -0.002225   \n",
       "OD1_genera_incertae_sedis               0.000009        0.000217   \n",
       "Finegoldia                              0.001330       -0.000278   \n",
       "Microbacterium                          0.002489       -0.002558   \n",
       "Sphingomonas                           -0.002516       -0.002968   \n",
       "Chryseobacterium                       -0.086684        0.000183   \n",
       "Bacteroides                             0.001330       -0.002638   \n",
       "Bdellovibrio                            0.001623        0.000517   \n",
       "Streptophyta                           -0.001909       -0.000439   \n",
       "Lachnospiracea_incertae_sedis           0.002136       -0.000443   \n",
       "Paracoccus                             -0.002353       -0.000311   \n",
       "Fastidiosipila                          0.000107       -0.001395   \n",
       "Pseudonocardia                          0.001683       -0.001210   \n",
       "\n",
       "                               Porphyromonadaceae  \\\n",
       "Streptococcus                           -0.000822   \n",
       "Tropheryma                              -0.000029   \n",
       "Veillonella                              0.000566   \n",
       "Actinomyces                             -0.001030   \n",
       "Flavobacterium                           0.001603   \n",
       "Prevotella                              -0.002202   \n",
       "Porphyromonas                           -0.061989   \n",
       "Parvimonas                              -0.000474   \n",
       "Fusobacterium                           -0.001593   \n",
       "Propionibacterium                       -0.001759   \n",
       "Gemella                                 -0.000541   \n",
       "Rothia                                   0.000338   \n",
       "Granulicatella                           0.002039   \n",
       "Neisseria                               -0.001101   \n",
       "Lactobacillus                           -0.002030   \n",
       "Megasphaera                             -0.002363   \n",
       "Catonella                                0.002078   \n",
       "Atopobium                               -0.000438   \n",
       "Campylobacter                            0.001990   \n",
       "Capnocytophaga                          -0.001927   \n",
       "Solobacterium                            0.002372   \n",
       "Moryella                                 0.002592   \n",
       "TM7_genera_incertae_sedis               -0.000304   \n",
       "Staphylococcus                           0.000739   \n",
       "Filifactor                               0.000288   \n",
       "Oribacterium                            -0.001741   \n",
       "Burkholderia                             0.002558   \n",
       "Sneathia                                 0.000324   \n",
       "Treponema                               -0.001956   \n",
       "Moraxella                               -0.001260   \n",
       "Haemophilus                             -0.001842   \n",
       "Selenomonas                             -0.000426   \n",
       "Corynebacterium                          0.000359   \n",
       "Rhizobium                               -0.000762   \n",
       "Bradyrhizobium                           0.000273   \n",
       "Methylobacterium                         0.000480   \n",
       "OD1_genera_incertae_sedis               -0.002416   \n",
       "Finegoldia                              -0.002125   \n",
       "Microbacterium                          -0.002490   \n",
       "Sphingomonas                            -0.002161   \n",
       "Chryseobacterium                         0.000213   \n",
       "Bacteroides                             -0.000142   \n",
       "Bdellovibrio                             0.000060   \n",
       "Streptophyta                             0.000701   \n",
       "Lachnospiracea_incertae_sedis            0.000088   \n",
       "Paracoccus                              -0.001752   \n",
       "Fastidiosipila                          -0.001864   \n",
       "Pseudonocardia                           0.000986   \n",
       "\n",
       "                               Clostridiales_Incertae_Sedis_XI  \\\n",
       "Streptococcus                                         0.002332   \n",
       "Tropheryma                                            0.002146   \n",
       "Veillonella                                          -0.001787   \n",
       "Actinomyces                                           0.000116   \n",
       "Flavobacterium                                        0.002006   \n",
       "Prevotella                                            0.000737   \n",
       "Porphyromonas                                         0.001631   \n",
       "Parvimonas                                            0.268519   \n",
       "Fusobacterium                                         0.002070   \n",
       "Propionibacterium                                    -0.001709   \n",
       "Gemella                                               0.000678   \n",
       "Rothia                                               -0.003293   \n",
       "Granulicatella                                        0.002567   \n",
       "Neisseria                                            -0.002246   \n",
       "Lactobacillus                                        -0.000361   \n",
       "Megasphaera                                          -0.000153   \n",
       "Catonella                                             0.000949   \n",
       "Atopobium                                            -0.002239   \n",
       "Campylobacter                                        -0.000602   \n",
       "Capnocytophaga                                       -0.001172   \n",
       "Solobacterium                                         0.002269   \n",
       "Moryella                                              0.001465   \n",
       "TM7_genera_incertae_sedis                            -0.000272   \n",
       "Staphylococcus                                        0.001903   \n",
       "Filifactor                                            0.000139   \n",
       "Oribacterium                                          0.003280   \n",
       "Burkholderia                                         -0.000340   \n",
       "Sneathia                                              0.000346   \n",
       "Treponema                                             0.000305   \n",
       "Moraxella                                            -0.000592   \n",
       "Haemophilus                                          -0.000975   \n",
       "Selenomonas                                           0.001801   \n",
       "Corynebacterium                                      -0.002712   \n",
       "Rhizobium                                            -0.002129   \n",
       "Bradyrhizobium                                       -0.001835   \n",
       "Methylobacterium                                      0.001732   \n",
       "OD1_genera_incertae_sedis                             0.002212   \n",
       "Finegoldia                                           -0.388885   \n",
       "Microbacterium                                       -0.002197   \n",
       "Sphingomonas                                          0.002150   \n",
       "Chryseobacterium                                     -0.000351   \n",
       "Bacteroides                                          -0.000691   \n",
       "Bdellovibrio                                          0.001311   \n",
       "Streptophyta                                          0.002003   \n",
       "Lachnospiracea_incertae_sedis                        -0.000449   \n",
       "Paracoccus                                            0.002457   \n",
       "Fastidiosipila                                       -0.000694   \n",
       "Pseudonocardia                                        0.000144   \n",
       "\n",
       "                               Fusobacteriaceae  Propionibacteriaceae  ...  \\\n",
       "Streptococcus                          0.003229             -0.004078  ...   \n",
       "Tropheryma                             0.004282             -0.012615  ...   \n",
       "Veillonella                            0.000664             -0.005658  ...   \n",
       "Actinomyces                           -0.000325             -0.006020  ...   \n",
       "Flavobacterium                        -0.000700              0.000484  ...   \n",
       "Prevotella                            -0.000126             -0.002018  ...   \n",
       "Porphyromonas                         -0.002642              0.008407  ...   \n",
       "Parvimonas                             0.000239             -0.001063  ...   \n",
       "Fusobacterium                          0.362426             -0.000714  ...   \n",
       "Propionibacterium                     -0.000245              2.306910  ...   \n",
       "Gemella                               -0.002396             -0.000663  ...   \n",
       "Rothia                                -0.004974              0.019094  ...   \n",
       "Granulicatella                         0.001664             -0.003615  ...   \n",
       "Neisseria                             -0.001482              0.003335  ...   \n",
       "Lactobacillus                         -0.000190              0.002160  ...   \n",
       "Megasphaera                           -0.001935              0.007819  ...   \n",
       "Catonella                              0.001813             -0.005091  ...   \n",
       "Atopobium                             -0.000953              0.005788  ...   \n",
       "Campylobacter                          0.001958             -0.000205  ...   \n",
       "Capnocytophaga                        -0.000230             -0.001098  ...   \n",
       "Solobacterium                         -0.001758             -0.000179  ...   \n",
       "Moryella                               0.001148             -0.009181  ...   \n",
       "TM7_genera_incertae_sedis             -0.002511              0.005579  ...   \n",
       "Staphylococcus                         0.002226              0.000367  ...   \n",
       "Filifactor                             0.002120             -0.006440  ...   \n",
       "Oribacterium                           0.005232             -0.013997  ...   \n",
       "Burkholderia                           0.000650              0.004321  ...   \n",
       "Sneathia                              -0.002485              0.001876  ...   \n",
       "Treponema                             -0.001584             -0.001709  ...   \n",
       "Moraxella                             -0.000191              0.001297  ...   \n",
       "Haemophilus                           -0.001639             -0.004486  ...   \n",
       "Selenomonas                           -0.001001             -0.007211  ...   \n",
       "Corynebacterium                       -0.001925              0.003963  ...   \n",
       "Rhizobium                              0.000721              0.000173  ...   \n",
       "Bradyrhizobium                         0.000541              0.002334  ...   \n",
       "Methylobacterium                       0.001224              0.001325  ...   \n",
       "OD1_genera_incertae_sedis              0.000252             -0.001022  ...   \n",
       "Finegoldia                            -0.001063             -0.001711  ...   \n",
       "Microbacterium                        -0.000187              0.004839  ...   \n",
       "Sphingomonas                          -0.002830              0.002143  ...   \n",
       "Chryseobacterium                      -0.002589              0.000963  ...   \n",
       "Bacteroides                            0.000267              0.005671  ...   \n",
       "Bdellovibrio                           0.001062             -0.000199  ...   \n",
       "Streptophyta                          -0.001233              0.001018  ...   \n",
       "Lachnospiracea_incertae_sedis         -0.000038             -0.002047  ...   \n",
       "Paracoccus                             0.001964              0.002947  ...   \n",
       "Fastidiosipila                         0.001215             -0.003643  ...   \n",
       "Pseudonocardia                         0.000920              0.001924  ...   \n",
       "\n",
       "                               Methylobacteriaceae  OD1_genera_incertae_sedis  \\\n",
       "Streptococcus                            -0.001454                  -0.002215   \n",
       "Tropheryma                                0.001889                  -0.001770   \n",
       "Veillonella                              -0.000444                   0.000697   \n",
       "Actinomyces                              -0.001218                   0.002385   \n",
       "Flavobacterium                            0.001275                   0.002390   \n",
       "Prevotella                               -0.001078                   0.000523   \n",
       "Porphyromonas                            -0.000651                  -0.000976   \n",
       "Parvimonas                               -0.000286                  -0.002061   \n",
       "Fusobacterium                            -0.001585                   0.002327   \n",
       "Propionibacterium                        -0.003019                  -0.000814   \n",
       "Gemella                                   0.001376                  -0.002285   \n",
       "Rothia                                   -0.000323                   0.000209   \n",
       "Granulicatella                            0.001618                  -0.001523   \n",
       "Neisseria                                 0.001535                   0.001097   \n",
       "Lactobacillus                             0.002335                   0.001054   \n",
       "Megasphaera                               0.000766                   0.001315   \n",
       "Catonella                                -0.001299                   0.002149   \n",
       "Atopobium                                -0.001347                   0.002371   \n",
       "Campylobacter                            -0.001984                  -0.001302   \n",
       "Capnocytophaga                            0.000008                  -0.002484   \n",
       "Solobacterium                             0.001710                   0.001770   \n",
       "Moryella                                  0.002092                  -0.001502   \n",
       "TM7_genera_incertae_sedis                -0.001176                  -0.001216   \n",
       "Staphylococcus                            0.000474                  -0.002010   \n",
       "Filifactor                               -0.000507                  -0.001445   \n",
       "Oribacterium                              0.000664                  -0.002262   \n",
       "Burkholderia                              0.000200                  -0.000590   \n",
       "Sneathia                                  0.001437                  -0.000316   \n",
       "Treponema                                 0.001608                  -0.002477   \n",
       "Moraxella                                -0.001809                   0.000064   \n",
       "Haemophilus                              -0.000257                   0.002383   \n",
       "Selenomonas                              -0.001123                  -0.001860   \n",
       "Corynebacterium                           0.000322                  -0.000346   \n",
       "Rhizobium                                -0.000618                  -0.000981   \n",
       "Bradyrhizobium                           -0.001451                  -0.001352   \n",
       "Methylobacterium                         -0.259964                   0.000630   \n",
       "OD1_genera_incertae_sedis                -0.000302                   0.073756   \n",
       "Finegoldia                                0.001270                  -0.001400   \n",
       "Microbacterium                            0.001009                   0.000788   \n",
       "Sphingomonas                              0.000689                   0.001356   \n",
       "Chryseobacterium                          0.002198                  -0.001952   \n",
       "Bacteroides                              -0.000751                  -0.000874   \n",
       "Bdellovibrio                             -0.000634                   0.000887   \n",
       "Streptophyta                              0.000692                  -0.000657   \n",
       "Lachnospiracea_incertae_sedis            -0.000303                   0.000113   \n",
       "Paracoccus                                0.000201                  -0.001955   \n",
       "Fastidiosipila                           -0.001750                   0.001387   \n",
       "Pseudonocardia                            0.001016                  -0.000063   \n",
       "\n",
       "                               Microbacteriaceae  Sphingomonadaceae  \\\n",
       "Streptococcus                          -0.002341           0.006854   \n",
       "Tropheryma                             -0.006998           0.017381   \n",
       "Veillonella                            -0.002642           0.006234   \n",
       "Actinomyces                            -0.001926           0.011310   \n",
       "Flavobacterium                          0.000723           0.000027   \n",
       "Prevotella                              0.001951           0.000851   \n",
       "Porphyromonas                           0.003772          -0.008769   \n",
       "Parvimonas                             -0.000948           0.000268   \n",
       "Fusobacterium                          -0.000729           0.000687   \n",
       "Propionibacterium                       0.009808          -0.015403   \n",
       "Gemella                                -0.001444          -0.002603   \n",
       "Rothia                                  0.009027          -0.017854   \n",
       "Granulicatella                         -0.003983           0.004906   \n",
       "Neisseria                               0.000174          -0.003391   \n",
       "Lactobacillus                          -0.001735           0.002141   \n",
       "Megasphaera                             0.003838          -0.007425   \n",
       "Catonella                              -0.003586           0.006469   \n",
       "Atopobium                               0.001542          -0.006437   \n",
       "Campylobacter                           0.002822          -0.001559   \n",
       "Capnocytophaga                         -0.002455           0.005585   \n",
       "Solobacterium                           0.001280           0.003640   \n",
       "Moryella                               -0.008747           0.017520   \n",
       "TM7_genera_incertae_sedis               0.002562          -0.004350   \n",
       "Staphylococcus                         -0.000448          -0.000182   \n",
       "Filifactor                             -0.003028           0.010664   \n",
       "Oribacterium                           -0.010860           0.018463   \n",
       "Burkholderia                            0.001792          -0.004851   \n",
       "Sneathia                                0.002516          -0.001286   \n",
       "Treponema                               0.000911           0.001160   \n",
       "Moraxella                               0.002874          -0.006020   \n",
       "Haemophilus                             0.000710           0.002492   \n",
       "Selenomonas                            -0.004629           0.011795   \n",
       "Corynebacterium                         0.000984          -0.005727   \n",
       "Rhizobium                              -0.002580           0.001557   \n",
       "Bradyrhizobium                          0.002459          -0.007010   \n",
       "Methylobacterium                        0.000602          -0.004674   \n",
       "OD1_genera_incertae_sedis              -0.000470           0.003416   \n",
       "Finegoldia                             -0.000303          -0.000293   \n",
       "Microbacterium                          0.739722          -0.006155   \n",
       "Sphingomonas                            0.003841          -0.559028   \n",
       "Chryseobacterium                       -0.000289          -0.001106   \n",
       "Bacteroides                             0.004452          -0.008847   \n",
       "Bdellovibrio                           -0.000942           0.001057   \n",
       "Streptophyta                            0.001451          -0.002229   \n",
       "Lachnospiracea_incertae_sedis          -0.001481           0.008584   \n",
       "Paracoccus                             -0.000999          -0.000114   \n",
       "Fastidiosipila                          0.000995           0.004954   \n",
       "Pseudonocardia                          0.002898           0.000620   \n",
       "\n",
       "                               Bacteroidaceae  Bdellovibrionaceae  \\\n",
       "Streptococcus                        0.001291           -0.000453   \n",
       "Tropheryma                           0.000431            0.001709   \n",
       "Veillonella                          0.002422            0.001871   \n",
       "Actinomyces                         -0.001754            0.002041   \n",
       "Flavobacterium                      -0.001304           -0.002183   \n",
       "Prevotella                          -0.001642           -0.000811   \n",
       "Porphyromonas                       -0.000380            0.000280   \n",
       "Parvimonas                          -0.000772            0.002566   \n",
       "Fusobacterium                       -0.001742           -0.002152   \n",
       "Propionibacterium                    0.001907            0.002377   \n",
       "Gemella                              0.000179            0.000049   \n",
       "Rothia                               0.002264           -0.002280   \n",
       "Granulicatella                      -0.000834            0.001030   \n",
       "Neisseria                           -0.000666            0.000372   \n",
       "Lactobacillus                        0.002136           -0.000736   \n",
       "Megasphaera                         -0.001217            0.001092   \n",
       "Catonella                            0.002475            0.002295   \n",
       "Atopobium                           -0.000040           -0.002008   \n",
       "Campylobacter                       -0.001494            0.002357   \n",
       "Capnocytophaga                      -0.000318            0.002594   \n",
       "Solobacterium                       -0.002249           -0.000908   \n",
       "Moryella                            -0.001423            0.000215   \n",
       "TM7_genera_incertae_sedis            0.002542            0.001194   \n",
       "Staphylococcus                       0.000701           -0.000169   \n",
       "Filifactor                          -0.000623           -0.001204   \n",
       "Oribacterium                        -0.001179           -0.001863   \n",
       "Burkholderia                        -0.000813           -0.000468   \n",
       "Sneathia                            -0.000662           -0.001539   \n",
       "Treponema                            0.002192            0.001642   \n",
       "Moraxella                            0.001728            0.000690   \n",
       "Haemophilus                          0.002199            0.001748   \n",
       "Selenomonas                          0.000236           -0.002508   \n",
       "Corynebacterium                      0.000871            0.002052   \n",
       "Rhizobium                           -0.001178            0.002336   \n",
       "Bradyrhizobium                      -0.001412            0.002604   \n",
       "Methylobacterium                     0.000172            0.002509   \n",
       "OD1_genera_incertae_sedis           -0.001082            0.000930   \n",
       "Finegoldia                          -0.000235            0.001198   \n",
       "Microbacterium                       0.001879            0.001988   \n",
       "Sphingomonas                         0.002418            0.000438   \n",
       "Chryseobacterium                    -0.000382            0.000638   \n",
       "Bacteroides                         -0.245011            0.000862   \n",
       "Bdellovibrio                         0.000711            0.500066   \n",
       "Streptophyta                        -0.002097            0.000307   \n",
       "Lachnospiracea_incertae_sedis        0.000611            0.000441   \n",
       "Paracoccus                           0.002175            0.001254   \n",
       "Fastidiosipila                       0.001509            0.001189   \n",
       "Pseudonocardia                      -0.002006            0.000840   \n",
       "\n",
       "                               Chloroplast  Rhodobacteraceae  Ruminococcaceae  \\\n",
       "Streptococcus                     0.000119         -0.000395         0.001017   \n",
       "Tropheryma                       -0.000627         -0.001180         0.000498   \n",
       "Veillonella                      -0.000835          0.000868        -0.000093   \n",
       "Actinomyces                       0.000506          0.001746         0.000935   \n",
       "Flavobacterium                   -0.002288         -0.000473         0.000207   \n",
       "Prevotella                        0.001375          0.001720         0.002224   \n",
       "Porphyromonas                    -0.001862         -0.001252        -0.002199   \n",
       "Parvimonas                       -0.001124         -0.001606         0.001382   \n",
       "Fusobacterium                    -0.002223          0.001762         0.000823   \n",
       "Propionibacterium                 0.001609         -0.002072         0.002019   \n",
       "Gemella                          -0.002097          0.000665         0.000311   \n",
       "Rothia                           -0.002253          0.000541        -0.001911   \n",
       "Granulicatella                    0.000617          0.000987         0.002214   \n",
       "Neisseria                        -0.001612         -0.002367         0.000029   \n",
       "Lactobacillus                    -0.001960         -0.000892        -0.000348   \n",
       "Megasphaera                       0.001725         -0.000442        -0.001860   \n",
       "Catonella                        -0.001325          0.001621        -0.002543   \n",
       "Atopobium                        -0.000311         -0.000517        -0.002360   \n",
       "Campylobacter                     0.002216          0.000905        -0.001082   \n",
       "Capnocytophaga                   -0.000899         -0.000698         0.001311   \n",
       "Solobacterium                    -0.001051          0.001998         0.000967   \n",
       "Moryella                         -0.000926         -0.000935        -0.001598   \n",
       "TM7_genera_incertae_sedis        -0.002605         -0.001057        -0.002084   \n",
       "Staphylococcus                    0.000990          0.000618        -0.000168   \n",
       "Filifactor                        0.000031         -0.001381         0.001905   \n",
       "Oribacterium                     -0.001162         -0.002555         0.001609   \n",
       "Burkholderia                     -0.002416          0.000135         0.002570   \n",
       "Sneathia                          0.001669          0.002037         0.000398   \n",
       "Treponema                         0.000621         -0.001147        -0.000879   \n",
       "Moraxella                         0.002302         -0.001036        -0.000683   \n",
       "Haemophilus                       0.001484          0.000587        -0.001630   \n",
       "Selenomonas                      -0.001486         -0.000543         0.002183   \n",
       "Corynebacterium                  -0.002315         -0.000126        -0.002515   \n",
       "Rhizobium                        -0.001794          0.002246        -0.001686   \n",
       "Bradyrhizobium                   -0.002196         -0.001627         0.002363   \n",
       "Methylobacterium                  0.001724          0.002507         0.001646   \n",
       "OD1_genera_incertae_sedis        -0.001994         -0.002053        -0.000746   \n",
       "Finegoldia                        0.001882         -0.002435        -0.000019   \n",
       "Microbacterium                    0.000969          0.002134        -0.002174   \n",
       "Sphingomonas                     -0.001339          0.002318        -0.000582   \n",
       "Chryseobacterium                 -0.000003         -0.001215         0.001141   \n",
       "Bacteroides                      -0.001540          0.001754        -0.000828   \n",
       "Bdellovibrio                     -0.002022          0.002361        -0.002546   \n",
       "Streptophyta                     -0.177160         -0.000054         0.000118   \n",
       "Lachnospiracea_incertae_sedis    -0.000069         -0.002427         0.000043   \n",
       "Paracoccus                        0.000410         -0.099903         0.001522   \n",
       "Fastidiosipila                   -0.001760          0.001826         0.147483   \n",
       "Pseudonocardia                    0.002136          0.000086        -0.001778   \n",
       "\n",
       "                               Pseudonocardiaceae  \n",
       "Streptococcus                            0.000939  \n",
       "Tropheryma                              -0.001376  \n",
       "Veillonella                             -0.000283  \n",
       "Actinomyces                              0.000509  \n",
       "Flavobacterium                          -0.000386  \n",
       "Prevotella                               0.002091  \n",
       "Porphyromonas                           -0.002171  \n",
       "Parvimonas                              -0.001013  \n",
       "Fusobacterium                            0.001576  \n",
       "Propionibacterium                       -0.001346  \n",
       "Gemella                                  0.000977  \n",
       "Rothia                                   0.000628  \n",
       "Granulicatella                           0.000155  \n",
       "Neisseria                               -0.001042  \n",
       "Lactobacillus                            0.002562  \n",
       "Megasphaera                              0.000489  \n",
       "Catonella                                0.001077  \n",
       "Atopobium                               -0.000080  \n",
       "Campylobacter                            0.002206  \n",
       "Capnocytophaga                          -0.001751  \n",
       "Solobacterium                           -0.000758  \n",
       "Moryella                                 0.000601  \n",
       "TM7_genera_incertae_sedis                0.001542  \n",
       "Staphylococcus                           0.000820  \n",
       "Filifactor                              -0.000440  \n",
       "Oribacterium                             0.000809  \n",
       "Burkholderia                            -0.000678  \n",
       "Sneathia                                -0.001446  \n",
       "Treponema                               -0.000846  \n",
       "Moraxella                                0.000977  \n",
       "Haemophilus                             -0.000196  \n",
       "Selenomonas                              0.001498  \n",
       "Corynebacterium                          0.002106  \n",
       "Rhizobium                               -0.000595  \n",
       "Bradyrhizobium                          -0.001423  \n",
       "Methylobacterium                        -0.000213  \n",
       "OD1_genera_incertae_sedis                0.001659  \n",
       "Finegoldia                              -0.002344  \n",
       "Microbacterium                           0.000613  \n",
       "Sphingomonas                            -0.001829  \n",
       "Chryseobacterium                         0.001069  \n",
       "Bacteroides                             -0.002447  \n",
       "Bdellovibrio                             0.001664  \n",
       "Streptophyta                             0.000620  \n",
       "Lachnospiracea_incertae_sedis           -0.001067  \n",
       "Paracoccus                              -0.000144  \n",
       "Fastidiosipila                           0.000021  \n",
       "Pseudonocardia                           0.045367  \n",
       "\n",
       "[48 rows x 40 columns]"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trained_weight_list[0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 9. Taxa selection performance\n",
    "\n",
    "If we know the true disease path, we can calculate the taxa selection performance by `deepbiome_taxa_selection_performance` funciton. First, we prepared the true weight list based on the true disease path. For each fold, we prepared 4 weights from the 5 layers (`[genus to family, family to order, order to Class, class to phylum]`). An example of the list of the true weights from each fold is as follow:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|<ipython-input-44-7f16305fbcb7>:2] (5, 4)\n"
     ]
    }
   ],
   "source": [
    "true_tree_weight_list = np.load(resource_filename('deepbiome', 'tests/data/true_weight_list.npy'), allow_pickle=True)\n",
    "log.info(true_tree_weight_list.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The first weight between the genus and family layers for first epoch has the shape below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|<ipython-input-45-7f1406e7d9a7>:1] (48, 40)\n"
     ]
    }
   ],
   "source": [
    "log.info(true_tree_weight_list[0][0].shape)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1., 0., 0., ..., 0., 0., 0.],\n",
       "       [0., 1., 0., ..., 0., 0., 0.],\n",
       "       [0., 0., 1., ..., 0., 0., 0.],\n",
       "       ...,\n",
       "       [0., 0., 0., ..., 0., 0., 0.],\n",
       "       [0., 0., 0., ..., 0., 1., 0.],\n",
       "       [0., 0., 0., ..., 0., 0., 1.]], dtype=float32)"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "true_tree_weight_list[0][0]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We will calculate the taxa selection performance of the trained weight below:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['./example_result//weight_0.h5',\n",
       " './example_result//weight_1.h5',\n",
       " './example_result//weight_2.h5',\n",
       " './example_result//weight_3.h5',\n",
       " './example_result//weight_4.h5']"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trained_weight_path_list = ['%s/weight_%d.h5' % (prediction_path_info['model_info']['model_dir'], i) for i in range(5)]\n",
    "trained_weight_path_list"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "This is the summary of the taxa selection accuracy of trained weights from each fold."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n"
     ]
    }
   ],
   "source": [
    "summary = deepbiome.deepbiome_taxa_selection_performance(log, network_info, path_info, num_classes=1, \n",
    "                                                         true_tree_weight_list=true_tree_weight_list, \n",
    "                                                         trained_weight_path_list = trained_weight_path_list)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Model</th>\n",
       "      <th>PhyloTree</th>\n",
       "      <th>No. true taxa</th>\n",
       "      <th>No. total taxa</th>\n",
       "      <th>Sensitivity_mean</th>\n",
       "      <th>Sensitivity_std</th>\n",
       "      <th>Specificity_mean</th>\n",
       "      <th>Specificity_std</th>\n",
       "      <th>Gmeasure_mean</th>\n",
       "      <th>Gmeasure_std</th>\n",
       "      <th>Accuracy_mean</th>\n",
       "      <th>Accuracy_std</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>./example_result/</td>\n",
       "      <td>Genus</td>\n",
       "      <td>31</td>\n",
       "      <td>48</td>\n",
       "      <td>0.961290</td>\n",
       "      <td>0.024140</td>\n",
       "      <td>0.987718</td>\n",
       "      <td>0.004037</td>\n",
       "      <td>0.974357</td>\n",
       "      <td>0.013915</td>\n",
       "      <td>0.987292</td>\n",
       "      <td>0.004302</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td></td>\n",
       "      <td>Family</td>\n",
       "      <td>23</td>\n",
       "      <td>40</td>\n",
       "      <td>0.982609</td>\n",
       "      <td>0.021300</td>\n",
       "      <td>0.981271</td>\n",
       "      <td>0.000834</td>\n",
       "      <td>0.981883</td>\n",
       "      <td>0.010765</td>\n",
       "      <td>0.981304</td>\n",
       "      <td>0.001065</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td></td>\n",
       "      <td>Order</td>\n",
       "      <td>9</td>\n",
       "      <td>23</td>\n",
       "      <td>0.911111</td>\n",
       "      <td>0.083148</td>\n",
       "      <td>0.962827</td>\n",
       "      <td>0.005339</td>\n",
       "      <td>0.935586</td>\n",
       "      <td>0.042633</td>\n",
       "      <td>0.961637</td>\n",
       "      <td>0.005115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td></td>\n",
       "      <td>Class</td>\n",
       "      <td>7</td>\n",
       "      <td>17</td>\n",
       "      <td>0.971429</td>\n",
       "      <td>0.057143</td>\n",
       "      <td>0.928767</td>\n",
       "      <td>0.009291</td>\n",
       "      <td>0.949553</td>\n",
       "      <td>0.032985</td>\n",
       "      <td>0.930719</td>\n",
       "      <td>0.011396</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "               Model PhyloTree No. true taxa No. total taxa  Sensitivity_mean  \\\n",
       "0  ./example_result/     Genus            31             48          0.961290   \n",
       "1                       Family            23             40          0.982609   \n",
       "2                        Order             9             23          0.911111   \n",
       "3                        Class             7             17          0.971429   \n",
       "\n",
       "   Sensitivity_std  Specificity_mean  Specificity_std  Gmeasure_mean  \\\n",
       "0         0.024140          0.987718         0.004037       0.974357   \n",
       "1         0.021300          0.981271         0.000834       0.981883   \n",
       "2         0.083148          0.962827         0.005339       0.935586   \n",
       "3         0.057143          0.928767         0.009291       0.949553   \n",
       "\n",
       "   Gmeasure_std  Accuracy_mean  Accuracy_std  \n",
       "0      0.013915       0.987292      0.004302  \n",
       "1      0.010765       0.981304      0.001065  \n",
       "2      0.042633       0.961637      0.005115  \n",
       "3      0.032985       0.930719      0.011396  "
      ]
     },
     "execution_count": 49,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "summary"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 10. Draw phylogenetic tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n"
     ]
    },
    {
     "data": {
      "image/png": "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\niIiIe/D/K5mCWnvjO68AAAAASUVORK5CYII=\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "phylumn_color = ['lightsteelblue', \n",
    "                 'moccasin',\n",
    "                 'darkseagreen',\n",
    "                 'khaki',\n",
    "                 'mediumturquoise',\n",
    "                 'lightblue',\n",
    "                 'thistle',\n",
    "                 'tan',\n",
    "                 'mistyrose',\n",
    "                ]\n",
    "\n",
    "deepbiome.deepbiome_draw_phylogenetic_tree(log, network_info, path_info, num_classes=1,\n",
    "                                 file_name='%%inline', img_w=500, branch_vertical_margin=20, arc_start=0, arc_span=360, \n",
    "                                 node_name_on=False, name_fsize=50, \n",
    "                                 tree_weight_on=True, tree_weight=trained_weight_list[:4],\n",
    "                                 weight_opacity=0.8, weight_max_radios=20, \n",
    "                                 background_color_on=True, phylumn_color=phylumn_color)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### With name"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n6db5RTZuWgAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<IPython.core.display.Image object>"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "deepbiome.deepbiome_draw_phylogenetic_tree(log, network_info, path_info, num_classes=1,\n",
    "                                 file_name='%%inline', img_w=500, branch_vertical_margin=20, arc_start=0, arc_span=360, \n",
    "                                 node_name_on=True, name_fsize=30, \n",
    "                                 tree_weight_on=True, tree_weight=trained_weight_list[:4],\n",
    "                                 weight_opacity=0.8, weight_max_radios=20, \n",
    "                                 background_color_on=True, phylumn_color=phylumn_color)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## 11. Using covariates\n",
    "\n",
    "We can use covariates for training the DeepBiome network."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below is an example of the input files for the continuous covariates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ages</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>59.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>45.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>42.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>50.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>69.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>37.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>66.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>75.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>32.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>72.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>65.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>58.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>41.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>49.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>49.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>70.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>64.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>33.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>74.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>56.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>37.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>51.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>34.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>46.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>44.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>60.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>46.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>37.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>58.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>970</th>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>971</th>\n",
       "      <td>78.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>972</th>\n",
       "      <td>32.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>973</th>\n",
       "      <td>62.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>974</th>\n",
       "      <td>47.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>975</th>\n",
       "      <td>47.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>976</th>\n",
       "      <td>65.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>977</th>\n",
       "      <td>68.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>978</th>\n",
       "      <td>45.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>979</th>\n",
       "      <td>43.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>980</th>\n",
       "      <td>31.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>981</th>\n",
       "      <td>45.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>982</th>\n",
       "      <td>64.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>983</th>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>984</th>\n",
       "      <td>36.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>985</th>\n",
       "      <td>59.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>986</th>\n",
       "      <td>78.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>987</th>\n",
       "      <td>49.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>988</th>\n",
       "      <td>33.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>989</th>\n",
       "      <td>60.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>990</th>\n",
       "      <td>48.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991</th>\n",
       "      <td>75.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>992</th>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>993</th>\n",
       "      <td>39.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>994</th>\n",
       "      <td>49.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>71.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>34.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>48.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>38.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>52.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     ages\n",
       "0    59.0\n",
       "1    45.0\n",
       "2    42.0\n",
       "3    50.0\n",
       "4    69.0\n",
       "5    37.0\n",
       "6    66.0\n",
       "7    75.0\n",
       "8    32.0\n",
       "9    72.0\n",
       "10   65.0\n",
       "11   58.0\n",
       "12   41.0\n",
       "13   49.0\n",
       "14   49.0\n",
       "15   70.0\n",
       "16   64.0\n",
       "17   33.0\n",
       "18   74.0\n",
       "19   56.0\n",
       "20   37.0\n",
       "21   38.0\n",
       "22   51.0\n",
       "23   34.0\n",
       "24   46.0\n",
       "25   44.0\n",
       "26   60.0\n",
       "27   46.0\n",
       "28   37.0\n",
       "29   58.0\n",
       "..    ...\n",
       "970  38.0\n",
       "971  78.0\n",
       "972  32.0\n",
       "973  62.0\n",
       "974  47.0\n",
       "975  47.0\n",
       "976  65.0\n",
       "977  68.0\n",
       "978  45.0\n",
       "979  43.0\n",
       "980  31.0\n",
       "981  45.0\n",
       "982  64.0\n",
       "983  36.0\n",
       "984  36.0\n",
       "985  59.0\n",
       "986  78.0\n",
       "987  49.0\n",
       "988  33.0\n",
       "989  60.0\n",
       "990  48.0\n",
       "991  75.0\n",
       "992  38.0\n",
       "993  39.0\n",
       "994  49.0\n",
       "995  71.0\n",
       "996  34.0\n",
       "997  48.0\n",
       "998  38.0\n",
       "999  52.0\n",
       "\n",
       "[1000 rows x 1 columns]"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_csv(resource_filename('deepbiome', 'tests/data/ages.csv'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Below is an example of the input files for the categorical covariates. We assume that the file contains all of the catetogories for one-hot encoding."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>gender</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>970</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>971</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>972</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>973</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>974</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>975</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>976</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>977</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>978</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>979</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>980</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>981</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>982</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>983</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>984</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>985</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>986</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>987</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>988</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>989</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>990</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>992</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>993</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>994</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     gender\n",
       "0         1\n",
       "1         0\n",
       "2         1\n",
       "3         1\n",
       "4         1\n",
       "5         0\n",
       "6         1\n",
       "7         1\n",
       "8         0\n",
       "9         0\n",
       "10        0\n",
       "11        1\n",
       "12        0\n",
       "13        1\n",
       "14        1\n",
       "15        1\n",
       "16        0\n",
       "17        0\n",
       "18        1\n",
       "19        1\n",
       "20        0\n",
       "21        0\n",
       "22        1\n",
       "23        0\n",
       "24        1\n",
       "25        0\n",
       "26        0\n",
       "27        0\n",
       "28        1\n",
       "29        1\n",
       "..      ...\n",
       "970       1\n",
       "971       1\n",
       "972       0\n",
       "973       1\n",
       "974       0\n",
       "975       1\n",
       "976       0\n",
       "977       1\n",
       "978       1\n",
       "979       1\n",
       "980       1\n",
       "981       1\n",
       "982       0\n",
       "983       0\n",
       "984       0\n",
       "985       1\n",
       "986       0\n",
       "987       0\n",
       "988       1\n",
       "989       0\n",
       "990       0\n",
       "991       1\n",
       "992       1\n",
       "993       1\n",
       "994       0\n",
       "995       0\n",
       "996       0\n",
       "997       1\n",
       "998       0\n",
       "999       1\n",
       "\n",
       "[1000 rows x 1 columns]"
      ]
     },
     "execution_count": 53,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_csv(resource_filename('deepbiome', 'tests/data/gender.csv'))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ethnicity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>20</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>21</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>23</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>24</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>26</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>27</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>28</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>29</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>970</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>971</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>972</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>973</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>974</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>975</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>976</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>977</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>978</th>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>979</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>980</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>981</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>982</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>983</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>984</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>985</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>986</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>987</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>988</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>989</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>990</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>991</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>992</th>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>993</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>994</th>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>995</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>996</th>\n",
       "      <td>2</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>997</th>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>998</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>999</th>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1000 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     ethnicity\n",
       "0            4\n",
       "1            0\n",
       "2            0\n",
       "3            4\n",
       "4            4\n",
       "5            2\n",
       "6            3\n",
       "7            0\n",
       "8            2\n",
       "9            5\n",
       "10           2\n",
       "11           3\n",
       "12           5\n",
       "13           3\n",
       "14           0\n",
       "15           0\n",
       "16           4\n",
       "17           5\n",
       "18           1\n",
       "19           1\n",
       "20           4\n",
       "21           4\n",
       "22           1\n",
       "23           0\n",
       "24           1\n",
       "25           3\n",
       "26           1\n",
       "27           4\n",
       "28           4\n",
       "29           3\n",
       "..         ...\n",
       "970          1\n",
       "971          0\n",
       "972          0\n",
       "973          5\n",
       "974          3\n",
       "975          2\n",
       "976          1\n",
       "977          5\n",
       "978          4\n",
       "979          1\n",
       "980          0\n",
       "981          3\n",
       "982          3\n",
       "983          5\n",
       "984          5\n",
       "985          5\n",
       "986          3\n",
       "987          1\n",
       "988          2\n",
       "989          2\n",
       "990          0\n",
       "991          5\n",
       "992          3\n",
       "993          5\n",
       "994          5\n",
       "995          2\n",
       "996          2\n",
       "997          1\n",
       "998          0\n",
       "999          0\n",
       "\n",
       "[1000 rows x 1 columns]"
      ]
     },
     "execution_count": 54,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pd.read_csv(resource_filename('deepbiome', 'tests/data/ethnicity.csv'))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For using the covariates, we have to set the `covariates_info` field in the configuration for the path informations. If we don't specify the `covariates_info`, than the DeepBiome will train the model without any covariates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "network_info_with_covariates = {\n",
    "    'architecture_info': {\n",
    "        'batch_normalization': 'False',\n",
    "        'drop_out': '0',\n",
    "        'weight_initial': 'glorot_uniform',\n",
    "        'weight_l1_penalty':'0.',\n",
    "        'weight_decay': 'phylogenetic_tree',\n",
    "    },\n",
    "    'model_info': {\n",
    "        'lr': '0.01',\n",
    "        'decay': '0.001',\n",
    "        'loss': 'binary_crossentropy',\n",
    "        'metrics': 'binary_accuracy, sensitivity, specificity, gmeasure',\n",
    "        'taxa_selection_metrics': 'sensitivity, specificity, gmeasure, accuracy',\n",
    "        'network_class': 'DeepBiomeNetwork',\n",
    "        'optimizer': 'adam',\n",
    "        'reader_class': 'MicroBiomeClassificationReader',\n",
    "        'normalizer': 'normalize_minmax',\n",
    "    },\n",
    "    'training_info': {\n",
    "        'epochs': '10',\n",
    "        'batch_size': '50', \n",
    "        'callbacks': 'ModelCheckpoint',\n",
    "        'monitor': 'val_loss',\n",
    "        'mode' : 'min',\n",
    "        'min_delta': '1e-7',\n",
    "    },\n",
    "    'validation_info': {\n",
    "        'batch_size': 'None', \n",
    "        'validation_size': '0.2'\n",
    "    },\n",
    "    'test_info': {\n",
    "        'batch_size': 'None'\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {
    "collapsed": true
   },
   "outputs": [],
   "source": [
    "path_info_with_covariates = {\n",
    "    'data_info': {\n",
    "        'data_path': resource_filename('deepbiome', 'tests/data'),\n",
    "        'idx_path': resource_filename('deepbiome', 'tests/data/onefile_idx.csv'),\n",
    "        'tree_info_path': resource_filename('deepbiome', 'tests/data/genus48_dic.csv'),\n",
    "        'x_path': 'onefile_x.csv',\n",
    "        'y_path': 'classification_y.csv'\n",
    "    },\n",
    "    'model_info': {\n",
    "        'evaluation': 'eval.npy',\n",
    "        'history': 'hist.json',\n",
    "        'model_dir': './example_result/',\n",
    "        'weight': 'weight.h5'\n",
    "    },\n",
    "    'covariates_info':{\n",
    "#         'continuous_variables':'ages.csv, weights.csv',\n",
    "#         'categorical_variables':'gender.csv, ethnicity.csv',\n",
    "        'continuous_variables':','.join([resource_filename('deepbiome', 'tests/data/ages.csv'),\n",
    "                                         resource_filename('deepbiome', 'tests/data/weights.csv')]),\n",
    "        'categorical_variables':','.join([resource_filename('deepbiome', 'tests/data/gender.csv'),\n",
    "                                         resource_filename('deepbiome', 'tests/data/ethnicity.csv')]),\n",
    "    }\n",
    "}"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can use the same `deepbiome_train` function when we train the network with covariates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|deepbiome.py:105] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:143] -------1 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:153] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:154] Build network for 1 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:527] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:528] Phylogenetic_tree_dict info: ['Family', 'Number', 'Genus', 'Phylum', 'Order', 'Class']\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:552] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:561] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:562] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:644] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_3\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input (InputLayer)              (None, 48)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "l1_dense (Dense_with_tree)      (None, 40)           1960        input[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "l1_activation (Activation)      (None, 40)           0           l1_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l2_dense (Dense_with_tree)      (None, 23)           943         l1_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l2_activation (Activation)      (None, 23)           0           l2_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l3_dense (Dense_with_tree)      (None, 17)           408         l2_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l3_activation (Activation)      (None, 17)           0           l3_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l4_dense (Dense_with_tree)      (None, 9)            162         l3_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l4_activation (Activation)      (None, 9)            0           l4_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "covariates_input (InputLayer)   (None, 8)            0                                            \n",
      "__________________________________________________________________________________________________\n",
      "biome_covariates_concat (Concat (None, 17)           0           l4_activation[0][0]              \n",
      "                                                                 covariates_input[0][0]           \n",
      "__________________________________________________________________________________________________\n",
      "last_dense_h (Dense)            (None, 1)            18          biome_covariates_concat[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "p_hat (Activation)              (None, 1)            0           last_dense_h[0][0]               \n",
      "==================================================================================================\n",
      "Total params: 3,491\n",
      "Trainable params: 3,491\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:164] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:165] 1 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 793us/step - loss: 11.0308 - binary_accuracy: 0.3156 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 149us/step - loss: 11.0308 - binary_accuracy: 0.3156 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 150us/step - loss: 11.0308 - binary_accuracy: 0.3156 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 11.0308 - binary_accuracy: 0.3156 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 148us/step - loss: 11.0308 - binary_accuracy: 0.3156 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 143us/step - loss: 11.0308 - binary_accuracy: 0.3156 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - ETA: 0s - loss: 11.0570 - binary_accuracy: 0.3140 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+0 - 0s 146us/step - loss: 11.0308 - binary_accuracy: 0.3156 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 147us/step - loss: 11.0308 - binary_accuracy: 0.3156 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 148us/step - loss: 11.0308 - binary_accuracy: 0.3156 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 11.0308 - binary_accuracy: 0.3156 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 11.1819 - val_binary_accuracy: 0.3063 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 3.370244264602661!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_0.h5 \n",
      "[root    |DEBUG|deepbiome.py:173] Save weight at ./example_result/weight_0.h5\n",
      "[root    |DEBUG|deepbiome.py:176] Save history at ./example_result/hist_0.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 4us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.011050939559936523!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [11.061043739318848, 0.3137499988079071, 0.0, 1.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 12us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008867025375366211!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [11.121485710144043, 0.3100000023841858, 0.0, 1.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:187] Compute time : 3.939692497253418\n",
      "[root    |INFO|deepbiome.py:188] 1 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:143] -------2 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:153] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:154] Build network for 2 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:527] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:528] Phylogenetic_tree_dict info: ['Family', 'Number', 'Genus', 'Phylum', 'Order', 'Class']\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:552] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:561] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:562] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:644] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input (InputLayer)              (None, 48)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "l1_dense (Dense_with_tree)      (None, 40)           1960        input[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "l1_activation (Activation)      (None, 40)           0           l1_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l2_dense (Dense_with_tree)      (None, 23)           943         l1_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l2_activation (Activation)      (None, 23)           0           l2_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l3_dense (Dense_with_tree)      (None, 17)           408         l2_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l3_activation (Activation)      (None, 17)           0           l3_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l4_dense (Dense_with_tree)      (None, 9)            162         l3_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l4_activation (Activation)      (None, 9)            0           l4_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "covariates_input (InputLayer)   (None, 8)            0                                            \n",
      "__________________________________________________________________________________________________\n",
      "biome_covariates_concat (Concat (None, 17)           0           l4_activation[0][0]              \n",
      "                                                                 covariates_input[0][0]           \n",
      "__________________________________________________________________________________________________\n",
      "last_dense_h (Dense)            (None, 1)            18          biome_covariates_concat[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "p_hat (Activation)              (None, 1)            0           last_dense_h[0][0]               \n",
      "==================================================================================================\n",
      "Total params: 3,491\n",
      "Trainable params: 3,491\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:164] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:165] 2 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 870us/step - loss: 1.6402 - binary_accuracy: 0.5734 - sensitivity: 0.6989 - specificity: 0.2752 - gmeasure: 0.3331 - val_loss: 1.0932 - val_binary_accuracy: 0.7188 - val_sensitivity: 0.9330 - val_specificity: 0.1400 - val_gmeasure: 0.3046\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 141us/step - loss: 1.2037 - binary_accuracy: 0.5875 - sensitivity: 0.6982 - specificity: 0.3079 - gmeasure: 0.4131 - val_loss: 0.8688 - val_binary_accuracy: 0.6000 - val_sensitivity: 0.6372 - val_specificity: 0.4239 - val_gmeasure: 0.5188\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 133us/step - loss: 0.9220 - binary_accuracy: 0.6094 - sensitivity: 0.7639 - specificity: 0.2069 - gmeasure: 0.3700 - val_loss: 0.6739 - val_binary_accuracy: 0.6938 - val_sensitivity: 0.9059 - val_specificity: 0.1400 - val_gmeasure: 0.2986\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.7309 - binary_accuracy: 0.6359 - sensitivity: 0.8530 - specificity: 0.1061 - gmeasure: 0.2823 - val_loss: 0.6092 - val_binary_accuracy: 0.6938 - val_sensitivity: 0.9195 - val_specificity: 0.1015 - val_gmeasure: 0.2092\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 140us/step - loss: 0.6272 - binary_accuracy: 0.6922 - sensitivity: 0.9416 - specificity: 0.0627 - gmeasure: 0.1505 - val_loss: 0.5951 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 146us/step - loss: 0.6134 - binary_accuracy: 0.7094 - sensitivity: 0.9836 - specificity: 0.0247 - gmeasure: 0.0553 - val_loss: 0.6102 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 149us/step - loss: 0.6122 - binary_accuracy: 0.7156 - sensitivity: 0.9960 - specificity: 0.0134 - gmeasure: 0.0454 - val_loss: 0.6193 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 138us/step - loss: 0.6105 - binary_accuracy: 0.7172 - sensitivity: 0.9939 - specificity: 0.0225 - gmeasure: 0.0702 - val_loss: 0.6031 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 134us/step - loss: 0.6046 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5972 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 147us/step - loss: 0.6027 - binary_accuracy: 0.7156 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.5936 - val_binary_accuracy: 0.7375 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 3.1989731788635254!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_1.h5 \n",
      "[root    |DEBUG|deepbiome.py:173] Save weight at ./example_result/weight_1.h5\n",
      "[root    |DEBUG|deepbiome.py:176] Save history at ./example_result/hist_1.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 4us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008723258972167969!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6002466678619385, 0.7200000286102295, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 12us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008478879928588867!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6041123270988464, 0.7200000286102295, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:187] Compute time : 3.867041826248169\n",
      "[root    |INFO|deepbiome.py:188] 2 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:143] -------3 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:153] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:154] Build network for 3 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:527] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:528] Phylogenetic_tree_dict info: ['Family', 'Number', 'Genus', 'Phylum', 'Order', 'Class']\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:552] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:561] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:562] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:644] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input (InputLayer)              (None, 48)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "l1_dense (Dense_with_tree)      (None, 40)           1960        input[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "l1_activation (Activation)      (None, 40)           0           l1_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l2_dense (Dense_with_tree)      (None, 23)           943         l1_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l2_activation (Activation)      (None, 23)           0           l2_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l3_dense (Dense_with_tree)      (None, 17)           408         l2_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l3_activation (Activation)      (None, 17)           0           l3_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l4_dense (Dense_with_tree)      (None, 9)            162         l3_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l4_activation (Activation)      (None, 9)            0           l4_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "covariates_input (InputLayer)   (None, 8)            0                                            \n",
      "__________________________________________________________________________________________________\n",
      "biome_covariates_concat (Concat (None, 17)           0           l4_activation[0][0]              \n",
      "                                                                 covariates_input[0][0]           \n",
      "__________________________________________________________________________________________________\n",
      "last_dense_h (Dense)            (None, 1)            18          biome_covariates_concat[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "p_hat (Activation)              (None, 1)            0           last_dense_h[0][0]               \n",
      "==================================================================================================\n",
      "Total params: 3,491\n",
      "Trainable params: 3,491\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:164] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:165] 3 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 925us/step - loss: 3.1051 - binary_accuracy: 0.6547 - sensitivity: 0.8975 - specificity: 0.0839 - gmeasure: 0.1502 - val_loss: 1.9541 - val_binary_accuracy: 0.5437 - val_sensitivity: 0.6462 - val_specificity: 0.3684 - val_gmeasure: 0.4748\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 137us/step - loss: 2.0845 - binary_accuracy: 0.5031 - sensitivity: 0.5544 - specificity: 0.3926 - gmeasure: 0.4546 - val_loss: 1.6140 - val_binary_accuracy: 0.6000 - val_sensitivity: 0.7376 - val_specificity: 0.2122 - val_gmeasure: 0.3302\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 148us/step - loss: 1.6169 - binary_accuracy: 0.5969 - sensitivity: 0.7708 - specificity: 0.2149 - gmeasure: 0.3983 - val_loss: 1.2492 - val_binary_accuracy: 0.6125 - val_sensitivity: 0.7509 - val_specificity: 0.2122 - val_gmeasure: 0.3337\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 145us/step - loss: 1.1983 - binary_accuracy: 0.5359 - sensitivity: 0.6468 - specificity: 0.2868 - gmeasure: 0.4234 - val_loss: 0.9343 - val_binary_accuracy: 0.6313 - val_sensitivity: 0.8563 - val_specificity: 0.0934 - val_gmeasure: 0.1994\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 0.8456 - binary_accuracy: 0.5859 - sensitivity: 0.7559 - specificity: 0.1961 - gmeasure: 0.3748 - val_loss: 0.7038 - val_binary_accuracy: 0.6062 - val_sensitivity: 0.7490 - val_specificity: 0.3061 - val_gmeasure: 0.4625\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 147us/step - loss: 0.6662 - binary_accuracy: 0.6594 - sensitivity: 0.9289 - specificity: 0.0379 - gmeasure: 0.0946 - val_loss: 0.6245 - val_binary_accuracy: 0.7063 - val_sensitivity: 1.0000 - val_specificity: 0.0119 - val_gmeasure: 0.0546\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 143us/step - loss: 0.6234 - binary_accuracy: 0.6938 - sensitivity: 0.9934 - specificity: 0.0055 - gmeasure: 0.0203 - val_loss: 0.6298 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 145us/step - loss: 0.6310 - binary_accuracy: 0.7000 - sensitivity: 0.9913 - specificity: 0.0322 - gmeasure: 0.0965 - val_loss: 0.6170 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 148us/step - loss: 0.6396 - binary_accuracy: 0.6922 - sensitivity: 0.9759 - specificity: 0.0446 - gmeasure: 0.0963 - val_loss: 0.6137 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 147us/step - loss: 0.6331 - binary_accuracy: 0.6797 - sensitivity: 0.9526 - specificity: 0.0480 - gmeasure: 0.1055 - val_loss: 0.6312 - val_binary_accuracy: 0.7000 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 3.3678383827209473!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_2.h5 \n",
      "[root    |DEBUG|deepbiome.py:173] Save weight at ./example_result/weight_2.h5\n",
      "[root    |DEBUG|deepbiome.py:176] Save history at ./example_result/hist_2.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 4us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.010402917861938477!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6186819076538086, 0.6974999904632568, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 12us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.00888514518737793!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.682464599609375, 0.6549999713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:187] Compute time : 4.1895434856414795\n",
      "[root    |INFO|deepbiome.py:188] 3 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:143] -------4 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:153] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:154] Build network for 4 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:527] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:528] Phylogenetic_tree_dict info: ['Family', 'Number', 'Genus', 'Phylum', 'Order', 'Class']\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:552] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:561] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:562] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:644] ------------------------------------------------------------------------------------------\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input (InputLayer)              (None, 48)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "l1_dense (Dense_with_tree)      (None, 40)           1960        input[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "l1_activation (Activation)      (None, 40)           0           l1_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l2_dense (Dense_with_tree)      (None, 23)           943         l1_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l2_activation (Activation)      (None, 23)           0           l2_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l3_dense (Dense_with_tree)      (None, 17)           408         l2_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l3_activation (Activation)      (None, 17)           0           l3_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l4_dense (Dense_with_tree)      (None, 9)            162         l3_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l4_activation (Activation)      (None, 9)            0           l4_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "covariates_input (InputLayer)   (None, 8)            0                                            \n",
      "__________________________________________________________________________________________________\n",
      "biome_covariates_concat (Concat (None, 17)           0           l4_activation[0][0]              \n",
      "                                                                 covariates_input[0][0]           \n",
      "__________________________________________________________________________________________________\n",
      "last_dense_h (Dense)            (None, 1)            18          biome_covariates_concat[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "p_hat (Activation)              (None, 1)            0           last_dense_h[0][0]               \n",
      "==================================================================================================\n",
      "Total params: 3,491\n",
      "Trainable params: 3,491\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n",
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:164] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:165] 4 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 874us/step - loss: 10.8231 - binary_accuracy: 0.3141 - sensitivity: 0.0000e+00 - specificity: 1.0000 - gmeasure: 0.0000e+00 - val_loss: 9.5110 - val_binary_accuracy: 0.3125 - val_sensitivity: 0.0000e+00 - val_specificity: 1.0000 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 150us/step - loss: 5.0928 - binary_accuracy: 0.3844 - sensitivity: 0.1583 - specificity: 0.8765 - gmeasure: 0.1798 - val_loss: 1.4877 - val_binary_accuracy: 0.6125 - val_sensitivity: 0.8401 - val_specificity: 0.1213 - val_gmeasure: 0.2677\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 149us/step - loss: 1.9834 - binary_accuracy: 0.6734 - sensitivity: 0.9634 - specificity: 0.0393 - gmeasure: 0.0893 - val_loss: 2.0587 - val_binary_accuracy: 0.6812 - val_sensitivity: 0.9848 - val_specificity: 0.0147 - val_gmeasure: 0.0606\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 148us/step - loss: 1.3850 - binary_accuracy: 0.6297 - sensitivity: 0.7797 - specificity: 0.2733 - gmeasure: 0.3774 - val_loss: 1.3268 - val_binary_accuracy: 0.4938 - val_sensitivity: 0.5237 - val_specificity: 0.3995 - val_gmeasure: 0.4506\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 146us/step - loss: 1.1959 - binary_accuracy: 0.5281 - sensitivity: 0.5970 - specificity: 0.3926 - gmeasure: 0.4633 - val_loss: 1.1445 - val_binary_accuracy: 0.6062 - val_sensitivity: 0.8818 - val_specificity: 0.0441 - val_gmeasure: 0.1318\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 139us/step - loss: 0.9956 - binary_accuracy: 0.6078 - sensitivity: 0.7753 - specificity: 0.2301 - gmeasure: 0.3889 - val_loss: 0.9241 - val_binary_accuracy: 0.5688 - val_sensitivity: 0.7486 - val_specificity: 0.2218 - val_gmeasure: 0.4064\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 156us/step - loss: 0.8279 - binary_accuracy: 0.5797 - sensitivity: 0.7268 - specificity: 0.2558 - gmeasure: 0.4240 - val_loss: 0.8080 - val_binary_accuracy: 0.6313 - val_sensitivity: 0.9111 - val_specificity: 0.0502 - val_gmeasure: 0.1819\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 148us/step - loss: 0.7334 - binary_accuracy: 0.6094 - sensitivity: 0.8156 - specificity: 0.1764 - gmeasure: 0.3514 - val_loss: 0.7090 - val_binary_accuracy: 0.5750 - val_sensitivity: 0.8052 - val_specificity: 0.0650 - val_gmeasure: 0.1947\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 142us/step - loss: 0.6728 - binary_accuracy: 0.6500 - sensitivity: 0.9177 - specificity: 0.0624 - gmeasure: 0.1607 - val_loss: 0.6633 - val_binary_accuracy: 0.6687 - val_sensitivity: 0.9707 - val_specificity: 0.0147 - val_gmeasure: 0.0597\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 145us/step - loss: 0.6570 - binary_accuracy: 0.6625 - sensitivity: 0.9578 - specificity: 0.0174 - gmeasure: 0.0591 - val_loss: 0.6476 - val_binary_accuracy: 0.6875 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 3.7207281589508057!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_3.h5 \n",
      "[root    |DEBUG|deepbiome.py:173] Save weight at ./example_result/weight_3.h5\n",
      "[root    |DEBUG|deepbiome.py:176] Save history at ./example_result/hist_3.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 4us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.009516477584838867!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6464568376541138, 0.6862499713897705, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 12us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.007961273193359375!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6339042782783508, 0.6899999976158142, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:187] Compute time : 4.281391620635986\n",
      "[root    |INFO|deepbiome.py:188] 4 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:143] -------5 simulation start!----------------------------------\n",
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|deepbiome.py:153] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:154] Build network for 5 simulation\n",
      "[root    |INFO|build_network.py:509] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:510] Read phylogenetic tree information from /DATA/home/muha/github_repos/deepbiome/deepbiome/tests/data/genus48_dic.csv\n",
      "[root    |INFO|build_network.py:515] Phylogenetic tree level list: ['Genus', 'Family', 'Order', 'Class', 'Phylum']\n",
      "[root    |INFO|build_network.py:516] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:523]      Genus: 48\n",
      "[root    |INFO|build_network.py:523]     Family: 40\n",
      "[root    |INFO|build_network.py:523]      Order: 23\n",
      "[root    |INFO|build_network.py:523]      Class: 17\n",
      "[root    |INFO|build_network.py:523]     Phylum: 9\n",
      "[root    |INFO|build_network.py:527] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:528] Phylogenetic_tree_dict info: ['Family', 'Number', 'Genus', 'Phylum', 'Order', 'Class']\n",
      "[root    |INFO|build_network.py:529] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Genus, Family]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [Family,  Order]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Order,  Class]\n",
      "[root    |INFO|build_network.py:539] Build edge weights between [ Class, Phylum]\n",
      "[root    |INFO|build_network.py:552] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:560] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:561] Build network based on phylogenetic tree information\n",
      "[root    |INFO|build_network.py:562] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:644] ------------------------------------------------------------------------------------------\n",
      "[root    |INFO|build_network.py:58] Build Network\n",
      "[root    |INFO|build_network.py:59] Optimizer = adam\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input (InputLayer)              (None, 48)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "l1_dense (Dense_with_tree)      (None, 40)           1960        input[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "l1_activation (Activation)      (None, 40)           0           l1_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l2_dense (Dense_with_tree)      (None, 23)           943         l1_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l2_activation (Activation)      (None, 23)           0           l2_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l3_dense (Dense_with_tree)      (None, 17)           408         l2_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l3_activation (Activation)      (None, 17)           0           l3_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l4_dense (Dense_with_tree)      (None, 9)            162         l3_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l4_activation (Activation)      (None, 9)            0           l4_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "covariates_input (InputLayer)   (None, 8)            0                                            \n",
      "__________________________________________________________________________________________________\n",
      "biome_covariates_concat (Concat (None, 17)           0           l4_activation[0][0]              \n",
      "                                                                 covariates_input[0][0]           \n",
      "__________________________________________________________________________________________________\n",
      "last_dense_h (Dense)            (None, 1)            18          biome_covariates_concat[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "p_hat (Activation)              (None, 1)            0           last_dense_h[0][0]               \n",
      "==================================================================================================\n",
      "Total params: 3,491\n",
      "Trainable params: 3,491\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:60] Loss = binary_crossentropy\n",
      "[root    |INFO|build_network.py:61] Metrics = binary_accuracy, sensitivity, specificity, gmeasure\n",
      "[root    |INFO|deepbiome.py:164] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:165] 5 fold computing start!----------------------------------\n",
      "[root    |INFO|build_network.py:134] Training start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train on 640 samples, validate on 160 samples\n",
      "Epoch 1/10\n",
      "640/640 [==============================] - 1s 856us/step - loss: 0.7637 - binary_accuracy: 0.6187 - sensitivity: 0.7855 - specificity: 0.2426 - gmeasure: 0.1997 - val_loss: 0.6556 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 2/10\n",
      "640/640 [==============================] - 0s 142us/step - loss: 0.6549 - binary_accuracy: 0.6297 - sensitivity: 0.8249 - specificity: 0.1841 - gmeasure: 0.2524 - val_loss: 0.6503 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 3/10\n",
      "640/640 [==============================] - 0s 145us/step - loss: 0.6485 - binary_accuracy: 0.6797 - sensitivity: 0.9913 - specificity: 0.0218 - gmeasure: 0.0538 - val_loss: 0.6177 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 4/10\n",
      "640/640 [==============================] - 0s 146us/step - loss: 0.6494 - binary_accuracy: 0.6750 - sensitivity: 0.9941 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6154 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 5/10\n",
      "640/640 [==============================] - 0s 148us/step - loss: 0.6315 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6165 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 6/10\n",
      "640/640 [==============================] - 0s 144us/step - loss: 0.6374 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6128 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 7/10\n",
      "640/640 [==============================] - 0s 140us/step - loss: 0.6299 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6151 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 8/10\n",
      "640/640 [==============================] - 0s 150us/step - loss: 0.6278 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6133 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 9/10\n",
      "640/640 [==============================] - 0s 146us/step - loss: 0.6320 - binary_accuracy: 0.6812 - sensitivity: 1.0000 - specificity: 0.0070 - gmeasure: 0.0232 - val_loss: 0.6171 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n",
      "Epoch 10/10\n",
      "640/640 [==============================] - 0s 146us/step - loss: 0.6298 - binary_accuracy: 0.6797 - sensitivity: 1.0000 - specificity: 0.0000e+00 - gmeasure: 0.0000e+00 - val_loss: 0.6108 - val_binary_accuracy: 0.6938 - val_sensitivity: 1.0000 - val_specificity: 0.0000e+00 - val_gmeasure: 0.0000e+00\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:84] Load trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |INFO|build_network.py:144] Training end with time 3.1962664127349854!\n",
      "[root    |INFO|build_network.py:80] Saved trained model weight at ./example_result/weight_4.h5 \n",
      "[root    |DEBUG|deepbiome.py:173] Save weight at ./example_result/weight_4.h5\n",
      "[root    |DEBUG|deepbiome.py:176] Save history at ./example_result/hist_4.json\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "800/800 [==============================] - 0s 3us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.009548425674438477!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6201513409614563, 0.6825000047683716, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|build_network.py:170] Evaluation start!\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\r",
      "200/200 [==============================] - 0s 12us/step\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|build_network.py:175] Evaluation end with time 0.008078575134277344!\n",
      "[root    |INFO|build_network.py:176] Evaluation: [0.6084250807762146, 0.7049999833106995, 1.0, 0.0, 0.0]\n",
      "[root    |INFO|deepbiome.py:187] Compute time : 3.716848611831665\n",
      "[root    |INFO|deepbiome.py:188] 5 fold computing end!---------------------------------------------\n",
      "[root    |INFO|deepbiome.py:191] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:193] Train Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure']\n",
      "[root    |INFO|deepbiome.py:196]       mean : [2.7093161 0.62      0.8       0.2       0.       ]\n",
      "[root    |INFO|deepbiome.py:197]        std : [4.17588979 0.1536819  0.4        0.4        0.        ]\n",
      "[root    |INFO|deepbiome.py:198] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:200] Test Evaluation : ['loss' 'binary_accuracy' 'sensitivity' 'specificity' 'gmeasure']\n",
      "[root    |INFO|deepbiome.py:203]       mean : [2.7300784 0.616     0.8       0.2       0.       ]\n",
      "[root    |INFO|deepbiome.py:204]        std : [4.19579622 0.15451213 0.4        0.4        0.        ]\n",
      "[root    |INFO|deepbiome.py:205] -----------------------------------------------------------------\n",
      "[root    |INFO|deepbiome.py:214] Total Computing Ended\n",
      "[root    |INFO|deepbiome.py:215] -----------------------------------------------------------------\n"
     ]
    }
   ],
   "source": [
    "test_evaluation_with_cov, train_evaluation_with_cov, network_with_cov = deepbiome.deepbiome_train(log, network_info_with_covariates, \n",
    "                                                                                                  path_info_with_covariates,\n",
    "                                                                                                  number_of_fold=None)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The DeepBiome used the covariates at the latest hidden layer just before the last prediction layer (`biome_covariates_concat` layer in the above example)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model: \"model_1\"\n",
      "__________________________________________________________________________________________________\n",
      "Layer (type)                    Output Shape         Param #     Connected to                     \n",
      "==================================================================================================\n",
      "input (InputLayer)              (None, 48)           0                                            \n",
      "__________________________________________________________________________________________________\n",
      "l1_dense (Dense_with_tree)      (None, 40)           1960        input[0][0]                      \n",
      "__________________________________________________________________________________________________\n",
      "l1_activation (Activation)      (None, 40)           0           l1_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l2_dense (Dense_with_tree)      (None, 23)           943         l1_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l2_activation (Activation)      (None, 23)           0           l2_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l3_dense (Dense_with_tree)      (None, 17)           408         l2_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l3_activation (Activation)      (None, 17)           0           l3_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "l4_dense (Dense_with_tree)      (None, 9)            162         l3_activation[0][0]              \n",
      "__________________________________________________________________________________________________\n",
      "l4_activation (Activation)      (None, 9)            0           l4_dense[0][0]                   \n",
      "__________________________________________________________________________________________________\n",
      "covariates_input (InputLayer)   (None, 8)            0                                            \n",
      "__________________________________________________________________________________________________\n",
      "biome_covariates_concat (Concat (None, 17)           0           l4_activation[0][0]              \n",
      "                                                                 covariates_input[0][0]           \n",
      "__________________________________________________________________________________________________\n",
      "last_dense_h (Dense)            (None, 1)            18          biome_covariates_concat[0][0]    \n",
      "__________________________________________________________________________________________________\n",
      "p_hat (Activation)              (None, 1)            0           last_dense_h[0][0]               \n",
      "==================================================================================================\n",
      "Total params: 3,491\n",
      "Trainable params: 3,491\n",
      "Non-trainable params: 0\n",
      "__________________________________________________________________________________________________\n"
     ]
    }
   ],
   "source": [
    "network_with_cov.model.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "We can analysis the effects of covariates by checking the trained weights of the last hidden layer."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[root    |INFO|readers.py:57] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:58] Construct Dataset\n",
      "[root    |INFO|readers.py:59] -----------------------------------------------------------------------\n",
      "[root    |INFO|readers.py:60] Load data\n",
      "[root    |INFO|<ipython-input-59-1107d9e6b563>:4] 5\n"
     ]
    }
   ],
   "source": [
    "weight_path = '%s/%s' % (prediction_path_info['model_info']['model_dir'], 'weight_0.h5')\n",
    "trained_weight_list = deepbiome.deepbiome_get_trained_weight(log, network_info_with_covariates, path_info_with_covariates,\n",
    "                                                             num_classes=1, weight_path=weight_path)\n",
    "log.info(len(trained_weight_list))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Firmicutes</th>\n",
       "      <td>-0.239881</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Actinobacteria</th>\n",
       "      <td>0.049999</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bacteroidetes</th>\n",
       "      <td>0.259573</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fusobacteria</th>\n",
       "      <td>0.567935</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Proteobacteria</th>\n",
       "      <td>0.650079</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>TM7</th>\n",
       "      <td>-0.247570</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Spirochaetes</th>\n",
       "      <td>-0.152338</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>OD1</th>\n",
       "      <td>-0.005566</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cyanobacteria_Chloroplast</th>\n",
       "      <td>-0.272390</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ages</th>\n",
       "      <td>-0.164592</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>weights</th>\n",
       "      <td>-0.531559</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>gender_1</th>\n",
       "      <td>0.319808</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ethnicity_1</th>\n",
       "      <td>0.067236</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ethnicity_2</th>\n",
       "      <td>-0.334230</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ethnicity_3</th>\n",
       "      <td>0.443868</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ethnicity_4</th>\n",
       "      <td>-0.525517</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>ethnicity_5</th>\n",
       "      <td>0.254619</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                  0\n",
       "Firmicutes                -0.239881\n",
       "Actinobacteria             0.049999\n",
       "Bacteroidetes              0.259573\n",
       "Fusobacteria               0.567935\n",
       "Proteobacteria             0.650079\n",
       "TM7                       -0.247570\n",
       "Spirochaetes              -0.152338\n",
       "OD1                       -0.005566\n",
       "Cyanobacteria_Chloroplast -0.272390\n",
       "ages                      -0.164592\n",
       "weights                   -0.531559\n",
       "gender_1                   0.319808\n",
       "ethnicity_1                0.067236\n",
       "ethnicity_2               -0.334230\n",
       "ethnicity_3                0.443868\n",
       "ethnicity_4               -0.525517\n",
       "ethnicity_5                0.254619"
      ]
     },
     "execution_count": 60,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "trained_weight_list[4]"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.5.2"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
